<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo个人博客之部署（三）]]></title>
    <url>%2Fhexo%2F3%2F</url>
    <content type="text"><![CDATA[这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。Hexo个人博客之搭建（一）Hexo个人博客之优化（二）Hexo个人博客之部署（三）Hexo个人博客之转移（四）本章主要记录了将自己的博客，从购买自定义域名到，部署到Github，Coding同时收录到百度，Google的具体方法和过程。各种教程网上一搜都是一大把，不过由于时间原因，很多地方都不能用了。所以把自己部署的过程记录了下来，希望能对大家有帮助。具体时间：2018-12-301.购买个性域名估计大家折腾了这么久也就是为 了拥有一个自己的个性站点,所以强烈建议大家为自己的博客站点配置一个独一无二的个性域名.我这里选择阿里旗下的万网。我的域名是www.lixueduan.com大家可以选择一个自己喜欢的域名。等部署完毕就可以通过域名访问自己的博客了。问题：GithubPages/CodingPagesGithub Pages是Github免费提供给开发者的一款托管个人网站的产品。Coding Pages也是Coding免费提供给开发者的一款托管个人网站的产品。关于为什么要部署两次虽然可以根据自定义域名来访问自己的博客了，但是百度谷歌上都搜索不到，那岂不是很难受╮(╯▽╰)╭。所以接下来为了让自己的博客能够被搜索出来，就需要让百度谷歌收录我们的网站。在部署收录过程中发现，Github屏蔽了百度的爬虫，所以搭建上GithubPages的话无法提交至百度，只有Google可以收录。所以为了让百度收录我们网站，就得在Coding上也搭建一个。同时在搭建的过程中发现如果先搭建在Github上，然后再搭建Coding时会出现DNS解析冲突。所以需要：先搭建Coding上的，再搭建Github上的，国外的访问则走Github，国内的访问会走Coding，完美2.部署到CodingPages1.1 注册coding账户点击这里注册Coding](https://coding.net/)1.2 创建新项目注册好后创建一个项目用来部署个人博客，项目路径和项目名称最好和用户名一致1.3 开启CodingPages点击Pages服务，然后一键开启。部署master分支自定义域名 可以填两个 www.xxx.com 和xxx.com绑定自定义域名的时候需要在买域名的地方(我这里是阿里的万网)配置DNS解析1234567添加两条CNAME解析主机记录 一个@，一个www//@就是无前缀，xxx.com, www就是www.xxx.com解析路线 默认就行记录值 lillusory.coding.me //这里改成自己的然后可以开启Https访问。到这里就可以通过个性域名访问啦。不过现在博客代码还没有push到项目里。1.4 Push代码到Coding配置SSH key首先需要配置一个SSHkey，Git有Http协议和Git协议两种。我们这里使用Git协议就需要配置一个SSH key,等会部署到Github上也需要配置这个。具体配置方法如下：Git 配置及SSH key修改站点配置文件这里只配置了Coding，可以先把Github的注释掉12345678# Deployment 部署到云端相关配置## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repository: github: git@github.com:lillusory/lillusory.github.io.git coding: git@git.coding.net:lillusory/lillusory.git branch: master地址在这里：配置好后，运行hexo g时就可以把博客部署到Coding上了，也可以通过个性域名访问了。3.收录到百度3.1网站添加直接百度搜索你的域名,比如我的www.lixueduan.com ，如果没有收录就会提示暂未收录，点击提交网址。点击这个链接进入百度站长平台，登录成功后选择`用户中心–&gt;站点管理–&gt;添加网站输入自己的网站，如www.lixueduan.com 协议头如果开启了https就选https3.2 网站验证然后会验证这个网站是不是你的，选CNAME验证然后去域名哪里添加一条解析即可。记录类型–&gt;CNAME主机记录—&gt;前面那一串l3rUDBLOMX记录值–&gt;后面那个ziyuan.baidu.com其他的都按默认的就行了，添加后别删除，需要一直留着。3.3 站点地图接下来我们需要生成网站地图sitemap,使用sitemap方式向百度提交我们的网址站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。先安装一下，打开你的hexo博客根目录，分别用下面两个命令来安装针对谷歌和百度的插件12npm install hexo-generator-sitemap --save #sitemap.xml适合提交给谷歌搜素引擎npm install hexo-generator-baidu-sitemap --save #baidusitemap.xml适合提交百度搜索引擎在站点配置文件中添加如下代码12345678Plugins:- hexo-generator-baidu-sitemap- hexo-generator-sitemapbaidusitemap: path: baidusitemap.xmlsitemap: path: sitemap.xml在你的博客根目录的public下面发现生成了sitemap.xml以及baidusitemap.xml就表示成功了.然后将博客重新部署后就可以直接访问站点地图了。如https://www.lixueduan.com/baidusitemap.xml然后将这个站点地图提交到百度站点管理--&gt;站点属性--&gt;链接提交--&gt;自动提交--&gt;sitemap完成后就算是提交成功了，百度比较慢，要好几天才能收录。4.部署到GitHub步骤和Coding差不多的。4.1 注册Github账号点这里注册Github账号4.2 创建新仓库也是名字必须和用户名一样，必须按照这个格式username.github.io，例如lillusory.github.io创建好仓库后找到Setings 往下拉，找到Github Pages 设置Custom domain填下自定义域名，如www.lixueduan.com.如果有Enforce HTTPS选项也可以勾上。4.3 Push代码到Github配置SSH key首先需要配置一个SSHkey，Git有Http协议和Git协议两种。我们这里使用Git协议就需要配置一个SSH key,等会部署到Github上也需要配置这个。具体配置方法：Git 配置及SSH key修改站点配置文件repository中添加一个github12345678# Deployment 部署到云端相关配置## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repository: github: git@github.com:lillusory/lillusory.github.io.git coding: git@git.coding.net:lillusory/lillusory.git branch: master配置好后，运行hexo g时就可以把博客同时部署到Coding和Github上了，也可以通过个性域名访问了。5. 收录到Google和百度差不多。5.1网站添加首先进入Google站点平台然后添加资源，注意http和https5.2 验证所有权然后验证所有权,选择DNS供应商供应商选择其他，然后选择添加CNAME记录，在域名解析中添加一条记录。也是添加后不要删除。5.3 站点地图验证后就可以添加站点地图了提交成功后,我们的站点就已经被Google收录了.大概一天就能收录成功，比百度块一些。6. 总结本文主要讲了怎么将博客部署到Coding和Github和怎么让百度,Google收录我们的网站。参考Hexo官方文档基于Hexo的个人博客Hex博客搭建]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo个人博客之转移（四）]]></title>
    <url>%2Fhexo%2F4%2F</url>
    <content type="text"><![CDATA[这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。Hexo个人博客之搭建（一）Hexo个人博客之优化（二）Hexo个人博客之部署（三）Hexo个人博客之转移（四）到此为止，我们已经完成了差不多所有的步骤。1.搭建博客2.优化主题3.部署收录新问题：​ 现在博客只能在自己的电脑上更新，如果换电脑了就很麻烦。配置文件主题什么的都要重新弄。所以网上找了找多台电脑同时操作的办法，我们可以利用Github的分支功能。​ 将博客文件夹下所有文件全push到Github。这样换电脑后直接pull就可以了。1.新建分支1.在Github的lillusory.github.io（hexo仓库）上新建一个分支，例如Hexo，并切换到该分支.2.并在该仓库Settings-&gt;Branches-&gt;Default branch中将默认分支设为Hexo.Hexo分支是博客的开发环境，用来写博客，保存原始文件,master分支用于显示，保存生产的静态文件。3.新建分支后将博客目录下的所有文件上传到该分支，注意由于一个git仓库中不能包含其他仓库，所以需要删除掉主题文件夹中的.git目录。4.如果按照前面的博文添加了背景，则需要删掉站点目录\themes\next\source\lib\canvas-nest文件夹中的.git目录。以后需要更新主题时，可以先克隆到本地在复制到相应目录.2.写博客在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理。依次执行git add .、git commit -m &quot;这里写备注&quot;、git push origin 这里写分支名字指令将改动推送到GitHub（此时当前分支应为hexo）。然后才执行hexo g -d发布网站到master分支上。3.博客转移当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：克隆仓库使用git clone git@github.com:lillusory/lillusory.github.io.git拷贝仓库（默认分支为hexo）；//修改成自己的安装插件 在前面克隆下的项目中安装插件执行命令npm install hexo、npm install、npm install hexo-deployer-git4.参考如何在多台电脑上更新博客]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo个人博客之优化（二）]]></title>
    <url>%2Fhexo%2F2%2F</url>
    <content type="text"><![CDATA[这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。Hexo个人博客之搭建（一）Hexo个人博客之优化（二）Hexo个人博客之部署（三）Hexo个人博客之转移（四）0.选择主题你可以点击这里选择你喜欢的Themes,里面有大量美观的主题我这里用的是简约著称的Next主题.下载主题使用git命令下载该主题到本地.git clone https://github.com/theme-next/hexo-theme-next themes/nextclone成功后,你的Themes文件夹下就会有next主题文件了.Hexo配置文件:都叫_config.yml一份位于站点根目录下，主要包含 Hexo 本身的配置,称为 站点配置文件另一份位于主题目录下主要用于配置主题相关的选项,称为主题配置文件开启主题站点配置文件进行修改: 将theme: landscape修改为 theme: next1.侧边栏头像设置新版next注意引入了该功能,直接在主题配置文件修改即可,如下:123456789# Sidebar Avatar 头像avatar: url: /images/avatar.gif # 圆形头像 rounded: true # 透明度 0~1之间 opacity: 1 # 头像旋转 rotated: true2.设置个人社交图标链接直接在主题配置文件修改即可,如下:123456789101112131415161718192021# Social Links. 社交链接 前面为链接地址 后面是图标 social: GitHub: https://github.com/lillusory || github E-Mail: mailto:xueduan.li@gmail.com || envelope #Weibo: https://weibo.com/yourname || weibo #Google: https://plus.google.com/yourname || google #Twitter: https://twitter.com/yourname || twitter #FB Page: https://www.facebook.com/yourname || facebook #VK Group: https://vk.com/yourname || vk #StackOverflow: https://stackoverflow.com/yourname || stack-overflow #YouTube: https://youtube.com/yourname || youtube #Instagram: https://instagram.com/yourname || instagram #Skype: skype:yourname?call|chat || skype# 图标配置 social_icons: #是否显示图标 enable: true #是否只显示图标 icons_only: false #是否开启图标变化(就是刷新后会变颜色) transition: false3.添加菜单项1.先在主题配置文件修改12345678menu: home: / || home about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive AAAAA: /BBBBB/ || CCC其中AAA 为菜单项的名字,BBB是路径,CCC是菜单项显示的图标next 使用的是 Font Awesome 提供的图标 ,在这里可以选择自己喜欢的图标.2.生成上述路径的文件git命令行输入hexo new page BBB –其中BBB替换为具体的名字,会在站点目录\source下新增一个BBB文件夹,文件夹中有一个index.md文件，需要在文件头中增加一句type: XXX,例如type: categories。这样就会在这个页面显示所有的分类了。3.修改主题文件下的对应语言的配置文件,这里是中文就修改zh-CN.yml12345menu: home: 首页 archives: 归档 AAAA : XXXXAAA为上边的菜单项名字,XXX为中文的名字4.添加RSS1.安装插件首先在Git中运行npm install --save hexo-generator-feed命令,安装插件,插件会放在node_modules文件夹里面.2.修改站点配置文件安装好插件后,打开站点配置文件_config.yml`,在末尾加入以下代码:123# Extensions## Plugins: http://hexo.io/plugins/plugins: hexo-generate-feed3.修改主题配置文件打开主题配置文件_config.yml,找到rss 添加配置:rss: /atom.xml5.设置酷炫动态背景next主题提供了两种背景可以选择.第一种背景（我是用的这种）新版本的next主题的话直接在主题配置文件中,找到canvas-nest 修改为canvas-nest: true,123456789# Canvas-nest# Dependencies: https://github.com/theme-next/theme-next-canvas-nestcanvas_nest: enable: true onmobile: true # display on mobile or not color: '0,0,255' # RGB values, use ',' to separate opacity: 0.5 # the opacity of line: 0~1 zIndex: -1 # z-index property of the background count: 99 # the number of lines进入theme/next目录执行命令git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest第二种背景12345678# JavaScript 3D library.# Dependencies: https://github.com/theme-next/theme-next-three# three_wavesthree_waves: false# canvas_linescanvas_lines: false# canvas_spherecanvas_sphere: false也是需要下载依赖进入theme/next目录执行命令：git clone https://github.com/theme-next/theme-next-three source/lib/three4个背景中只能开启一种背景,不然会出错6.设置网站logo把你的图片放在themes/next/source/images里打开主题配置文件_config.yml ,找到字段favicon: 都修改为对应路径12345favicon: small: /images/favicon-16x16-next.png medium: /images/favicon-32x32-next.png apple_touch_icon: /images/apple-touch-icon-next.png safari_pinned_tab: /images/logo.svg7.实现点击出现桃心效果themes/next/source/js/src里面 新建一个love.js,复制下面的代码进去1!function(e,t,a)&#123;function n()&#123;c(".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText="left:"+d[e].x+"px;top:"+d[e].y+"px;opacity:"+d[e].alpha+";transform:scale("+d[e].scale+","+d[e].scale+") rotate(45deg);background:"+d[e].color+";z-index:99999");requestAnimationFrame(r)&#125;function o()&#123;var t="function"==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement("div");a.className="heart",d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement("style");a.type="text/css";try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName("head")[0].appendChild(a)&#125;function s()&#123;return"rgb("+~~(255*Math.random())+","+~~(255*Math.random())+","+~~(255*Math.random())+")"&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);然后打开\themes\next\layout\_layout.swig文件,在末尾 添加以下代码：12&lt;!-- 页面点击小红心 --&gt;&lt;script type="text/javascript" src="/js/src/love.js"&gt;&lt;/script&gt;8.修改文章内链接文本样式鼠标移动到连接上变颜色修改文件 themes\next\source\css\_common\components\post\post.styl，在末尾添加如下css样式，：1234567891011// 文章内链接文本样式.post-body p a&#123; color: #0593d3; border-bottom: none; border-bottom: 1px solid #0593d3; &amp;:hover &#123; color: #fc6423; border-bottom: none; border-bottom: 1px solid #fc6423; &#125;&#125;9.设置顶部滚动加载条打开next\layout\_partials\head文件，在文件末尾添加以下代码:123456789101112131415&lt;script src="//cdn.bootcss.com/pace/1.0.2/pace.min.js"&gt;&lt;/script&gt;&lt;link href="//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css" rel="stylesheet"&gt;&lt;style&gt; .pace .pace-progress &#123; background: #1E92FB; /*进度条颜色*/ height: 3px; &#125; .pace .pace-progress-inner &#123; box-shadow: 0 0 10px #1E92FB, 0 0 5px #1E92FB; /*阴影颜色*/ &#125; .pace .pace-activity &#123; border-top-color: #1E92FB; /*上边框颜色*/ border-left-color: #1E92FB; /*左边框颜色*/ &#125;&lt;/style&gt;10.在每篇文章末尾统一添加“本文结束”标记在路径 \themes\next\layout\_macro 中新建 page-end-tag.swig 文件,并添加以下内容：123456&lt;!--文字可以自己修改--&gt;&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style="text-align:center;color: #A2CD5A;font-size:15px;"&gt;------------------本文到此结束&lt;i class="fa fa-paw"&gt;&lt;/i&gt;感谢您的阅读------------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt;接着打开\themes\next\layout\_macro\post.swig文件，在post-body 之后， post-footer 之前添加下面的代码12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include 'page-end-tag.swig' %&#125; &#123;% endif %&#125;&lt;/div&gt;然后打开主题配置文件（_config.yml),在末尾添加：123# 文章末尾添加“本文结束”标记page_end_tag: enabled: true11.静态资源压缩Hexo自动生成的html中有很多空白的地方,会影响加载速度,所以最好还是压缩一下.这里使用hexo-neat插件来压缩。安装插件npm install hexo-neat --save在站点配置文件添加配置1234567891011121314151617181920212223242526# hexo-neat# 博文压缩neat_enable: true# 压缩htmlneat_html: enable: true exclude: # 压缩css 跳过min.cssneat_css: enable: true exclude: - '**/*.min.css' # 压缩js 跳过min.jsneat_js: enable: true mangle: true output: compress: exclude: - '**/*.min.js' - '**/jquery.fancybox.pack.js' - '**/index.js' - '**/love.js'# 压缩博文配置结束3.使用以后再执行hexo g命令时就会自动压缩了12.主页文章添加阴影效果打开\themes\next\source\css\_custom\custom.styl,向里面加入：12345678// 主页文章添加阴影效果 .post &#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); &#125;13.修改文章底部的的标签样式打开模板文件/themes/next/layout/_macro/post.swig，找到rel=&quot;tag&quot;&gt;#字段， 将# 换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;,其中tag是你选择标签图标的名字,也是可以自定义的1&lt;a href="&#123;&#123; url_for(tag.path) &#125;&#125;" rel="tag"&gt; &lt;i class="fa fa-tag"&gt;&lt;/i&gt; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;14. 实现文章字数统计和预计阅读时间1.在站点根目录下使用GitBash命令安装 hexo-wordcount插件:1npm install hexo-symbols-count-time --save2.在全局配置文件_config.yml中激活插件:12345symbols_count_time: symbols: true time: true total_symbols: true total_time: true3.在主题的配置文件_config.yml中进行如下配置:1234567#字数统计symbols_count_time: separated_meta: true item_text_post: true item_text_total: true awl: 4 wpm: 275到此,我们就实现了文章字数统计和预估时间的显示功能15.在文章底部增加版权信息修改主题配置文件,找到creative_commons字段12345678910# Creative Commons 4.0 International License.# https://creativecommons.org/share-your-work/licensing-types-examples# Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zerocreative_commons: #选择一个License license: by-nc-sa #是否在侧边栏显示 sidebar: false #是否在文章末尾显示 post: true16.文章置顶打开文件：node_modules/hexo-generator-index/lib/generator.js,将原来的代码用下面的代码替换掉12345678910111213141516171819202122232425262728'use strict';var pagination = require('hexo-pagination');module.exports = function(locals)&#123; var config = this.config; var posts = locals.posts; posts.data = posts.data.sort(function(a, b) &#123; if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义 if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排 else return b.top - a.top; // 否则按照top值降序排 &#125; else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233） return -1; &#125; else if(!a.top &amp;&amp; b.top) &#123; return 1; &#125; else return b.date - a.date; // 都没定义按照文章日期降序排 &#125;); var paginationDir = config.pagination_dir || 'page'; return pagination('', posts, &#123; perPage: config.index_generator.per_page, layout: ['index', 'archive'], format: paginationDir + '/%d/', data: &#123; __index: true &#125; &#125;);&#125;;写文章的时候,在标题加上top值,数值越大排在越前面.1234tag: hexo copyright: truepassword: xxxtop: 15017.在网站底部加上访问量Next主题配置这个就比较方便了打开主题配置文件，找到如下配置：12345678busuanzi_count: enable: true total_visitors: true total_visitors_icon: user total_views: true total_views_icon: eye post_views: true post_views_icon: eye将enable的值由false改为true，便可以看到页脚出现访问量.另外本地预览时访客数异常是正常的,部署至云端后就不会出现这样的问题.18. 网站搜索功能1.安装插件​ 站点目录下执行命令npm install hexo-generator-searchdb --save2.修改站点配置文件12345search: path: search.xml field: post format: html limit: 100003.修改主题配置文件1234567891011# Local search# Dependencies: https://github.com/theme-next/hexo-generator-searchdblocal_search: enable: enable # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1 # unescape html strings to the readable one unescape: false重新开启服务后即可看到效果。TODO开启留言评论功能//TODO 待更新参考Hexo官方文档Next官方文档]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo个人博客之搭建（一）]]></title>
    <url>%2Fhexo%2F1%2F</url>
    <content type="text"><![CDATA[这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。Hexo个人博客之搭建（一）Hexo个人博客之优化（二）Hexo个人博客之部署（三）Hexo个人博客之转移（四）1.环境准备Git Git下载地址Node.js Node.js下载地址小白式安装，一直下一步就ok了。都安装好后就可以开始安装Hexo啦.2.安装Hexo1.新建一个文件夹,用于安装Hexo,以后这个就是放博客文件的.2.在此文件夹右键,Git Bash Here,打开Git3.安装Hexo 命令npm install -g hexo4.初始化Hexo 命令hexo init5.安装组件 命令npm install到此为止,Hexo就算是安装完成了。3.开启服务1.hexo generate或者简写hexo g 编译,生成静态文件,就是生成一个个html文件.2.开启服务hexo server或者hexo s 成功开启后就可以在本地访问了。 http://localhost:4000假如页面一直无法跳转，那么可能端口被占用了。此时我们ctrl+c停止服务器，hexo server -p 端口号来改变端口号如hexo server -p 5000 将端口号换为5000,默认是40003.常用命令hexo clean 清除缓存文件hexo deploy或者hexo d 部署网站到云端,这个后面再讲。参考Hexo官方文档]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[title]]></title>
    <url>%2F%E6%A8%A1%E6%9D%BF%2Ftemplate%2F</url>
    <content type="text"><![CDATA[write here]]></content>
      <categories>
        <category>Java</category>
        <category>categories2</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>tag2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git 配置及SSH key及使用]]></title>
    <url>%2Fgit%2F1%2F</url>
    <content type="text"><![CDATA[​ 本地 Git 仓库和 GitHub 仓库之间的传输是通过 SSH 加密的，所以配置SSH key之后，上传代码到Github远程仓库时就不用输入密码了。一般是在C盘用户目录下有一个 something 和 something.pub 来命名的一对文件，这个 something 通常就是 id_dsa 或 id_rsa。有 .pub 后缀的文件就是公钥，另一个文件则是密钥。连接时必须提供一个公钥用于授权，没有的话就要生成一个。1.Git 配置配置全局用户名和密码，git提交代码时用来显示你身份和联系方式，并不是github用户名和邮箱12git config --global user.name "lillusory" //改成自己的git config --global user.email "xueduanli@163.com" //改成自己的2.生成SSH key2.1生成秘钥执行ssh-keygen -t rsa -C &quot;你的邮箱地址&quot; 命令 生成ssh key然后会叫你输入保存路径，直接按回车即可，保存在C盘用户目录下然后会提示输入密码和确认密码，不用输入直接按两下回车即可到这里SSH key就生成好了，接下来就是配置到github上。2.2配置SSH key登陆Github–&gt;点击头像–&gt;Settings–&gt;SSH and GPG keys–&gt;选择SSh keys上的New SSH keys–&gt;name 随便写，key就是刚才生成的文件中的所有内容。文件默认是在C盘用户目录下，我的是C:\Users\13452\.ssh文件夹中应该会有两个文件 ：id_rsa和id_rsa.pubid_rsa.pub就是我们要的key, 一般以ssh-rsa开头，以你刚才输的邮箱结尾。2.3 测试执行ssh -T git@github.com命令验证一下。可能会提示，无法验证主机的真实性是否要建立连接，输入yes就行了。如果，看到：Hi xxx! You’ve successfully authenticated, but GitHub does not # provide shell access.恭喜你，你的设置已经成功了。参考Git Book]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
</search>
