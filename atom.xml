<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>幻境云图</title>
  
  <subtitle>有道无术，术尚可求，有术无道，止于术</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.lixueduan.com/"/>
  <updated>2019-04-15T13:23:41.387Z</updated>
  <id>https://www.lixueduan.com/</id>
  
  <author>
    <name>illusoryCloud</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Shiro安全框架(三)---Shiro组件详解</title>
    <link href="https://www.lixueduan.com/posts/f8844037.html"/>
    <id>https://www.lixueduan.com/posts/f8844037.html</id>
    <published>2019-03-28T14:00:00.000Z</published>
    <updated>2019-04-15T13:23:41.387Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要讲述了Shiro安全框架的各大组件及其作用，同时使用实例代码做出简单演示。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p><p><strong><a href="https://www.lixueduan.com/categories/SpringCloud/">SpringCloud入门系列文章目录</a></strong></p><p>源码下载：<a href="https://github.com/illusorycloud/springboot-learning" target="_blank" rel="noopener">GItHub</a></p></blockquote><h2 id="1-Authentication-用户认证"><a href="#1-Authentication-用户认证" class="headerlink" title="1. Authentication 用户认证"></a>1. Authentication 用户认证</h2><h3 id="1-1-身份和凭"><a href="#1-1-身份和凭" class="headerlink" title="1.1 身份和凭"></a>1.1 身份和凭</h3><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/shiro/ShiroFeatures_Authentication.png" alt=""></p><p>需要提供身份和凭证给 Shiro。</p><p><code>Princirpals</code> ：用户身份信息，是 Subject 标识信息，能够标识唯一 subject 。如电话、邮箱、身份证号码等。</p><p><code>Credentials</code> : 凭证，就是密码，是只被subject知道的秘密值，可以是密码也可以是数字证书等。</p><p>Princirpals/Credentials的常见组合：账号+密码。在 Shiro 中使用<code>UsernamePasswordToken</code>来指定身份信息和凭证。</p><h3 id="1-2-认证流程"><a href="#1-2-认证流程" class="headerlink" title="1.2 认证流程"></a>1.2 认证流程</h3><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/shiro/ShiroAuthenticationSequence.png" alt=""></p><ul><li>1.把用户输入的账号密码封装成 Token 给 Subject</li><li>2.Subject 把 Token 给 SecurityManager</li><li>3.SecurityManager 调用 Authenticator 认证器</li><li>4.Authenticator 根据配置的策略去调用 对应Realms 获取相对应的数据</li><li>5.最后返回认证结果</li></ul><h3 id="1-3-实例代码"><a href="#1-3-实例代码" class="headerlink" title="1.3 实例代码"></a>1.3 实例代码</h3><h4 id="1-Controller"><a href="#1-Controller" class="headerlink" title="1. Controller"></a>1. Controller</h4><p>获取用户输入的账号密码 然后交给Subject去登录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(HttpServletRequest request,User inuser,String uname,String upwd)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"用户名和密码是"</span> + uname + upwd + <span class="string">" User--&gt;"</span> + inuser.toString());</span><br><span class="line">    UsernamePasswordToken usernamePasswordToken = <span class="keyword">new</span> UsernamePasswordToken(uname,upwd);</span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//登录</span></span><br><span class="line">        subject.login(usernamePasswordToken);</span><br><span class="line">        User user = (User) subject.getPrincipal();</span><br><span class="line">        request.getSession().setAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据前面的步骤，Subject 获取到 Token 后会交给SecurityManager，最后 Authenticator 去 Realms 中获取数据并进行登录认证。</p><h4 id="2-Realm"><a href="#2-Realm" class="headerlink" title="2. Realm"></a>2. Realm</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthRealmTest</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> principalCollection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取session中的用户</span></span><br><span class="line">        User user = (User) principalCollection.fromRealm(<span class="keyword">this</span>.getClass().getName()).iterator().next();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.去数据库查询当前user的权限</span></span><br><span class="line">        List&lt;String&gt; strings = userService.selectPermissionByUserId(user.getUid());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.将权限放入shiro中.</span></span><br><span class="line">        SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        simpleAuthorizationInfo.addStringPermissions(strings);</span><br><span class="line">        <span class="comment">//4.返回授权信息AuthorizationInfo</span></span><br><span class="line">        <span class="keyword">return</span> simpleAuthorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录认证</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authenticationToken</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException ex</span></span><br><span class="line"><span class="comment">     *                                 密码校验在&#123;<span class="doctag">@link</span> CredentialsMatcherTest#doCredentialsMatch(AuthenticationToken, AuthenticationInfo)&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">//1.将用户输入的token 就是authenticationToken强转为UsernamePasswordToken</span></span><br><span class="line">        UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        <span class="comment">//2.获取用户名</span></span><br><span class="line">        String username = usernamePasswordToken.getUsername();</span><br><span class="line">        <span class="comment">//3.数据库中查询出user对象</span></span><br><span class="line">        User user = userService.findUserByName(username);</span><br><span class="line">        <span class="comment">//4.查询出这个user的权限</span></span><br><span class="line">        Set&lt;Role&gt; roles = user.getRoles();</span><br><span class="line">        <span class="keyword">for</span> (Role r : roles) &#123;</span><br><span class="line">            Set&lt;Permission&gt; permissions = r.getPermissions();</span><br><span class="line">            <span class="keyword">for</span> (Permission p : permissions) &#123;</span><br><span class="line">                String permission = p.getPermission();</span><br><span class="line">                System.out.println(<span class="string">"权限--》"</span> + permission);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.返回认证信息AuthenticationInfo 这里是没进行密码校验的 密码校验在CredentialsMatcherTest类中</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user, user.getUpwd(), <span class="keyword">this</span>.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>doGetAuthenticationInfo</code>方法中的Token就是用户前面输入的账号密码，我们还需要些一个类用来校验密码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 密码校验类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CredentialsMatcherTest</span> <span class="keyword">extends</span> <span class="title">SimpleCredentialsMatcher</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验密码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> info</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 密码校验结果</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> AuthRealmTest#doGetAuthenticationInfo(AuthenticationToken)&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doCredentialsMatch</span><span class="params">(AuthenticationToken token, AuthenticationInfo info)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.强转</span></span><br><span class="line">        UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) token;</span><br><span class="line">        <span class="comment">//2.获取用户输入的密码</span></span><br><span class="line">        <span class="keyword">char</span>[] password = usernamePasswordToken.getPassword();</span><br><span class="line">        String pwd = <span class="keyword">new</span> String(password);</span><br><span class="line">        <span class="comment">//3.获取数据库中的真实密码</span></span><br><span class="line">        <span class="comment">//这个info就是前面AuthRealmTest类中的doGetAuthenticationInfo返回的info</span></span><br><span class="line">        String relPwd = (String) info.getCredentials();</span><br><span class="line">        <span class="comment">//4.返回校验结果</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.equals(pwd, relPwd);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里就算是认证成功了，但是还没有授权。</p><h3 id="1-4-小结"><a href="#1-4-小结" class="headerlink" title="1.4 小结"></a>1.4 小结</h3><p>认证流程：</p><p>1.用户输入账号密码，<code>Controller</code>中调<code>subject.login</code>去认证</p><p>2.认证方法就是自定义<code>realm</code>中的<code>doGetAuthenticationInfo</code></p><p>3.认证过程中需要校验密码，就是自定义的<code>CredentialsMatcherTest</code></p><h2 id="2-Realm-1"><a href="#2-Realm-1" class="headerlink" title="2. Realm"></a>2. Realm</h2><p>Realm 是一个接口，在接口中定义了 Token 获得认证信息的方法，Shiro 内实现了一系列的 Realm，这些不同的Realm 提供了不同的功能，<code>AuthenticatingRealm</code>实现了获取身份信息的功能，<code>AuthorizingRealm</code>实现了获取权限信息的功能且继承了<code>AuthenticatingRealm</code>,自定义realm时要继承<code>AuthorizingRealm</code>,这样既可以提供身份认证的自定义方法，也可以实现授权的自定义方法。<br><strong>shiro只实现了功能，并不维护数据</strong>，所以自定义realm中也只是从数据库中查询数据然后和用户输入进行对比，其中密码校验是单独的</p><h3 id="2-1-实例代码"><a href="#2-1-实例代码" class="headerlink" title="2.1 实例代码"></a>2.1 实例代码</h3><p>自定义Realm，继承<code>AuthorizingRealm</code>并实现授权方法<code>doGetAuthorizationInfo</code>和身份认证方法<code>doGetAuthenticationInfo</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserServiceImpl userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> principalCollection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取session中的用户</span></span><br><span class="line">        User user = (User) principalCollection.fromRealm(<span class="keyword">this</span>.getClass().getName()).iterator().next();</span><br><span class="line">        <span class="comment">//查询权限</span></span><br><span class="line">        List&lt;String&gt; strings = userService.selectPermissionByUserId(user.getUid());</span><br><span class="line">        SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        <span class="comment">//将权限放入shiro中.</span></span><br><span class="line">        simpleAuthorizationInfo.addStringPermissions(strings);</span><br><span class="line"><span class="comment">//        System.out.println("添加时的权限" + permission.toString());</span></span><br><span class="line">        System.out.println(<span class="string">"-------------授权-------------"</span>);</span><br><span class="line">        <span class="keyword">return</span> simpleAuthorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成身份认证并返回认证信息</span></span><br><span class="line"><span class="comment">     * 认证失败则返回空</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authenticationToken</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">//用户输入的token</span></span><br><span class="line">        UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        String username = usernamePasswordToken.getUsername();</span><br><span class="line">        User user = userService.findUserByName(username);</span><br><span class="line">        <span class="comment">//放入shiro.调用CredentialsMatcher检验密码</span></span><br><span class="line">        System.out.println(<span class="string">"获取到的密码"</span> + user.getUpwd());</span><br><span class="line"><span class="comment">//        ByteSource salt = ByteSource.Util.bytes(user.getSalt());</span></span><br><span class="line"><span class="comment">//        System.out.println(salt);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user, user.getUpwd(),<span class="keyword">this</span>.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Authentication-Strategy-认证策略"><a href="#3-Authentication-Strategy-认证策略" class="headerlink" title="3. Authentication Strategy 认证策略"></a>3. Authentication Strategy 认证策略</h2><p>在 Shiro 中有三种认证策略：</p><ul><li><p><strong>AtLeatOneSuccessfulStrategy(默认策略)</strong> <code>:只要有一个Realm验证成功即可</code>，和<code>FirstSuccessfulStrategy</code>不同，将<code>返回所有</code>Realm身份校验成功的认证信息。</p></li><li><p><strong>FirstSuccessfulStrategy</strong> :<code>只要有一个Realm验证成功即可</code>，<code>只返回第一个</code>Realm身份验证成功的认证<br>信息，其他的忽略。</p></li><li><p><strong>AllSuccessfulStrategy</strong> :所有Realm验证成功才算成功，且返回所有Realm身份认证成功的认证信息，如</p><p>果<code>有一个失败就失败</code>了。</p></li></ul><p>具体配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 认证策略配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> modularRealmAuthenticator</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModularRealmAuthenticator <span class="title">modularRealmAuthenticator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ModularRealmAuthenticator modularRealmAuthenticator = <span class="keyword">new</span> ModularRealmAuthenticator();</span><br><span class="line">    AuthenticationStrategy atLeastOneSuccessfulStrategy = <span class="keyword">new</span> AtLeastOneSuccessfulStrategy();</span><br><span class="line">    modularRealmAuthenticator.setAuthenticationStrategy(atLeastOneSuccessfulStrategy);</span><br><span class="line">    <span class="keyword">return</span> modularRealmAuthenticator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-CredentialsMatcher-凭证匹配器"><a href="#4-CredentialsMatcher-凭证匹配器" class="headerlink" title="4. CredentialsMatcher 凭证匹配器"></a>4. CredentialsMatcher 凭证匹配器</h2><h3 id="1-CredentialsMatcherHash"><a href="#1-CredentialsMatcherHash" class="headerlink" title="1. CredentialsMatcherHash"></a>1. CredentialsMatcherHash</h3><p>自定义凭证匹配器,用来校验密码，其中数据库保存的密码是Hash后的，匹配是也需要Hash后进行对比。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CredentialsMatcher</span> <span class="keyword">extends</span> <span class="title">SimpleCredentialsMatcher</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doCredentialsMatch</span><span class="params">(AuthenticationToken token, AuthenticationInfo info)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//强转 获取token</span></span><br><span class="line">        UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) token;</span><br><span class="line">        <span class="comment">//获取用户输入的密码</span></span><br><span class="line">        <span class="keyword">char</span>[] password = usernamePasswordToken.getPassword();</span><br><span class="line">        String inputPassword = <span class="keyword">new</span> String(password);</span><br><span class="line">        Md5Hash md5Hash = <span class="keyword">new</span> Md5Hash(inputPassword);</span><br><span class="line">        <span class="comment">//获取数据库中的密码</span></span><br><span class="line">        String realPassword = (String) info.getCredentials();</span><br><span class="line">        System.out.println(<span class="string">"输入的密码"</span>+md5Hash);</span><br><span class="line">        System.out.println(<span class="string">"数据库中的密码"</span>+realPassword);</span><br><span class="line">        <span class="comment">//对比</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.equals(md5Hash, realPassword);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-CredentialsMatcherLimit"><a href="#2-CredentialsMatcherLimit" class="headerlink" title="2. CredentialsMatcherLimit"></a>2. CredentialsMatcherLimit</h3><p>同时可以在凭证匹配器中设定登录次数，多次登录失败后限制一段时间内不让登录。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CredentialsMatcherLimit</span> <span class="keyword">extends</span> <span class="title">SimpleCredentialsMatcher</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前登录次数 放在缓存中10分钟后清空 即连续登录失败后要等一段时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger tryTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 短时间内最大登录次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_TIMES = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doCredentialsMatch</span><span class="params">(AuthenticationToken token, AuthenticationInfo info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tryTime.get() &lt; MAX_TIMES) &#123;</span><br><span class="line">            <span class="keyword">int</span> currentTime = tryTime.getAndIncrement();</span><br><span class="line">            System.out.println(<span class="string">"登录次数："</span> + currentTime);</span><br><span class="line">            <span class="comment">//强转 获取token</span></span><br><span class="line">            UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) token;</span><br><span class="line">            <span class="comment">//获取用户输入的密码</span></span><br><span class="line">            <span class="keyword">char</span>[] password = usernamePasswordToken.getPassword();</span><br><span class="line">            String inputPassword = <span class="keyword">new</span> String(password);</span><br><span class="line">             Md5Hash md5Hash = <span class="keyword">new</span> Md5Hash(inputPassword);</span><br><span class="line">            <span class="comment">//获取数据库中的密码</span></span><br><span class="line">            String realPassword = (String) info.getCredentials();</span><br><span class="line">            System.out.println(<span class="string">"输入的密码"</span> + md5Hash);</span><br><span class="line">            System.out.println(<span class="string">"数据库中的密码"</span> + realPassword);</span><br><span class="line">            <span class="comment">//对比</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.equals(md5Hash, realPassword);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"登录次数过多，请稍后重试"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-Authorization-授权"><a href="#5-Authorization-授权" class="headerlink" title="5. Authorization 授权"></a>5. Authorization 授权</h2><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/shiro/ShiroFeatures_Authorization.png" alt=""></p><h3 id="5-1-简介"><a href="#5-1-简介" class="headerlink" title="5.1 简介"></a>5.1 简介</h3><ul><li><code>授权</code> ：给身份认证通过的人，授予某些权限。</li><li><code>权限粒度</code> ：分为粗粒度和细粒度，<ul><li>粗粒度 ：对某张表的操作，如对user表的crud。</li><li>细粒度 ：对表中某条记录的操作，如：只能对user表中ID为1的记录进行curd，shiro一般管理的是粗粒度的权限，比如：菜单、URL，细粒度的权限控制通过业务来实现。</li></ul></li><li><code>角色</code> ：权限的集合</li><li><code>权限表现规则</code>：格式:  <code>资源:操作:实例</code>(可以用通配符表示)<ul><li>user:add   对user有add权限</li><li>user:*        对user有所有操作</li><li>user:add:1   对ID为1的user有add操作</li></ul></li></ul><h3 id="5-2-流程"><a href="#5-2-流程" class="headerlink" title="5.2 流程"></a>5.2 流程</h3><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/shiro/ShiroAuthorizationSequence.png" alt=""></p><p>Shiro中权限检测方式有三种：</p><ul><li>1.编程式 业务代码前手动检测 <ul><li><code>subject.checkPermission(&quot;delete&quot;);/subject.hasRole(&quot;admin&quot;);</code></li></ul></li><li>2.注解式 方法上添加注解<ul><li><code>@RequiresPermissions(value = &quot;add&quot;)/@RequiresRoles(&quot;admin&quot;)</code></li></ul></li><li>3.标签式 写在html中<ul><li><code>&lt;p shiro:hasPermission=&quot;add&quot;&gt;添加用户&lt;/p&gt;</code> 需要在html页面中引入 <code>xmlns:shiro=&quot;http://www.pollix.at/thymeleaf/shiro&quot;</code></li></ul></li></ul><h4 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h4><ul><li>1.获取 Subject 主体</li><li>2.判断 Subject 主体是否通过认证</li><li>2.Subject 调用 isPermitted()/hasRole() 方法开始授权</li><li>3.SecurityManager执行授权，通过 ModularRealmAuthorizer 执行授权 </li><li>4.调用自定义 Realm 的授权方法：doGetAuthorizationInfo</li><li>5.返回授权结果</li></ul><h4 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> principalCollection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取principalCollection中的用户</span></span><br><span class="line">        User user = (User) principalCollection.fromRealm(<span class="keyword">this</span>.getClass().getName()).iterator().next();</span><br><span class="line">        <span class="comment">//2.通过数据库查询当前userde权限</span></span><br><span class="line">        List&lt;String&gt; permissions = userService.selectPermissionByUserId(user.getUid());</span><br><span class="line">        SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        <span class="comment">//3.将权限放入shiro中.</span></span><br><span class="line">        simpleAuthorizationInfo.addStringPermissions(permissions);</span><br><span class="line"><span class="comment">//        System.out.println("添加时的权限" + permission.toString());</span></span><br><span class="line">        System.out.println(<span class="string">"-------------授权-------------"</span>);</span><br><span class="line">        <span class="comment">//4.返回</span></span><br><span class="line">        <span class="keyword">return</span> simpleAuthorizationInfo;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="6-散列算法-加密"><a href="#6-散列算法-加密" class="headerlink" title="6. 散列算法(加密)"></a>6. 散列算法(加密)</h2><h3 id="6-1-简介"><a href="#6-1-简介" class="headerlink" title="6.1 简介"></a>6.1 简介</h3><p>为了提高应用系统的安全性，在身份认证过程中往往会涉及加密，这里主要关注shiro提供的密码服务模块；通过shiro进行散列算法操作，常见的有两个MD5，SHA-1等。</p><p>如<code>1111</code>的MD5为<code>b59c67bf196a4758191e42f76670ceba</code>,但是这个<code>b59c67bf196a4758191e42f76670ceba</code>很容易就会被破解，轻松就能获取到加密前的数据。</p><h3 id="6-2-加盐"><a href="#6-2-加盐" class="headerlink" title="6.2 加盐"></a>6.2 加盐</h3><p>但是<code>1111+userName</code>进行加密，这样就不容易被破解了，破解难度增加。</p><p>例如:</p><p><code>qwer</code>的MD5为<code>962012d09b8170d912f0669f6d7d9d07</code><br><code>qwer</code>加盐<code>illusory</code>后的MD5为<code>6aee9c0e35ad7a12e59ff67b663a32ca</code></p><p>用户在注册的时候就把加密后的密码和盐值存到数据库，用户登录时就先根据用户名查询盐值，然后把用户输入的密码加密后在和数据库中的密码做对比。</p><p>代码如下：<br>自定义密码校验,shiro也提供了一下内置的加密密码校验器</p><blockquote><p>1.根据name查询user 然后获取到盐值<br>2.然后把输入的密码加密<br>3.最后在于数据库中的密码对比</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CredentialsMatcherHash</span> <span class="keyword">extends</span> <span class="title">SimpleCredentialsMatcher</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doCredentialsMatch</span><span class="params">(AuthenticationToken token, AuthenticationInfo info)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//强转 获取token</span></span><br><span class="line">        UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) token;</span><br><span class="line">        <span class="comment">//获取用户输入的密码</span></span><br><span class="line">        <span class="keyword">char</span>[] password = usernamePasswordToken.getPassword();</span><br><span class="line">        String inputPassword = <span class="keyword">new</span> String(password);</span><br><span class="line">        String username = usernamePasswordToken.getUsername();</span><br><span class="line">        User userByName = service.findUserJustByName(username);</span><br><span class="line">        String salt = userByName.getSalt();</span><br><span class="line">        <span class="comment">//这个盐值是从数据库查出来的</span></span><br><span class="line">        Md5Hash md5Hash = <span class="keyword">new</span> Md5Hash(inputPassword, salt);</span><br><span class="line">        String inputMD5Hash = <span class="keyword">new</span> String(String.valueOf(md5Hash));</span><br><span class="line">        <span class="comment">//获取数据库中的密码</span></span><br><span class="line">        String realPassword = (String) info.getCredentials();</span><br><span class="line">        System.out.println(<span class="string">"输入的密码"</span> + inputPassword);</span><br><span class="line">        System.out.println(<span class="string">"输入的密码加密"</span> + md5Hash);</span><br><span class="line">        System.out.println(<span class="string">"数据库中的密码"</span> + realPassword);</span><br><span class="line">        <span class="comment">//对比</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.equals(inputMD5Hash, realPassword);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-缓存"><a href="#7-缓存" class="headerlink" title="7. 缓存"></a>7. 缓存</h2><p>每次检查都会去数据库中获取权限，这样效率很低，可以通过设置缓存来解决问题。如<code>Ehcache</code> 或者 <code>Redis</code>。</p><p>这里使用<code>Redis</code>。</p><h3 id="7-1-引入依赖"><a href="#7-1-引入依赖" class="headerlink" title="7.1 引入依赖"></a>7.1 引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-2-重写方法"><a href="#7-2-重写方法" class="headerlink" title="7.2 重写方法"></a>7.2 重写方法</h3><p>使用 Redis 作为缓存需要 Shiro重写 Cache、cacheManager</p><h4 id="CacheManager"><a href="#CacheManager" class="headerlink" title="CacheManager"></a>CacheManager</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Cachemanager</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusoryCloud</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroRedisCacheManager</span> <span class="keyword">extends</span> <span class="title">AbstractCacheManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShiroRedisCacheManager</span><span class="params">(RedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为了个性化配置redis存储时的key，我们选择了加前缀的方式，所以写了一个带名字及redis操作的构造函数的Cache类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Cache <span class="title">createCache</span><span class="params">(String name)</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ShiroRedisCache(redisTemplate, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RedisCache"><a href="#RedisCache" class="headerlink" title="RedisCache"></a>RedisCache</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Shiro缓存</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusoryCloud</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroRedisCache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Cache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis操作对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * key 前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String prefix = <span class="string">"shiro_redis"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prefix + <span class="string">":"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrefix</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prefix = prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShiroRedisCache</span><span class="params">(RedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShiroRedisCache</span><span class="params">(RedisTemplate redisTemplate, String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(redisTemplate);</span><br><span class="line">        <span class="keyword">this</span>.prefix = prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k redis中的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> redis中的value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> CacheException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K k)</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = getBytesKey(k);</span><br><span class="line">        <span class="keyword">return</span> (V) redisTemplate.opsForValue().get(bytes);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * put方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> CacheException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K k, V v)</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span> || v == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = getBytesKey(k);</span><br><span class="line">        redisTemplate.opsForValue().set(bytes, v);</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * delete方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> CacheException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(K k)</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = getBytesKey(k);</span><br><span class="line">        V v = (V) redisTemplate.opsForValue().get(bytes);</span><br><span class="line">        redisTemplate.delete(bytes);</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除数据库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> CacheException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">        redisTemplate.getConnectionFactory().getConnection().flushDb();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getConnectionFactory().getConnection().dbSize().intValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有的key</span></span><br><span class="line"><span class="comment">     * key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = (getPrefix() + <span class="string">"*"</span>).getBytes();</span><br><span class="line">        Set&lt;<span class="keyword">byte</span>[]&gt; keys = redisTemplate.keys(bytes);</span><br><span class="line">        Set&lt;K&gt; sets = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">byte</span>[] key : keys) &#123;</span><br><span class="line">            sets.add((K) key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sets;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有的value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;V&gt; <span class="title">values</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Set&lt;K&gt; keys = keys();</span><br><span class="line">        List&lt;V&gt; values = <span class="keyword">new</span> ArrayList&lt;&gt;(keys.size());</span><br><span class="line">        <span class="keyword">for</span> (K k : keys) &#123;</span><br><span class="line">            values.add(get(k));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> values;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] getBytesKey(K key) &#123;</span><br><span class="line">        String prekey = <span class="keyword">this</span>.getPrefix() + key;</span><br><span class="line">        <span class="keyword">return</span> prekey.getBytes();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-Shiro配置缓存管理器"><a href="#7-3-Shiro配置缓存管理器" class="headerlink" title="7.3 Shiro配置缓存管理器"></a>7.3 Shiro配置缓存管理器</h3><p>在 ShiroConfiguration 中配置 ShiroRedisCacheManager。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroRedisCacheManager <span class="title">cacheManager</span><span class="params">(RedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ShiroRedisCacheManager(redisTemplate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置核心安全事务管理器</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"securityManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">(@Qualifier(<span class="string">"authRealm"</span>)</span> AuthRealm authRealm,</span></span><br><span class="line"><span class="function">                                           @<span class="title">Qualifier</span><span class="params">(<span class="string">"authRealm2"</span>)</span> AuthRealm authRealm2,</span></span><br><span class="line"><span class="function">                                           @<span class="title">Qualifier</span><span class="params">(<span class="string">"authRealm3"</span>)</span> AuthRealm authRealm3</span></span><br><span class="line"><span class="function">            , RedisTemplate&lt;Object, Object&gt; template) </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"----------------------------shiro已经加载---------------------------"</span>);</span><br><span class="line">        DefaultWebSecurityManager manager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        <span class="comment">//配置缓存 必须放在realm前面</span></span><br><span class="line">        manager.setCacheManager(cacheManager(template));</span><br><span class="line">        <span class="comment">//配置两个测试一下认证策略AllSuccessfulStrategy</span></span><br><span class="line"><span class="comment">//        manager.setRealm(authRealm);</span></span><br><span class="line"><span class="comment">//        manager.setRealm(authRealm2);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试一下密码加密</span></span><br><span class="line">        manager.setRealm(authRealm3);</span><br><span class="line"></span><br><span class="line">        manager.setSessionManager(sessionManager());</span><br><span class="line"><span class="comment">//        manager.setCacheManager(ehCacheManager);</span></span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>到这里就ok了</p><p>Shiro 在认证时会首先去 Redis 缓存中查询，缓存中没有才会去去查询数据库。</p><h2 id="8-Session"><a href="#8-Session" class="headerlink" title="8. Session"></a>8. Session</h2><h3 id="Shiro-中的-Session-特性"><a href="#Shiro-中的-Session-特性" class="headerlink" title="Shiro 中的 Session 特性"></a>Shiro 中的 Session 特性</h3><ul><li>基于POJO/J2SE：shiro中session相关的类都是基于接口实现的简单的java对象（POJO），兼容所有java对象的配置方式，扩展也更方便，完全可以定制自己的会话管理功能 。</li><li>简单灵活的会话存储/持久化：因为shiro中的session对象是基于简单的java对象的，所以你可以将session存储在任何地方，例如，文件，各种数据库，内存中等。</li><li>容器无关的集群功能：shiro中的session可以很容易的集成第三方的缓存产品完成集群的功能。例如，Ehcache + Terracotta, Coherence, GigaSpaces等。你可以很容易的实现会话集群而无需关注底层的容器实现。</li><li>异构客户端的访问：可以实现web中的session和非web项目中的session共享。</li><li>会话事件监听：提供对对session整个生命周期的监听。</li><li>保存主机地址：在会话开始session会存用户的ip地址和主机名，以此可以判断用户的位置。</li><li>会话失效/过期的支持：用户长时间处于不活跃状态可以使会话过期，调用touch()方法，可以主动更新最后访问时间，让会话处于活跃状态。</li><li>透明的Web支持：shiro全面支持Servlet 2.5中的session规范。这意味着你可以将你现有的web程序改为shiro会话，而无需修改代码。</li></ul><p>单点登录的支持：shiro session基于普通java对象，使得它更容易存储和共享，可以实现跨应用程序共享。可以根据共享的会话，来保证认证状态到另一个程序。从而实现单点登录。</p><h3 id="8-2-SessionListener"><a href="#8-2-SessionListener" class="headerlink" title="8.2 SessionListener"></a>8.2 SessionListener</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监听session变化</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusoryCloud</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroSessionListener</span> <span class="keyword">implements</span> <span class="title">SessionListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计在线人数</span></span><br><span class="line"><span class="comment">     * juc包下线程安全自增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger sessionCount = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 会话创建时触发</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//会话创建，在线人数加一</span></span><br><span class="line">        sessionCount.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退出会话时触发</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//会话退出,在线人数减一</span></span><br><span class="line">        sessionCount.decrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 会话过期时触发</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onExpiration</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//会话过期,在线人数减一</span></span><br><span class="line">        sessionCount.decrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取在线人数使用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AtomicInteger <span class="title">getSessionCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sessionCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3-ShiroConfiguration-配置"><a href="#8-3-ShiroConfiguration-配置" class="headerlink" title="8.3 ShiroConfiguration 配置"></a>8.3 ShiroConfiguration 配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 配置session监听</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Bean</span>(<span class="string">"sessionListener"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> ShiroSessionListener <span class="title">sessionListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       ShiroSessionListener sessionListener = <span class="keyword">new</span> ShiroSessionListener();</span><br><span class="line">       <span class="keyword">return</span> sessionListener;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 配置会话ID生成器</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> SessionIdGenerator <span class="title">sessionIdGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> JavaUuidSessionIdGenerator();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * SessionDAO的作用是为Session提供CRUD并进行持久化的一个shiro组件</span></span><br><span class="line"><span class="comment">    * MemorySessionDAO 直接在内存中进行会话维护</span></span><br><span class="line"><span class="comment">    * EnterpriseCacheSessionDAO  提供了缓存功能的会话维护，默认情况下使用MapCache实现，内部使用ConcurrentHashMap保存缓存的会话。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> SessionDAO <span class="title">sessionDAO</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       EnterpriseCacheSessionDAO enterpriseCacheSessionDAO = <span class="keyword">new</span> EnterpriseCacheSessionDAO();</span><br><span class="line">       <span class="comment">//使用ehCacheManager</span></span><br><span class="line">       enterpriseCacheSessionDAO.setCacheManager(cacheManager(<span class="keyword">new</span> RedisTemplate()));</span><br><span class="line">       <span class="comment">//设置session缓存的名字 默认为 shiro-activeSessionCache</span></span><br><span class="line">       enterpriseCacheSessionDAO.setActiveSessionsCacheName(<span class="string">"shiro-activeSessionCache"</span>);</span><br><span class="line">       <span class="comment">//sessionId生成器</span></span><br><span class="line">       enterpriseCacheSessionDAO.setSessionIdGenerator(sessionIdGenerator());</span><br><span class="line">       <span class="keyword">return</span> enterpriseCacheSessionDAO;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span>(<span class="string">"sessionManager"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> SessionManager <span class="title">sessionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       DefaultWebSessionManager sessionManager = <span class="keyword">new</span> DefaultWebSessionManager();</span><br><span class="line">       Collection&lt;SessionListener&gt; listeners = <span class="keyword">new</span> ArrayList&lt;SessionListener&gt;();</span><br><span class="line">       <span class="comment">//配置监听</span></span><br><span class="line">       listeners.add(sessionListener());</span><br><span class="line">       sessionManager.setSessionListeners(listeners);</span><br><span class="line">       sessionManager.setSessionIdCookie(sessionIdCookie());</span><br><span class="line">       sessionManager.setSessionDAO(sessionDAO());</span><br><span class="line">       <span class="comment">//全局会话超时时间（单位毫秒），默认30分钟  暂时设置为10秒钟 用来测试</span></span><br><span class="line">       sessionManager.setGlobalSessionTimeout(<span class="number">1800000</span>);</span><br><span class="line">       <span class="comment">//是否开启删除无效的session对象  默认为true</span></span><br><span class="line">       sessionManager.setDeleteInvalidSessions(<span class="keyword">true</span>);</span><br><span class="line">       <span class="comment">//是否开启定时调度器进行检测过期session 默认为true</span></span><br><span class="line">       sessionManager.setSessionValidationSchedulerEnabled(<span class="keyword">true</span>);</span><br><span class="line">       <span class="comment">//设置session失效的扫描时间, 清理用户直接关闭浏览器造成的孤立会话 默认为 1个小时</span></span><br><span class="line">       <span class="comment">//设置该属性 就不需要设置 ExecutorServiceSessionValidationScheduler 底层也是默认自动调用ExecutorServiceSessionValidationScheduler</span></span><br><span class="line">       <span class="comment">//暂时设置为 5秒 用来测试</span></span><br><span class="line">       sessionManager.setSessionValidationInterval(<span class="number">3600000</span>);</span><br><span class="line">       <span class="keyword">return</span> sessionManager;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 配置保存sessionId的cookie</span></span><br><span class="line"><span class="comment">    * 注意：这里的cookie 不是上面的记住我 cookie 记住我需要一个cookie session管理 也需要自己的cookie</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Bean</span>(<span class="string">"sessionIdCookie"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> SimpleCookie <span class="title">sessionIdCookie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">//这个参数是cookie的名称</span></span><br><span class="line">       SimpleCookie simpleCookie = <span class="keyword">new</span> SimpleCookie(<span class="string">"sid"</span>);</span><br><span class="line">       <span class="comment">//setcookie的httponly属性如果设为true的话，会增加对xss防护的安全系数。它有以下特点：</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//setcookie()的第七个参数</span></span><br><span class="line">       <span class="comment">//设为true后，只能通过http访问，javascript无法访问</span></span><br><span class="line">       <span class="comment">//防止xss读取cookie</span></span><br><span class="line">       simpleCookie.setHttpOnly(<span class="keyword">true</span>);</span><br><span class="line">       simpleCookie.setPath(<span class="string">"/"</span>);</span><br><span class="line">       <span class="comment">//maxAge=-1表示浏览器关闭时失效此Cookie</span></span><br><span class="line">       simpleCookie.setMaxAge(-<span class="number">1</span>);</span><br><span class="line">       <span class="keyword">return</span> simpleCookie;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="9-RememberMe"><a href="#9-RememberMe" class="headerlink" title="9. RememberMe"></a>9. RememberMe</h2><h3 id="ShiroConfiguration-配置"><a href="#ShiroConfiguration-配置" class="headerlink" title="ShiroConfiguration 配置"></a>ShiroConfiguration 配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RememberMeManager <span class="title">rememberMeManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CookieRememberMeManager cookieRememberMeManager = <span class="keyword">new</span> CookieRememberMeManager();</span><br><span class="line">    cookieRememberMeManager.setCookie(rememberMeCookie());</span><br><span class="line">    <span class="comment">//rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度(128 256 512 位)</span></span><br><span class="line">    cookieRememberMeManager.setCipherKey(Base64.decode(<span class="string">"2AvVhdsgUs0FSA3SDFAdag=="</span>));</span><br><span class="line">    <span class="keyword">return</span> cookieRememberMeManager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SimpleCookie <span class="title">rememberMeCookie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SimpleCookie simpleCookie = <span class="keyword">new</span> SimpleCookie(<span class="string">"rememberMe"</span>);</span><br><span class="line">    simpleCookie.setMaxAge(<span class="number">259200</span>);</span><br><span class="line">    <span class="keyword">return</span> simpleCookie;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Controller"><a href="#2-Controller" class="headerlink" title="2. Controller"></a>2. Controller</h3><p>前端页面传过来一个Boolean变量，然后存放在<code>UsernamePasswordToken</code>中就可以了,不过User对象因为要序列化所以要实现<code>Serializable</code>接口，同样的还有User对象引用的permission和role对象都要实现这个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(HttpServletRequest request, User inuser, String uname, String upwd,Boolean rememberMe)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"用户名和密码是"</span> + uname + upwd + <span class="string">" User--&gt;"</span> + inuser.toString());</span><br><span class="line">    UsernamePasswordToken usernamePasswordToken = <span class="keyword">new</span> UsernamePasswordToken(uname, upwd, rememberMe);</span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//登录</span></span><br><span class="line">        subject.login(usernamePasswordToken);</span><br><span class="line">        User user = (User) subject.getPrincipal();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">        usernamePasswordToken.clear();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-参考"><a href="#10-参考" class="headerlink" title="10. 参考"></a>10. 参考</h2><p><code>https://blog.csdn.net/yangwenxue_admin/article/details/73936803</code></p><p><code>官方文档：http://shiro.apache.org/documentation.html</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要讲述了Shiro安全框架的各大组件及其作用，同时使用实例代码做出简单演示。&lt;/p&gt;
    
    </summary>
    
      <category term="Shiro" scheme="https://www.lixueduan.com/categories/Shiro/"/>
    
    
      <category term="Shiro" scheme="https://www.lixueduan.com/tags/Shiro/"/>
    
  </entry>
  
  <entry>
    <title>Shiro安全框架(二)---SpringBoot整合Shiro</title>
    <link href="https://www.lixueduan.com/posts/fd462737.html"/>
    <id>https://www.lixueduan.com/posts/fd462737.html</id>
    <published>2019-03-27T14:00:00.000Z</published>
    <updated>2019-04-15T13:23:41.371Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了如何在SpringBoot项目中整合Shiro安全框架，包括详细步骤和具体实例代码。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p><p><strong><a href="https://www.lixueduan.com/categories/SpringCloud/">Shiro安全框架系列文章目录</a></strong></p><p>源码下载：<a href="https://github.com/illusorycloud/springboot-learning" target="_blank" rel="noopener">GItHub</a></p></blockquote><h2 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h2><p>普通项目引入方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--shiro--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SpringBoot引入方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-数据准备"><a href="#2-数据准备" class="headerlink" title="2. 数据准备"></a>2. 数据准备</h2><h3 id="2-1-Entity"><a href="#2-1-Entity" class="headerlink" title="2.1 Entity"></a>2.1 Entity</h3><p>一共有三个对象，User用户，Role角色，Permission权限。 将权限分配给角色，不同的角色拥有不同的权限，<br>然后给用户分配不同的角色，这样就达到了权限管理的效果。</p><blockquote><p>这里用了lombok插件 编译时自动生成getter/setter等方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusory</span></span><br><span class="line"><span class="comment"> * 权限实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Permission</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer pid;</span><br><span class="line">    <span class="keyword">private</span> String permission;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Role&gt; roles = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusory</span></span><br><span class="line"><span class="comment"> * 角色实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer rid;</span><br><span class="line">    <span class="keyword">private</span> String rname;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;User&gt; users = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Permission&gt; permissions = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusory</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> String uname;</span><br><span class="line">    <span class="keyword">private</span> String upwd;</span><br><span class="line">    <span class="keyword">private</span> String salt;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Role&gt; roles=<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-DataBase"><a href="#2-2-DataBase" class="headerlink" title="2.2 DataBase"></a>2.2 DataBase</h3><p>这里主要涉及到五张表:<code>用户表</code>,<code>角色表(用户所拥有的角色)</code>,<code>权限表(角色所涉及到的权限)</code>,<code>用户-角色表(用户和角色是多对多的)</code>,<code>角色-权限表(角色和权限是多对多的)</code>.<br>表结构建立的sql语句如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">-- 新建一个数据库</span><br><span class="line">CREATE DATABASE shiro;</span><br><span class="line">USE shiro;</span><br><span class="line"></span><br><span class="line">-- 用户表</span><br><span class="line">DROP TABLE IF EXISTS USER;</span><br><span class="line">CREATE TABLE USER(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">NAME VARCHAR(4),</span><br><span class="line">pwd VARCHAR(8) </span><br><span class="line">);</span><br><span class="line">INSERT INTO USER VALUES(NULL,&apos;张三&apos;,&apos;qwer&apos;),(NULL,&apos;李四&apos;,&apos;qwer&apos;);</span><br><span class="line"></span><br><span class="line">-- 权限表</span><br><span class="line">DROP TABLE IF EXISTS permission;</span><br><span class="line">CREATE TABLE permission(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">permission VARCHAR(10)</span><br><span class="line">);</span><br><span class="line">INSERT INTO permission VALUES(NULL,&apos;add&apos;),</span><br><span class="line">(NULL,&apos;delete&apos;),</span><br><span class="line">(NULL,&apos;update&apos;),</span><br><span class="line">(NULL,&apos;query&apos;);</span><br><span class="line"></span><br><span class="line">-- 角色表</span><br><span class="line">DROP TABLE IF EXISTS role;</span><br><span class="line">CREATE TABLE role(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">NAME VARCHAR(10));</span><br><span class="line">INSERT INTO role VALUES(NULL,&apos;admin&apos;),(NULL,&apos;customer&apos;);</span><br><span class="line"></span><br><span class="line">-- 权限-角色表</span><br><span class="line">DROP TABLE IF EXISTS permission_role;</span><br><span class="line">CREATE TABLE permission_role(</span><br><span class="line">pid INT(3),</span><br><span class="line">CONSTRAINT  fk_permission FOREIGN KEY(pid) REFERENCES permission(id),</span><br><span class="line">rid INT(3),</span><br><span class="line">CONSTRAINT  fk_role FOREIGN KEY(rid) REFERENCES role(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 管理员有4个权限 用户只有查询权限</span><br><span class="line">INSERT INTO permission_role VALUES(1,1),(2,1),(3,1),(4,1),(4,2);</span><br><span class="line"></span><br><span class="line">-- 用户-角色表</span><br><span class="line">DROP TABLE IF EXISTS user_role;</span><br><span class="line">CREATE TABLE user_role(</span><br><span class="line">uid INT(3),</span><br><span class="line">CONSTRAINT  fk_user FOREIGN KEY(uid) REFERENCES USER(id),</span><br><span class="line">rid INT(3),</span><br><span class="line">CONSTRAINT  fk_roles FOREIGN KEY(rid) REFERENCES role(id)</span><br><span class="line">);</span><br><span class="line">-- 张三为管理员 李四为用户</span><br><span class="line">INSERT INTO user_role VALUES(1,1),(2,2);</span><br></pre></td></tr></table></figure><h2 id="3-Mapper"><a href="#3-Mapper" class="headerlink" title="3 Mapper"></a>3 Mapper</h2><h3 id="3-1-UserMapper-java"><a href="#3-1-UserMapper-java" class="headerlink" title="3.1 UserMapper.java"></a>3.1 UserMapper.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">findUserByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">findUserJustByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;String&gt; <span class="title">selectPermissionByUserId</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-UserMapper-xml"><a href="#3-2-UserMapper-xml" class="headerlink" title="3.2 UserMapper.xml"></a>3.2 UserMapper.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.example.shiro.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"User"</span> <span class="attr">id</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"uid"</span> <span class="attr">column</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"uname"</span> <span class="attr">column</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"upwd"</span> <span class="attr">column</span>=<span class="string">"pwd"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"roles"</span> <span class="attr">ofType</span>=<span class="string">"Role"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"rid"</span> <span class="attr">column</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"rname"</span> <span class="attr">column</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"permissions"</span> <span class="attr">ofType</span>=<span class="string">"Permission"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"pid"</span> <span class="attr">column</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"permission"</span> <span class="attr">column</span>=<span class="string">"permission"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByName"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">        SELECT u.*,r.*,p.*</span><br><span class="line">        FROM USER u</span><br><span class="line">                 INNER JOIN user_role ur ON ur.uid = u.id</span><br><span class="line">                 INNER JOIN role r ON r.id = ur.rid</span><br><span class="line">                 INNER JOIN permission_role pr ON pr.rid = r.id</span><br><span class="line">                 INNER JOIN permission p ON pr.pid = p.id</span><br><span class="line">        WHERE u.name = #&#123;name&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectPermissionByUserId"</span> <span class="attr">parameterType</span>=<span class="string">"integer"</span> <span class="attr">resultType</span>=<span class="string">"string"</span>&gt;</span></span><br><span class="line">SELECT permission FROM permission p INNER JOIN permission_role pr ON p.id=pr.pid</span><br><span class="line">INNER JOIN user_role ur ON ur.rid=pr.rid</span><br><span class="line">WHERE ur.uid=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-Service"><a href="#4-Service" class="headerlink" title="4. Service"></a>4. Service</h2><h3 id="4-1-UserService"><a href="#4-1-UserService" class="headerlink" title="4.1 UserService"></a>4.1 UserService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">findUserByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">findUserJustByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;String&gt; <span class="title">selectPermissionByUserId</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-UserServiceImpl"><a href="#4-2-UserServiceImpl" class="headerlink" title="4.2 UserServiceImpl"></a>4.2 UserServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.findUserByName(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserJustByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.findUserJustByName(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">selectPermissionByUserId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectPermissionByUserId(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-Shiro配置-重点"><a href="#5-Shiro配置-重点" class="headerlink" title="5. Shiro配置(重点)"></a>5. Shiro配置(重点)</h2><p>Shiro中唯一需要配置的就是<code>Realm</code>,完成根据用户名去数据库的查询,并且将用户信息放入<code>Shiro</code>中。</p><h3 id="5-1-Realm"><a href="#5-1-Realm" class="headerlink" title="5.1 Realm"></a>5.1 Realm</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserServiceImpl userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> principalCollection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取principalCollection中的用户</span></span><br><span class="line">        User user = (User) principalCollection.fromRealm(<span class="keyword">this</span>.getClass().getName()).iterator().next();</span><br><span class="line">        <span class="comment">// 2.通过数据库查询当前userde权限</span></span><br><span class="line">        List&lt;String&gt; permissions = userService.selectPermissionByUserId(user.getUid());</span><br><span class="line">        SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        <span class="comment">// 3.将权限放入shiro中.</span></span><br><span class="line">        simpleAuthorizationInfo.addStringPermissions(permissions);</span><br><span class="line">        System.out.println(<span class="string">"-------------授权-------------"</span>);</span><br><span class="line">        <span class="comment">// 4.返回</span></span><br><span class="line">        <span class="keyword">return</span> simpleAuthorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成身份认证并返回认证信息</span></span><br><span class="line"><span class="comment">     * 认证失败则返回空</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authenticationToken</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.用户输入的token</span></span><br><span class="line">        UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        String username = usernamePasswordToken.getUsername();</span><br><span class="line">        User user = userService.findUserByName(username);</span><br><span class="line">        System.out.println(<span class="string">"获取到的密码"</span> + user.getUpwd());</span><br><span class="line">        <span class="comment">// 2.返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user, user.getUpwd(), <span class="keyword">this</span>.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-Bean注册"><a href="#5-2-Bean注册" class="headerlink" title="5.2 Bean注册"></a>5.2 Bean注册</h3><h4 id="1-ShiroRealm"><a href="#1-ShiroRealm" class="headerlink" title="1. ShiroRealm"></a>1. ShiroRealm</h4><p>将实现好的 ShiroRealm 注册为Bean，并初始化 <code>WebSecurityManager</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Realm <span class="title">realm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AuthRealm();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">securityManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        securityManager.setRealm(realm());</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-URL配置"><a href="#2-URL配置" class="headerlink" title="2. URL配置"></a>2. URL配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"shiroFilterFactoryBean "</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilterFactoryBean</span><span class="params">(@Qualifier(<span class="string">"securityManager"</span>)</span> SecurityManager manager) </span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean bean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        bean.setSecurityManager(manager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.定义URL拦截链</span></span><br><span class="line">        LinkedHashMap&lt;String, String&gt; filterChainDefinitionMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// authc:所有url都必须认证通过才可以访问; anon:所有url都都可以匿名访问</span></span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/login.*"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/logout*"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/hello"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/defaultKaptcha"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/index.*"</span>, <span class="string">"authc"</span>);</span><br><span class="line">        bean.setFilterChainDefinitionMap(filterChainDefinitionMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.配置用于登录的url和登录成功的url</span></span><br><span class="line">        bean.setLoginUrl(<span class="string">"/login"</span>);</span><br><span class="line">        bean.setSuccessUrl(<span class="string">"/index"</span>);</span><br><span class="line">        bean.setUnauthorizedUrl(<span class="string">"/403"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//url配置</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterChainDefinition <span class="title">shiroFilterChainDefinition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultShiroFilterChainDefinition chainDefinition = <span class="keyword">new</span> DefaultShiroFilterChainDefinition();</span><br><span class="line">        <span class="comment">// logged in users with the 'admin' role</span></span><br><span class="line">        chainDefinition.addPathDefinition(<span class="string">"/admin/**"</span>, <span class="string">"authc, roles[admin]"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// logged in users with the 'document:read' permission</span></span><br><span class="line">        chainDefinition.addPathDefinition(<span class="string">"/docs/**"</span>, <span class="string">"authc, perms[document:read]"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// all other paths require a logged in user</span></span><br><span class="line">        chainDefinition.addPathDefinition(<span class="string">"/**"</span>, <span class="string">"authc"</span>);</span><br><span class="line">        <span class="keyword">return</span> chainDefinition;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-404问题"><a href="#3-404问题" class="headerlink" title="3. 404问题"></a>3. 404问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfiguration</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解决spring aop和注解配置一起使用的bug。如果您在使用shiro注解配置的同时，引入了spring aop的starter，</span></span><br><span class="line"><span class="comment">     * 会有一个奇怪的问题，导致shiro注解的请求，不能被映射，需加入这个配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DefaultAdvisorAutoProxyCreator <span class="title">getDefaultAdvisorAutoProxyCreator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator = <span class="keyword">new</span> DefaultAdvisorAutoProxyCreator();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * setUsePrefix(false)用于解决一个奇怪的bug。在引入spring aop的情况下。</span></span><br><span class="line"><span class="comment">         * 在<span class="doctag">@Controller</span>注解的类的方法中加入<span class="doctag">@RequiresRole</span>等shiro注解，会导致该方法无法映射请求，导致返回404。</span></span><br><span class="line"><span class="comment">         * 加入这项配置能解决这个bug</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        defaultAdvisorAutoProxyCreator.setUsePrefix(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> defaultAdvisorAutoProxyCreator;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-页面"><a href="#6-页面" class="headerlink" title="6. 页面"></a>6. 页面</h2><h3 id="6-1-login-html"><a href="#6-1-login-html" class="headerlink" title="6.1 login.html"></a>6.1 login.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户登陆<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"uname"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"upwd"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登陆"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-2-index-html"><a href="#6-2-index-html" class="headerlink" title="6.2 index.html"></a>6.2 index.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:shiro</span>=<span class="string">"http://www.pollix.at/thymeleaf/shiro"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">欢迎您，<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.uname&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasPermission</span>=<span class="string">"add"</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasPermission</span>=<span class="string">"delete"</span>&gt;</span>删除用户<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasPermission</span>=<span class="string">"update"</span>&gt;</span>更新用户<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasPermission</span>=<span class="string">"query"</span>&gt;</span>查询用户<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;logout&#125;"</span>&gt;</span>点我注销<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-Controller"><a href="#7-Controller" class="headerlink" title="7. Controller"></a>7. Controller</h2><h3 id="1-UserController"><a href="#1-UserController" class="headerlink" title="1. UserController"></a>1. UserController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(HttpServletRequest request, User inuser, String uname, String upwd)</span> </span>&#123;</span><br><span class="line">        UsernamePasswordToken usernamePasswordToken = <span class="keyword">new</span> UsernamePasswordToken(uname, upwd);</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//登录</span></span><br><span class="line">            subject.login(usernamePasswordToken);</span><br><span class="line">            User user = (User) subject.getPrincipal();</span><br><span class="line">            request.getSession().setAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/logout"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">logout</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">// 执行注销</span></span><br><span class="line">        <span class="keyword">if</span> (subject.isAuthenticated()) &#123;</span><br><span class="line">            subject.logout();</span><br><span class="line">        &#125;</span><br><span class="line">        request.getSession().removeAttribute(<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-异常处理"><a href="#2-异常处理" class="headerlink" title="2. 异常处理"></a>2. 异常处理</h3><p>些常见的<strong>登录异常</strong>如下表，可按业务需要使用：</p><table><thead><tr><th>异常</th><th>描述</th></tr></thead><tbody><tr><td>UnknownAccountException</td><td>找不到用户</td></tr><tr><td>IncorrectCredentialsException</td><td>用户名密码不正确</td></tr><tr><td>LockedAccountException</td><td>用户被锁定</td></tr><tr><td>ExcessiveAttemptsException</td><td>密码重试超过次数</td></tr><tr><td>ExpiredCredentialsException</td><td>密钥已经过期</td></tr></tbody></table><p><strong>注意</strong> ：需要模糊处理账户或密码错误等情况。</p><h2 id="8-Thymeleaf引入Shiro标签"><a href="#8-Thymeleaf引入Shiro标签" class="headerlink" title="8. Thymeleaf引入Shiro标签"></a>8. Thymeleaf引入Shiro标签</h2><h3 id="8-1-引入thymeleaf-extras-shiro"><a href="#8-1-引入thymeleaf-extras-shiro" class="headerlink" title="8.1 引入thymeleaf-extras-shiro"></a>8.1 引入thymeleaf-extras-shiro</h3><p>在<code>pom.xml</code>中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-2-Shiro配置文件修改"><a href="#8-2-Shiro配置文件修改" class="headerlink" title="8.2 Shiro配置文件修改"></a>8.2 Shiro配置文件修改</h3><p>引入依赖后，需要在ShiroConfig中配置该方言标签：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thymeleaf中使用shiro标签</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroDialect <span class="title">shiroDialect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ShiroDialect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3-使用"><a href="#8-3-使用" class="headerlink" title="8.3 使用"></a>8.3 使用</h3><h4 id="1-html中引入"><a href="#1-html中引入" class="headerlink" title="1. html中引入"></a>1. html中引入</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:shiro</span>=<span class="string">"http://www.pollix.at/thymeleaf/shiro"</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasPermission</span>=<span class="string">"add"</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有<code>add</code>权限时才会显示<code>添加用户</code></p><h4 id="3-例子"><a href="#3-例子" class="headerlink" title="3. 例子"></a>3. 例子</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:shiro</span>=<span class="string">"http://www.pollix.at/thymeleaf/shiro"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">欢迎您，<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.uname&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasPermission</span>=<span class="string">"add"</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasPermission</span>=<span class="string">"delete"</span>&gt;</span>删除用户<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasPermission</span>=<span class="string">"update"</span>&gt;</span>更新用户<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasPermission</span>=<span class="string">"query"</span>&gt;</span>查询用户<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;logout&#125;"</span>&gt;</span>点我注销<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-测试"><a href="#9-测试" class="headerlink" title="9. 测试"></a>9. 测试</h2><p>运行程序后进入登录页面，登录用户<code>张三</code>可以看到</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">添加用户</span><br><span class="line">删除用户</span><br><span class="line">更新用户</span><br><span class="line">查询用户</span><br></pre></td></tr></table></figure><p>所有的四个操作。</p><p>登录用户<code>李四</code>只能看到</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查询用户</span><br></pre></td></tr></table></figure><p>说明Shiro权限控制配置成功了。</p><h2 id="10-参考"><a href="#10-参考" class="headerlink" title="10. 参考"></a>10. 参考</h2><p><code>官方文档：http://shiro.apache.org/documentation.html</code></p><p><code>https://mrbird.cc/Spring-Boot-Themeleaf%20Shiro%20tag.html</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了如何在SpringBoot项目中整合Shiro安全框架，包括详细步骤和具体实例代码。&lt;/p&gt;
    
    </summary>
    
      <category term="Shiro" scheme="https://www.lixueduan.com/categories/Shiro/"/>
    
    
      <category term="Shiro" scheme="https://www.lixueduan.com/tags/Shiro/"/>
    
  </entry>
  
  <entry>
    <title>Shiro安全框架(一)---什么是Shiro</title>
    <link href="https://www.lixueduan.com/posts/7dd8d38.html"/>
    <id>https://www.lixueduan.com/posts/7dd8d38.html</id>
    <published>2019-03-25T14:00:00.000Z</published>
    <updated>2019-04-15T13:23:41.371Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要讲述了什么是RBAC权限控制，同时对Shiro安全框架做了简单介绍。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p><p><strong><a href="https://www.lixueduan.com/categories/SpringCloud/">SpringCloud入门系列文章目录</a></strong></p><p>源码下载：<a href="https://github.com/illusorycloud/springboot-learning" target="_blank" rel="noopener">GItHub</a></p></blockquote><h2 id="1-RBAC权限控制"><a href="#1-RBAC权限控制" class="headerlink" title="1. RBAC权限控制"></a>1. RBAC权限控制</h2><p>RBAC：<code>Role-Based Access Control</code>基于角色的访问控制</p><h3 id="1-1-RBAC1-0"><a href="#1-1-RBAC1-0" class="headerlink" title="1.1 RBAC1.0"></a>1.1 RBAC1.0</h3><p>用户表 角色表 菜单表(权限表)  和两个中间表 用户-角色表 角色-菜单表。</p><p>菜单表中存放所有的功能，角色表中设置多种角色(职位)，权限赋给角色，然后在将角色关联到用户上，这样就不用给每个用户都赋值权限了。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/shiro/rbac-base.png" alt="rbac1.0"></p><h3 id="1-2-RBAC2-0"><a href="#1-2-RBAC2-0" class="headerlink" title="1.2 RBAC2.0"></a>1.2 RBAC2.0</h3><p>随着项目的扩大，人数特别特别多了，给每个用户赋角色都很麻烦，然后又添加了一个<code>用户组表</code>,对用户进行分组，如果角色也特别特别多，那么在加一个<code>角色组表</code>，用户组与用户管理，角色组与角色关联，最后用户组再与角色组关联。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/shiro/rbac-usergroup.png" alt=""></p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/shiro/rbac-permission.png" alt=""></p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/shiro/rbac-all.png" alt="rbac2.0"></p><h2 id="2-Shiro"><a href="#2-Shiro" class="headerlink" title="2. Shiro"></a>2. Shiro</h2><h3 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h3><p>Java中安全管理框架有<code>spring security</code>和<code>shiro</code>，其中<code>spring security</code>依赖于<code>spring</code>，且比较复杂，学习曲线比较该，<code>shiro</code>比较简单且独立，java se单机环境都可以使用。</p><h3 id="2-2-名词解释"><a href="#2-2-名词解释" class="headerlink" title="2.2 名词解释"></a>2.2 名词解释</h3><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/shiro/ShiroFeatures_Authentication.png" alt=""></p><p><strong>Shiro是一个强大易用的Java安全框架,提供了认证、授权、加密和会话管理等功能</strong>。</p><ul><li><strong>Authentication</strong>：身份认证/登录，验证用户是不是拥有相应的身份；</li><li><strong>Authorization</strong>：授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情，常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限；</li><li><strong>Session Manager</strong>：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通JavaSE环境的，也可以是如Web环境的；</li><li><strong>Cryptography</strong>：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；</li><li><strong>Web Support</strong>：Web支持，可以非常容易的集成到Web环境；</li><li><strong>Caching</strong>：缓存，比如用户登录后，其用户信息、拥有的角色/权限不必每次去查，这样可以提高效率；</li><li><strong>Concurrency</strong>：shiro支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；</li><li><strong>Testing</strong>：提供测试支持；</li><li><strong>Run As</strong>：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；</li><li><strong>Remember Me</strong>：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了。</li></ul><p><strong>记住一点，Shiro不会去维护用户、维护权限；这些需要我们自己去设计提供；然后通过相应的接口注入给Shiro即可</strong>。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/shiro/shiro-seq.png" alt=""></p><p>可以看到：应用代码直接交互的对象是Subject，也就是说Shiro的对外API核心就是Subject；其每个API的含义：</p><ul><li><strong>Subject</strong>：主体，代表了当前“用户”，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是Subject，如网络爬虫，机器人等；即一个抽象概念；所有Subject都绑定到SecurityManager，与Subject的所有交互都会委托给SecurityManager；可以把Subject认为是一个门面；SecurityManager才是实际的执行者；</li><li><strong>SecurityManager</strong>：安全管理器；即所有与安全有关的操作都会与SecurityManager交互；且它管理着所有Subject；可以看出它是Shiro的核心，它负责与后边介绍的其他组件进行交互，如果学习过SpringMVC，你可以把它看成DispatcherServlet前端控制器；</li><li><strong>Realm</strong>：域，Shiro从从Realm获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么它需要从Realm获取相应的用户进行比较以确定用户身份是否合法；也需要从Realm得到用户相应的角色/权限进行验证用户是否能进行操作；可以把Realm看成DataSource，即安全数据源。</li></ul><h3 id="2-3-具体架构"><a href="#2-3-具体架构" class="headerlink" title="2.3 具体架构"></a>2.3 具体架构</h3><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/shiro/shiro-crchitecture.png" alt=""></p><ul><li><strong>Subject</strong>：主体，可以看到主体可以是任何可以与应用交互的“用户”；</li><li><strong>SecurityManager</strong>：相当于SpringMVC中的DispatcherServlet或者Struts2中的FilterDispatcher；是Shiro的心脏；所有具体的交互都通过SecurityManager进行控制；它管理着所有Subject、且负责进行认证和授权、及会话、缓存的管理。</li><li><strong>Authenticator</strong>：认证器，负责主体认证的，这是一个扩展点，如果用户觉得Shiro默认的不好，可以自定义实现；其需要认证策略（Authentication Strategy），即什么情况下算用户认证通过了；</li><li><strong>Authrizer</strong>：授权器，或者访问控制器，用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能；</li><li><strong>Realm</strong>：可以有1个或多个Realm，可以认为是安全实体数据源，即用于获取安全实体的；可以是JDBC实现，也可以是LDAP实现，或者内存实现等等；由用户提供；注意：Shiro不知道你的用户/权限存储在哪及以何种格式存储；所以我们一般在应用中都需要实现自己的Realm；</li><li><strong>SessionManager</strong>：如果写过Servlet就应该知道Session的概念，Session呢需要有人去管理它的生命周期，这个组件就是SessionManager；而Shiro并不仅仅可以用在Web环境，也可以用在如普通的JavaSE环境、EJB等环境；所有呢，Shiro就抽象了一个自己的Session来管理主体与应用之间交互的数据；这样的话，比如我们在Web环境用，刚开始是一台Web服务器；接着又上了台EJB服务器；这时想把两台服务器的会话数据放到一个地方，这个时候就可以实现自己的分布式会话（如把数据放到Memcached服务器）；</li><li><strong>SessionDAO</strong>：DAO大家都用过，数据访问对象，用于会话的CRUD，比如我们想把Session保存到数据库，那么可以实现自己的SessionDAO，通过如JDBC写到数据库；比如想把Session放到Memcached中，可以实现自己的Memcached SessionDAO；另外SessionDAO中可以使用Cache进行缓存，以提高性能；</li><li><strong>CacheManager</strong>：缓存控制器，来管理如用户、角色、权限等的缓存的；因为这些数据基本上很少去改变，放到缓存中后可以提高访问的性能</li><li><strong>Cryptography</strong>：密码模块，Shiro提高了一些常见的加密组件用于如密码加密/解密的。</li></ul><h2 id="3-参考"><a href="#3-参考" class="headerlink" title="3. 参考"></a>3. 参考</h2><p><code>https://blog.csdn.net/yangwenxue_admin/article/details/73936803</code></p><p><code>官方文档：http://shiro.apache.org/documentation.html</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要讲述了什么是RBAC权限控制，同时对Shiro安全框架做了简单介绍。&lt;/p&gt;
    
    </summary>
    
      <category term="Shiro" scheme="https://www.lixueduan.com/categories/Shiro/"/>
    
    
      <category term="Shiro" scheme="https://www.lixueduan.com/tags/Shiro/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud入门系列(九)---服务监控  Spring Boot Admin</title>
    <link href="https://www.lixueduan.com/posts/14927f8f.html"/>
    <id>https://www.lixueduan.com/posts/14927f8f.html</id>
    <published>2019-03-23T14:00:00.000Z</published>
    <updated>2019-04-11T14:09:15.754Z</updated>
    
    <content type="html"><![CDATA[<p>随着开发周期的推移，项目会不断变大，切分出的服务也会越来越多，这时一个个的微服务构成了错综复杂的系统，各个服务的信息收集与监控变得十分艰难。</p><a id="more"></a><blockquote><p><strong><a href="https://www.lixueduan.com/categories/SpringCloud/">SpringCloud入门系列文章目录</a></strong></p><p> <a href="https://www.lixueduan.com/posts/c41e9ac1.html">SpringCloud入门系列(一)—统一依赖管理 Dependencies</a></p><p> <a href="https://www.lixueduan.com/posts/8735f06d.html">SpringCloud入门系列(二)—服务注册与发现</a></p><p> <a href="https://www.lixueduan.com/posts/cc38b97d.html">SpringCloud入门系列(三)—服务提供者 Provider</a></p><p> <a href="https://www.lixueduan.com/posts/bf9c3958.html">SpringCloud入门系列(四)—服务消费者 Consumer</a></p><p> <a href="https://www.lixueduan.com/posts/3cc75bae.html">SpringCloud入门系列(五)—服务熔断 Hystrix</a></p><p> <a href="https://www.lixueduan.com/posts/abd301c1.html">SpringCloud入门系列(六)—路由网关 Zuul</a></p><p> <a href="https://www.lixueduan.com/posts/68aa18ee.html">SpringCloud入门系列(七)—分布式配置中心 Spring Cloud Config</a></p><p> <a href="https://www.lixueduan.com/posts/c9420366.html">SpringCloud入门系列(八)—服务链路追踪 ZipKin</a></p><p><a href="https://www.lixueduan.com/posts/14927f8f.html">SpringCloud入门系列(九)—服务监控 Spring Boot Admin</a></p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p><p>Demo下载：<a href="https://github.com/illusorycloud/springboot-learning" target="_blank" rel="noopener">GItHub</a></p></blockquote><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>对于各个微服务系统的健康状态、会话数量、并发数、服务资源、延迟等度量信息的收集就成为了一个挑战。<code>Spring Boot Admin</code> 应运而生，它正式基于这些需求开发出的一套功能强大的监控管理系统。</p><p><code>Spring Boot Admin</code> 有两个角色组成，一个是 <code>Spring Boot Admin Serve</code>r，一个是 <code>Spring Boot Admin Client</code>。</p><h2 id="2-Spring-Boot-Admin-服务端"><a href="#2-Spring-Boot-Admin-服务端" class="headerlink" title="2. Spring Boot Admin 服务端"></a>2. Spring Boot Admin 服务端</h2><p>创建一个工程名为 <code>hello-spring-cloud-admin</code> 的项目作为服务端。</p><h3 id="2-1-pom-xml"><a href="#2-1-pom-xml" class="headerlink" title="2.1 pom.xml"></a>2.1 pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lixueduan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../hello-spring-cloud-dependencies/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-admin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-spring-cloud-admin<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.lixueduan.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inceptionYear</span>&gt;</span>2019-Now<span class="tag">&lt;/<span class="name">inceptionYear</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jolokia<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jolokia-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot End --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud End --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.illusory.hello.spring.cloud.admin.AdminApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要增加了 2 个依赖，<code>org.jolokia:jolokia-core</code>、<code>de.codecentric:spring-boot-admin-starter-server</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jolokia<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jolokia-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中 <code>spring-boot-admin-starter-server</code> 的版本号为：<code>2.0.0</code>，这里没写版本号是因为我已将版本号托管到 <code>dependencies</code> 项目中</p><h3 id="2-2-Application"><a href="#2-2-Application" class="headerlink" title="2.2 Application"></a>2.2 Application</h3><p>通过 <code>@EnableAdminServer</code> 注解开启 Admin 功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.admin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.codecentric.boot.admin.server.config.EnableAdminServer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableAdminServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(AdminApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-application-yml"><a href="#2-3-application-yml" class="headerlink" title="2.3 application.yml"></a>2.3 application.yml</h3><p>设置端口号为：<code>8084</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">hello-spring-cloud-admin</span></span><br><span class="line"><span class="attr">  zipkin:</span></span><br><span class="line"><span class="attr">    base-url:</span> <span class="attr">http://localhost:9411</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8084</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoint:</span></span><br><span class="line"><span class="attr">    health:</span></span><br><span class="line"><span class="attr">      show-details:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">health,info</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><p>主要增加了 Spring Boot Admin Server 的相关配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoint:</span></span><br><span class="line"><span class="attr">    health:</span></span><br><span class="line"><span class="attr">      show-details:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">health,info</span></span><br></pre></td></tr></table></figure><h3 id="2-4-测试访问监控中心"><a href="#2-4-测试访问监控中心" class="headerlink" title="2.4. 测试访问监控中心"></a>2.4. 测试访问监控中心</h3><p>打开浏览器访问：<code>http://localhost:8084</code></p><h2 id="3-Spring-Boot-Admin-客户端"><a href="#3-Spring-Boot-Admin-客户端" class="headerlink" title="3. Spring Boot Admin 客户端"></a>3. Spring Boot Admin 客户端</h2><p>创建一个工程名为 <code>hello-spring-cloud-admin-client</code> 的项目作为客户端。</p><h3 id="3-1-pom-xml"><a href="#3-1-pom-xml" class="headerlink" title="3.1 pom.xml"></a>3.1 pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lixueduan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../hello-spring-cloud-dependencies/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-admin-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-spring-cloud-admin-client<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.lixueduan.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inceptionYear</span>&gt;</span>2019-Now<span class="tag">&lt;/<span class="name">inceptionYear</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jolokia<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jolokia-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot End --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud End --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.illusory.hello.spring.cloud.admin.client.AdminClientApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要增加了 2 个依赖，<code>org.jolokia:jolokia-core</code>、<code>de.codecentric:spring-boot-admin-starter-client</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jolokia<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jolokia-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中 <code>spring-boot-admin-starter-client</code> 的版本号为：<code>2.0.0</code>，这里没写版本号是因为我已将版本号托管到 <code>dependencies</code> 项目中</p><h3 id="3-2-application-yml"><a href="#3-2-application-yml" class="headerlink" title="3.2 application.yml"></a>3.2 application.yml</h3><p>设置端口号为：<code>8085</code>，并设置 Spring Boot Admin 的服务端地址</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">hello-spring-cloud-admin-client</span></span><br><span class="line"><span class="attr">  boot:</span></span><br><span class="line"><span class="attr">    admin:</span></span><br><span class="line"><span class="attr">      client:</span></span><br><span class="line"><span class="attr">        url:</span> <span class="attr">http://localhost:8084</span></span><br><span class="line"><span class="attr">  zipkin:</span></span><br><span class="line"><span class="attr">    base-url:</span> <span class="attr">http://localhost:9411</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8085</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><p>主要增加了 Spring Boot Admin Client 相关配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  boot:</span></span><br><span class="line"><span class="attr">    admin:</span></span><br><span class="line"><span class="attr">      client:</span></span><br><span class="line"><span class="attr">        url:</span> <span class="attr">http://localhost:8084</span></span><br></pre></td></tr></table></figure><h3 id="3-3-测试"><a href="#3-3-测试" class="headerlink" title="3.3 测试"></a>3.3 测试</h3><p>重启服务后再次去访问服务端，若能看到新增的服务则说明成功.</p><h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h2><p>本章节我们主要搭建了<code>Spring-Boot-Admin</code>项目的服务端和客户端，实现了对服务的动态监控。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着开发周期的推移，项目会不断变大，切分出的服务也会越来越多，这时一个个的微服务构成了错综复杂的系统，各个服务的信息收集与监控变得十分艰难。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud入门系列(八)---服务链路追踪 ZipKin</title>
    <link href="https://www.lixueduan.com/posts/c9420366.html"/>
    <id>https://www.lixueduan.com/posts/c9420366.html</id>
    <published>2019-03-22T14:00:00.000Z</published>
    <updated>2019-04-11T14:09:30.563Z</updated>
    
    <content type="html"><![CDATA[<p>微服务架构是通过业务来划分服务的，使用 REST 调用。对外暴露的一个接口，可能需要很多个服务协同才能完成这个接口功能，如果链路上任何一个服务出现问题或者网络超时，都会形成导致接口调用失败。随着业务的不断扩张，服务之间互相调用会越来越复杂。</p><a id="more"></a><blockquote><p><strong><a href="https://www.lixueduan.com/categories/SpringCloud/">SpringCloud入门系列文章目录</a></strong></p><p><a href="https://www.lixueduan.com/posts/c41e9ac1.html">SpringCloud入门系列(一)—统一依赖管理 Dependencies</a></p><p><a href="https://www.lixueduan.com/posts/8735f06d.html">SpringCloud入门系列(二)—服务注册与发现</a></p><p><a href="https://www.lixueduan.com/posts/cc38b97d.html">SpringCloud入门系列(三)—服务提供者 Provider</a></p><p><a href="https://www.lixueduan.com/posts/bf9c3958.html">SpringCloud入门系列(四)—服务消费者 Consumer</a></p><p><a href="https://www.lixueduan.com/posts/3cc75bae.html">SpringCloud入门系列(五)—服务熔断 Hystrix</a></p><p><a href="https://www.lixueduan.com/posts/abd301c1.html">SpringCloud入门系列(六)—路由网关 Zuul</a></p><p><a href="https://www.lixueduan.com/posts/68aa18ee.html">SpringCloud入门系列(七)—分布式配置中心 Spring Cloud Config</a></p><p><a href="https://www.lixueduan.com/posts/c9420366.html">SpringCloud入门系列(八)—服务链路追踪 ZipKin</a></p><p><a href="https://www.lixueduan.com/posts/14927f8f.html">SpringCloud入门系列(九)—服务监控 Spring Boot Admin</a></p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p><p>Demo下载：<a href="https://github.com/illusorycloud/springboot-learning" target="_blank" rel="noopener">GItHub</a></p><p><strong><a href="https://www.lixueduan.com/categories/SpringCloud/">SpringCloud入门系列文章目录</a></strong></p></blockquote><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>ZipKin 是一个开放源代码的分布式跟踪系统，由 Twitter 公司开源，它致力于收集服务的定时数据，以解决微服务架构中的延迟问题，包括数据的收集、存储、查找和展现。它的理论模型来自于 Google Dapper 论文。</p><p>每个服务向 ZipKin 报告计时数据，ZipKin 会根据调用关系通过 ZipKin UI 生成依赖关系图，显示了多少跟踪请求通过每个服务，该系统让开发者可通过一个 Web 前端轻松的收集和分析数据，例如用户每次请求服务的处理时间等，可方便的监测系统中存在的瓶颈。</p><h2 id="2-创建-ZipKin-服务端"><a href="#2-创建-ZipKin-服务端" class="headerlink" title="2. 创建 ZipKin 服务端"></a>2. 创建 ZipKin 服务端</h2><p>创建一个工程名为 <code>hello-spring-cloud-zipkin</code> 的项目</p><h3 id="2-1-pom-xml"><a href="#2-1-pom-xml" class="headerlink" title="2.1 pom.xml"></a>2.1 pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lixueduan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../hello-spring-cloud-dependencies/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-spring-cloud-zipkin<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.lixueduan.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inceptionYear</span>&gt;</span>2019-Now<span class="tag">&lt;/<span class="name">inceptionYear</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot End --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-autoconfigure-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud End --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.illusory.hello.spring.cloud.zipkin.ZipKinApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要增加了 3 个依赖，<code>io.zipkin.java:zipkin</code>、<code>io.zipkin.java:zipkin-server</code>、<code>io.zipkin.java:zipkin-autoconfigure-ui</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-autoconfigure-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意版本号为：<code>2.10.1</code>，这里没写版本号是因为我已将版本号托管到 <code>dependencies</code> 项目中</p><h3 id="2-2-Application"><a href="#2-2-Application" class="headerlink" title="2.2 Application"></a>2.2 Application</h3><p>通过 <code>@EnableZipkinServer</code> 注解开启 Zipkin Server 功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.zipkin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"><span class="keyword">import</span> zipkin.server.internal.EnableZipkinServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableZipkinServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZipKinApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZipKinApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-application-yml"><a href="#2-3-application-yml" class="headerlink" title="2.3 application.yml"></a>2.3 application.yml</h3><p>设置端口号为：<code>9411</code>，该端口号为 Zipkin Server 的默认端口号</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">hello-spring-cloud-zipkin</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9411</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br><span class="line">      </span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  metrics:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        auto-time-requests:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="3-追踪服务"><a href="#3-追踪服务" class="headerlink" title="3. 追踪服务"></a>3. 追踪服务</h2><p>在 <strong>所有需要被追踪的项目（大部分需要被追踪，包括 Eureka Server）</strong> 中增加 <code>spring-cloud-starter-zipkin</code> 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这些项目的 <code>application.yml</code> 配置文件中增加 Zipkin Server 的地址即可</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  zipkin:</span></span><br><span class="line"><span class="attr">    base-url:</span> <span class="attr">http://localhost:9411</span></span><br></pre></td></tr></table></figure><h2 id="4-测试追踪"><a href="#4-测试追踪" class="headerlink" title="4. 测试追踪"></a>4. 测试追踪</h2><p>启动全部项目，打开浏览器访问：<code>http://localhost:9411/</code>能看到各个服务的具体调用流程。</p><h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h2><p>本章我们主要使用<code>ZipKin</code>组件实现了服务的链路追踪，方便的统计服务之间的调用情况等信息。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微服务架构是通过业务来划分服务的，使用 REST 调用。对外暴露的一个接口，可能需要很多个服务协同才能完成这个接口功能，如果链路上任何一个服务出现问题或者网络超时，都会形成导致接口调用失败。随着业务的不断扩张，服务之间互相调用会越来越复杂。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud入门系列(七)---分布式配置中心 Spring Cloud Config</title>
    <link href="https://www.lixueduan.com/posts/68aa18ee.html"/>
    <id>https://www.lixueduan.com/posts/68aa18ee.html</id>
    <published>2019-03-21T14:00:00.000Z</published>
    <updated>2019-04-11T14:09:46.802Z</updated>
    
    <content type="html"><![CDATA[<p>在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件。</p><a id="more"></a><blockquote><p><strong><a href="https://www.lixueduan.com/categories/SpringCloud/">SpringCloud入门系列文章目录</a></strong></p><p><a href="https://www.lixueduan.com/posts/c41e9ac1.html">SpringCloud入门系列(一)—统一依赖管理 Dependencies</a></p><p><a href="https://www.lixueduan.com/posts/8735f06d.html">SpringCloud入门系列(二)—服务注册与发现</a></p><p><a href="https://www.lixueduan.com/posts/cc38b97d.html">SpringCloud入门系列(三)—服务提供者 Provider</a></p><p><a href="https://www.lixueduan.com/posts/bf9c3958.html">SpringCloud入门系列(四)—服务消费者 Consumer</a></p><p><a href="https://www.lixueduan.com/posts/3cc75bae.html">SpringCloud入门系列(五)—服务熔断 Hystrix</a></p><p><a href="https://www.lixueduan.com/posts/abd301c1.html">SpringCloud入门系列(六)—路由网关 Zuul</a></p><p><a href="https://www.lixueduan.com/posts/68aa18ee.html">SpringCloud入门系列(七)—分布式配置中心 Spring Cloud Config</a></p><p><a href="https://www.lixueduan.com/posts/c9420366.html">SpringCloud入门系列(八)—服务链路追踪 ZipKin</a></p><p><a href="https://www.lixueduan.com/posts/14927f8f.html">SpringCloud入门系列(九)—服务监控 Spring Boot Admin</a></p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p><p>Demo下载：<a href="https://github.com/illusorycloud/springboot-learning" target="_blank" rel="noopener">GItHub</a></p></blockquote><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>在 Spring Cloud 中，有分布式配置中心组件 Spring Cloud Config ，它支持配置服务放在配置服务的内存中（即本地），也支持放在远程 Git 仓库中。在 Spring Cloud Config 组件中，分两个角色，一是 Config Server，二是 Config Client。</p><h2 id="2-搭建分布式配置中心服务端"><a href="#2-搭建分布式配置中心服务端" class="headerlink" title="2. 搭建分布式配置中心服务端"></a>2. 搭建分布式配置中心服务端</h2><p>创建一个工程名为 <code>hello-spring-cloud-config</code> 的项目</p><h3 id="2-1-pom-xml"><a href="#2-1-pom-xml" class="headerlink" title="2.1 pom.xml"></a>2.1 pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lixueduan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../hello-spring-cloud-dependencies/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-spring-cloud-config<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.lixueduan.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inceptionYear</span>&gt;</span>2019-Now<span class="tag">&lt;/<span class="name">inceptionYear</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot End --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud End --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.illusory.hello.spring.cloud.config.ConfigApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要增加了 <code>spring-cloud-config-server</code> 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-Application"><a href="#2-2-Application" class="headerlink" title="2.2 Application"></a>2.2 Application</h3><p>通过 <code>@EnableConfigServer</code> 注解，开启配置服务器功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-application-yml"><a href="#2-3-application-yml" class="headerlink" title="2.3 application.yml"></a>2.3 application.yml</h3><p>增加 Config 相关配置，并设置端口号为：<code>8888</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">hello-spring-cloud-config</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      label:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        git:</span></span><br><span class="line"><span class="attr">          uri:</span> <span class="attr">https://github.com/topsale/spring-cloud-config</span></span><br><span class="line"><span class="attr">          search-paths:</span> <span class="string">respo</span></span><br><span class="line"><span class="attr">          username:</span></span><br><span class="line"><span class="attr">          password:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8888</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><p>相关配置说明，如下：</p><ul><li><code>spring.cloud.config.label</code>：配置仓库的分支</li><li><code>spring.cloud.config.server.git.uri</code>：配置 Git 仓库地址（GitHub、GitLab、码云 …）</li><li><code>spring.cloud.config.server.git.search-paths</code>：配置仓库路径（存放配置文件的目录）</li><li><code>spring.cloud.config.server.git.username</code>：访问 Git 仓库的账号</li><li><code>spring.cloud.config.server.git.password</code>：访问 Git 仓库的密码</li></ul><p>注意事项：</p><ul><li>如果使用 GitLab 作为仓库的话，<code>git.uri</code> 需要在结尾加上 <code>.git</code>，GitHub 则不用</li></ul><h3 id="附：HTTP-请求地址和资源文件映射"><a href="#附：HTTP-请求地址和资源文件映射" class="headerlink" title="附：HTTP 请求地址和资源文件映射"></a>附：HTTP 请求地址和资源文件映射</h3><ul><li><code>http://ip:port/{application}/{profile}[/{label}]</code></li><li><code>http://ip:port/{application}-{profile}.yml</code></li><li><code>http://ip:port/{label}/{application}-{profile}.yml</code></li><li><code>http://ip:port/{application}-{profile}.properties</code></li><li><code>http://ip:port/{label}/{application}-{profile}.properties</code></li></ul><h2 id="2-4-测试"><a href="#2-4-测试" class="headerlink" title="2.4 测试"></a>2.4 测试</h2><p>浏览器端访问：<code>http://localhost:8888/config-client/dev/master</code>显示如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Environment</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>config-client<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">profiles</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>master<span class="tag">&lt;/<span class="name">label</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>9646007f931753d7e96a6dcc9ae34838897a91df<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">state</span>/&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">propertySources</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">propertySources</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>https://github.com/test/spring-cloud-config/respo/config-client-dev.yml<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">source</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">foo</span>&gt;</span>foo version 1<span class="tag">&lt;/<span class="name">foo</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">demo.message</span>&gt;</span>Hello Spring Config<span class="tag">&lt;/<span class="name">demo.message</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">source</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">propertySources</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">propertySources</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">Environment</span>&gt;</span></span><br></pre></td></tr></table></figure><p>证明配置服务中心可以从远程程序获取配置信息</p><h2 id="3-搭建分布式配置中心客户端"><a href="#3-搭建分布式配置中心客户端" class="headerlink" title="3. 搭建分布式配置中心客户端"></a>3. 搭建分布式配置中心客户端</h2><h3 id="3-1-pom-xml"><a href="#3-1-pom-xml" class="headerlink" title="3.1 pom.xml"></a>3.1 pom.xml</h3><p>其他项目就可以作为客户端，在pom.xml中增加 <code>spring-cloud-starter-config</code> 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-application-yml"><a href="#3-2-application-yml" class="headerlink" title="3.2 application.yml"></a>3.2 application.yml</h3><p>增加 Config Client 相关配置，并设置端口号为：<code>8889</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">hello-spring-cloud-config-client</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      uri:</span> <span class="attr">http://localhost:8888</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">config-client</span></span><br><span class="line"><span class="attr">      label:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      profile:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8889</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><p>相关配置说明，如下：</p><ul><li><p><code>spring.cloud.config.uri</code>：配置服务中心的网址</p></li><li><p><code>spring.cloud.config.name</code>：配置文件名称的前缀</p></li><li><p><code>spring.cloud.config.label</code>：配置仓库的分支</p></li><li><p><code>spring.cloud.config.profile</code></p><p>：配置文件的环境标识</p><ul><li>dev：表示开发环境</li><li>test：表示测试环境</li><li>prod：表示生产环境</li></ul></li></ul><p>注意事项：</p><ul><li>配置服务器的默认端口为 <code>8888</code>，如果修改了默认端口，则客户端项目就不能在 <code>application.yml</code> 或 <code>application.properties</code> 中配置 <code>spring.cloud.config.uri</code>，必须在 <code>bootstrap.yml</code> 或是 <code>bootstrap.properties</code> 中配置，原因是 <code>bootstrap</code> 开头的配置文件会被优先加载和配置，切记。</li></ul><h3 id="附：开启-Spring-Boot-Profile"><a href="#附：开启-Spring-Boot-Profile" class="headerlink" title="附：开启 Spring Boot Profile"></a>附：开启 Spring Boot Profile</h3><p>我们在做项目开发的时候，生产环境和测试环境的一些配置可能会不一样，有时候一些功能也可能会不一样，所以我们可能会在上线的时候手工修改这些配置信息。但是 Spring 中为我们提供了 Profile 这个功能。我们只需要在启动的时候添加一个虚拟机参数，激活自己环境所要用的 Profile 就可以了。</p><p>操作起来很简单，只需要为不同的环境编写专门的配置文件，如：<code>application-dev.yml</code>、<code>application-prod.yml</code>， 启动项目时只需要增加一个命令参数 <code>--spring.profiles.active=环境配置</code> 即可，启动命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar hello-spring-cloud-web-admin-feign-1.0.0-SNAPSHOT.jar --spring.profiles.active=pro</span><br></pre></td></tr></table></figure><h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h2><p>本章记录了<code>SpringCloudConfig</code>分布式配置中心的搭建及其具体使用过程与<code>Spring Boot Profile</code>多环境配置。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud入门系列(六)---路由网关 Zuul</title>
    <link href="https://www.lixueduan.com/posts/abd301c1.html"/>
    <id>https://www.lixueduan.com/posts/abd301c1.html</id>
    <published>2019-03-20T14:00:00.000Z</published>
    <updated>2019-04-11T14:10:15.885Z</updated>
    
    <content type="html"><![CDATA[<p>在微服务架构中，需要几个基础的服务治理组件，包括服务注册与发现、服务消费、负载均衡、熔断器、智能路由、配置管理等，由这几个基础组件相互协作，共同组建了一个简单的微服务系统。<code>SpringCloud</code>中路由网关使用的是<code>Zuul</code>。</p><a id="more"></a><blockquote><p><strong><a href="https://www.lixueduan.com/categories/SpringCloud/">SpringCloud入门系列文章目录</a></strong></p><p><a href="https://www.lixueduan.com/posts/c41e9ac1.html">SpringCloud入门系列(一)—统一依赖管理 Dependencies</a></p><p><a href="https://www.lixueduan.com/posts/8735f06d.html">SpringCloud入门系列(二)—服务注册与发现</a></p><p><a href="https://www.lixueduan.com/posts/cc38b97d.html">SpringCloud入门系列(三)—服务提供者 Provider</a></p><p><a href="https://www.lixueduan.com/posts/bf9c3958.html">SpringCloud入门系列(四)—服务消费者 Consumer</a></p><p><a href="https://www.lixueduan.com/posts/3cc75bae.html">SpringCloud入门系列(五)—服务熔断 Hystrix</a></p><p><a href="https://www.lixueduan.com/posts/abd301c1.html">SpringCloud入门系列(六)—路由网关 Zuul</a></p><p><a href="https://www.lixueduan.com/posts/68aa18ee.html">SpringCloud入门系列(七)—分布式配置中心 Spring Cloud Config</a></p><p><a href="https://www.lixueduan.com/posts/c9420366.html">SpringCloud入门系列(八)—服务链路追踪 ZipKin</a></p><p><a href="https://www.lixueduan.com/posts/14927f8f.html">SpringCloud入门系列(九)—服务监控 Spring Boot Admin</a></p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p><p>Demo下载：<a href="https://github.com/illusorycloud/springboot-learning" target="_blank" rel="noopener">GItHub</a></p></blockquote><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>在 Spring Cloud 微服务系统中，一种常见的负载均衡方式是，客户端的请求首先经过负载均衡（Zuul、Ngnix），再到达服务网关（Zuul 集群），然后再到具体的服。服务统一注册到高可用的服务注册中心集群，服务的所有的配置文件由配置服务管理，配置服务的配置文件放在 GIT 仓库，方便开发人员随时改配置。</p><p>Zuul 的主要功能是路由转发和过滤器。路由功能是微服务的一部分，比如 <code>/api/user</code> 转发到到 User 服务，<code>/api/shop</code> 转发到到 Shop 服务。<code>Zuul</code>默认和 <code>Ribbon</code> 结合实现了负载均衡的功能。</p><h2 id="2-使用路由网关统一访问接口"><a href="#2-使用路由网关统一访问接口" class="headerlink" title="2. 使用路由网关统一访问接口"></a>2. 使用路由网关统一访问接口</h2><h3 id="2-1-创建路由网关项目"><a href="#2-1-创建路由网关项目" class="headerlink" title="2.1 创建路由网关项目"></a>2.1 创建路由网关项目</h3><h4 id="1-pom-xml-文件如下："><a href="#1-pom-xml-文件如下：" class="headerlink" title="1. pom.xml 文件如下："></a>1. pom.xml 文件如下：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lixueduan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../hello-spring-cloud-dependencies/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-spring-cloud-zuul<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.lixueduan.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inceptionYear</span>&gt;</span>2019-Now<span class="tag">&lt;/<span class="name">inceptionYear</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot End --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud End --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--指向启动类 用于jar包方式运行--&gt;</span>  <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.illusory.hello.spring.cloud.zuul.ZuulApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要是增加了 Zuul 的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-Application"><a href="#2-Application" class="headerlink" title="2. Application"></a>2. Application</h4><p>增加 <code>@EnableZuulProxy</code> 注解开启 Zuul 功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.zuul;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.EnableZuulProxy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-application-yml"><a href="#3-application-yml" class="headerlink" title="3. application.yml"></a>3. application.yml</h4><ul><li>设置端口号为：<code>8769</code></li><li>增加 Zuul 配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">hello-spring-cloud-zuul</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8769</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line">  <span class="comment">#api-a api-b是自定义的名字</span></span><br><span class="line"><span class="attr">    api-a:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/api/a/**</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">hello-spring-cloud-web-admin-ribbon</span></span><br><span class="line"><span class="attr">    api-b:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/api/b/**</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">hello-spring-cloud-web-admin-feign</span></span><br></pre></td></tr></table></figure><p>路由说明：</p><ul><li>以 <code>/api/a</code> 开头的请求都转发给 <code>hello-spring-cloud-web-admin-ribbon</code> 服务</li><li>以 <code>/api/b</code> 开头的请求都转发给 <code>hello-spring-cloud-web-admin-feign</code> 服务</li></ul><h3 id="2-2-测试访问"><a href="#2-2-测试访问" class="headerlink" title="2.2 测试访问"></a>2.2 测试访问</h3><p>依次运行<code>Eureka</code>、<code>Provider</code>、<code>Consumer</code>、<code>Zuul</code></p><p>打开浏览器访问：<code>http://localhost:8769/api/a/hi?message=HelloZuul</code> 浏览器显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi，your message is :&quot;HelloZuul&quot; i am from port：8763</span><br></pre></td></tr></table></figure><p>打开浏览器访问：<code>http://localhost:8769/api/b/hi?message=HelloZuul</code>浏览器显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi，your message is :&quot;HelloZuul&quot; i am from port：8763</span><br></pre></td></tr></table></figure><p>至此说明 Zuul 的路由功能配置成功</p><h3 id="2-3-配置网关路由失败时的回调"><a href="#2-3-配置网关路由失败时的回调" class="headerlink" title="2.3 配置网关路由失败时的回调"></a>2.3 配置网关路由失败时的回调</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.zuul.fallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.filters.route.FallbackProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.ClientHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 路由 hello-spring-cloud-web-admin-feign 失败时的回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAdminFeignFallbackProvider</span> <span class="keyword">implements</span> <span class="title">FallbackProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ServiceId，如果需要所有调用都支持回退，则 return "*" 或 return null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello-spring-cloud-web-admin-feign"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果请求服务失败，则返回指定的信息给调用者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> route</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientHttpResponse <span class="title">fallbackResponse</span><span class="params">(String route, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ClientHttpResponse() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 网关向 api 服务请求失败了，但是消费者客户端向网关发起的请求是成功的，</span></span><br><span class="line"><span class="comment">             * 不应该把 api 的 404,500 等问题抛给客户端</span></span><br><span class="line"><span class="comment">             * 网关和 api 服务集群对于客户端来说是黑盒</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> HttpStatus <span class="title">getStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> HttpStatus.OK;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRawStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> HttpStatus.OK.value();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getStatusText</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> HttpStatus.OK.getReasonPhrase();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> InputStream <span class="title">getBody</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">                Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                map.put(<span class="string">"status"</span>, <span class="number">200</span>);</span><br><span class="line">                map.put(<span class="string">"message"</span>, <span class="string">"无法连接，请检查您的网络"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ByteArrayInputStream(objectMapper.writeValueAsString(map).getBytes(<span class="string">"UTF-8"</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> HttpHeaders <span class="title">getHeaders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">                <span class="comment">// 和 getBody 中的内容编码一致</span></span><br><span class="line">                headers.setContentType(MediaType.APPLICATION_JSON_UTF8);</span><br><span class="line">                <span class="keyword">return</span> headers;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-使用路由网关的服务过滤功能"><a href="#3-使用路由网关的服务过滤功能" class="headerlink" title="3. 使用路由网关的服务过滤功能"></a>3. 使用路由网关的服务过滤功能</h2><p>Zuul 不仅仅只是路由，还有很多强大的功能，例如它的服务过滤功能，比如用在安全验证方面。</p><h3 id="3-1-创建服务过滤器"><a href="#3-1-创建服务过滤器" class="headerlink" title="3.1 创建服务过滤器"></a>3.1 创建服务过滤器</h3><p>继承 <code>ZuulFilter</code> 类并在类上增加 <code>@Component</code> 注解就可以使用服务过滤功能了，非常简单方便</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.zuul.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.ZuulFilter;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.context.RequestContext;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.exception.ZuulException;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(LoginFilter.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置过滤类型，有四种不同生命周期的过滤器类型</span></span><br><span class="line"><span class="comment">     * 1. pre：路由之前</span></span><br><span class="line"><span class="comment">     * 2. routing：路由之时</span></span><br><span class="line"><span class="comment">     * 3. post：路由之后</span></span><br><span class="line"><span class="comment">     * 4. error：发送错误调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置过滤的顺序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置是否需要过滤：true/需要，false/不需要</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤器的具体业务代码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ZuulException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = context.getRequest();</span><br><span class="line">        logger.info(<span class="string">"&#123;&#125; &gt;&gt;&gt; &#123;&#125;"</span>, request.getMethod(), request.getRequestURL().toString());</span><br><span class="line">        String token = request.getParameter(<span class="string">"token"</span>);</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="keyword">null</span>) &#123;</span><br><span class="line">            logger.warn(<span class="string">"Token is empty"</span>);</span><br><span class="line">            context.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            context.setResponseStatusCode(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                context.getResponse().getWriter().write(<span class="string">"Token is empty"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.info(<span class="string">"OK"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-名词解释"><a href="#3-2-名词解释" class="headerlink" title="3.2 名词解释"></a>3.2 名词解释</h3><h4 id="1-filterType"><a href="#1-filterType" class="headerlink" title="1. filterType"></a>1. filterType</h4><p>返回一个字符串代表过滤器的类型，在 Zuul 中定义了四种不同生命周期的过滤器类型</p><ul><li>pre：路由之前</li><li>routing：路由之时</li><li>post： 路由之后</li><li>error：发送错误调用</li></ul><h4 id="2-filterOrder"><a href="#2-filterOrder" class="headerlink" title="2. filterOrder"></a>2. filterOrder</h4><p>过滤的顺序</p><h4 id="3-shouldFilter"><a href="#3-shouldFilter" class="headerlink" title="3. shouldFilter"></a>3. shouldFilter</h4><p>是否需要过滤，这里是 <code>true</code>，需要过滤</p><h4 id="4-run"><a href="#4-run" class="headerlink" title="4. run"></a>4. run</h4><p>过滤器的具体业务代码</p><h3 id="3-3-测试过滤器"><a href="#3-3-测试过滤器" class="headerlink" title="3.3 测试过滤器"></a>3.3 测试过滤器</h3><p>浏览器访问：<code>http://localhost:8769/api/a/hi?message=HelloZuul</code> 网页显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Token is empty</span><br></pre></td></tr></table></figure><p>浏览器访问：<code>http://localhost:8769/api/b/hi?message=HelloZuul&amp;token=123</code> 网页显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi，your message is :&quot;HelloZuul&quot; i am from port：8763</span><br></pre></td></tr></table></figure><h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h2><p>到此为止我们使用<code>Zuul</code>路由网关成功实现了统一访问接口和服务过滤功能。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在微服务架构中，需要几个基础的服务治理组件，包括服务注册与发现、服务消费、负载均衡、熔断器、智能路由、配置管理等，由这几个基础组件相互协作，共同组建了一个简单的微服务系统。&lt;code&gt;SpringCloud&lt;/code&gt;中路由网关使用的是&lt;code&gt;Zuul&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud入门系列(五)---服务熔断 Hystrix</title>
    <link href="https://www.lixueduan.com/posts/3cc75bae.html"/>
    <id>https://www.lixueduan.com/posts/3cc75bae.html</id>
    <published>2019-03-19T14:00:00.000Z</published>
    <updated>2019-04-14T12:44:42.835Z</updated>
    
    <content type="html"><![CDATA[<p>在微服务架构中，根据业务来拆分成一个个的服务，服务与服务之间可以通过 <code>RPC</code> 相互调用,为了实现服务的高可用业界提出了熔断器模型。</p><a id="more"></a><blockquote><p><strong><a href="https://www.lixueduan.com/categories/SpringCloud/">SpringCloud入门系列文章目录</a></strong></p><p><a href="https://www.lixueduan.com/posts/c41e9ac1.html">SpringCloud入门系列(一)—统一依赖管理 Dependencies</a></p><p><a href="https://www.lixueduan.com/posts/8735f06d.html">SpringCloud入门系列(二)—服务注册与发现</a></p><p><a href="https://www.lixueduan.com/posts/cc38b97d.html">SpringCloud入门系列(三)—服务提供者 Provider</a></p><p><a href="https://www.lixueduan.com/posts/bf9c3958.html">SpringCloud入门系列(四)—服务消费者 Consumer</a></p><p><a href="https://www.lixueduan.com/posts/3cc75bae.html">SpringCloud入门系列(五)—服务熔断 Hystrix</a></p><p><a href="https://www.lixueduan.com/posts/abd301c1.html">SpringCloud入门系列(六)—路由网关 Zuul</a></p><p><a href="https://www.lixueduan.com/posts/68aa18ee.html">SpringCloud入门系列(七)—分布式配置中心 Spring Cloud Config</a></p><p><a href="https://www.lixueduan.com/posts/c9420366.html">SpringCloud入门系列(八)—服务链路追踪 ZipKin</a></p><p><a href="https://www.lixueduan.com/posts/14927f8f.html">SpringCloud入门系列(九)—服务监控 Spring Boot Admin</a></p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p><p>Demo下载：<a href="https://github.com/illusorycloud/springboot-learning" target="_blank" rel="noopener">GItHub</a></p></blockquote><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>在微服务架构中，根据业务来拆分成一个个的服务，服务与服务之间可以通过 <code>RPC</code> 相互调用，在 Spring Cloud 中可以用 <code>RestTemplate + Ribbon</code> 和 <code>Feign</code> 来调用。为了保证其高可用，单个服务通常会集群部署。由于网络原因或者自身的原因，服务并不能保证 100% 可用，如果单个服务出现问题，调用这个服务就会出现线程阻塞，此时若有大量的请求涌入，<code>Servlet</code> 容器的线程资源会被消耗完毕，导致服务瘫痪。服务与服务之间的依赖性，故障会传播，会对整个微服务系统造成灾难性的严重后果，这就是服务故障的 <strong>“雪崩”</strong> 效应。</p><p>为了解决这个问题，业界提出了熔断器模型。</p><p>Netflix 开源了 Hystrix 组件，实现了熔断器模式，Spring Cloud 对这一组件进行了整合。</p><p>较底层的服务如果出现故障，会导致连锁故障。当对特定的服务的调用的不可用达到一个阀值（Hystrix 是 <strong>5 秒 20 次</strong>） 熔断器将会被打开。</p><p>熔断器打开后，为了避免连锁故障，通过 <code>fallback</code> 方法可以直接返回一个固定值,提示访问出错。</p><h2 id="2-Ribbon-中使用熔断器"><a href="#2-Ribbon-中使用熔断器" class="headerlink" title="2. Ribbon 中使用熔断器"></a>2. Ribbon 中使用熔断器</h2><p>对<code>hello-spring-cloud-web-admin-ribbon</code>项目进行修改。</p><h3 id="2-1-pom-xml"><a href="#2-1-pom-xml" class="headerlink" title="2.1 pom.xml"></a>2.1 pom.xml</h3><p>在 pom.xml 中增加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-Application"><a href="#2-2-Application" class="headerlink" title="2.2 Application"></a>2.2 Application</h3><p>在 Application 中增加 <code>@EnableHystrix</code> 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.web.admin.ribbon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.hystrix.EnableHystrix;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAdminRibbonApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(WebAdminRibbonApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-Service"><a href="#2-3-Service" class="headerlink" title="2.3 Service"></a>2.3 Service</h3><p>在 Service 中增加 <code>@HystrixCommand</code> 注解</p><p>在 Ribbon 调用方法上增加 <code>@HystrixCommand</code> 注解并指定 <code>fallbackMethod</code> 熔断方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.web.admin.ribbon.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"hiError"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://HELLO-SPRING-CLOUD-SERVICE-ADMIN/hi?message="</span> + message, String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hiError</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hi，your message is :\""</span> + message + <span class="string">"\" but request error."</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-测试熔断器"><a href="#2-4-测试熔断器" class="headerlink" title="2.4 测试熔断器"></a>2.4 测试熔断器</h3><p>此时我们关闭服务提供者，再次请求 <code>http://localhost:8764/hi?message=HelloRibbon</code> 浏览器会显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi，your message is :&quot;HelloRibbon&quot; but request error.</span><br></pre></td></tr></table></figure><h2 id="3-Feign-中使用熔断器"><a href="#3-Feign-中使用熔断器" class="headerlink" title="3. Feign 中使用熔断器"></a>3. Feign 中使用熔断器</h2><p>对<code>hello-spring-cloud-web-admin-feign</code>项目进行修改。</p><h3 id="3-1-application-yml"><a href="#3-1-application-yml" class="headerlink" title="3.1 application.yml"></a>3.1 application.yml</h3><p>application.yml中开启熔断</p><p>Feign 是自带熔断器的，但默认是关闭的。需要在配置文件中配置打开它，在配置文件增加以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">feign:</span><br><span class="line">  hystrix:</span><br><span class="line">    enabled: true</span><br></pre></td></tr></table></figure><h3 id="3-2-Service"><a href="#3-2-Service" class="headerlink" title="3.2 Service"></a>3.2 Service</h3><p>在 Service 中增加 <code>fallback</code> 指定类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.web.admin.feign.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.illusory.hello.spring.cloud.web.admin.feign.service.hystrix.AdminServiceHystrix;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"hello-spring-cloud-service-admin"</span>, fallback = AdminServiceHystrix.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AdminService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"hi"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">(@RequestParam(value = <span class="string">"message"</span>)</span> String message)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-AdminServiceHystrix"><a href="#3-3-AdminServiceHystrix" class="headerlink" title="3.3 AdminServiceHystrix"></a>3.3 AdminServiceHystrix</h3><p>创建熔断器类并实现对应的 Feign 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.web.admin.feign.service.hystrix;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.funtl.hello.spring.cloud.web.admin.feign.service.AdminService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminServiceHystrix</span> <span class="keyword">implements</span> <span class="title">AdminService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hi，your message is :\""</span> + message + <span class="string">"\" but request error."</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-测试熔断器"><a href="#3-4-测试熔断器" class="headerlink" title="3.4 测试熔断器"></a>3.4 测试熔断器</h3><p>此时我们关闭服务提供者，再次请求 <code>http://localhost:8765/hi?message=HelloFeign</code> 浏览器会显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi，your message is :&quot;HelloFeign&quot; but request error.</span><br></pre></td></tr></table></figure><p>到这里服务熔断搭建成功。</p><h2 id="4-开启熔断仪表盘"><a href="#4-开启熔断仪表盘" class="headerlink" title="4. 开启熔断仪表盘"></a>4. 开启熔断仪表盘</h2><p>分别对对<code>hello-spring-cloud-web-admin-feign</code>和对<code>hello-spring-cloud-web-admin-ribbon</code>项目进行修改，增加熔断仪表盘功能。</p><h3 id="4-1-pom-xml"><a href="#4-1-pom-xml" class="headerlink" title="4.1 pom.xml"></a>4.1 pom.xml</h3><p>在 <code>pom.xml</code> 中增加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-Application"><a href="#4-2-Application" class="headerlink" title="4.2 Application"></a>4.2 Application</h3><p>在 Application 中增加 <code>@EnableHystrixDashboard</code> 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAdminRibbonApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(WebAdminRibbonApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-HystrixDashboardConfiguration"><a href="#4-3-HystrixDashboardConfiguration" class="headerlink" title="4.3 HystrixDashboardConfiguration"></a>4.3 HystrixDashboardConfiguration</h3><p>创建 <code>hystrix.stream</code> 的 Servlet 配置</p><p>Spring Boot 2.x 版本开启 Hystrix Dashboard 与 Spring Boot 1.x 的方式略有不同，需要增加一个 <code>HystrixMetricsStreamServlet</code> 的配置，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.web.admin.ribbon.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.metrics.eventstream.HystrixMetricsStreamServlet;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixDashboardConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">getServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HystrixMetricsStreamServlet streamServlet = <span class="keyword">new</span> HystrixMetricsStreamServlet();</span><br><span class="line">        ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(streamServlet);</span><br><span class="line">        registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">        registrationBean.addUrlMappings(<span class="string">"/hystrix.stream"</span>);</span><br><span class="line">        registrationBean.setName(<span class="string">"HystrixMetricsStreamServlet"</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-测试-Hystrix-Dashboard"><a href="#4-4-测试-Hystrix-Dashboard" class="headerlink" title="4.4 测试 Hystrix Dashboard"></a>4.4 测试 Hystrix Dashboard</h3><p>浏览器端访问<code>http://localhost:8764/hystrix</code></p><h2 id="附：Hystrix-说明"><a href="#附：Hystrix-说明" class="headerlink" title="附：Hystrix 说明"></a>附：Hystrix 说明</h2><h3 id="fallback-触发条件"><a href="#fallback-触发条件" class="headerlink" title="fallback 触发条件"></a><code>fallback</code> 触发条件</h3><table><thead><tr><th>名字</th><th>描述</th><th>触发fallback</th></tr></thead><tbody><tr><td>EMIT</td><td>值传递</td><td>NO</td></tr><tr><td>SUCCESS</td><td>执行完成，没有错误</td><td>NO</td></tr><tr><td>FAILURE</td><td>执行抛出异常</td><td>YES</td></tr><tr><td>TIMEOUT</td><td>执行开始，但没有在允许的时间内完成</td><td>YES</td></tr><tr><td>BAD_REQUEST</td><td>执行抛出HystrixBadRequestException</td><td>NO</td></tr><tr><td>SHORT_CIRCUITED</td><td>断路器打开，不尝试执行</td><td>YES</td></tr><tr><td>THREAD_POOL_REJECTED</td><td>线程池拒绝，不尝试执行</td><td>YES</td></tr><tr><td>SEMAPHORE_REJECTED</td><td>信号量拒绝，不尝试执行</td><td>YES</td></tr></tbody></table><h3 id="fallback-抛出异常"><a href="#fallback-抛出异常" class="headerlink" title="fallback 抛出异常"></a><code>fallback</code> 抛出异常</h3><table><thead><tr><th>名字</th><th>描述</th><th>抛异常</th></tr></thead><tbody><tr><td>FALLBACK_EMIT</td><td>Fallback值传递</td><td>NO</td></tr><tr><td>FALLBACK_SUCCESS</td><td>Fallback执行完成，没有错误</td><td>NO</td></tr><tr><td>FALLBACK_FAILURE</td><td>Fallback执行抛出出错</td><td>YES</td></tr><tr><td>FALLBACK_REJECTED</td><td>Fallback信号量拒绝，不尝试执行</td><td>YES</td></tr><tr><td>FALLBACK_MISSING</td><td>没有Fallback实例</td><td>YES</td></tr></tbody></table><h3 id="Hystrix-常用配置信息"><a href="#Hystrix-常用配置信息" class="headerlink" title="Hystrix 常用配置信息"></a>Hystrix 常用配置信息</h3><p><strong>超时时间（默认1000ms，单位：ms）</strong></p><ul><li><code>hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds</code>：在调用方配置，被该调用方的所有方法的超时时间都是该值，优先级低于下边的指定配置</li><li><code>hystrix.command.HystrixCommandKey.execution.isolation.thread.timeoutInMilliseconds</code>：在调用方配置，被该调用方的指定方法（HystrixCommandKey 方法名）的超时时间是该值</li></ul><p><strong>线程池核心线程数</strong></p><ul><li><code>hystrix.threadpool.default.coreSize</code>：默认为 10</li></ul><p><strong>Queue</strong></p><ul><li><code>hystrix.threadpool.default.maxQueueSize</code>：最大排队长度。默认 -1，使用 <code>SynchronousQueue</code>。其他值则使用 <code>LinkedBlockingQueue</code>。如果要从 -1 换成其他值则需重启，即该值不能动态调整，若要动态调整，需要使用到下边这个配置</li><li><code>hystrix.threadpool.default.queueSizeRejectionThreshold</code>：排队线程数量阈值，默认为 5，达到时拒绝，如果配置了该选项，队列的大小是该队列</li></ul><p><strong>注意：</strong> 如果 <code>maxQueueSize=-1</code> 的话，则该选项不起作用</p><p><strong>断路器</strong></p><ul><li><code>hystrix.command.default.circuitBreaker.requestVolumeThreshold</code>：当在配置时间窗口内达到此数量的失败后，进行短路。默认 20 个（10s 内请求失败数量达到 20 个，断路器开）</li><li><code>hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds</code>：短路多久以后开始尝试是否恢复，默认 5s</li><li><code>hystrix.command.default.circuitBreaker.errorThresholdPercentage</code>：出错百分比阈值，当达到此阈值后，开始短路。默认 50%</li></ul><p><strong>fallback</strong></p><ul><li><code>hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests</code>：调用线程允许请求 <code>HystrixCommand.GetFallback()</code> 的最大数量，默认 10。超出时将会有异常抛出，注意：该项配置对于 THREAD 隔离模式也起作用</li></ul><h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h2><p>本章节中我们对<code>Ribbon</code>和<code>Feign</code>两个服务消费者项目进行了改造,添加<code>Hystrix</code>组件完成了服务熔断功能，接着添加<code>Hystrix DashBoard</code>组件实现了服务熔断仪表盘功能，方便监控服务熔断相关信息。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在微服务架构中，根据业务来拆分成一个个的服务，服务与服务之间可以通过 &lt;code&gt;RPC&lt;/code&gt; 相互调用,为了实现服务的高可用业界提出了熔断器模型。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud入门系列(四)---服务消费者 Consumer</title>
    <link href="https://www.lixueduan.com/posts/bf9c3958.html"/>
    <id>https://www.lixueduan.com/posts/bf9c3958.html</id>
    <published>2019-03-18T14:00:00.000Z</published>
    <updated>2019-04-14T12:44:04.448Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了<code>SpringCloud-Netflix</code>系列微服务解决方案之服务消费者。</p><a id="more"></a><blockquote><p><strong><a href="https://www.lixueduan.com/categories/SpringCloud/">SpringCloud入门系列文章目录</a></strong></p><p><a href="https://www.lixueduan.com/posts/c41e9ac1.html">SpringCloud入门系列(一)—统一依赖管理 Dependencies</a></p><p><a href="https://www.lixueduan.com/posts/8735f06d.html">SpringCloud入门系列(二)—服务注册与发现</a></p><p><a href="https://www.lixueduan.com/posts/cc38b97d.html">SpringCloud入门系列(三)—服务提供者 Provider</a></p><p><a href="https://www.lixueduan.com/posts/bf9c3958.html">SpringCloud入门系列(四)—服务消费者 Consumer</a></p><p><a href="https://www.lixueduan.com/posts/3cc75bae.html">SpringCloud入门系列(五)—服务熔断 Hystrix</a></p><p><a href="https://www.lixueduan.com/posts/abd301c1.html">SpringCloud入门系列(六)—路由网关 Zuul</a></p><p><a href="https://www.lixueduan.com/posts/68aa18ee.html">SpringCloud入门系列(七)—分布式配置中心 Spring Cloud Config</a></p><p><a href="https://www.lixueduan.com/posts/c9420366.html">SpringCloud入门系列(八)—服务链路追踪 ZipKin</a></p><p><a href="https://www.lixueduan.com/posts/14927f8f.html">SpringCloud入门系列(九)—服务监控 Spring Boot Admin</a></p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p><p>Demo下载：<a href="https://github.com/illusorycloud/springboot-learning" target="_blank" rel="noopener">GItHub</a></p></blockquote><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>在微服务架构中，业务都会被拆分成一个独立的服务，服务与服务的通讯是基于 <code>HTTP Restful</code>的。<code>Spring Cloud</code> 有两种服务调用方式，一种是 <code>ribbon</code> + <code>restTemplate</code>，另一种是 <code>feign</code>。</p><h2 id="2-Ribbon"><a href="#2-Ribbon" class="headerlink" title="2. Ribbon"></a>2. Ribbon</h2><p><code>Ribbon</code> 是一个<code>负载均衡客户端</code>，可以很好的控制 <code>http</code> 和 <code>tcp</code> 的一些行为。</p><p>创建使用<code>Ribbon</code>的项目<code>hello-spring-cloud-web-admin-ribbon</code>作为服务消费者。</p><h3 id="2-1-pom-mxl"><a href="#2-1-pom-mxl" class="headerlink" title="2.1 pom.mxl"></a>2.1 pom.mxl</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lixueduan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../hello-spring-cloud-dependencies/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-web-admin-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-spring-cloud-web-admin-ribbon<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.lixueduan.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inceptionYear</span>&gt;</span>2019-Now<span class="tag">&lt;/<span class="name">inceptionYear</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot End --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud End --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 解决 thymeleaf 模板引擎一定要执行严格的 html5 格式校验问题 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sourceforge.nekohtml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nekohtml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--指向启动类 用于jar包方式运行--&gt;</span>  <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.illusory.hello.spring.cloud.web.admin.ribbon.WebAdminRibbonApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要是增加了 Ribbon 的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-Application"><a href="#2-2-Application" class="headerlink" title="2.2 Application"></a>2.2 Application</h3><p>通过 <code>@EnableDiscoveryClient</code> 注解注册到服务中心</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.web.admin.ribbon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAdminRibbonApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(WebAdminRibbonApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-application-yml"><a href="#2-3-application-yml" class="headerlink" title="2.3 application.yml"></a>2.3 application.yml</h3><p>设置程序端口号为：<code>8764</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">hello-spring-cloud-web-admin-ribbon</span></span><br><span class="line"><span class="attr">  thymeleaf:</span></span><br><span class="line"><span class="attr">    cache:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    mode:</span> <span class="string">LEGACYHTML5</span></span><br><span class="line"><span class="attr">    encoding:</span> <span class="string">UTF-8</span></span><br><span class="line"><span class="attr">    servlet:</span></span><br><span class="line"><span class="attr">      content-type:</span> <span class="string">text/html</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8764</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><h3 id="2-4-Configuration"><a href="#2-4-Configuration" class="headerlink" title="2.4 Configuration"></a>2.4 Configuration</h3><p>配置注入 <code>RestTemplate</code> 的 Bean，并通过 <code>@LoadBalanced</code> 注解表明开启负载均衡功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.web.admin.ribbon.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-Service"><a href="#2-5-Service" class="headerlink" title="2.5 Service"></a>2.5 Service</h3><p>这里直接用的<code>程序名</code>替代了具体的<code>URL</code> 地址，在 Ribbon 中它会根据服务名来选择具体的服务实例，根据服务实例在请求的时候会用具体的 URL 替换掉服务名，代码如下：</p><p>service不在调用dao层而是远程调用服务提供者对外提供的服务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.web.admin.ribbon.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://HELLO-SPRING-CLOUD-SERVICE-ADMIN/hi?message="</span> + message, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-Controller"><a href="#2-6-Controller" class="headerlink" title="2.6 Controller"></a>2.6 Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.web.admin.ribbon.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.illusory.hello.spring.cloud.web.admin.ribbon.service.AdminService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AdminService adminService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"hi"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">(@RequestParam String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> adminService.sayHi(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-7-测试访问"><a href="#2-7-测试访问" class="headerlink" title="2.7 测试访问"></a>2.7 测试访问</h3><p>在浏览器上多次访问 <code>http://localhost:8764/hi?message=HelloRibbon</code></p><h2 id="3-Feign"><a href="#3-Feign" class="headerlink" title="3. Feign"></a>3. Feign</h2><p>Feign 是一个声明式的伪 Http 客户端，它使得写 Http 客户端变得更简单。使用 Feign，只需要创建一个接口并注解。它具有可插拔的注解特性，可使用 Feign 注解和 JAX-RS 注解。Feign 支持可插拔的编码器和解码器。Feign 默认集成了 Ribbon，并和 Eureka 结合，默认实现了负载均衡的效果</p><ul><li>Feign 采用的是基于接口的注解</li><li>Feign 整合了 ribbon</li></ul><p>创建使用<code>Feign</code>的项目<code>hello-spring-cloud-web-admin-feign</code>作为服务消费者。</p><h3 id="3-1-pom-xml"><a href="#3-1-pom-xml" class="headerlink" title="3.1 pom.xml"></a>3.1 pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lixueduan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../hello-spring-cloud-dependencies/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-web-admin-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-spring-cloud-web-admin-feign<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.lixueduan.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inceptionYear</span>&gt;</span>2019-Now<span class="tag">&lt;/<span class="name">inceptionYear</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot End --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud End --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 解决 thymeleaf 模板引擎一定要执行严格的 html5 格式校验问题 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sourceforge.nekohtml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nekohtml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                     <span class="comment">&lt;!--指向启动类 用于jar包方式运行--&gt;</span>  <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.illusory.hello.spring.cloud.web.admin.feign.WebAdminFeignApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要是增加了 Feign 的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-Application"><a href="#3-2-Application" class="headerlink" title="3.2 Application"></a>3.2 Application</h3><p>通过 <code>@EnableFeignClients</code> 注解开启 Feign 功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.web.admin.feign;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAdminFeignApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(WebAdminFeignApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-application-yml"><a href="#3-3-application-yml" class="headerlink" title="3.3 application.yml"></a>3.3 application.yml</h3><p>设置程序端口号为：<code>8765</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">hello-spring-cloud-web-admin-feign</span></span><br><span class="line"><span class="attr">  thymeleaf:</span></span><br><span class="line"><span class="attr">    cache:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    mode:</span> <span class="string">LEGACYHTML5</span></span><br><span class="line"><span class="attr">    encoding:</span> <span class="string">UTF-8</span></span><br><span class="line"><span class="attr">    servlet:</span></span><br><span class="line"><span class="attr">      content-type:</span> <span class="string">text/html</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8765</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><h3 id="3-4-创建-Feign-接口"><a href="#3-4-创建-Feign-接口" class="headerlink" title="3.4 创建 Feign 接口"></a>3.4 创建 Feign 接口</h3><p>通过 <code>@FeignClient(value = &quot;服务名&quot;)</code> 注解来指定调用哪个服务。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.web.admin.feign.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"hello-spring-cloud-service-admin"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AdminService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"hi"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">(@RequestParam(value = <span class="string">"message"</span>)</span> String message)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-Controller"><a href="#3-5-Controller" class="headerlink" title="3.5 Controller"></a>3.5 Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.web.admin.feign.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.funtl.hello.spring.cloud.web.admin.feign.service.AdminService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AdminService adminService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"hi"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">(@RequestParam String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> adminService.sayHi(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-测试访问"><a href="#3-6-测试访问" class="headerlink" title="3.6 测试访问"></a>3.6 测试访问</h3><p>在浏览器上多次访问 <code>http://localhost:8765/hi?message=HelloFeign</code></p><h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h2><p>本章节我们分别使用<code>Ribbon</code>和<code>Feign</code>搭建了一个服务消费者项目。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了&lt;code&gt;SpringCloud-Netflix&lt;/code&gt;系列微服务解决方案之服务消费者。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud入门系列(三)---服务提供者 Provider</title>
    <link href="https://www.lixueduan.com/posts/cc38b97d.html"/>
    <id>https://www.lixueduan.com/posts/cc38b97d.html</id>
    <published>2019-03-17T14:00:00.000Z</published>
    <updated>2019-04-10T14:56:14.862Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了<code>SpringCloud-Netflix</code>系列微服务解决方案之服务提供者。</p><a id="more"></a><blockquote><p><strong><a href="https://www.lixueduan.com/categories/SpringCloud/">SpringCloud入门系列文章目录</a></strong></p><p><a href="https://www.lixueduan.com/posts/c41e9ac1.html">SpringCloud入门系列(一)—统一依赖管理 Dependencies</a></p><p><a href="https://www.lixueduan.com/posts/8735f06d.html">SpringCloud入门系列(二)—服务注册与发现</a></p><p><a href="https://www.lixueduan.com/posts/cc38b97d.html">SpringCloud入门系列(三)—服务提供者 Provider</a></p><p><a href="https://www.lixueduan.com/posts/bf9c3958.html">SpringCloud入门系列(四)—服务消费者 Consumer</a></p><p><a href="https://www.lixueduan.com/posts/3cc75bae.html">SpringCloud入门系列(五)—服务熔断 Hystrix</a></p><p><a href="https://www.lixueduan.com/posts/abd301c1.html">SpringCloud入门系列(六)—路由网关 Zuul</a></p><p><a href="https://www.lixueduan.com/posts/68aa18ee.html">SpringCloud入门系列(七)—分布式配置中心 Spring Cloud Config</a></p><p><a href="https://www.lixueduan.com/posts/c9420366.html">SpringCloud入门系列(八)—服务链路追踪 ZipKin</a></p><p><a href="https://www.lixueduan.com/posts/14927f8f.html">SpringCloud入门系列(九)—服务监控 Spring Boot Admin</a></p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p><p>Demo下载：<a href="https://github.com/illusorycloud/springboot-learning" target="_blank" rel="noopener">GItHub</a></p></blockquote><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>当 Eureka Client 向 Eureka Server 注册时，它会提供一些元数据，例如主机和端口，URL，主页等。Eureka Server 从每个 Client 实例接收心跳消息。 如果心跳超时，则通常将该实例从注册 Server 中删除。这与ZooKeeper注册中心很像。</p><h2 id="2-创建服务提供者项目"><a href="#2-创建服务提供者项目" class="headerlink" title="2. 创建服务提供者项目"></a>2. 创建服务提供者项目</h2><p>创建一个项目<code>hello-spring-cloud-service-admin</code>作为服务提供者。</p><h3 id="2-1-pom-xml"><a href="#2-1-pom-xml" class="headerlink" title="2.1 pom.xml"></a>2.1 pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lixueduan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../hello-spring-cloud-dependencies/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-service-admin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-spring-cloud-service-admin<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.lixueduan.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inceptionYear</span>&gt;</span>2019-Now<span class="tag">&lt;/<span class="name">inceptionYear</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot End --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud End --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--指向启动类 用于jar包方式运行--&gt;</span>  <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.illusory.hello.spring.cloud.service.admin.ServiceAdminApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-Application"><a href="#2-2-Application" class="headerlink" title="2.2 Application"></a>2.2 Application</h3><p>通过注解 <code>@EnableEurekaClient</code> 表明自己是一个 Eureka Client.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.service.admin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceAdminApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ServiceAdminApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-application-yml"><a href="#2-3-application-yml" class="headerlink" title="2.3 application.yml"></a>2.3 application.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">hello-spring-cloud-service-admin</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8762</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>： 需要指明 <code>spring.application.name</code>，这个很重要，这在以后的服务与服务之间相互调用一般都是根据这个<code>name</code>。</p><h3 id="2-4-Controller"><a href="#2-4-Controller" class="headerlink" title="2.4 Controller"></a>2.4 Controller</h3><p>对外提供服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.service.admin.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"hi"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">(@RequestParam(value = <span class="string">"message"</span>)</span> String message) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"Hi，your message is : %s i am from port : %s"</span>, message, port);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-小结"><a href="#3-小结" class="headerlink" title="3. 小结"></a>3. 小结</h2><p>到这里一个简单的服务提供者就搭建成功了，接下来搭建一个服务消费者。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了&lt;code&gt;SpringCloud-Netflix&lt;/code&gt;系列微服务解决方案之服务提供者。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud入门系列(二)---服务注册与发现</title>
    <link href="https://www.lixueduan.com/posts/8735f06d.html"/>
    <id>https://www.lixueduan.com/posts/8735f06d.html</id>
    <published>2019-03-16T14:00:00.000Z</published>
    <updated>2019-04-10T14:56:26.153Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了<code>SpringCloud-Netflix</code>系列微服务解决方案之服务注册于发现中心<code>Eureka</code>。</p><a id="more"></a><blockquote><p><strong><a href="https://www.lixueduan.com/categories/SpringCloud/">SpringCloud入门系列文章目录</a></strong></p><p><a href="https://www.lixueduan.com/posts/c41e9ac1.html">SpringCloud入门系列(一)—统一依赖管理 Dependencies</a></p><p><a href="https://www.lixueduan.com/posts/8735f06d.html">SpringCloud入门系列(二)—服务注册与发现</a></p><p><a href="https://www.lixueduan.com/posts/cc38b97d.html">SpringCloud入门系列(三)—服务提供者 Provider</a></p><p><a href="https://www.lixueduan.com/posts/bf9c3958.html">SpringCloud入门系列(四)—服务消费者 Consumer</a></p><p><a href="https://www.lixueduan.com/posts/3cc75bae.html">SpringCloud入门系列(五)—服务熔断 Hystrix</a></p><p><a href="https://www.lixueduan.com/posts/abd301c1.html">SpringCloud入门系列(六)—路由网关 Zuul</a></p><p><a href="https://www.lixueduan.com/posts/68aa18ee.html">SpringCloud入门系列(七)—分布式配置中心 Spring Cloud Config</a></p><p><a href="https://www.lixueduan.com/posts/c9420366.html">SpringCloud入门系列(八)—服务链路追踪 ZipKin</a></p><p><a href="https://www.lixueduan.com/posts/14927f8f.html">SpringCloud入门系列(九)—服务监控 Spring Boot Admin</a></p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p><p>Demo下载：<a href="https://github.com/illusorycloud/springboot-learning" target="_blank" rel="noopener">GItHub</a></p></blockquote><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>在这里，我们需要用的组件是 <code>Spring Cloud Netflix</code> 的 <code>Eureka</code>，<code>Eureka</code> 是一个服务注册和发现模块。</p><h2 id="2-创建服务注册于发现项目"><a href="#2-创建服务注册于发现项目" class="headerlink" title="2. 创建服务注册于发现项目"></a>2. 创建服务注册于发现项目</h2><p>创建一个项目<code>hello-spring-cloud-eureka</code>作为注册中心。</p><h3 id="2-1-pom-xml"><a href="#2-1-pom-xml" class="headerlink" title="2.1 pom.xml"></a>2.1 pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lixueduan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../hello-spring-cloud-dependencies/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-spring-cloud-eureka<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.lixueduan.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inceptionYear</span>&gt;</span>2019-Now<span class="tag">&lt;/<span class="name">inceptionYear</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot End --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud End --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                   <span class="comment">&lt;!--指向启动类 用于jar包方式运行--&gt;</span> <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.illusory.hello.spring.cloud.eureka.EurekaApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-Application"><a href="#2-2-Application" class="headerlink" title="2.2 Application"></a>2.2 Application</h3><p>启动一个服务注册中心，只需要一个注解 <code>@EnableEurekaServer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-application-yml"><a href="#2-3-application-yml" class="headerlink" title="2.3 application.yml"></a>2.3 application.yml</h3><p>Eureka 是一个高可用的组件，它没有后端缓存，每一个实例注册之后需要向注册中心发送心跳（因此可以在内存中完成），在默认情况下 Erureka Server 也是一个 Eureka Client ,必须要指定一个 Server。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">hello-spring-cloud-eureka</span></span><br><span class="line"><span class="attr">  boot:</span></span><br><span class="line"><span class="attr">    admin:</span></span><br><span class="line"><span class="attr">      client:</span></span><br><span class="line"><span class="attr">        url:</span> <span class="attr">http://localhost:8084</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8761</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    registerWithEureka:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    fetchRegistry:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure><p>通过 <code>eureka.client.registerWithEureka:false</code> 和 <code>fetchRegistry:false</code> 来表明自己是一个 Eureka Server.</p><h2 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h2><p>Eureka Server 是有界面的，启动工程，打开浏览器访问：</p><p><code>http://localhost:8761</code></p><h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h2><p>本章我们主要使用<code>Eureka</code>组件建立了我们的注册中心。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了&lt;code&gt;SpringCloud-Netflix&lt;/code&gt;系列微服务解决方案之服务注册于发现中心&lt;code&gt;Eureka&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud入门系列(一)---统一依赖管理 Dependencies</title>
    <link href="https://www.lixueduan.com/posts/c41e9ac1.html"/>
    <id>https://www.lixueduan.com/posts/c41e9ac1.html</id>
    <published>2019-03-15T14:00:00.000Z</published>
    <updated>2019-04-11T14:12:15.558Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了<code>SpringCloud-Netflix</code>系列微服务解决方案之创建一个依赖统一管理项目。</p><a id="more"></a><blockquote><p><strong><a href="https://www.lixueduan.com/categories/SpringCloud/">SpringCloud入门系列文章目录</a></strong></p><p><a href="https://www.lixueduan.com/posts/c41e9ac1.html">SpringCloud入门系列(一)—统一依赖管理 Dependencies</a></p><p><a href="https://www.lixueduan.com/posts/8735f06d.html">SpringCloud入门系列(二)—服务注册与发现</a></p><p><a href="https://www.lixueduan.com/posts/cc38b97d.html">SpringCloud入门系列(三)—服务提供者 Provider</a></p><p><a href="https://www.lixueduan.com/posts/bf9c3958.html">SpringCloud入门系列(四)—服务消费者 Consumer</a></p><p><a href="https://www.lixueduan.com/posts/3cc75bae.html">SpringCloud入门系列(五)—服务熔断 Hystrix</a></p><p><a href="https://www.lixueduan.com/posts/abd301c1.html">SpringCloud入门系列(六)—路由网关 Zuul</a></p><p><a href="https://www.lixueduan.com/posts/68aa18ee.html">SpringCloud入门系列(七)—分布式配置中心 Spring Cloud Config</a></p><p><a href="https://www.lixueduan.com/posts/c9420366.html">SpringCloud入门系列(八)—服务链路追踪 ZipKin</a></p><p><a href="https://www.lixueduan.com/posts/14927f8f.html">SpringCloud入门系列(九)—服务监控 Spring Boot Admin</a></p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p><p>Demo下载：<a href="https://github.com/illusorycloud/springboot-learning" target="_blank" rel="noopener">GItHub</a></p></blockquote><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>Spring Cloud 项目都是基于 Spring Boot 进行开发，并且都是使用 Maven 做项目管理工具。在实际开发中，我们一般都会创建一个依赖管理项目作为 Maven 的 Parent 项目使用，这样做可以极大的方便我们对 Jar 包版本的统一管理。</p><p>我们所有的项目都会依赖这个 <code>dependencies</code> 项目，整个项目周期中的所有第三方依赖的版本也都由该项目进行管理。</p><ul><li>parent：继承了 Spring Boot 的 Parent，表示我们是一个 Spring Boot 工程</li><li>package：<code>pom</code>，表示该项目仅当做依赖项目，没有具体的实现代码</li><li><code>spring-cloud-dependencies</code>：在 <code>properties</code> 配置中预定义了版本号为 <code>Finchley.RC1</code> ，表示我们的 Spring Cloud 使用的是 F 版</li><li>build：配置了项目所需的各种插件</li><li>repositories：配置项目下载依赖时的第三方库</li></ul><h2 id="2-创建依赖统一管理项目"><a href="#2-创建依赖统一管理项目" class="headerlink" title="2. 创建依赖统一管理项目"></a>2. 创建依赖统一管理项目</h2><p><code>pom.xml</code> 文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lixueduan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-spring-cloud-dependencies<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.lixueduan.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inceptionYear</span>&gt;</span>2019-Now<span class="tag">&lt;/<span class="name">inceptionYear</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Environment Settings --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Settings --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Finchley.RC1<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Compiler 插件, 设定 JDK 版本 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">showWarnings</span>&gt;</span>true<span class="tag">&lt;/<span class="name">showWarnings</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 打包 jar 文件时，配置 manifest 文件，加入 lib 包的 jar 依赖 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">addMavenDescriptor</span>&gt;</span>false<span class="tag">&lt;/<span class="name">addMavenDescriptor</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                                    <span class="comment">&lt;!-- Add directory entries --&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">addDefaultImplementationEntries</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addDefaultImplementationEntries</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">addDefaultSpecificationEntries</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addDefaultSpecificationEntries</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- resource --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- install --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- clean --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- ant --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-antrun-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- dependency --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- Java Document Generate --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>prepare-package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- YUI Compressor (CSS/JS压缩) --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.alchim31.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>yuicompressor-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>prepare-package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compress<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">jswarn</span>&gt;</span>false<span class="tag">&lt;/<span class="name">jswarn</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">nosuffix</span>&gt;</span>true<span class="tag">&lt;/<span class="name">nosuffix</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">linebreakpos</span>&gt;</span>30000<span class="tag">&lt;/<span class="name">linebreakpos</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">force</span>&gt;</span>true<span class="tag">&lt;/<span class="name">force</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.js<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.css<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.min.js<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.min.css<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 资源文件配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.java<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun-repos<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Aliyun Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>sonatype-repos<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Sonatype Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>sonatype-repos-s<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Sonatype Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/content/repositories/snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun-repos<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Aliyun Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一个简单的项目，只有一个<code>pom.xml</code>文件，用来管理项目中所需的依赖。</p><p>接下来创建服务注册与发现项目即注册中心。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了&lt;code&gt;SpringCloud-Netflix&lt;/code&gt;系列微服务解决方案之创建一个依赖统一管理项目。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot入门系列(四)---Spring Boot 项目打包运行</title>
    <link href="https://www.lixueduan.com/posts/144a69f9.html"/>
    <id>https://www.lixueduan.com/posts/144a69f9.html</id>
    <published>2019-03-13T14:00:00.000Z</published>
    <updated>2019-04-05T07:22:20.700Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录了如何在idea下打包SpringBoot项目并部署到云服务器，包括jar包和war包两种方式。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h2><p>首先简单创建一个<code>hello word</code></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单的controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusoryCloud</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello illusoryCloud"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringBoot启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusoryCloud</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HelloApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-打包"><a href="#2-打包" class="headerlink" title="2. 打包"></a>2. 打包</h2><h3 id="2-1-jar包和war包区别"><a href="#2-1-jar包和war包区别" class="headerlink" title="2.1 jar包和war包区别"></a>2.1 jar包和war包区别</h3><ul><li>SpringBoot默认支持很多模板引擎，但是JSP只能够在War中使用</li><li>无论是Jar还是War都能够使用嵌套容器，<code>java -jar</code>来独立运行</li><li>但只有war才能部署到外部容器中</li></ul><h3 id="2-2-jar包"><a href="#2-2-jar包" class="headerlink" title="2.2 jar包"></a>2.2 jar包</h3><p><strong>SpringBoot官方推荐打成jar包，服务器上有<code>JDK 1.8</code>以上环境就可以直接运行</strong></p><h4 id="1-修改pom-xml文件"><a href="#1-修改pom-xml文件" class="headerlink" title="1.修改pom.xml文件"></a>1.修改pom.xml文件</h4><p>选择打包方式为jar</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.illusory<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span>    <span class="comment">&lt;!--版本号--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">name</span>&gt;</span>    <span class="comment">&lt;!--打出来的包的名字 hello-0.0.1-SNAPSHOT.jar--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span>    <span class="comment">&lt;!--打包方式jar/war--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-打包-1"><a href="#2-打包-1" class="headerlink" title="2. 打包"></a>2. 打包</h4><p>然后用maven打包。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/springboot/project-package.png" alt="SpringBoot打包"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[INFO] --- maven-jar-plugin:<span class="number">3.1</span>.1:jar (<span class="keyword">default</span>-jar) @ hello ---</span><br><span class="line">[INFO] Building jar: D:\lillusory\MyProjects\hello\target\hello-<span class="number">0.0</span>.1-SNAPSHOT.jar</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- spring-boot-maven-plugin:<span class="number">2.1</span>.3.RELEASE:repackage (repackage) @ hello ---</span><br><span class="line">[INFO] Replacing main artifact with repackaged archive</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  <span class="number">23.922</span> s</span><br><span class="line">[INFO] Finished at: <span class="number">2019</span>-<span class="number">02</span>-<span class="number">22</span>T20:<span class="number">35</span>:<span class="number">40</span>+<span class="number">08</span>:<span class="number">00</span></span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>日志中可以看到打出来的包在<code>D:\lillusory\MyProjects\hello\target\hello-0.0.1-SNAPSHOT.jar</code></p><h4 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h4><p>SpringBoot内置了一个Tomcat，可以直接<code>java -jar jarName</code>运行。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/springboot/jar-run.png" alt=""></p><p>浏览器访问<code>http://localhost:8080/hello</code>出现<code>hello illusoryCloud</code>说明运行起来了。</p><p>这里的端口号是<code>application.yml</code>全局配置文件中配置的端口号。</p><h3 id="2-3-war包"><a href="#2-3-war包" class="headerlink" title="2.3 war包"></a>2.3 war包</h3><p>同时也可以打成war包然后用服务器上的Tomcat启动。</p><h4 id="1-修改pom-xml"><a href="#1-修改pom-xml" class="headerlink" title="1.修改pom.xml"></a>1.修改pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.illusory<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span>    <span class="comment">&lt;!--版本号--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">name</span>&gt;</span>    <span class="comment">&lt;!--打出来的包的名字 hello-0.0.1-SNAPSHOT.jar--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span>    <span class="comment">&lt;!--打包方式jar/war--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--外置tomcat启动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>maven中的<code>&lt;scope&gt;provided&lt;/scope&gt;</code>表示这个jar包在编译测试等地方是需要的，但是打包不会一起打包进去，这也避免了此类构件当部署到目标容器后产生包依赖冲突</strong>。由于SpringBoot内置了Tomcat所以这里需要重新配置一下，防止冲突。</p><h4 id="2-改造启动类"><a href="#2-改造启动类" class="headerlink" title="2.改造启动类"></a>2.改造启动类</h4><p><strong>SpringBoot 内置的Tomcat能认识自己的启动项,而外部tomcat是不认识的</strong></p><p>所以需要修改启动类。即继承<code>SpringBootServletInitializer</code>类实现<code>configure</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringBoot启动类</span></span><br><span class="line"><span class="comment"> * 打成war包时需要改造 继承SpringBootServletInitializer实现configure方法</span></span><br><span class="line"><span class="comment"> * 打jar包则不需要</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusoryCloud</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplication</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//这里的HelloApplication是SpringBoot的启动类</span></span><br><span class="line">        <span class="keyword">return</span> builder.sources(HelloApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HelloApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-打包"><a href="#3-打包" class="headerlink" title="3. 打包"></a>3. 打包</h4><p>和上面打包的方式一样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[INFO] Packaging webapp</span><br><span class="line">[INFO] Assembling webapp [hello] in [D:\lillusory\MyProjects\hello\target\hello-<span class="number">0.0</span>.1-SNAPSHOT]</span><br><span class="line">[INFO] Processing war project</span><br><span class="line">[INFO] Webapp assembled in [<span class="number">472</span> msecs]</span><br><span class="line">[INFO] Building war: D:\lillusory\MyProjects\hello\target\hello-<span class="number">0.0</span>.1-SNAPSHOT.war</span><br><span class="line">[INFO] --- spring-boot-maven-plugin:<span class="number">2.1</span>.3.RELEASE:repackage (repackage) @ hello ---</span><br><span class="line">[INFO] Replacing main artifact with repackaged archive</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  <span class="number">01</span>:<span class="number">00</span> min</span><br><span class="line">[INFO] Finished at: <span class="number">2019</span>-<span class="number">02</span>-<span class="number">22</span>T21:<span class="number">10</span>:<span class="number">10</span>+<span class="number">08</span>:<span class="number">00</span></span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>可以看到打出来的war包在<code>D:\lillusory\MyProjects\hello\target\hello-0.0.1-SNAPSHOT.war</code></p><h4 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h4><p>先在电脑上测试一下(Windows环境下)</p><p>将war包复制到<code>Tomcat</code>的<code>webapps</code>文件夹下</p><p>然后找到<code>bin</code>目录下的<code>startup.bat</code>启动Tomcat，项目就会自动启动了。</p><p>浏览器访问<code>http://localhost:8080/hello-0.0.1-SNAPSHOT/hello</code> 出现<code>hello illusoryCloud</code>说明ok的。</p><p>这里<code>hello-0.0.1-SNAPSHOT</code>就是war包的名称，Tomcat启动时会自动解压war包然后启动项目。</p><p>这里的端口号和<code>application.yml</code>全局配置文件中配置的端口号没有关系，是Tomcat中配置的。</p><p>在<code>Tomcat\conf\server.xml</code>这个文件中，默认也是8080。</p><p><strong>问题</strong></p><p>我这里启动的时候出现了一个问题</p><p><code>Caused by: java.lang.NoClassDefFoundError: javax/el/ELManager</code></p><p>最后找到原因是<strong>tomcat提供的<code>el-api.jar</code> 和项目里面的el-api.jar冲突</strong>;</p><p>这时候你需要去找到自己电脑上用的el-api的版本,copy到tomcat的lib目录下,覆盖原来的jar包.</p><p>我的在<code>IntelliJ IDEA 2018.3\lib\rt\jasper2.1\el-api.jar</code>这个目录下</p><p>我看网上说是和Tomcat版本有关系，我这里是<code>7.0.52</code></p><p><strong>Tomcat日志</strong></p><p>若是还有其他问题的话可以查看Tomcat日志。在<code>tomcat\logs\catalina.2019-02-22.log</code>这个文件中。</p><h2 id="3-部署"><a href="#3-部署" class="headerlink" title="3. 部署"></a>3. 部署</h2><h3 id="3-1-jar包"><a href="#3-1-jar包" class="headerlink" title="3.1 jar包"></a>3.1 jar包</h3><p>首先将文件上传到服务器上，服务器上有安装JDK8及以上的版本就可以直接运行。</p><p><a href="https://www.lixueduan.com/posts/54978294.html">Linux下JDK的安装及配置点这里</a></p><h4 id="1-前台运行"><a href="#1-前台运行" class="headerlink" title="1. 前台运行"></a>1. 前台运行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> java -jar hello-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>但是这样运行的话是在前台运行，当前窗口关闭后就停止了,或者是运行时没法切出去执行其他任务.</p><h4 id="2-后台运行"><a href="#2-后台运行" class="headerlink" title="2. 后台运行"></a>2. 后台运行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> nohup java -jar hello-0.0.1-SNAPSHOT.jar &gt;temp.txt &amp;</span><br><span class="line"></span><br><span class="line">//nohup 意思是不挂断运行命令,当账户退出或终端关闭时,程序仍然运行</span><br><span class="line">//这种方法会把日志文件输入到你指定的文件中(temp.txt)</span><br><span class="line">//在哪个目录下运行的该日志文件就会在哪个目录下，没有指定具体文件则会自动创建(nohup.out)</span><br><span class="line">//&amp; 表示后台运行</span><br></pre></td></tr></table></figure><h4 id="3-问题"><a href="#3-问题" class="headerlink" title="3. 问题"></a>3. 问题</h4><p>执行以上命令后出现下面的提示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup: ignoring input and redirecting stderr to stdout</span><br><span class="line">忽略输出 将错误输出重定向到标准输出</span><br></pre></td></tr></table></figure><p><strong>原因</strong></p><p><code>Linux</code>中<code>0</code>、<code>1</code>和<code>2</code>分别表示<code>标准输</code>入、<code>标准输出</code>和<code>标准错误信息输出</code>，可以用来指定需要重定向的标准输入或输出。在一般使用时，默认的是标准输出，即1。</p><p>例如：<code>2&gt;temp.txt</code>  就是将错误信息写入temp.txt 标准输出还是显示在屏幕上。</p><p>另外，也可以实现0，1，2之间的重定向。<code>2&gt;&amp;1</code>：将错误信息重定向到标准输出。</p><p>Linux下还有一个特殊的文件<code>/dev/null</code>，它就像一个无底洞，所有重定向到它的信息都会消失得无影无踪。</p><p>如果想要<code>正常输出和错误信息都不显示</code>，则要把标准输出和标准错误都重定向到<code>/dev/null</code>， 例如：</p><p> <code>1&gt;/dev/null 2&gt;/dev/null</code></p><p><strong>解决办法</strong></p><p>所以最后的命令就是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar hello-0.0.1-SNAPSHOT.jar &gt;temp.txt 2&gt;&amp;1&amp;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost software]# nohup java -jar hello-0.0.1-SNAPSHOT.jar &gt;temp.txt 2&gt;&amp;1&amp;</span><br><span class="line">[1] 22804</span><br><span class="line">// 成功启动 pid为22804</span><br></pre></td></tr></table></figure><h4 id="4-测试-1"><a href="#4-测试-1" class="headerlink" title="4. 测试"></a>4. 测试</h4><p>首先查看服务器的IP</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost software]# ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:8a:48:7d brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.1.111/24 brd 192.168.1.255 scope global noprefixroute ens33</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::20c:29ff:fe8a:487d/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: virbr0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default qlen 1000</span><br><span class="line">    link/ether 52:54:00:8e:d5:31 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: virbr0-nic: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast master virbr0 state DOWN group default qlen 1000</span><br><span class="line">    link/ether 52:54:00:8e:d5:31 brd ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></table></figure><p>然后浏览器访问<code>http://192.168.1.111:8080/hello</code>出现<code>hello illusoryCloud</code>说明成功了。</p><p><strong>记得关闭防火墙或者开放8080端口</strong></p><h4 id="5-相关Linux命令"><a href="#5-相关Linux命令" class="headerlink" title="5. 相关Linux命令"></a>5. 相关Linux命令</h4><ul><li>jobs命令和 fg命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> jobs</span><br><span class="line">//那么就会列出所有后台执行的作业，并且每个作业前面都有个编号。</span><br><span class="line">[root@localhost software]# jobs</span><br><span class="line">[1]+  Running    nohup java -jar hello-0.0.1-SNAPSHOT.jar &gt; temp.txt 2&gt;&amp;1 &amp;</span><br><span class="line">//如果想将某个作业调回前台控制，只需要 fg + 编号即可。</span><br><span class="line"><span class="meta">$</span> fg 1</span><br></pre></td></tr></table></figure><ul><li>查看某端口占用的线程的pid</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -nlp |grep :8080</span><br></pre></td></tr></table></figure><ul><li>kill</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill pid</span><br></pre></td></tr></table></figure><h3 id="3-2-war包"><a href="#3-2-war包" class="headerlink" title="3.2 war包"></a>3.2 war包</h3><p>war包运行和在windows上运行其实一样的，也是<strong>先将war包copy到Tomcat的webapps目录下，然后启动Tomcat，如果上面测试出现jar包冲突的话这里也需要替换</strong>。</p><p><a href="https://www.lixueduan.com/posts/54978294.html">Linux下Tomcat安装及配置点这里</a></p><h4 id="启动Tomcat"><a href="#启动Tomcat" class="headerlink" title="启动Tomcat"></a>启动Tomcat</h4><p>进入<code>Tomcat\bin</code>目录执行<code>./startup.sh</code>即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# ./startup.sh </span><br><span class="line">Using CATALINA_BASE:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_HOME:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_TMPDIR: /usr/local/tomcat/temp</span><br><span class="line">Using JRE_HOME:        /usr/local/jdk8</span><br><span class="line">Using CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar</span><br><span class="line">Tomcat started.</span><br></pre></td></tr></table></figure><p>浏览器访问<code>http://192.168.1.111:8080/hello-0.0.1-SNAPSHOT/hello</code>出现<code>hello illusoryCloud</code>说明是没问题的。</p><h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h2><p><code>https://blog.csdn.net/qq_22638399/article/details/81506448</code></p><p><code>https://blog.csdn.net/c1481118216/article/details/53010963</code></p><p><code>https://blog.csdn.net/qq_14853889/article/details/80026885</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录了如何在idea下打包SpringBoot项目并部署到云服务器，包括jar包和war包两种方式。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://www.lixueduan.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://www.lixueduan.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot入门系列(三)---Spring Boot 整合 Mybatis</title>
    <link href="https://www.lixueduan.com/posts/1889ad71.html"/>
    <id>https://www.lixueduan.com/posts/1889ad71.html</id>
    <published>2019-03-11T14:00:00.000Z</published>
    <updated>2019-04-06T08:10:21.630Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录了如何在SpringBoot项目中整合Mybatis框架与Druid数据库连接池,同时超详细的记录了具体步骤与代码实现。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-Druid"><a href="#1-Druid" class="headerlink" title="1. Druid"></a>1. Druid</h2><p>Druid 是阿里巴巴开源平台上的一个项目，整个项目由数据库连接池、插件框架和 SQL 解析器组成。该项目主要是为了扩展 JDBC 的一些限制，可以让程序员实现一些特殊的需求，比如向密钥服务请求凭证、统计 SQL 信息、SQL 性能收集、SQL 注入检查、SQL 翻译等，程序员可以通过定制来实现自己需要的功能。</p><p>Druid 是目前最好的数据库连接池，在功能、性能、扩展性方面，都超过其他数据库连接池，包括 DBCP、C3P0、BoneCP、Proxool、JBoss DataSource。Druid 已经在阿里巴巴部署了超过 600 个应用，经过多年生产环境大规模部署的严苛考验。Druid 是阿里巴巴开发的号称为监控而生的数据库连接池！</p><h3 id="1-1-引入依赖"><a href="#1-1-引入依赖" class="headerlink" title="1.1 引入依赖"></a>1.1 引入依赖</h3><p>在 <code>pom.xml</code> 文件中引入 <code>druid-spring-boot-starter</code> 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入数据库连接<code>mysql-connector-java</code>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-配置-application-yml"><a href="#1-2-配置-application-yml" class="headerlink" title="1.2 配置 application.yml"></a>1.2 配置 application.yml</h3><p>在 <code>application.yml</code> 中配置数据库连接</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    druid:</span></span><br><span class="line"><span class="attr">      url:</span> <span class="attr">jdbc:mysql://ip:port/dbname?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">      username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">      password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">      initial-size:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">      min-idle:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">      max-active:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">      test-on-borrow:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># MySQL 5.x: com.mysql.jdbc.Driver</span></span><br><span class="line">      <span class="comment"># MySQL 8.x: com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">      driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><h2 id="2-Mybatis"><a href="#2-Mybatis" class="headerlink" title="2. Mybatis"></a>2. Mybatis</h2><h3 id="2-1-引入依赖"><a href="#2-1-引入依赖" class="headerlink" title="2.1 引入依赖"></a>2.1 引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-配置-application-yml"><a href="#2-2-配置-application-yml" class="headerlink" title="2.2 配置 application.yml"></a>2.2 配置 application.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  type-aliases-package:</span> <span class="string">com.illusory.hello.spring.boot.domain</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure><h2 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h2><h3 id="3-1-创建数据库"><a href="#3-1-创建数据库" class="headerlink" title="3.1 创建数据库"></a>3.1 创建数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE hello;</span><br><span class="line">USE hello;</span><br><span class="line">CREATE TABLE users(</span><br><span class="line">uid INT(5)  AUTO_INCREMENT COMMENT &apos;用户ID&apos;,</span><br><span class="line">uname VARCHAR(20) COMMENT &apos;用户名&apos;,</span><br><span class="line">uage INT(3) COMMENT &apos;用户年龄&apos;,</span><br><span class="line">PRIMARY KEY(uid)</span><br><span class="line">) COMMENT=&apos;用户表&apos;;</span><br><span class="line">INSERT INTO users VALUES(NULL,&apos;zhangsan&apos;,11),(NULL,&apos;lisi&apos;,22),(NULL,&apos;wangwu&apos;,33);</span><br></pre></td></tr></table></figure><h3 id="3-2-User"><a href="#3-2-User" class="headerlink" title="3.2 User"></a>3.2 User</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.boot.domain;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusoryCloud</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/15 13:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> uid;</span><br><span class="line">    <span class="keyword">private</span> String uname;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> uage;</span><br><span class="line">    <span class="comment">//省略Getter/Setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-UserMapper"><a href="#3-3-UserMapper" class="headerlink" title="3.3 UserMapper"></a>3.3 UserMapper</h3><p><code>com/illusory/hello/spirng/boot/mapper/UserMapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.boot.mapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusoryCloud</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/15 13:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">queryAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>resources/mapper/UserMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.illusory.hello.spring.boot.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryAll"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    SELECT u.uid,u.uname,u.uage</span><br><span class="line">    FROM users as u</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-Serivce"><a href="#3-4-Serivce" class="headerlink" title="3.4 Serivce"></a>3.4 Serivce</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.boot.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusoryCloud</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/15 14:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">queryAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.boot.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusoryCloud</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/15 14:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.queryAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-UserController"><a href="#3-5-UserController" class="headerlink" title="3.5 UserController"></a>3.5 UserController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.boot.controller;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusoryCloud</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/15 14:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/users"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">users</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userService.queryAll();</span><br><span class="line">        model.addAttribute(<span class="string">"users"</span>, users);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-HTML"><a href="#3-6-HTML" class="headerlink" title="3.6 HTML"></a>3.6 HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html SYSTEM "http://www.thymeleaf.org/dtd/xhtml1-strict-thymeleaf-spring4-4.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">"user : $&#123;users&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.uname&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-7-测试"><a href="#3-7-测试" class="headerlink" title="3.7 测试"></a>3.7 测试</h3><p>浏览器访问<code>localhost:8080/users</code>显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zhangsan</span><br><span class="line">lisi</span><br><span class="line">wangwu</span><br></pre></td></tr></table></figure><p>到此SpringBoot整合Mybatis完成。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录了如何在SpringBoot项目中整合Mybatis框架与Druid数据库连接池,同时超详细的记录了具体步骤与代码实现。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://www.lixueduan.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://www.lixueduan.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot入门系列(二)---Spring Boot 整合 Thymeleaf</title>
    <link href="https://www.lixueduan.com/posts/730d2e5e.html"/>
    <id>https://www.lixueduan.com/posts/730d2e5e.html</id>
    <published>2019-03-10T14:00:00.000Z</published>
    <updated>2019-04-05T07:04:45.176Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录了如何在SpringBoot项目中使用Thymeleaf，同时简要分析了Thymeleaf模板引擎的优缺点与基本语法。 </p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-Thymeleaf简介"><a href="#1-Thymeleaf简介" class="headerlink" title="1. Thymeleaf简介"></a>1. Thymeleaf简介</h2><p>Thymeleaf 是一个跟 Velocity、FreeMarker 类似的模板引擎，它可以完全替代 JSP 。相较与其他的模板引擎，它有如下三个极吸引人的特点</p><ul><li>Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到模板 + 数据的展示方式。浏览器解释 html 时会忽略未定义的标签属性，所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。</li><li>Thymeleaf 开箱即用的特性。它提供标准和 Spring 标准两种方言，可以直接套用模板实现 JSTL、 OGNL 表达式效果，避免每天套模板、改 JSTL、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。</li><li>Thymeleaf 提供 Spring 标准方言和一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。</li></ul><h2 id="2-为什么使用-Thymeleaf"><a href="#2-为什么使用-Thymeleaf" class="headerlink" title="2. 为什么使用 Thymeleaf"></a>2. 为什么使用 Thymeleaf</h2><p>如果希望以 Jar 形式发布模块则尽量不要使用 JSP 相关知识，这是<strong>因为 JSP 在内嵌的 Servlet 容器上运行有一些问题 (内嵌 Tomcat、 Jetty 不支持 Jar 形式运行 JSP</strong>，Undertow 不支持 JSP)。</p><p>Spring Boot 中推荐使用 Thymeleaf 作为模板引擎，因为 Thymeleaf 提供了完美的 Spring MVC 支持</p><p>Spring Boot 提供了大量模板引擎，包括：</p><ul><li>FreeMarker</li><li>Groovy</li><li>Mustache</li><li><strong>Thymeleaf</strong></li><li>Velocity</li><li><strong>Beetl</strong></li></ul><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h2><h3 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1. 引入依赖"></a>1. 引入依赖</h3><p>主要增加 <code>spring-boot-starter-thymeleaf</code> 和 <code>nekohtml</code> 这两个依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sourceforge.nekohtml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nekohtml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>spring-boot-starter-thymeleaf</code>：Thymeleaf 自动配置</li><li><code>nekohtml</code>：允许使用非严格的 HTML 语法</li></ul><p>完整的 <code>pom.xml</code> 如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注意这里继承了父项目spring-boot-starter-parent--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.illusory<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-spring-boot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--两个依赖spring-boot-starter-web和test--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Thymeleaf Begin--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sourceforge.nekohtml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nekohtml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Thymeleaf End--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-在-application-yml中配置-Thymeleaf"><a href="#2-在-application-yml中配置-Thymeleaf" class="headerlink" title="2. 在 application.yml中配置 Thymeleaf"></a>2. 在 application.yml中配置 Thymeleaf</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  thymeleaf:</span></span><br><span class="line"><span class="attr">    cache:</span> <span class="literal">false</span> <span class="comment"># 开发时关闭缓存,不然没法看到实时页面</span></span><br><span class="line"><span class="attr">    mode:</span> <span class="string">HTML</span> <span class="comment"># 用非严格的 HTML</span></span><br><span class="line"><span class="attr">    encoding:</span> <span class="string">UTF-8</span></span><br><span class="line"><span class="attr">    servlet:</span></span><br><span class="line"><span class="attr">      content-type:</span> <span class="string">text/html</span></span><br></pre></td></tr></table></figure><h3 id="3-HTML引入-Thymeleaf"><a href="#3-HTML引入-Thymeleaf" class="headerlink" title="3. HTML引入 Thymeleaf"></a>3. HTML引入 Thymeleaf</h3><p>修改 html 标签用于引入 thymeleaf 引擎，这样才可以在其他标签里使用 <code>th:*</code> 语法，这是下面语法的前提。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html SYSTEM "http://www.thymeleaf.org/dtd/xhtml1-strict-thymeleaf-spring4-4.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-演示"><a href="#4-演示" class="headerlink" title="4. 演示"></a>4. 演示</h3><h4 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h4><p>在前面的controller中增加一个hi()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.boot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusoryCloud</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/15 12:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello spring boot!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/hi"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hi</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"name"</span>, <span class="string">"SpringBoot"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html SYSTEM "http://www.thymeleaf.org/dtd/xhtml1-strict-thymeleaf-spring4-4.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"'Hello！ ' + $&#123;name&#125; + '!'"</span> &gt;</span>spring<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>非常简单的一个页面，直接打开时会显示<code>spring</code>，浏览器在解析HTML时会自动忽略掉无法识别的标签。</p><p>然后程序启动后在访问则会显示<code>Hello！SpringBoot！</code></p><h2 id="4-常用语法"><a href="#4-常用语法" class="headerlink" title="4. 常用语法"></a>4. 常用语法</h2><h3 id="获取变量值"><a href="#获取变量值" class="headerlink" title="获取变量值"></a>获取变量值</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"'Hello！ ' + $&#123;name&#125; + '!'"</span> &gt;</span>name<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看出获取变量值用 <code>$</code> 符号,对于javaBean的话使用 <code>变量名.属性名</code> 方式获取,这点和 <code>EL</code> 表达式一样.</p><p>另外 <code>$</code> 表达式只能写在th标签内部,不然不会生效,上面例子就是使用 <code>th:text</code> 标签的值替换 <code>p</code> 标签里面的值,至于 <code>p</code> 里面的原有的值只是为了给前端开发时做展示用的.这样的话很好的做到了前后端分离。</p><h3 id="引入-URL"><a href="#引入-URL" class="headerlink" title="引入 URL"></a>引入 URL</h3><p>Thymeleaf 对于 URL 的处理是通过语法 <code>@{…}</code> 来处理的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;http://www.baidu.com&#125;"</span>&gt;</span>绝对路径<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/&#125;"</span>&gt;</span>相对路径<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;css/bootstrap.min.css&#125;"</span>&gt;</span>Content路径,默认访问static下的css文件夹<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>类似的标签有:<code>th:href</code> 和 <code>th:src</code></p><h3 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h3><p>很多时候可能我们只需要对一大段文字中的某一处地方进行替换，可以通过字符串拼接操作完成：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"'Welcome to our application, ' + $&#123;user.name&#125; + '!'"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一种更简洁的方式是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"|Welcome to our application, $&#123;user.name&#125;!|"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然这种形式限制比较多，|…|中只能包含变量表达式${…}，不能包含其他常量、条件表达式等。</p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>在表达式中可以使用各类算术运算符，例如+, -, *, /, %</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">th:with="isEven=($&#123;prodStat.count&#125; % 2 == 0)"</span><br></pre></td></tr></table></figure><p>逻辑运算符&gt;, &lt;, &lt;=,&gt;=，==,!=都可以使用，唯一需要注意的是使用&lt;,&gt;时需要用它的HTML转义符：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">th:if="$&#123;prodStat.count&#125; &amp;gt; 1"</span><br><span class="line">th:text="'Execution mode is ' + ( ($&#123;execMode&#125; == 'dev')? 'Development' : 'Production')"</span><br></pre></td></tr></table></figure><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><h4 id="if-unless"><a href="#if-unless" class="headerlink" title="if/unless"></a>if/unless</h4><p>Thymeleaf 中使用 <code>th:if</code> 和 <code>th:unless</code> 属性进行条件判断，下面的例子中，标签只有在 <code>th:if</code> 中条件成立时才显示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/login&#125;"</span> <span class="attr">th:unless</span>=<span class="string">$&#123;session.user</span> != <span class="string">null&#125;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>th:unless</code> 于 <code>th:if</code> 恰好相反，只有表达式中的条件不成立，才会显示其内容。</p><h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h4><p>Thymeleaf 同样支持多路选择 Switch 结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">"$&#123;user.role&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"'admin'"</span>&gt;</span>User is an administrator<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"#&#123;roles.manager&#125;"</span>&gt;</span>User is a manager<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>默认属性 default 可以用 * 表示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">"$&#123;user.role&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"'admin'"</span>&gt;</span>User is an administrator<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"#&#123;roles.manager&#125;"</span>&gt;</span>User is a manager<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"*"</span>&gt;</span>User is some other thing<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><p>渲染列表数据是一种非常常见的场景，例如现在有 n 条记录需要渲染成一个表格，该数据集合必须是可以遍历的，使用 <code>th:each</code> 标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Product list<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>NAME<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>PRICE<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>IN STOCK<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"prod : $&#123;prods&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.name&#125;"</span>&gt;</span>Onions<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.price&#125;"</span>&gt;</span>2.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;"</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"../home.html"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/&#125;"</span>&gt;</span>Return to home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，需要在被循环渲染的元素（这里是）中加入 <code>th:each</code> 标签，其中 <code>th:each=&quot;prod : ${prods}&quot;</code> 意味着对集合变量 <code>prods</code> 进行遍历，循环变量是 <code>prod</code> 在循环体中可以通过表达式访问。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录了如何在SpringBoot项目中使用Thymeleaf，同时简要分析了Thymeleaf模板引擎的优缺点与基本语法。 &lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://www.lixueduan.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://www.lixueduan.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot入门系列(一)---第一个SpringBoot项目</title>
    <link href="https://www.lixueduan.com/posts/6c30e894.html"/>
    <id>https://www.lixueduan.com/posts/6c30e894.html</id>
    <published>2019-03-08T14:00:00.000Z</published>
    <updated>2019-04-05T07:04:34.546Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要讲述了Spring框架的变化，从Spring1.0到Spring5.0，从xml配置到注解，到现在的SpringBoot，最后记录了如何创建第一个SpringBoot项目。</p><p>前面写摘要</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-Spring-简史"><a href="#1-Spring-简史" class="headerlink" title="1. Spring 简史"></a>1. Spring 简史</h2><h3 id="Spring-1-x-时代"><a href="#Spring-1-x-时代" class="headerlink" title="Spring 1.x 时代"></a>Spring 1.x 时代</h3><p>在 Spring1.x 时代，都是通过 xml 文件配置 bean，随着项目的不断扩大，需要将 xml 配置分放到不同的配置文件中，需要频繁的在 java 类和 xml 配置文件中切换。</p><h3 id="Spring-2-x-时代"><a href="#Spring-2-x-时代" class="headerlink" title="Spring 2.x 时代"></a>Spring 2.x 时代</h3><p>随着 JDK 1.5 带来的注解支持，Spring2.x 可以使用注解对 Bean 进行申明和注入，大大的减少了 xml 配置文件，同时也大大简化了项目的开发。</p><p>那么，问题来了，究竟是应该使用 xml 还是注解呢？</p><p>最佳实践：</p><ul><li>应用的基本配置用 xml，比如：数据源、资源文件等</li><li>业务开发用注解，比如：Service 中注入 bean 等</li></ul><h3 id="Spring-3-x-时代"><a href="#Spring-3-x-时代" class="headerlink" title="Spring 3.x 时代"></a>Spring 3.x 时代</h3><p>从 Spring3.x 开始提供了 Java 配置方式，使用 Java 配置方式可以更好的理解你配置的 Bean，现在我们就处于这个时代，并且 Spring4.x 和 Spring boot 都推荐使用 java 配置的方式。</p><h3 id="Spring-5-x-时代"><a href="#Spring-5-x-时代" class="headerlink" title="Spring 5.x 时代"></a>Spring 5.x 时代</h3><p>Spring5.x 是 Java 界首个支持响应式的 Web 框架，是 Spring 的一个重要版本，距离 Spring4.x 差不多四年。在此期间，大多数增强都是在 SpringBoot 项目中完成的，其最大的亮点就是提供了完整的端到端响应式编程的支持（新增 Spring WebFlux 模块）。</p><p>Spring WebFlux 同时支持使用旧的 Spring MVC 注解声明 <code>Reactive Controller</code>。和传统的 <code>MVC Controller</code> 不同，<code>Reactive Controller</code> 操作的是 <strong>非阻塞</strong> 的 <code>ServerHttpRequest</code> 和 <code>ServerHttpResponse</code>，而不再是 Spring MVC 里的 HttpServletRequest 和 HttpServletResponse。</p><p>至此也代表着 Java 正式迎来了<code>响应式异步编程</code>的时代。</p><h2 id="2-Spring-Boot"><a href="#2-Spring-Boot" class="headerlink" title="2. Spring Boot"></a>2. Spring Boot</h2><h3 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h3><p>Spring Boot 可以称之为 <strong>新一代 JavaEE 开发标准</strong>；随着动态语言的流行 (Ruby、Groovy、Scala、Node.js)，Java 的开发显得格外的笨重：繁多的配置、低下的开发效率、复杂的部署流程以及第三方技术集成难度大。</p><p>在上述环境下，Spring Boot 应运而生。它使用 <strong>“习惯优于配置”</strong> （项目中存在大量的配置，此外还内置了一个习惯性的配置，让你无需手动进行配置）的理念让你的项目快速的运行起来。使用 Spring Boot 很容易创建一个独立运行（运行 Jar，内嵌 Servlet 容器）准生产级别的基于 Spring 框架的项目，使用 Spring Boot 你可以不用或者只需很少的 Spring 配置。</p><h3 id="2-2-优点"><a href="#2-2-优点" class="headerlink" title="2.2 优点"></a>2.2 优点</h3><ul><li>快速构建项目</li><li>对主流开发框架的无配置集成</li><li>项目可独立运行，无需外部依赖 Servlet 容器</li><li>提供运行时的应用监控</li><li>极大地提高了开发、部署效率</li><li>与云计算的天然集成</li></ul><h3 id="2-3-缺点"><a href="#2-3-缺点" class="headerlink" title="2.3  缺点"></a>2.3  缺点</h3><ul><li>版本迭代速度很快，一些模块改动很大</li><li>由于不用自己做配置，报错时很难定位</li><li>网上现成的解决方案比较少</li></ul><h2 id="3-第一个SpringBoot项目"><a href="#3-第一个SpringBoot项目" class="headerlink" title="3. 第一个SpringBoot项目"></a>3. 第一个SpringBoot项目</h2><p>这里我们使用 Intellij IDEA 来新建一个 Spring Boot 项目。</p><h3 id="3-1-创建项目"><a href="#3-1-创建项目" class="headerlink" title="3.1 创建项目"></a>3.1 创建项目</h3><ul><li><ol><li>打开 IDEA -&gt; New Project -&gt; Spring Initializr</li></ol></li></ul><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/springboot/first-spring-boot-1.png" alt=""></p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/springboot/first-spring-boot-2.png" alt=""></p><ul><li>2.填写项目信息</li></ul><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/springboot/first-spring-boot-3.png" alt=""></p><ul><li>3.选择 Spring Boot 版本及 Web 开发所需的依赖</li></ul><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/springboot/first-spring-boot-4.png" alt=""></p><ul><li>4.保存项目到指定目录</li></ul><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/springboot/first-spring-boot-5.png" alt=""></p><h3 id="3-2-工程目录结构"><a href="#3-2-工程目录结构" class="headerlink" title="3.2 工程目录结构"></a>3.2 工程目录结构</h3><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/springboot/first-spring-boot-6.png" alt=""></p><p>一个标准的maven项目。</p><p><code>HelloSpringApplication</code>作为SpringBoot启动类。</p><p><code>resources/static</code>目录存放静态资源文件</p><p><code>resources/templates</code>目录存放html页面。</p><p><code>application.properties</code>为SpringBoot配置文件</p><h4 id="Application-class"><a href="#Application-class" class="headerlink" title="Application.class"></a>Application.class</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.boot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSpringBootApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HelloSpringBootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动类非常简单，其中<code>@SpringBootApplication</code>注解表明这是SpringBoot启动类。</p><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注意这里继承了父项目spring-boot-starter-parent--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.illusory<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-spring-boot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--两个依赖spring-boot-starter-web和test--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到项目中有两个依赖<code>spring-boot-starter-web</code>和<code>spring-boot-starter-test</code>。</p><p>其中test是都会有的，然后web则是前面勾选的模块。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/springboot/first-spring-boot-7.png" alt=""></p><p>可以看到已经依赖了Spring各大组件，同时还依赖了一个Tomcat,所以SpringBoot项目是可以独立运行的，因为内置了Tomcat。</p><h2 id="4-功能演示"><a href="#4-功能演示" class="headerlink" title="4. 功能演示"></a>4. 功能演示</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.boot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusoryCloud</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/15 12:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello spring boot!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动 <code>HelloSpringBootApplication</code> 的 <code>main()</code> 方法，浏览器访问 <code>http://localhost:8080/hello</code>可以看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello spring boot!</span><br></pre></td></tr></table></figure><h2 id="5-神奇之处"><a href="#5-神奇之处" class="headerlink" title="5. 神奇之处"></a>5. 神奇之处</h2><ul><li>没有配置 web.xml</li><li>没有配置 application.xml，Spring Boot 帮你配置了</li><li>没有配置 application-mvc.xml，Spring Boot 帮你配置了</li><li>没有配置 Tomcat，Spring Boot 内嵌了 Tomcat 容器</li></ul><h2 id="6-自动配置原理"><a href="#6-自动配置原理" class="headerlink" title="6. 自动配置原理"></a>6. 自动配置原理</h2><p>Spring Boot的启动类上有一个<code>@SpringBootApplication</code>注解，这个注解是Spring Boot项目必不可少的注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SpringBootApplication.class</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(</span><br><span class="line">    excludeFilters = &#123;<span class="meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;TypeExcludeFilter.class&#125;</span><br><span class="line">), <span class="meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span><br><span class="line">)&#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = EnableAutoConfiguration.class</span><br><span class="line">    )</span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = EnableAutoConfiguration.class</span><br><span class="line">    )</span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = ComponentScan.class,</span><br><span class="line">        attribute = <span class="string">"basePackages"</span></span><br><span class="line">    )</span><br><span class="line">    String[] scanBasePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = ComponentScan.class,</span><br><span class="line">        attribute = <span class="string">"basePackageClasses"</span></span><br><span class="line">    )</span><br><span class="line">    Class&lt;?&gt;[] scanBasePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这是个复合注解，其中有一个是<code>@EnableAutoConfiguration</code>,开启自动配置，说明SpringBoot配置肯定和这个有关。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//EnableAutoConfiguration.class</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;AutoConfigurationImportSelector.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">    String ENABLED_OVERRIDE_PROPERTY = <span class="string">"spring.boot.enableautoconfiguration"</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个注解也是一个派生注解，其中的关键功能由<code>@Import({AutoConfigurationImportSelector.class})</code>提供，其导入的AutoConfigurationImportSelector的selectImports()方法通过SpringFactoriesLoader.loadFactoryNames()扫描所有具有META-INF/spring.factories的jar包。spring-boot-autoconfigure-x.x.x.x.jar里就有一个这样的spring.factories文件。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/springboot/first-spring-boot-8.png" alt=""></p><p>最终<code>@EnableAutoConfiguration</code>注解通过<code>@SpringBootApplication</code>被间接的标记在了Spring Boot的启动类上。在<code>SpringApplication.run(...)</code>的内部就会执行<code>selectImports()</code>方法，找到所有JavaConfig自动配置类的全限定名对应的class，然后将所有自动配置类加载到Spring容器中。</p><p>Spring Boot关于自动配置的源码在spring-boot-autoconfigure-x.x.x.x.jar中：</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/springboot/first-spring-boot-9.png" alt=""></p><p>可以看到SpringBoot提供了很多的默认配置，在我们没有手动配置时就会使用提供的默认配置。SpringBoot提倡的<code>约定大于配置</code>。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><code>《Spring boot实战》</code></p><p><code>https://blog.csdn.net/u014745069/article/details/83820511</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要讲述了Spring框架的变化，从Spring1.0到Spring5.0，从xml配置到注解，到现在的SpringBoot，最后记录了如何创建第一个SpringBoot项目。&lt;/p&gt;
&lt;p&gt;前面写摘要&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://www.lixueduan.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://www.lixueduan.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>MySQL主从复制与双主互备</title>
    <link href="https://www.lixueduan.com/posts/846f909.html"/>
    <id>https://www.lixueduan.com/posts/846f909.html</id>
    <published>2019-03-05T14:00:00.000Z</published>
    <updated>2019-03-12T12:15:14.077Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要讲述了MySQL的主从复制与双主互备的作用与好处，并且记录了具体的搭建过程与过程中的常见问题。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><h3 id="1-1-什么是主从复制"><a href="#1-1-什么是主从复制" class="headerlink" title="1.1 什么是主从复制?"></a>1.1 什么是主从复制?</h3><p>主从复制，是用来建立一个和主数据库完全一样的数据库环境，称为从数据库；主数据库一般是准实时的业务数据库。</p><h3 id="1-2-主从复制的作用"><a href="#1-2-主从复制的作用" class="headerlink" title="1.2 主从复制的作用"></a>1.2 主从复制的作用</h3><ul><li>1.做数据的热备，作为后备数据库，主数据库服务器故障后，可切换到从数据库继续工作，避免数据丢失。</li><li>2.架构的扩展。业务量越来越大，I/O访问频率过高，单机无法满足，此时做多库的存储，降低磁盘I/O访问的频率，提高单个机器的I/O性能。</li><li>3.读写分离，使数据库能支撑更大的并发。在报表中尤其重要。由于部分报表sql语句非常的慢，导致锁表，影响前台服务。如果前台使用master，报表使用slave，那么报表sql将不会造成前台锁，保证了前台速度。</li></ul><h3 id="1-3-主从复制的原理"><a href="#1-3-主从复制的原理" class="headerlink" title="1.3 主从复制的原理"></a>1.3 主从复制的原理</h3><ul><li>数据库有个<code>bin-log</code>二进制文件，记录了所有sql语句。</li><li>我们的目标就是把主数据库的<code>bin-log</code>文件的sql语句复制到从库。</li><li>让其在从机的<code>relay-log</code>重做日志文件中再执行一次这些sql语句即可。</li></ul><h3 id="1-4-大致流程"><a href="#1-4-大致流程" class="headerlink" title="1.4 大致流程"></a>1.4 大致流程</h3><p><strong>对于每一个主从复制的连接，都有三个线程</strong>。</p><ul><li>1.<strong>binlog输出线程</strong> :每当有从库连接上主库时，主库就会创建一个线程然后发送<code>binlog</code>文件到从库。</li><li>2.<strong>从库I/O线程</strong> :当<code>START SLAVE</code>语句在从库开始执行之后，从库创建一个I/O线程，该线程连接到主库并请求主库发送<code>binlog</code>里面的更新记录到从库上。从库I/O线程读取主库的<code>binlog</code>输出线程发送的更新并拷贝这些更新到本地文件，其中包括<code>relay log</code>文件。</li><li>3.<strong>从库的SQL线程</strong>:从库创建一个SQL线程，这个线程读取从库I/O线程写到<code>relay log</code>的更新事件并执行。</li></ul><p>拥有多个从库的主库为每一个连接到主库的从库创建一个binlog输出线程，每一个从库都有它自己的I/O线程和SQL线程。</p><h3 id="1-5-具体流程"><a href="#1-5-具体流程" class="headerlink" title="1.5 具体流程"></a>1.5 具体流程</h3><ul><li>1.主库db的更新事件<code>(update、insert、delete)</code>被写到<code>binlog</code>。</li><li>2.从库发起连接，连接到主库。</li><li>3.此时主库创建一个<code>binlog dump thread</code>线程，把<code>binlog</code>的内容发送到从库。</li><li>4.从库启动之后，创建一个I/O线程，读取主库传过来的binlog内容并写入到relay log。</li><li>5.还会创建一个SQL线程，从<code>relay log</code>里面读取内容，从<code>Exec_Master_Log_Pos</code>位置开始执行读取到的更新事件，将更新内容写入到<code>slave</code>的db。</li></ul><h2 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2. 环境准备"></a>2. 环境准备</h2><h3 id="2-1-所需环境"><a href="#2-1-所需环境" class="headerlink" title="2.1 所需环境"></a>2.1 所需环境</h3><p>先准备两台服务器，且安装好mysql。必须保证两台机器上的mysql中数据是一致的，不然主从复制时可能会出现问题。</p><p>如果两台机器数据不一致，比如先有主机后加的从机，此时可以先复制主机数据到从机，在配置主从复制。</p><h3 id="2-2-手动同步数据库"><a href="#2-2-手动同步数据库" class="headerlink" title="2.2 手动同步数据库"></a>2.2 手动同步数据库</h3><p>先在主机上执行以下SQL，锁定表中数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; flush table with read lock;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure><p><strong>不要退出这个终端，否则这个锁就失效了</strong>。</p><p>在不退出终端的情况下，再开启一个终端直接打包压缩数据文件或使用<code>mysqldump</code>工具导出数据。这里通过打包mysql文件来完成数据的备份，操作过程如下：</p><p>一、导出数据库<br>1、导出数据和表结构：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 格式：mysqldump -u用户名 -p密码 数据库名 &gt; 数据库名.sql</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> /usr/<span class="built_in">local</span>/mysql/bin/ mysqldump -uroot -proot <span class="built_in">test</span> &gt; test.sql</span></span><br></pre></td></tr></table></figure><p>2、只导出表结构：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 格式：mysqldump -u用户名 -p密码 -d 数据库名 &gt; 数据库名.sql</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> /usr/<span class="built_in">local</span>/mysql/bin/ mysqldump -uroot -proot -d <span class="built_in">test</span> &gt; test.sql</span></span><br></pre></td></tr></table></figure><p>具体如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建保存备份文件的文件夹</span></span><br><span class="line">[root@localhost ~]# mkdir -p /usr/local/mysql/data/backup    </span><br><span class="line"><span class="meta">#</span><span class="bash">创建备份文件并压缩</span></span><br><span class="line">[root@localhost ~]# /usr/local/mysql/bin/mysqldump -uroot -p 'root' --events -A -B |gzip &gt;/usr/local/mysql/data/backup/mysql_bak.$(date +%F).sql.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 用scp将备份文件复制到从机上</span></span><br><span class="line">[root@localhost ~]# scp /usr/local/mysql/data/backup/mysql_bak.2019-03-12.sql.gz root@192.168.5.151:/usr/local/mysql/data/backup</span><br></pre></td></tr></table></figure><p>备份结束后，解锁主库，恢复读写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; unlock tables;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><p>从库进行同步：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 解压</span><br><span class="line">[root@localhost backup]# gunzip mysql_bak.2019-03-12.sql.gz </span><br><span class="line">#导入SQL文件</span><br><span class="line">[root@localhost backup]# mysql -uroot -p  &lt;mysql_bak.2019-03-12.sql</span><br></pre></td></tr></table></figure><p>或者用另一种导入方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#1.首先建空数据库</span><br><span class="line">mysql&gt;create database abc;</span><br><span class="line">#2.选择数据库</span><br><span class="line">mysql&gt;use abc;</span><br><span class="line">#3.设置数据库编码</span><br><span class="line">mysql&gt;set names utf8;</span><br><span class="line">#4.导入数据（注意sql文件的路径）</span><br><span class="line">mysql&gt;source /usr/local/mysql/data/backup/mysql_bak.2019-03-12.sql;</span><br></pre></td></tr></table></figure><h2 id="3-搭建主从复制"><a href="#3-搭建主从复制" class="headerlink" title="3. 搭建主从复制"></a>3. 搭建主从复制</h2><h3 id="3-1-修改配置文件"><a href="#3-1-修改配置文件" class="headerlink" title="3.1 修改配置文件"></a>3.1 修改配置文件</h3><p><code>主机Master：192.168.5.153</code></p><p><code>从机Slave：192.168.5.151</code></p><p>在默认情况下，MySQL的配置文件是<code>/etc/my.cnf</code>,首先修改Mater主机的配置文件，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# vim /etc/my.cnf</span><br></pre></td></tr></table></figure><p>在<code>Master</code>的<code>/etc/my.cnf</code>文件中的<code>[mysqld]</code>段添加如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">节点标识，主、从节点不能相同，必须全局唯一 一般填ip最后几位</span></span><br><span class="line">server-id=153</span><br><span class="line"><span class="meta">#</span><span class="bash">开启MySQL的binlog日志功能。“mysql-bin”表示日志文件的命名格式</span></span><br><span class="line"><span class="meta">#</span><span class="bash">生成文件名为mysql-bin.000001、mysql-bin.000002等的日志文件</span></span><br><span class="line">log-bin=mysql-bin</span><br><span class="line"><span class="meta">#</span><span class="bash">定义relay-log日志文件的命名格式</span></span><br><span class="line">relay-log=mysql-relay-bin</span><br><span class="line"><span class="meta">#</span><span class="bash">复制过滤选项，可以过滤不需要复制的数据库或表，例如“mysql.%”表示不复制MySQL库下的所有对象</span></span><br><span class="line">replicate-wild-ignore-table=mysql.%</span><br><span class="line">replicate-wild-ignore-table=information_schema.%</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定需要复制的数据库或表 <span class="built_in">test</span>数据库下的所有表都复制</span></span><br><span class="line">replicate-wild-do-table=test.%</span><br></pre></td></tr></table></figure><p>接着修改<code>Slave</code>从机的配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">节点标识，主、从节点不能相同，必须全局唯一 一般填ip最后几位</span></span><br><span class="line">server-id=151</span><br><span class="line"><span class="meta">#</span><span class="bash">开启MySQL的binlog日志功能。“mysql-bin”表示日志文件的命名格式</span></span><br><span class="line"><span class="meta">#</span><span class="bash">生成文件名为mysql-bin.000001、mysql-bin.000002等的日志文件</span></span><br><span class="line">log-bin=mysql-bin</span><br><span class="line"><span class="meta">#</span><span class="bash">定义relay-log日志文件的命名格式</span></span><br><span class="line">relay-log=mysql-relay-bin</span><br><span class="line"><span class="meta">#</span><span class="bash">复制过滤选项，可以过滤不需要复制的数据库或表，例如“mysql.%”表示不复制MySQL库下的所有对象</span></span><br><span class="line">replicate-wild-ignore-table=mysql.%</span><br><span class="line">replicate-wild-ignore-table=information_schema.%</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定需要复制的数据库或表,与上面</span></span><br><span class="line">replicate-wild-do-table=test.%</span><br></pre></td></tr></table></figure><p>特别注意: <strong>生产库上一般不建议设置过滤规则, 如果非要设置, 强烈建议从库使用通配符方式过滤某个库</strong>。</p><p>从库可以使用通配符<code>&quot;库名.%&quot;</code>方式过滤主从同步时某个库的设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">replicate-wild-do-table=webdb.%      #只复制webdb库下的所有表`</span><br><span class="line">replicate-wild-ignore-table=mysql.%  #忽略mysql库下的所有表</span><br></pre></td></tr></table></figure><p><strong>温馨提示：在实际业务场景中，mysq主从同步时最好别过滤库，即最好进行基于整个数据库的同步配置</strong>。如果业务库比较多的情况下，可使用mysql多实例方式进行同步，一个业务库对应一个mysql实例，每个mysql实例做基于它的整个数据库的同步配置。使用过滤库或过滤表的方式进行主从同步配置，后续会带来一些比较麻烦的坑。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">replicate-wild-dO-table= "库名.%"</span><br><span class="line">replicate-wild-ignore-table= "库名.%"</span><br></pre></td></tr></table></figure><p>而不建议从库使用DB方式过滤某个库:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">replicate_do_db ="库名"</span><br><span class="line">replicate_ingore_db ="库名"</span><br></pre></td></tr></table></figure><h3 id="3-2-创建复制用户"><a href="#3-2-创建复制用户" class="headerlink" title="3.2 创建复制用户"></a>3.2 创建复制用户</h3><p>首先在<code>Mater</code>的MySQL库中创建复制用户给<code>Slave</code>复制时使用，操作过程如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# /etc/init.d/mysqld restart</span><br><span class="line">#@ 前面的那个是 用户名 后面的是主机地址 %表示所有 最后的root是密码</span><br><span class="line">mysql&gt; grant replication slave on *.* to &apos;repl_user&apos;@&apos;192.168.5.151&apos; identified by &apos;root&apos;;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show master status;</span><br><span class="line"> +------------------+----------+--------------+------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |</span><br><span class="line"> +------------------+----------+--------------+------------------+</span><br><span class="line"> | mysql-bin.000001 |     686  |              |                  |</span><br><span class="line"> +------------------+----------+--------------+------------------+</span><br></pre></td></tr></table></figure><p>然后在<code>Slave</code>的MySQL库中将<code>Mster</code>设为自己的主服务器，操作如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; change master to master_host=&apos;192.168.5.153&apos;,master_user=&apos;repl_user&apos;,master_password=&apos;root&apos;,master_log_file=&apos;mysql-bin.000001&apos;,master_log_pos=686;</span><br></pre></td></tr></table></figure><p>注意: <strong><code>master_log_file</code>和<code>master_log_pos</code>两个选项，这两个选项的值是在<code>master</code>上通过SQL语句<code>show master status</code>查询到的结果</strong>。</p><p> 接着就可以在<code>Slave</code>上启动slave服务了，可执行如下SQL命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; start slave;</span><br></pre></td></tr></table></figure><p>查看<code>Slave</code>上slave的运行状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status\G;</span><br><span class="line"></span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: </span><br><span class="line">                  Master_Host: 192.168.5.154</span><br><span class="line">                  Master_User: repl_user</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000001</span><br><span class="line">          Read_Master_Log_Pos: 442</span><br><span class="line">               Relay_Log_File: mysql-relay-bin.000001</span><br><span class="line">                Relay_Log_Pos: 4</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000001</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: </span><br><span class="line">          Replicate_Ignore_DB: </span><br><span class="line">           Replicate_Do_Table: </span><br><span class="line">       Replicate_Ignore_Table: </span><br><span class="line">      Replicate_Wild_Do_Table: test.%</span><br><span class="line">  Replicate_Wild_Ignore_Table: mysql.%,information_schema.%</span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error: </span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 442</span><br><span class="line">              Relay_Log_Space: 154</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File: </span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File: </span><br><span class="line">           Master_SSL_CA_Path: </span><br><span class="line">              Master_SSL_Cert: </span><br><span class="line">            Master_SSL_Cipher: </span><br><span class="line">               Master_SSL_Key: </span><br><span class="line">        Seconds_Behind_Master: NULL</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 1593</span><br><span class="line">                Last_IO_Error: Fatal error: The slave I/O thread stops because master and slave have equal MySQL server ids; these ids must be different for replication to work (or the --replicate-same-server-id option must be used on slave but this does not always make sense; please check the manual before using it).</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error: </span><br><span class="line">  Replicate_Ignore_Server_Ids: </span><br><span class="line">             Master_Server_Id: 1</span><br><span class="line">                  Master_UUID: </span><br><span class="line">             Master_Info_File: /usr/local/mysql/data/master.info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind: </span><br><span class="line">      Last_IO_Error_Timestamp: 190311 16:27:22</span><br><span class="line">     Last_SQL_Error_Timestamp: </span><br><span class="line">               Master_SSL_Crl: </span><br><span class="line">           Master_SSL_Crlpath: </span><br><span class="line">           Retrieved_Gtid_Set: </span><br><span class="line">            Executed_Gtid_Set: </span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB: </span><br><span class="line">                 Channel_Name: </span><br><span class="line">           Master_TLS_Version: </span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>这里需要重点关注的是<code>Slave_IO_Running</code>和<code>Slave_SQL_Running</code>，这两个就是在Slave节点上运行的主从复制线程，正常情况下这两个值都应该为Yes。</p><p>另外，还需要注意的是<code>Slave_IO_State</code>、<code>Master_Host</code>、<code>Master_Log_File</code>、<code>Read_Master_Log_Pos</code>、<code>Relay_Log_File</code>、<code>Relay_Log_Pos</code>和<code>Relay_Master_Log_File</code>几个选项，可以查看出MySQL复制的运行原理及执行规律。最后还有一个<code>Replicate_Wild_Ignore_Table</code>选项，这个是之前在<code>my.cnf</code>中添加过的，通过此选项的输出值可以知道过滤了哪些数据库。</p><p>到这里主从复制已经ok了。</p><h3 id="3-3-测试"><a href="#3-3-测试" class="headerlink" title="3.3 测试"></a>3.3 测试</h3><p>在master上创建一个表，注意前面配置的时只复制test数据库中的数据，所以需要先建一个test数据库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database test;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use test;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; CREATE TABLE users(</span><br><span class="line">    -&gt; uid INT  PRIMARY KEY,</span><br><span class="line">    -&gt; uname VARCHAR(20),</span><br><span class="line">    -&gt; sex INT,</span><br><span class="line">    -&gt; age INT</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.09 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p>创建好后slave查看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">| test               |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>证明主从复制已经成功了。</p><h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h2><h3 id="4-1-主从同步过程"><a href="#4-1-主从同步过程" class="headerlink" title="4.1 主从同步过程"></a>4.1 主从同步过程</h3><ul><li>1.在<code>Slave</code> 服务器上执行<code>sart slave</code>命令开启主从复制开关，开始进行主从复制。</li><li>2.此时，<code>Slave</code>服务器的<code>IO线程</code>会通过在<code>Master</code>上已经授权的复制用户权限请求连接<code>Master</code>服务器，并请求从执行<code>binlog</code>日志文件的指定位置（日志文件名和位置就是在配置主从复制服务时执行<code>change master</code>命令指定的）之后开始发送<code>binlog</code>日志内容</li><li>3.<code>Master</code>服务器接收到来自<code>Slave</code>服务器的<code>IO线程</code>的请求后，其上负责复制的<code>IO线程</code>会根据<code>Slave</code>服务器的<code>IO线程</code>请求的信息分批读取指定binlog日志文件指定位置之后的binlog日志信息，然后返回给Slave端的IO线程。返回的信息中除了binlog日志内容外，还有在Master服务器端记录的IO线程。返回的信息中除了binlog中的下一个指定更新位置。</li><li>4.当Slave服务器的IO线程获取到Master服务器上IO线程发送的日志内容、日志文件及位置点后，会将<code>binlog</code>日志内容依次写到Slave端自身的<code>Relay Log</code>（即中继日志）文件<code>（Mysql-relay-bin.xxx</code>）的最末端，并将新的<code>binlog</code>文件名和位置记录到<code>master-info</code>文件中，以便下一次读取master端新binlog日志时能告诉Master服务器从新binlog日志的指定文件及位置开始读取新的binlog日志内容</li><li>5.<code>Slave</code>服务器端的SQL线程会实时检测本地<code>Relay Log</code>中IO线程新增的日志内容，然后及时把Relay LOG 文件中的内容解析成<code>sql</code>语句，并在自身Slave服务器上按解析SQL语句的位置顺序执行应用这样sql语句，并在<code>relay-log.info</code>中记录当前应用中继日志的文件名和位置点.</li></ul><h3 id="4-2-主从复制条件"><a href="#4-2-主从复制条件" class="headerlink" title="4.2 主从复制条件"></a>4.2 主从复制条件</h3><ul><li>开启Binlog功能</li><li>主库要建立账号</li><li>从库要配置master.info (CHANGE MASTER to…相当于配置密码文件和Master的相关信息)</li><li>start slave 开启复制功能</li></ul><h3 id="4-3-主从复制时需要理解"><a href="#4-3-主从复制时需要理解" class="headerlink" title="4.3 主从复制时需要理解"></a>4.3 主从复制时需要理解</h3><ul><li>3个线程，主库IO，从库IO和SQL及作用</li><li>master.info（从库）作用</li><li>relay-log 作用</li><li>异步复制</li><li>binlog作用 (如果需要级联需要开启Binlog)</li></ul><h3 id="4-4-主从复制时注意事项"><a href="#4-4-主从复制时注意事项" class="headerlink" title="4.4 主从复制时注意事项"></a>4.4 主从复制时注意事项</h3><ul><li>主从复制是异步逻辑的SQL语句级的复制</li><li>复制时，主库有一个I/O线程，从库有两个线程，I/O和SQL线程</li><li>实现主从复制的必要条件是主库要开启记录binlog功能</li><li>作为复制的所有Mysql节点的server-id都不能相同</li><li>binlog文件只记录对数据库有更改的SQL语句（来自主库内容的变更），不记录任何查询（select，show）语句</li></ul><p><strong>彻底解除主从复制关系</strong><br>-  stop slave;<br>-  reset slave; 或直接删除master.info和relay-log.info这两个文件；<br>-  修改my.cnf删除主从相关配置参数。</p><h3 id="4-5-常见问题"><a href="#4-5-常见问题" class="headerlink" title="4.5 常见问题"></a>4.5 常见问题</h3><h4 id="1-数据丢失与复制延迟"><a href="#1-数据丢失与复制延迟" class="headerlink" title="1.数据丢失与复制延迟"></a>1.数据丢失与复制延迟</h4><ul><li>主库宕机后，数据可能丢失</li><li>从库只有一个SQL Thread，主库写压力大，复制很可能延时</li></ul><h4 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2. 解决方法"></a>2. 解决方法</h4><ul><li>半同步复制—解决数据丢失的问题</li><li>并行复制—-解决从库复制延迟的问题</li></ul><h4 id="3-半同步复制原理"><a href="#3-半同步复制原理" class="headerlink" title="3. 半同步复制原理"></a>3. 半同步复制原理</h4><p>1.事务在主库写完binlog后需要从库返回一个已接受，才放回给客户端；<br>2.5.5集成到mysql，以插件的形式存在，需要单独安装<br>3.确保事务提交后binlog至少传输到一个从库<br>4.不保证从库应用完成这个事务的binlog<br>5.性能有一定的降低</p><p>6.网络异常或从库宕机，卡主库，直到超时或从库恢复 </p><h4 id="4-并行复制"><a href="#4-并行复制" class="headerlink" title="4. 并行复制"></a>4. 并行复制</h4><p>社区版5.6中新增<br>并行是指从库多线程apply binlog库级别并行应用binlog，同一个库数据更改还是串行的(5.7版并行复制基于事务组)设置<br>设置sql线程数为10<br><code>set global slave_parallel_workers=10;</code></p><h2 id="5-双主备份"><a href="#5-双主备份" class="headerlink" title="5. 双主备份"></a>5. 双主备份</h2><h3 id="5-1-简介"><a href="#5-1-简介" class="headerlink" title="5.1 简介"></a>5.1 简介</h3><p>根据上面的主从环境部署，master和slave已经实现同步，即在master上写入新数据，自动同步到slave。而从库只能读不能写，一旦从库有写入数据，就会造成主从数据不一致！<br>下面就说下Mysql主主复制环境，在slave上更新数据时，master也能自动同步过来。</p><p>温馨提示：<br>在做主主同步前，提醒下需要特别注意的一个问题：<br>主主复制和主从复制有一些区别，因为多主中都可以对服务器有写权限，所以设计到自增长重复问题，例如：<br>出现的问题（多主自增长ID重复）<br>1）首先在A和B两个库上创建<code>test</code>表结构;<br>2）停掉A，在B上对数据表<code>test</code>(存在自增长属性的ID字段)执行插入操作，返回插入ID为1;<br>3）然后停掉B，在A上对数据表<code>test</code>(存在自增长属性的ID字段)执行插入操作，返回的插入ID也是1;<br>4）然后 同时启动A,B，就会出现主键ID重复</p><p>解决方法：<br>只要保证两台服务器上的数据库里插入的自增长数据不同就可以了<br>如：A插入奇数ID，B插入偶数ID，当然如果服务器多的话，还可以自定义算法，只要不同就可以了<br>在下面例子中，在两台主主服务器上加入参数，以实现奇偶插入！<br>记住:在做主主同步时需要设置自增长的两个相关配置，如下：<br>auto_increment_offset       表示自增长字段从那个数开始，取值范围是1 .. 65535。这个就是序号。如果有n台mysql机器，则从第一台开始分为设1，2…n<br>auto_increment_increment    表示自增长字段每次递增的量，其默认值是1，取值范围是1 .. 65535。如果有n台mysql机器，这个值就设置为n。</p><p>在主主同步配置时，需要将两台服务器的：<br>auto_increment_increment     增长量都配置为2<br>auto_increment_offset        分别配置为1和2。这是序号，第一台从1开始，第二台就是2，以此类推!这样效果就是：master的数据<code>id</code>是1,3,5,7…, slave的数据<code>id</code>是2,4,6,8….<br>这样才可以避免两台服务器同时做更新时自增长字段的值之间发生冲突。（针对的是有自增长属性的字段）</p><h3 id="5-2-修改配置文件"><a href="#5-2-修改配置文件" class="headerlink" title="5.2 修改配置文件"></a>5.2 修改配置文件</h3><p><code>Master</code>的配置文件<code>my.cnf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">主主备份新增</span></span><br><span class="line">log-slave-updates</span><br><span class="line">sync_binlog = 1</span><br><span class="line">binlog_checksum = none</span><br><span class="line">binlog_format = mixed</span><br><span class="line"><span class="meta">#</span><span class="bash">防止ID自增重复 offset=1</span></span><br><span class="line">auto-increment-increment = 2   </span><br><span class="line">auto-increment-offset = 1  </span><br><span class="line">slave-skip-errors = all</span><br></pre></td></tr></table></figure><p><code>Slave</code>的配置文件<code>my.cnf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">主主备份新增</span></span><br><span class="line">log-slave-updates</span><br><span class="line">sync_binlog = 1</span><br><span class="line">binlog_checksum = none</span><br><span class="line">binlog_format = mixed</span><br><span class="line"><span class="meta">#</span><span class="bash">防止ID自增重复 offset=2</span></span><br><span class="line">auto-increment-increment = 2   </span><br><span class="line">auto-increment-offset = 2 </span><br><span class="line">slave-skip-errors = all</span><br></pre></td></tr></table></figure><h3 id="5-3-创建同步用户"><a href="#5-3-创建同步用户" class="headerlink" title="5.3 创建同步用户"></a>5.3 创建同步用户</h3><p>同时在主从服务器建立一个连接帐户，该帐户必须授予<code>REPLIATION SLAVE</code>权限。这里因为服务器A和服务器B互为主从，所以都要分别建立一个同步用户。</p><p><code>Master</code></p><p>其实前面主机上已经创建了一个账户了，这里可以不用再创建的，不过还是写上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant replication slave on *.* to &apos;DoubleRel&apos;@&apos;192.168.5.151&apos; identified by &apos;root&apos;;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure><p><code>Slave</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant replication slave on *.* to &apos;DoubleRel&apos;@&apos;192.168.5.153&apos; identified by &apos;root&apos;;</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure><h3 id="5-4-指定Master"><a href="#5-4-指定Master" class="headerlink" title="5.4 指定Master"></a>5.4 指定Master</h3><p>互相将对方作为<code>Master</code></p><p><code>Master</code></p><p>注意：<code>master_log_file</code>,<code>master_log_pos</code>这两个刚好是在对面的机器上查询出来的，即<code>MAster</code>上查出来的<code>Position=150</code>，那么在<code>Slave</code>上执行的命令就是<code>master_log_pos=150</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000003 |     150  |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line"></span><br><span class="line">mysql&gt;change master to master_host=&apos;192.168.5.151&apos;,master_user=&apos;DoubleRel&apos;,master_password=&apos;root&apos;,master_log_file=&apos;mysql-bin.000002&apos;,master_log_pos=150;</span><br></pre></td></tr></table></figure><p><code>Slave</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000003 |      150 |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line"></span><br><span class="line">mysql&gt;change master to master_host=&apos;192.168.5.153&apos;,master_user=&apos;DoubleRel&apos;,master_password=&apos;root&apos;,master_log_file=&apos;mysql-bin.000003&apos;,master_log_pos=150;</span><br></pre></td></tr></table></figure><h3 id="5-5-开启Slave"><a href="#5-5-开启Slave" class="headerlink" title="5.5 开启Slave"></a>5.5 开启Slave</h3><p><code>Master</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  start slave;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show slave status \G;</span><br><span class="line">#查看下面两项值均为Yes，即表示设置从服务器成功。</span><br><span class="line">Slave_IO_Running: Yes</span><br><span class="line">Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><p><code>saster</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  start slave;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show slave status \G;</span><br><span class="line">#查看下面两项值均为Yes，即表示设置从服务器成功。</span><br><span class="line">Slave_IO_Running: Yes</span><br><span class="line">Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><h3 id="5-6-测试"><a href="#5-6-测试" class="headerlink" title="5.6 测试"></a>5.6 测试</h3><p>现在<code>Master</code>中查询，只有<code>users</code>一张表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br><span class="line">+----------------+</span><br><span class="line">| Tables_in_test |</span><br><span class="line">+----------------+</span><br><span class="line">| users          |</span><br><span class="line">+----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>然后在<code>Slave</code>中创建一张表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE orders(</span><br><span class="line">    -&gt; oid INT  PRIMARY KEY,</span><br><span class="line">    -&gt; oname VARCHAR(20)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.06 sec)</span><br></pre></td></tr></table></figure><p><code>Master</code>中再次查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br><span class="line">+----------------+</span><br><span class="line">| Tables_in_test |</span><br><span class="line">+----------------+</span><br><span class="line">| orders         |</span><br><span class="line">| users          |</span><br><span class="line">+----------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>ok，已经有两张表了，接着在<code>Master</code>中添加一张表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE account(</span><br><span class="line">    -&gt; aid INT  PRIMARY KEY,</span><br><span class="line">    -&gt; aname VARCHAR(20)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br></pre></td></tr></table></figure><p>然后在<code>Slave</code>中查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br><span class="line">+----------------+</span><br><span class="line">| Tables_in_test |</span><br><span class="line">+----------------+</span><br><span class="line">| account        |</span><br><span class="line">| orders         |</span><br><span class="line">| users          |</span><br><span class="line">+----------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>三张表都在，测试成功，说明双主备份搭建成功了。</p><h2 id="6-问题"><a href="#6-问题" class="headerlink" title="6. 问题"></a>6. 问题</h2><p><code>show slave status \G;</code>查看状态时出现<code>Slave_IO_Running: Connecting</code></p><p>可能的原因：</p><h3 id="6-1-网络不通"><a href="#6-1-网络不通" class="headerlink" title="6.1 网络不通"></a>6.1 网络不通</h3><p>Master和Slave互相ping一下看能不能ping通</p><h3 id="6-2-账户密码错误："><a href="#6-2-账户密码错误：" class="headerlink" title="6.2 账户密码错误："></a>6.2 账户密码错误：</h3><p>检测生成的用户和配置的密码是否一致，就是下面的这两个地方。@前面的时账号 后面的是允许访问的主机地址，最后的root则是密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant replication slave on *.* to &apos;DoubleRel&apos;@&apos;192.168.5.151&apos; identified by &apos;root&apos;;</span><br><span class="line"></span><br><span class="line">mysql&gt;change master to master_host=&apos;192.168.5.153&apos;,master_user=&apos;DoubleRel&apos;,master_password=&apos;root&apos;,master_log_file=&apos;mysql-bin.000003&apos;,master_log_pos=150;</span><br></pre></td></tr></table></figure><h3 id="6-3-防火墙"><a href="#6-3-防火墙" class="headerlink" title="6.3 防火墙"></a>6.3 防火墙</h3><p>可以先关闭防火墙在测试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld # 临时关闭防火墙</span><br><span class="line">systemctl disable firewalld # 禁止开机启动</span><br></pre></td></tr></table></figure><h3 id="6-4-配置文件问题"><a href="#6-4-配置文件问题" class="headerlink" title="6.4 配置文件问题"></a>6.4 配置文件问题</h3><p>检查配置文件<code>my.cnf</code>是否有错误,注意语法。</p><h3 id="6-5-连接服务器时语法"><a href="#6-5-连接服务器时语法" class="headerlink" title="6.5 连接服务器时语法"></a>6.5 连接服务器时语法</h3><p>还有就是设置Master时变量是否弄错，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000003 |      150 |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line"></span><br><span class="line">mysql&gt;change master to master_host=&apos;192.168.5.153&apos;,master_user=&apos;DoubleRel&apos;,master_password=&apos;root&apos;,master_log_file=&apos;mysql-bin.000003&apos;,master_log_pos=150;</span><br></pre></td></tr></table></figure><p><strong><code>show master status</code>查询出来的结果是给对方用的，这里的<code>master_log_file</code>和<code>master_log_pos</code>是在对方的机器上查询出来的结果</strong></p><h3 id="6-6-主服务器mysql权限"><a href="#6-6-主服务器mysql权限" class="headerlink" title="6.6 主服务器mysql权限"></a>6.6 主服务器mysql权限</h3><p>查看配置的账号能不能在本机上登录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select user,host from user;</span><br><span class="line">+---------------+---------------+</span><br><span class="line">| user          | host          |</span><br><span class="line">+---------------+---------------+</span><br><span class="line">| repl_user     | %             |</span><br><span class="line">| DoubleRel     | 192.168.5.151 |</span><br><span class="line">| mysql.session | localhost     |</span><br><span class="line">| mysql.sys     | localhost     |</span><br><span class="line">| root          | localhost     |</span><br><span class="line">+---------------+---------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"># 看下能不能登录</span><br><span class="line">[root@localhost ~]# mysql -uDoubleRel -proot -h192.168.5.151</span><br></pre></td></tr></table></figure><h2 id="7-参考"><a href="#7-参考" class="headerlink" title="7. 参考"></a>7. 参考</h2><p><code>https://blog.csdn.net/darkangel1228/article/details/80004222</code></p><p><code>https://blog.51cto.com/superpcm/2094958</code></p><p><code>https://blog.csdn.net/darkangel1228/article/details/80003967</code></p><p><code>https://blog.csdn.net/ljw_jiawei/article/details/84188962</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要讲述了MySQL的主从复制与双主互备的作用与好处，并且记录了具体的搭建过程与过程中的常见问题。&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://www.lixueduan.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://www.lixueduan.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>ZooKeeper入门教程(三)---Watcher与分布式锁</title>
    <link href="https://www.lixueduan.com/posts/4975d97e.html"/>
    <id>https://www.lixueduan.com/posts/4975d97e.html</id>
    <published>2019-03-03T14:00:00.000Z</published>
    <updated>2019-03-20T12:42:56.804Z</updated>
    
    <content type="html"><![CDATA[<p>本文讲述了ZooKeeper的watch监听与ZooKeeper分布式锁的实现原理。</p><a id="more"></a><blockquote><p><strong><a href="https://www.lixueduan.com/categories/ZooKeeper/">ZooKeeper入门系列文章目录</a></strong></p><p><a href="https://www.lixueduan.com/posts/137f5008.html">ZooKeeper入门教程(一)—安装与基本使用</a></p><p><a href="https://www.lixueduan.com/posts/3ced5d74.html">ZooKeeper入门教程(二)—原生API与ACL权限认证</a></p><p><a href="https://www.lixueduan.com/posts/4975d97e.html">ZooKeeper入门教程(三)—Watcher与分布式锁</a></p><p>…..</p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-ZooKeeper的watch监听"><a href="#1-ZooKeeper的watch监听" class="headerlink" title="1. ZooKeeper的watch监听"></a>1. ZooKeeper的watch监听</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><p> 在 ZooKeeper 中，引入了 Watcher 机制来实现这种分布式的通知功能。ZooKeeper 允许客户端向服务端注册一个 Watcher 监听，当服务器的一些特定事件触发了这个 Watcher，那么就会向指定客户端发送一个事件通知来实现分布式的通知功能。</p><p> 同样，其watcher是监听数据发送了某些变化，那就一定会有对应的事件类型,<br> 和状态类型。</p><h3 id="1-2-事件类型"><a href="#1-2-事件类型" class="headerlink" title="1.2  事件类型"></a>1.2  事件类型</h3><p>与节点相关。</p><ul><li>EventType.NodeCreated </li><li>EventType.NodeDataChanged </li><li>EventType.NodeChildrenChanged </li><li>EventType.NodeDeleted </li></ul><h3 id="1-3-状态类型"><a href="#1-3-状态类型" class="headerlink" title="1.3 状态类型"></a>1.3 状态类型</h3><p>与客户端实例相关。</p><ul><li>KeeperState.Oisconnected </li><li>KeeperState.SyncConnected </li><li>KeeperState.AuthFailed </li><li>KeeperState.Expired</li></ul><h3 id="1-4-持续监听"><a href="#1-4-持续监听" class="headerlink" title="1.4 持续监听"></a>1.4 持续监听</h3><p>ZooKeeper中有很多个节点，客户端也也可以new多个watcher，会开一个新的线程分别监听不同的节点，当监听的节点发送变化后，客户端就可以收到消息。<br>其中watch可以看成是一个动作，是一次性的，watch一次就只能收到一次监听，节点别修改两次也只能收到第一次的通知。</p><p>两种持续监听方案：</p><ul><li>1.收到变化后将Boolean值手动赋为true，表示下一次还要监听</li><li><p>2.再new一个watcher去监听</p><h3 id="1-5-测试代码"><a href="#1-5-测试代码" class="headerlink" title="1.5 测试代码"></a>1.5 测试代码</h3></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWatch</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException, IOException </span>&#123;</span><br><span class="line">    Watcher watcher = <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">            Event.EventType type = event.getType();</span><br><span class="line">            Event.KeeperState state = event.getState();</span><br><span class="line">            String path = event.getPath();</span><br><span class="line">            <span class="keyword">switch</span> (state) &#123;</span><br><span class="line">                <span class="keyword">case</span> SyncConnected:</span><br><span class="line">                    System.out.println(<span class="string">"state: SyncConnected"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"path: "</span> + path);</span><br><span class="line">                    waitZooKeeperConnOne.countDown();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Disconnected:</span><br><span class="line">                    System.out.println(<span class="string">"state: Disconnected"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"path: "</span> + path);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> AuthFailed:</span><br><span class="line">                    System.out.println(<span class="string">"state: AuthFailed"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"path: "</span> + path);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Expired:</span><br><span class="line">                    System.out.println(<span class="string">"state: Expired"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"path: "</span> + path);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">"state: default"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"------------------------"</span>);</span><br><span class="line">            <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">                <span class="keyword">case</span> None:</span><br><span class="line">                    System.out.println(<span class="string">"type: None"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"path: "</span> + path);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> NodeCreated:</span><br><span class="line">                    System.out.println(<span class="string">"type: NodeCreated"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"path: "</span> + path);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> NodeDataChanged:</span><br><span class="line">                    System.out.println(<span class="string">"type: NodeDataChanged"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"path: "</span> + path);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> DataWatchRemoved:</span><br><span class="line">                    System.out.println(<span class="string">"type: DataWatchRemoved"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"path: "</span> + path);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ChildWatchRemoved:</span><br><span class="line">                    System.out.println(<span class="string">"type:child watch被移除"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"path: "</span> + path);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> NodeChildrenChanged:</span><br><span class="line">                    System.out.println(<span class="string">"type: NodeChildrenChanged"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"path: "</span> + path);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> NodeDeleted:</span><br><span class="line">                    System.out.println(<span class="string">"type: NodeDeleted"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"path: "</span> + path);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">"type: default"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"------------------------"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    String childPath = <span class="string">"/cloud/test5"</span>;</span><br><span class="line">    String childPath2 = <span class="string">"/cloud/test6"</span>;</span><br><span class="line">    String parentPath = <span class="string">"/cloud"</span>;</span><br><span class="line">    <span class="comment">//创建时watch一次 1次</span></span><br><span class="line">    ZooKeeper z = <span class="keyword">new</span> ZooKeeper(CONN_ADDR, SESSION_TIMEOUT, watcher);</span><br><span class="line">    waitZooKeeperConnOne.await();</span><br><span class="line">    <span class="comment">//这里也watch一次 2次</span></span><br><span class="line">    z.exists(childPath, <span class="keyword">true</span>);</span><br><span class="line">    z.create(childPath, <span class="string">"cloud"</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">    <span class="comment">//watch一下父节点 即/cloud  3次</span></span><br><span class="line">    z.getChildren(parentPath, <span class="keyword">true</span>);</span><br><span class="line">    z.create(childPath2, <span class="string">"cloud"</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">    <span class="comment">//再watch一次子节点  4次</span></span><br><span class="line">    z.exists(childPath, <span class="keyword">true</span>);</span><br><span class="line">    z.setData(childPath, <span class="string">"a"</span>.getBytes(), -<span class="number">1</span>);</span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-watcher小结"><a href="#1-5-watcher小结" class="headerlink" title="1.5 watcher小结"></a>1.5 watcher小结</h3><p>ZooKeeper 的 Watcher 具有以下几个特性。</p><h4 id="1-一次性"><a href="#1-一次性" class="headerlink" title="1. 一次性"></a>1. 一次性</h4><p>无论是服务端还是客户端，一旦一个 Watcher 被触发，ZooKeeper 都会将其从相应的存储中移除。因此，在 Watcher 的使用上，需要反复注册。这样的设计有效地减轻了服务端的压力。</p><h4 id="2-客户端串行执行"><a href="#2-客户端串行执行" class="headerlink" title="2. 客户端串行执行"></a>2. 客户端串行执行</h4><p>客户端 Watcher 回调的过程是一个串行同步的过程，这为我们保证了顺序，同时，需要注意的一点是，一定不能因为一个 Watcher 的处理逻辑影响了整个客户端的 Watcher 回调，所以，我觉得客户端 Watcher 的实现类要另开一个线程进行处理业务逻辑，以便给其他的 Watcher 调用让出时间。</p><h4 id="3-轻量"><a href="#3-轻量" class="headerlink" title="3. 轻量"></a>3. 轻量</h4><p>WatcherEvent 是 ZooKeeper 整个 Watcher 通知机制的最小通知单元，这个数据结构中只包含三部分内容：通知状态、事件类型和节点路径。也就是说，Watcher 通知非常简单，只会告诉客户端发生了事件，而不会说明事件的具体内容。</p><p>例如针对 NodeDataChanged 事件，ZooKeeper 的Watcher 只会通知客户端指定数据节点的数据内容发生了变更，而对于原始数据以及变更后的新数据都无法从这个事件中直接获取到，而是需要客户端主动重新去获取数据——这也是 ZooKeeper 的 Watcher 机制的一个非常重要的特性。</p><h2 id="2-ZooKeeper分布式锁"><a href="#2-ZooKeeper分布式锁" class="headerlink" title="2. ZooKeeper分布式锁"></a>2. ZooKeeper分布式锁</h2><h3 id="2-1-为什么需要分布式锁"><a href="#2-1-为什么需要分布式锁" class="headerlink" title="2.1 为什么需要分布式锁"></a>2.1 为什么需要分布式锁</h3><p>并发相关的各种锁只能限制当前服务器上只能有一个用户或者线程访问加锁的资源，在单机部署环境下确实是没问题的，但是在有多台服务器的分布式环境下，并发相关的锁就不管用了，Nginx负载均衡将用户请求分到多台服务器上，每台服务器上都会有一个用户能访问到加锁的资源，这样就出现了并发问题，所以为了解决在分布式环境下的并发问题就出现了分布式锁。</p><h3 id="2-2-相关概念"><a href="#2-2-相关概念" class="headerlink" title="2.2 相关概念"></a>2.2 相关概念</h3><h4 id="1-有序节点"><a href="#1-有序节点" class="headerlink" title="1. 有序节点"></a>1. 有序节点</h4><p>如果创建的是有序节点，那么zookeeper在生成子节点时会根据当前的子节点数量自动添加整数序号，也就是说如果是第一个创建的子节点，那么生成的子节点为<code>/locker/node-0000000000</code>，下一个节点则为<code>/locker/node-0000000001</code>，依次类推。</p><h4 id="2-临时节点"><a href="#2-临时节点" class="headerlink" title="2. 临时节点"></a>2. 临时节点</h4><p>ZooKeeper的临时节点时本次会话有效，等客户端执行完业务代码后关闭会话，临时节点就自动删除掉了。</p><h4 id="3-事件监听"><a href="#3-事件监听" class="headerlink" title="3. 事件监听"></a>3. 事件监听</h4><p>在读取数据时，我们可以同时对节点设置事件监听，当节点数据或结构变化时，zookeeper会通知客户端。当前zookeeper有如下四种事件:</p><ul><li>1.节点创建</li><li>2.节点删除</li><li>3.节点数据修改</li><li>4.子节点变更</li></ul><p>就是上一篇文章中讲的watcher。</p><h3 id="2-3-分布式锁"><a href="#2-3-分布式锁" class="headerlink" title="2.3 分布式锁"></a>2.3 分布式锁</h3><h4 id="1-独占锁"><a href="#1-独占锁" class="headerlink" title="1. 独占锁"></a>1. 独占锁</h4><p>对于独占锁，我们可以将资源 R1 看做是 lock 节点，操作 O1 访问资源 R1 看做创建 lock 节点，释放资源 R1 看做删除 lock 节点。这样我们就将独占锁的定义对应于具体的 Zookeeper 节点结构，通过创建 lock 节点获取锁，删除节点释放锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root </span><br><span class="line">-exclusive_locak</span><br><span class="line">---lock</span><br></pre></td></tr></table></figure><p>详细的过程如下： </p><ol><li>多个客户端竞争创建 lock 临时节点</li><li>其中某个客户端成功创建 lock 节点，其他客户端对 lock 节点设置 watcher</li><li>持有锁的客户端删除 lock 节点或该客户端崩溃，会话关闭，由 Zookeeper 删除 lock 节点</li><li>其他客户端获得 lock 节点被删除的通知</li><li>重复上述4个步骤，直至无客户端在等待获取锁了</li></ol><h4 id="2-读写锁"><a href="#2-读写锁" class="headerlink" title="2. 读写锁"></a>2. 读写锁</h4><p>读写锁包含一个读锁和写锁，操作 O1 对资源 R1 加读锁，且获得了锁，其他操作可同时对资源 R1 设置读锁，进行共享读操作。如果操作 O1 对资源 R1 加写锁，且获得了锁，其他操作再对资源 R1 设置不同类型的锁都会被阻塞。总结来说，读锁具有共享性，而写锁具有排他性。 </p><p>在 Zookeeper 中，由于读写锁和独占锁的节点结构不同，读写锁的客户端不用再去竞争创建 lock 节点。所以在一开始，所有的客户端都会创建自己的锁节点。如果不出意外，所有的锁节点都能被创建成功，此时锁节点结构如图3所示。之后，客户端从 Zookeeper 端获取 /share_lock 下所有的子节点，并判断自己能否获取锁。如果客户端创建的是读锁节点，获取锁的条件（满足其中一个即可）如下：</p><ol><li>自己创建的节点序号排在所有其他子节点前面</li><li>自己创建的节点前面无写锁节点</li></ol><p>如果客户端创建的是写锁节点，由于写锁具有排他性。所以获取锁的条件要简单一些，只需确定自己创建的锁节点是否排在其他子节点前面即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root </span><br><span class="line">-share_lock</span><br><span class="line">---host1-R-<span class="number">0000000001</span></span><br><span class="line">---host2-R-<span class="number">0000000002</span></span><br><span class="line">    ---host3-R-<span class="number">0000000003</span></span><br></pre></td></tr></table></figure><p>详细的流程如下：</p><ol><li>所有客户端创建自己的锁节点</li><li>从 Zookeeper 端获取 /share_lock 下所有的子节点</li><li>判断自己创建的锁节点是否可以获取锁，如果可以，持有锁。否则<strong>对自己关心的锁节点设置 watcher</strong></li><li>持有锁的客户端删除自己的锁节点，某个客户端收到该节点被删除的通知，并获取锁</li><li>重复步骤4，直至无客户端在等待获取锁了</li></ol><p><code>host2-R-0000000002</code> 对应的客户端 <code>C2</code> 只需监视 <code>host1-W-0000000001</code> 节点是否被删除即可。而 <code>host3-W-0000000003</code> 对应的客户端 <code>C3</code> 只需监视 <code>host2-R-0000000002</code> 节点是否被删除即可，只有 <code>host2-R-0000000002</code> 节点被删除，客户端 <code>C3</code> 才能获取锁。而 <code>host1-W-0000000001</code> 节点被删除时，产生的通知对于客户端 C3 来说是无用的，即使客户端 C3 响应了通知也没法获取锁。</p><p>这里总结一下，<strong>不同客户端关心的锁节点是不同的。如果客户端创建的是读锁节点，那么客户端只需找出比读锁节点序号小的最后一个的写锁节点，并设置 watcher 即可。而如果是写锁节点，则更简单，客户端仅需对该节点的上一个节点设置 watcher 即可</strong>。</p><h3 id="2-4-例子"><a href="#2-4-例子" class="headerlink" title="2.4 例子"></a>2.4 例子</h3><p>ZooKeeper可以通过依赖于临时节点实现分布式锁。<br>假设有两台服务器 一台8888 一台8889，都部署了同一个web程序。</p><p>此刻同时来了两个请求 一个被分到了8888服务器，一个被分到了8889服务器上。<br>两个请求都要去修改数据库中的User表里的ID 为666的用户的信息(例如都是把age属性+1 假设当前age为22）</p><p><strong>没加锁前</strong>：<br> 用户A查询到age为22 ++后变成23<br> 用户B也查询到是22  ++后也变成23<br> 其中这里两个++后应该变成24的，由于没加锁出现了数据异常</p><p><strong>加锁后</strong> ：<br> 用户A先在ZooKeeper中创建临时有序节点假设为<code>/locker/node-0000000009</code>，创建之后会<code>getChildren</code>查看<code>/locker</code>节点下的所有子节点，如果自己的编号是最小的，说明自己是最先创建的，则获取到了锁，如果不是就等待前面的节点被自动删除(即前面的用户释放了锁)。<br>此时用户B也来访问，也要临时有序节点，假设为<code>/locker/node-00000000010</code>，接着<code>getChildren</code>查看<code>/locker</code>节点下的所有子节点，发现自己不是最小的，那么就会等待在这里。<br> 最终A和B只有一个人能成功创建节点并修改数据，<br>A获取到锁后开始执行业务代码，那么A将age ++后变成23了 然后数据库持久化 8888中的age就是23了 8889中还是22<br> 接着服务器8888和8889之间执行进行数据同步 同步成功后A关闭会话，临时节点失效，锁释放了。</p><p>此时B用户创建的节点是最小的，就获取到了锁，开始执行业务代码，去修改数据 此时获取到age=23  ++后变成了24 持久化后 再次进行8888 8889服务期间进行数据同步。<br> 这样就不会出现数据异常。</p><p> 问题：为什么要用临时节点，创建持久化节点然后执行完后删除不行吗？<br> 答：临时节点性能高</p><h2 id="3-参考"><a href="#3-参考" class="headerlink" title="3. 参考"></a>3. 参考</h2><p><code>https://blog.csdn.net/qiangcuo6087/article/details/79067136</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文讲述了ZooKeeper的watch监听与ZooKeeper分布式锁的实现原理。&lt;/p&gt;
    
    </summary>
    
      <category term="ZooKeeper" scheme="https://www.lixueduan.com/categories/ZooKeeper/"/>
    
    
      <category term="ZooKeeper" scheme="https://www.lixueduan.com/tags/ZooKeeper/"/>
    
  </entry>
  
  <entry>
    <title>ZooKeeper入门教程(二)---原生API与ACL权限认证</title>
    <link href="https://www.lixueduan.com/posts/3ced5d74.html"/>
    <id>https://www.lixueduan.com/posts/3ced5d74.html</id>
    <published>2019-03-02T14:00:00.000Z</published>
    <updated>2019-03-10T02:56:24.003Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录了ZooKeeper原生API的基本使用和ZooKeeper的ACL权限认证说明。</p><a id="more"></a><blockquote><p><strong><a href="https://www.lixueduan.com/categories/ZooKeeper/">ZooKeeper入门系列文章目录</a></strong></p><p><a href="https://www.lixueduan.com/posts/137f5008.html">ZooKeeper入门教程(一)—安装与基本使用</a></p><p><a href="https://www.lixueduan.com/posts/3ced5d74.html">ZooKeeper入门教程(二)—原生API与ACL权限认证</a></p><p><a href="https://www.lixueduan.com/posts/4975d97e.html">ZooKeeper入门教程(三)—Watcher与分布式锁</a></p><p>…..</p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-原生API"><a href="#1-原生API" class="headerlink" title="1. 原生API"></a>1. 原生API</h2><h3 id="1-1-引入依赖"><a href="#1-1-引入依赖" class="headerlink" title="1.1 引入依赖"></a>1.1 引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--zookeeper--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4-beta<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-代码示例"><a href="#1-2-代码示例" class="headerlink" title="1.2 代码示例"></a>1.2 代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> zookeeper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.AsyncCallback;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.CreateMode;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooDefs;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.data.Stat;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZooKeeperBase</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ZooKeeper地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String CONN_ADDR = <span class="string">"192.168.5.154:2181,192.168.5.155:2181,192.168.5.156:2181"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * session超时时间ms</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SESSION_TIMEOUT = <span class="number">5000</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * wait for zk connect</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> CountDownLatch waitZooKeeperConnOne = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> ZooKeeper zooKeeper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * zk客户端</span></span><br><span class="line"><span class="comment">         * 参数1 connectString 连接服务器列表，用逗号分隔</span></span><br><span class="line"><span class="comment">         * 参数2 sessionTimeout 心跳检测时间周期 毫秒</span></span><br><span class="line"><span class="comment">         * 参数3 watcher 事件处理通知器</span></span><br><span class="line"><span class="comment">         * 参数4 canBeReadOnly 标识当前会话是否支持只读</span></span><br><span class="line"><span class="comment">         * 参数5 6 sessionId sessionPassword通过这两个确定唯一一台客户端 目的是提供重复会话</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        zooKeeper = <span class="keyword">new</span> ZooKeeper(CONN_ADDR, SESSION_TIMEOUT, <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent watchedEvent)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//获取事件状态与类型</span></span><br><span class="line">                Event.KeeperState state = watchedEvent.getState();</span><br><span class="line">                Event.EventType type = watchedEvent.getType();</span><br><span class="line">                <span class="comment">//如果是建立连接成功</span></span><br><span class="line">                <span class="keyword">if</span> (Event.KeeperState.SyncConnected == state) &#123;</span><br><span class="line">                    <span class="comment">//刚连接成功什么都没有所以是None</span></span><br><span class="line">                    <span class="keyword">if</span> (Event.EventType.None == type) &#123;</span><br><span class="line">                        <span class="comment">//连接成功则发送信号 让程序继续执行</span></span><br><span class="line">                        waitZooKeeperConnOne.countDown();</span><br><span class="line">                        System.out.println(<span class="string">"ZK 连接成功"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreate</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException, KeeperException </span>&#123;</span><br><span class="line">        waitZooKeeperConnOne.await();</span><br><span class="line">        System.out.println(<span class="string">"zk start"</span>);</span><br><span class="line">        <span class="comment">//创建简介</span></span><br><span class="line">        <span class="comment">// 参数1 key</span></span><br><span class="line">        <span class="comment">// 参数2 value  参数3 一般就是ZooDefs.Ids.OPEN_ACL_UNSAFE</span></span><br><span class="line">        <span class="comment">// 参数4 为节点模式 有临时节点(本次会话有效，分布式锁就是基于临时节点)或者持久化节点</span></span><br><span class="line">        <span class="comment">// 返回值就是path 节点已存在则报错NodeExistsException</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同步方式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数1 path 可以看成是key  原生Api不能递归创建 不能在没父节点的情况下创建子节点的，会抛出异常</span></span><br><span class="line"><span class="comment"> *     框架封装也是通过if一层层判断的 如果父节点没有 就先给你创建出来 这样实现的递归创建</span></span><br><span class="line"><span class="comment"> * 参数2 data 可以看成是value 要求是字节数组 也就是说不支持序列化</span></span><br><span class="line"><span class="comment"> *      如果要序列化可以使用一些序列化框架 Hessian Kryo等</span></span><br><span class="line"><span class="comment"> * 参数3 节点权限 使用ZooDefs.Ids.OPEN_ACL_UNSAFE开放权限即可</span></span><br><span class="line"><span class="comment"> *      在权限没有太高要求的场景下 没必要关注</span></span><br><span class="line"><span class="comment"> * 参数4  节点类型 创建节点的类型 提供了多种类型</span></span><br><span class="line"><span class="comment"> *             CreateMode.PERSISTENT     持久节点</span></span><br><span class="line"><span class="comment"> *             CreateMode.PERSISTENT_SEQUENTIAL  持久顺序节点</span></span><br><span class="line"><span class="comment"> *             CreateMode.EPHEMERAL       临时节点</span></span><br><span class="line"><span class="comment"> *             CreateMode.EPHEMERAL_SEQUENTIAL   临时顺序节点</span></span><br><span class="line"><span class="comment"> *             CreateMode.CONTAINER</span></span><br><span class="line"><span class="comment"> *             CreateMode.PERSISTENT_WITH_TTL</span></span><br><span class="line"><span class="comment"> *             CreateMode.PERSISTENT_SEQUENTIAL_WITH_TTL</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//        String s = zooKeeper.create("/illusory", "test".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span></span><br><span class="line">        <span class="comment">//illusory</span></span><br><span class="line"><span class="comment">//        System.out.println(s);</span></span><br><span class="line">        <span class="comment">//原生Api不能递归创建 不能在没父节点的情况下创建子节点的</span></span><br><span class="line">        <span class="comment">//框架封装也是同过if判断的 如果父节点没有 就先给你创建出来 这样实现的递归创建</span></span><br><span class="line"><span class="comment">//        zooKeeper.create("/illusory/testz/zzz", "testzz".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span></span><br><span class="line"><span class="comment">//        System.out.println();</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异步方式</span></span><br><span class="line"><span class="comment"> * 在同步基础上多加两个参数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数5 注册一个回调函数 要实现AsyncCallback.Create2Callback()重写processResult(int rx, String path, Object ctx, String name, Stat stat)方法</span></span><br><span class="line"><span class="comment"> *   processResult参数1  int rx为服务端响应码 0表示调用成功 -4表示端口连接 -110表示指定节点存在 -112表示会话已过期</span></span><br><span class="line"><span class="comment"> *                参数2 String path 节点调用时传入Api的数据节点路径</span></span><br><span class="line"><span class="comment"> *                参数3 Object ctx 调用接口时传入的ctx值</span></span><br><span class="line"><span class="comment"> *                参数4 String name 实际在服务器创建节点的名称</span></span><br><span class="line"><span class="comment"> *                参数5 Stat stat 被创建的那个节点信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">        zooKeeper.create(<span class="string">"/illusory/testz/zzz/zzz/aa"</span>, <span class="string">"testzz"</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT</span><br><span class="line">                , (rc, path, ctx, name, stat) -&gt; &#123;</span><br><span class="line">                    System.out.println(stat.getAversion());</span><br><span class="line">                    System.out.println(rc);</span><br><span class="line">                    System.out.println(path);</span><br><span class="line">                    System.out.println(ctx);</span><br><span class="line">                &#125;, <span class="string">"s"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"继续执行"</span>);</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] data = zooKeeper.getData(<span class="string">"/illusory"</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(data));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">        waitZooKeeperConnOne.await();</span><br><span class="line"><span class="comment">//        zooKeeper.create("/illusory","root".getBytes(),ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span></span><br><span class="line"><span class="comment">//        zooKeeper.create("/illusory/aaa","aaa".getBytes(),ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span></span><br><span class="line"><span class="comment">//        zooKeeper.create("/illusory/bbb","aaa".getBytes(),ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span></span><br><span class="line"><span class="comment">//        zooKeeper.create("/illusory/ccc","aaa".getBytes(),ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span></span><br><span class="line">        <span class="comment">//不支持递归 只能取下面的一层</span></span><br><span class="line">        List&lt;String&gt; children = zooKeeper.getChildren(<span class="string">"/illusory"</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : children) &#123;</span><br><span class="line">            <span class="comment">//拼接绝对路径</span></span><br><span class="line">            String realPath = <span class="string">"/illusory/"</span> + s;</span><br><span class="line">            <span class="keyword">byte</span>[] data = zooKeeper.getData(realPath, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(data));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSet</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">        waitZooKeeperConnOne.await();</span><br><span class="line">        zooKeeper.setData(<span class="string">"/illusory/aaa"</span>, <span class="string">"new AAA"</span>.getBytes(), -<span class="number">1</span>);</span><br><span class="line">        zooKeeper.setData(<span class="string">"/illusory/bbb"</span>, <span class="string">"new BBB"</span>.getBytes(), -<span class="number">1</span>);</span><br><span class="line">        zooKeeper.setData(<span class="string">"/illusory/ccc"</span>, <span class="string">"new CCC"</span>.getBytes(), -<span class="number">1</span>);</span><br><span class="line">        testGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">        waitZooKeeperConnOne.await();</span><br><span class="line">        zooKeeper.delete(<span class="string">"/illusory/aaa"</span>, -<span class="number">1</span>);</span><br><span class="line">        testGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExists</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">        waitZooKeeperConnOne.await();</span><br><span class="line">        <span class="comment">//判断节点是否存在 没有就是null 有的话会返回一长串12884901923,12884901933,1552027900801,1552028204414,1,0,0,0,7,0,12884901923</span></span><br><span class="line">        Stat exists = zooKeeper.exists(<span class="string">"/illusory/bbb"</span>, <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(exists);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-ACL权限认证"><a href="#2-ACL权限认证" class="headerlink" title="2. ACL权限认证"></a>2. ACL权限认证</h2><h3 id="2-1-为什么需要ACL"><a href="#2-1-为什么需要ACL" class="headerlink" title="2.1 为什么需要ACL"></a>2.1 为什么需要ACL</h3><p>简单来说 :在通常情况下,zookeeper允许未经授权的访问,因此在安全漏洞扫 描中暴漏未授权访问漏洞。<br> 这在一些监控很严的系统中是不被允许的,所以需要ACL来控制权限.</p><h3 id="2-2-Zookeeper权限分类"><a href="#2-2-Zookeeper权限分类" class="headerlink" title="2.2 Zookeeper权限分类"></a>2.2 Zookeeper权限分类</h3><p> 权限包括以下几种:</p><ul><li><p><strong>CREATE</strong>: 能创建子节点</p></li><li><p><strong>READ</strong>：能获取节点数据和列出其子节点</p></li><li><strong>WRITE</strong>: 能设置节点数据</li><li><strong>DELETE</strong>: 能删除子节点</li><li><strong>ADMIN</strong>: 能设置权限</li></ul><h3 id="2-3-zookeeper认证方式"><a href="#2-3-zookeeper认证方式" class="headerlink" title="2.3 zookeeper认证方式"></a>2.3 zookeeper认证方式</h3><ul><li><strong>world</strong>：默认方式，相当于全世界都能访问</li><li><strong>auth</strong>：代表已经认证通过的用户(cli中可以通过addauth digest user:pwd 来添加当前上下文中的授权用户)</li><li><strong>digest</strong>：即用户名:密码这种方式认证，这也是业务系统中最常用的</li><li><strong>ip</strong>：使用IP地址认证</li></ul><p>一般常用的是<code>digest</code>或者<code>ip</code>这两种。</p><h3 id="2-4-代码示例"><a href="#2-4-代码示例" class="headerlink" title="2.4 代码示例"></a>2.4 代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAuth</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException, IOException </span>&#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 测试路径</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">final</span> String Path = <span class="string">"/testAuth"</span>;</span><br><span class="line">     <span class="keyword">final</span> String pathDel = <span class="string">"/testAuth/delNode"</span>;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 认证类型</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">final</span> String authType = <span class="string">"digest"</span>;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 正确的key</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">final</span> String rightAuth = <span class="string">"123456"</span>;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 错误的key</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">final</span> String badAuth = <span class="string">"654321"</span>;</span><br><span class="line">     ZooKeeper z1 = <span class="keyword">new</span> ZooKeeper(CONN_ADDR, SESSION_TIMEOUT, <span class="keyword">null</span>);</span><br><span class="line">     </span><br><span class="line">     <span class="comment">//添加认证信息 类型和key   以后执行操作时必须带上一个相同的key才行</span></span><br><span class="line">     z1.addAuthInfo(authType, rightAuth.getBytes());</span><br><span class="line">     <span class="comment">//把所有的权限放入集合中，这样不管操作什么权限的节点都需要认证才行</span></span><br><span class="line">     List&lt;ACL&gt; acls = <span class="keyword">new</span> ArrayList&lt;&gt;(ZooDefs.Ids.CREATOR_ALL_ACL);</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         zooKeeper.create(Path, <span class="string">"xxx"</span>.getBytes(), acls, CreateMode.PERSISTENT);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         System.out.println(<span class="string">"创建节点，抛出异常： "</span> + e.getMessage());</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">     ZooKeeper z2 = <span class="keyword">new</span> ZooKeeper(CONN_ADDR, SESSION_TIMEOUT, <span class="keyword">null</span>);</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 未授权</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//未授权客户端操作时抛出异常</span></span><br><span class="line">         <span class="comment">//NoAuthException: KeeperErrorCode = NoAuth for /testAuth</span></span><br><span class="line">         z2.getData(Path, <span class="keyword">false</span>, <span class="keyword">new</span> Stat());</span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         System.out.println(<span class="string">"未授权：操作失败，抛出异常： "</span> + e.getMessage());</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 错误授权信息</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">         ZooKeeper z3 = <span class="keyword">new</span> ZooKeeper(CONN_ADDR, SESSION_TIMEOUT, <span class="keyword">null</span>);</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//添加错误授权信息后再次执行</span></span><br><span class="line">         z3.addAuthInfo(authType, badAuth.getBytes());</span><br><span class="line">         <span class="comment">//NoAuthException: KeeperErrorCode = NoAuth for /testAuth</span></span><br><span class="line">         z3.getData(Path, <span class="keyword">false</span>, <span class="keyword">new</span> Stat());</span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         System.out.println(<span class="string">"错误授权信息：操作失败，抛出异常： "</span> + e.getMessage());</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 正确授权信息</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     ZooKeeper z4 = <span class="keyword">new</span> ZooKeeper(CONN_ADDR, SESSION_TIMEOUT, <span class="keyword">null</span>);</span><br><span class="line">     <span class="comment">//添加正确授权信息后再次执行</span></span><br><span class="line">     z4.addAuthInfo(authType, rightAuth.getBytes());</span><br><span class="line">     <span class="keyword">byte</span>[] data = z4.getData(Path, <span class="keyword">false</span>, <span class="keyword">new</span> Stat());</span><br><span class="line">     System.out.println(<span class="string">"正确授权信息：再次操作成功获取到数据："</span> + <span class="keyword">new</span> String(data));</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="3-参考"><a href="#3-参考" class="headerlink" title="3. 参考"></a>3. 参考</h2><p><code>https://mulingya.iteye.com/blog/2425990</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录了ZooKeeper原生API的基本使用和ZooKeeper的ACL权限认证说明。&lt;/p&gt;
    
    </summary>
    
      <category term="ZooKeeper" scheme="https://www.lixueduan.com/categories/ZooKeeper/"/>
    
    
      <category term="ZooKeeper" scheme="https://www.lixueduan.com/tags/ZooKeeper/"/>
    
  </entry>
  
  <entry>
    <title>ZooKeeper入门教程(一)---安装与基本使用</title>
    <link href="https://www.lixueduan.com/posts/137f5008.html"/>
    <id>https://www.lixueduan.com/posts/137f5008.html</id>
    <published>2019-03-01T14:00:00.000Z</published>
    <updated>2019-03-10T02:56:06.233Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要对ZooKeeper做了简要介绍包括设计目标、服务组成、应用场景等，同时记录了Linux下安装ZooKeeper的详细过程，最后还包括了ZooKeeper的基本使用方法。</p><a id="more"></a><blockquote><p><strong><a href="https://www.lixueduan.com/categories/ZooKeeper/">ZooKeeper入门系列文章目录</a></strong></p><p><a href="https://www.lixueduan.com/posts/137f5008.html">ZooKeeper入门教程(一)—安装与基本使用</a></p><p><a href="https://www.lixueduan.com/posts/3ced5d74.html">ZooKeeper入门教程(二)—原生API与ACL权限认证</a></p><p><a href="https://www.lixueduan.com/posts/4975d97e.html">ZooKeeper入门教程(三)—Watcher与分布式锁</a></p><p>…..</p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。</p><p>ZooKeeper的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。</p><p>ZooKeeper包含一个简单的原语集， 提供Java和C的接口。</p><h3 id="1-设计目标"><a href="#1-设计目标" class="headerlink" title="1. 设计目标"></a>1. 设计目标</h3><ul><li>1.简单的数据结构，Zookeeper就是以简单的树形结构来进行相互协调的</li><li>2.可以构建集群，只要集群中超过半数的机器能正常工作，整个集群就能正常对外提供服务。</li><li>3.顺序访问，对于每个客户端的每个请求，zk都会分配一个全局唯一的递增编号，这个编号反应了所有事务操作的先后顺序</li><li>4.高性能，全量数据保存在内存中，并直接服务于所有的非事务请求</li></ul><h3 id="2-服务组成"><a href="#2-服务组成" class="headerlink" title="2. 服务组成"></a>2. 服务组成</h3><p>ZKServer根据身份特性分为三种</p><ul><li>Leader，负责客户端的write类型请求</li><li>Follower,负责客户端的read类型请求</li><li>Observer，特殊的Follower，可以接受客户端的read氢气球，但不参加选举</li></ul><h3 id="3-应用场景"><a href="#3-应用场景" class="headerlink" title="3. 应用场景"></a>3. 应用场景</h3><p>Hadoop、Storm、消息中间件、RPC服务框架、数据库增量订阅与消费组件(MySQL Binlog)、分布式数据库同步系统、淘宝的Otter。</p><p>zookeeper的特性就是在分布式场景下高可用，但是原生的API实现分布式功能非 常困难，团队去实现也太浪费时间，即使实现了也未必稳定。那么可以采用第三方的 客户端的完美实现，比如Curator框架，他是Apache的顶级项目。</p><h4 id="1-配置管理"><a href="#1-配置管理" class="headerlink" title="1. 配置管理"></a>1. 配置管理</h4><p>配置的管理在分布式应用环境中很常见，比如我们在平常的应用系统<br>中，经常会碰到这样的求：如机器的配置列表、运行时的开关配罝、数据库配罝信<br>息等。这些全局配置信息通常具备以下3个特性：<br>1数据量比较小。<br>2数据内容在运行时动态发生变化。<br>3集群中各个集群共享信息，配置一致。</p><h4 id="2-集群管理"><a href="#2-集群管理" class="headerlink" title="2. 集群管理"></a>2. 集群管理</h4><p>Zookeeper不仅能够帮你维护当前的集群中机器的服务状态，而且能<br>够帮你选出一个“总管”，让这个总管来管理集群，这就是Zookeeper的另一个功能<br>Leader，并实现集群容错功能。<br>1希望知道当前集群中宄竞有多少机器工作。<br>2对集群中每天集群的运行时状态进行数据收集。<br>3对集群中每台集群进行上下线操作。</p><h4 id="3-发布与订阅"><a href="#3-发布与订阅" class="headerlink" title="3.发布与订阅"></a>3.发布与订阅</h4><p>Zookeeper是一个典型的发布/订阅模式的分布式数控管理与协调框<br>架，开发人员可以使用它来进行分布式数据的发布与订阅。</p><h4 id="4-数据库切换"><a href="#4-数据库切换" class="headerlink" title="4. 数据库切换"></a>4. 数据库切换</h4><p>比如我们初始化zookeeper的时候读取其节点上的数据库配置文件,<br>当ES—旦发生变更时，zookeeper就能帮助我们把变更的通知发送到各个客户端，<br>每个了互动在接收到这个变更通知后，就可以从新进行最新数据的获取。</p><h4 id="5-分布式日志的收集"><a href="#5-分布式日志的收集" class="headerlink" title="5. 分布式日志的收集"></a>5. 分布式日志的收集</h4><p>我们可以做一个日志系统收集集群中所有的日志信息，进行统 一管理。</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><p>注：Zookeeper集群最低需要3个节点，同时要求服务器间时间保持一致。</p><h3 id="2-1-下载"><a href="#2-1-下载" class="headerlink" title="2.1 下载"></a>2.1 下载</h3><p>官网：<code>https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/</code></p><p>这里下载的是<code>zookeeper-3.4.13.tar.gz</code></p><p>下载后上传到服务器上，习惯放在<code>/usr/software</code>目录下</p><h3 id="2-2-解压"><a href="#2-2-解压" class="headerlink" title="2.2 解压"></a>2.2 解压</h3><p>将Zookeeper解压到<code>/usr/local</code>目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost software]# tar -zxvf zookeeper-3.4.13.tar.gz  -C /usr/local/</span><br></pre></td></tr></table></figure><p>改个名字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost local]# mv zookeeper-3.4.13/ zookeeper</span><br></pre></td></tr></table></figure><h3 id="2-3-配置环境变量"><a href="#2-3-配置环境变量" class="headerlink" title="2.3 配置环境变量"></a>2.3 配置环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost etc]# vim /etc/profile</span><br></pre></td></tr></table></figure><p>添加如下内容：目录按照自己的目录写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ZOOKEEPER_HOME=/usr/local/zookeeper</span><br><span class="line">export PATH=$PATH:$ZOOKEEPER_HOME/bin</span><br></pre></td></tr></table></figure><p>刷新使其生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost etc]# source /etc/profile</span><br></pre></td></tr></table></figure><h3 id="2-4-修改配置文件"><a href="#2-4-修改配置文件" class="headerlink" title="2.4 修改配置文件"></a>2.4 修改配置文件</h3><p>ZooKeeper配置文件在<code>/usr/local/zookeeper/conf/zoo_sample.cfg</code></p><p>首先修改一下名字，改成<code>zoo.cfg</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# mv zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure><p>然后修改配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# vim zoo.cfg</span><br></pre></td></tr></table></figure><p>主要修改如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 保存数据的地方</span></span><br><span class="line">dataDir=/usr/local/zookeeper/data</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">文件末尾添加下面这些配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash">server.0 IP </span></span><br><span class="line">server.0 192.168.1.111:2888:3888</span><br><span class="line">server.1 192.168.1.112:2888:3888</span><br><span class="line">server.2 192.168.1.113:2888:3888</span><br></pre></td></tr></table></figure><h3 id="2-5-配置myid"><a href="#2-5-配置myid" class="headerlink" title="2.5 配置myid"></a>2.5 配置myid</h3><p>然后创建一下上面配置的<code>/usr/local/zookeeper/data</code>目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost zookeeper]# mkdir data</span><br></pre></td></tr></table></figure><p>接着在<code>/usr/local/zookeeper/data</code>目录下创建一个叫<code>myid</code>的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost data]# vim myid</span><br></pre></td></tr></table></figure><p>分别写入一个数字，和上面配置的<code>server.0 192.168.1.111:2888:3888</code>这个对应上。</p><p>即</p><p><code>192.168.1.111</code>上的<code>myid</code>中写入一个数字<code>0</code></p><p><code>192.168.1.112</code>上的<code>myid</code>中写入一个数字<code>1</code></p><p><code>192.168.1.113</code>上的<code>myid</code>中写入一个数字<code>2</code></p><h3 id="2-6-配置详解"><a href="#2-6-配置详解" class="headerlink" title="2.6 配置详解"></a>2.6 配置详解</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">tickTinte： 基本事件服务器之间或客户端与服务器之间维持心跣的时间间隔</span><br><span class="line"></span><br><span class="line">dataDiri：存储内存中数据库快照的位置，顾名思义就是Zookeeper保存数据的目录，默认情況下，Zookeeper将写数据的日志文件也保存在这个目录里，</span><br><span class="line"></span><br><span class="line">clientPorti：这个端口就是客户端连接Zookeeper服务器的端口，Zookeeper会监听这个雄口，接受客户端的访间请求。</span><br><span class="line"></span><br><span class="line">initLimit： 这个配置表示ZooKeeper最大能接受多少个心跳时间间隔，当超过后最大次数后还没收到客户端信息，表明客户端连接失败</span><br><span class="line"></span><br><span class="line">syncLiniiti ：这个配置表明Leader和Follower之间发送消息，请求和应答时间长度，最长不能超多多少个tickTinte</span><br><span class="line"></span><br><span class="line">server.A = B：C：D</span><br><span class="line">A：表示这个是第几号服务器，myid中的数字就是这个</span><br><span class="line">B：这个服务器的IP</span><br><span class="line">C：与集群中的leader交换信息的端口</span><br><span class="line">D：集群中的leader挂了，需要一个端口用来进行选举，选出一个新的leader</span><br></pre></td></tr></table></figure><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h2><h3 id="1-启动"><a href="#1-启动" class="headerlink" title="1. 启动"></a>1. 启动</h3><p>到这里Zookeeper就算配置完成了,可以启动了。</p><p>进入<code>/usr/local/zookeeper/bin</code>目录，可以看到里面有很多脚本文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# ls</span><br><span class="line">README.txt  zkCleanup.sh  zkCli.cmd  zkCli.sh  zkEnv.cmd  zkEnv.sh  zkServer.cmd  zkServer.sh  zkTxnLogToolkit.cmd  zkTxnLogToolkit.sh</span><br></pre></td></tr></table></figure><p>其中<code>zkServer.sh</code>就是服务端操作相关脚本，<code>zkCli.sh</code>这个就是客户端。</p><p>前面配置了环境变量，所以在哪里都可以使用这些脚本，不用非得进到这个文件夹。</p><p>启动服务端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# zkServer.sh start</span><br></pre></td></tr></table></figure><p>查看Zookeeper状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost data]# zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/local/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Mode: leader</span><br></pre></td></tr></table></figure><p>可以已经启动了，而且这是一个<code>leader</code>节点。那么其他两个节点就是<code>follower</code>了。</p><p><strong>问题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error contacting service. It is probably not running.</span><br></pre></td></tr></table></figure><p><strong>解决</strong></p><p>1.<strong>可能是防火墙问题，关闭防火墙</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">临时关闭: systemctl stop firewalld</span><br><span class="line">开机禁用(需要重启生效):systemctl disable firewalld</span><br></pre></td></tr></table></figure><p>2.<strong>myid配置错了，这个必须和配置文件对应上，必须放在配置的那个文件夹下</strong></p><h3 id="2-进入客户端"><a href="#2-进入客户端" class="headerlink" title="2. 进入客户端"></a>2. 进入客户端</h3><p>可以通过shell操作zookeeper,首先进入客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost data]# zkCli.sh</span><br></pre></td></tr></table></figure><p>windows下的可视化工具ZooInspector</p><p>下载地址<code>https://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip</code></p><p>解压后build目录下有个jar包，cmd命令行中通过命令<code>java -jar zookeeper-dev-ZooInspector.jar</code>运行</p><p>idea下也有zookeeper插件。</p><p>常用操作：</p><h3 id="3-查询节点"><a href="#3-查询节点" class="headerlink" title="3. 查询节点"></a>3. 查询节点</h3><p><code>ls path</code>  ZK是一个树形结构 刚创建是跟目录下有个zookeeper节点，zookeeper节点下有个quoat节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 0] ls /</span><br><span class="line">[zookeeper]</span><br><span class="line">[zk: localhost:2181(CONNECTED) 2] ls /zookeeper</span><br><span class="line">[quota]</span><br></pre></td></tr></table></figure><h3 id="4-创建节点"><a href="#4-创建节点" class="headerlink" title="4. 创建节点"></a>4. 创建节点</h3><p><code>create path value</code>  创建节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 5] create /illusory redis</span><br><span class="line">Created /illusory</span><br></pre></td></tr></table></figure><h3 id="5-get-set"><a href="#5-get-set" class="headerlink" title="5. get/set"></a>5. get/set</h3><p><code>get path</code>获取值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 6] get /illusory</span><br><span class="line"><span class="meta">#</span><span class="bash"> 值</span></span><br><span class="line">redis</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这个ID就是前面说的那个ID Zk会为所有客户端的每一次操作生成一个全局唯一的ID</span></span><br><span class="line">cZxid = 0x100000003</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建时间</span></span><br><span class="line">ctime = Thu Mar 07 23:18:12 CST 2019</span><br><span class="line">mZxid = 0x100000003</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改时间</span></span><br><span class="line">mtime = Thu Mar 07 23:18:12 CST 2019</span><br><span class="line">pZxid = 0x100000003</span><br><span class="line">cversion = 0</span><br><span class="line"><span class="meta">#</span><span class="bash">数据版本号 每次修改后都会加1</span></span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 5</span><br><span class="line"><span class="meta">#</span><span class="bash"> 孩子 子节点</span></span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure><p><code>set path</code> 设置值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 7] set /illusory mysql</span><br><span class="line">cZxid = 0x100000003</span><br><span class="line">ctime = Thu Mar 07 23:18:12 CST 2019</span><br><span class="line">mZxid = 0x100000004</span><br><span class="line">mtime = Thu Mar 07 23:24:10 CST 2019</span><br><span class="line">pZxid = 0x100000003</span><br><span class="line">cversion = 0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以看到 改变后也加1了</span></span><br><span class="line">dataVersion = 1</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 5</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure><h3 id="6-删除"><a href="#6-删除" class="headerlink" title="6. 删除"></a>6. 删除</h3><p><code>delete path</code> 只能删除子节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 9] create /illusory/cloud nginx</span><br><span class="line">Created /illusory/cloud</span><br><span class="line">[zk: localhost:2181(CONNECTED) 11] ls /illusory</span><br><span class="line">[cloud]</span><br><span class="line">[zk: localhost:2181(CONNECTED) 12] delete /illusory</span><br><span class="line">Node not empty: /illusory</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除子节点成功</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 13] delete /illusory/cloud</span><br></pre></td></tr></table></figure><p><code>rmr path</code>  递归删除父节点也可以删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 15] ls /illusory</span><br><span class="line">[cloud]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 递归删除</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 16] rmr /illusory</span><br></pre></td></tr></table></figure><p>所有命令列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ZooKeeper -server host:port cmd args</span><br><span class="line">stat path [watch]</span><br><span class="line">set path data [version]</span><br><span class="line">ls path [watch]</span><br><span class="line">delquota [-n|-b] path</span><br><span class="line">ls2 path [watch]</span><br><span class="line">setAcl path acl</span><br><span class="line">setquota -n|-b val path</span><br><span class="line">history </span><br><span class="line">redo cmdno</span><br><span class="line">printwatches on|off</span><br><span class="line">delete path [version]</span><br><span class="line">sync path</span><br><span class="line">listquota path</span><br><span class="line">rmr path</span><br><span class="line">get path [watch]</span><br><span class="line">create [-s] [-e] path data acl</span><br><span class="line">addauth scheme auth</span><br><span class="line">quit </span><br><span class="line">getAcl path</span><br><span class="line">close </span><br><span class="line">connect host:port</span><br></pre></td></tr></table></figure><h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h2><p><code>https://www.cnblogs.com/lsdb/p/7297731.html</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要对ZooKeeper做了简要介绍包括设计目标、服务组成、应用场景等，同时记录了Linux下安装ZooKeeper的详细过程，最后还包括了ZooKeeper的基本使用方法。&lt;/p&gt;
    
    </summary>
    
      <category term="ZooKeeper" scheme="https://www.lixueduan.com/categories/ZooKeeper/"/>
    
    
      <category term="ZooKeeper" scheme="https://www.lixueduan.com/tags/ZooKeeper/"/>
    
  </entry>
  
</feed>
