<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redis on 幻境云图</title>
    <link>https://www.lixueduan.com/categories/Redis/</link>
    <description>Recent content in Redis on 幻境云图</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 15 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.lixueduan.com/categories/Redis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redis文件事件</title>
      <link>https://www.lixueduan.com/post/%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0/Redis%E6%96%87%E4%BB%B6%E4%BA%8B%E4%BB%B6/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.lixueduan.com/post/%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0/Redis%E6%96%87%E4%BB%B6%E4%BA%8B%E4%BB%B6/</guid>
      <description>Redis文件事件 1. 概述 Redis 基于 Reactor 模式开发了自己的网络事件处理器： 这个处理器被称为文件事件处理器(file event handler)： 文件事件处理器使用 I/O 多路复用（multiplexing）程序来同时监听多个套接字， 并根据套接字目前执行的任务来为套接字关联不同的事件处理器。 当被监听的套接字</description>
    </item>
    
    <item>
      <title>Redis持久化方式</title>
      <link>https://www.lixueduan.com/post/%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0/Redis%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/</link>
      <pubDate>Fri, 13 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.lixueduan.com/post/%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0/Redis%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/</guid>
      <description>Redis数据持久化 1. 概述 由于Redis是内存数据库，所有数据都存储在内存里，如果不想办法持久化到磁盘上,那么服务器一旦退出，所有数据都会消失。 为了解决这个问题Redis提供了RDB和AOF两种持久化功能。 2. RDB 思路：备份时生成RDB(快照)文件,恢复时直接加载到内存中。 服务器在加</description>
    </item>
    
    <item>
      <title>Redis内存淘汰机制</title>
      <link>https://www.lixueduan.com/post/%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0/Redis%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Wed, 11 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.lixueduan.com/post/%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0/Redis%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0%E6%9C%BA%E5%88%B6/</guid>
      <description>Redis 内存淘汰机制 1. 过期策略 内存淘汰机制前需要先了解一下Redis的过期策略。 Redis的过期策略，是有定期删除+惰性删除两种。 定期好理解，默认100ms就随机抽一些设置了过期时间的key，去检查是否过期，过期了就删了。 **为啥不扫描全部设置了过期时间的key呢？ ** 假如Redis里面</description>
    </item>
    
    <item>
      <title>Redis命令执行流程</title>
      <link>https://www.lixueduan.com/post/%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0/Redis%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Mon, 09 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.lixueduan.com/post/%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0/Redis%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</guid>
      <description>Redis服务器 1. 概述 Redis 命令请求的执行过程 一个命令请求从发送到获得回复的过程中， 客户端和服务器需要完成一系列操作。 举个例子， 如果我们使用客户端执行以下命令： 1 2 redis&amp;gt; SET KEY VALUE OK 那么从客户端发送 SET KEY VALUE 命令到获得回复 OK 期间， 客户端和服务器共需要执行以下操作： 客户端向服务器发送命令请求 SET KEY VALUE</description>
    </item>
    
    <item>
      <title>Redis单机数据库</title>
      <link>https://www.lixueduan.com/post/%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0/Redis%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.lixueduan.com/post/%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0/Redis%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0/</guid>
      <description>Redis单机数据库实现 1. 概述 Redis服务器中的所有数据库都保存在服务器状态redis.h/redisServer结构的db数组中，服务器初始化时会根据dbnum创建多个数据库，默认是16个 1 2 3 4 5 6 7 8 struct redisServer { // ... //一个数组 保存着服务器中的所有数据库 redisDb *db // ... // 服务器数量 int dbnum</description>
    </item>
    
    <item>
      <title>Redis 持久化</title>
      <link>https://www.lixueduan.com/post/%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0/Redis%E6%8C%81%E4%B9%85%E5%8C%96%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 05 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.lixueduan.com/post/%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0/Redis%E6%8C%81%E4%B9%85%E5%8C%96%E5%AE%9E%E7%8E%B0/</guid>
      <description>Redis持久化实现 1. RDB rdb自动触发是如何实现的? 首先需要用户在配置文件redis.conf中设定相关配置。 1 2 3 save 900 1 save 300 10 save 60 10000 只要满足三个中的一个就会触发。 1).900秒内至少进行了1次修改 2).300秒内至少进行了10次修改 3).60秒内至少进行了10000次修改 1. 配置</description>
    </item>
    
    <item>
      <title>Redis Server</title>
      <link>https://www.lixueduan.com/post/%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0/RedisServer/</link>
      <pubDate>Tue, 03 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.lixueduan.com/post/%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0/RedisServer/</guid>
      <description>Redis服务器 1. 概述 Redis 命令请求的执行过程 一个命令请求从发送到获得回复的过程中， 客户端和服务器需要完成一系列操作。 举个例子， 如果我们使用客户端执行以下命令： 1 2 redis&amp;gt; SET KEY VALUE OK 那么从客户端发送 SET KEY VALUE 命令到获得回复 OK 期间， 客户端和服务器共需要执行以下操作： 客户端向服务器发送命令请求 SET KEY VALUE</description>
    </item>
    
    <item>
      <title>Redis Client</title>
      <link>https://www.lixueduan.com/post/%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0/RedisClient/</link>
      <pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.lixueduan.com/post/%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0/RedisClient/</guid>
      <description>Redis客户端 1. 概述 redis服务器中通过链表来存储所有客户端的状态 1 2 3 4 5 6 7 struct redisServer { //... //一个链表 保存了所有客户端状态 list *clients; //... }; 2. 客户端状态 客户端状态包含的属性可以分为两类： 一类是比较通用的属性， 这些属性很少与特定功能相关， 无论客户端执行的是什么工作， 它们都要用到这些属性。 另</description>
    </item>
    
  </channel>
</rss>