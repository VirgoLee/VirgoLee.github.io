<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>幻境云图</title>
  
  <subtitle>勿在浮沙筑高台</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.lixueduan.com/"/>
  <updated>2019-02-22T14:51:15.076Z</updated>
  <id>https://www.lixueduan.com/</id>
  
  <author>
    <name>illusoryCloud</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>idea下打包SpringBoot项目并部署到Linux服务器</title>
    <link href="https://www.lixueduan.com/posts/144a69f9.html"/>
    <id>https://www.lixueduan.com/posts/144a69f9.html</id>
    <published>2019-02-22T14:00:00.000Z</published>
    <updated>2019-02-22T14:51:15.076Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录了如何在idea下打包SpringBoot项目并部署到云服务器，包括jar包和war包两种方式。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h2><p>首先简单创建一个<code>hello word</code></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单的controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusoryCloud</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello illusoryCloud"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringBoot启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusoryCloud</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HelloApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-打包"><a href="#2-打包" class="headerlink" title="2. 打包"></a>2. 打包</h2><h3 id="2-1-jar包和war包区别"><a href="#2-1-jar包和war包区别" class="headerlink" title="2.1 jar包和war包区别"></a>2.1 jar包和war包区别</h3><ul><li>SpringBoot默认支持很多模板引擎，但是JSP只能够在War中使用</li><li>无论是Jar还是War都能够使用嵌套容器，<code>java -jar</code>来独立运行</li><li>但只有war才能部署到外部容器中</li></ul><h3 id="2-2-jar包"><a href="#2-2-jar包" class="headerlink" title="2.2 jar包"></a>2.2 jar包</h3><p><strong>SpringBoot官方推荐打成jar包，服务器上有<code>JDK 1.8</code>以上环境就可以直接运行</strong></p><h4 id="1-修改pom-xml文件"><a href="#1-修改pom-xml文件" class="headerlink" title="1.修改pom.xml文件"></a>1.修改pom.xml文件</h4><p>选择打包方式为jar</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.illusory<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span>    <span class="comment">&lt;!--版本号--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">name</span>&gt;</span>    <span class="comment">&lt;!--打出来的包的名字 hello-0.0.1-SNAPSHOT.jar--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span>    <span class="comment">&lt;!--打包方式jar/war--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-打包-1"><a href="#2-打包-1" class="headerlink" title="2. 打包"></a>2. 打包</h4><p>然后用maven打包。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/springboot/project-package.png" alt="SpringBoot打包"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[INFO] --- maven-jar-plugin:<span class="number">3.1</span>.1:jar (<span class="keyword">default</span>-jar) @ hello ---</span><br><span class="line">[INFO] Building jar: D:\lillusory\MyProjects\hello\target\hello-<span class="number">0.0</span>.1-SNAPSHOT.jar</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- spring-boot-maven-plugin:<span class="number">2.1</span>.3.RELEASE:repackage (repackage) @ hello ---</span><br><span class="line">[INFO] Replacing main artifact with repackaged archive</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  <span class="number">23.922</span> s</span><br><span class="line">[INFO] Finished at: <span class="number">2019</span>-<span class="number">02</span>-<span class="number">22</span>T20:<span class="number">35</span>:<span class="number">40</span>+<span class="number">08</span>:<span class="number">00</span></span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>日志中可以看到打出来的包在<code>D:\lillusory\MyProjects\hello\target\hello-0.0.1-SNAPSHOT.jar</code></p><h4 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h4><p>SpringBoot内置了一个Tomcat，可以直接<code>java -jar jarName</code>运行。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/springboot/jar-run.png" alt=""></p><p>浏览器访问<code>http://localhost:8080/hello</code>出现<code>hello illusoryCloud</code>说明运行起来了。</p><p>这里的端口号是<code>application.yml</code>全局配置文件中配置的端口号。</p><h3 id="2-3-war包"><a href="#2-3-war包" class="headerlink" title="2.3 war包"></a>2.3 war包</h3><p>同时也可以打成war包然后用服务器上的Tomcat启动。</p><h4 id="1-修改pom-xml"><a href="#1-修改pom-xml" class="headerlink" title="1.修改pom.xml"></a>1.修改pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.illusory<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span>    <span class="comment">&lt;!--版本号--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">name</span>&gt;</span>    <span class="comment">&lt;!--打出来的包的名字 hello-0.0.1-SNAPSHOT.jar--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span>    <span class="comment">&lt;!--打包方式jar/war--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--外置tomcat启动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>maven中的<code>&lt;scope&gt;provided&lt;/scope&gt;</code>表示这个jar包在编译测试等地方是需要的，但是打包不会一起打包进去，这也避免了此类构件当部署到目标容器后产生包依赖冲突</strong>。由于SpringBoot内置了Tomcat所以这里需要重新配置一下，防止冲突。</p><h4 id="2-改造启动类"><a href="#2-改造启动类" class="headerlink" title="2.改造启动类"></a>2.改造启动类</h4><p><strong>SpringBoot 内置的Tomcat能认识自己的启动项,而外部tomcat是不认识的</strong></p><p>所以需要修改启动类。即继承<code>SpringBootServletInitializer</code>类实现<code>configure</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringBoot启动类</span></span><br><span class="line"><span class="comment"> * 打成war包时需要改造 继承SpringBootServletInitializer实现configure方法</span></span><br><span class="line"><span class="comment"> * 打jar包则不需要</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusoryCloud</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplication</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//这里的HelloApplication是SpringBoot的启动类</span></span><br><span class="line">        <span class="keyword">return</span> builder.sources(HelloApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HelloApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-打包"><a href="#3-打包" class="headerlink" title="3. 打包"></a>3. 打包</h4><p>和上面打包的方式一样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[INFO] Packaging webapp</span><br><span class="line">[INFO] Assembling webapp [hello] in [D:\lillusory\MyProjects\hello\target\hello-<span class="number">0.0</span>.1-SNAPSHOT]</span><br><span class="line">[INFO] Processing war project</span><br><span class="line">[INFO] Webapp assembled in [<span class="number">472</span> msecs]</span><br><span class="line">[INFO] Building war: D:\lillusory\MyProjects\hello\target\hello-<span class="number">0.0</span>.1-SNAPSHOT.war</span><br><span class="line">[INFO] --- spring-boot-maven-plugin:<span class="number">2.1</span>.3.RELEASE:repackage (repackage) @ hello ---</span><br><span class="line">[INFO] Replacing main artifact with repackaged archive</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  <span class="number">01</span>:<span class="number">00</span> min</span><br><span class="line">[INFO] Finished at: <span class="number">2019</span>-<span class="number">02</span>-<span class="number">22</span>T21:<span class="number">10</span>:<span class="number">10</span>+<span class="number">08</span>:<span class="number">00</span></span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>可以看到打出来的war包在<code>D:\lillusory\MyProjects\hello\target\hello-0.0.1-SNAPSHOT.war</code></p><h4 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h4><p>先在电脑上测试一下(Windows环境下)</p><p>将war包复制到<code>Tomcat</code>的<code>webapps</code>文件夹下</p><p>然后找到<code>bin</code>目录下的<code>startup.bat</code>启动Tomcat，项目就会自动启动了。</p><p>浏览器访问<code>http://localhost:8080/hello-0.0.1-SNAPSHOT/hello</code> 出现<code>hello illusoryCloud</code>说明ok的。</p><p>这里<code>hello-0.0.1-SNAPSHOT</code>就是war包的名称，Tomcat启动时会自动解压war包然后启动项目。</p><p>这里的端口号和<code>application.yml</code>全局配置文件中配置的端口号没有关系，是Tomcat中配置的。</p><p>在<code>Tomcat\conf\server.xml</code>这个文件中，默认也是8080。</p><p><strong>问题</strong></p><p>我这里启动的时候出现了一个问题</p><p><code>Caused by: java.lang.NoClassDefFoundError: javax/el/ELManager</code></p><p>最后找到原因是<strong>tomcat提供的<code>el-api.jar</code> 和项目里面的el-api.jar冲突</strong>;</p><p>这时候你需要去找到自己电脑上用的el-api的版本,copy到tomcat的lib目录下,覆盖原来的jar包.</p><p>我的在<code>IntelliJ IDEA 2018.3\lib\rt\jasper2.1\el-api.jar</code>这个目录下</p><p>我看网上说是和Tomcat版本有关系，我这里是<code>7.0.52</code></p><p><strong>Tomcat日志</strong></p><p>若是还有其他问题的话可以查看Tomcat日志。在<code>tomcat\logs\catalina.2019-02-22.log</code>这个文件中。</p><h2 id="3-部署"><a href="#3-部署" class="headerlink" title="3. 部署"></a>3. 部署</h2><h3 id="3-1-jar包"><a href="#3-1-jar包" class="headerlink" title="3.1 jar包"></a>3.1 jar包</h3><p>首先将文件上传到服务器上，服务器上有安装JDK8及以上的版本就可以直接运行。</p><p><a href="https://www.lixueduan.com/posts/54978294.html">Linux下JDK的安装及配置点这里</a></p><h4 id="1-前台运行"><a href="#1-前台运行" class="headerlink" title="1. 前台运行"></a>1. 前台运行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> java -jar hello-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>但是这样运行的话是在前台运行，当前窗口关闭后就停止了,或者是运行时没法切出去执行其他任务.</p><h4 id="2-后台运行"><a href="#2-后台运行" class="headerlink" title="2. 后台运行"></a>2. 后台运行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> nohup java -jar hello-0.0.1-SNAPSHOT.jar &gt;temp.txt &amp;</span><br><span class="line"></span><br><span class="line">//nohup 意思是不挂断运行命令,当账户退出或终端关闭时,程序仍然运行</span><br><span class="line">//这种方法会把日志文件输入到你指定的文件中(temp.txt)</span><br><span class="line">//在哪个目录下运行的该日志文件就会在哪个目录下，没有指定具体文件则会自动创建(nohup.out)</span><br><span class="line">//&amp; 表示后台运行</span><br></pre></td></tr></table></figure><h4 id="3-问题"><a href="#3-问题" class="headerlink" title="3. 问题"></a>3. 问题</h4><p>执行以上命令后出现下面的提示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup: ignoring input and redirecting stderr to stdout</span><br><span class="line">忽略输出 将错误输出重定向到标准输出</span><br></pre></td></tr></table></figure><p><strong>原因</strong></p><p><code>Linux</code>中<code>0</code>、<code>1</code>和<code>2</code>分别表示<code>标准输</code>入、<code>标准输出</code>和<code>标准错误信息输出</code>，可以用来指定需要重定向的标准输入或输出。在一般使用时，默认的是标准输出，即1。</p><p>例如：<code>2&gt;temp.txt</code>  就是将错误信息写入temp.txt 标准输出还是显示在屏幕上。</p><p>另外，也可以实现0，1，2之间的重定向。<code>2&gt;&amp;1</code>：将错误信息重定向到标准输出。</p><p>Linux下还有一个特殊的文件<code>/dev/null</code>，它就像一个无底洞，所有重定向到它的信息都会消失得无影无踪。</p><p>如果想要<code>正常输出和错误信息都不显示</code>，则要把标准输出和标准错误都重定向到<code>/dev/null</code>， 例如：</p><p> <code>1&gt;/dev/null 2&gt;/dev/null</code></p><p><strong>解决办法</strong></p><p>所以最后的命令就是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar hello-0.0.1-SNAPSHOT.jar &gt;temp.txt 2&gt;&amp;1&amp;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost software]# nohup java -jar hello-0.0.1-SNAPSHOT.jar &gt;temp.txt 2&gt;&amp;1&amp;</span><br><span class="line">[1] 22804</span><br><span class="line">// 成功启动 pid为22804</span><br></pre></td></tr></table></figure><h4 id="4-测试-1"><a href="#4-测试-1" class="headerlink" title="4. 测试"></a>4. 测试</h4><p>首先查看服务器的IP</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost software]# ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:8a:48:7d brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.1.111/24 brd 192.168.1.255 scope global noprefixroute ens33</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::20c:29ff:fe8a:487d/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: virbr0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default qlen 1000</span><br><span class="line">    link/ether 52:54:00:8e:d5:31 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: virbr0-nic: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast master virbr0 state DOWN group default qlen 1000</span><br><span class="line">    link/ether 52:54:00:8e:d5:31 brd ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></table></figure><p>然后浏览器访问<code>http://192.168.1.111:8080/hello</code>出现<code>hello illusoryCloud</code>说明成功了。</p><p><strong>记得关闭防火墙或者开放8080端口</strong></p><h4 id="5-相关Linux命令"><a href="#5-相关Linux命令" class="headerlink" title="5. 相关Linux命令"></a>5. 相关Linux命令</h4><ul><li>jobs命令和 fg命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> jobs</span><br><span class="line">//那么就会列出所有后台执行的作业，并且每个作业前面都有个编号。</span><br><span class="line">[root@localhost software]# jobs</span><br><span class="line">[1]+  Running    nohup java -jar hello-0.0.1-SNAPSHOT.jar &gt; temp.txt 2&gt;&amp;1 &amp;</span><br><span class="line">//如果想将某个作业调回前台控制，只需要 fg + 编号即可。</span><br><span class="line"><span class="meta">$</span> fg 1</span><br></pre></td></tr></table></figure><ul><li>查看某端口占用的线程的pid</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -nlp |grep :8080</span><br></pre></td></tr></table></figure><ul><li>kill</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill pid</span><br></pre></td></tr></table></figure><h3 id="3-2-war包"><a href="#3-2-war包" class="headerlink" title="3.2 war包"></a>3.2 war包</h3><p>war包运行和在windows上运行其实一样的，也是<strong>先将war包copy到Tomcat的webapps目录下，然后启动Tomcat，如果上面测试出现jar包冲突的话这里也需要替换</strong>。</p><p><a href="https://www.lixueduan.com/posts/54978294.html">Linux下Tomcat安装及配置点这里</a></p><h4 id="启动Tomcat"><a href="#启动Tomcat" class="headerlink" title="启动Tomcat"></a>启动Tomcat</h4><p>进入<code>Tomcat\bin</code>目录执行<code>./startup.sh</code>即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# ./startup.sh </span><br><span class="line">Using CATALINA_BASE:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_HOME:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_TMPDIR: /usr/local/tomcat/temp</span><br><span class="line">Using JRE_HOME:        /usr/local/jdk8</span><br><span class="line">Using CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar</span><br><span class="line">Tomcat started.</span><br></pre></td></tr></table></figure><p>浏览器访问<code>http://192.168.1.111:8080/hello-0.0.1-SNAPSHOT/hello</code>出现<code>hello illusoryCloud</code>说明是没问题的。</p><h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h2><p><code>https://blog.csdn.net/qq_22638399/article/details/81506448</code></p><p><code>https://blog.csdn.net/c1481118216/article/details/53010963</code></p><p><code>https://blog.csdn.net/qq_14853889/article/details/80026885</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录了如何在idea下打包SpringBoot项目并部署到云服务器，包括jar包和war包两种方式。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://www.lixueduan.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://www.lixueduan.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Git入门教程</title>
    <link href="https://www.lixueduan.com/posts/498941.html"/>
    <id>https://www.lixueduan.com/posts/498941.html</id>
    <published>2019-02-16T04:00:00.000Z</published>
    <updated>2019-02-16T12:50:08.327Z</updated>
    
    <content type="html"><![CDATA[<p>​    本文主要记录了Git常用的一些命令，和Git基本使用教学，包括了版本库的创建、代码提交、推送、拉取、版本回退、撤销等操作。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><h3 id="1-1-Git简介"><a href="#1-1-Git简介" class="headerlink" title="1.1 Git简介"></a>1.1 Git简介</h3><p>Git(读音为/gɪt/。)是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 [1]  Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p><h3 id="1-2-Git工作区概念"><a href="#1-2-Git工作区概念" class="headerlink" title="1.2 Git工作区概念"></a>1.2 Git工作区概念</h3><p>Git本地有四个工作区域：<code>工作目录（Working Directory</code>）、<code>暂存区(Stage/Index</code>)、<code>版本库(Repository或Commit History)</code>、<code>远程仓库(Remote Directory)</code>。文件在这四个区域之间的转换关系如下：</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/git-work-tree.png" alt=""></p><ul><li><strong>Working Directory</strong>： 工作区，就是你平时存放项目代码的地方，大概就是一个文件夹。</li><li><strong>Index / Stage</strong>： 暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li><li><strong>Repository</strong>： 仓库区（或版本库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li><li><strong>Remote</strong>： 远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li></ul><h3 id="1-3-工作流程"><a href="#1-3-工作流程" class="headerlink" title="1.3 工作流程"></a>1.3 工作流程</h3><p>git的工作流程一般是这样的：</p><p>１、在工作目录中添加、修改文件；</p><p>２、将需要进行版本管理的文件放入暂存区域；</p><p>３、将暂存区域的文件提交到git仓库。</p><p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)</p><h3 id="1-4-文件的四种状态"><a href="#1-4-文件的四种状态" class="headerlink" title="1.4 文件的四种状态"></a>1.4 文件的四种状态</h3><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p><p>GIT不关心文件两个版本之间的具体差别，而是关心文件的整体是否有改变，若文件被改变，在添加提交时就生成文件新版本的快照，而判断文件整体是否改变的方法就是用</p><p>SHA-1算法计算文件的校验和。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/git-file-status.png" alt="img"></p><p><strong>Untracked:</strong>   未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</p><p> <strong>Unmodify:</strong>   文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified.</p><p>​                   如果使用git rm移出版本库, 则成为Untracked文件</p><p>  <strong>Modified:</strong> 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过,</p><p>​                返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改</p><p>​    <strong>Staged:</strong> 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存,</p><p>​               文件状态为Modified</p><p> 下面的图很好的解释了这四种状态的转变：</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/git-status-change.png" alt="img"></p><blockquote><p>新建文件后 —&gt;Untracked</p><p>使用add命令将新建的文件加入到暂存区—&gt;Staged</p><p>使用commit命令将暂存区的文件提交到本地仓库—&gt;Unmodified</p><p>如果对Unmodified状态的文件进行修改—&gt; modified</p><p>如果对Unmodified状态的文件进行remove操作—&gt;Untracked</p></blockquote><h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h2><h3 id="2-1-git配置"><a href="#2-1-git配置" class="headerlink" title="2.1 git配置"></a>2.1 git配置</h3><p>使用之前首先要设置账号的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name  //git中你的用户名 在查看提交历史等地方用到 一般为真实姓名 xxx</span><br><span class="line">git config --global user.email //你的邮箱 一般为公司邮箱xxx@xxx.com</span><br></pre></td></tr></table></figure><p>查看Git配置信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure><h3 id="2-2-创建git仓库"><a href="#2-2-创建git仓库" class="headerlink" title="2.2 创建git仓库"></a>2.2 创建git仓库</h3><h4 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h4><p>用 <code>git init</code> 在目录中创建新的 Git 仓库。 你可以在任何时候、任何目录中这么做，完全是本地化的。执行后会在当前文件夹中多出一个<code>.git</code>文件夹，Git相关信息都在里面。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git init</span><br><span class="line">Initialized empty Git repository in C:/Users/13452/Desktop/gitte/.git/</span><br></pre></td></tr></table></figure><h4 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h4><p>当然，也可以在远程服务器上拉取代码，拷贝一个 Git 仓库到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone [url]</span><br><span class="line">例如</span><br><span class="line">git clone git@github.com:illusorycloud/design-pattern.git</span><br></pre></td></tr></table></figure><h3 id="2-3-代码提交"><a href="#2-3-代码提交" class="headerlink" title="2.3 代码提交"></a>2.3 代码提交</h3><p>假如已经通过<code>git clone</code>从远程服务器上拉取了一下git仓库到本地了，然后在本地新增了一个<code>test.txt</code>文件</p><h4 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h4><p>可以通过<code>git status</code> 查看当前文件的状态</p><p>由于是新增的文件，还未加入git追踪，所以当前<code>test.txt</code>为<code>Untracked</code>状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use "git add &lt;file&gt;..." to include in what will be committed)</span><br><span class="line"></span><br><span class="line">        test.txt</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use "git add" to track)</span><br></pre></td></tr></table></figure><h4 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h4><p>执行git diff命令来查看文件与之前的区别。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git diff  //查看本地工作区和index区域的文件的区别</span><br><span class="line">git diff --cached // 查看Index区域与Repository区域的区别</span><br><span class="line">git diff HEAD   //查看所有文件与本地仓库的区别</span><br><span class="line">git diff --stat  //只显示摘要而不是全部显示</span><br></pre></td></tr></table></figure><h4 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h4><p>在本地将文件修改完成后<code>(Working Directory</code>)使用<code>git add</code>命令可将该文件添加到缓存 (<code>Index</code>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add 文件名  //添加单个文件</span><br><span class="line">git add .    //添加所有文件</span><br><span class="line"></span><br><span class="line">git add test.txt   //将test.txt文件添加到Index</span><br></pre></td></tr></table></figure><h4 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h4><p>在使用 <code>git add</code>命令将想要快照的内容写入缓存区， 而执行<code>git commit</code>将缓存区内容添加到本地仓库中。(<code>Repository</code>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git commit   //提交Index中的文件 执行后会进入写注释的界面</span><br><span class="line">git commit -m"注释"   //提交时直接写注释</span><br><span class="line"></span><br><span class="line">git commit -m"新增test.txt文件"</span><br></pre></td></tr></table></figure><h4 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h4><p>在执行<code>git commit</code>将缓存区内容添加到本地仓库中后，可以使用<code>git push</code>将本地的修改推送到服务器上的远程仓库中，这样其他人就可以同步了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push [主机名] [分支名]</span><br><span class="line">git push origin master  //推送到Orinoco主机的master分支 其中默认的主机名是origin</span><br></pre></td></tr></table></figure><h4 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h4><p>撤销命令，git中比较重要的命令之一了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset [恢复等级] [commitId]</span><br></pre></td></tr></table></figure><h5 id="soft-mixed-hard"><a href="#soft-mixed-hard" class="headerlink" title="soft/mixed/hard"></a>soft/mixed/hard</h5><p><code>git reset</code>有三个参数，可以看做是三个恢复等级。</p><p><code>git reset –soft</code> 仅仅将commit回退到了指定的提交 ，只修改<code>Repository</code>区域<br><code>git reset –mixed</code>用指定的commit覆盖<code>Repository</code>区域和<code>Index区</code>，之前所有暂存的内容都变为未暂存的状态 (<code>默认为该参数</code>)</p><p><code>git reset –hard</code>使用指定的commit的内容覆盖<code>Repository</code>区域、<code>Index区</code>和<code>工作区</code>。(<strong>危险！！！ 此操作会丢弃工作区所做的修改！需谨慎！！！</strong>)</p><h5 id="commidID"><a href="#commidID" class="headerlink" title="commidID"></a>commidID</h5><p>表示将要恢复到哪个版本。有如下几种表示法</p><p><strong>HEAD</strong>:表示当前最新的一次提交,<code>(HEAD^)</code>表示倒数第二次提交,<code>(HEAD^^)</code>表示倒数第三次提交，倒数第100次提交则是<code>HEAD^^...^^^</code> 100个<code>^</code>,当然不会这么傻，还有另外一种写法<code>HEAD~100</code> 就是倒数第100次了。</p><p>当然还可以使用具体的<code>commitID</code>: </p><p>使用<code>git log</code>可以查看到提交历史，其中就包含了<code>commitID</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git log </span><br><span class="line">////这个是最新的一次提交的commitId</span><br><span class="line">commit 06f1cd144f57c38d6fdbed07616af8ed5d69a9ea(HEAD -&gt; hexo, origin/hexo, origin/HEAD)</span><br><span class="line">Author: lillusory &lt;xueduanli@163.com&gt;</span><br><span class="line">Date:   Sat Feb 16 17:51:18 2019 +0800</span><br><span class="line"></span><br><span class="line">    添加Git工作区概念详解</span><br><span class="line"></span><br><span class="line">commit 8f8908ff3edbba0d24d7eee7682e09d002faee6f   //这个就是commitId</span><br><span class="line">Author: lillusory &lt;xueduanli@163.com&gt;</span><br><span class="line">Date:   Fri Feb 15 19:10:06 2019 +0800</span><br><span class="line"></span><br><span class="line">    fix建造者模式两种写法</span><br><span class="line"></span><br><span class="line">commit 71a44acd12d427f694f554df1d2f26ad59df5978 //这个就是commitId</span><br><span class="line">Author: lillusory &lt;xueduanli@163.com&gt;</span><br><span class="line">Date:   Fri Feb 15 00:31:33 2019 +0800</span><br><span class="line"></span><br><span class="line">    fix 单例模式+Git 常用命令</span><br><span class="line"></span><br><span class="line">commit 099675715979832baa107f9da080bfd38d3d63e0 //这个就是commitId</span><br><span class="line">Author: lillusory &lt;xueduanli@163.com&gt;</span><br><span class="line">Date:   Thu Feb 14 23:26:10 2019 +0800</span><br></pre></td></tr></table></figure><p>所以<code>git reset</code>有多种写法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD   //Repository和Index恢复到最后一次提交的状态 不影响工作区</span><br><span class="line">git reset HEAD test.txt //只恢复test.txt 文件</span><br><span class="line">git reset --soft HEAD  //Repository恢复到最后一次提交的状态</span><br><span class="line">git reset --hard HEAD  //Repository、Index和工作区都恢复到最后一次提交的状态 丢弃工作区所有内容</span><br><span class="line">git reset 099675715979832baa107f9da080bfd38d3d63e0  //恢复到commitID版本 一般不用写完整的commitid 写前几位git就可以分辨出来了</span><br></pre></td></tr></table></figure><h4 id="git-reflog"><a href="#git-reflog" class="headerlink" title="git reflog"></a>git reflog</h4><p>前面的<code>git reset</code>可以恢复到各个版本，但是若恢复到前面的版本了，那么在使用<code>git log</code>查看是就找不到后面的提交了，想要恢复到后面的版本时就可以使用<code>git reflog</code>查看，该命令可以看到所有的版本改动信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git log</span><br><span class="line">commit 86a08a6fbacffcf93f7b4dd94be4a21ca31682c4 (HEAD -&gt; master)</span><br><span class="line">Author: lillusory &lt;xueduanli@163.com&gt;</span><br><span class="line">Date:   Sat Feb 16 18:29:48 2019 +0800</span><br><span class="line"></span><br><span class="line">    新增test.txt</span><br><span class="line">    </span><br><span class="line"><span class="meta">$</span> git reflog</span><br><span class="line">86a08a6 HEAD@&#123;1&#125;: reset: moving to HEAD^</span><br><span class="line">b9802c7 (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: 添加内容1111</span><br><span class="line">86a08a6 HEAD@&#123;3&#125;: commit (initial): 新增test.txt</span><br></pre></td></tr></table></figure><h4 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h4><p>在其他人提交代码后，可以通过<code>git pull</code>命令拉取服务器代码到本地。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull [主机名] [分支名]</span><br><span class="line">git pull origin master  //推送到Orinoco主机的master分支 其中默认的主机名是origin</span><br></pre></td></tr></table></figure><h3 id="2-4-分支操作"><a href="#2-4-分支操作" class="headerlink" title="2.4 分支操作"></a>2.4 分支操作</h3><p>创建项目后默认在master分支 即主分支 <strong>应保证master分支代码永远是正确的，稳定的，可运行的</strong></p><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><p>实际开发时一般会根据功能创建多个分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch branchName //创建分支branchName</span><br><span class="line">git checkout branchName //切换到分支branchName</span><br><span class="line">git checkout -b branchName  //创建并切换到分支branchName</span><br></pre></td></tr></table></figure><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><p>在新建的分支开发完后需要进行合并，将新的功能代码合并搭到master分支.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.切换到master分支</span><br><span class="line">git checkout master</span><br><span class="line">2.把新分支代码合并</span><br><span class="line">git merge branchName</span><br></pre></td></tr></table></figure><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><p>合并完成后即可删除开发时创建的分</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d branchName //删除分支branchName</span><br></pre></td></tr></table></figure><h2 id="3-常用命令"><a href="#3-常用命令" class="headerlink" title="3. 常用命令"></a>3. 常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 新建仓库</span><br><span class="line">git init</span><br><span class="line">git clone [url]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 代码提交</span><br><span class="line">git add &lt;filename&gt;</span><br><span class="line">git commit -m"注释"</span><br><span class="line">git push </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 版本恢复</span><br><span class="line">git reset</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 代码拉取</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 分支操作</span><br><span class="line">git branch &lt;branchName&gt;</span><br><span class="line">git checkout &lt;branchName&gt;</span><br><span class="line">git merge &lt;branchName&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 信息查看</span><br><span class="line">git status</span><br><span class="line">git log</span><br><span class="line">git reflog</span><br><span class="line">git config -l</span><br></pre></td></tr></table></figure><p>最后附上一张网上找到的<code>Git常用命令速查表</code></p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/git-comand-fast-select.png" alt=""></p><h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h2><p><code>http://www.runoob.com/git/git-basic-operations.html</code></p><p><code>https://www.cnblogs.com/qdhxhz/p/9757390.html</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    本文主要记录了Git常用的一些命令，和Git基本使用教学，包括了版本库的创建、代码提交、推送、拉取、版本回退、撤销等操作。&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="https://www.lixueduan.com/categories/Git/"/>
    
    
      <category term="Git" scheme="https://www.lixueduan.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>MySQL存储过程入门教程及实例详解</title>
    <link href="https://www.lixueduan.com/posts/38c0d2ef.html"/>
    <id>https://www.lixueduan.com/posts/38c0d2ef.html</id>
    <published>2019-02-13T14:00:00.000Z</published>
    <updated>2019-02-14T13:55:42.344Z</updated>
    
    <content type="html"><![CDATA[<p>存储过程是可编程的函数，在数据库中创建并保存，可以由SQL语句和控制结构组成。</p><p>本文主要介绍了MySQL的存储过程，通过语法教学及实例演示详细的叙述了MySQL存储过程的基本使用。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-存储过程简介"><a href="#1-存储过程简介" class="headerlink" title="1. 存储过程简介"></a>1. 存储过程简介</h2><p><strong>存储过程是可编程的函数，在数据库中创建并保存，可以由SQL语句和控制结构组成</strong>。当想要在不同的应用程序或平台上执行相同的函数，或者封装特定功能时，存储过程是非常有用的。数据库中的存储过程可以看做是对编程中面向对象方法的模拟，它允许控制数据的访问方式。</p><p>SQL语句需要先编译然后执行，而存储过程（Stored Procedure）是一组为了完成特定功能的SQL语句集，经编译后存储在数据库中，用户通过指定存储过程的名字并给定参数（如果该存储过程带有参数）来调用执行它。</p><p>简单的说，就是一组SQL语句集，功能强大，可以实现一些比较复杂的逻辑功能，类似于JAVA语言中的方法；</p><blockquote><p>存储过程跟触发器有点类似，都是一组SQL集，但是存储过程是主动调用的，且功能比触发器更加强大，触发器是某件事触发后自动调用；</p></blockquote><h2 id="2-存储过程的优缺点"><a href="#2-存储过程的优缺点" class="headerlink" title="2. 存储过程的优缺点"></a>2. 存储过程的优缺点</h2><h3 id="2-1-优点"><a href="#2-1-优点" class="headerlink" title="2.1 优点"></a>2.1 优点</h3><ul><li>1.<strong>增强SQL语言的功能和灵活性</strong>：存储过程可以用控制语句编写，有很强的灵活性，可以完成复杂的判断和较复杂的运算。</li><li>2.<strong>标准组件式编程</strong>：存储过程被创建后，可以在程序中被多次调用，而不必重新编写该存储过程的SQL语句。而且数据库专业人员可以随时对存储过程进行修改，对应用程序源代码毫无影响。</li><li>3.<strong>较快的执行速度</strong>：如果某一操作包含大量的Transaction-SQL代码或分别被多次执行，那么存储过程要比批处理的执行速度快很多。因为存储过程是预编译的。在首次运行一个存储过程时查询，优化器对其进行分析优化，并且给出最终被存储在系统表中的执行计划。而批处理的Transaction-SQL语句在每次运行时都要进行编译和优化，速度相对要慢一些。</li><li>4.<strong>减少网络流量</strong>：针对同一个数据库对象的操作（如查询、修改），如果这一操作所涉及的Transaction-SQL语句被组织进存储过程，那么当在客户计算机上调用该存储过程时，网络中传送的只是该调用语句，从而大大减少网络流量并降低了网络负载。</li><li>5.<strong>作为一种安全机制来充分利用</strong>： 通过对执行某一存储过程的权限进行限制，能够实现对相应的数据的访问权限的限制，避免了非授权用户对数据的访问，保证了数据的安全。</li></ul><h3 id="2-2-缺点"><a href="#2-2-缺点" class="headerlink" title="2.2 缺点"></a>2.2 缺点</h3><ul><li>1.可移植性差</li><li>2.对于很简单的sql语句， 存储过程没有优势</li><li>3.如果存储过程中不一定会减少网络传输（包含的sql数量并不多， 并且执行很快，就没必要了）</li><li>4.如果只有一个用户使用数据库， 那么存储过程对于安全也没什么影响</li><li>5.团队开发时需要先统一标准， 否则后期维护是个麻烦</li><li>6.在大并发量访问的情况下， 不宜写过多涉及运算的存储过程</li><li>7.业务逻辑复杂时， 特别是涉及到对很大的表进行操作的时候， 不如在前端先简化业务逻辑</li></ul><h2 id="3-存储过程语法"><a href="#3-存储过程语法" class="headerlink" title="3. 存储过程语法"></a>3. 存储过程语法</h2><h3 id="3-1-基本语法"><a href="#3-1-基本语法" class="headerlink" title="3.1 基本语法"></a>3.1 基本语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span>  过程名([[<span class="keyword">IN</span>|<span class="keyword">OUT</span>|INOUT] 参数名 数据类型[,[<span class="keyword">IN</span>|<span class="keyword">OUT</span>|INOUT] 参数名 数据类型…]]) [特性 ...] 过程体</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 存储过程</span></span><br><span class="line"><span class="comment">-- 将语句的结束符号从分号;临时改为两个//(可以是自定义) 让编译器把两个"//"之间的内容当做存储过程的代码，不会执行这些代码</span></span><br><span class="line">DELIMITER // </span><br><span class="line"><span class="comment">-- 创建存储过程 名称为 add_sum</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> add_sum(<span class="keyword">IN</span> a <span class="built_in">INT</span>,<span class="keyword">IN</span> b <span class="built_in">INT</span>,<span class="keyword">OUT</span> c <span class="built_in">INT</span>)</span><br><span class="line"><span class="comment">-- 过程体开始</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">-- SET 赋值</span></span><br><span class="line"> <span class="keyword">SET</span> c=a+b;</span><br><span class="line"><span class="comment">-- 过程体结束</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">//  <span class="comment">-- 存储过程结束</span></span><br><span class="line">DELIMITER ; <span class="comment">-- 将分隔符还原为分号 ；</span></span><br><span class="line"><span class="comment">-- 调用存储过程</span></span><br><span class="line"><span class="keyword">SET</span> @a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> @b=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">CALL</span> add_sum(@a,@b,@c);</span><br><span class="line"><span class="keyword">SELECT</span> @c <span class="keyword">AS</span> <span class="keyword">SUM</span>; <span class="comment">-- 输出为3</span></span><br></pre></td></tr></table></figure><p>MySQL默认以”;”为分隔符，如果没有声明分隔符，则编译器会把存储过程当成SQL语句进行处理，因此编译过程会报错。</p><p>所以要事先用<code>DELIMITER //</code>声明当前的分隔符，可以自定义。让编译器把两个<code>//</code>之间的内容当做存储过程的代码，不会执行这些代码；结束后使用<code>DELIMITER ;</code>把分隔符还原。</p><p><strong>MYSQL 存储过程中的关键语法</strong></p><p>声明语句结束符，可以自定义:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line">或</span><br><span class="line">DELIMITER //</span><br></pre></td></tr></table></figure><p>声明存储过程:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE demo_in_parameter(IN p_in int)</span><br></pre></td></tr></table></figure><p>存储过程开始和结束符号:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BEGIN .... END</span><br></pre></td></tr></table></figure><p>变量赋值:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET @p_in=1</span><br></pre></td></tr></table></figure><p>变量定义:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DECLARE l_int int unsigned default 4000000;</span><br></pre></td></tr></table></figure><p>创建mysql存储过程、存储函数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create procedure 存储过程名(参数)</span><br></pre></td></tr></table></figure><p>存储过程体:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create function 存储函数名(参数)</span><br></pre></td></tr></table></figure><p>调用存储过程：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> sp_name[(传参)];</span><br></pre></td></tr></table></figure><h3 id="3-2-存储过程体"><a href="#3-2-存储过程体" class="headerlink" title="3.2 存储过程体"></a>3.2 存储过程体</h3><p>过程体的开始与结束使用<code>BEGIN</code>与<code>END</code>进行标识。</p><p>①如果过程没有参数，也必须在过程名后面写上小括号</p><p>　　　　例：<code>CREATE PROCEDURE sp_name ([proc_parameter[,...]]) ……</code></p><p>②确保参数的名字不等于列的名字，否则在过程体中，参数名被当做列名来处理</p><ul><li>存储过程体包含了在过程调用时必须执行的语句，例如：dml、ddl语句，if-then-else和while-do语句、声明变量的declare语句等</li><li>过程体格式：以begin开始，以end结束(可嵌套)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BEGIN</span><br><span class="line">　　BEGIN</span><br><span class="line">　　　　BEGIN</span><br><span class="line">　　　　　　statements; </span><br><span class="line">　　　　END</span><br><span class="line">　　END</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 每个嵌套块及其中的每条语句，必须以分号结束，表示过程体结束的begin-end块(又叫做复合语句compound statement)，则不需要分号。</p><p><strong>为语句块贴标签:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[begin_label:] BEGIN</span><br><span class="line">　　[statement_list]</span><br><span class="line">END [end_label]</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">label1: <span class="keyword">BEGIN</span></span><br><span class="line">　　label2: <span class="keyword">BEGIN</span></span><br><span class="line">　　　　label3: <span class="keyword">BEGIN</span></span><br><span class="line">　　　　　　statements; </span><br><span class="line">　　　　<span class="keyword">END</span> label3 ;</span><br><span class="line">　　<span class="keyword">END</span> label2;</span><br><span class="line"><span class="keyword">END</span> label1</span><br></pre></td></tr></table></figure><p>标签有两个作用：</p><ul><li>1、增强代码的可读性</li><li>2、在某些语句(例如:leave和iterate语句)，需要用到标签</li></ul><h3 id="3-3-参数"><a href="#3-3-参数" class="headerlink" title="3.3 参数"></a>3.3 参数</h3><p>存储过程根据需要可能会有输入、输出、输入输出参数，如果有多个参数用”,”分割开。MySQL存储过程的参数用在存储过程的定义，共有三种参数类型,IN,OUT,INOUT:</p><ul><li><strong>IN</strong>：参数的值必须在调用存储过程时指定，在存储过程中修改该参数的值不能被返回，为默认值</li><li><strong>OUT</strong>: 该值可在存储过程内部被改变，并可返回</li><li><strong>INOUT</strong>: 调用时指定，并且可被改变和返回</li></ul><h4 id="1-IN参数例子"><a href="#1-IN参数例子" class="headerlink" title="1.IN参数例子"></a>1.IN参数例子</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER //</span><br><span class="line">  <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> in_param(<span class="keyword">IN</span> p_in <span class="built_in">int</span>)</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SELECT</span> p_in;</span><br><span class="line">    <span class="keyword">SET</span> p_in=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">SELECT</span> p_in;</span><br><span class="line">    <span class="keyword">END</span>;</span><br><span class="line">    //</span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">SET</span> @p_in=<span class="number">1</span>; <span class="comment">-- 这里@p_in为1</span></span><br><span class="line"><span class="keyword">CALL</span> in_param(@p_in); <span class="comment">-- 这里 修改@p_in值为2</span></span><br><span class="line"><span class="keyword">SELECT</span> @p_in; <span class="comment">-- 查询@p_in值依旧为1</span></span><br></pre></td></tr></table></figure><p><strong>p_in 在存储过程中被修改，但并不影响 @p_id 的值，因为前者为局部变量、后者为全局变量。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 此语句的意思就是根据where条件uid=1查询user表，得到的行数存入变量u_count中（给变量赋值）</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">into</span> u_count <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> uid=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="2-OUT参数例子"><a href="#2-OUT参数例子" class="headerlink" title="2.OUT参数例子"></a>2.OUT参数例子</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#存储过程</span></span><br><span class="line">DELIMITER // <span class="comment">-- 将语句的结束符号从分号;临时改为两个//(可以是自定义) 让编译器把两个"//"之间的内容当做存储过程的代码，不会执行这些代码</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> out_param(<span class="keyword">OUT</span> p_out  <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> p_out ;</span><br><span class="line"> <span class="keyword">SET</span> p_out =<span class="number">999</span>;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">//  <span class="comment">-- 存储过程结束</span></span><br><span class="line">DELIMITER ; <span class="comment">-- 将分隔符还原为分号 ；</span></span><br><span class="line"><span class="keyword">SET</span> @p_out=<span class="number">111</span>;</span><br><span class="line"><span class="keyword">CALL</span> out_param(@p_out); <span class="comment">-- 因为out是向调用者输出参数，不接收输入的参数，所以存储过程里的p_out为null</span></span><br><span class="line"><span class="keyword">SELECT</span> @p_out; <span class="comment">-- 调用了out_param存储过程，输出参数，改变了p_out变量的值</span></span><br></pre></td></tr></table></figure><h4 id="3-INOUT输入参数"><a href="#3-INOUT输入参数" class="headerlink" title="3.INOUT输入参数"></a>3.INOUT输入参数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 存储过程</span></span><br><span class="line">DELIMITER // <span class="comment">-- 将语句的结束符号从分号;临时改为两个//(可以是自定义) 让编译器把两个"//"之间的内容当做存储过程的代码，不会执行这些代码</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> inout_param(INOUT p_inout  <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"> <span class="keyword">SELECT</span> p_inout ;</span><br><span class="line"> <span class="keyword">SET</span> p_inout =<span class="number">999</span>;</span><br><span class="line"> <span class="keyword">SELECT</span> p_inout ;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">//  <span class="comment">-- 存储过程结束</span></span><br><span class="line">DELIMITER ; <span class="comment">-- 将分隔符还原为分号 ；</span></span><br><span class="line"><span class="keyword">SET</span> @p_inout=<span class="number">111</span>;</span><br><span class="line"><span class="keyword">CALL</span> inout_param(@p_inout);  <span class="comment">-- 能接受输入的值 查询结果为111</span></span><br><span class="line"><span class="keyword">SELECT</span> @p_inout; <span class="comment">-- 存储过程修改了值 所以结果为999</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>1、如果过程没有参数，也必须在过程名后面写上小括号例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE sp_name ([proc_parameter[,...]]) ……</span><br></pre></td></tr></table></figure><p>2、确保参数的名字不等于列的名字，否则在过程体中，参数名被当做列名来处理</p><p><strong>建议：</strong></p><ul><li>输入值使用in参数。</li><li>返回值使用out参数。</li><li>inout参数就尽量的少用。</li></ul><h3 id="3-4-变量"><a href="#3-4-变量" class="headerlink" title="3.4 变量"></a>3.4 变量</h3><h4 id="1变量定义"><a href="#1变量定义" class="headerlink" title="1变量定义"></a>1变量定义</h4><p>局部变量声明一定要放在存储过程体的开始：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DECLAREvariable_name [,variable_name...] datatype [DEFAULT value];</span><br></pre></td></tr></table></figure><p>其中，datatype 为 MySQL 的数据类型，如: int, float, date,varchar(length)</p><p>例如:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> l_int <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">default</span> <span class="number">4000000</span>;  </span><br><span class="line"><span class="keyword">DECLARE</span> l_numeric <span class="built_in">number</span>(<span class="number">8</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="number">9.95</span>;  </span><br><span class="line"><span class="keyword">DECLARE</span> l_date <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="string">'1999-12-31'</span>;  </span><br><span class="line"><span class="keyword">DECLARE</span> l_datetime datetime <span class="keyword">DEFAULT</span> <span class="string">'1999-12-31 23:59:59'</span>;  </span><br><span class="line"><span class="keyword">DECLARE</span> l_varchar <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">'This will not be padded'</span>;`</span><br></pre></td></tr></table></figure><h4 id="2-变量赋值"><a href="#2-变量赋值" class="headerlink" title="2 变量赋值"></a>2 变量赋值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET 变量名 = 表达式值 [,variable_name = expression ...]</span><br></pre></td></tr></table></figure><h4 id="3-用户变量"><a href="#3-用户变量" class="headerlink" title="3 用户变量"></a>3 用户变量</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> @ValueName=<span class="keyword">value</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> @uid=<span class="number">123</span>;</span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><ul><li>1、用户变量名一般以@开头</li><li>2、滥用用户变量会导致程序难以理解及管理</li></ul><h3 id="3-5-存储过程控制语句"><a href="#3-5-存储过程控制语句" class="headerlink" title="3.5 存储过程控制语句"></a>3.5 存储过程控制语句</h3><h4 id="1-变量作用域"><a href="#1-变量作用域" class="headerlink" title="1. 变量作用域"></a>1. 变量作用域</h4><p>内部的变量在其作用域范围内享有更高的优先权，当执行到 end。变量时，内部变量消失，此时已经在其作用域外，变量不再可见了，应为在存储过程外再也不能找到这个申明的变量，但是你可以通过 out 参数或者将其值指派给会话变量来保存其值。</p><h4 id="2-条件语句"><a href="#2-条件语句" class="headerlink" title="2.条件语句"></a>2.条件语句</h4><h5 id="1-if-then-else-语句"><a href="#1-if-then-else-语句" class="headerlink" title="1.if-then-else 语句"></a>1.if-then-else 语句</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> myif;  <span class="comment">-- 删除存储过程myif 如果存在</span></span><br><span class="line">DELIMITER //</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myif(<span class="keyword">IN</span> a <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> msg <span class="built_in">VARCHAR</span>(<span class="number">30</span>);</span><br><span class="line">IF a = 0 THEN</span><br><span class="line"><span class="keyword">SET</span> msg=<span class="string">'a is 0'</span>;</span><br><span class="line">ELSEIF a = 1 THEN </span><br><span class="line"><span class="keyword">SET</span> msg=<span class="string">'a is 1'</span>;</span><br><span class="line">ELSE </span><br><span class="line"><span class="keyword">SET</span> msg=<span class="string">'a is others,not 0 or 1'</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">SELECT</span> msg;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">//</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> myif(<span class="number">2</span>); <span class="comment">-- 调用</span></span><br></pre></td></tr></table></figure><h5 id="2-case语句："><a href="#2-case语句：" class="headerlink" title="2.case语句："></a>2.case语句：</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> mycase;</span><br><span class="line">DELIMITER //</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> mycase(<span class="keyword">IN</span> a <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> msg <span class="built_in">VARCHAR</span>(<span class="number">30</span>); <span class="comment">-- 定义变量</span></span><br><span class="line">CASE a</span><br><span class="line">WHEN 0 THEN</span><br><span class="line"><span class="keyword">SET</span> msg=<span class="string">'a is 0'</span>;</span><br><span class="line">WHEN 1 THEN</span><br><span class="line"><span class="keyword">SET</span> msg=<span class="string">'a is 1'</span>;</span><br><span class="line">ELSE  <span class="comment">-- 相当于switch中的default</span></span><br><span class="line"><span class="keyword">SET</span> msg=<span class="string">'a is others,not 0 or 1'</span>;</span><br><span class="line"><span class="keyword">SELECT</span> msg;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line"><span class="keyword">END</span> </span><br><span class="line">//</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> mycase(<span class="number">1</span>); <span class="comment">-- 调用</span></span><br></pre></td></tr></table></figure><h5 id="3-循环语句"><a href="#3-循环语句" class="headerlink" title="3.循环语句"></a>3.循环语句</h5><h6 id="1-while-····-end-while"><a href="#1-while-····-end-while" class="headerlink" title="1.while ···· end while"></a>1.while ···· end while</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> mywhile;</span><br><span class="line">DELIMITER //</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> mywhile(<span class="keyword">IN</span> a <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> msg <span class="built_in">VARCHAR</span>(<span class="number">30</span>);</span><br><span class="line">WHILE a&gt;1 DO</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user2 <span class="keyword">VALUES</span>(<span class="literal">NULL</span>,a);  <span class="comment">-- 循环往表中插入数据</span></span><br><span class="line"><span class="keyword">SET</span> a=a<span class="number">-1</span>;    <span class="comment">-- 每次执行结束a减1</span></span><br><span class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">//</span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> mywhile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> mywhile(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while 条件 <span class="keyword">do</span></span><br><span class="line">    <span class="comment">--循环体</span></span><br><span class="line">endwhile</span><br></pre></td></tr></table></figure><h6 id="2-repeat····-end-repea"><a href="#2-repeat····-end-repea" class="headerlink" title="2.repeat···· end repea"></a>2.repeat···· end repea</h6><p>它在执行操作后检查结果，而 while 则是执行前进行检查。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> myrepeat;</span><br><span class="line">DELIMITER //</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myrepeat(<span class="keyword">IN</span> a <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">REPEAT</span></span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> user2 <span class="keyword">VALUES</span>(<span class="literal">NULL</span>,a);</span><br><span class="line"> <span class="keyword">SET</span> a=a<span class="number">-1</span>;</span><br><span class="line"> UNTIL a&lt;1</span><br><span class="line"> <span class="keyword">END</span> <span class="keyword">REPEAT</span>;</span><br><span class="line"> <span class="keyword">END</span></span><br><span class="line"> //</span><br><span class="line">DELIMITER ;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CALL</span> myrepeat(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">repeat</span><br><span class="line">    <span class="comment">-- 循环体</span></span><br><span class="line">until 循环条件  </span><br><span class="line"><span class="keyword">end</span> <span class="keyword">repeat</span>;</span><br></pre></td></tr></table></figure><h6 id="3-loop-·····endloop"><a href="#3-loop-·····endloop" class="headerlink" title="3.loop ·····endloop"></a>3.loop ·····endloop</h6><p>– loop 与 leave,iterate 实现循环<br>– loop 标志位无条件循环，leave 类似于break 语句，跳出循环，跳出 begin end，iterate 类似于continue ，结束本次循环</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> myloop;</span><br><span class="line">DELIMITER //</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myloop(<span class="keyword">IN</span> a <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">loop_label: <span class="keyword">LOOP</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user2 <span class="keyword">VALUES</span>(<span class="literal">NULL</span>,a);</span><br><span class="line"><span class="keyword">SET</span> a=a<span class="number">-1</span>;</span><br><span class="line">IF a&lt;1 THEN</span><br><span class="line">LEAVE loop_label;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">LOOP</span>;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">//</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> myloop(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><h6 id="4-LABLES-标号"><a href="#4-LABLES-标号" class="headerlink" title="4.LABLES 标号"></a>4.LABLES 标号</h6><p>标号可以用在 begin repeat while 或者 loop 语句前，语句标号只能在合法的语句前面使用。可以跳出循环，使运行指令达到复合语句的最后一步。</p><p>ITERATE 通过引用复合语句的标号,来从新开始复合语句:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> myiterate;</span><br><span class="line">DELIMITER //</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myiterate(<span class="keyword">IN</span> a <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">loop_label: <span class="keyword">LOOP</span></span><br><span class="line"><span class="keyword">IF</span> a&lt;<span class="number">3</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SET</span> a=a+<span class="number">1</span>;</span><br><span class="line">ITERATE loop_label; <span class="comment">-- 退出这次循环 继续下一次循环 类似于continue</span></span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user2 <span class="keyword">VALUES</span>(<span class="literal">NULL</span>,a);</span><br><span class="line"><span class="keyword">SET</span> a=a+<span class="number">1</span>;</span><br><span class="line">IF a&gt;=5 THEN</span><br><span class="line">LEAVE loop_label;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">LOOP</span>;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">//</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> myiterate(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h2 id="4-存储过程操作语法"><a href="#4-存储过程操作语法" class="headerlink" title="4. 存储过程操作语法"></a>4. 存储过程操作语法</h2><h4 id="4-1-存储过程查询"><a href="#4-1-存储过程查询" class="headerlink" title="4.1 存储过程查询"></a>4.1 存储过程查询</h4><p>查看某个数据库下面的存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询数据库中的存储过程</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> mysql.proc <span class="keyword">WHERE</span> db=<span class="string">'数据库名'</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- MySQL存储过程和函数的信息存储在information_schema数据库下的Routines表中。通过查询该表的记录查询信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> information_schema.routines <span class="keyword">WHERE</span> routine_schema=<span class="string">'数据库名'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 这个语句是MySQL的扩展，它返回子程序的特征，如数据库、名字、类型、创建者及创建和修改日期。PROCEDURE和FUNCTION分别表示查看存储过程和函数</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">PROCEDURE</span> <span class="keyword">STATUS</span> <span class="keyword">WHERE</span> db=<span class="string">'数据库名'</span>;</span><br></pre></td></tr></table></figure><p>查看详细的存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 数据库.存储过程名; <span class="comment">-- 它返回一个可用来重新创建已命名子程序的确切字符串</span></span><br></pre></td></tr></table></figure><h4 id="4-2-修改删除"><a href="#4-2-修改删除" class="headerlink" title="4.2 修改删除"></a>4.2 修改删除</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改</span></span><br><span class="line"><span class="keyword">ALTER</span> &#123;<span class="keyword">PROCEDURE</span> | <span class="keyword">FUNCTION</span>&#125; proc_or_func [characterustic...]</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">PROCEDURE</span> 存储过程名字  </span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">PROCEDURE</span> inout_param  </span><br><span class="line"><span class="comment">-- 删除</span></span><br><span class="line"><span class="keyword">DROP</span> &#123;<span class="keyword">PROCEDURE</span> | <span class="keyword">FUNCTION</span>&#125; [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] proc_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span>  inout_param;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> inout_param;</span><br></pre></td></tr></table></figure><h2 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h2><p><code>http://www.runoob.com/w3cnote/mysql-stored-procedure.html</code></p><p><code>https://www.2cto.com/database/201805/746743.html</code></p><p><code>https://www.cnblogs.com/mark-chan/p/5384139.html</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;存储过程是可编程的函数，在数据库中创建并保存，可以由SQL语句和控制结构组成。&lt;/p&gt;
&lt;p&gt;本文主要介绍了MySQL的存储过程，通过语法教学及实例演示详细的叙述了MySQL存储过程的基本使用。&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://www.lixueduan.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://www.lixueduan.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>几种常见排序算法的Java实现</title>
    <link href="https://www.lixueduan.com/posts/82240bb6.html"/>
    <id>https://www.lixueduan.com/posts/82240bb6.html</id>
    <published>2019-02-12T14:00:00.000Z</published>
    <updated>2019-02-12T15:25:05.178Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录了几种常见的排序算法的Java实现，如<code>冒泡排序</code>、<code>快速排序</code>、<code>直接插入排序</code>、<code>希尔排序</code>、<code>选择排序</code>等等。<br>在学数据结构与算法时的部分记录，感觉很难╮(╯▽╰)╭，还需继续努力。<br><a id="more"></a></p><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h1 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1. 冒泡排序"></a>1. 冒泡排序</h1><p>将序列中所有元素两两比较，将最大的放在最后面。</p><p>将剩余序列中所有元素两两比较，将最大的放在最后面。</p><p>重复第二步，直到只剩下一个数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 冒泡排序：两两比较，大者交换位置,则每一轮循环结束后最大的数就会移动到最后.</span></span><br><span class="line"><span class="comment"> * 时间复杂度为O(n²) 空间复杂度为O(1)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//外层循环length-1次</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123; </span><br><span class="line">        <span class="comment">//外层每循环一次最后都会排好一个数</span></span><br><span class="line">        <span class="comment">//所以内层循环length-1-i次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-快速排序"><a href="#2-快速排序" class="headerlink" title="2. 快速排序"></a>2. 快速排序</h1><p>快速排序（Quicksort）是对冒泡排序的一种改进，借用了分治的思想，由C. A. R. Hoare在1962年提出。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列.</p><p><strong>具体步骤</strong></p><p>快速排序使用分治策略来把一个序列（list）分为两个子序列（sub-lists）。</p><ul><li>①. 从数列中挑出一个元素，称为”基准”（pivot）。</li><li>②. 重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</li><li>③. 递归地（recursively）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li></ul><p>递归到最底部时，数列的大小是零或一，也就是已经排序好了。这个算法一定会结束，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 快速排序</span></span><br><span class="line"><span class="comment">   * 时间复杂度为O(nlogn) 空间复杂度为O(1)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (start &lt; end) &#123;</span><br><span class="line">          <span class="keyword">int</span> baseNum = arr[start];<span class="comment">//选基准值</span></span><br><span class="line">          <span class="keyword">int</span> midNum;<span class="comment">//记录中间值</span></span><br><span class="line">          <span class="keyword">int</span> left = start;<span class="comment">//左指针</span></span><br><span class="line">          <span class="keyword">int</span> right = end;<span class="comment">//右指针</span></span><br><span class="line">          <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">              <span class="keyword">while</span> ((arr[left] &lt; baseNum) &amp;&amp; left &lt; end) &#123;</span><br><span class="line">                  left++;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">while</span> ((arr[right] &gt; baseNum) &amp;&amp; right &gt; start) &#123;</span><br><span class="line">                  right--;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (left &lt;= right) &#123;</span><br><span class="line">                  midNum = arr[left];</span><br><span class="line">                  arr[left] = arr[right];</span><br><span class="line">                  arr[right] = midNum;</span><br><span class="line">                  left++;</span><br><span class="line">                  right--;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (start &lt; right) &#123;</span><br><span class="line">              quickSort(arr, start, right);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (end &gt; left) &#123;</span><br><span class="line">              quickSort(arr, left, end);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="3-直接插入排序"><a href="#3-直接插入排序" class="headerlink" title="3. 直接插入排序"></a>3. 直接插入排序</h1><p>直接插入排序（Straight Insertion Sorting）的基本思想：将数组中的所有元素依次跟前面已经排好的元素相比较，如果选择的元素比已排序的元素小，则交换，直到全部元素都比较过为止。 </p><p>首先设定插入次数，即循环次数，for(int i=1;i&lt;length;i++)，1个数的那次不用插入。</p><p>设定插入数和得到已经排好序列的最后一个数的位数。insertNum和j=i-1。</p><p>从最后一个数开始向前循环，如果插入数小于当前数，就将当前数向后移动一位。</p><p>将当前数放置到空着的位置，即j+1。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 直接插入排序</span></span><br><span class="line"><span class="comment"> * 时间复杂度O(n²) 空间复杂度O(1)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">straightInsertion</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> current;<span class="comment">//要插入的数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;  <span class="comment">//从1开始 第一次一个数不需要排序</span></span><br><span class="line">        current = arr[i];</span><br><span class="line">        <span class="keyword">int</span> j = i - <span class="number">1</span>;<span class="comment">//序列元素个数</span></span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; current) &#123;<span class="comment">//从后往前循环，将大于当前插入数的向后移动</span></span><br><span class="line">            arr[j + <span class="number">1</span>] = arr[j];<span class="comment">//元素向后移动</span></span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j + <span class="number">1</span>] = current;<span class="comment">//找到位置，插入当前元素</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-希尔排序"><a href="#4-希尔排序" class="headerlink" title="4. 希尔排序"></a>4. 希尔排序</h1><p>是插入排序的一种高速而稳定的改进版本。</p><p>希尔排序是先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 希尔排序</span></span><br><span class="line"><span class="comment"> * 时间复杂度O(n²) 空间复杂度O(1)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> gap = arr.length / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (; gap &gt; <span class="number">0</span>; gap = gap / <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">//不断缩小gap，直到1为止</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; (j + gap) &lt; arr.length; j++) &#123; </span><br><span class="line">            <span class="comment">//使用当前gap进行组内插入排序</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; (k + gap) &lt; arr.length; k += gap) &#123; </span><br><span class="line">                <span class="keyword">if</span> (arr[k] &gt; arr[k + gap]) &#123; </span><br><span class="line">                    <span class="comment">//交换操作</span></span><br><span class="line">                    <span class="keyword">int</span> temp = arr[k];</span><br><span class="line">                    arr[k] = arr[k + gap];</span><br><span class="line">                    arr[k + gap] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-选择排序"><a href="#5-选择排序" class="headerlink" title="5. 选择排序"></a>5. 选择排序</h1><p>遍历整个序列，将最小的数放在最前面。</p><p>遍历剩下的序列，将最小的数放在最前面。</p><p>重复第二步，直到只剩下一个数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 选择排序</span></span><br><span class="line"><span class="comment"> * 时间复杂度O(n²) 空间复杂度O(1)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123; <span class="comment">//循环次数</span></span><br><span class="line">        <span class="keyword">int</span> min = arr[i];<span class="comment">//等会用来放最小值</span></span><br><span class="line">        <span class="keyword">int</span> index = i;<span class="comment">//用来放最小值的索引</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123; <span class="comment">//找到最小值</span></span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; min) &#123;</span><br><span class="line">                min = arr[j];</span><br><span class="line">                index = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//内层循环结束后进行交换</span></span><br><span class="line">        arr[index] = arr[i];<span class="comment">//当前值放到最小值所在位置</span></span><br><span class="line">        arr[i] = min;<span class="comment">//当前位置放最小值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-堆排序"><a href="#6-堆排序" class="headerlink" title="6. 堆排序"></a>6. 堆排序</h1><p>对简单选择排序的优化。</p><p>将序列构建成大顶堆。</p><p>将根节点与最后一个节点交换，然后断开最后一个节点。</p><p>重复第一、二步，直到所有节点断开。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line">           <span class="keyword">int</span> len=a.length;</span><br><span class="line">           <span class="comment">//循环建堆  </span></span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len-<span class="number">1</span>;i++)&#123;</span><br><span class="line">               <span class="comment">//建堆  </span></span><br><span class="line">               buildMaxHeap(a,len-<span class="number">1</span>-i);</span><br><span class="line">               <span class="comment">//交换堆顶和最后一个元素  </span></span><br><span class="line">               swap(a,<span class="number">0</span>,len-<span class="number">1</span>-i);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="comment">//交换方法</span></span><br><span class="line">       <span class="function"><span class="keyword">private</span>  <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">int</span> tmp=data[i];</span><br><span class="line">           data[i]=data[j];</span><br><span class="line">           data[j]=tmp;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//对data数组从0到lastIndex建大顶堆  </span></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buildMaxHeap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> lastIndex)</span> </span>&#123;</span><br><span class="line">           <span class="comment">//从lastIndex处节点（最后一个节点）的父节点开始  </span></span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> i=(lastIndex-<span class="number">1</span>)/<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">               <span class="comment">//k保存正在判断的节点  </span></span><br><span class="line">               <span class="keyword">int</span> k=i;</span><br><span class="line">               <span class="comment">//如果当前k节点的子节点存在  </span></span><br><span class="line">               <span class="keyword">while</span>(k*<span class="number">2</span>+<span class="number">1</span>&lt;=lastIndex)&#123;</span><br><span class="line">                   <span class="comment">//k节点的左子节点的索引  </span></span><br><span class="line">                   <span class="keyword">int</span> biggerIndex=<span class="number">2</span>*k+<span class="number">1</span>;</span><br><span class="line">                   <span class="comment">//如果biggerIndex小于lastIndex，即biggerIndex+1代表的k节点的右子节点存在  </span></span><br><span class="line">                   <span class="keyword">if</span>(biggerIndex&lt;lastIndex)&#123;</span><br><span class="line">                       <span class="comment">//若果右子节点的值较大  </span></span><br><span class="line">                       <span class="keyword">if</span>(data[biggerIndex]&lt;data[biggerIndex+<span class="number">1</span>])&#123;</span><br><span class="line">                           <span class="comment">//biggerIndex总是记录较大子节点的索引  </span></span><br><span class="line">                           biggerIndex++;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="comment">//如果k节点的值小于其较大的子节点的值  </span></span><br><span class="line">                   <span class="keyword">if</span>(data[k]&lt;data[biggerIndex])&#123;</span><br><span class="line">                       <span class="comment">//交换他们  </span></span><br><span class="line">                       swap(data,k,biggerIndex);</span><br><span class="line">                       <span class="comment">//将biggerIndex赋予k，开始while循环的下一次循环，重新保证k节点的值大于其左右子节点的值  </span></span><br><span class="line">                       k=biggerIndex;</span><br><span class="line">                   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h1 id="7-归并排序"><a href="#7-归并排序" class="headerlink" title="7. 归并排序"></a>7. 归并排序</h1><p>速度仅次于快速排序，内存少的时候使用，可以进行并行计算的时候使用。</p><p>选择相邻两个数组成一个有序序列。</p><p>选择相邻的两个有序序列组成一个有序序列。</p><p>重复第二步，直到全部组成一个有序序列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;  </span><br><span class="line">           <span class="keyword">int</span> t = <span class="number">1</span>;<span class="comment">// 每组元素个数  </span></span><br><span class="line">           <span class="keyword">int</span> size = right - left + <span class="number">1</span>;  </span><br><span class="line">           <span class="keyword">while</span> (t &lt; size) &#123;  </span><br><span class="line">               <span class="keyword">int</span> s = t;<span class="comment">// 本次循环每组元素个数  </span></span><br><span class="line">               t = <span class="number">2</span> * s;  </span><br><span class="line">               <span class="keyword">int</span> i = left;  </span><br><span class="line">               <span class="keyword">while</span> (i + (t - <span class="number">1</span>) &lt; size) &#123;  </span><br><span class="line">                   merge(a, i, i + (s - <span class="number">1</span>), i + (t - <span class="number">1</span>));  </span><br><span class="line">                   i += t;  </span><br><span class="line">               &#125;  </span><br><span class="line">               <span class="keyword">if</span> (i + (s - <span class="number">1</span>) &lt; right)  </span><br><span class="line">                   merge(a, i, i + (s - <span class="number">1</span>), right);  </span><br><span class="line">           &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">       </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> p, <span class="keyword">int</span> q, <span class="keyword">int</span> r)</span> </span>&#123;  </span><br><span class="line">           <span class="keyword">int</span>[] B = <span class="keyword">new</span> <span class="keyword">int</span>[data.length];  </span><br><span class="line">           <span class="keyword">int</span> s = p;  </span><br><span class="line">           <span class="keyword">int</span> t = q + <span class="number">1</span>;  </span><br><span class="line">           <span class="keyword">int</span> k = p;  </span><br><span class="line">           <span class="keyword">while</span> (s &lt;= q &amp;&amp; t &lt;= r) &#123;  </span><br><span class="line">               <span class="keyword">if</span> (data[s] &lt;= data[t]) &#123;  </span><br><span class="line">                   B[k] = data[s];  </span><br><span class="line">                   s++;  </span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                   B[k] = data[t];  </span><br><span class="line">                   t++;  </span><br><span class="line">               &#125;  </span><br><span class="line">               k++;  </span><br><span class="line">           &#125;  </span><br><span class="line">           <span class="keyword">if</span> (s == q + <span class="number">1</span>)  </span><br><span class="line">               B[k++] = data[t++];  </span><br><span class="line">           <span class="keyword">else</span>  </span><br><span class="line">               B[k++] = data[s++];  </span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = p; i &lt;= r; i++)  </span><br><span class="line">               data[i] = B[i];  </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="8-基数排序"><a href="#8-基数排序" class="headerlink" title="8. 基数排序"></a>8. 基数排序</h1><p>用于大量数，很长的数进行排序时。</p><p>将所有的数的个位数取出，按照个位数进行排序，构成一个序列。</p><p>将新构成的所有的数的十位数取出，按照十位数进行排序，构成一个序列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">baseSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">               <span class="comment">//首先确定排序的趟数;    </span></span><br><span class="line">               <span class="keyword">int</span> max = a[<span class="number">0</span>];</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (a[i] &gt; max) &#123;</span><br><span class="line">                       max = a[i];</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line">               <span class="comment">//判断位数;    </span></span><br><span class="line">               <span class="keyword">while</span> (max &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                   max /= <span class="number">10</span>;</span><br><span class="line">                   time++;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">//建立10个队列;    </span></span><br><span class="line">               List&lt;ArrayList&lt;Integer&gt;&gt; queue = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                   ArrayList&lt;Integer&gt; queue1 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">                   queue.add(queue1);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">//进行time次分配和收集;    </span></span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; time; i++) &#123;</span><br><span class="line">                   <span class="comment">//分配数组元素;    </span></span><br><span class="line">                   <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.length; j++) &#123;</span><br><span class="line">                       <span class="comment">//得到数字的第time+1位数;  </span></span><br><span class="line">                       <span class="keyword">int</span> x = a[j] % (<span class="keyword">int</span>) Math.pow(<span class="number">10</span>, i + <span class="number">1</span>) / (<span class="keyword">int</span>) Math.pow(<span class="number">10</span>, i);</span><br><span class="line">                       ArrayList&lt;Integer&gt; queue2 = queue.get(x);</span><br><span class="line">                       queue2.add(a[j]);</span><br><span class="line">                       queue.set(x, queue2);</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">//元素计数器;    </span></span><br><span class="line">                   <span class="comment">//收集队列元素;    </span></span><br><span class="line">                   <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">10</span>; k++) &#123;</span><br><span class="line">                       <span class="keyword">while</span> (queue.get(k).size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                           ArrayList&lt;Integer&gt; queue3 = queue.get(k);</span><br><span class="line">                           a[count] = queue3.get(<span class="number">0</span>);</span><br><span class="line">                           queue3.remove(<span class="number">0</span>);</span><br><span class="line">                           count++;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="9-总结"><a href="#9-总结" class="headerlink" title="9. 总结"></a>9. 总结</h1><table><thead><tr><th>排序法</th><th>平均时间</th><th>最小时间</th><th>最大时间</th><th>稳定度</th><th>额外空间</th><th>备注</th></tr></thead><tbody><tr><td>冒泡排序</td><td>O(n2)</td><td>O(n)</td><td>O(n2)</td><td>稳定</td><td>O(1)</td><td>n小时较好</td></tr><tr><td>选择排序</td><td>O(n2)</td><td>O(n2)</td><td>O(n2)</td><td>不稳定</td><td>O(1)</td><td>n小时较好</td></tr><tr><td>插入排序</td><td>O(n2)</td><td>O(n)</td><td>O(n2)</td><td>稳定</td><td>O(1)</td><td>大部分已排序时较好</td></tr><tr><td>基数排序</td><td>O(logRB)</td><td>O(n)</td><td>O(logRB)</td><td>稳定</td><td>O(n)</td><td>B是真数(0-9)，R是基数(个十百)</td></tr><tr><td>Shell排序</td><td>O(nlogn)</td><td>-</td><td>O(ns) 1&lt;s&lt;2</td><td>不稳定</td><td>O(1)</td><td>s是所选分组</td></tr><tr><td>快速排序</td><td>O(nlogn)</td><td>O(n2)</td><td>O(n2)</td><td>不稳定</td><td>O(logn)</td><td>n大时较好</td></tr><tr><td>归并排序</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(nlogn)</td><td>稳定</td><td>O(n)</td><td>要求稳定性时较好</td></tr><tr><td>堆排序</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(nlogn)</td><td>不稳定</td><td>O(1)</td><td>n大时较好</td></tr></tbody></table><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><code>https://www.cnblogs.com/shixiangwan/p/6724292.html</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录了几种常见的排序算法的Java实现，如&lt;code&gt;冒泡排序&lt;/code&gt;、&lt;code&gt;快速排序&lt;/code&gt;、&lt;code&gt;直接插入排序&lt;/code&gt;、&lt;code&gt;希尔排序&lt;/code&gt;、&lt;code&gt;选择排序&lt;/code&gt;等等。&lt;br&gt;在学数据结构与算法时的部分记录，感觉很难╮(╯▽╰)╭，还需继续努力。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.lixueduan.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.lixueduan.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java运行时数据区</title>
    <link href="https://www.lixueduan.com/posts/9806100a.html"/>
    <id>https://www.lixueduan.com/posts/9806100a.html</id>
    <published>2019-02-02T14:00:00.000Z</published>
    <updated>2019-02-07T06:41:30.278Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要讲的是Java运行时数据区，包括线程私有的<code>程序计数器</code>，<code>虚拟机栈</code>，<code>本地方法栈</code>和线程共享的<code>堆</code>，<code>方法区</code>等。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/jvm/runtime-data-areas.png" alt="Java运行时数据区"></p><p><strong>线程私有的</strong>：<code>程序计数器</code> 、<code>虚拟机栈</code>、<code>本地方法栈</code></p><p><strong>线程共享的</strong>： <code>堆</code>、<code>方法区</code></p><h3 id="1-1-程序计数器"><a href="#1-1-程序计数器" class="headerlink" title="1.1 程序计数器"></a>1.1 程序计数器</h3><p>程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。</p><p><strong>字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完。</strong></p><p>另外，<strong>为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。</strong></p><p><strong>程序计数器主要有两个作用：</strong></p><ol><li>字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。</li><li>在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。</li></ol><p><strong>注意：程序计数器是唯一一个不会出现OutOfMemoryError的内存区域，它的生命周期随着线程的创建而创建，随着线程的结束而死亡。</strong></p><h3 id="1-2-虚拟机栈"><a href="#1-2-虚拟机栈" class="headerlink" title="1.2 虚拟机栈"></a>1.2 虚拟机栈</h3><p><strong>Java虚拟机栈也是线程私有的，它的生命周期和线程相同，描述的是 Java 方法执行的内存模型。</strong></p><p><strong>Java 内存可以粗糙的区分为堆内存（Heap）和栈内存(Stack),其中栈就是现在说的虚拟机栈，或者说是虚拟机栈中局部变量表部分。</strong> </p><p>Java虚拟机栈是由一个个<code>栈帧</code>组成，而每个栈帧中都拥有：<code>局部变量表</code>、<code>操作数栈</code>、<code>动态链接</code>、<code>方法出口</code>。</p><p>每个方法在执行时都会创建一个栈帧,每一个方法从调用到执行完成的过程就是一个栈帧在虚拟机中的入栈到出栈的过程。</p><h4 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h4><p>存放了编译时期可知的各种基本类型（Boolean，byte，char,short,int.float.long,double）、对象引用（reference类型）和returnAddress（指向了一条字节码指令的地址）。<code>局部变量表的创建是在方法被执行的时候,随着栈帧的创建而创建</code>.而且,<code>局部变量表的大小在编译时期就可以确定下来了</code>,在创建的时候只需要分配实现规定好的大小即可.此外,在<code>方法运行过程中局部变量表的大小是不会发生改变的</code>。</p><h4 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h4><p>后进先出LIFO，最大深度由编译期确定。栈帧刚建立时，操作数栈为空，执行方法操作时，操作数栈用于存放JVM从局部变量表复制的常量或者变量，提供提取，及结果入栈，也用于存放调用方法需要的参数及接受方法返回的结果。<br>操作数栈可以存放一个jvm中定义的任意数据类型的值。在任意时刻，操作数栈都一个固定的栈深度，基本类型除了long、double占用两个深度，其它占用一个深度.</p><h4 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h4><p>每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接。Class文件的常量池中存在有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用为参数。这些符号引用，一部分会在类加载阶段或第一次使用的时候转化为直接引用（如final、static域等），称为静态解析，另一部分将在每一次的运行期间转化为直接引用，这部分称为动态连接。</p><h4 id="方法返回地址"><a href="#方法返回地址" class="headerlink" title="方法返回地址"></a>方法返回地址</h4><p>当一个方法被执行后，有两种方式退出该方法：执行引擎遇到了任意一个方法返回的字节码指令或遇到了异常，并且该异常没有在方法体内得到处理。无论采用何种退出方式，在方法退出之后，都需要返回到方法被调用的位置，程序才能继续执行。方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层方法的执行状态。一般来说，方法正常退出时，调用者的PC计数器的值就可以作为返回地址，栈帧中很可能保存了这个计数器值，而方法异常退出时，返回地址是要通过异常处理器来确定的，栈帧中一般不会保存这部分信息。</p><p>方法退出的过程实际上等同于把当前栈帧出栈，因此退出时可能执行的操作有：恢复上层方法的局部变量表和操作数栈，如果有返回值，则把它压入调用者栈帧的操作数栈中，调整PC计数器的值以指向方法调用指令后面的一条指令。</p><p><strong>Java 虚拟机栈会出现两种异常：StackOverFlowError 和 OutOfMemoryError。</strong></p><ul><li><strong>StackOverFlowError：</strong> 若Java虚拟机栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前Java虚拟机栈的最大深度的时候，就抛出StackOverFlowError异常。</li><li><strong>OutOfMemoryError：</strong> 若 Java 虚拟机栈的内存大小允许动态扩展，且当线程请求栈时内存用完了，无法再动态扩展了，此时抛出OutOfMemoryError异常。</li></ul><p>Java 虚拟机栈也是线程私有的，每个线程都有各自的Java虚拟机栈，而且随着线程的创建而创建，随着线程的死亡而死亡。</p><h3 id="1-3-本地方法栈"><a href="#1-3-本地方法栈" class="headerlink" title="1.3 本地方法栈"></a>1.3 本地方法栈</h3><p>和虚拟机栈所发挥的作用非常相似，区别是： <strong>虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。</strong> 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。</p><p>本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。</p><p>方法执行完毕后相应的栈帧也会出栈并释放内存空间，也会出现 StackOverFlowError 和 OutOfMemoryError 两种异常。</p><h3 id="1-4-堆"><a href="#1-4-堆" class="headerlink" title="1.4 堆"></a>1.4 堆</h3><p>Java 虚拟机所管理的内存中最大的一块，Java 堆是所有线程共享的一块内存区域，在虚拟机启动时创建。<strong>此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。</strong>Java虚拟机规范中说的是：所有的对象实例以及数组都要在堆上分配内存。但是随着<code>JIT(just in time)编译器</code>的发展与<code>逃逸分析</code>技术的成熟，<code>栈上分配</code>，<code>标量替换</code>优化技术将会导致一些微妙的变化，所有对象都分配在堆上也变得不是那么绝对了。</p><p>Java 堆是垃圾收集器管理的主要区域，因此也被称作<code>GC堆（Garbage Collected Heap）</code><strong>.从垃圾回收的角度，由于现在收集器基本都采用分代垃圾收集算法，所以Java堆还可以细分为：<code>新生代</code>和<code>老年代</code>：再细致一点有：<code>Eden空间</code>、<code>From Survivor空间</code>、<code>To Survivor空间</code>等。</strong>进一步划分的目的是更好地回收内存，或者更快地分配内存。**</p><h3 id="1-5-方法区"><a href="#1-5-方法区" class="headerlink" title="1.5 方法区"></a>1.5 方法区</h3><p><strong>方法区与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的<code>类信息</code>、<code>常量</code>、<code>静态变量</code>、<code>即时编译器编译后的代码</code>等数据。</strong></p><p><strong>虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做 Non-Heap（非堆），目的应该是与 Java 堆区分开来。</strong></p><p>HotSpot 虚拟机中方法区也常被称为 <strong>“永久代”</strong>，本质上两者并不等价。仅仅是因为 HotSpot 虚拟机设计团队用永久代来实现方法区而已，这样 HotSpot 虚拟机的垃圾收集器就可以像管理 Java 堆一样管理这部分内存了。但是这并不是一个好主意，因为这样更容易遇到内存溢出问题。</p><p><strong>相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入方法区后就“永久存在”了。</strong></p><h3 id="1-6-常量池"><a href="#1-6-常量池" class="headerlink" title="1.6 常量池"></a>1.6 常量池</h3><h4 id="全局字符串池"><a href="#全局字符串池" class="headerlink" title="全局字符串池"></a>全局字符串池</h4><p>全局字符串池里的内容是在类加载完成，经过验证，<strong>准备阶段之后</strong>在堆中生成字符串对象实例，然后将该字符串对象实例的引用值存到string pool中（记住：string pool中存的是引用值而不是具体的实例对象，具体的实例对象是在堆中开辟的一块空间存放的。）。 在HotSpot VM里实现的string pool功能的是一个StringTable类，它是一个哈希表，里面存的是驻留字符串(也就是我们常说的用双引号括起来的)的引用（而不是驻留字符串实例本身），也就是说在堆中的某些字符串实例被这个StringTable引用之后就等同被赋予了”驻留字符串”的身份。这个StringTable在每个HotSpot VM的实例只有一份，被所有的类共享。</p><h4 id="静态常量池"><a href="#静态常量池" class="headerlink" title="静态常量池"></a>静态常量池</h4><p>也叫<code>class文件常量池（class constant pool）</code>,Class文件中除了有类的版本，字段，方法，接口等描述信息外还有一项信息是<code>常量池</code>,用于存放编译期生成的各种<code>字面量</code>和<code>符号引用</code>，这部分内容将在<code>类加载后</code>进入方法区的<code>运行时常量池</code>。</p><p> <code>字面量</code>就是我们所说的常量概念，如文本字符串、被声明为final的常量值等。</p><p> <code>符号引用</code>是一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可（它与直接引用区分一下，直接引用一般是指向方法区的本地指针，相对偏移量或是一个能间接定位到目标的句柄）。一般包括下面三类常量：</p><ul><li>类和接口的全限定名</li><li>字段的名称和描述符</li><li>方法的名称和描述符</li></ul><h4 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><p><code>运行时常量池</code>是<code>方法区</code>的一部分。Class文件中除了有类的版本，字段，方法，接口等描述信息外还有一项信息是<code>常量池</code>,用于存放编译期生成的各种<code>字面量</code>和<code>符号引用</code>，这部分内容将在<code>类加载后</code>进入方法区的<code>运行时常量池</code>。</p><p>既然运行时常量池时方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出 OutOfMemoryError 异常。</p><p><strong>JDK1.7及之后版本的 JVM 已经将运行时常量池从方法区中移了出来，在 Java 堆（Heap）中开辟了一块区域存放运行时常量池。</strong></p><p><strong>JDK1.8后放在一个独立空间里面，叫做“元空间”</strong> </p><p>jvm在执行某个类的时候，必须经过<code>加载</code>、<code>连接</code>、<code>初始化</code>，而连接又包括<code>验证</code>、<code>准备</code>、<code>解析</code>三个阶段。而当类加载到内存中后，jvm就会将class常量池中的内容存放到运行时常量池中，由此可知，<code>运行时常量池也是每个类都有一个</code>。在上面我也说了，<code>class常量池中存的是字面量和符号引用</code>，也就是说他们存的并不是对象的实例，而是对象的符号引用值。而经过<code>解析（resolve）</code>之后，也就是把符号引用替换为直接引用，解析的过程会去查询全局字符串池，也就是我们上面所说的StringTable，以保证运行时常量池所引用的字符串与全局字符串池中所引用的是一致的。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>1.全局常量池在每个VM中只有一份，存放的是字符串常量的引用值。</li><li>2.class常量池是在编译的时候每个class都有的，在编译阶段，存放的是常量的符号引用。</li><li>3.运行时常量池是在类加载完成之后，将每个class常量池中的符号引用值转存到运行时常量池中，也就是说，每个class都有一个运行时常量池，类在解析之后，将符号引用替换成直接引用，与全局常量池中的引用值保持一致。</li></ul><h3 id="1-7-直接内存"><a href="#1-7-直接内存" class="headerlink" title="1.7 直接内存"></a>1.7 直接内存</h3><p>直接内存并不是虚拟机运行时数据区的一部分，但是也频繁被用到，也可能导致OOM,虚拟机内存+直接内存超过物理内存时。</p><p>在JDK1.4出现的NIO类中引入了一个基于Channel和Buffer的IO方式，它可以直接使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作，能在一些场合中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>《深入理解Java虚拟机》</p><p><code>https://blog.csdn.net/qq_26222859/article/details/73135660</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要讲的是Java运行时数据区，包括线程私有的&lt;code&gt;程序计数器&lt;/code&gt;，&lt;code&gt;虚拟机栈&lt;/code&gt;，&lt;code&gt;本地方法栈&lt;/code&gt;和线程共享的&lt;code&gt;堆&lt;/code&gt;，&lt;code&gt;方法区&lt;/code&gt;等。&lt;/p&gt;
    
    </summary>
    
      <category term="JVM" scheme="https://www.lixueduan.com/categories/JVM/"/>
    
    
      <category term="JVM" scheme="https://www.lixueduan.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Linux下安装RabbitMQ</title>
    <link href="https://www.lixueduan.com/posts/b84a2c6c.html"/>
    <id>https://www.lixueduan.com/posts/b84a2c6c.html</id>
    <published>2019-01-21T14:00:00.000Z</published>
    <updated>2019-02-06T01:12:00.986Z</updated>
    
    <content type="html"><![CDATA[<p>本章主要讲了如何通过解压方式在Linux下安装RabbitMQ和Erlang，超级详细的安装过程，和安装过程中遇到的一些问题。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><p>软件统一放在<code>/usr/software</code>下 解压后放在单独的文件夹下<code>/usr/locac/opt/rabbitmq</code>,<code>/usr/local/opt/erlang</code></p><h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h2 id="0-环境准备"><a href="#0-环境准备" class="headerlink" title="0. 环境准备"></a>0. 环境准备</h2><h3 id="1-版本问题"><a href="#1-版本问题" class="headerlink" title="1.版本问题"></a>1.版本问题</h3><p>Erlang和RabbitMQ版本必须对应才行，不然可能会出错。</p><p><strong>官网信息如下 RabbitMQ Erlang Version Requirements</strong></p><p>Erlang/OTP versions <strong>older than 20.3 are not supported</strong> by RabbitMQ versions released in 2019.</p><p>RabbitMQ <strong>versions prior to 3.7.7 do not support Erlang/OTP 21</strong> or newer.</p><p>RabbitMQ version3.7.7–3.7.10 需要的Erlang版本最低为20.3.X,最高为21.X</p><table><thead><tr><th>RabbitMQ version</th><th>Minimum required Erlang/OTP</th><th>Maximum supported Erlang/OTP</th></tr></thead><tbody><tr><td><strong>3.7.7—3.7.10</strong></td><td><strong>20.3.X</strong></td><td><strong>21.X</strong></td></tr><tr><td><strong>3.7.0–3.7.6</strong></td><td><strong>19.3</strong></td><td><strong>20.3.X</strong></td></tr></tbody></table><p>具体信息在这里<code>http://www.rabbitmq.com/which-erlang.html</code></p><p>这里选择的版本是 <code>Erlang:21.2</code>,<code>RabbitMQ3.7.10</code>,<code>Linux:CentOS 7</code></p><h3 id="2-依赖下载"><a href="#2-依赖下载" class="headerlink" title="2. 依赖下载"></a>2. 依赖下载</h3><p>安装<code>rabbitmq</code>需要下载以下依赖，这里可以提前下载上。</p><p><code># yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel</code></p><p><code># yum install xmlto -y</code></p><h2 id="1-Erlang安装"><a href="#1-Erlang安装" class="headerlink" title="1. Erlang安装"></a>1. Erlang安装</h2><h3 id="1-1-下载"><a href="#1-1-下载" class="headerlink" title="1.1 下载"></a>1.1 下载</h3><p>安装RabbitMQ之前需要先安装Erlang.</p><p>下载地址：<code>http://www.erlang.org/downloads</code></p><p>文件<code>otp_src_21.2.tar.gz</code></p><h3 id="1-2-解压"><a href="#1-2-解压" class="headerlink" title="1.2 解压"></a>1.2 解压</h3><p>将压缩包上传到虚拟机中，我是放在/usr/software目录下的</p><p><code># tar xvf otp_src_21.2.tar.gz</code>  解压文件</p><p>复制一份到/usr/local/opt/erlang-software</p><p><code># cp otp_src_21.2  /usr/local/opt/erlang-software -r</code></p><p>创建erlang安装目录： /usr/local/opt/erlang  </p><h3 id="1-3-编译"><a href="#1-3-编译" class="headerlink" title="1.3 编译"></a>1.3 编译</h3><p>进入到/usr/local/opt/erlang-software目录下</p><p><code># cd /usr/local/opt/erlang-software</code></p><p>配置安装路径编译代码：<code># ./configure --prefix=/usr/local/opt/erlang</code></p><p><code># make &amp;&amp; make install</code> 执行编译</p><h3 id="1-4-环境变量配置"><a href="#1-4-环境变量配置" class="headerlink" title="1.4 环境变量配置"></a>1.4 环境变量配置</h3><p>配置Erlang环境变量,<code># vi /etc/profile</code> 添加以下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:/usr/local/opt/erlang/bin</span><br></pre></td></tr></table></figure><p> <code># source /etc/profile</code>使得文件生效</p><h3 id="1-5-验证"><a href="#1-5-验证" class="headerlink" title="1.5 验证"></a>1.5 验证</h3><p>验证erlang是否安装成功：<code># erl</code> 进入如下界面就说明 配置好了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# erl</span><br><span class="line">Erlang/OTP 21 [erts-10.2] [source] [64-bit] [smp:1:1] [ds:1:1:10] [async-threads:1]</span><br><span class="line"></span><br><span class="line">Eshell V10.2  (abort with ^G)</span><br><span class="line">1&gt; </span><br><span class="line">`</span><br></pre></td></tr></table></figure><h2 id="2-RabbitMQ安装"><a href="#2-RabbitMQ安装" class="headerlink" title="2. RabbitMQ安装"></a>2. RabbitMQ安装</h2><h3 id="2-1-下载"><a href="#2-1-下载" class="headerlink" title="2.1 下载"></a>2.1 下载</h3><p>官网：<code>http://www.rabbitmq.com/releases/rabbitmq-server</code></p><p>这里下载3.7.10 :<code>http://www.rabbitmq.com/install-generic-unix.html</code></p><p>文件：<code>rabbitmq-server-generic-unix-3.7.10.tar.xz</code></p><h3 id="2-2-解压"><a href="#2-2-解压" class="headerlink" title="2.2 解压"></a>2.2 解压</h3><p>文件是xz格式的，解压后得到tar格式文件。</p><p><code># xz -d rabbitmq-server-generic-unix-3.7.10.tar.xz</code></p><p><code># tar -xvf rabbitmq-server-generic-unix-3.7.10.tar</code></p><p>复制到/usr/local/opt/rabbitmq目录下<code># cp -r rabbitmq_server-3.7.10/ /usr/local/opt/rabbitmq</code></p><h3 id="2-3-环境变量配置"><a href="#2-3-环境变量配置" class="headerlink" title="2.3 环境变量配置"></a>2.3 环境变量配置</h3><p>配置rabbitmq环境变量,<code># vi /etc/profile</code> 添加以下内容</p><p><code>export PATH=$PATH:/usr/local/opt/rabbitmq/sbin</code></p><p>环境变量生效：<code>source /etc/profile</code></p><h3 id="2-4-使用"><a href="#2-4-使用" class="headerlink" title="2.4 使用"></a>2.4 使用</h3><p>进入/usr/local/opt/rabbitmq/sbin目录</p><p>启动服务：<code># ./rabbitmq-server -detached</code></p><p>查看服务状态：<code># ./rabbitmqctl status</code></p><p>关闭服务：<code># ./rabbitmqctl stop</code></p><h3 id="2-5-配置网页插件"><a href="#2-5-配置网页插件" class="headerlink" title="2.5 配置网页插件"></a>2.5 配置网页插件</h3><p>首先创建目录，否则可能报错：<code># mkdir /etc/rabbitmq</code></p><p>启用插件：<code># ./rabbitmq-plugins enable rabbitmq_management</code></p><p>启动mq：<code># ./rabbitmq-server -detached</code></p><p>配置linux 端口： 15672 网页管理，  5672 AMQP端口</p><p>然后访问<code>http://192.168.5.154:15672/</code></p><p>这里是需要登录了。</p><p>rabbitmq默认会创建guest账号，只能用于localhost登录页面管理员，需要自己创建账号。</p><h3 id="2-6-添加账户"><a href="#2-6-添加账户" class="headerlink" title="2.6 添加账户"></a>2.6 添加账户</h3><p>查看mq用户：<code># rabbitmqctl list_users</code></p><p>查看用户权限：<code># rabbitmqctl list_user_permissions guest</code></p><p>新增用户： <code># rabbitmqctl add_user root root</code>  用户名root,密码root</p><p>赋予管理员权限：</p><p><code>rabbitmqctl set_user_tags root administrator</code></p><p><code>rabbitmqctl set_permissions -p &quot;/&quot; root &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</code></p><h2 id="3-问题"><a href="#3-问题" class="headerlink" title="3. 问题"></a>3. 问题</h2><p>1.启动报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost sbin]# ./rabbitmq-server start</span><br><span class="line"></span><br><span class="line">BOOT FAILED</span><br><span class="line">===========</span><br><span class="line">=INFO REPORT==== <span class="number">21</span>-Jan-<span class="number">2019</span>::<span class="number">20</span>:<span class="number">49</span>:<span class="number">29.302765</span> ===</span><br><span class="line">Error description:</span><br><span class="line">   noproc</span><br><span class="line">   </span><br><span class="line"><span class="function">Log <span class="title">files</span> <span class="params">(may contain more information)</span>:</span></span><br><span class="line"><span class="function">   /usr/local/opt/rabbitmq/<span class="keyword">var</span>/log/rabbitmq/rabbit@localhost.log</span></span><br><span class="line"><span class="function">   /usr/local/opt/rabbitmq/<span class="keyword">var</span>/log/rabbitmq/rabbit@localhost-sasl.log</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Stack trace:</span></span><br><span class="line"><span class="function">   [</span>&#123;gen,do_for_proc,<span class="number">2</span>,[&#123;file,<span class="string">"gen.erl"</span>&#125;,&#123;line,<span class="number">228</span>&#125;]&#125;,</span><br><span class="line">    &#123;gen_event,rpc,<span class="number">2</span>,[&#123;file,<span class="string">"gen_event.erl"</span>&#125;,&#123;line,<span class="number">239</span>&#125;]&#125;,</span><br><span class="line">    &#123;rabbit,ensure_working_log_handlers,<span class="number">0</span>,</span><br><span class="line">            [&#123;file,<span class="string">"src/rabbit.erl"</span>&#125;,&#123;line,<span class="number">856</span>&#125;]&#125;,</span><br><span class="line">    &#123;rabbit,<span class="string">'-boot/0-fun-0-'</span>,<span class="number">0</span>,[&#123;file,<span class="string">"src/rabbit.erl"</span>&#125;,&#123;line,<span class="number">288</span>&#125;]&#125;,</span><br><span class="line">    &#123;rabbit,start_it,<span class="number">1</span>,[&#123;file,<span class="string">"src/rabbit.erl"</span>&#125;,&#123;line,<span class="number">424</span>&#125;]&#125;,</span><br><span class="line">    &#123;init,start_em,<span class="number">1</span>,[]&#125;,</span><br><span class="line">    &#123;init,do_boot,<span class="number">3</span>,[]&#125;]</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">"init terminating in do_boot"</span>,noproc&#125;</span><br><span class="line"><span class="function">init terminating in <span class="title">do_boot</span> <span class="params">(noproc)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Crash dump is being written to: erl_crash.dump...done</span></span><br></pre></td></tr></table></figure><p>这个问题网上查了一下，有的说是权限问题，也有说是erlang和rabbitmq版本对应不上，暂时没解决。</p><p>以解决，确实是版本问题，erlang版本和rabbitmq的版本对应不上，最前面单独写了这个关于版本的问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章主要讲了如何通过解压方式在Linux下安装RabbitMQ和Erlang，超级详细的安装过程，和安装过程中遇到的一些问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://www.lixueduan.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://www.lixueduan.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法与小技巧</title>
    <link href="https://www.lixueduan.com/posts/9b0e40a3.html"/>
    <id>https://www.lixueduan.com/posts/9b0e40a3.html</id>
    <published>2019-01-18T14:00:00.000Z</published>
    <updated>2019-02-06T01:11:18.948Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了关于markdown的一些常用语法和技巧，让大家更好的写文章。自从17年前开始在 GitHub 玩耍，接触到 Markdown 之后，就感觉很有意思。不过也仅仅是了解一下基本语法，所以找了一下Markdown的语法用法来学习学习。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><p>如下：</p><p><em>注：如下技巧大多是利用 Markdown 兼容部分 HTML 标签的特性来完成，不一定在所有网站和软件里都完全支持，主要以 GitHub 支持为准。</em></p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># This is an &lt;h1&gt; tag</span><br><span class="line">## This is an &lt;h2&gt; tag</span><br><span class="line">###### This is an &lt;h6&gt; tag</span><br></pre></td></tr></table></figure><h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*This text will be italic*</span><br><span class="line">_This will also be italic_</span><br><span class="line"></span><br><span class="line">**This text will be bold**</span><br><span class="line">__This will also be bold__</span><br><span class="line"></span><br><span class="line">_You **can** combine them_</span><br></pre></td></tr></table></figure><p><em>This text will be italic</em><br><em>This will also be italic</em></p><p><strong>This text will be bold</strong><br><strong>This will also be bold</strong></p><p><em>You <strong>can</strong> combine them</em></p><h2 id="清单"><a href="#清单" class="headerlink" title="清单"></a>清单</h2><h3 id="无序"><a href="#无序" class="headerlink" title="无序"></a>无序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* Item 1</span><br><span class="line">* Item 2</span><br><span class="line">  * Item 2a</span><br><span class="line">  * Item 2b</span><br></pre></td></tr></table></figure><ul><li>Item 1</li><li>Item 2<ul><li>Item 2a</li><li>Item 2b</li></ul></li></ul><h3 id="有序"><a href="#有序" class="headerlink" title="有序"></a>有序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. Item 1</span><br><span class="line">1. Item 2</span><br><span class="line">1. Item 3</span><br><span class="line">   1. Item 3a</span><br><span class="line">   1. Item 3b</span><br></pre></td></tr></table></figure><ol><li>Item 1</li><li>Item 2</li><li>Item 3<ol><li>Item 3a</li><li>Item 3b</li></ol></li></ol><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![GitHub Logo](/images/logo.png)</span><br><span class="line">Format: ![Alt Text](url)</span><br></pre></td></tr></table></figure><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://github.com - automatic!</span><br><span class="line">[GitHub](http://github.com)</span><br></pre></td></tr></table></figure><p><a href="http://github.com" target="_blank" rel="noopener">http://github.com</a> - automatic!<br><a href="http://github.com" target="_blank" rel="noopener">GitHub</a></p><h2 id="引用文字"><a href="#引用文字" class="headerlink" title="引用文字"></a>引用文字</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">As Kanye West said:</span><br><span class="line"></span><br><span class="line">&gt; We&apos;re living the future so</span><br><span class="line">&gt; the present is our past.</span><br></pre></td></tr></table></figure><p>As Kanye West said:</p><blockquote><p>We’re living the future so<br>the present is our past.</p></blockquote><h2 id="内联代码"><a href="#内联代码" class="headerlink" title="内联代码"></a>内联代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I think you should use an</span><br><span class="line">`&lt;addr&gt;` element here instead.</span><br></pre></td></tr></table></figure><p>I think you should use an<br><code>&lt;addr&gt;</code> element here instead.</p><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>用两个波浪线（如<code>~~this~~</code>）包裹的任何单词都会显示为划掉。</p><p><del>这是被删除的内容</del></p><h2 id="在表格单元格里换行"><a href="#在表格单元格里换行" class="headerlink" title="在表格单元格里换行"></a>在表格单元格里换行</h2><p>借助于 HTML 里的 <code>&lt;br /&gt;</code> 实现。</p><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| Header1 | Header2                          |</span><br><span class="line">|---------|----------------------------------|</span><br><span class="line">| item 1  | 1. one&lt;br /&gt;2. two&lt;br /&gt;3. three |</span><br></pre></td></tr></table></figure><p>示例效果：</p><table><thead><tr><th>Header1</th><th>Header2</th></tr></thead><tbody><tr><td>item 1</td><td>1. one<br>2. two<br>3. three</td></tr></tbody></table><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p> 在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt; </p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p></blockquote></blockquote><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>三个或者三个以上的 - 或者 * 都可以。 </p><hr><hr><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">​```flow</span><br><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">&amp;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 表格</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">左对齐标题</th><th style="text-align:right">右对齐标题</th><th style="text-align:center">居中对齐标题</th></tr></thead><tbody><tr><td style="text-align:left">短文本</td><td style="text-align:right">中等文本</td><td style="text-align:center">稍微长一点的文本</td></tr><tr><td style="text-align:left">稍微长一点的文本</td><td style="text-align:right">短文本</td><td style="text-align:center">中等文本</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; //语法：</span><br><span class="line">&gt;</span><br><span class="line">&gt; 1）|、-、:之间的多余空格会被忽略，不影响布局。</span><br><span class="line">&gt; 2）默认标题栏居中对齐，内容居左对齐。</span><br><span class="line">&gt; 3）-:表示内容和标题栏居右对齐，:-表示内容和标题栏居左对齐，:-:表示内容和标题栏居中对齐。</span><br><span class="line">&gt; 4）内容和|之间的多余空格会被忽略，每行第一个|和最后一个|可以省略，-的数量至少有一个。</span><br><span class="line"></span><br><span class="line">表格在渲染之后很整洁好看，但是在文件源码里却可能是这样的：</span><br></pre></td></tr></table></figure><table><thead><tr><th>Header1</th><th>Header2</th></tr></thead><tbody><tr><td>a</td><td>a</td></tr><tr><td>ab</td><td>ab</td></tr><tr><td>abc</td><td>abc</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">不知道你能不能忍，反正我是不能忍。</span><br><span class="line"></span><br><span class="line">好在广大网友们的智慧是无穷的，在各种编辑器里为 Markdown 提供了表格格式化功能，比如我使用 Vim 编辑器，就有 [vim-table-mode](https://github.com/dhruvasagar/vim-table-mode) 插件，它能帮我自动将表格格式化成这样：</span><br></pre></td></tr></table></figure><table><thead><tr><th>Header1</th><th>Header2</th></tr></thead><tbody><tr><td>a</td><td>a</td></tr><tr><td>ab</td><td>ab</td></tr><tr><td>abc</td><td>abc</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">是不是看着舒服多了？</span><br><span class="line"></span><br><span class="line">如果你不使用 Vim，也没有关系，比如 Atom 编辑器的 [markdown-table-formatter](https://atom.io/packages/markdown-table-formatter) 插件，Sublime Text 3 的 [MarkdownTableFormatter](https://github.com/bitwiser73/MarkdownTableFormatter) 等等，都提供了类似的解决方案。</span><br><span class="line"></span><br><span class="line">## 使用 Emoji</span><br><span class="line"></span><br><span class="line">这个是 GitHub 对标准 Markdown 标记之外的扩展了，用得好能让文字生动一些。</span><br><span class="line"></span><br><span class="line">示例代码：</span><br></pre></td></tr></table></figure><p>我和我的小伙伴们都笑了。:smile:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">示例效果：</span><br><span class="line"></span><br><span class="line">我和我的小伙伴们都笑了。:smile:</span><br><span class="line"></span><br><span class="line">[Github支持的表情在这里哟](https://github.com/ikatyang/emoji-cheat-sheet/blob/master/README.md)</span><br><span class="line"></span><br><span class="line">## 行首缩进</span><br><span class="line"></span><br><span class="line">直接在 Markdown 里用空格和 Tab 键缩进在渲染后会被忽略掉，需要借助 HTML 转义字符在行首添加空格来实现，`&amp;ensp;` 代表半角空格，`&amp;emsp;` 代表全角空格。</span><br><span class="line"></span><br><span class="line">示例代码：</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;春天来了，又到了万物复苏的季节。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">示例效果：</span><br><span class="line"></span><br><span class="line">&amp;emsp;&amp;emsp;春天来了，又到了万物复苏的季节。</span><br><span class="line"></span><br><span class="line">## 展示数学公式</span><br><span class="line"></span><br><span class="line">如果是在 GitHub Pages，可以参考 &lt;http://wanguolin.github.io/mathmatics_rending/&gt; 使用 MathJax 来优雅地展示数学公式（非图片）。</span><br><span class="line"></span><br><span class="line">如果是在 GitHub 项目的 README 等地方，目前我能找到的方案只能是贴图了，以下是一种比较方便的贴图方案：</span><br><span class="line"></span><br><span class="line">1. 在 &lt;https://www.codecogs.com/latex/eqneditor.php&gt; 网页上部的输入框里输入 LaTeX 公式，比如 `$$x=\frac&#123;-b\pm\sqrt&#123;b^2-4ac&#125;&#125;&#123;2a&#125;$$`；</span><br><span class="line"></span><br><span class="line">2. 在网页下部拷贝 URL Encoded 的内容，比如以上公式生成的是 `https://latex.codecogs.com/png.latex?%24%24x%3D%5Cfrac%7B-b%5Cpm%5Csqrt%7Bb%5E2-4ac%7D%7D%7B2a%7D%24%24`；</span><br><span class="line"></span><br><span class="line">   ![](D:\lillusory\MyProject\lillusory.github.io\images\posts\Markdown\Markdown_latex_img)</span><br><span class="line"></span><br><span class="line">3. 在文档需要的地方使用以上 URL 贴图，比如</span><br></pre></td></tr></table></figure></p><p>   <img src="https://latex.codecogs.com/png.latex?%24%24x%3D%5Cfrac%7B-b%5Cpm%5Csqrt%7Bb%5E2-4ac%7D%7D%7B2a%7D%24%24" alt=""><br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   示例效果：</span><br><span class="line"></span><br><span class="line">   ![](https://latex.codecogs.com/png.latex?%24%24x%3D%5Cfrac%7B-b%5Cpm%5Csqrt%7Bb%5E2-4ac%7D%7D%7B2a%7D%24%24)</span><br><span class="line"></span><br><span class="line">## 任务列表</span><br><span class="line"></span><br><span class="line">在 GitHub 和 GitLab 等网站，除了可以使用有序列表和无序列表外，还可以使用任务列表，很适合要列出一些清单的场景。</span><br><span class="line"></span><br><span class="line">示例代码：</span><br></pre></td></tr></table></figure></p><p><strong>购物清单</strong></p><ul><li style="list-style: none"><input type="checkbox"> 一次性水杯</li><li style="list-style: none"><input type="checkbox" checked> 西瓜</li><li style="list-style: none"><input type="checkbox"> 豆浆</li><li style="list-style: none"><input type="checkbox" checked> 可口可乐</li><li style="list-style: none"><input type="checkbox"> 小茗同学<br><code>`</code></li></ul><p>示例效果：</p><p><strong>购物清单</strong></p><ul><li style="list-style: none"><input type="checkbox"> 一次性水杯</li><li style="list-style: none"><input type="checkbox" checked> 西瓜</li><li style="list-style: none"><input type="checkbox"> 豆浆</li><li style="list-style: none"><input type="checkbox" checked> 可口可乐</li><li style="list-style: none"><input type="checkbox"> 小茗同学</li></ul><h2 id="自动维护目录"><a href="#自动维护目录" class="headerlink" title="自动维护目录"></a>自动维护目录</h2><p>有时候维护一份比较长的文档，希望能够自动根据文档中的标题生成目录（Table of Contents），并且当标题有变化时自动更新目录，能减轻工作量，也不易出错。比如 Atom 编辑器的 <a href="https://atom.io/packages/markdown-toc" target="_blank" rel="noopener">markdown-toc</a> 插件，Sublime Text 的 <a href="https://packagecontrol.io/packages/MarkdownTOC" target="_blank" rel="noopener">MarkdownTOC</a> 插件等。</p><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>希望自己，也希望大家在了解这些之后能有所收获，更好地排版，专注写作。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://raw.githubusercontent.com/matiassingers/awesome-readme/master/readme.md" target="_blank" rel="noopener">https://raw.githubusercontent.com/matiassingers/awesome-readme/master/readme.md</a></li><li><a href="https://www.zybuluo.com/songpfei/note/247346" target="_blank" rel="noopener">https://www.zybuluo.com/songpfei/note/247346</a></li><li><a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="noopener">支持的表情</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了关于markdown的一些常用语法和技巧，让大家更好的写文章。自从17年前开始在 GitHub 玩耍，接触到 Markdown 之后，就感觉很有意思。不过也仅仅是了解一下基本语法，所以找了一下Markdown的语法用法来学习学习。&lt;/p&gt;
    
    </summary>
    
      <category term="Markdown" scheme="https://www.lixueduan.com/categories/Markdown/"/>
    
    
      <category term="Markdown" scheme="https://www.lixueduan.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Linux安装MySQL教程</title>
    <link href="https://www.lixueduan.com/posts/1be8c408.html"/>
    <id>https://www.lixueduan.com/posts/1be8c408.html</id>
    <published>2019-01-16T14:00:00.000Z</published>
    <updated>2019-02-06T01:12:10.263Z</updated>
    
    <content type="html"><![CDATA[<p>本章主要讲了如何通过解压方式在Linux下安装MySQL，以及如何设置让我们可以远程连接到服务器上的mysql.</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><p>软件统一放在<code>/usr/software</code>下 解压后放在单独的文件夹下<code>/usr/local/java</code>/<code>/usr/local/mysql</code></p><p>其中：<code>#</code>为Linux命令，<code>mysql</code>则是mysql下的命令</p><p>软件统一放在<code>/usr/software</code>下 解压后放在单独的文件夹下<code>/usr/local/java</code>/<code>/usr/local/mysql</code></p><p>安装包下载<code>mysql-5.7.24-linux-glibc2.12-x86_64.tar</code></p><p>网址<code>https://dev.mysql.com/downloads/mysql/5.7.html#downloads</code></p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/software-install/mysql5.7-down.png" alt="mysql"></p><h2 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖"></a>1. 安装依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install -y cmake make gcc gcc-c++ libaio ncurses ncurses-devel</span><br></pre></td></tr></table></figure><h2 id="2-解压文件"><a href="#2-解压文件" class="headerlink" title="2. 解压文件"></a>2. 解压文件</h2><p>压缩包上传到虚拟机<code>/usr/software目录下</code>,进入这个目录</p><p>解压文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># tar zxvf mysql-5.7.24-linux-glibc2.12-x86_64.tar.gz</span><br></pre></td></tr></table></figure><p>将解压后的文件移动到<code>/usr/local/mysql</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mv mysql-5.7.24-linux-glibc2.12-x86_64 /usr/local/mysql</span><br></pre></td></tr></table></figure><h2 id="3-添加用户和赋权"><a href="#3-添加用户和赋权" class="headerlink" title="3. 添加用户和赋权"></a>3. 添加用户和赋权</h2><p>1.添加用户和用户组</p><p>给mysql赋权的用户必须对当前目录具有读写权限，但是一般不用root账户，所以创建一个用户mysql。</p><p>执行命令：创建用户组mysql<code>groupadd mysql`</code></p><p>创建用户也叫mysql </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 命令中第一个mysql是用户，第二个mysql是用户组。</span><br><span class="line"># useradd -r -g mysql mysql</span><br></pre></td></tr></table></figure><p>2.给用户赋权限</p><p> 一定保证当前是在<code>/usr/local/mysql</code> 目录下</p><p>给用户组赋权限</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//mysql是用户组名</span><br><span class="line"># chgrp -R mysql.</span><br></pre></td></tr></table></figure><p>给用户赋权限  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//这个mysql是用户名</span><br><span class="line">#  chown -R mysql.</span><br></pre></td></tr></table></figure><h2 id="4-数据库初始化"><a href="#4-数据库初始化" class="headerlink" title="4. 数据库初始化"></a>4. 数据库初始化</h2><p>安装数据库 : </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 这里会生成临时密码，后边有用</span><br><span class="line"># bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data</span><br></pre></td></tr></table></figure><p>执行以下命令创建RSA private key ：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># bin/mysql_ssl_rsa_setup --datadir=/usr/local/mysql/data</span><br></pre></td></tr></table></figure><h2 id="5-配置my-cnf"><a href="#5-配置my-cnf" class="headerlink" title="5. 配置my.cnf"></a>5. 配置my.cnf</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vim /etc/my.cnf</span><br></pre></td></tr></table></figure><p> 内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">character_set_server=utf8</span><br><span class="line">init_connect=<span class="string">'SET NAMES utf8'</span></span><br><span class="line">basedir=/usr/local/mysql</span><br><span class="line">datadir=/usr/local/mysql/data</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">#不区分大小写 (sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES 这个简单来说就是sql语句是否严格)</span><br><span class="line">lower_case_table_names = <span class="number">1</span></span><br><span class="line">log-error=/<span class="keyword">var</span>/log/mysqld.log</span><br><span class="line">pid-file=/usr/local/mysql/data/mysqld.pid</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cp /usr/local/mysql/support-files/mysql.server  /etc/init.d/mysqld</span><br><span class="line"># vim /etc/init.d/mysqld</span><br></pre></td></tr></table></figure><p>添加以下内容，在46行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">basedir=/usr/local/mysql</span><br><span class="line">datadir=/usr/local/mysql/data</span><br></pre></td></tr></table></figure><h2 id="6-修改密码"><a href="#6-修改密码" class="headerlink" title="6. 修改密码"></a>6. 修改密码</h2><p>启动mysql   </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># service mysqld start</span><br></pre></td></tr></table></figure><p> 加入开机起动    </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># chkconfig --add mysqld</span><br></pre></td></tr></table></figure><p>登录修改密码 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mysql -uroot -p 上面初始化时的密码</span><br></pre></td></tr></table></figure><p>如果出现错误 需要添加软连接 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ln -s /usr/local/mysql/bin/mysql /usr/bin</span><br></pre></td></tr></table></figure><p>如果出现<code>Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: YES)</code>应该是密码错了，直接强行修改密码好了。先停掉mysql. </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># service mysql stop</span><br></pre></td></tr></table></figure><p>然后修改配置文件 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vim /etc/my.cnf</span><br></pre></td></tr></table></figure><p>在[mysqld]后面任意一行添加<code>skip-grant-tables</code>用来跳过密码验证的过程</p><p>接下来我们需要重启MySQL </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># /etc/init.d/mysqld restart</span><br></pre></td></tr></table></figure><p>重启之后输入命令<code>mysql</code>即可进入mysql了，然后开始修改密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br><span class="line"># 这里修改密码的命令在5.7以上和5.7以下是不同的 需要注意</span><br><span class="line">mysql&gt; update user set authentication_string=passworD(&quot;你的密码&quot;) where user=&apos;root&apos;;</span><br><span class="line">flush privileges;</span><br><span class="line">mysql&gt; quit</span><br></pre></td></tr></table></figure><p>完成后可以把配置文件中的跳过密码验证去掉。</p><p>然后就可以正常使用啦。</p><h2 id="7-外部访问"><a href="#7-外部访问" class="headerlink" title="7. 外部访问"></a>7. 外部访问</h2><p>首先进入mysql，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mysql -u root -p</span><br></pre></td></tr></table></figure><p>接着创建远程连接 MySQL 的用户 mysql命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 创建用户、密码及权限范围 第一个 roo t为用户名 @后为适用的主机，‘%’表示所有电脑都可以访问连接，第二个 root 为密码</span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;192.168.1.3&apos; IDENTIFIED BY &apos;root&apos; WITH GRANT OPTION;  </span><br><span class="line">-- 立即生效</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure><p>查看数据库用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 使用 mysql 库</span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">-- 查看用户</span><br><span class="line">mysql&gt; SELECT DISTINCT CONCAT(&apos;User: [&apos;, user, &apos;&apos;&apos;@&apos;&apos;&apos;, host, &apos;];&apos;) AS USER_HOST FROM user;  </span><br><span class="line">-- 查看端口</span><br><span class="line">mysql&gt; show global variables like &apos;port&apos;;</span><br><span class="line">--mysql 默认端口为3306</span><br></pre></td></tr></table></figure><p>解决防火墙问题</p><p>防火墙默认只开放了22端口，要访问数据库要么关掉防火墙要么修改配置文件，开放3306端口</p><p>修改防火墙配置： 命令</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vim /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure><p>添加以下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT</span><br></pre></td></tr></table></figure><p>然后重启防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># service iptables restart</span><br></pre></td></tr></table></figure><p>最后查看服务器IP</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ip a</span><br></pre></td></tr></table></figure><p>到这里应该就可以通过IP和端口号远程连接服务器上的MySQL了。</p><h2 id="8-问题"><a href="#8-问题" class="headerlink" title="8. 问题"></a>8. 问题</h2><p>mysql中执行命令出现以下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.</span><br></pre></td></tr></table></figure><p>解决： 修改用户密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter user &apos;root&apos;@&apos;localhost&apos; identified by &apos;你的密码&apos;;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><code>https://blog.csdn.net/z13615480737/article/details/80019881</code></p><p><code>https://www.cnblogs.com/goodcheap/p/7103049.html</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章主要讲了如何通过解压方式在Linux下安装MySQL，以及如何设置让我们可以远程连接到服务器上的mysql.&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://www.lixueduan.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://www.lixueduan.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux下安装jdk和Tomcat</title>
    <link href="https://www.lixueduan.com/posts/54978294.html"/>
    <id>https://www.lixueduan.com/posts/54978294.html</id>
    <published>2019-01-15T14:00:00.000Z</published>
    <updated>2019-02-06T01:11:52.157Z</updated>
    
    <content type="html"><![CDATA[<p>本章主要讲了如何通过解压方式在Linux下安装JDK和Tomcat等软件。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><p>软件统一放在<code>/usr/software</code>下 解压后放在单独的文件夹下<code>/usr/local/java</code>/<code>/usr/local/mysql</code></p><h2 id="1-JDK"><a href="#1-JDK" class="headerlink" title="1.JDK"></a>1.JDK</h2><p>安装包下载<code>jdk-8u191-linux-x64.tar.gz</code> 注意32位和64位的别下载错了。</p><p>命令<code>uname -a</code> 查看Linux系统位数。</p><p>网址：<code>https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</code></p><p>1.首先将压缩包传到虚拟机。放在<code>/usr/software</code>下</p><p>2.然后解压文件<code>tar zxvf jdk-8u191-linux-x64.tar.gz</code> 按tab会自动补全。</p><p>3.将解压得到的文件移动到<code>/usr/local/java</code>,命令`mv jdk1.8.0_191/ /usr/local/jdk8</p><p>4.配置环境变量 </p><p> 命令<code>vim /etc/profile</code> </p><p>添加以下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　export JAVA_HOME=/usr/local/jdk8/</span><br><span class="line">　export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">　export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure><p>5.解析该文件 命令<code>source /etc/profile</code></p><p>6.测试 命令 <code>java -version</code> 输出版本信息就说明配好了。</p><h2 id="2-Tomcat"><a href="#2-Tomcat" class="headerlink" title="2.Tomcat"></a>2.Tomcat</h2><p>安装包下载<code>apache-tomcat-8.5.37.tar.gz</code></p><p>网址<code>https://tomcat.apache.org/download-80.cgi</code></p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/software-install/tomcat8-down.png" alt=""></p><p>1.压缩包上传到虚拟机<code>/usr/software目录下</code></p><p>2.解压文件 <code>tar zxvf apache-tomcat-8.5.37.tar.gz</code></p><p>3.将解压后的文件移动到<code>/usr/local/tomcat</code>,命令<code>mv apache-tomcat-8.5.37 /usr/local/tomcat</code></p><p>4.配置环境变量 </p><p> 命令<code>vim /etc/profile</code> </p><p>添加以下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export TOMCAT_HOME=/usr/local/tomcat</span><br><span class="line">export CATANILA_HOME=/usr/local/tomcat</span><br></pre></td></tr></table></figure><p>5.解析该文件 命令<code>source /etc/profile</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章主要讲了如何通过解压方式在Linux下安装JDK和Tomcat等软件。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://www.lixueduan.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://www.lixueduan.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux下的网络配置</title>
    <link href="https://www.lixueduan.com/posts/b0d13a6d.html"/>
    <id>https://www.lixueduan.com/posts/b0d13a6d.html</id>
    <published>2019-01-14T14:00:00.000Z</published>
    <updated>2019-02-06T01:11:32.454Z</updated>
    
    <content type="html"><![CDATA[<p>本章主要讲了linux如何配置网络，让虚拟机能够连上外网，如何让虚拟机和主机联通，同时介绍了ssh客户端工具连接虚拟机。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-Xshell"><a href="#1-Xshell" class="headerlink" title="1. Xshell"></a>1. Xshell</h2><p>在安装好虚拟机后就可以正常使用了。但是在正常工作中不可能真的在服务器上操作，一般都是通过ssh客户端工具连接服务器进行操作。</p><p>这里用到的客户端工具是<code>Xshell</code>,通过该工具连上服务器后就可以在自己的电脑上操作了。而且还可以开多个窗口，比较方便。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/network-set/xshell-use.png" alt="xshell"></p><p>这里新建连接时需要输入要连接的服务器的IP和端口号，账户和密码，端口号默认是22，一般不用改。</p><h2 id="2-网络配置"><a href="#2-网络配置" class="headerlink" title="2. 网络配置"></a>2. 网络配置</h2><h3 id="2-1-桥接模式和NAT模式"><a href="#2-1-桥接模式和NAT模式" class="headerlink" title="2.1 桥接模式和NAT模式"></a>2.1 桥接模式和NAT模式</h3><p>按照上面的方法就可以连上虚拟机了，但是现在虚拟机的IP是自动获取的，<strong>每次重启后都IP都会变</strong>，这肯定不行呀，所以我们需要为虚拟机设置<strong>静态IP</strong>.</p><p>由于我们这里使用的是NAT模式。这个模式下虚拟机可以上网，但是无法和主机联通。</p><p><strong>桥接模式和NAT模式的区别：</strong></p><p>桥接模式下虚拟机可以看做一台真正的独立的电脑，所以桥接模式下需要为虚拟机分配独立的IP，在家里到时无所谓，在公司的话由于IP和电脑绑定的，所以需要网络管理人员给你的虚拟机分配一个IP才行。</p><p>NAT模式下，虚拟机会动态获取IP,虽然有自己的IP但是最终上网还是通过主机上网的。所以NAT模式下不用分配独立的IP,但是<strong>NAT模式下主机和虚拟机无法联通。</strong></p><p><strong>为了主机和虚拟机联通，我们必须让主机和虚拟机在同一个网段下。</strong></p><p><strong>为了主机和虚拟机联通，我们必须让主机和虚拟机在同一个网段下。</strong></p><p><strong>为了主机和虚拟机联通，我们必须让主机和虚拟机在同一个网段下。</strong></p><h3 id="2-2-设置静态IP"><a href="#2-2-设置静态IP" class="headerlink" title="2.2 设置静态IP"></a>2.2 设置静态IP</h3><p>在设置静态IP前我们需要知道主机的IP.</p><p>windows下命令行输入 <code>ipconfig</code> 即可获取到本机IP.</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/network-set/ip-query.png" alt="ipconfig"></p><p>然后通过VMware软件对网络进行配置。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/network-set/ip-set-way.png" alt="vmware"></p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/network-set/vm-ip-set.png" alt="static ip"></p><p>接着在虚拟机中配置具体网络信息。</p><h3 id="2-3-网络配置"><a href="#2-3-网络配置" class="headerlink" title="2.3 网络配置"></a>2.3 网络配置</h3><h4 id="2-3-1-网卡配置"><a href="#2-3-1-网卡配置" class="headerlink" title="2.3.1 网卡配置"></a>2.3.1 网卡配置</h4><p>网络配置文件在<code>/etc/sysconfig/network-scripts/ifcfg-ens33</code>目录下，一般是叫<code>ifcfg-ens33</code></p><p>编辑配置文件 命令：<code>vi /etc/sysconfig/network-scripts/ifcfg-ens33</code></p><p>配置如下 ：</p><p>其中ip地址必须和主机在同一网段下，网关就是上边的那个网关。DNS可填可不填。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BOOTPROTO="static"  # 手动分配ip</span><br><span class="line">ONBOOT="yes"  # 该网卡是否随网络服务启动</span><br><span class="line">IPADDR="192.168.1.111"  # 该网卡ip地址就是你要配置的固定IP</span><br><span class="line">GATEWAY="192.168.1.2"   # 网关</span><br><span class="line">NETMASK="255.255.255.0"   # 子网掩码 固定值</span><br><span class="line">DNS1="8.8.8.8"    # DNS，8.8.8.8为Google提供的免费DNS服务器的IP地址</span><br><span class="line">DNS2="192.168.1.2"</span><br></pre></td></tr></table></figure><h4 id="2-3-2-网络配置"><a href="#2-3-2-网络配置" class="headerlink" title="2.3.2 网络配置"></a>2.3.2 网络配置</h4><p>命令：<code>vi /etc/sysconfig/network</code> 添加以下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NETWORKING=yes # 网络是否工作，此处一定不能为no</span><br><span class="line">NETWORKING_IPV6=no</span><br><span class="line">HOSTNAME=localhost.localdomain</span><br><span class="line">GATEWAY=192.168.1.2</span><br></pre></td></tr></table></figure><h4 id="2-3-3-配置公共DNS服务"><a href="#2-3-3-配置公共DNS服务" class="headerlink" title="2.3.3 配置公共DNS服务"></a>2.3.3 配置公共DNS服务</h4><p><code>vi /etc/resolv.conf</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">search localdomain</span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line">nameserver 192.168.1.2</span><br></pre></td></tr></table></figure><h4 id="2-3-4-关闭防火墙"><a href="#2-3-4-关闭防火墙" class="headerlink" title="2.3.4 关闭防火墙"></a>2.3.4 关闭防火墙</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld # 临时关闭防火墙</span><br><span class="line">systemctl disable firewalld # 禁止开机启动</span><br></pre></td></tr></table></figure><h4 id="2-3-5-重启网络服务"><a href="#2-3-5-重启网络服务" class="headerlink" title="2.3.5 重启网络服务"></a>2.3.5 重启网络服务</h4><p><code>service network restart</code></p><p>到此为止网络配置就完成了，现在虚拟机的IP重启后不会变了，也可以连上外网了，还可以和主机联通了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章主要讲了linux如何配置网络，让虚拟机能够连上外网，如何让虚拟机和主机联通，同时介绍了ssh客户端工具连接虚拟机。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://www.lixueduan.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://www.lixueduan.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>超详细的VMware虚拟机安装CentOS7教程</title>
    <link href="https://www.lixueduan.com/posts/4d7cca6f.html"/>
    <id>https://www.lixueduan.com/posts/4d7cca6f.html</id>
    <published>2019-01-14T14:00:00.000Z</published>
    <updated>2019-02-06T01:11:41.842Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个十分详细的CentOS7的安装教程，对自己的安装过程做了一个记录。主要记录了如何通过VMware虚拟机安装Linux，从软件下载到虚拟机安装等等。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><h3 id="1-1-VMware下载"><a href="#1-1-VMware下载" class="headerlink" title="1.1 VMware下载"></a>1.1 VMware下载</h3><p>百度网盘下载（内含注册机）</p><p>链接: <code>https://pan.baidu.com/s/1wz4hdNQBikTvyUMNokSVYg</code>提取码: yed7</p><p>怎么安装就不用写了吧。</p><h3 id="1-2-CentOS下载"><a href="#1-2-CentOS下载" class="headerlink" title="1.2 CentOS下载"></a>1.2 CentOS下载</h3><p><code>http://mirrors.163.com/centos/7.6.1810/isos/x86_64/</code></p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/software-install/centos7-down.png" alt=""></p><h2 id="2-CentOS-7安装"><a href="#2-CentOS-7安装" class="headerlink" title="2. CentOS 7安装"></a>2. CentOS 7安装</h2><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/1-create-vm.png" alt=""></p><p>创建虚拟机，这里我们选择自定义安装类型。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/2-custom-install.png" alt=""></p><p>然后选择版本，需要注意兼容问题，一般是向下兼容，14上的虚拟机复制到15上可以用，15的复制到14上可能会用不了。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/3-version-select.png" alt=""></p><p>这里选择稍后再安装。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/4-after-install.png" alt=""></p><p>接着选择系统，这里是CentOS 7 64位。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/5-system-select.png" alt=""></p><p>这个是保存的文件名字。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/6-filename.png" alt=""></p><p>这里一般默认的就行了,电脑配置好的可以调高点。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/7-cpu-select.png" alt=""></p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/8-memory-select.png" alt=""></p><p>网络这里,如果仅仅是让虚拟机能上网，两种模式都可以的，用桥接的话只要你在局域网内有合法的地址，比如你的ADSL猫是带路由功能的，如果是在单位，那就要网络管理人员给你合法IP才行。NAT模式下，虚拟机从属于主机，也就是访问外部网络必须通过主机来访问，因此虚拟机的IP只有主机才能识别。而桥接模式下，虚拟机和主机是平行关系，共享一张网卡（使用网卡的多个接口），可以直接访问外部网络。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/9-network-select.png" alt=""></p><p>这些都默认的就行了。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/10-IO-select.png" alt=""></p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/11-disk-select.png" alt=""></p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/12-newdisk-select.png" alt=""></p><p>这个是虚拟机文件的名字。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/14-filename.png" alt=""></p><p>这里选择自定义硬件。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/15-custom.png" alt=""></p><p>选择镜像文件。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/17-file-select.png" alt=""></p><p>到这里就结束了，点击开启虚拟机后会自动开始安装。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/18-start.png" alt=""></p><p>选择安装CentOS 7</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/19-setup.png" alt=""></p><p>语言选择</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/20-language.png" alt=""></p><p>调一下时间和地区。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/21-time.png" alt=""></p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/22-time2.png" alt=""></p><p>选择要安装的软件，新手还是安装一个GUI比较好。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/23-software1.png" alt=""></p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/24-software2.png" alt=""></p><p>查看一下网络连接</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/25-network-set1.png" alt=""></p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/26-network-set2.png" alt=""></p><p>开始安装。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/27-begin-install.png" alt=""></p><p>安装过程中可以设置一下账号密码，一个root账户，一个普通账户。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/28-password-set1.png" alt=""></p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/29-password-set2.png" alt=""></p><p>然后耐心等待安装完成就好了。</p><p>安装完成后重启就可以登录系统了。</p><h2 id="3-快照"><a href="#3-快照" class="headerlink" title="3. 快照"></a>3. 快照</h2><p>快照相当于windows中的还原点。在安装好后可以拍摄一张快照，方便恢复或者克隆虚拟机。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/30-backup1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一个十分详细的CentOS7的安装教程，对自己的安装过程做了一个记录。主要记录了如何通过VMware虚拟机安装Linux，从软件下载到虚拟机安装等等。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://www.lixueduan.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://www.lixueduan.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>基于Hexo搭建个人博客优化之（五）--压缩篇</title>
    <link href="https://www.lixueduan.com/posts/70deabab.html"/>
    <id>https://www.lixueduan.com/posts/70deabab.html</id>
    <published>2019-01-10T14:00:00.000Z</published>
    <updated>2019-02-06T01:14:13.774Z</updated>
    
    <content type="html"><![CDATA[<p>本章主要记录了如何通过<code>gulp</code>工具压缩压缩博客静态文件以加快网站加载速度。</p><a id="more"></a><blockquote><p>这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。</p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><p>在本系列文章的第二章中也有类似静态资源压缩的教程，是用的<code>hexo-neat</code>插件，最近用着用着出现了一点点问题，无奈之下换用了<code>gulp</code>。这个工具也可以很方便的压缩静态资源。</p><h2 id="1-插件安装"><a href="#1-插件安装" class="headerlink" title="1. 插件安装"></a>1. 插件安装</h2><p>首先需要安装<code>gulp</code>工具</p><p>命令：<code>npm install gulp</code></p><p>接着安装功能模块，包括</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gulp-htmlclean // 清理html</span><br><span class="line">gulp-htmlmin // 压缩html</span><br><span class="line">gulp-minify-css // 压缩css</span><br><span class="line">gulp-uglify // 混淆js</span><br></pre></td></tr></table></figure><p>命令：<code>npm install gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify --save</code></p><h2 id="2-创建任务"><a href="#2-创建任务" class="headerlink" title="2. 创建任务"></a>2. 创建任务</h2><p>在站点根目录下，新建<code>gulpfile.js</code>文件，文件内容如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Plugins模块获取</span></span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</span><br><span class="line"><span class="comment">//压缩css</span></span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">.pipe(minifycss())</span><br><span class="line">.pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//压缩html</span></span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">.pipe(htmlclean())</span><br><span class="line">.pipe(htmlmin(&#123;</span><br><span class="line">removeComments: <span class="literal">true</span>,</span><br><span class="line">minifyJS: <span class="literal">true</span>,</span><br><span class="line">minifyCSS: <span class="literal">true</span>,</span><br><span class="line">minifyURLs: <span class="literal">true</span>,</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">.pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//压缩js 不压缩min.js</span></span><br><span class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> gulp.src([<span class="string">'./public/**/*.js'</span>, <span class="string">'!./public/**/*.min.js'</span>])</span><br><span class="line">.pipe(uglify())</span><br><span class="line">.pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.0以前的写法 </span></span><br><span class="line"><span class="comment">//gulp.task('default', [</span></span><br><span class="line">  <span class="comment">//  'minify-html', 'minify-css', 'minify-js'</span></span><br><span class="line"><span class="comment">//]);</span></span><br><span class="line"><span class="comment">//4.0以后的写法</span></span><br><span class="line"><span class="comment">// 执行 gulp 命令时执行的任务</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, gulp.parallel(<span class="string">'minify-html'</span>, <span class="string">'minify-css'</span>, <span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Do something after a, b, and c are finished.</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h2><p>使用时按照以下顺序就可以了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="comment">//先清理文件</span></span><br><span class="line">hexo g  <span class="comment">//编译生成静态文件</span></span><br><span class="line">gulp  <span class="comment">//gulp插件执行压缩任务</span></span><br><span class="line">hexo s <span class="comment">//开启服务</span></span><br></pre></td></tr></table></figure><h2 id="4-问题"><a href="#4-问题" class="headerlink" title="4. 问题"></a>4. 问题</h2><p>刚开始弄这个的时候也是各种百度，Google，大部分的文章也是这么写的但是，第二部的js 代码却都有问题，也不能说有问题吧，大部分都是4.0以前的写法，导致现在gulp更新到4.0之后全都无法使用了。可能在看到这篇文章之前也试了各种办法。然后每次都出现这样的问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">assert</span>.js:<span class="number">85</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">assert</span>.AssertionError(&#123;</span><br><span class="line">  ^</span><br><span class="line">AssertionError: Task function must be specified</span><br><span class="line">    at Gulp.set [as _setTask] (/home/hope/web/node_modules/undertaker/lib/set-task.js:<span class="number">10</span>:<span class="number">3</span>)</span><br><span class="line">    at Gulp.task (/home/hope/web/node_modules/undertaker/lib/task.js:<span class="number">13</span>:<span class="number">8</span>)</span><br><span class="line">.................</span><br></pre></td></tr></table></figure><p>在看了下gulp相关资料后才发现了问题，接着把js代码稍微改了改终于能用了。不过运行的时候好像也有点问题，不过不影响使用，对这些工具还是不太了解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">21</span>:<span class="number">35</span>:<span class="number">20</span>] The following tasks did not complete: <span class="keyword">default</span>, &lt;anonymous&gt;</span><br><span class="line">[<span class="number">21</span>:<span class="number">35</span>:<span class="number">20</span>] Did you forget to signal async completion?</span><br><span class="line"><span class="comment">//代码里也没这个任务呀</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章主要记录了如何通过&lt;code&gt;gulp&lt;/code&gt;工具压缩压缩博客静态文件以加快网站加载速度。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://www.lixueduan.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://www.lixueduan.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Synchronize和Volatile底层实现原理</title>
    <link href="https://www.lixueduan.com/posts/cf1a701a.html"/>
    <id>https://www.lixueduan.com/posts/cf1a701a.html</id>
    <published>2019-01-08T14:00:00.000Z</published>
    <updated>2019-02-06T01:17:53.174Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看<code>并发编程的艺术</code>这本书，希望加深对并发这块的理解。毕竟并发相关还是十分重要的。本文主要是关于<code>第二章Java并发机制的底层实现原理</code>的相关笔记。主要包括<code>volatile</code>,<code>synchronized</code>,<code>原子操作</code>等实现原理的分析。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-上下文切换"><a href="#1-上下文切换" class="headerlink" title="1. 上下文切换"></a>1. 上下文切换</h2><p><strong>多线程</strong></p><p>即使是单核处理器也支持多线程执行代码，CPU通过给每个线程分配CPU时间片来实现这个机制。</p><p><strong>什么是上下文切换</strong></p><p>CPU通过时间片分配算法来循环执行任务，当前任务执行一个时间片后会切换到下一个任务。但是，在切换前会保存上一个任务的状态，以便下次切换回这个任务时，可以再加载这个任务的状态。</p><p>所以任务从保存到再加载的过程就是一次上下文切换。</p><p><strong>上下文切换也会影响多线程的执行速度</strong></p><p>因为线程有创建和上下文切换的开销，所以有时候并发不一定比串行快。</p><p><strong>减少上下文切换的办法</strong></p><p>减少上下文切换的方法有无锁并发编程、CAS算法、使用最少线程和使用协程。</p><ul><li>无锁并发编程。多线程竞争锁时，会引起上下文切换，所以多线程处理数据时，可以用一<br>些办法来避免使用锁，如将数据的ID按照Hash算法取模分段，不同的线程处理不同段的数据。</li><li>CAS算法。Java的Atomic包使用CAS算法来更新数据，而不需要加锁。</li><li>使用最少线程。避免创建不需要的线程，比如任务很少，但是创建了很多线程来处理，这<br>样会造成大量线程都处于等待状态。</li><li>协程：在单线程里实现多任务的调度，并在单线程里维持多个任务间的切换。</li></ul><h2 id="2-volatile关键字"><a href="#2-volatile关键字" class="headerlink" title="2. volatile关键字"></a>2. volatile关键字</h2><p><strong>如果一个字段被声明成volatile，Java线程内存模型确保所有线程看到这个变量的值是一致的。</strong></p><p>有volatile变量修饰的共享变量进行写操作的时候会多出第二行汇编代码，其中就包括了<code>Lock前缀</code>.Lock前缀的指令在多核处理器下会引发了两件事情。</p><p><strong>1）将当前处理器缓存行的数据写回到系统内存。</strong></p><p>Lock前缀指令导致在执行指令期间，声言处理器的LOCK#信号。在多处理器环境中，LOCK#信号确保在声言该信号期间，处理器可以独占任何共享内存。</p><p>如果访问的内存区域已经缓存在处理器内部，则不会声言LOCK#信号。相反，它会锁定这块内存区<br>域的缓存并回写到内存，并使用缓存一致性机制来确保修改的原子性，此操作被称为“缓存锁<br>定”，<code>缓存一致性</code>机制会阻止同时修改由两个以上处理器缓存的内存区域数据。</p><p><strong>2）这个写回内存的操作会使在其他CPU里缓存了该内存地址的数据无效。</strong></p><p>处理器使用嗅探技术保证它的内部缓存、系统内存和其他处理器的缓存的数据在总线上保持一致。如果通过嗅探一个处理器来检测其他处理器打算写内存地址，而这个地址当前处于共享状态，那么正在嗅探的处理器将使它的缓存行无效，在下次访问相同内存地址时，强制执行缓存行填充。</p><h2 id="3-synchronized原理与应用"><a href="#3-synchronized原理与应用" class="headerlink" title="3. synchronized原理与应用"></a>3. synchronized原理与应用</h2><p><strong>Java SE 1.6中为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁，以及锁的存储结构和升级过程。</strong></p><p>Java中的每一个对象都可以作为锁。具体表现<br>为以下3种形式。</p><ul><li>对于普通同步方法，锁是当前实例对象。</li><li>对于静态同步方法，锁是当前类的Class对象。</li><li>对于同步方法块，锁是Synchonized括号里配置的对象。<br>当一个线程试图访问同步代码块时，它首先必须得到锁，退出或抛出异常时必须释放锁。</li></ul><h3 id="3-1-底层实现"><a href="#3-1-底层实现" class="headerlink" title="3.1 底层实现"></a>3.1 底层实现</h3><p>JVM基于进入和退出Monitor对象来实现方法同步和代码块同步，但两者的实现细节不一样。</p><p><code>代码块同步</code>是使用<code>monitorenter</code>和<code>monitorexit</code>指令实现的.</p><p>而<code>方法同步</code>是使用另外一种方式实现的，细节在JVM规范里并没有详细说明。但是，方法的同步同样可以使用这两个指令来实现。</p><p>monitorenter指令是在编译后插入到同步代码块的开始位置，而monitorexit是插入到方法结束处和异常处，JVM要保证每个monitorenter必须有对应的monitorexit与之配对。任何对象都有一个monitor与之关联，当且一个monitor被持有后，它将处于锁定状态。线程执行到monitorenter指令时，将会尝试获取对象所对应的monitor的所有权，即尝试获得对象的锁。</p><h2 id="3-2-Java对象头"><a href="#3-2-Java对象头" class="headerlink" title="3.2 Java对象头"></a>3.2 Java对象头</h2><p>synchronized用的锁是存在Java对象头里的。</p><p>java的对象头由以下三部分组成：</p><blockquote><p>1，Mark Word</p><p>2，指向类的指针</p><p>3，数组长度（只有数组对象才有）</p></blockquote><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/art_of_concurrent_coding/java%E5%AF%B9%E8%B1%A1%E5%A4%B4.png" alt=""></p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/art_of_concurrent_coding/java-mark-work%E5%8F%98%E5%8C%96%E7%8A%B6%E6%80%81.png" alt=""></p><h3 id="3-3-锁的升级与对比"><a href="#3-3-锁的升级与对比" class="headerlink" title="3.3 锁的升级与对比"></a>3.3 锁的升级与对比</h3><p>Java SE 1.6中，锁一共有4种状态，级别从低到高依次是：无锁状态、偏向锁状态、轻量级锁状<br>态和重量级锁状态，这几个状态会随着竞争情况逐渐升级。</p><p><strong>偏向锁</strong></p><p>HotSpot的作者经过研究发现，大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让线程获得锁的代价更低而引入了偏向锁。</p><p>当一个线程访问同步块并获取锁时，会在对象头和栈帧中的锁记录里存储锁偏向的线程ID，以后该线程在进入和退出同步块时不需要进行CAS操作来加锁和解锁，只需简单地测试一下对象头的Mark Word里是否存储着指向当前线程的偏向锁。如果测试成功，表示线程已经获得了锁。如果测试失败，则需要再测试一下Mark Word中偏向锁的标识是否设置成1（表示当前是偏向锁）：如果没有设置，则使用CAS竞争锁；如果设置了，则尝试使用CAS将对象头的偏向锁指向当前线程。</p><p>偏向锁解除</p><p>偏向锁使用了一种等到竞争出现才释放锁的机制，所以当其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁。偏向锁的撤销，需要等待全局安全点（在这个时间点上没有正在执行的字节码）。它会首先暂停拥有偏向锁的线程，然后检查持有偏向锁的线程是否活着，如果线程不处于活动状态，则将对象头设置成无锁状态；如果线程仍然活着，拥有偏向锁的栈会被执行，遍历偏向对象的锁记录，栈中的锁记录和对象头的Mark Word要么重新偏向于其他线程，要么恢复到无锁或者标记对象不适合作为偏向锁，最后唤醒暂停的线程.</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/art_of_concurrent_coding/java%E5%81%8F%E5%90%91%E9%94%81.png" alt=""></p><p><strong>轻量级锁</strong></p><p>（1）轻量级锁加锁<br>线程在执行同步块之前，JVM会先在当前线程的栈桢中创建用于存储锁记录的空间，并将对象头中的Mark Word复制到锁记录中，官方称为Displaced Mark Word。然后线程尝试使用CAS将对象头中的Mark Word替换为指向锁记录的指针。如果成功，当前线程获得锁，如果失败，表示其他线程竞争锁，当前线程便尝试使用自旋来获取锁。<br>（2）轻量级锁解锁<br>轻量级解锁时，会使用原子的CAS操作将Displaced Mark Word替换回到对象头，如果成功，则表示没有竞争发生。如果失败，表示当前锁存在竞争，锁就会膨胀成重量级锁。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/art_of_concurrent_coding/java%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81.png" alt=""></p><p><strong>优缺点比较</strong></p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/art_of_concurrent_coding/java%E9%94%81%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9%E6%AF%94%E8%BE%83.png" alt=""></p><h2 id="4-原子操作的实现原理"><a href="#4-原子操作的实现原理" class="headerlink" title="4. 原子操作的实现原理"></a>4. 原子操作的实现原理</h2><p>原子（atomic）本意是“不能被进一步分割的最小粒子”，而原子操作（atomic operation）意为“不可被中断的一个或一系列操作”。</p><h3 id="4-1-处理器如何实现原子操作"><a href="#4-1-处理器如何实现原子操作" class="headerlink" title="4.1 处理器如何实现原子操作"></a>4.1 处理器如何实现原子操作</h3><p>处理器提供总线锁定和缓存锁定两个机制来保证复杂内存操作的原子性。</p><p><strong>第一个机制是通过总线锁保证原子性。</strong></p><p>所谓总线锁就是使用处理器提供的一个<code>LOCK＃信号</code>，当一个处理器在总线上输出此信号时，其他处理器的请求将被阻塞住，那么该处理器可以独占共享内存。</p><p><strong>第二个机制是通过缓存锁定来保证原子性。</strong></p><p>总线锁定的开销比较大，目前处理器在某些场合下使用缓存锁定代替总线锁定来进行优化。</p><p>所谓“缓存锁定”是指内存区域如果被缓存在处理器的缓存行中，并且在Lock操作期间被锁定，那么当它执行锁操作回写到内存时，处理器不在总线上声言LOCK＃信号，而是修改内部的内存地址，并允许它的缓存一致性机制来保证操作的原子性，因为<code>缓存一致性</code>机制会阻止同时修改由两个以上处理器缓存的内存区域数据，当其他处理器回写已被锁定的缓存行的数据时，会使缓存行无效.</p><h3 id="4-2-Java如何实现原子操作"><a href="#4-2-Java如何实现原子操作" class="headerlink" title="4.2 Java如何实现原子操作"></a>4.2 Java如何实现原子操作</h3><p><strong>使用循环CAS实现原子操作</strong></p><p>JVM中的CAS操作正是利用了处理器提供的CMPXCHG指令实现的。自旋CAS实现的基本思路就是循环进行CAS操作直到成功为止。</p><p><strong>CAS实现原子操作的三大问题</strong></p><p>1.ABA问题</p><p>但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时会发现它的值没有发生变化，但是实际上却变化了。</p><p>ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加1。</p><p>2.循环时间长开销大</p><p>自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。</p><p>3.只能保证一个共享变量的原子操作</p><p>操作多个共享变量时无法使用CAS操作，这个时候就可以用锁。还有一个取巧的办法，就是把多个共享变量合并成一个共享变量来操作。</p><p><strong>使用锁机制实现原子操作</strong></p><p>锁机制保证了只有获得锁的线程才能够操作锁定的内存区域。除了偏向锁，JVM实现锁的方式都用了循环CAS，即当一个线程想进入同步块的时候使用循环CAS的方式来获取锁，当它退出同步块的时候使用循环CAS释放锁。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>本文内容来自Java并发编程的艺术</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在看&lt;code&gt;并发编程的艺术&lt;/code&gt;这本书，希望加深对并发这块的理解。毕竟并发相关还是十分重要的。本文主要是关于&lt;code&gt;第二章Java并发机制的底层实现原理&lt;/code&gt;的相关笔记。主要包括&lt;code&gt;volatile&lt;/code&gt;,&lt;code&gt;synchronized&lt;/code&gt;,&lt;code&gt;原子操作&lt;/code&gt;等实现原理的分析。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.lixueduan.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.lixueduan.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>基于Hexo搭建个人博客之（四）--管理篇</title>
    <link href="https://www.lixueduan.com/posts/33469.html"/>
    <id>https://www.lixueduan.com/posts/33469.html</id>
    <published>2018-12-27T14:00:00.000Z</published>
    <updated>2019-02-06T01:14:55.264Z</updated>
    
    <content type="html"><![CDATA[<p>本章主要记录了如何通过使用<code>Github</code>的<code>分支功能</code>解决更换电脑后博客更新不方便的问题，让你的博客能在各个电脑上灵活切换。在也不用担心换电脑后博客配置丢失等问题了。</p><a id="more"></a><blockquote><p>这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。</p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><p>到此为止，我们已经完成了差不多所有的步骤。</p><ul><li>1.搭建博客</li><li>2.优化主题</li><li>3.部署收录</li></ul><p><strong>新问题：</strong></p><p>​    现在博客只能在自己的电脑上更新，如果换电脑了就很麻烦。配置文件主题什么的都要重新弄。所以网上找了找多台电脑同时操作的办法，我们可以利用Github的分支功能。</p><p>​    将博客文件夹下所有文件全<code>push</code>到<code>Github</code>。这样换电脑后直接<code>pull</code>就可以了。</p><h2 id="1-新建分支"><a href="#1-新建分支" class="headerlink" title="1. 新建分支"></a>1. 新建分支</h2><ul><li><p>1.在<code>Github</code>的<code>lillusory.github.io</code>（hexo仓库）上新建一个分支，例如<code>Hexo</code>，并切换到该分支.</p></li><li><p>2.并在该仓库<code>Settings-&gt;Branches-&gt;Default branch</code>中将默认分支设为<code>Hexo</code>.<code>Hexo</code>分支是博客的开发环境，用来写博客，保存原始文件,<code>master</code>分支用于显示，保存生产的静态文件。</p></li><li><p>3.新建分支后将博客目录下的所有文件上传到该分支，注意由于一个<code>git仓库</code>中不能包含其他仓库，所以需要删除掉主题文件夹中的<code>.git</code>目录。</p></li><li><p>4.如果按照前面的博文添加了背景，则需要删掉<code>站点目录\themes\next\source\lib\canvas-nest</code>文件夹中的<code>.git</code>目录。以后需要更新主题时，可以先克隆到本地在复制到相应目录.</p></li></ul><h2 id="2-写博客"><a href="#2-写博客" class="headerlink" title="2. 写博客"></a>2. 写博客</h2><p>在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理。</p><ul><li>依次执行<code>git add .</code>、<code>git commit -m &quot;这里写备注&quot;</code>、<code>git push origin 这里写分支名字</code>指令将改动推送到GitHub（此时当前分支应为hexo）。</li><li>然后才执行<code>hexo g -d</code>发布网站到master分支上。</li></ul><h2 id="3-博客迁移"><a href="#3-博客迁移" class="headerlink" title="3. 博客迁移"></a>3. 博客迁移</h2><p>当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：</p><ul><li>克隆仓库<ul><li>使用<code>git clone git@github.com:illusorycloud/illusorycloud.github.io.git</code>拷贝仓库（默认分支为hexo）；//修改成自己的</li></ul></li><li>安装插件 在前面克隆下的项目中安装插件<ul><li>执行命令<code>npm install hexo、npm install</code>、<code>npm install hexo-deployer-git</code></li></ul></li></ul><h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h2><p><a href="https://blog.csdn.net/qq_25560423/article/details/53785707" target="_blank" rel="noopener">如何在多台电脑上更新博客</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章主要记录了如何通过使用&lt;code&gt;Github&lt;/code&gt;的&lt;code&gt;分支功能&lt;/code&gt;解决更换电脑后博客更新不方便的问题，让你的博客能在各个电脑上灵活切换。在也不用担心换电脑后博客配置丢失等问题了。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://www.lixueduan.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://www.lixueduan.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Android平台自动发送邮件demo</title>
    <link href="https://www.lixueduan.com/posts/9a79dc9b.html"/>
    <id>https://www.lixueduan.com/posts/9a79dc9b.html</id>
    <published>2018-12-25T14:00:00.000Z</published>
    <updated>2019-02-06T01:19:14.821Z</updated>
    
    <content type="html"><![CDATA[<p>一个Android平台自动发送邮件的小demo，记录了一下实现的过程。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-导包"><a href="#1-导包" class="headerlink" title="1. 导包"></a>1. 导包</h2><p>使用邮件发送功能,需要导入3个jar包.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">additional.jar</span><br><span class="line">mail.jar</span><br><span class="line">activation.jar</span><br><span class="line"></span><br><span class="line"><span class="comment">//用的是AndroidStudio</span></span><br><span class="line"> <span class="comment">//1.切换到Project视图</span></span><br><span class="line"> <span class="comment">//2.将这3个jar包放到app下的lib文件夹中</span></span><br><span class="line"> <span class="comment">//3.选择这个三个jar包右键 Add As Library</span></span><br><span class="line"> <span class="comment">//4.如果导入成功 在Module 的build.gradle中就能看到这个 和平常引入第三方库一样</span></span><br><span class="line">    <span class="function">implementation <span class="title">files</span><span class="params">(<span class="string">'libs/activation.jar'</span>)</span></span></span><br><span class="line"><span class="function">    implementation <span class="title">files</span><span class="params">(<span class="string">'libs/additionnal.jar'</span>)</span></span></span><br><span class="line"><span class="function">    implementation <span class="title">files</span><span class="params">(<span class="string">'libs/mail.jar'</span>)</span></span></span><br></pre></td></tr></table></figure><h2 id="2-创建Helper工具类"><a href="#2-创建Helper工具类" class="headerlink" title="2. 创建Helper工具类"></a>2. 创建Helper工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lillusory.com.androidemail;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.AsyncTask;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.activation.CommandMap;</span><br><span class="line"><span class="keyword">import</span> javax.activation.MailcapCommandMap;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Authenticator;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Message;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Multipart;</span><br><span class="line"><span class="keyword">import</span> javax.mail.PasswordAuthentication;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Session;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Transport;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.InternetAddress;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeBodyPart;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMultipart;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEmailHelper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MyEmailHelper.class.getSimpleName();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port = <span class="number">25</span>;  <span class="comment">//smtp协议使用的端口</span></span><br><span class="line">    <span class="keyword">private</span> String host = <span class="string">"smtp.163.com"</span>; <span class="comment">// 发件人邮件服务器</span></span><br><span class="line">    <span class="comment">//TODO 需要改成自己的账号和授权密码</span></span><br><span class="line">    <span class="keyword">private</span> String user = <span class="string">"xxx@163.com"</span>;   <span class="comment">// 使用者账号</span></span><br><span class="line">    <span class="keyword">private</span> String password = <span class="string">"xxx"</span>; <span class="comment">//使用者SMTP授权密码</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; emailTos;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; emailCCs;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String context;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; paths;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> SendStatus &#123;</span><br><span class="line">        SENDING, UNDO, SENDOK, SENDFAIL, BADCONTEXT</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SendStatus sendStatus;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmailInfterface</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">startSend</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">SendStatus</span><span class="params">(SendStatus sendStatus)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EmailInfterface EmailInfterface;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJieEmailInfterface</span><span class="params">(EmailInfterface EmailInfterface)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.EmailInfterface = EmailInfterface;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyEmailHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sendStatus = SendStatus.UNDO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造发送邮件帐户的服务器，端口，帐户，密码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyEmailHelper</span><span class="params">(String host, <span class="keyword">int</span> port, String user, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">        sendStatus = SendStatus.UNDO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> emailTos 主要接收人的电子邮箱列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> emailCCs 抄送人的电子邮箱列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title    邮件标题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context  正文内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> paths    发送的附件路径集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParams</span><span class="params">(List&lt;String&gt; emailTos, List&lt;String&gt; emailCCs, String title, String context,</span></span></span><br><span class="line"><span class="function"><span class="params">                          List&lt;String&gt; paths)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.emailTos = emailTos;</span><br><span class="line">        <span class="keyword">this</span>.emailCCs = emailCCs;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">        <span class="keyword">this</span>.paths = paths;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MyAsynTask().execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendEmailBg</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.put(<span class="string">"mail.smtp.host"</span>, host);</span><br><span class="line">        properties.put(<span class="string">"mail.smtp.port"</span>, port);</span><br><span class="line">        properties.put(<span class="string">"mail.smtp.auth"</span>, <span class="string">"true"</span>);<span class="comment">//true一定要加引号</span></span><br><span class="line">        properties.put(<span class="string">"mail.transport.protocol"</span>, <span class="string">"smtp"</span>);</span><br><span class="line"></span><br><span class="line">        MyAuthenticator jieAuth = <span class="keyword">new</span> MyAuthenticator(user, password);</span><br><span class="line"></span><br><span class="line">        Session session = Session.getInstance(properties, jieAuth);</span><br><span class="line">        <span class="comment">//创建一个消息</span></span><br><span class="line">        MimeMessage msg = <span class="keyword">new</span> MimeMessage(session);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置发送人</span></span><br><span class="line">        msg.setFrom(<span class="keyword">new</span> InternetAddress(user));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置主要接收人</span></span><br><span class="line">        <span class="keyword">if</span> (emailTos != <span class="keyword">null</span> &amp;&amp; !emailTos.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = emailTos.size();</span><br><span class="line">            InternetAddress[] addresses = <span class="keyword">new</span> InternetAddress[size];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                addresses[i] = <span class="keyword">new</span> InternetAddress(emailTos.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">            msg.setRecipients(Message.RecipientType.TO, addresses);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置抄送人的电子邮件</span></span><br><span class="line">        <span class="keyword">if</span> (emailCCs != <span class="keyword">null</span> &amp;&amp; !emailCCs.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = emailCCs.size();</span><br><span class="line">            InternetAddress[] addresses = <span class="keyword">new</span> InternetAddress[size];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                addresses[i] = <span class="keyword">new</span> InternetAddress(emailCCs.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">            msg.setRecipients(Message.RecipientType.CC, addresses);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        msg.setSubject(title);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个消息体</span></span><br><span class="line">        MimeBodyPart msgBodyPart = <span class="keyword">new</span> MimeBodyPart();</span><br><span class="line">        msgBodyPart.setText(context);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Multipart增加其他的parts</span></span><br><span class="line">        Multipart mp = <span class="keyword">new</span> MimeMultipart();</span><br><span class="line">        mp.addBodyPart(msgBodyPart);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建文件附件</span></span><br><span class="line">        <span class="keyword">if</span> (paths != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String path : paths) &#123;</span><br><span class="line">                MimeBodyPart fileBodyPart = <span class="keyword">new</span> MimeBodyPart();</span><br><span class="line">                fileBodyPart.attachFile(path);</span><br><span class="line">                mp.addBodyPart(fileBodyPart);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//增加Multipart到消息体中</span></span><br><span class="line">        msg.setContent(mp);</span><br><span class="line">        <span class="comment">//设置日期</span></span><br><span class="line">        msg.setSentDate(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="comment">//设置附件格式</span></span><br><span class="line">        MailcapCommandMap mc = (MailcapCommandMap) CommandMap.getDefaultCommandMap();</span><br><span class="line">        mc.addMailcap(<span class="string">"text/html;; x-java-content-handler=com.sun.mail.handlers.text_html"</span>);</span><br><span class="line">        mc.addMailcap(<span class="string">"text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml"</span>);</span><br><span class="line">        mc.addMailcap(<span class="string">"text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain"</span>);</span><br><span class="line">        mc.addMailcap(<span class="string">"multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed"</span>);</span><br><span class="line">        mc.addMailcap(<span class="string">"message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822"</span>);</span><br><span class="line">        CommandMap.setDefaultCommandMap(mc);</span><br><span class="line">        <span class="comment">//发送消息</span></span><br><span class="line">        Transport.send(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyAuthenticator</span> <span class="keyword">extends</span> <span class="title">Authenticator</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String strUser;</span><br><span class="line">        <span class="keyword">private</span> String strPwd;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyAuthenticator</span><span class="params">(String user, String password)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.strUser = user;</span><br><span class="line">            <span class="keyword">this</span>.strPwd = password;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> PasswordAuthentication <span class="title">getPasswordAuthentication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> PasswordAuthentication(strUser, strPwd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyAsynTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>, <span class="title">Void</span>, <span class="title">SendStatus</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.onPreExecute();</span><br><span class="line">            <span class="keyword">if</span> (EmailInfterface != <span class="keyword">null</span>) &#123;</span><br><span class="line">                EmailInfterface.startSend();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(SendStatus result)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.onPostExecute(result);</span><br><span class="line">            <span class="keyword">if</span> (EmailInfterface != <span class="keyword">null</span>) &#123;</span><br><span class="line">                EmailInfterface.SendStatus(result);</span><br><span class="line">            &#125;</span><br><span class="line">            sendStatus = SendStatus.UNDO;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> SendStatus <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sendStatus = SendStatus.SENDING;</span><br><span class="line">                sendEmailBg();</span><br><span class="line">                sendStatus = SendStatus.SENDOK;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                String message = e.getMessage();</span><br><span class="line">                Log.v(TAG, <span class="string">"邮件发送失败的原因--》"</span> + message);</span><br><span class="line">                SendStatus sendStatus = CheckErrorUtils.checkExcption(message);</span><br><span class="line">                e.printStackTrace();</span><br><span class="line"><span class="comment">//                MyEmailHelper.this.sendStatus = SendStatus.SENDFAIL;</span></span><br><span class="line">                MyEmailHelper.<span class="keyword">this</span>.sendStatus = sendStatus;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sendStatus;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-具体发送方法"><a href="#3-具体发送方法" class="headerlink" title="3. 具体发送方法"></a>3. 具体发送方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMail</span><span class="params">(String from, String to, String title, String context)</span> </span>&#123;</span><br><span class="line"><span class="comment">//          附件</span></span><br><span class="line"><span class="comment">//        List&lt;String&gt; files = new ArrayList&lt;String&gt;();</span></span><br><span class="line"><span class="comment">//        files.add("/mnt/sdcard/test.txt");</span></span><br><span class="line">        <span class="comment">//主要接收人的电子邮箱列表</span></span><br><span class="line">        List&lt;String&gt; toEmail = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        toEmail.add(to);</span><br><span class="line">        List&lt;String&gt; ccEmail = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="comment">//抄送人的电子邮箱列表 抄送给自己 防止被检测为垃圾邮件</span></span><br><span class="line">        ccEmail.add(from);</span><br><span class="line">        helper.setParams(toEmail, ccEmail, title, context, <span class="keyword">null</span>);</span><br><span class="line">        Log.v(TAG, <span class="string">"toEmail:"</span> + toEmail + <span class="string">" ccEmail:"</span> + ccEmail + <span class="string">" EMAIL_TITLE_APP:"</span> + title + <span class="string">" appEmailContext:"</span> + context);</span><br><span class="line">        helper.setJieEmailInfterface(<span class="keyword">new</span> MyEmailHelper.EmailInfterface() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startSend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"邮件发送中~"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendStatus</span><span class="params">(MyEmailHelper.SendStatus sendStatus)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">switch</span> (sendStatus) &#123;</span><br><span class="line">                    <span class="keyword">case</span> SENDOK:</span><br><span class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"发送邮件成功~"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> SENDFAIL:</span><br><span class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"发送邮件失败~"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> SENDING:</span><br><span class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"邮件正在发送中，请稍后重试~"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> BADCONTEXT:</span><br><span class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"邮件内容或标题被识别为垃圾邮件，请修改后重试~"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        helper.sendEmail();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4-发送失败原因检查"><a href="#4-发送失败原因检查" class="headerlink" title="4. 发送失败原因检查"></a>4. 发送失败原因检查</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lillusory.com.androidemail;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckErrorUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  MyEmailHelper.<span class="function">SendStatus <span class="title">checkExcption</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(message.contains(<span class="string">"554 DT:SPM"</span>))&#123;</span><br><span class="line">            <span class="comment">//发送失败原因有很多 这个是比较常见的问题 </span></span><br><span class="line">            Log.v(<span class="string">"Az"</span>,<span class="string">"邮件被识别为垃圾邮件了~"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> MyEmailHelper.SendStatus.BADCONTEXT;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-网络权限"><a href="#5-网络权限" class="headerlink" title="5. 网络权限"></a>5. 网络权限</h2><p>记得添加网络权限</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/android/email-sender.png" alt="picture"></p><p><a href="https://github.com/lillusory/EmailForAndroid" target="_blank" rel="noopener">点击下载Demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个Android平台自动发送邮件的小demo，记录了一下实现的过程。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://www.lixueduan.com/categories/Android/"/>
    
    
      <category term="Android" scheme="https://www.lixueduan.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>基于Hexo搭建个人博客之（三）--部署篇</title>
    <link href="https://www.lixueduan.com/posts/41257.html"/>
    <id>https://www.lixueduan.com/posts/41257.html</id>
    <published>2018-12-25T04:00:00.000Z</published>
    <updated>2019-02-06T01:14:37.131Z</updated>
    
    <content type="html"><![CDATA[<p>本章主要记录了如何将博客部署至云端，怎么设置个性域名，怎么将自己的网站提交到百度Google。让自己的网站能够出现在各大搜索引擎的具体方法和过程，希望能对大家有帮助。  </p><a id="more"></a><blockquote><p>这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。</p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-购买个性域名"><a href="#1-购买个性域名" class="headerlink" title="1. 购买个性域名"></a>1. 购买个性域名</h2><p>估计大家折腾了这么久也就是为 了拥有一个自己的个性站点,所以强烈建议大家为自己的博客站点配置一个独一无二的个性域名.我这里选择阿里旗下的<a href="https://wanwang.aliyun.com/?spm=5176.8142029.735711.62.f0586d3eFXYcmo" target="_blank" rel="noopener">万网</a>。我的域名是<a href="https://www.lixueduan.com">www.lixueduan.com</a></p><p>大家可以选择一个自己喜欢的域名。等部署完毕就可以通过域名访问自己的博客了。</p><p><strong>问题：</strong></p><ul><li><p><strong>GithubPages/CodingPages</strong></p><ul><li>Github Pages是<a href="https://github.com/" target="_blank" rel="noopener">Github</a>免费提供给开发者的一款托管个人网站的产品。</li><li>Coding Pages也是<a href="https://coding.net/" target="_blank" rel="noopener">Coding</a>免费提供给开发者的一款托管个人网站的产品。</li></ul></li><li><p><strong>关于为什么要部署两次</strong></p><blockquote><p>虽然可以根据自定义域名来访问自己的博客了，但是百度谷歌上都搜索不到，那岂不是很难受<code>╮(╯▽╰)╭</code>。</p><p>所以接下来为了让自己的博客能够被搜索出来，就需要让百度谷歌收录我们的网站。在部署收录过程中发现，<strong><code>Github</code>屏蔽了百度的爬虫</strong>，所以搭建上<code>GithubPages</code>的话无法提交至百度，只有Google可以收录。</p><p>所以为了让百度收录我们网站，就得在Coding上也搭建一个。</p><p>同时在搭建的过程中发现如果先搭建在Github上，然后再搭建Coding时会出现<code>DNS解析</code>冲突。所以需要：<strong>先搭建Coding上的，再搭建Github上的，国外的访问则走<code>Github</code>，国内的访问会走<code>Coding</code>，完美</strong></p></blockquote></li></ul><h2 id="2-部署到CodingPages"><a href="#2-部署到CodingPages" class="headerlink" title="2. 部署到CodingPages"></a>2. 部署到CodingPages</h2><h3 id="2-1-注册coding账户"><a href="#2-1-注册coding账户" class="headerlink" title="2.1 注册coding账户"></a>2.1 注册coding账户</h3><p> 点击这里注册Coding](<a href="https://coding.net/" target="_blank" rel="noopener">https://coding.net/</a>)</p><h3 id="2-2-创建新项目"><a href="#2-2-创建新项目" class="headerlink" title="2.2 创建新项目"></a>2.2 创建新项目</h3><ul><li>注册好后创建一个项目用来部署个人博客，项目路径和项目名称最好和用户名一致</li><li><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-deploy-coding1.png" alt=""></li></ul><h3 id="2-3-开启CodingPages"><a href="#2-3-开启CodingPages" class="headerlink" title="2.3 开启CodingPages"></a>2.3 开启CodingPages</h3><ul><li><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-deploy-coding2.png" alt=""></p><p>点击Pages服务，然后一键开启。</p></li></ul><p>部署master分支</p><p>自定义域名 可以填两个 <code>www.xxx.com</code> 和<code>xxx.com</code></p><p>绑定自定义域名的时候需要在买域名的地方(我这里是阿里的万网)配置DNS解析</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-coding-dns.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">添加两条CNAME解析</span><br><span class="line">主机记录</span><br><span class="line">一个@，一个www<span class="comment">//@就是无前缀，xxx.com, www就是www.xxx.com</span></span><br><span class="line">解析路线</span><br><span class="line">默认就行</span><br><span class="line">记录值</span><br><span class="line">lillusory.coding.me <span class="comment">//这里改成自己的</span></span><br></pre></td></tr></table></figure><p> 然后可以开启Https访问。</p><p>到这里就可以通过个性域名访问啦。不过现在博客代码还没有<code>push</code>到项目里。</p><h3 id="2-4-Push代码到Coding"><a href="#2-4-Push代码到Coding" class="headerlink" title="2.4 Push代码到Coding"></a>2.4 Push代码到Coding</h3><p><strong>配置SSH key</strong></p><p>首先需要配置一个<code>SSHkey</code>，<code>Git</code>有<code>Http</code>协议和<code>Git</code>协议两种。我们这里使用<code>Git</code>协议就需要配置一个<code>SSH key</code>,等会部署到<code>Github</code>上也需要配置这个。</p><p>具体配置方法如下：</p><p><a href="https://www.lixueduan.com/categories/Git/">Git 配置及SSH key</a></p><p><strong>修改站点配置文件</strong></p><p>这里只配置了Coding，可以先把Github的注释掉</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Deployment 部署到云端相关配置</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: </span><br><span class="line">   github: git<span class="meta">@github</span>.com:illusorycloud/illusorycloud.github.io.git</span><br><span class="line">   coding: git<span class="meta">@git</span>.coding.net:illusorycloud/illusorycloud.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p><strong>地址在这里：</strong></p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-deploy-coding3.png" alt=""></p><p>配置好后，运行<code>hexo g时就可以把博客部署到Coding上了，也可以通过个性域名访问了。</code></p><h2 id="3-收录到百度"><a href="#3-收录到百度" class="headerlink" title="3. 收录到百度"></a>3. 收录到百度</h2><h3 id="3-1-网站添加"><a href="#3-1-网站添加" class="headerlink" title="3.1 网站添加"></a>3.1 网站添加</h3><p>直接百度搜索你的域名,比如我的<code>www.lixueduan.com</code> ，如果没有收录就会提示暂未收录，点击<code>提交网址</code>。</p><p>点击这个链接进入百度站长平台，登录成功后选择`用户中心–&gt;站点管理–&gt;添加网站 </p><p>输入自己的网站，如<code>www.lixueduan.com</code> 协议头如果开启了<code>https</code>就选<code>https</code></p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-baidu1-add.png" alt=""></p><h3 id="3-2-网站验证"><a href="#3-2-网站验证" class="headerlink" title="3.2 网站验证"></a>3.2 网站验证</h3><p>然后会验证这个网站是不是你的，选CNAME验证</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-baidu2-verfication.png" alt=""></p><p>然后去域名哪里添加一条解析即可。</p><p>记录类型–&gt;<code>CNAME</code></p><p>主机记录—&gt;前面那一串<code>l3rUDBLOMX</code></p><p>记录值–&gt;后面那个<code>ziyuan.baidu.com</code></p><p>其他的都按默认的就行了，添加后别删除，需要一直留着。</p><h3 id="3-3-站点地图"><a href="#3-3-站点地图" class="headerlink" title="3.3 站点地图"></a>3.3 站点地图</h3><p>接下来我们需要生成网站地图<code>sitemap</code>,使用sitemap方式向百度提交我们的网址</p><p>站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。</p><ul><li>先安装一下，打开你的hexo博客根目录，分别用下面两个命令来安装针对谷歌和百度的插件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save  #sitemap.xml适合提交给谷歌搜素引擎</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save  #baidusitemap.xml适合提交百度搜索引擎</span><br></pre></td></tr></table></figure><ul><li>在<code>站点配置文件</code>中添加如下代码</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Plugins:</span><br><span class="line">- hexo-generator-baidu-sitemap</span><br><span class="line">- hexo-generator-sitemap</span><br><span class="line"></span><br><span class="line">baidusitemap:</span><br><span class="line">    path: baidusitemap.xml</span><br><span class="line">sitemap:</span><br><span class="line">    path: sitemap.xml</span><br></pre></td></tr></table></figure><p>在你的博客根目录的public下面发现生成了sitemap.xml以及baidusitemap.xml就表示成功了.</p><p>然后将博客重新部署后就可以直接访问站点地图了。如<code>https://www.lixueduan.com/baidusitemap.xml</code></p><p>然后将这个<code>站点地图</code>提交到百度</p><p><code>站点管理--&gt;站点属性--&gt;链接提交--&gt;自动提交--&gt;sitemap</code></p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-baidu3-sitemap.png" alt=""></p><p>完成后就算是提交成功了，百度比较慢，要好几天才能收录。</p><h2 id="4-部署到GitHub"><a href="#4-部署到GitHub" class="headerlink" title="4. 部署到GitHub"></a>4. 部署到GitHub</h2><p>步骤和Coding差不多的。</p><h3 id="4-1-注册Github账号"><a href="#4-1-注册Github账号" class="headerlink" title="4.1 注册Github账号"></a>4.1 注册Github账号</h3><p><a href="https://github.com/" target="_blank" rel="noopener">点这里注册Github账号</a></p><h3 id="4-2-创建新仓库"><a href="#4-2-创建新仓库" class="headerlink" title="4.2 创建新仓库"></a>4.2 创建新仓库</h3><p>也是名字必须和用户名一样，必须按照这个格式<code>username.github.io</code>，例如<code>lillusorycloud.github.io</code></p><p>创建好仓库后找到<code>Setings</code>  往下拉，找到<code>Github Pages</code>  设置<code>Custom domain</code>填下自定义域名，如<code>www.lixueduan.com</code>.如果有<code>Enforce HTTPS</code>选项也可以勾上。</p><h3 id="4-3-Push代码到Github"><a href="#4-3-Push代码到Github" class="headerlink" title="4.3 Push代码到Github"></a>4.3 Push代码到Github</h3><p><strong>配置SSH key</strong></p><p>首先需要配置一个<code>SSHkey</code>，<code>Git</code>有<code>Http</code>协议和<code>Git</code>协议两种。我们这里使用<code>Git</code>协议就需要配置一个<code>SSH key</code>,等会部署到<code>Github</code>上也需要配置这个。</p><p>具体配置方法：</p><p><a href="https://www.lixueduan.com/categories/Git/">Git 配置及SSH key</a></p><p><strong>修改站点配置文件</strong></p><p><code>repository</code>中添加一个<code>github</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Deployment 部署到云端相关配置</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: </span><br><span class="line">    github: git<span class="meta">@github</span>.com:illusorycloud/illusorycloud.github.io.git</span><br><span class="line">    coding: git<span class="meta">@git</span>.coding.net:illusorycloud/illusorycloud.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>配置好后，运行<code>hexo g时就可以把博客同时部署到Coding和Github上了，也可以通过个性域名访问了。</code></p><h2 id="5-收录到Google"><a href="#5-收录到Google" class="headerlink" title="5. 收录到Google"></a>5. 收录到Google</h2><p>和百度差不多。</p><h3 id="5-1-网站添加"><a href="#5-1-网站添加" class="headerlink" title="5.1 网站添加"></a>5.1 网站添加</h3><p>首先进入<a href="https://www.google.com/webmasters/#?modal_active=none" target="_blank" rel="noopener">Google站点平台</a></p><p>然后添加资源，注意<code>http</code>和<code>https</code></p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-add.png" alt=""></p><h3 id="5-2-验证所有权"><a href="#5-2-验证所有权" class="headerlink" title="5.2 验证所有权"></a>5.2 验证所有权</h3><p>然后验证所有权,选择DNS供应商</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-verfication1.png" alt=""></p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-verfication2.png" alt=""></p><p>供应商选择其他，然后选择添加CNAME记录，在域名解析中添加一条记录。也是添加后不要删除。</p><h3 id="5-3-站点地图"><a href="#5-3-站点地图" class="headerlink" title="5.3 站点地图"></a>5.3 站点地图</h3><p>验证后就可以添加站点地图了</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-sitemap.png" alt=""></p><p>提交成功后,我们的站点就已经被Google收录了.大概一天就能收录成功，比百度块一些。</p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>本文主要讲了怎么将博客部署到<code>Coding</code>和<code>Github</code>和怎么让<code>百度</code>,<code>Google</code>收录我们的网站。</p><h2 id="7-参考"><a href="#7-参考" class="headerlink" title="7.参考"></a>7.参考</h2><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方文档</a></p><p><a href="https://www.jianshu.com/p/cc902b54d493" target="_blank" rel="noopener">基于Hexo的个人博客</a></p><p><a href="https://blog.csdn.net/qq_35561857/article/details/81590953" target="_blank" rel="noopener">Hex博客搭建</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章主要记录了如何将博客部署至云端，怎么设置个性域名，怎么将自己的网站提交到百度Google。让自己的网站能够出现在各大搜索引擎的具体方法和过程，希望能对大家有帮助。  &lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://www.lixueduan.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://www.lixueduan.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot入门系列(一)--HelloWorld</title>
    <link href="https://www.lixueduan.com/posts/22f8f0ac.html"/>
    <id>https://www.lixueduan.com/posts/22f8f0ac.html</id>
    <published>2018-12-22T14:00:00.000Z</published>
    <updated>2019-02-06T01:11:00.521Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了SpringBoot是什么、怎么使用和为什么要用SpringBoot。使用Spring boot ，可以轻松的创建独立运行的程序，非常容易构建独立的服务组件，是实现分布式架构、微服务架构利器。Spring boot简化了第三方包的引用，通过提供的starter，简化了依赖包的配置。</p><a id="more"></a><blockquote><p> 更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-SpringBoot介绍"><a href="#1-SpringBoot介绍" class="headerlink" title="1. SpringBoot介绍"></a>1. SpringBoot介绍</h2><p><strong>Spring boot的优点</strong></p><ul><li>轻松创建独立的Spring应用程序。</li><li>内嵌Tomcat、jetty等web容器，不需要部署WAR文件。</li><li>提供一系列的“starter” 来简化的Maven配置。</li><li>开箱即用，尽可能自动配置Spring。</li></ul><h2 id="2-创建SpringBoot项目"><a href="#2-创建SpringBoot项目" class="headerlink" title="2.创建SpringBoot项目"></a>2.创建SpringBoot项目</h2><p>如果使用的是IDEA则非常方便的创建SpringBoot项目，在新建项目的时候选择Spring initializr填写一些基本信息后就可以了。</p><p> Eclipse的话就需要去官网构建。</p><p><strong>maven构建项目</strong></p><p>1、访问<code>http://start.spring.io/</code></p><p>2、选择构建工具Maven Project、Spring Boot版本等一些工程基本信息</p><p>3、点击Generate Project下载项目压缩包</p><p>4、解压后，使用eclipse，Import -&gt; Existing Maven Projects -&gt; Next -&gt;选择解压后的文件夹-&gt; Finsh，OK！</p><h3 id="2-controller"><a href="#2-controller" class="headerlink" title="2. controller"></a>2. controller</h3><p>@SpringBootApplication </p><p>SpringBoot启动类注解</p><h3 id="3-hello"><a href="#3-hello" class="headerlink" title="3 hello"></a>3 hello</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/gethello"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"msg"</span>, <span class="string">"hello"</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-整合Servlet"><a href="#3-整合Servlet" class="headerlink" title="3. 整合Servlet"></a>3. 整合Servlet</h2><h3 id="3-1-方式一-扫描注解注册Servlet"><a href="#3-1-方式一-扫描注解注册Servlet" class="headerlink" title="3.1 方式一 扫描注解注册Servlet"></a>3.1 方式一 扫描注解注册Servlet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(name = <span class="string">"FirstServlet"</span>,urlPatterns = <span class="string">"/first"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@WebServlet(name = “FirstServlet”,urlPatterns = “/first”) 相当于web.xml中的以下配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>FirstServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.demo.FirstServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>FirstServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/firse<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>@ServletComponentScan  让SpringBoot在启动时扫描@WebServlet注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HelloApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-方式二-通过方法注册Servlet"><a href="#3-2-方式二-通过方法注册Servlet" class="headerlink" title="3.2 方式二 通过方法注册Servlet"></a>3.2 方式二 通过方法注册Servlet</h3><p>该方式 创建servlet后不用任何注解，直接在启动器中注册servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">app</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(app.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">Register</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletRegistrationBean bean=<span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> FirstServlet());</span><br><span class="line">        bean.addUrlMappings(<span class="string">"/first"</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-整合Filter"><a href="#4-整合Filter" class="headerlink" title="4. 整合Filter"></a>4. 整合Filter</h2><h3 id="4-1-方式一-扫描注解注册Filter"><a href="#4-1-方式一-扫描注解注册Filter" class="headerlink" title="4.1 方式一 扫描注解注册Filter"></a>4.1 方式一 扫描注解注册Filter</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@WebFilter(filterName = &quot;firstFilter&quot;,urlPatterns =&quot;/first&quot;)</span><br><span class="line">public class FirstFilter implements Filter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class="line">        System.out.println(&quot;进入Filter&quot;);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        System.out.println(&quot;放行Filter&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@WebFilter(filterName = “firstFilter”,urlPatterns =”/first”)</strong></p><h3 id="4-2-方式二-通过方法注册Servlet"><a href="#4-2-方式二-通过方法注册Servlet" class="headerlink" title="4.2 方式二 通过方法注册Servlet"></a>4.2 方式二 通过方法注册Servlet</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public FilterRegistrationBean RegisterFilter() &#123;</span><br><span class="line">    FilterRegistrationBean bean = new FilterRegistrationBean&lt;&gt;(new FirstFilter());</span><br><span class="line">    bean.addUrlPatterns(&quot;/first&quot;);</span><br><span class="line">    return bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-整合Listener"><a href="#5-整合Listener" class="headerlink" title="5. 整合Listener"></a>5. 整合Listener</h2><h3 id="5-1-方式一-扫描注解注册Listener"><a href="#5-1-方式一-扫描注解注册Listener" class="headerlink" title="5.1 方式一 扫描注解注册Listener"></a>5.1 方式一 扫描注解注册Listener</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@WebListener</strong></p><h3 id="5-2-方式二-通过方法注册Listener"><a href="#5-2-方式二-通过方法注册Listener" class="headerlink" title="5.2 方式二 通过方法注册Listener"></a>5.2 方式二 通过方法注册Listener</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean&lt;FirstListener&gt; <span class="title">registerListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ServletListenerRegistrationBean&lt;FirstListener&gt; bean = <span class="keyword">new</span>              ServletListenerRegistrationBean&lt;&gt;(<span class="keyword">new</span> FirstListener());</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-访问静态资源"><a href="#6-访问静态资源" class="headerlink" title="6. 访问静态资源"></a>6. 访问静态资源</h2><p><strong>1.从classpath/static目录下（名称必须是static）</strong></p><p>2.ServletContext根目录下</p><p><strong>src/main/webapp(名称必须是webapp)</strong></p><p>访问路径：localhost:8080/filename</p><h2 id="7-文件上传"><a href="#7-文件上传" class="headerlink" title="7.文件上传"></a>7.文件上传</h2><h4 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"fileuploadController"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    上传文件<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"filename"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Controller</span></span><br><span class="line"><span class="meta">@RestController</span> <span class="comment">//对方法返回值会自动做json格式转换 不用@responseBody了</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">fileuploadController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/fileuploadController"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">fileUpload</span><span class="params">(MultipartFile filename)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(filename.getOriginalFilename());</span><br><span class="line">        filename.transferTo(<span class="keyword">new</span> File(<span class="string">"e:/"</span>+filename.getOriginalFilename()));</span><br><span class="line">        Map&lt;String,Object&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"msg"</span>,<span class="string">"ok"</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文件大小限制"><a href="#文件大小限制" class="headerlink" title="文件大小限制"></a>文件大小限制</h4><p>application.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.servlet.multipart.max-request-size=200MB</span><br><span class="line">spring.servlet.multipart.max-file-size=200MB</span><br></pre></td></tr></table></figure><h2 id="8-总结"><a href="#8-总结" class="headerlink" title="8.总结"></a>8.总结</h2><h3 id="8-1注解方式"><a href="#8-1注解方式" class="headerlink" title="8.1注解方式"></a>8.1注解方式</h3><ul><li><strong>Servlet</strong>   @WebServlet(name = “FirstServlet”,urlPatterns = “/first”)</li><li><strong>Filter</strong>       @WebFilter(filterName = “firstFilter”,urlPatterns =”/first”)</li><li><strong>Listener</strong> @WebListener</li><li>启动器     @ServletComponentScan</li></ul><h3 id="8-2-方法注册"><a href="#8-2-方法注册" class="headerlink" title="8.2 方法注册"></a>8.2 方法注册</h3><p>不用加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//---------Servlet------------------   </span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">Register</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletRegistrationBean bean=<span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> FirstServlet());</span><br><span class="line">        bean.addUrlMappings(<span class="string">"/first"</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//---------Filter------------------   </span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">RegisterFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;(<span class="keyword">new</span> FirstFilter());</span><br><span class="line">    bean.addUrlPatterns(<span class="string">"/first"</span>);</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//---------Linster------------------  </span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean&lt;FirstListener&gt; <span class="title">registerListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ServletListenerRegistrationBean&lt;FirstListener&gt; bean = <span class="keyword">new</span>              ServletListenerRegistrationBean&lt;&gt;(<span class="keyword">new</span> FirstListener());</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了SpringBoot是什么、怎么使用和为什么要用SpringBoot。使用Spring boot ，可以轻松的创建独立运行的程序，非常容易构建独立的服务组件，是实现分布式架构、微服务架构利器。Spring boot简化了第三方包的引用，通过提供的starter，简化了依赖包的配置。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://www.lixueduan.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://www.lixueduan.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>基于Hexo搭建个人博客之（二）--主题优化篇</title>
    <link href="https://www.lixueduan.com/posts/58273.html"/>
    <id>https://www.lixueduan.com/posts/58273.html</id>
    <published>2018-12-22T14:00:00.000Z</published>
    <updated>2019-02-06T01:14:27.604Z</updated>
    
    <content type="html"><![CDATA[<p>本章主要包含了博客主题优化相关内容，第三方服务和插件的配置与使用。如：炫酷头像动态背景、链接变色、鼠标点击效果、站点字数、访客数统计等。</p><a id="more"></a><blockquote><p>这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。</p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h3 id="0-选择主题"><a href="#0-选择主题" class="headerlink" title="0. 选择主题"></a>0. 选择主题</h3><p>你可以点击这里选择你喜欢的<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Themes</a>,里面有大量美观的主题 </p><p>我这里用的是简约著称的<code>Next</code>主题.</p><ul><li>下载主题<ul><li>使用<code>git</code>命令下载该主题到本地.</li><li><code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code>  </li><li>clone成功后,你的Themes文件夹下就会有next主题文件了.</li></ul></li><li>Hexo配置文件:<ul><li>都叫<code>_config.yml</code></li><li>一份位于站点根目录下，主要包含 Hexo 本身的配置,称为 <code>站点配置文件</code></li><li>另一份位于主题目录下主要用于配置主题相关的选项,称为<code>主题配置文件</code></li></ul></li><li>开启主题<ul><li><code>站点配置文件</code>进行修改: 将<code>theme: landscape</code>修改为 <code>theme: next</code> </li></ul></li></ul><h3 id="1-侧边栏头像设置"><a href="#1-侧边栏头像设置" class="headerlink" title="1. 侧边栏头像设置"></a>1. 侧边栏头像设置</h3><p>新版next注意引入了该功能,直接在<code>主题配置文件</code>修改即可,如下:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar 头像</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line"><span class="attr">  url:</span> <span class="string">/images/avatar.gif</span></span><br><span class="line">  <span class="comment"># 圆形头像</span></span><br><span class="line"><span class="attr">  rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 透明度 0~1之间</span></span><br><span class="line"><span class="attr">  opacity:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># 头像旋转</span></span><br><span class="line"><span class="attr">  rotated:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="2-设置个人社交图标链接"><a href="#2-设置个人社交图标链接" class="headerlink" title="2. 设置个人社交图标链接"></a>2. 设置个人社交图标链接</h3><p>直接在<code>主题配置文件</code>修改即可,如下:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Social Links. 社交链接 前面为链接地址 后面是图标 </span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line"><span class="attr">  GitHub:</span> <span class="attr">https://github.com/illusorycloud</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line"><span class="attr">  E-Mail:</span> <span class="attr">mailto:xueduan.li@gmail.com</span> <span class="string">||</span> <span class="string">envelope</span></span><br><span class="line">  <span class="comment">#Weibo: https://weibo.com/yourname || weibo</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || google</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || facebook</span></span><br><span class="line">  <span class="comment">#VK Group: https://vk.com/yourname || vk</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || skype</span></span><br><span class="line"><span class="comment"># 图标配置 </span></span><br><span class="line"><span class="attr">social_icons:</span></span><br><span class="line">  <span class="comment">#是否显示图标</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">#是否只显示图标</span></span><br><span class="line"><span class="attr">  icons_only:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">#是否开启图标变化(就是刷新后会变颜色)</span></span><br><span class="line"><span class="attr">  transition:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="3-添加菜单项"><a href="#3-添加菜单项" class="headerlink" title="3. 添加菜单项"></a>3. 添加菜单项</h3><p>1.先在<code>主题配置文件</code>修改</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line"><span class="attr">  about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line"><span class="attr">  AAAAA:</span> <span class="string">/BBBBB/</span> <span class="string">||</span> <span class="string">CCC</span></span><br><span class="line"><span class="string">其中AAA</span> <span class="string">为菜单项的名字,BBB是路径,CCC是菜单项显示的图标</span></span><br></pre></td></tr></table></figure><p> <code>next</code> 使用的是 <a href="http://fontawesome.io/" target="_blank" rel="noopener">Font Awesome</a> 提供的图标 ,在这里可以选择自己喜欢的图标.</p><p>2.生成上述路径的文件</p><p><code>git</code>命令行输入</p><p><code>hexo new page BBB</code> –其中BBB替换为具体的名字,会在<code>站点目录\source</code>下新增一个BBB文件夹,文件夹中有一个<code>index.md</code>文件，需要在文件头中增加一句<code>type: XXX</code>,例如<code>type: categories</code>。这样就会在这个页面显示所有的分类了。</p><p>3.修改主题文件下的对应语言的配置文件,这里是中文就修改<code>zh-CN.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">首页</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">归档</span></span><br><span class="line">  <span class="string">AAAA</span> <span class="string">:</span> <span class="string">XXXX</span></span><br><span class="line"><span class="string">AAA为上边的菜单项名字,XXX为中文的名字</span></span><br></pre></td></tr></table></figure><h3 id="4-添加RSS"><a href="#4-添加RSS" class="headerlink" title="4. 添加RSS"></a>4. 添加RSS</h3><ul><li><p>1.安装插件</p><ul><li><p>首先在Git中运行<code>npm install --save hexo-generator-feed</code>命令,安装插件,插件会放在</p><p><code>node_modules</code>文件夹里面.</p></li></ul></li><li><p>2.修改<code>站点配置文件</code></p><ul><li>安装好插件后,打开站点配置文件_config.yml`,在末尾加入以下代码:</li></ul></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: http://hexo.io/plugins/</span></span><br><span class="line"><span class="attr">plugins:</span> <span class="string">hexo-generate-feed</span></span><br></pre></td></tr></table></figure><ul><li>3.修改<code>主题配置文件</code><ul><li>打开主题配置文件<code>_config.yml</code>,找到<code>rss</code> 添加配置:<code>rss: /atom.xml</code> </li></ul></li></ul><h3 id="5-设置酷炫动态背景"><a href="#5-设置酷炫动态背景" class="headerlink" title="5. 设置酷炫动态背景"></a>5. 设置酷炫动态背景</h3><p>next主题提供了两种背景可以选择.</p><ul><li>第一种背景（我是用的这种）</li></ul><p>新版本的next主题的话直接在主题配置文件中,找到<code>canvas-nest</code> 修改为<code>canvas-nest: true</code>,</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span></span><br><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  onmobile:</span> <span class="literal">true</span> <span class="comment"># display on mobile or not</span></span><br><span class="line"><span class="attr">  color:</span> <span class="string">'0,0,255'</span> <span class="comment"># RGB values, use ',' to separate</span></span><br><span class="line"><span class="attr">  opacity:</span> <span class="number">0.5</span> <span class="comment"># the opacity of line: 0~1</span></span><br><span class="line"><span class="attr">  zIndex:</span> <span class="bullet">-1</span> <span class="comment"># z-index property of the background</span></span><br><span class="line"><span class="attr">  count:</span> <span class="number">99</span> <span class="comment"># the number of lines</span></span><br></pre></td></tr></table></figure><p>进入theme/next目录</p><p> 执行命令<code>git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest</code></p><ul><li>第二种背景</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># JavaScript 3D library.</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-three</span></span><br><span class="line"><span class="comment"># three_waves</span></span><br><span class="line"><span class="attr">three_waves:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># canvas_lines</span></span><br><span class="line"><span class="attr">canvas_lines:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># canvas_sphere</span></span><br><span class="line"><span class="attr">canvas_sphere:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>也是需要下载依赖 </p><ol><li>进入theme/next目录</li><li>执行命令：<code>git clone https://github.com/theme-next/theme-next-three source/lib/three</code></li></ol><p><strong>4个背景中只能开启一种背景,不然会出错</strong></p><h3 id="6-设置网站logo"><a href="#6-设置网站logo" class="headerlink" title="6. 设置网站logo"></a>6. 设置网站logo</h3><p>把你的图片放在<code>themes/next/source/images</code>里 </p><p>打开<code>主题配置文件</code>_config.yml ,找到字段<code>favicon:</code>  都修改为对应路径</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line"><span class="attr">  small:</span> <span class="string">/images/favicon-16x16-next.png</span></span><br><span class="line"><span class="attr">  medium:</span> <span class="string">/images/favicon-32x32-next.png</span></span><br><span class="line"><span class="attr">  apple_touch_icon:</span> <span class="string">/images/apple-touch-icon-next.png</span></span><br><span class="line"><span class="attr">  safari_pinned_tab:</span> <span class="string">/images/logo.svg</span></span><br></pre></td></tr></table></figure><h3 id="7-实现点击出现桃心效果"><a href="#7-实现点击出现桃心效果" class="headerlink" title="7. 实现点击出现桃心效果"></a>7. 实现点击出现桃心效果</h3><p><code>themes/next/source/js/src</code>里面 新建一个love.js,</p><p>复制下面的代码进去</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">"left:"</span>+d[e].x+<span class="string">"px;top:"</span>+d[e].y+<span class="string">"px;opacity:"</span>+d[e].alpha+<span class="string">";transform:scale("</span>+d[e].scale+<span class="string">","</span>+d[e].scale+<span class="string">") rotate(45deg);background:"</span>+d[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">"function"</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;setTimeout(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure><p>然后打开<code>\themes\next\layout\_layout.swig</code>文件,在末尾 添加以下代码： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面点击小红心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/love.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-修改文章内链接文本样式"><a href="#8-修改文章内链接文本样式" class="headerlink" title="8. 修改文章内链接文本样式"></a>8. 修改文章内链接文本样式</h3><p>鼠标移动到连接上变颜色</p><p>修改文件 <code>themes\next\source\css\_common\components\post\post.styl</code>，在末尾添加如下css样式，：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 文章内链接文本样式</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-id">#fc6423</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: <span class="selector-tag">none</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fc6423</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-设置顶部滚动加载条"><a href="#9-设置顶部滚动加载条" class="headerlink" title="9. 设置顶部滚动加载条"></a>9. 设置顶部滚动加载条</h3><p>打开<code>next\layout\_partials\head</code>文件，在文件末尾添加以下代码: </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/pace/1.0.2/pace.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.pace</span> <span class="selector-class">.pace-progress</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-id">#1E92FB</span>; <span class="comment">/*进度条颜色*/</span></span></span><br><span class="line"><span class="undefined">        height: 3px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.pace</span> <span class="selector-class">.pace-progress-inner</span> &#123;</span></span><br><span class="line"><span class="css">         <span class="selector-tag">box-shadow</span>: 0 0 10<span class="selector-tag">px</span> <span class="selector-id">#1E92FB</span>, 0 0 5<span class="selector-tag">px</span>     <span class="selector-id">#1E92FB</span>; <span class="comment">/*阴影颜色*/</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.pace</span> <span class="selector-class">.pace-activity</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border-top-color</span>: <span class="selector-id">#1E92FB</span>;    <span class="comment">/*上边框颜色*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">border-left-color</span>: <span class="selector-id">#1E92FB</span>;    <span class="comment">/*左边框颜色*/</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-在每篇文章末尾统一添加“本文结束”标记"><a href="#10-在每篇文章末尾统一添加“本文结束”标记" class="headerlink" title="10. 在每篇文章末尾统一添加“本文结束”标记"></a>10. 在每篇文章末尾统一添加“本文结束”标记</h3><p>在路径 <code>\themes\next\layout\_macro</code> 中新建 <code>page-end-tag.swig</code> 文件,并添加以下内容： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--文字可以自己修改--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center;color: #A2CD5A;font-size:15px;"</span>&gt;</span>------------------本文到此结束<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-paw"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>感谢您的阅读------------------<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着打开<code>\themes\next\layout\_macro\post.swig</code>文件，在<code>post-body</code> 之后， <code>post-footer</code> 之前添加下面的代码 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    &#123;% include 'page-end-tag.swig' %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后打开主题配置文件（<code>_config.yml</code>),在末尾添加： </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文章末尾添加“本文结束”标记</span></span><br><span class="line"><span class="attr">page_end_tag:</span></span><br><span class="line"><span class="attr">  enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="11-静态资源压缩"><a href="#11-静态资源压缩" class="headerlink" title="11. 静态资源压缩"></a>11. 静态资源压缩</h3><p>Hexo自动生成的html中有很多空白的地方,会影响加载速度,所以最好还是压缩一下.</p><p>这里使用<code>hexo-neat</code>插件来压缩。</p><ul><li><p>安装插件</p><ul><li><code>npm install hexo-neat --save</code></li></ul></li><li><p>在<code>站点配置文件</code>添加配置</p><ul><li><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-neat</span></span><br><span class="line"><span class="comment"># 博文压缩</span></span><br><span class="line"><span class="attr">neat_enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 压缩html</span></span><br><span class="line"><span class="attr">neat_html:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  exclude:</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 压缩css  跳过min.css</span></span><br><span class="line"><span class="attr">neat_css:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  exclude:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'**/*.min.css'</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 压缩js 跳过min.js</span></span><br><span class="line"><span class="attr">neat_js:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  mangle:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  output:</span></span><br><span class="line"><span class="attr">  compress:</span></span><br><span class="line"><span class="attr">  exclude:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'**/*.min.js'</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'**/jquery.fancybox.pack.js'</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'**/index.js'</span>  </span><br><span class="line"><span class="bullet">    -</span> <span class="string">'**/love.js'</span></span><br><span class="line"><span class="comment"># 压缩博文配置结束</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>3.使用 </p><ul><li>以后再执行<code>hexo g</code>命令时就会自动压缩了</li></ul></li></ul><h3 id="12-主页文章添加阴影效果"><a href="#12-主页文章添加阴影效果" class="headerlink" title="12. 主页文章添加阴影效果"></a>12. 主页文章添加阴影效果</h3><p>打开<code>\themes\next\source\css\_custom\custom.styl</code>,向里面加入： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主页文章添加阴影效果</span></span><br><span class="line"> .post &#123;</span><br><span class="line">   margin-top: <span class="number">60</span>px;</span><br><span class="line">   margin-bottom: <span class="number">60</span>px;</span><br><span class="line">   padding: <span class="number">25</span>px;</span><br><span class="line">   -webkit-box-shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">5</span>px rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, <span class="number">.5</span>);</span><br><span class="line">   -moz-box-shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">5</span>px rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, <span class="number">.5</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="13-修改文章底部的的标签样式"><a href="#13-修改文章底部的的标签样式" class="headerlink" title="13. 修改文章底部的的标签样式"></a>13. 修改文章底部的的标签样式</h3><p>打开模板文件<code>/themes/next/layout/_macro/post.swig</code>，找到<code>rel=&quot;tag&quot;&gt;#</code>字段， 将<code># 换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code>,其中tag是你选择标签图标的名字,也是可以自定义的 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for(tag.path) &#125;&#125;"</span> <span class="attr">rel</span>=<span class="string">"tag"</span>&gt;</span> <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-tag"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> &#123;&#123; tag.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="14-实现文章字数统计和预计阅读时间"><a href="#14-实现文章字数统计和预计阅读时间" class="headerlink" title="14. 实现文章字数统计和预计阅读时间"></a>14. 实现文章字数统计和预计阅读时间</h3><p>1.在站点根目录下使用<code>GitBash</code>命令安装 <code>hexo-wordcoun</code>t插件:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure><p>2.在全局配置文件<code>_config.yml</code>中激活插件:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line"><span class="attr">    symbols:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    time:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    total_symbols:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    total_time:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>3.在主题的配置文件<code>_config.yml</code>中进行如下配置:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字数统计</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line"><span class="attr">  separated_meta:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  item_text_post:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  item_text_total:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  awl:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">  wpm:</span> <span class="number">275</span></span><br></pre></td></tr></table></figure><p>到此,我们就实现了文章字数统计和预估时间的显示功能</p><h3 id="15-在文章底部增加版权信息"><a href="#15-在文章底部增加版权信息" class="headerlink" title="15. 在文章底部增加版权信息"></a>15. 在文章底部增加版权信息</h3><p>修改<code>主题配置文件</code>,找到<code>creative_commons</code>字段</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Creative Commons 4.0 International License.</span></span><br><span class="line"><span class="comment"># https://creativecommons.org/share-your-work/licensing-types-examples</span></span><br><span class="line"><span class="comment"># Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span></span><br><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="comment">#选择一个License</span></span><br><span class="line"><span class="attr">  license:</span> <span class="string">by-nc-sa</span></span><br><span class="line">  <span class="comment">#是否在侧边栏显示</span></span><br><span class="line"><span class="attr">  sidebar:</span> <span class="literal">false</span>  </span><br><span class="line">  <span class="comment">#是否在文章末尾显示</span></span><br><span class="line"><span class="attr">  post:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="16-文章置顶"><a href="#16-文章置顶" class="headerlink" title="16. 文章置顶"></a>16. 文章置顶</h3><p>打开文件：<code>node_modules/hexo-generator-index/lib/generator.js</code>,将原来的代码用下面的代码替换掉</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">'hexo-pagination'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">  <span class="keyword">var</span> posts = locals.posts;</span><br><span class="line">    posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章top都有定义</span></span><br><span class="line">            <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</span><br><span class="line">  <span class="keyword">return</span> pagination(<span class="string">''</span>, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</span><br><span class="line">    format: paginationDir + <span class="string">'/%d/'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>写文章的时候,在标题加上top值,数值越大排在越前面.</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tag: hexo </span><br><span class="line">copyright: true</span><br><span class="line">password: xxx</span><br><span class="line">top: 150</span><br></pre></td></tr></table></figure><h3 id="17-在网站底部加上访问量"><a href="#17-在网站底部加上访问量" class="headerlink" title="17. 在网站底部加上访问量"></a>17. 在网站底部加上访问量</h3><p><strong>Next主题配置这个就比较方便了</strong></p><p>打开<code>主题配置文件</code>，找到如下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_visitors:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_visitors_icon:</span> <span class="string">user</span></span><br><span class="line"><span class="attr">  total_views:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_views_icon:</span> <span class="string">eye</span></span><br><span class="line"><span class="attr">  post_views:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  post_views_icon:</span> <span class="string">eye</span></span><br></pre></td></tr></table></figure><p>将<code>enable</code>的值由<code>false</code>改为<code>true</code>，便可以看到页脚出现访问量.</p><p>另外本地预览时访客数异常是正常的,部署至云端后就不会出现这样的问题.</p><h3 id="18-网站搜索功能"><a href="#18-网站搜索功能" class="headerlink" title="18. 网站搜索功能"></a>18. 网站搜索功能</h3><p>1.安装插件</p><p>​    站点目录下执行命令<code>npm install hexo-generator-searchdb --save</code></p><p>2.修改<code>站点配置文件</code> </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">  field:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">  format:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>3.修改<code>主题配置文件</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="string">enable</span></span><br><span class="line">  <span class="comment"># if auto, trigger search by changing input</span></span><br><span class="line">  <span class="comment"># if manual, trigger search by pressing enter key or search button</span></span><br><span class="line"><span class="attr">  trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># show top n results per article, show all results by setting to -1</span></span><br><span class="line"><span class="attr">  top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># unescape html strings to the readable one</span></span><br><span class="line"><span class="attr">  unescape:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>重新开启服务后即可看到效果。</p><h3 id="TODO开启留言评论功能"><a href="#TODO开启留言评论功能" class="headerlink" title="TODO开启留言评论功能"></a>TODO开启留言评论功能</h3><p>//TODO 待更新</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方文档</a></p><p><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">Next官方文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章主要包含了博客主题优化相关内容，第三方服务和插件的配置与使用。如：炫酷头像动态背景、链接变色、鼠标点击效果、站点字数、访客数统计等。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://www.lixueduan.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://www.lixueduan.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>基于Hexo搭建个人博客之（一）--基础篇</title>
    <link href="https://www.lixueduan.com/posts/18973.html"/>
    <id>https://www.lixueduan.com/posts/18973.html</id>
    <published>2018-12-20T14:00:00.000Z</published>
    <updated>2019-02-06T01:14:45.995Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录了如何搭建自己的博客。基于Hexo框架在本地搭建自己博客的全过程，包括了环境准备到Hexo初始化，再到服务的开启等。</p><a id="more"></a><blockquote><p>这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。</p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><ul><li>Git  <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git下载地址</a></li><li>Node.js  <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js下载地址</a></li></ul><p>小白式安装，一直下一步就ok了。</p><p>都安装好后就可以开始安装Hexo啦.</p><h2 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2. 安装Hexo"></a>2. 安装Hexo</h2><ul><li>1.新建一个文件夹,用于安装Hexo,以后这个就是放博客文件的.</li><li>2.在此文件夹右键,<code>Git Bash Here</code>,打开Git</li><li>3.安装Hexo  命令<code>npm install -g hexo</code></li><li>4.初始化Hexo  命令<code>hexo init</code></li><li>5.安装组件  命令<code>npm install</code></li></ul><p>到此为止,Hexo就算是安装完成了。</p><h2 id="3-开启服务"><a href="#3-开启服务" class="headerlink" title="3. 开启服务"></a>3. 开启服务</h2><ul><li><p>1.<code>hexo generate</code>或者简写<code>hexo g</code>  编译,生成静态文件,就是生成一个个html文件.</p></li><li><p>2.开启服务<code>hexo server</code>或者<code>hexo s</code>   成功开启后就可以在本地访问了。 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></p><ul><li>假如页面一直无法跳转，那么可能端口被占用了。此时我们ctrl+c停止服务器，<code>hexo server -p 端口号</code>来改变端口号  </li><li>如<code>hexo server -p 5000</code>  将端口号换为<code>5000</code>,默认是<code>4000</code></li></ul></li><li>3.常用命令 <ul><li><code>hexo clean</code>  清除缓存文件  </li><li><code>hexo deploy</code>或者<code>hexo d</code>  部署网站到云端,这个后面再讲。</li></ul></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录了如何搭建自己的博客。基于Hexo框架在本地搭建自己博客的全过程，包括了环境准备到Hexo初始化，再到服务的开启等。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://www.lixueduan.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://www.lixueduan.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>MVC和三层架构 (集中式)及SSM框架整合</title>
    <link href="https://www.lixueduan.com/posts/760fc833.html"/>
    <id>https://www.lixueduan.com/posts/760fc833.html</id>
    <published>2018-11-26T14:00:00.000Z</published>
    <updated>2019-02-06T01:12:46.629Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要讲了MVC和三层架构的关系，和SSM框架整合教程。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-三层架构"><a href="#1-三层架构" class="headerlink" title="1.三层架构"></a>1.三层架构</h2><p>整体分为三层,<code>表现层UI</code>,<code>业务逻辑层BLL</code>,<code>数据访问层DAL</code>.</p><ul><li>表现层  Controller  用户界面,负责与用户进行交互 </li><li>业务逻辑层  Service   具体的业务操作 </li><li>数据访问层   Dao  对数据库进行操作,为上层提供数据   </li></ul><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/ssm/3tier.png" alt=""></p><p>为了更好的降低各层间的耦合度，在三层架构程序设计中，采用面向抽象编程。即上层对下层的调用，是通过接口实现的。而下层对上层的真正服务提供者，是下层接口的实现类。服务标准（接口）是相同的，服务提供者（实现类）可以更换。这就实现了层间的耦合。 </p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/ssm/3tier-interface.png" alt=""></p><h2 id="2-MVC"><a href="#2-MVC" class="headerlink" title="2.MVC"></a>2.MVC</h2><p> MVC全名是Model View Controller，是<code>模型(model)</code>－<code>视图(view)</code>－<code>控制器(controller)</code>的缩写 .</p><ul><li><strong>Model（模型）</strong> - 模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器。</li><li><strong>View（视图）</strong> - 视图代表模型包含的数据的可视化。</li><li><strong>Controller（控制器）</strong> - 控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开。</li></ul><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/ssm/mvc.png" alt=""></p><h2 id="3-MVC与三层架构"><a href="#3-MVC与三层架构" class="headerlink" title="3.MVC与三层架构"></a>3.MVC与三层架构</h2><ul><li>经典三层架构和MVC的关系？—–&gt;    他们是两个毫无相关的东西<ul><li>经典三层架构是一种分层思想，将开发模式分为了这三层</li><li>MVC是一种设计模式，目的是让HTML代码和业务逻辑代码分开，让代码看起来更加清晰，便于开发</li></ul></li></ul><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/ssm/3tier-mvc.jpg" alt="mvc和三层架构"></p><h2 id="4-SSM框架和三层架构"><a href="#4-SSM框架和三层架构" class="headerlink" title="4.SSM框架和三层架构"></a>4.SSM框架和三层架构</h2><p>SSM即SpringMVC、Spring、Mybatis三个框架。它们在三层架构中所处的位置是不同的，即它们在三层架构中的功能各不相同，各司其职。</p><ul><li>SpringMVC：作为View层的实现者，完成用户的请求接收功能。SpringMVC的Controller作为整个应用的控制器，完成用户请求的转发及对用户的响应。</li><li>MyBatis：作为 Dao层的实现者，完成对数据库的增、删、改、查功能。</li><li><p>Spring：以整个应用大管家的身份出现。整个应用中所有的Bean的生命周期行为，均由Spring来管理。即整个应用中所有对象的创建、初始化、销毁，及对象间关联关系的维护，均由Spring进行管理。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/ssm/3tier-ssm.jpg" alt=""></p></li></ul><h2 id="5-SSM框架配置"><a href="#5-SSM框架配置" class="headerlink" title="5.SSM框架配置"></a>5.SSM框架配置</h2><h3 id="5-1-目录"><a href="#5-1-目录" class="headerlink" title="5.1 目录"></a>5.1 目录</h3><ul><li><p>Controller </p><ul><li>springmvc.xml<ul><li>包扫描–controller</li><li>注解驱动</li><li>视图解析器</li></ul></li><li>web.xml<ul><li>DispatcherServlet</li><li>监听器</li></ul></li></ul></li><li><p>Service</p><ul><li>applicationContext-service.xml<ul><li>包扫描–service</li></ul></li><li>applicationContext-trans.xml<ul><li>事务管理器</li><li>通知</li><li>切面</li></ul></li></ul></li><li><p>Dao</p><ul><li>SqlMapConfig.xml</li><li>applicationContext-dao.xml<ul><li>dataSource</li><li>SqlSessionFactory</li><li>包扫描–mapper</li></ul></li></ul></li></ul><h3 id="5-2-springmvc-xml"><a href="#5-2-springmvc-xml" class="headerlink" title="5.2 springmvc.xml"></a>5.2 springmvc.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置Controller扫描 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.lillusory.crm.controller"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 加载属性文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:crm.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span><span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-3-applicationContext-dao"><a href="#5-3-applicationContext-dao" class="headerlink" title="5.3 applicationContext-dao"></a>5.3 applicationContext-dao</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置 读取properties文件 jdbc.properties --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置 数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置SqlSessionFactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置MyBatis核心配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:SqlMapConfig.xml"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.lillusory.crm.domain"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置Mapper扫描 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置Mapper扫描包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.lillusory.crm.mapper"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-4-applicationContext-service-xml"><a href="#5-4-applicationContext-service-xml" class="headerlink" title="5.4 applicationContext-service.xml"></a>5.4 applicationContext-service.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 包扫描 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.lillusory.crm.service"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-5-applicationContext-trans-xml"><a href="#5-5-applicationContext-trans-xml" class="headerlink" title="5.5 applicationContext-trans.xml"></a>5.5 applicationContext-trans.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span><span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 传播行为 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"insert*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"add*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"create*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"select*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"query*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 切面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span></span></span><br><span class="line"><span class="tag"><span class="attr">pointcut</span>=<span class="string">"execution(* com.lillusory.crm.service.*.*(..))"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-6-SqlMapConfig-xml"><a href="#5-6-SqlMapConfig-xml" class="headerlink" title="5.6 SqlMapConfig.xml"></a>5.6 SqlMapConfig.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 暂时什么都不用配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-7-web-xml"><a href="#5-7-web-xml" class="headerlink" title="5.7 web.xml"></a>5.7 web.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Demo-CRM<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 配置spring --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/applicationContext-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置监听器加载spring --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置过滤器，解决post的乱码问题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置SpringMVC --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo-crm<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置springmvc什么时候启动，参数必须为整数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果为0或者大于0，则springMVC随着容器启动而启动 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果小于0，则在第一次请求进来的时候启动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo-crm<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 所有的请求都进入springMVC</span></span><br><span class="line"><span class="comment">/        拦截所有除了jsp</span></span><br><span class="line"><span class="comment">/* jsp也拦截 </span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-8其他常用配置"><a href="#5-8其他常用配置" class="headerlink" title="5.8其他常用配置"></a>5.8其他常用配置</h3><h4 id="jdbc"><a href="#jdbc" class="headerlink" title="jdbc"></a>jdbc</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/kct?characterEncoding=utf-8</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=root</span><br></pre></td></tr></table></figure><h4 id="log4j"><a href="#log4j" class="headerlink" title="log4j"></a>log4j</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Global logging configuration</span><br><span class="line">log4j.rootLogger=debug, stdout</span><br><span class="line"># Console output...</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><code>https://juejin.im/post/5929259b44d90400642194f3</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要讲了MVC和三层架构的关系，和SSM框架整合教程。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.lixueduan.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.lixueduan.com/tags/Java/"/>
    
  </entry>
  
</feed>
