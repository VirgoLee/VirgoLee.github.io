<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>幻境云图</title>
  
  <subtitle>有道无术，术尚可求，有术无道，止于术</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.lixueduan.com/"/>
  <updated>2019-04-09T14:52:17.380Z</updated>
  <id>https://www.lixueduan.com/</id>
  
  <author>
    <name>illusoryCloud</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringCloud入门系列(四)---服务消费者 Consumer</title>
    <link href="https://www.lixueduan.com/posts/bf9c3958.html"/>
    <id>https://www.lixueduan.com/posts/bf9c3958.html</id>
    <published>2019-03-18T14:00:00.000Z</published>
    <updated>2019-04-09T14:52:17.380Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了<code>SpringCloud-Netflix</code>系列微服务解决方案之服务消费者。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p><p><strong><a href="https://www.lixueduan.com/categories/SpringCloud/">SpringCloud入门系列文章目录</a></strong></p><p>源码下载：<a href="https://github.com/illusorycloud/springboot-learning" target="_blank" rel="noopener">GItHub</a></p></blockquote><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>在微服务架构中，业务都会被拆分成一个独立的服务，服务与服务的通讯是基于 <code>HTTP Restful</code>的。<code>Spring Cloud</code> 有两种服务调用方式，一种是 <code>ribbon</code> + <code>restTemplate</code>，另一种是 <code>feign</code>。</p><h2 id="2-Ribbon"><a href="#2-Ribbon" class="headerlink" title="2. Ribbon"></a>2. Ribbon</h2><p><code>Ribbon</code> 是一个<code>负载均衡客户端</code>，可以很好的控制 <code>http</code> 和 <code>tcp</code> 的一些行为。</p><h3 id="pom-mxl"><a href="#pom-mxl" class="headerlink" title="pom.mxl"></a>pom.mxl</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.illusory<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../hello-spring-cloud-dependencies/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-web-admin-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-spring-cloud-web-admin-ribbon<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.illusory.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inceptionYear</span>&gt;</span>2018-Now<span class="tag">&lt;/<span class="name">inceptionYear</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot End --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud End --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 解决 thymeleaf 模板引擎一定要执行严格的 html5 格式校验问题 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sourceforge.nekohtml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nekohtml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--指向启动类 用于jar包方式运行--&gt;</span>  <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.illusory.hello.spring.cloud.web.admin.ribbon.WebAdminRibbonApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要是增加了 Ribbon 的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h3><p>通过 <code>@EnableDiscoveryClient</code> 注解注册到服务中心</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.funtl.hello.spring.cloud.web.admin.ribbon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAdminRibbonApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(WebAdminRibbonApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><p>设置程序端口号为：<code>8764</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">hello-spring-cloud-web-admin-ribbon</span></span><br><span class="line"><span class="attr">  thymeleaf:</span></span><br><span class="line"><span class="attr">    cache:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    mode:</span> <span class="string">LEGACYHTML5</span></span><br><span class="line"><span class="attr">    encoding:</span> <span class="string">UTF-8</span></span><br><span class="line"><span class="attr">    servlet:</span></span><br><span class="line"><span class="attr">      content-type:</span> <span class="string">text/html</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8764</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><p>配置注入 <code>RestTemplate</code> 的 Bean，并通过 <code>@LoadBalanced</code> 注解表明开启负载均衡功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.web.admin.ribbon.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>这里直接用的<code>程序名</code>替代了具体的<code>URL</code> 地址，在 Ribbon 中它会根据服务名来选择具体的服务实例，根据服务实例在请求的时候会用具体的 URL 替换掉服务名，代码如下：</p><p>service不在调用dao层而是远程调用服务提供者对外提供的服务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.web.admin.ribbon.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://HELLO-SPRING-CLOUD-SERVICE-ADMIN/hi?message="</span> + message, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.web.admin.ribbon.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.illusory.hello.spring.cloud.web.admin.ribbon.service.AdminService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AdminService adminService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"hi"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">(@RequestParam String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> adminService.sayHi(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h3><p>在浏览器上多次访问 <code>http://localhost:8764/hi?message=HelloRibbon</code></p><h2 id="3-Feign"><a href="#3-Feign" class="headerlink" title="3. Feign"></a>3. Feign</h2><p>Feign 是一个声明式的伪 Http 客户端，它使得写 Http 客户端变得更简单。使用 Feign，只需要创建一个接口并注解。它具有可插拔的注解特性，可使用 Feign 注解和 JAX-RS 注解。Feign 支持可插拔的编码器和解码器。Feign 默认集成了 Ribbon，并和 Eureka 结合，默认实现了负载均衡的效果</p><ul><li>Feign 采用的是基于接口的注解</li><li>Feign 整合了 ribbon</li></ul><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.funtl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../hello-spring-cloud-dependencies/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-web-admin-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-spring-cloud-web-admin-feign<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.illusory.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inceptionYear</span>&gt;</span>2019-Now<span class="tag">&lt;/<span class="name">inceptionYear</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot End --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud End --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 解决 thymeleaf 模板引擎一定要执行严格的 html5 格式校验问题 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sourceforge.nekohtml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nekohtml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                     <span class="comment">&lt;!--指向启动类 用于jar包方式运行--&gt;</span>  <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.illusory.hello.spring.cloud.web.admin.feign.WebAdminFeignApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要是增加了 Feign 的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Application-1"><a href="#Application-1" class="headerlink" title="Application"></a>Application</h3><p>通过 <code>@EnableFeignClients</code> 注解开启 Feign 功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.web.admin.feign;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAdminFeignApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(WebAdminFeignApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="application-yml-1"><a href="#application-yml-1" class="headerlink" title="application.yml"></a>application.yml</h3><p>设置程序端口号为：<code>8765</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">hello-spring-cloud-web-admin-feign</span></span><br><span class="line"><span class="attr">  thymeleaf:</span></span><br><span class="line"><span class="attr">    cache:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    mode:</span> <span class="string">LEGACYHTML5</span></span><br><span class="line"><span class="attr">    encoding:</span> <span class="string">UTF-8</span></span><br><span class="line"><span class="attr">    servlet:</span></span><br><span class="line"><span class="attr">      content-type:</span> <span class="string">text/html</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8765</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><h3 id="创建-Feign-接口"><a href="#创建-Feign-接口" class="headerlink" title="创建 Feign 接口"></a>创建 Feign 接口</h3><p>通过 <code>@FeignClient(value = &quot;服务名&quot;)</code> 注解来指定调用哪个服务。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.web.admin.feign.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"hello-spring-cloud-service-admin"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AdminService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"hi"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">(@RequestParam(value = <span class="string">"message"</span>)</span> String message)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Controller-1"><a href="#Controller-1" class="headerlink" title="Controller"></a>Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.web.admin.feign.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.funtl.hello.spring.cloud.web.admin.feign.service.AdminService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AdminService adminService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"hi"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">(@RequestParam String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> adminService.sayHi(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试访问-1"><a href="#测试访问-1" class="headerlink" title="测试访问"></a>测试访问</h3><p>在浏览器上多次访问 <code>http://localhost:8765/hi?message=HelloFeign</code></p><p>到这里服务提供者和服务消费者就已经搭建成功了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了&lt;code&gt;SpringCloud-Netflix&lt;/code&gt;系列微服务解决方案之服务消费者。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud入门系列(三)---服务提供者 Provider</title>
    <link href="https://www.lixueduan.com/posts/cc38b97d.html"/>
    <id>https://www.lixueduan.com/posts/cc38b97d.html</id>
    <published>2019-03-17T14:00:00.000Z</published>
    <updated>2019-04-09T14:52:38.038Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了<code>SpringCloud-Netflix</code>系列微服务解决方案之服务提供者。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p><p><strong><a href="https://www.lixueduan.com/categories/SpringCloud/">SpringCloud入门系列文章目录</a></strong></p><p>源码下载：<a href="https://github.com/illusorycloud/springboot-learning" target="_blank" rel="noopener">GItHub</a></p></blockquote><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>当 Eureka Client 向 Eureka Server 注册时，它会提供一些元数据，例如主机和端口，URL，主页等。Eureka Server 从每个 Client 实例接收心跳消息。 如果心跳超时，则通常将该实例从注册 Server 中删除。这与ZooKeeper注册中心很像。</p><h2 id="2-pom-xml"><a href="#2-pom-xml" class="headerlink" title="2. pom.xml"></a>2. pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.funtl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../hello-spring-cloud-dependencies/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-service-admin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-spring-cloud-service-admin<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.illusory.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inceptionYear</span>&gt;</span>2019-Now<span class="tag">&lt;/<span class="name">inceptionYear</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot End --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud End --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--指向启动类 用于jar包方式运行--&gt;</span>  <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.illusory.hello.spring.cloud.service.admin.ServiceAdminApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-Application"><a href="#3-Application" class="headerlink" title="3. Application"></a>3. Application</h2><p>通过注解 <code>@EnableEurekaClient</code> 表明自己是一个 Eureka Client.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.service.admin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceAdminApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ServiceAdminApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-application-yml"><a href="#4-application-yml" class="headerlink" title="4. application.yml"></a>4. application.yml</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">hello-spring-cloud-service-admin</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8762</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>： 需要指明 <code>spring.application.name</code>，这个很重要，这在以后的服务与服务之间相互调用一般都是根据这个<code>name</code>。</p><h2 id="5-Controller"><a href="#5-Controller" class="headerlink" title="5. Controller"></a>5. Controller</h2><p>对外提供服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.service.admin.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"hi"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">(@RequestParam(value = <span class="string">"message"</span>)</span> String message) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"Hi，your message is : %s i am from port : %s"</span>, message, port);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里一个简单的服务提供者就搭建成功了，接下来搭建一个服务消费者。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了&lt;code&gt;SpringCloud-Netflix&lt;/code&gt;系列微服务解决方案之服务提供者。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud入门系列(二)---服务注册与发现</title>
    <link href="https://www.lixueduan.com/posts/8735f06d.html"/>
    <id>https://www.lixueduan.com/posts/8735f06d.html</id>
    <published>2019-03-16T14:00:00.000Z</published>
    <updated>2019-04-09T14:49:57.292Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了<code>SpringCloud-Netflix</code>系列微服务解决方案之服务注册于发现中心<code>Eureka</code>。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p><p><strong><a href="https://www.lixueduan.com/categories/SpringCloud/">SpringCloud入门系列文章目录</a></strong></p><p>源码下载：<a href="https://github.com/illusorycloud/springboot-learning" target="_blank" rel="noopener">GItHub</a></p></blockquote><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>在这里，我们需要用的组件是 Spring Cloud Netflix 的 Eureka，Eureka 是一个服务注册和发现模块</p><h2 id="2-pom-xml"><a href="#2-pom-xml" class="headerlink" title="2. pom.xml"></a>2. pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.illusory<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../hello-spring-cloud-dependencies/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-spring-cloud-eureka<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.illusory.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inceptionYear</span>&gt;</span>2019-Now<span class="tag">&lt;/<span class="name">inceptionYear</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot End --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud End --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                   <span class="comment">&lt;!--指向启动类 用于jar包方式运行--&gt;</span> <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.illusory.hello.spring.cloud.eureka.EurekaApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-Application"><a href="#3-Application" class="headerlink" title="3. Application"></a>3. Application</h2><p>启动一个服务注册中心，只需要一个注解 <code>@EnableEurekaServer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-application-yml"><a href="#4-application-yml" class="headerlink" title="4. application.yml"></a>4. application.yml</h2><p>Eureka 是一个高可用的组件，它没有后端缓存，每一个实例注册之后需要向注册中心发送心跳（因此可以在内存中完成），在默认情况下 Erureka Server 也是一个 Eureka Client ,必须要指定一个 Server。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">hello-spring-cloud-eureka</span></span><br><span class="line"><span class="attr">  boot:</span></span><br><span class="line"><span class="attr">    admin:</span></span><br><span class="line"><span class="attr">      client:</span></span><br><span class="line"><span class="attr">        url:</span> <span class="attr">http://localhost:8084</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8761</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    registerWithEureka:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    fetchRegistry:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure><p>通过 <code>eureka.client.registerWithEureka:false</code> 和 <code>fetchRegistry:false</code> 来表明自己是一个 Eureka Server.</p><h2 id="5-浏览器访问"><a href="#5-浏览器访问" class="headerlink" title="5. 浏览器访问"></a>5. 浏览器访问</h2><p>Eureka Server 是有界面的，启动工程，打开浏览器访问：</p><p><code>http://localhost:8761</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了&lt;code&gt;SpringCloud-Netflix&lt;/code&gt;系列微服务解决方案之服务注册于发现中心&lt;code&gt;Eureka&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud入门系列(一)---统一依赖管理 Dependencies</title>
    <link href="https://www.lixueduan.com/posts/c41e9ac1.html"/>
    <id>https://www.lixueduan.com/posts/c41e9ac1.html</id>
    <published>2019-03-15T14:00:00.000Z</published>
    <updated>2019-04-09T14:52:05.301Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了<code>SpringCloud-Netflix</code>系列微服务解决方案之创建一个依赖统一管理项目。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p><p><strong><a href="https://www.lixueduan.com/categories/SpringCloud/">SpringCloud入门系列文章目录</a></strong></p><p>源码下载：<a href="https://github.com/illusorycloud/springboot-learning" target="_blank" rel="noopener">GItHub</a></p></blockquote><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>Spring Cloud 项目都是基于 Spring Boot 进行开发，并且都是使用 Maven 做项目管理工具。在实际开发中，我们一般都会创建一个依赖管理项目作为 Maven 的 Parent 项目使用，这样做可以极大的方便我们对 Jar 包版本的统一管理。</p><p>我们所有的项目都会依赖这个 <code>dependencies</code> 项目，整个项目周期中的所有第三方依赖的版本也都由该项目进行管理。</p><ul><li>parent：继承了 Spring Boot 的 Parent，表示我们是一个 Spring Boot 工程</li><li>package：<code>pom</code>，表示该项目仅当做依赖项目，没有具体的实现代码</li><li><code>spring-cloud-dependencies</code>：在 <code>properties</code> 配置中预定义了版本号为 <code>Finchley.RC1</code> ，表示我们的 Spring Cloud 使用的是 F 版</li><li>build：配置了项目所需的各种插件</li><li>repositories：配置项目下载依赖时的第三方库</li></ul><h2 id="2-pom-xml"><a href="#2-pom-xml" class="headerlink" title="2. pom.xml"></a>2. pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.funtl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-spring-cloud-dependencies<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.illusory.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inceptionYear</span>&gt;</span>2019-Now<span class="tag">&lt;/<span class="name">inceptionYear</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Environment Settings --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Settings --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Finchley.RC1<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Compiler 插件, 设定 JDK 版本 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">showWarnings</span>&gt;</span>true<span class="tag">&lt;/<span class="name">showWarnings</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 打包 jar 文件时，配置 manifest 文件，加入 lib 包的 jar 依赖 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">addMavenDescriptor</span>&gt;</span>false<span class="tag">&lt;/<span class="name">addMavenDescriptor</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                                    <span class="comment">&lt;!-- Add directory entries --&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">addDefaultImplementationEntries</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addDefaultImplementationEntries</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">addDefaultSpecificationEntries</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addDefaultSpecificationEntries</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- resource --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- install --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- clean --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- ant --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-antrun-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- dependency --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- Java Document Generate --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>prepare-package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- YUI Compressor (CSS/JS压缩) --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.alchim31.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>yuicompressor-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>prepare-package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compress<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">jswarn</span>&gt;</span>false<span class="tag">&lt;/<span class="name">jswarn</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">nosuffix</span>&gt;</span>true<span class="tag">&lt;/<span class="name">nosuffix</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">linebreakpos</span>&gt;</span>30000<span class="tag">&lt;/<span class="name">linebreakpos</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">force</span>&gt;</span>true<span class="tag">&lt;/<span class="name">force</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.js<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.css<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.min.js<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.min.css<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 资源文件配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.java<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun-repos<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Aliyun Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>sonatype-repos<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Sonatype Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>sonatype-repos-s<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Sonatype Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/content/repositories/snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun-repos<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Aliyun Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一个简单的项目，只有一个<code>pom.xml</code>文件，用来管理项目中所需的依赖。</p><p>接下来创建服务注册与发现项目即注册中心。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了&lt;code&gt;SpringCloud-Netflix&lt;/code&gt;系列微服务解决方案之创建一个依赖统一管理项目。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot入门系列(四)---Spring Boot 项目打包运行</title>
    <link href="https://www.lixueduan.com/posts/144a69f9.html"/>
    <id>https://www.lixueduan.com/posts/144a69f9.html</id>
    <published>2019-03-13T14:00:00.000Z</published>
    <updated>2019-04-05T07:22:20.700Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录了如何在idea下打包SpringBoot项目并部署到云服务器，包括jar包和war包两种方式。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h2><p>首先简单创建一个<code>hello word</code></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单的controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusoryCloud</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello illusoryCloud"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringBoot启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusoryCloud</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HelloApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-打包"><a href="#2-打包" class="headerlink" title="2. 打包"></a>2. 打包</h2><h3 id="2-1-jar包和war包区别"><a href="#2-1-jar包和war包区别" class="headerlink" title="2.1 jar包和war包区别"></a>2.1 jar包和war包区别</h3><ul><li>SpringBoot默认支持很多模板引擎，但是JSP只能够在War中使用</li><li>无论是Jar还是War都能够使用嵌套容器，<code>java -jar</code>来独立运行</li><li>但只有war才能部署到外部容器中</li></ul><h3 id="2-2-jar包"><a href="#2-2-jar包" class="headerlink" title="2.2 jar包"></a>2.2 jar包</h3><p><strong>SpringBoot官方推荐打成jar包，服务器上有<code>JDK 1.8</code>以上环境就可以直接运行</strong></p><h4 id="1-修改pom-xml文件"><a href="#1-修改pom-xml文件" class="headerlink" title="1.修改pom.xml文件"></a>1.修改pom.xml文件</h4><p>选择打包方式为jar</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.illusory<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span>    <span class="comment">&lt;!--版本号--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">name</span>&gt;</span>    <span class="comment">&lt;!--打出来的包的名字 hello-0.0.1-SNAPSHOT.jar--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span>    <span class="comment">&lt;!--打包方式jar/war--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-打包-1"><a href="#2-打包-1" class="headerlink" title="2. 打包"></a>2. 打包</h4><p>然后用maven打包。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/springboot/project-package.png" alt="SpringBoot打包"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[INFO] --- maven-jar-plugin:<span class="number">3.1</span>.1:jar (<span class="keyword">default</span>-jar) @ hello ---</span><br><span class="line">[INFO] Building jar: D:\lillusory\MyProjects\hello\target\hello-<span class="number">0.0</span>.1-SNAPSHOT.jar</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- spring-boot-maven-plugin:<span class="number">2.1</span>.3.RELEASE:repackage (repackage) @ hello ---</span><br><span class="line">[INFO] Replacing main artifact with repackaged archive</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  <span class="number">23.922</span> s</span><br><span class="line">[INFO] Finished at: <span class="number">2019</span>-<span class="number">02</span>-<span class="number">22</span>T20:<span class="number">35</span>:<span class="number">40</span>+<span class="number">08</span>:<span class="number">00</span></span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>日志中可以看到打出来的包在<code>D:\lillusory\MyProjects\hello\target\hello-0.0.1-SNAPSHOT.jar</code></p><h4 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h4><p>SpringBoot内置了一个Tomcat，可以直接<code>java -jar jarName</code>运行。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/springboot/jar-run.png" alt=""></p><p>浏览器访问<code>http://localhost:8080/hello</code>出现<code>hello illusoryCloud</code>说明运行起来了。</p><p>这里的端口号是<code>application.yml</code>全局配置文件中配置的端口号。</p><h3 id="2-3-war包"><a href="#2-3-war包" class="headerlink" title="2.3 war包"></a>2.3 war包</h3><p>同时也可以打成war包然后用服务器上的Tomcat启动。</p><h4 id="1-修改pom-xml"><a href="#1-修改pom-xml" class="headerlink" title="1.修改pom.xml"></a>1.修改pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.illusory<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span>    <span class="comment">&lt;!--版本号--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">name</span>&gt;</span>    <span class="comment">&lt;!--打出来的包的名字 hello-0.0.1-SNAPSHOT.jar--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span>    <span class="comment">&lt;!--打包方式jar/war--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--外置tomcat启动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>maven中的<code>&lt;scope&gt;provided&lt;/scope&gt;</code>表示这个jar包在编译测试等地方是需要的，但是打包不会一起打包进去，这也避免了此类构件当部署到目标容器后产生包依赖冲突</strong>。由于SpringBoot内置了Tomcat所以这里需要重新配置一下，防止冲突。</p><h4 id="2-改造启动类"><a href="#2-改造启动类" class="headerlink" title="2.改造启动类"></a>2.改造启动类</h4><p><strong>SpringBoot 内置的Tomcat能认识自己的启动项,而外部tomcat是不认识的</strong></p><p>所以需要修改启动类。即继承<code>SpringBootServletInitializer</code>类实现<code>configure</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringBoot启动类</span></span><br><span class="line"><span class="comment"> * 打成war包时需要改造 继承SpringBootServletInitializer实现configure方法</span></span><br><span class="line"><span class="comment"> * 打jar包则不需要</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusoryCloud</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplication</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//这里的HelloApplication是SpringBoot的启动类</span></span><br><span class="line">        <span class="keyword">return</span> builder.sources(HelloApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HelloApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-打包"><a href="#3-打包" class="headerlink" title="3. 打包"></a>3. 打包</h4><p>和上面打包的方式一样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[INFO] Packaging webapp</span><br><span class="line">[INFO] Assembling webapp [hello] in [D:\lillusory\MyProjects\hello\target\hello-<span class="number">0.0</span>.1-SNAPSHOT]</span><br><span class="line">[INFO] Processing war project</span><br><span class="line">[INFO] Webapp assembled in [<span class="number">472</span> msecs]</span><br><span class="line">[INFO] Building war: D:\lillusory\MyProjects\hello\target\hello-<span class="number">0.0</span>.1-SNAPSHOT.war</span><br><span class="line">[INFO] --- spring-boot-maven-plugin:<span class="number">2.1</span>.3.RELEASE:repackage (repackage) @ hello ---</span><br><span class="line">[INFO] Replacing main artifact with repackaged archive</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  <span class="number">01</span>:<span class="number">00</span> min</span><br><span class="line">[INFO] Finished at: <span class="number">2019</span>-<span class="number">02</span>-<span class="number">22</span>T21:<span class="number">10</span>:<span class="number">10</span>+<span class="number">08</span>:<span class="number">00</span></span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>可以看到打出来的war包在<code>D:\lillusory\MyProjects\hello\target\hello-0.0.1-SNAPSHOT.war</code></p><h4 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h4><p>先在电脑上测试一下(Windows环境下)</p><p>将war包复制到<code>Tomcat</code>的<code>webapps</code>文件夹下</p><p>然后找到<code>bin</code>目录下的<code>startup.bat</code>启动Tomcat，项目就会自动启动了。</p><p>浏览器访问<code>http://localhost:8080/hello-0.0.1-SNAPSHOT/hello</code> 出现<code>hello illusoryCloud</code>说明ok的。</p><p>这里<code>hello-0.0.1-SNAPSHOT</code>就是war包的名称，Tomcat启动时会自动解压war包然后启动项目。</p><p>这里的端口号和<code>application.yml</code>全局配置文件中配置的端口号没有关系，是Tomcat中配置的。</p><p>在<code>Tomcat\conf\server.xml</code>这个文件中，默认也是8080。</p><p><strong>问题</strong></p><p>我这里启动的时候出现了一个问题</p><p><code>Caused by: java.lang.NoClassDefFoundError: javax/el/ELManager</code></p><p>最后找到原因是<strong>tomcat提供的<code>el-api.jar</code> 和项目里面的el-api.jar冲突</strong>;</p><p>这时候你需要去找到自己电脑上用的el-api的版本,copy到tomcat的lib目录下,覆盖原来的jar包.</p><p>我的在<code>IntelliJ IDEA 2018.3\lib\rt\jasper2.1\el-api.jar</code>这个目录下</p><p>我看网上说是和Tomcat版本有关系，我这里是<code>7.0.52</code></p><p><strong>Tomcat日志</strong></p><p>若是还有其他问题的话可以查看Tomcat日志。在<code>tomcat\logs\catalina.2019-02-22.log</code>这个文件中。</p><h2 id="3-部署"><a href="#3-部署" class="headerlink" title="3. 部署"></a>3. 部署</h2><h3 id="3-1-jar包"><a href="#3-1-jar包" class="headerlink" title="3.1 jar包"></a>3.1 jar包</h3><p>首先将文件上传到服务器上，服务器上有安装JDK8及以上的版本就可以直接运行。</p><p><a href="https://www.lixueduan.com/posts/54978294.html">Linux下JDK的安装及配置点这里</a></p><h4 id="1-前台运行"><a href="#1-前台运行" class="headerlink" title="1. 前台运行"></a>1. 前台运行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> java -jar hello-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>但是这样运行的话是在前台运行，当前窗口关闭后就停止了,或者是运行时没法切出去执行其他任务.</p><h4 id="2-后台运行"><a href="#2-后台运行" class="headerlink" title="2. 后台运行"></a>2. 后台运行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> nohup java -jar hello-0.0.1-SNAPSHOT.jar &gt;temp.txt &amp;</span><br><span class="line"></span><br><span class="line">//nohup 意思是不挂断运行命令,当账户退出或终端关闭时,程序仍然运行</span><br><span class="line">//这种方法会把日志文件输入到你指定的文件中(temp.txt)</span><br><span class="line">//在哪个目录下运行的该日志文件就会在哪个目录下，没有指定具体文件则会自动创建(nohup.out)</span><br><span class="line">//&amp; 表示后台运行</span><br></pre></td></tr></table></figure><h4 id="3-问题"><a href="#3-问题" class="headerlink" title="3. 问题"></a>3. 问题</h4><p>执行以上命令后出现下面的提示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup: ignoring input and redirecting stderr to stdout</span><br><span class="line">忽略输出 将错误输出重定向到标准输出</span><br></pre></td></tr></table></figure><p><strong>原因</strong></p><p><code>Linux</code>中<code>0</code>、<code>1</code>和<code>2</code>分别表示<code>标准输</code>入、<code>标准输出</code>和<code>标准错误信息输出</code>，可以用来指定需要重定向的标准输入或输出。在一般使用时，默认的是标准输出，即1。</p><p>例如：<code>2&gt;temp.txt</code>  就是将错误信息写入temp.txt 标准输出还是显示在屏幕上。</p><p>另外，也可以实现0，1，2之间的重定向。<code>2&gt;&amp;1</code>：将错误信息重定向到标准输出。</p><p>Linux下还有一个特殊的文件<code>/dev/null</code>，它就像一个无底洞，所有重定向到它的信息都会消失得无影无踪。</p><p>如果想要<code>正常输出和错误信息都不显示</code>，则要把标准输出和标准错误都重定向到<code>/dev/null</code>， 例如：</p><p> <code>1&gt;/dev/null 2&gt;/dev/null</code></p><p><strong>解决办法</strong></p><p>所以最后的命令就是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar hello-0.0.1-SNAPSHOT.jar &gt;temp.txt 2&gt;&amp;1&amp;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost software]# nohup java -jar hello-0.0.1-SNAPSHOT.jar &gt;temp.txt 2&gt;&amp;1&amp;</span><br><span class="line">[1] 22804</span><br><span class="line">// 成功启动 pid为22804</span><br></pre></td></tr></table></figure><h4 id="4-测试-1"><a href="#4-测试-1" class="headerlink" title="4. 测试"></a>4. 测试</h4><p>首先查看服务器的IP</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost software]# ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:8a:48:7d brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.1.111/24 brd 192.168.1.255 scope global noprefixroute ens33</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::20c:29ff:fe8a:487d/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: virbr0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default qlen 1000</span><br><span class="line">    link/ether 52:54:00:8e:d5:31 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: virbr0-nic: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast master virbr0 state DOWN group default qlen 1000</span><br><span class="line">    link/ether 52:54:00:8e:d5:31 brd ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></table></figure><p>然后浏览器访问<code>http://192.168.1.111:8080/hello</code>出现<code>hello illusoryCloud</code>说明成功了。</p><p><strong>记得关闭防火墙或者开放8080端口</strong></p><h4 id="5-相关Linux命令"><a href="#5-相关Linux命令" class="headerlink" title="5. 相关Linux命令"></a>5. 相关Linux命令</h4><ul><li>jobs命令和 fg命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> jobs</span><br><span class="line">//那么就会列出所有后台执行的作业，并且每个作业前面都有个编号。</span><br><span class="line">[root@localhost software]# jobs</span><br><span class="line">[1]+  Running    nohup java -jar hello-0.0.1-SNAPSHOT.jar &gt; temp.txt 2&gt;&amp;1 &amp;</span><br><span class="line">//如果想将某个作业调回前台控制，只需要 fg + 编号即可。</span><br><span class="line"><span class="meta">$</span> fg 1</span><br></pre></td></tr></table></figure><ul><li>查看某端口占用的线程的pid</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -nlp |grep :8080</span><br></pre></td></tr></table></figure><ul><li>kill</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill pid</span><br></pre></td></tr></table></figure><h3 id="3-2-war包"><a href="#3-2-war包" class="headerlink" title="3.2 war包"></a>3.2 war包</h3><p>war包运行和在windows上运行其实一样的，也是<strong>先将war包copy到Tomcat的webapps目录下，然后启动Tomcat，如果上面测试出现jar包冲突的话这里也需要替换</strong>。</p><p><a href="https://www.lixueduan.com/posts/54978294.html">Linux下Tomcat安装及配置点这里</a></p><h4 id="启动Tomcat"><a href="#启动Tomcat" class="headerlink" title="启动Tomcat"></a>启动Tomcat</h4><p>进入<code>Tomcat\bin</code>目录执行<code>./startup.sh</code>即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# ./startup.sh </span><br><span class="line">Using CATALINA_BASE:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_HOME:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_TMPDIR: /usr/local/tomcat/temp</span><br><span class="line">Using JRE_HOME:        /usr/local/jdk8</span><br><span class="line">Using CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar</span><br><span class="line">Tomcat started.</span><br></pre></td></tr></table></figure><p>浏览器访问<code>http://192.168.1.111:8080/hello-0.0.1-SNAPSHOT/hello</code>出现<code>hello illusoryCloud</code>说明是没问题的。</p><h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h2><p><code>https://blog.csdn.net/qq_22638399/article/details/81506448</code></p><p><code>https://blog.csdn.net/c1481118216/article/details/53010963</code></p><p><code>https://blog.csdn.net/qq_14853889/article/details/80026885</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录了如何在idea下打包SpringBoot项目并部署到云服务器，包括jar包和war包两种方式。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://www.lixueduan.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://www.lixueduan.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot入门系列(三)---Spring Boot 整合 Mybatis</title>
    <link href="https://www.lixueduan.com/posts/1889ad71.html"/>
    <id>https://www.lixueduan.com/posts/1889ad71.html</id>
    <published>2019-03-11T14:00:00.000Z</published>
    <updated>2019-04-06T08:10:21.630Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录了如何在SpringBoot项目中整合Mybatis框架与Druid数据库连接池,同时超详细的记录了具体步骤与代码实现。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-Druid"><a href="#1-Druid" class="headerlink" title="1. Druid"></a>1. Druid</h2><p>Druid 是阿里巴巴开源平台上的一个项目，整个项目由数据库连接池、插件框架和 SQL 解析器组成。该项目主要是为了扩展 JDBC 的一些限制，可以让程序员实现一些特殊的需求，比如向密钥服务请求凭证、统计 SQL 信息、SQL 性能收集、SQL 注入检查、SQL 翻译等，程序员可以通过定制来实现自己需要的功能。</p><p>Druid 是目前最好的数据库连接池，在功能、性能、扩展性方面，都超过其他数据库连接池，包括 DBCP、C3P0、BoneCP、Proxool、JBoss DataSource。Druid 已经在阿里巴巴部署了超过 600 个应用，经过多年生产环境大规模部署的严苛考验。Druid 是阿里巴巴开发的号称为监控而生的数据库连接池！</p><h3 id="1-1-引入依赖"><a href="#1-1-引入依赖" class="headerlink" title="1.1 引入依赖"></a>1.1 引入依赖</h3><p>在 <code>pom.xml</code> 文件中引入 <code>druid-spring-boot-starter</code> 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入数据库连接<code>mysql-connector-java</code>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-配置-application-yml"><a href="#1-2-配置-application-yml" class="headerlink" title="1.2 配置 application.yml"></a>1.2 配置 application.yml</h3><p>在 <code>application.yml</code> 中配置数据库连接</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    druid:</span></span><br><span class="line"><span class="attr">      url:</span> <span class="attr">jdbc:mysql://ip:port/dbname?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">      username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">      password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">      initial-size:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">      min-idle:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">      max-active:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">      test-on-borrow:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># MySQL 5.x: com.mysql.jdbc.Driver</span></span><br><span class="line">      <span class="comment"># MySQL 8.x: com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">      driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><h2 id="2-Mybatis"><a href="#2-Mybatis" class="headerlink" title="2. Mybatis"></a>2. Mybatis</h2><h3 id="2-1-引入依赖"><a href="#2-1-引入依赖" class="headerlink" title="2.1 引入依赖"></a>2.1 引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-配置-application-yml"><a href="#2-2-配置-application-yml" class="headerlink" title="2.2 配置 application.yml"></a>2.2 配置 application.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  type-aliases-package:</span> <span class="string">com.illusory.hello.spring.boot.domain</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure><h2 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h2><h3 id="3-1-创建数据库"><a href="#3-1-创建数据库" class="headerlink" title="3.1 创建数据库"></a>3.1 创建数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE hello;</span><br><span class="line">USE hello;</span><br><span class="line">CREATE TABLE users(</span><br><span class="line">uid INT(5)  AUTO_INCREMENT COMMENT &apos;用户ID&apos;,</span><br><span class="line">uname VARCHAR(20) COMMENT &apos;用户名&apos;,</span><br><span class="line">uage INT(3) COMMENT &apos;用户年龄&apos;,</span><br><span class="line">PRIMARY KEY(uid)</span><br><span class="line">) COMMENT=&apos;用户表&apos;;</span><br><span class="line">INSERT INTO users VALUES(NULL,&apos;zhangsan&apos;,11),(NULL,&apos;lisi&apos;,22),(NULL,&apos;wangwu&apos;,33);</span><br></pre></td></tr></table></figure><h3 id="3-2-User"><a href="#3-2-User" class="headerlink" title="3.2 User"></a>3.2 User</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.boot.domain;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusoryCloud</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/15 13:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> uid;</span><br><span class="line">    <span class="keyword">private</span> String uname;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> uage;</span><br><span class="line">    <span class="comment">//省略Getter/Setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-UserMapper"><a href="#3-3-UserMapper" class="headerlink" title="3.3 UserMapper"></a>3.3 UserMapper</h3><p><code>com/illusory/hello/spirng/boot/mapper/UserMapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.boot.mapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusoryCloud</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/15 13:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">queryAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>resources/mapper/UserMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.illusory.hello.spring.boot.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryAll"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    SELECT u.uid,u.uname,u.uage</span><br><span class="line">    FROM users as u</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-Serivce"><a href="#3-4-Serivce" class="headerlink" title="3.4 Serivce"></a>3.4 Serivce</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.boot.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusoryCloud</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/15 14:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">queryAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.boot.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusoryCloud</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/15 14:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.queryAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-UserController"><a href="#3-5-UserController" class="headerlink" title="3.5 UserController"></a>3.5 UserController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.boot.controller;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusoryCloud</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/15 14:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/users"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">users</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userService.queryAll();</span><br><span class="line">        model.addAttribute(<span class="string">"users"</span>, users);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-HTML"><a href="#3-6-HTML" class="headerlink" title="3.6 HTML"></a>3.6 HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html SYSTEM "http://www.thymeleaf.org/dtd/xhtml1-strict-thymeleaf-spring4-4.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">"user : $&#123;users&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.uname&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-7-测试"><a href="#3-7-测试" class="headerlink" title="3.7 测试"></a>3.7 测试</h3><p>浏览器访问<code>localhost:8080/users</code>显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zhangsan</span><br><span class="line">lisi</span><br><span class="line">wangwu</span><br></pre></td></tr></table></figure><p>到此SpringBoot整合Mybatis完成。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录了如何在SpringBoot项目中整合Mybatis框架与Druid数据库连接池,同时超详细的记录了具体步骤与代码实现。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://www.lixueduan.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://www.lixueduan.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot入门系列(二)---Spring Boot 整合 Thymeleaf</title>
    <link href="https://www.lixueduan.com/posts/730d2e5e.html"/>
    <id>https://www.lixueduan.com/posts/730d2e5e.html</id>
    <published>2019-03-10T14:00:00.000Z</published>
    <updated>2019-04-05T07:04:45.176Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录了如何在SpringBoot项目中使用Thymeleaf，同时简要分析了Thymeleaf模板引擎的优缺点与基本语法。 </p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-Thymeleaf简介"><a href="#1-Thymeleaf简介" class="headerlink" title="1. Thymeleaf简介"></a>1. Thymeleaf简介</h2><p>Thymeleaf 是一个跟 Velocity、FreeMarker 类似的模板引擎，它可以完全替代 JSP 。相较与其他的模板引擎，它有如下三个极吸引人的特点</p><ul><li>Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到模板 + 数据的展示方式。浏览器解释 html 时会忽略未定义的标签属性，所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。</li><li>Thymeleaf 开箱即用的特性。它提供标准和 Spring 标准两种方言，可以直接套用模板实现 JSTL、 OGNL 表达式效果，避免每天套模板、改 JSTL、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。</li><li>Thymeleaf 提供 Spring 标准方言和一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。</li></ul><h2 id="2-为什么使用-Thymeleaf"><a href="#2-为什么使用-Thymeleaf" class="headerlink" title="2. 为什么使用 Thymeleaf"></a>2. 为什么使用 Thymeleaf</h2><p>如果希望以 Jar 形式发布模块则尽量不要使用 JSP 相关知识，这是<strong>因为 JSP 在内嵌的 Servlet 容器上运行有一些问题 (内嵌 Tomcat、 Jetty 不支持 Jar 形式运行 JSP</strong>，Undertow 不支持 JSP)。</p><p>Spring Boot 中推荐使用 Thymeleaf 作为模板引擎，因为 Thymeleaf 提供了完美的 Spring MVC 支持</p><p>Spring Boot 提供了大量模板引擎，包括：</p><ul><li>FreeMarker</li><li>Groovy</li><li>Mustache</li><li><strong>Thymeleaf</strong></li><li>Velocity</li><li><strong>Beetl</strong></li></ul><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h2><h3 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1. 引入依赖"></a>1. 引入依赖</h3><p>主要增加 <code>spring-boot-starter-thymeleaf</code> 和 <code>nekohtml</code> 这两个依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sourceforge.nekohtml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nekohtml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>spring-boot-starter-thymeleaf</code>：Thymeleaf 自动配置</li><li><code>nekohtml</code>：允许使用非严格的 HTML 语法</li></ul><p>完整的 <code>pom.xml</code> 如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注意这里继承了父项目spring-boot-starter-parent--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.illusory<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-spring-boot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--两个依赖spring-boot-starter-web和test--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Thymeleaf Begin--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sourceforge.nekohtml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nekohtml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Thymeleaf End--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-在-application-yml中配置-Thymeleaf"><a href="#2-在-application-yml中配置-Thymeleaf" class="headerlink" title="2. 在 application.yml中配置 Thymeleaf"></a>2. 在 application.yml中配置 Thymeleaf</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  thymeleaf:</span></span><br><span class="line"><span class="attr">    cache:</span> <span class="literal">false</span> <span class="comment"># 开发时关闭缓存,不然没法看到实时页面</span></span><br><span class="line"><span class="attr">    mode:</span> <span class="string">HTML</span> <span class="comment"># 用非严格的 HTML</span></span><br><span class="line"><span class="attr">    encoding:</span> <span class="string">UTF-8</span></span><br><span class="line"><span class="attr">    servlet:</span></span><br><span class="line"><span class="attr">      content-type:</span> <span class="string">text/html</span></span><br></pre></td></tr></table></figure><h3 id="3-HTML引入-Thymeleaf"><a href="#3-HTML引入-Thymeleaf" class="headerlink" title="3. HTML引入 Thymeleaf"></a>3. HTML引入 Thymeleaf</h3><p>修改 html 标签用于引入 thymeleaf 引擎，这样才可以在其他标签里使用 <code>th:*</code> 语法，这是下面语法的前提。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html SYSTEM "http://www.thymeleaf.org/dtd/xhtml1-strict-thymeleaf-spring4-4.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-演示"><a href="#4-演示" class="headerlink" title="4. 演示"></a>4. 演示</h3><h4 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h4><p>在前面的controller中增加一个hi()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.boot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusoryCloud</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/15 12:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello spring boot!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/hi"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hi</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"name"</span>, <span class="string">"SpringBoot"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html SYSTEM "http://www.thymeleaf.org/dtd/xhtml1-strict-thymeleaf-spring4-4.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"'Hello！ ' + $&#123;name&#125; + '!'"</span> &gt;</span>spring<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>非常简单的一个页面，直接打开时会显示<code>spring</code>，浏览器在解析HTML时会自动忽略掉无法识别的标签。</p><p>然后程序启动后在访问则会显示<code>Hello！SpringBoot！</code></p><h2 id="4-常用语法"><a href="#4-常用语法" class="headerlink" title="4. 常用语法"></a>4. 常用语法</h2><h3 id="获取变量值"><a href="#获取变量值" class="headerlink" title="获取变量值"></a>获取变量值</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"'Hello！ ' + $&#123;name&#125; + '!'"</span> &gt;</span>name<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看出获取变量值用 <code>$</code> 符号,对于javaBean的话使用 <code>变量名.属性名</code> 方式获取,这点和 <code>EL</code> 表达式一样.</p><p>另外 <code>$</code> 表达式只能写在th标签内部,不然不会生效,上面例子就是使用 <code>th:text</code> 标签的值替换 <code>p</code> 标签里面的值,至于 <code>p</code> 里面的原有的值只是为了给前端开发时做展示用的.这样的话很好的做到了前后端分离。</p><h3 id="引入-URL"><a href="#引入-URL" class="headerlink" title="引入 URL"></a>引入 URL</h3><p>Thymeleaf 对于 URL 的处理是通过语法 <code>@{…}</code> 来处理的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;http://www.baidu.com&#125;"</span>&gt;</span>绝对路径<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/&#125;"</span>&gt;</span>相对路径<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;css/bootstrap.min.css&#125;"</span>&gt;</span>Content路径,默认访问static下的css文件夹<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>类似的标签有:<code>th:href</code> 和 <code>th:src</code></p><h3 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h3><p>很多时候可能我们只需要对一大段文字中的某一处地方进行替换，可以通过字符串拼接操作完成：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"'Welcome to our application, ' + $&#123;user.name&#125; + '!'"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一种更简洁的方式是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"|Welcome to our application, $&#123;user.name&#125;!|"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然这种形式限制比较多，|…|中只能包含变量表达式${…}，不能包含其他常量、条件表达式等。</p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>在表达式中可以使用各类算术运算符，例如+, -, *, /, %</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">th:with="isEven=($&#123;prodStat.count&#125; % 2 == 0)"</span><br></pre></td></tr></table></figure><p>逻辑运算符&gt;, &lt;, &lt;=,&gt;=，==,!=都可以使用，唯一需要注意的是使用&lt;,&gt;时需要用它的HTML转义符：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">th:if="$&#123;prodStat.count&#125; &amp;gt; 1"</span><br><span class="line">th:text="'Execution mode is ' + ( ($&#123;execMode&#125; == 'dev')? 'Development' : 'Production')"</span><br></pre></td></tr></table></figure><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><h4 id="if-unless"><a href="#if-unless" class="headerlink" title="if/unless"></a>if/unless</h4><p>Thymeleaf 中使用 <code>th:if</code> 和 <code>th:unless</code> 属性进行条件判断，下面的例子中，标签只有在 <code>th:if</code> 中条件成立时才显示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/login&#125;"</span> <span class="attr">th:unless</span>=<span class="string">$&#123;session.user</span> != <span class="string">null&#125;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>th:unless</code> 于 <code>th:if</code> 恰好相反，只有表达式中的条件不成立，才会显示其内容。</p><h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h4><p>Thymeleaf 同样支持多路选择 Switch 结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">"$&#123;user.role&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"'admin'"</span>&gt;</span>User is an administrator<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"#&#123;roles.manager&#125;"</span>&gt;</span>User is a manager<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>默认属性 default 可以用 * 表示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">"$&#123;user.role&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"'admin'"</span>&gt;</span>User is an administrator<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"#&#123;roles.manager&#125;"</span>&gt;</span>User is a manager<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"*"</span>&gt;</span>User is some other thing<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><p>渲染列表数据是一种非常常见的场景，例如现在有 n 条记录需要渲染成一个表格，该数据集合必须是可以遍历的，使用 <code>th:each</code> 标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Product list<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>NAME<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>PRICE<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>IN STOCK<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"prod : $&#123;prods&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.name&#125;"</span>&gt;</span>Onions<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.price&#125;"</span>&gt;</span>2.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;"</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"../home.html"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/&#125;"</span>&gt;</span>Return to home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，需要在被循环渲染的元素（这里是）中加入 <code>th:each</code> 标签，其中 <code>th:each=&quot;prod : ${prods}&quot;</code> 意味着对集合变量 <code>prods</code> 进行遍历，循环变量是 <code>prod</code> 在循环体中可以通过表达式访问。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录了如何在SpringBoot项目中使用Thymeleaf，同时简要分析了Thymeleaf模板引擎的优缺点与基本语法。 &lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://www.lixueduan.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://www.lixueduan.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot入门系列(一)---第一个SpringBoot项目</title>
    <link href="https://www.lixueduan.com/posts/6c30e894.html"/>
    <id>https://www.lixueduan.com/posts/6c30e894.html</id>
    <published>2019-03-08T14:00:00.000Z</published>
    <updated>2019-04-05T07:04:34.546Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要讲述了Spring框架的变化，从Spring1.0到Spring5.0，从xml配置到注解，到现在的SpringBoot，最后记录了如何创建第一个SpringBoot项目。</p><p>前面写摘要</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-Spring-简史"><a href="#1-Spring-简史" class="headerlink" title="1. Spring 简史"></a>1. Spring 简史</h2><h3 id="Spring-1-x-时代"><a href="#Spring-1-x-时代" class="headerlink" title="Spring 1.x 时代"></a>Spring 1.x 时代</h3><p>在 Spring1.x 时代，都是通过 xml 文件配置 bean，随着项目的不断扩大，需要将 xml 配置分放到不同的配置文件中，需要频繁的在 java 类和 xml 配置文件中切换。</p><h3 id="Spring-2-x-时代"><a href="#Spring-2-x-时代" class="headerlink" title="Spring 2.x 时代"></a>Spring 2.x 时代</h3><p>随着 JDK 1.5 带来的注解支持，Spring2.x 可以使用注解对 Bean 进行申明和注入，大大的减少了 xml 配置文件，同时也大大简化了项目的开发。</p><p>那么，问题来了，究竟是应该使用 xml 还是注解呢？</p><p>最佳实践：</p><ul><li>应用的基本配置用 xml，比如：数据源、资源文件等</li><li>业务开发用注解，比如：Service 中注入 bean 等</li></ul><h3 id="Spring-3-x-时代"><a href="#Spring-3-x-时代" class="headerlink" title="Spring 3.x 时代"></a>Spring 3.x 时代</h3><p>从 Spring3.x 开始提供了 Java 配置方式，使用 Java 配置方式可以更好的理解你配置的 Bean，现在我们就处于这个时代，并且 Spring4.x 和 Spring boot 都推荐使用 java 配置的方式。</p><h3 id="Spring-5-x-时代"><a href="#Spring-5-x-时代" class="headerlink" title="Spring 5.x 时代"></a>Spring 5.x 时代</h3><p>Spring5.x 是 Java 界首个支持响应式的 Web 框架，是 Spring 的一个重要版本，距离 Spring4.x 差不多四年。在此期间，大多数增强都是在 SpringBoot 项目中完成的，其最大的亮点就是提供了完整的端到端响应式编程的支持（新增 Spring WebFlux 模块）。</p><p>Spring WebFlux 同时支持使用旧的 Spring MVC 注解声明 <code>Reactive Controller</code>。和传统的 <code>MVC Controller</code> 不同，<code>Reactive Controller</code> 操作的是 <strong>非阻塞</strong> 的 <code>ServerHttpRequest</code> 和 <code>ServerHttpResponse</code>，而不再是 Spring MVC 里的 HttpServletRequest 和 HttpServletResponse。</p><p>至此也代表着 Java 正式迎来了<code>响应式异步编程</code>的时代。</p><h2 id="2-Spring-Boot"><a href="#2-Spring-Boot" class="headerlink" title="2. Spring Boot"></a>2. Spring Boot</h2><h3 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h3><p>Spring Boot 可以称之为 <strong>新一代 JavaEE 开发标准</strong>；随着动态语言的流行 (Ruby、Groovy、Scala、Node.js)，Java 的开发显得格外的笨重：繁多的配置、低下的开发效率、复杂的部署流程以及第三方技术集成难度大。</p><p>在上述环境下，Spring Boot 应运而生。它使用 <strong>“习惯优于配置”</strong> （项目中存在大量的配置，此外还内置了一个习惯性的配置，让你无需手动进行配置）的理念让你的项目快速的运行起来。使用 Spring Boot 很容易创建一个独立运行（运行 Jar，内嵌 Servlet 容器）准生产级别的基于 Spring 框架的项目，使用 Spring Boot 你可以不用或者只需很少的 Spring 配置。</p><h3 id="2-2-优点"><a href="#2-2-优点" class="headerlink" title="2.2 优点"></a>2.2 优点</h3><ul><li>快速构建项目</li><li>对主流开发框架的无配置集成</li><li>项目可独立运行，无需外部依赖 Servlet 容器</li><li>提供运行时的应用监控</li><li>极大地提高了开发、部署效率</li><li>与云计算的天然集成</li></ul><h3 id="2-3-缺点"><a href="#2-3-缺点" class="headerlink" title="2.3  缺点"></a>2.3  缺点</h3><ul><li>版本迭代速度很快，一些模块改动很大</li><li>由于不用自己做配置，报错时很难定位</li><li>网上现成的解决方案比较少</li></ul><h2 id="3-第一个SpringBoot项目"><a href="#3-第一个SpringBoot项目" class="headerlink" title="3. 第一个SpringBoot项目"></a>3. 第一个SpringBoot项目</h2><p>这里我们使用 Intellij IDEA 来新建一个 Spring Boot 项目。</p><h3 id="3-1-创建项目"><a href="#3-1-创建项目" class="headerlink" title="3.1 创建项目"></a>3.1 创建项目</h3><ul><li><ol><li>打开 IDEA -&gt; New Project -&gt; Spring Initializr</li></ol></li></ul><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/springboot/first-spring-boot-1.png" alt=""></p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/springboot/first-spring-boot-2.png" alt=""></p><ul><li>2.填写项目信息</li></ul><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/springboot/first-spring-boot-3.png" alt=""></p><ul><li>3.选择 Spring Boot 版本及 Web 开发所需的依赖</li></ul><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/springboot/first-spring-boot-4.png" alt=""></p><ul><li>4.保存项目到指定目录</li></ul><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/springboot/first-spring-boot-5.png" alt=""></p><h3 id="3-2-工程目录结构"><a href="#3-2-工程目录结构" class="headerlink" title="3.2 工程目录结构"></a>3.2 工程目录结构</h3><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/springboot/first-spring-boot-6.png" alt=""></p><p>一个标准的maven项目。</p><p><code>HelloSpringApplication</code>作为SpringBoot启动类。</p><p><code>resources/static</code>目录存放静态资源文件</p><p><code>resources/templates</code>目录存放html页面。</p><p><code>application.properties</code>为SpringBoot配置文件</p><h4 id="Application-class"><a href="#Application-class" class="headerlink" title="Application.class"></a>Application.class</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.boot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSpringBootApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HelloSpringBootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动类非常简单，其中<code>@SpringBootApplication</code>注解表明这是SpringBoot启动类。</p><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注意这里继承了父项目spring-boot-starter-parent--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.illusory<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-spring-boot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--两个依赖spring-boot-starter-web和test--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到项目中有两个依赖<code>spring-boot-starter-web</code>和<code>spring-boot-starter-test</code>。</p><p>其中test是都会有的，然后web则是前面勾选的模块。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/springboot/first-spring-boot-7.png" alt=""></p><p>可以看到已经依赖了Spring各大组件，同时还依赖了一个Tomcat,所以SpringBoot项目是可以独立运行的，因为内置了Tomcat。</p><h2 id="4-功能演示"><a href="#4-功能演示" class="headerlink" title="4. 功能演示"></a>4. 功能演示</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.boot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusoryCloud</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/15 12:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello spring boot!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动 <code>HelloSpringBootApplication</code> 的 <code>main()</code> 方法，浏览器访问 <code>http://localhost:8080/hello</code>可以看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello spring boot!</span><br></pre></td></tr></table></figure><h2 id="5-神奇之处"><a href="#5-神奇之处" class="headerlink" title="5. 神奇之处"></a>5. 神奇之处</h2><ul><li>没有配置 web.xml</li><li>没有配置 application.xml，Spring Boot 帮你配置了</li><li>没有配置 application-mvc.xml，Spring Boot 帮你配置了</li><li>没有配置 Tomcat，Spring Boot 内嵌了 Tomcat 容器</li></ul><h2 id="6-自动配置原理"><a href="#6-自动配置原理" class="headerlink" title="6. 自动配置原理"></a>6. 自动配置原理</h2><p>Spring Boot的启动类上有一个<code>@SpringBootApplication</code>注解，这个注解是Spring Boot项目必不可少的注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SpringBootApplication.class</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(</span><br><span class="line">    excludeFilters = &#123;<span class="meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;TypeExcludeFilter.class&#125;</span><br><span class="line">), <span class="meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span><br><span class="line">)&#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = EnableAutoConfiguration.class</span><br><span class="line">    )</span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = EnableAutoConfiguration.class</span><br><span class="line">    )</span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = ComponentScan.class,</span><br><span class="line">        attribute = <span class="string">"basePackages"</span></span><br><span class="line">    )</span><br><span class="line">    String[] scanBasePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = ComponentScan.class,</span><br><span class="line">        attribute = <span class="string">"basePackageClasses"</span></span><br><span class="line">    )</span><br><span class="line">    Class&lt;?&gt;[] scanBasePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这是个复合注解，其中有一个是<code>@EnableAutoConfiguration</code>,开启自动配置，说明SpringBoot配置肯定和这个有关。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//EnableAutoConfiguration.class</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;AutoConfigurationImportSelector.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">    String ENABLED_OVERRIDE_PROPERTY = <span class="string">"spring.boot.enableautoconfiguration"</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个注解也是一个派生注解，其中的关键功能由<code>@Import({AutoConfigurationImportSelector.class})</code>提供，其导入的AutoConfigurationImportSelector的selectImports()方法通过SpringFactoriesLoader.loadFactoryNames()扫描所有具有META-INF/spring.factories的jar包。spring-boot-autoconfigure-x.x.x.x.jar里就有一个这样的spring.factories文件。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/springboot/first-spring-boot-8.png" alt=""></p><p>最终<code>@EnableAutoConfiguration</code>注解通过<code>@SpringBootApplication</code>被间接的标记在了Spring Boot的启动类上。在<code>SpringApplication.run(...)</code>的内部就会执行<code>selectImports()</code>方法，找到所有JavaConfig自动配置类的全限定名对应的class，然后将所有自动配置类加载到Spring容器中。</p><p>Spring Boot关于自动配置的源码在spring-boot-autoconfigure-x.x.x.x.jar中：</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/springboot/first-spring-boot-9.png" alt=""></p><p>可以看到SpringBoot提供了很多的默认配置，在我们没有手动配置时就会使用提供的默认配置。SpringBoot提倡的<code>约定大于配置</code>。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><code>《Spring boot实战》</code></p><p><code>https://blog.csdn.net/u014745069/article/details/83820511</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要讲述了Spring框架的变化，从Spring1.0到Spring5.0，从xml配置到注解，到现在的SpringBoot，最后记录了如何创建第一个SpringBoot项目。&lt;/p&gt;
&lt;p&gt;前面写摘要&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://www.lixueduan.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://www.lixueduan.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>MySQL主从复制与双主互备</title>
    <link href="https://www.lixueduan.com/posts/846f909.html"/>
    <id>https://www.lixueduan.com/posts/846f909.html</id>
    <published>2019-03-05T14:00:00.000Z</published>
    <updated>2019-03-12T12:15:14.077Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要讲述了MySQL的主从复制与双主互备的作用与好处，并且记录了具体的搭建过程与过程中的常见问题。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><h3 id="1-1-什么是主从复制"><a href="#1-1-什么是主从复制" class="headerlink" title="1.1 什么是主从复制?"></a>1.1 什么是主从复制?</h3><p>主从复制，是用来建立一个和主数据库完全一样的数据库环境，称为从数据库；主数据库一般是准实时的业务数据库。</p><h3 id="1-2-主从复制的作用"><a href="#1-2-主从复制的作用" class="headerlink" title="1.2 主从复制的作用"></a>1.2 主从复制的作用</h3><ul><li>1.做数据的热备，作为后备数据库，主数据库服务器故障后，可切换到从数据库继续工作，避免数据丢失。</li><li>2.架构的扩展。业务量越来越大，I/O访问频率过高，单机无法满足，此时做多库的存储，降低磁盘I/O访问的频率，提高单个机器的I/O性能。</li><li>3.读写分离，使数据库能支撑更大的并发。在报表中尤其重要。由于部分报表sql语句非常的慢，导致锁表，影响前台服务。如果前台使用master，报表使用slave，那么报表sql将不会造成前台锁，保证了前台速度。</li></ul><h3 id="1-3-主从复制的原理"><a href="#1-3-主从复制的原理" class="headerlink" title="1.3 主从复制的原理"></a>1.3 主从复制的原理</h3><ul><li>数据库有个<code>bin-log</code>二进制文件，记录了所有sql语句。</li><li>我们的目标就是把主数据库的<code>bin-log</code>文件的sql语句复制到从库。</li><li>让其在从机的<code>relay-log</code>重做日志文件中再执行一次这些sql语句即可。</li></ul><h3 id="1-4-大致流程"><a href="#1-4-大致流程" class="headerlink" title="1.4 大致流程"></a>1.4 大致流程</h3><p><strong>对于每一个主从复制的连接，都有三个线程</strong>。</p><ul><li>1.<strong>binlog输出线程</strong> :每当有从库连接上主库时，主库就会创建一个线程然后发送<code>binlog</code>文件到从库。</li><li>2.<strong>从库I/O线程</strong> :当<code>START SLAVE</code>语句在从库开始执行之后，从库创建一个I/O线程，该线程连接到主库并请求主库发送<code>binlog</code>里面的更新记录到从库上。从库I/O线程读取主库的<code>binlog</code>输出线程发送的更新并拷贝这些更新到本地文件，其中包括<code>relay log</code>文件。</li><li>3.<strong>从库的SQL线程</strong>:从库创建一个SQL线程，这个线程读取从库I/O线程写到<code>relay log</code>的更新事件并执行。</li></ul><p>拥有多个从库的主库为每一个连接到主库的从库创建一个binlog输出线程，每一个从库都有它自己的I/O线程和SQL线程。</p><h3 id="1-5-具体流程"><a href="#1-5-具体流程" class="headerlink" title="1.5 具体流程"></a>1.5 具体流程</h3><ul><li>1.主库db的更新事件<code>(update、insert、delete)</code>被写到<code>binlog</code>。</li><li>2.从库发起连接，连接到主库。</li><li>3.此时主库创建一个<code>binlog dump thread</code>线程，把<code>binlog</code>的内容发送到从库。</li><li>4.从库启动之后，创建一个I/O线程，读取主库传过来的binlog内容并写入到relay log。</li><li>5.还会创建一个SQL线程，从<code>relay log</code>里面读取内容，从<code>Exec_Master_Log_Pos</code>位置开始执行读取到的更新事件，将更新内容写入到<code>slave</code>的db。</li></ul><h2 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2. 环境准备"></a>2. 环境准备</h2><h3 id="2-1-所需环境"><a href="#2-1-所需环境" class="headerlink" title="2.1 所需环境"></a>2.1 所需环境</h3><p>先准备两台服务器，且安装好mysql。必须保证两台机器上的mysql中数据是一致的，不然主从复制时可能会出现问题。</p><p>如果两台机器数据不一致，比如先有主机后加的从机，此时可以先复制主机数据到从机，在配置主从复制。</p><h3 id="2-2-手动同步数据库"><a href="#2-2-手动同步数据库" class="headerlink" title="2.2 手动同步数据库"></a>2.2 手动同步数据库</h3><p>先在主机上执行以下SQL，锁定表中数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; flush table with read lock;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure><p><strong>不要退出这个终端，否则这个锁就失效了</strong>。</p><p>在不退出终端的情况下，再开启一个终端直接打包压缩数据文件或使用<code>mysqldump</code>工具导出数据。这里通过打包mysql文件来完成数据的备份，操作过程如下：</p><p>一、导出数据库<br>1、导出数据和表结构：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 格式：mysqldump -u用户名 -p密码 数据库名 &gt; 数据库名.sql</span><br><span class="line"><span class="meta">#</span> /usr/local/mysql/bin/ mysqldump -uroot -proot test &gt; test.sql</span><br></pre></td></tr></table></figure><p>2、只导出表结构：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 格式：mysqldump -u用户名 -p密码 -d 数据库名 &gt; 数据库名.sql</span><br><span class="line"><span class="meta">#</span> /usr/local/mysql/bin/ mysqldump -uroot -proot -d test &gt; test.sql</span><br></pre></td></tr></table></figure><p>具体如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>创建保存备份文件的文件夹</span><br><span class="line">[root@localhost ~]# mkdir -p /usr/local/mysql/data/backup    </span><br><span class="line"><span class="meta">#</span>创建备份文件并压缩</span><br><span class="line">[root@localhost ~]# /usr/local/mysql/bin/mysqldump -uroot -p 'root' --events -A -B |gzip &gt;/usr/local/mysql/data/backup/mysql_bak.$(date +%F).sql.gz</span><br><span class="line"><span class="meta">#</span> 用scp将备份文件复制到从机上</span><br><span class="line">[root@localhost ~]# scp /usr/local/mysql/data/backup/mysql_bak.2019-03-12.sql.gz root@192.168.5.151:/usr/local/mysql/data/backup</span><br></pre></td></tr></table></figure><p>备份结束后，解锁主库，恢复读写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; unlock tables;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><p>从库进行同步：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 解压</span><br><span class="line">[root@localhost backup]# gunzip mysql_bak.2019-03-12.sql.gz </span><br><span class="line">#导入SQL文件</span><br><span class="line">[root@localhost backup]# mysql -uroot -p  &lt;mysql_bak.2019-03-12.sql</span><br></pre></td></tr></table></figure><p>或者用另一种导入方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#1.首先建空数据库</span><br><span class="line">mysql&gt;create database abc;</span><br><span class="line">#2.选择数据库</span><br><span class="line">mysql&gt;use abc;</span><br><span class="line">#3.设置数据库编码</span><br><span class="line">mysql&gt;set names utf8;</span><br><span class="line">#4.导入数据（注意sql文件的路径）</span><br><span class="line">mysql&gt;source /usr/local/mysql/data/backup/mysql_bak.2019-03-12.sql;</span><br></pre></td></tr></table></figure><h2 id="3-搭建主从复制"><a href="#3-搭建主从复制" class="headerlink" title="3. 搭建主从复制"></a>3. 搭建主从复制</h2><h3 id="3-1-修改配置文件"><a href="#3-1-修改配置文件" class="headerlink" title="3.1 修改配置文件"></a>3.1 修改配置文件</h3><p><code>主机Master：192.168.5.153</code></p><p><code>从机Slave：192.168.5.151</code></p><p>在默认情况下，MySQL的配置文件是<code>/etc/my.cnf</code>,首先修改Mater主机的配置文件，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# vim /etc/my.cnf</span><br></pre></td></tr></table></figure><p>在<code>Master</code>的<code>/etc/my.cnf</code>文件中的<code>[mysqld]</code>段添加如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>节点标识，主、从节点不能相同，必须全局唯一 一般填ip最后几位</span><br><span class="line">server-id=153</span><br><span class="line"><span class="meta">#</span>开启MySQL的binlog日志功能。“mysql-bin”表示日志文件的命名格式</span><br><span class="line"><span class="meta">#</span>生成文件名为mysql-bin.000001、mysql-bin.000002等的日志文件</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line"><span class="meta">#</span>定义relay-log日志文件的命名格式</span><br><span class="line">relay-log=mysql-relay-bin</span><br><span class="line"><span class="meta">#</span>复制过滤选项，可以过滤不需要复制的数据库或表，例如“mysql.%”表示不复制MySQL库下的所有对象</span><br><span class="line">replicate-wild-ignore-table=mysql.%</span><br><span class="line">replicate-wild-ignore-table=information_schema.%</span><br><span class="line"><span class="meta">#</span> 指定需要复制的数据库或表 test数据库下的所有表都复制</span><br><span class="line">replicate-wild-do-table=test.%</span><br></pre></td></tr></table></figure><p>接着修改<code>Slave</code>从机的配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>节点标识，主、从节点不能相同，必须全局唯一 一般填ip最后几位</span><br><span class="line">server-id=151</span><br><span class="line"><span class="meta">#</span>开启MySQL的binlog日志功能。“mysql-bin”表示日志文件的命名格式</span><br><span class="line"><span class="meta">#</span>生成文件名为mysql-bin.000001、mysql-bin.000002等的日志文件</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line"><span class="meta">#</span>定义relay-log日志文件的命名格式</span><br><span class="line">relay-log=mysql-relay-bin</span><br><span class="line"><span class="meta">#</span>复制过滤选项，可以过滤不需要复制的数据库或表，例如“mysql.%”表示不复制MySQL库下的所有对象</span><br><span class="line">replicate-wild-ignore-table=mysql.%</span><br><span class="line">replicate-wild-ignore-table=information_schema.%</span><br><span class="line"><span class="meta">#</span> 指定需要复制的数据库或表,与上面</span><br><span class="line">replicate-wild-do-table=test.%</span><br></pre></td></tr></table></figure><p>特别注意: <strong>生产库上一般不建议设置过滤规则, 如果非要设置, 强烈建议从库使用通配符方式过滤某个库</strong>。</p><p>从库可以使用通配符<code>&quot;库名.%&quot;</code>方式过滤主从同步时某个库的设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">replicate-wild-do-table=webdb.%      #只复制webdb库下的所有表`</span><br><span class="line">replicate-wild-ignore-table=mysql.%  #忽略mysql库下的所有表</span><br></pre></td></tr></table></figure><p><strong>温馨提示：在实际业务场景中，mysq主从同步时最好别过滤库，即最好进行基于整个数据库的同步配置</strong>。如果业务库比较多的情况下，可使用mysql多实例方式进行同步，一个业务库对应一个mysql实例，每个mysql实例做基于它的整个数据库的同步配置。使用过滤库或过滤表的方式进行主从同步配置，后续会带来一些比较麻烦的坑。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">replicate-wild-dO-table= "库名.%"</span><br><span class="line">replicate-wild-ignore-table= "库名.%"</span><br></pre></td></tr></table></figure><p>而不建议从库使用DB方式过滤某个库:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">replicate_do_db ="库名"</span><br><span class="line">replicate_ingore_db ="库名"</span><br></pre></td></tr></table></figure><h3 id="3-2-创建复制用户"><a href="#3-2-创建复制用户" class="headerlink" title="3.2 创建复制用户"></a>3.2 创建复制用户</h3><p>首先在<code>Mater</code>的MySQL库中创建复制用户给<code>Slave</code>复制时使用，操作过程如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# /etc/init.d/mysqld restart</span><br><span class="line">#@ 前面的那个是 用户名 后面的是主机地址 %表示所有 最后的root是密码</span><br><span class="line">mysql&gt; grant replication slave on *.* to &apos;repl_user&apos;@&apos;192.168.5.151&apos; identified by &apos;root&apos;;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show master status;</span><br><span class="line"> +------------------+----------+--------------+------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |</span><br><span class="line"> +------------------+----------+--------------+------------------+</span><br><span class="line"> | mysql-bin.000001 |     686  |              |                  |</span><br><span class="line"> +------------------+----------+--------------+------------------+</span><br></pre></td></tr></table></figure><p>然后在<code>Slave</code>的MySQL库中将<code>Mster</code>设为自己的主服务器，操作如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; change master to master_host=&apos;192.168.5.153&apos;,master_user=&apos;repl_user&apos;,master_password=&apos;root&apos;,master_log_file=&apos;mysql-bin.000001&apos;,master_log_pos=686;</span><br></pre></td></tr></table></figure><p>注意: <strong><code>master_log_file</code>和<code>master_log_pos</code>两个选项，这两个选项的值是在<code>master</code>上通过SQL语句<code>show master status</code>查询到的结果</strong>。</p><p> 接着就可以在<code>Slave</code>上启动slave服务了，可执行如下SQL命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; start slave;</span><br></pre></td></tr></table></figure><p>查看<code>Slave</code>上slave的运行状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status\G;</span><br><span class="line"></span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: </span><br><span class="line">                  Master_Host: 192.168.5.154</span><br><span class="line">                  Master_User: repl_user</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000001</span><br><span class="line">          Read_Master_Log_Pos: 442</span><br><span class="line">               Relay_Log_File: mysql-relay-bin.000001</span><br><span class="line">                Relay_Log_Pos: 4</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000001</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: </span><br><span class="line">          Replicate_Ignore_DB: </span><br><span class="line">           Replicate_Do_Table: </span><br><span class="line">       Replicate_Ignore_Table: </span><br><span class="line">      Replicate_Wild_Do_Table: test.%</span><br><span class="line">  Replicate_Wild_Ignore_Table: mysql.%,information_schema.%</span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error: </span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 442</span><br><span class="line">              Relay_Log_Space: 154</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File: </span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File: </span><br><span class="line">           Master_SSL_CA_Path: </span><br><span class="line">              Master_SSL_Cert: </span><br><span class="line">            Master_SSL_Cipher: </span><br><span class="line">               Master_SSL_Key: </span><br><span class="line">        Seconds_Behind_Master: NULL</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 1593</span><br><span class="line">                Last_IO_Error: Fatal error: The slave I/O thread stops because master and slave have equal MySQL server ids; these ids must be different for replication to work (or the --replicate-same-server-id option must be used on slave but this does not always make sense; please check the manual before using it).</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error: </span><br><span class="line">  Replicate_Ignore_Server_Ids: </span><br><span class="line">             Master_Server_Id: 1</span><br><span class="line">                  Master_UUID: </span><br><span class="line">             Master_Info_File: /usr/local/mysql/data/master.info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind: </span><br><span class="line">      Last_IO_Error_Timestamp: 190311 16:27:22</span><br><span class="line">     Last_SQL_Error_Timestamp: </span><br><span class="line">               Master_SSL_Crl: </span><br><span class="line">           Master_SSL_Crlpath: </span><br><span class="line">           Retrieved_Gtid_Set: </span><br><span class="line">            Executed_Gtid_Set: </span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB: </span><br><span class="line">                 Channel_Name: </span><br><span class="line">           Master_TLS_Version: </span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>这里需要重点关注的是<code>Slave_IO_Running</code>和<code>Slave_SQL_Running</code>，这两个就是在Slave节点上运行的主从复制线程，正常情况下这两个值都应该为Yes。</p><p>另外，还需要注意的是<code>Slave_IO_State</code>、<code>Master_Host</code>、<code>Master_Log_File</code>、<code>Read_Master_Log_Pos</code>、<code>Relay_Log_File</code>、<code>Relay_Log_Pos</code>和<code>Relay_Master_Log_File</code>几个选项，可以查看出MySQL复制的运行原理及执行规律。最后还有一个<code>Replicate_Wild_Ignore_Table</code>选项，这个是之前在<code>my.cnf</code>中添加过的，通过此选项的输出值可以知道过滤了哪些数据库。</p><p>到这里主从复制已经ok了。</p><h3 id="3-3-测试"><a href="#3-3-测试" class="headerlink" title="3.3 测试"></a>3.3 测试</h3><p>在master上创建一个表，注意前面配置的时只复制test数据库中的数据，所以需要先建一个test数据库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database test;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use test;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; CREATE TABLE users(</span><br><span class="line">    -&gt; uid INT  PRIMARY KEY,</span><br><span class="line">    -&gt; uname VARCHAR(20),</span><br><span class="line">    -&gt; sex INT,</span><br><span class="line">    -&gt; age INT</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.09 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p>创建好后slave查看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">| test               |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>证明主从复制已经成功了。</p><h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h2><h3 id="4-1-主从同步过程"><a href="#4-1-主从同步过程" class="headerlink" title="4.1 主从同步过程"></a>4.1 主从同步过程</h3><ul><li>1.在<code>Slave</code> 服务器上执行<code>sart slave</code>命令开启主从复制开关，开始进行主从复制。</li><li>2.此时，<code>Slave</code>服务器的<code>IO线程</code>会通过在<code>Master</code>上已经授权的复制用户权限请求连接<code>Master</code>服务器，并请求从执行<code>binlog</code>日志文件的指定位置（日志文件名和位置就是在配置主从复制服务时执行<code>change master</code>命令指定的）之后开始发送<code>binlog</code>日志内容</li><li>3.<code>Master</code>服务器接收到来自<code>Slave</code>服务器的<code>IO线程</code>的请求后，其上负责复制的<code>IO线程</code>会根据<code>Slave</code>服务器的<code>IO线程</code>请求的信息分批读取指定binlog日志文件指定位置之后的binlog日志信息，然后返回给Slave端的IO线程。返回的信息中除了binlog日志内容外，还有在Master服务器端记录的IO线程。返回的信息中除了binlog中的下一个指定更新位置。</li><li>4.当Slave服务器的IO线程获取到Master服务器上IO线程发送的日志内容、日志文件及位置点后，会将<code>binlog</code>日志内容依次写到Slave端自身的<code>Relay Log</code>（即中继日志）文件<code>（Mysql-relay-bin.xxx</code>）的最末端，并将新的<code>binlog</code>文件名和位置记录到<code>master-info</code>文件中，以便下一次读取master端新binlog日志时能告诉Master服务器从新binlog日志的指定文件及位置开始读取新的binlog日志内容</li><li>5.<code>Slave</code>服务器端的SQL线程会实时检测本地<code>Relay Log</code>中IO线程新增的日志内容，然后及时把Relay LOG 文件中的内容解析成<code>sql</code>语句，并在自身Slave服务器上按解析SQL语句的位置顺序执行应用这样sql语句，并在<code>relay-log.info</code>中记录当前应用中继日志的文件名和位置点.</li></ul><h3 id="4-2-主从复制条件"><a href="#4-2-主从复制条件" class="headerlink" title="4.2 主从复制条件"></a>4.2 主从复制条件</h3><ul><li>开启Binlog功能</li><li>主库要建立账号</li><li>从库要配置master.info (CHANGE MASTER to…相当于配置密码文件和Master的相关信息)</li><li>start slave 开启复制功能</li></ul><h3 id="4-3-主从复制时需要理解"><a href="#4-3-主从复制时需要理解" class="headerlink" title="4.3 主从复制时需要理解"></a>4.3 主从复制时需要理解</h3><ul><li>3个线程，主库IO，从库IO和SQL及作用</li><li>master.info（从库）作用</li><li>relay-log 作用</li><li>异步复制</li><li>binlog作用 (如果需要级联需要开启Binlog)</li></ul><h3 id="4-4-主从复制时注意事项"><a href="#4-4-主从复制时注意事项" class="headerlink" title="4.4 主从复制时注意事项"></a>4.4 主从复制时注意事项</h3><ul><li>主从复制是异步逻辑的SQL语句级的复制</li><li>复制时，主库有一个I/O线程，从库有两个线程，I/O和SQL线程</li><li>实现主从复制的必要条件是主库要开启记录binlog功能</li><li>作为复制的所有Mysql节点的server-id都不能相同</li><li>binlog文件只记录对数据库有更改的SQL语句（来自主库内容的变更），不记录任何查询（select，show）语句</li></ul><p><strong>彻底解除主从复制关系</strong><br>-  stop slave;<br>-  reset slave; 或直接删除master.info和relay-log.info这两个文件；<br>-  修改my.cnf删除主从相关配置参数。</p><h3 id="4-5-常见问题"><a href="#4-5-常见问题" class="headerlink" title="4.5 常见问题"></a>4.5 常见问题</h3><h4 id="1-数据丢失与复制延迟"><a href="#1-数据丢失与复制延迟" class="headerlink" title="1.数据丢失与复制延迟"></a>1.数据丢失与复制延迟</h4><ul><li>主库宕机后，数据可能丢失</li><li>从库只有一个SQL Thread，主库写压力大，复制很可能延时</li></ul><h4 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2. 解决方法"></a>2. 解决方法</h4><ul><li>半同步复制—解决数据丢失的问题</li><li>并行复制—-解决从库复制延迟的问题</li></ul><h4 id="3-半同步复制原理"><a href="#3-半同步复制原理" class="headerlink" title="3. 半同步复制原理"></a>3. 半同步复制原理</h4><p>1.事务在主库写完binlog后需要从库返回一个已接受，才放回给客户端；<br>2.5.5集成到mysql，以插件的形式存在，需要单独安装<br>3.确保事务提交后binlog至少传输到一个从库<br>4.不保证从库应用完成这个事务的binlog<br>5.性能有一定的降低</p><p>6.网络异常或从库宕机，卡主库，直到超时或从库恢复 </p><h4 id="4-并行复制"><a href="#4-并行复制" class="headerlink" title="4. 并行复制"></a>4. 并行复制</h4><p>社区版5.6中新增<br>并行是指从库多线程apply binlog库级别并行应用binlog，同一个库数据更改还是串行的(5.7版并行复制基于事务组)设置<br>设置sql线程数为10<br><code>set global slave_parallel_workers=10;</code></p><h2 id="5-双主备份"><a href="#5-双主备份" class="headerlink" title="5. 双主备份"></a>5. 双主备份</h2><h3 id="5-1-简介"><a href="#5-1-简介" class="headerlink" title="5.1 简介"></a>5.1 简介</h3><p>根据上面的主从环境部署，master和slave已经实现同步，即在master上写入新数据，自动同步到slave。而从库只能读不能写，一旦从库有写入数据，就会造成主从数据不一致！<br>下面就说下Mysql主主复制环境，在slave上更新数据时，master也能自动同步过来。</p><p>温馨提示：<br>在做主主同步前，提醒下需要特别注意的一个问题：<br>主主复制和主从复制有一些区别，因为多主中都可以对服务器有写权限，所以设计到自增长重复问题，例如：<br>出现的问题（多主自增长ID重复）<br>1）首先在A和B两个库上创建<code>test</code>表结构;<br>2）停掉A，在B上对数据表<code>test</code>(存在自增长属性的ID字段)执行插入操作，返回插入ID为1;<br>3）然后停掉B，在A上对数据表<code>test</code>(存在自增长属性的ID字段)执行插入操作，返回的插入ID也是1;<br>4）然后 同时启动A,B，就会出现主键ID重复</p><p>解决方法：<br>只要保证两台服务器上的数据库里插入的自增长数据不同就可以了<br>如：A插入奇数ID，B插入偶数ID，当然如果服务器多的话，还可以自定义算法，只要不同就可以了<br>在下面例子中，在两台主主服务器上加入参数，以实现奇偶插入！<br>记住:在做主主同步时需要设置自增长的两个相关配置，如下：<br>auto_increment_offset       表示自增长字段从那个数开始，取值范围是1 .. 65535。这个就是序号。如果有n台mysql机器，则从第一台开始分为设1，2…n<br>auto_increment_increment    表示自增长字段每次递增的量，其默认值是1，取值范围是1 .. 65535。如果有n台mysql机器，这个值就设置为n。</p><p>在主主同步配置时，需要将两台服务器的：<br>auto_increment_increment     增长量都配置为2<br>auto_increment_offset        分别配置为1和2。这是序号，第一台从1开始，第二台就是2，以此类推!这样效果就是：master的数据<code>id</code>是1,3,5,7…, slave的数据<code>id</code>是2,4,6,8….<br>这样才可以避免两台服务器同时做更新时自增长字段的值之间发生冲突。（针对的是有自增长属性的字段）</p><h3 id="5-2-修改配置文件"><a href="#5-2-修改配置文件" class="headerlink" title="5.2 修改配置文件"></a>5.2 修改配置文件</h3><p><code>Master</code>的配置文件<code>my.cnf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>主主备份新增</span><br><span class="line">log-slave-updates</span><br><span class="line">sync_binlog = 1</span><br><span class="line">binlog_checksum = none</span><br><span class="line">binlog_format = mixed</span><br><span class="line"><span class="meta">#</span>防止ID自增重复 offset=1</span><br><span class="line">auto-increment-increment = 2   </span><br><span class="line">auto-increment-offset = 1  </span><br><span class="line">slave-skip-errors = all</span><br></pre></td></tr></table></figure><p><code>Slave</code>的配置文件<code>my.cnf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>主主备份新增</span><br><span class="line">log-slave-updates</span><br><span class="line">sync_binlog = 1</span><br><span class="line">binlog_checksum = none</span><br><span class="line">binlog_format = mixed</span><br><span class="line"><span class="meta">#</span>防止ID自增重复 offset=2</span><br><span class="line">auto-increment-increment = 2   </span><br><span class="line">auto-increment-offset = 2 </span><br><span class="line">slave-skip-errors = all</span><br></pre></td></tr></table></figure><h3 id="5-3-创建同步用户"><a href="#5-3-创建同步用户" class="headerlink" title="5.3 创建同步用户"></a>5.3 创建同步用户</h3><p>同时在主从服务器建立一个连接帐户，该帐户必须授予<code>REPLIATION SLAVE</code>权限。这里因为服务器A和服务器B互为主从，所以都要分别建立一个同步用户。</p><p><code>Master</code></p><p>其实前面主机上已经创建了一个账户了，这里可以不用再创建的，不过还是写上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant replication slave on *.* to &apos;DoubleRel&apos;@&apos;192.168.5.151&apos; identified by &apos;root&apos;;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure><p><code>Slave</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant replication slave on *.* to &apos;DoubleRel&apos;@&apos;192.168.5.153&apos; identified by &apos;root&apos;;</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure><h3 id="5-4-指定Master"><a href="#5-4-指定Master" class="headerlink" title="5.4 指定Master"></a>5.4 指定Master</h3><p>互相将对方作为<code>Master</code></p><p><code>Master</code></p><p>注意：<code>master_log_file</code>,<code>master_log_pos</code>这两个刚好是在对面的机器上查询出来的，即<code>MAster</code>上查出来的<code>Position=150</code>，那么在<code>Slave</code>上执行的命令就是<code>master_log_pos=150</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000003 |     150  |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line"></span><br><span class="line">mysql&gt;change master to master_host=&apos;192.168.5.151&apos;,master_user=&apos;DoubleRel&apos;,master_password=&apos;root&apos;,master_log_file=&apos;mysql-bin.000002&apos;,master_log_pos=150;</span><br></pre></td></tr></table></figure><p><code>Slave</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000003 |      150 |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line"></span><br><span class="line">mysql&gt;change master to master_host=&apos;192.168.5.153&apos;,master_user=&apos;DoubleRel&apos;,master_password=&apos;root&apos;,master_log_file=&apos;mysql-bin.000003&apos;,master_log_pos=150;</span><br></pre></td></tr></table></figure><h3 id="5-5-开启Slave"><a href="#5-5-开启Slave" class="headerlink" title="5.5 开启Slave"></a>5.5 开启Slave</h3><p><code>Master</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  start slave;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show slave status \G;</span><br><span class="line">#查看下面两项值均为Yes，即表示设置从服务器成功。</span><br><span class="line">Slave_IO_Running: Yes</span><br><span class="line">Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><p><code>saster</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  start slave;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show slave status \G;</span><br><span class="line">#查看下面两项值均为Yes，即表示设置从服务器成功。</span><br><span class="line">Slave_IO_Running: Yes</span><br><span class="line">Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><h3 id="5-6-测试"><a href="#5-6-测试" class="headerlink" title="5.6 测试"></a>5.6 测试</h3><p>现在<code>Master</code>中查询，只有<code>users</code>一张表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br><span class="line">+----------------+</span><br><span class="line">| Tables_in_test |</span><br><span class="line">+----------------+</span><br><span class="line">| users          |</span><br><span class="line">+----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>然后在<code>Slave</code>中创建一张表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE orders(</span><br><span class="line">    -&gt; oid INT  PRIMARY KEY,</span><br><span class="line">    -&gt; oname VARCHAR(20)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.06 sec)</span><br></pre></td></tr></table></figure><p><code>Master</code>中再次查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br><span class="line">+----------------+</span><br><span class="line">| Tables_in_test |</span><br><span class="line">+----------------+</span><br><span class="line">| orders         |</span><br><span class="line">| users          |</span><br><span class="line">+----------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>ok，已经有两张表了，接着在<code>Master</code>中添加一张表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE account(</span><br><span class="line">    -&gt; aid INT  PRIMARY KEY,</span><br><span class="line">    -&gt; aname VARCHAR(20)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br></pre></td></tr></table></figure><p>然后在<code>Slave</code>中查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br><span class="line">+----------------+</span><br><span class="line">| Tables_in_test |</span><br><span class="line">+----------------+</span><br><span class="line">| account        |</span><br><span class="line">| orders         |</span><br><span class="line">| users          |</span><br><span class="line">+----------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>三张表都在，测试成功，说明双主备份搭建成功了。</p><h2 id="6-问题"><a href="#6-问题" class="headerlink" title="6. 问题"></a>6. 问题</h2><p><code>show slave status \G;</code>查看状态时出现<code>Slave_IO_Running: Connecting</code></p><p>可能的原因：</p><h3 id="6-1-网络不通"><a href="#6-1-网络不通" class="headerlink" title="6.1 网络不通"></a>6.1 网络不通</h3><p>Master和Slave互相ping一下看能不能ping通</p><h3 id="6-2-账户密码错误："><a href="#6-2-账户密码错误：" class="headerlink" title="6.2 账户密码错误："></a>6.2 账户密码错误：</h3><p>检测生成的用户和配置的密码是否一致，就是下面的这两个地方。@前面的时账号 后面的是允许访问的主机地址，最后的root则是密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant replication slave on *.* to &apos;DoubleRel&apos;@&apos;192.168.5.151&apos; identified by &apos;root&apos;;</span><br><span class="line"></span><br><span class="line">mysql&gt;change master to master_host=&apos;192.168.5.153&apos;,master_user=&apos;DoubleRel&apos;,master_password=&apos;root&apos;,master_log_file=&apos;mysql-bin.000003&apos;,master_log_pos=150;</span><br></pre></td></tr></table></figure><h3 id="6-3-防火墙"><a href="#6-3-防火墙" class="headerlink" title="6.3 防火墙"></a>6.3 防火墙</h3><p>可以先关闭防火墙在测试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld # 临时关闭防火墙</span><br><span class="line">systemctl disable firewalld # 禁止开机启动</span><br></pre></td></tr></table></figure><h3 id="6-4-配置文件问题"><a href="#6-4-配置文件问题" class="headerlink" title="6.4 配置文件问题"></a>6.4 配置文件问题</h3><p>检查配置文件<code>my.cnf</code>是否有错误,注意语法。</p><h3 id="6-5-连接服务器时语法"><a href="#6-5-连接服务器时语法" class="headerlink" title="6.5 连接服务器时语法"></a>6.5 连接服务器时语法</h3><p>还有就是设置Master时变量是否弄错，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000003 |      150 |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line"></span><br><span class="line">mysql&gt;change master to master_host=&apos;192.168.5.153&apos;,master_user=&apos;DoubleRel&apos;,master_password=&apos;root&apos;,master_log_file=&apos;mysql-bin.000003&apos;,master_log_pos=150;</span><br></pre></td></tr></table></figure><p><strong><code>show master status</code>查询出来的结果是给对方用的，这里的<code>master_log_file</code>和<code>master_log_pos</code>是在对方的机器上查询出来的结果</strong></p><h3 id="6-6-主服务器mysql权限"><a href="#6-6-主服务器mysql权限" class="headerlink" title="6.6 主服务器mysql权限"></a>6.6 主服务器mysql权限</h3><p>查看配置的账号能不能在本机上登录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select user,host from user;</span><br><span class="line">+---------------+---------------+</span><br><span class="line">| user          | host          |</span><br><span class="line">+---------------+---------------+</span><br><span class="line">| repl_user     | %             |</span><br><span class="line">| DoubleRel     | 192.168.5.151 |</span><br><span class="line">| mysql.session | localhost     |</span><br><span class="line">| mysql.sys     | localhost     |</span><br><span class="line">| root          | localhost     |</span><br><span class="line">+---------------+---------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"># 看下能不能登录</span><br><span class="line">[root@localhost ~]# mysql -uDoubleRel -proot -h192.168.5.151</span><br></pre></td></tr></table></figure><h2 id="7-参考"><a href="#7-参考" class="headerlink" title="7. 参考"></a>7. 参考</h2><p><code>https://blog.csdn.net/darkangel1228/article/details/80004222</code></p><p><code>https://blog.51cto.com/superpcm/2094958</code></p><p><code>https://blog.csdn.net/darkangel1228/article/details/80003967</code></p><p><code>https://blog.csdn.net/ljw_jiawei/article/details/84188962</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要讲述了MySQL的主从复制与双主互备的作用与好处，并且记录了具体的搭建过程与过程中的常见问题。&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://www.lixueduan.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://www.lixueduan.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>ZooKeeper入门教程(三)---Watcher与分布式锁</title>
    <link href="https://www.lixueduan.com/posts/4975d97e.html"/>
    <id>https://www.lixueduan.com/posts/4975d97e.html</id>
    <published>2019-03-03T14:00:00.000Z</published>
    <updated>2019-03-20T12:42:56.804Z</updated>
    
    <content type="html"><![CDATA[<p>本文讲述了ZooKeeper的watch监听与ZooKeeper分布式锁的实现原理。</p><a id="more"></a><blockquote><p><strong><a href="https://www.lixueduan.com/categories/ZooKeeper/">ZooKeeper入门系列文章目录</a></strong></p><p><a href="https://www.lixueduan.com/posts/137f5008.html">ZooKeeper入门教程(一)—安装与基本使用</a></p><p><a href="https://www.lixueduan.com/posts/3ced5d74.html">ZooKeeper入门教程(二)—原生API与ACL权限认证</a></p><p><a href="https://www.lixueduan.com/posts/4975d97e.html">ZooKeeper入门教程(三)—Watcher与分布式锁</a></p><p>…..</p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-ZooKeeper的watch监听"><a href="#1-ZooKeeper的watch监听" class="headerlink" title="1. ZooKeeper的watch监听"></a>1. ZooKeeper的watch监听</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><p> 在 ZooKeeper 中，引入了 Watcher 机制来实现这种分布式的通知功能。ZooKeeper 允许客户端向服务端注册一个 Watcher 监听，当服务器的一些特定事件触发了这个 Watcher，那么就会向指定客户端发送一个事件通知来实现分布式的通知功能。</p><p> 同样，其watcher是监听数据发送了某些变化，那就一定会有对应的事件类型,<br> 和状态类型。</p><h3 id="1-2-事件类型"><a href="#1-2-事件类型" class="headerlink" title="1.2  事件类型"></a>1.2  事件类型</h3><p>与节点相关。</p><ul><li>EventType.NodeCreated </li><li>EventType.NodeDataChanged </li><li>EventType.NodeChildrenChanged </li><li>EventType.NodeDeleted </li></ul><h3 id="1-3-状态类型"><a href="#1-3-状态类型" class="headerlink" title="1.3 状态类型"></a>1.3 状态类型</h3><p>与客户端实例相关。</p><ul><li>KeeperState.Oisconnected </li><li>KeeperState.SyncConnected </li><li>KeeperState.AuthFailed </li><li>KeeperState.Expired</li></ul><h3 id="1-4-持续监听"><a href="#1-4-持续监听" class="headerlink" title="1.4 持续监听"></a>1.4 持续监听</h3><p>ZooKeeper中有很多个节点，客户端也也可以new多个watcher，会开一个新的线程分别监听不同的节点，当监听的节点发送变化后，客户端就可以收到消息。<br>其中watch可以看成是一个动作，是一次性的，watch一次就只能收到一次监听，节点别修改两次也只能收到第一次的通知。</p><p>两种持续监听方案：</p><ul><li>1.收到变化后将Boolean值手动赋为true，表示下一次还要监听</li><li><p>2.再new一个watcher去监听</p><h3 id="1-5-测试代码"><a href="#1-5-测试代码" class="headerlink" title="1.5 测试代码"></a>1.5 测试代码</h3></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWatch</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException, IOException </span>&#123;</span><br><span class="line">    Watcher watcher = <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">            Event.EventType type = event.getType();</span><br><span class="line">            Event.KeeperState state = event.getState();</span><br><span class="line">            String path = event.getPath();</span><br><span class="line">            <span class="keyword">switch</span> (state) &#123;</span><br><span class="line">                <span class="keyword">case</span> SyncConnected:</span><br><span class="line">                    System.out.println(<span class="string">"state: SyncConnected"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"path: "</span> + path);</span><br><span class="line">                    waitZooKeeperConnOne.countDown();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Disconnected:</span><br><span class="line">                    System.out.println(<span class="string">"state: Disconnected"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"path: "</span> + path);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> AuthFailed:</span><br><span class="line">                    System.out.println(<span class="string">"state: AuthFailed"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"path: "</span> + path);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Expired:</span><br><span class="line">                    System.out.println(<span class="string">"state: Expired"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"path: "</span> + path);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">"state: default"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"------------------------"</span>);</span><br><span class="line">            <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">                <span class="keyword">case</span> None:</span><br><span class="line">                    System.out.println(<span class="string">"type: None"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"path: "</span> + path);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> NodeCreated:</span><br><span class="line">                    System.out.println(<span class="string">"type: NodeCreated"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"path: "</span> + path);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> NodeDataChanged:</span><br><span class="line">                    System.out.println(<span class="string">"type: NodeDataChanged"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"path: "</span> + path);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> DataWatchRemoved:</span><br><span class="line">                    System.out.println(<span class="string">"type: DataWatchRemoved"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"path: "</span> + path);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ChildWatchRemoved:</span><br><span class="line">                    System.out.println(<span class="string">"type:child watch被移除"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"path: "</span> + path);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> NodeChildrenChanged:</span><br><span class="line">                    System.out.println(<span class="string">"type: NodeChildrenChanged"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"path: "</span> + path);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> NodeDeleted:</span><br><span class="line">                    System.out.println(<span class="string">"type: NodeDeleted"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"path: "</span> + path);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">"type: default"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"------------------------"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    String childPath = <span class="string">"/cloud/test5"</span>;</span><br><span class="line">    String childPath2 = <span class="string">"/cloud/test6"</span>;</span><br><span class="line">    String parentPath = <span class="string">"/cloud"</span>;</span><br><span class="line">    <span class="comment">//创建时watch一次 1次</span></span><br><span class="line">    ZooKeeper z = <span class="keyword">new</span> ZooKeeper(CONN_ADDR, SESSION_TIMEOUT, watcher);</span><br><span class="line">    waitZooKeeperConnOne.await();</span><br><span class="line">    <span class="comment">//这里也watch一次 2次</span></span><br><span class="line">    z.exists(childPath, <span class="keyword">true</span>);</span><br><span class="line">    z.create(childPath, <span class="string">"cloud"</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">    <span class="comment">//watch一下父节点 即/cloud  3次</span></span><br><span class="line">    z.getChildren(parentPath, <span class="keyword">true</span>);</span><br><span class="line">    z.create(childPath2, <span class="string">"cloud"</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">    <span class="comment">//再watch一次子节点  4次</span></span><br><span class="line">    z.exists(childPath, <span class="keyword">true</span>);</span><br><span class="line">    z.setData(childPath, <span class="string">"a"</span>.getBytes(), -<span class="number">1</span>);</span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-watcher小结"><a href="#1-5-watcher小结" class="headerlink" title="1.5 watcher小结"></a>1.5 watcher小结</h3><p>ZooKeeper 的 Watcher 具有以下几个特性。</p><h4 id="1-一次性"><a href="#1-一次性" class="headerlink" title="1. 一次性"></a>1. 一次性</h4><p>无论是服务端还是客户端，一旦一个 Watcher 被触发，ZooKeeper 都会将其从相应的存储中移除。因此，在 Watcher 的使用上，需要反复注册。这样的设计有效地减轻了服务端的压力。</p><h4 id="2-客户端串行执行"><a href="#2-客户端串行执行" class="headerlink" title="2. 客户端串行执行"></a>2. 客户端串行执行</h4><p>客户端 Watcher 回调的过程是一个串行同步的过程，这为我们保证了顺序，同时，需要注意的一点是，一定不能因为一个 Watcher 的处理逻辑影响了整个客户端的 Watcher 回调，所以，我觉得客户端 Watcher 的实现类要另开一个线程进行处理业务逻辑，以便给其他的 Watcher 调用让出时间。</p><h4 id="3-轻量"><a href="#3-轻量" class="headerlink" title="3. 轻量"></a>3. 轻量</h4><p>WatcherEvent 是 ZooKeeper 整个 Watcher 通知机制的最小通知单元，这个数据结构中只包含三部分内容：通知状态、事件类型和节点路径。也就是说，Watcher 通知非常简单，只会告诉客户端发生了事件，而不会说明事件的具体内容。</p><p>例如针对 NodeDataChanged 事件，ZooKeeper 的Watcher 只会通知客户端指定数据节点的数据内容发生了变更，而对于原始数据以及变更后的新数据都无法从这个事件中直接获取到，而是需要客户端主动重新去获取数据——这也是 ZooKeeper 的 Watcher 机制的一个非常重要的特性。</p><h2 id="2-ZooKeeper分布式锁"><a href="#2-ZooKeeper分布式锁" class="headerlink" title="2. ZooKeeper分布式锁"></a>2. ZooKeeper分布式锁</h2><h3 id="2-1-为什么需要分布式锁"><a href="#2-1-为什么需要分布式锁" class="headerlink" title="2.1 为什么需要分布式锁"></a>2.1 为什么需要分布式锁</h3><p>并发相关的各种锁只能限制当前服务器上只能有一个用户或者线程访问加锁的资源，在单机部署环境下确实是没问题的，但是在有多台服务器的分布式环境下，并发相关的锁就不管用了，Nginx负载均衡将用户请求分到多台服务器上，每台服务器上都会有一个用户能访问到加锁的资源，这样就出现了并发问题，所以为了解决在分布式环境下的并发问题就出现了分布式锁。</p><h3 id="2-2-相关概念"><a href="#2-2-相关概念" class="headerlink" title="2.2 相关概念"></a>2.2 相关概念</h3><h4 id="1-有序节点"><a href="#1-有序节点" class="headerlink" title="1. 有序节点"></a>1. 有序节点</h4><p>如果创建的是有序节点，那么zookeeper在生成子节点时会根据当前的子节点数量自动添加整数序号，也就是说如果是第一个创建的子节点，那么生成的子节点为<code>/locker/node-0000000000</code>，下一个节点则为<code>/locker/node-0000000001</code>，依次类推。</p><h4 id="2-临时节点"><a href="#2-临时节点" class="headerlink" title="2. 临时节点"></a>2. 临时节点</h4><p>ZooKeeper的临时节点时本次会话有效，等客户端执行完业务代码后关闭会话，临时节点就自动删除掉了。</p><h4 id="3-事件监听"><a href="#3-事件监听" class="headerlink" title="3. 事件监听"></a>3. 事件监听</h4><p>在读取数据时，我们可以同时对节点设置事件监听，当节点数据或结构变化时，zookeeper会通知客户端。当前zookeeper有如下四种事件:</p><ul><li>1.节点创建</li><li>2.节点删除</li><li>3.节点数据修改</li><li>4.子节点变更</li></ul><p>就是上一篇文章中讲的watcher。</p><h3 id="2-3-分布式锁"><a href="#2-3-分布式锁" class="headerlink" title="2.3 分布式锁"></a>2.3 分布式锁</h3><h4 id="1-独占锁"><a href="#1-独占锁" class="headerlink" title="1. 独占锁"></a>1. 独占锁</h4><p>对于独占锁，我们可以将资源 R1 看做是 lock 节点，操作 O1 访问资源 R1 看做创建 lock 节点，释放资源 R1 看做删除 lock 节点。这样我们就将独占锁的定义对应于具体的 Zookeeper 节点结构，通过创建 lock 节点获取锁，删除节点释放锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root </span><br><span class="line">-exclusive_locak</span><br><span class="line">---lock</span><br></pre></td></tr></table></figure><p>详细的过程如下： </p><ol><li>多个客户端竞争创建 lock 临时节点</li><li>其中某个客户端成功创建 lock 节点，其他客户端对 lock 节点设置 watcher</li><li>持有锁的客户端删除 lock 节点或该客户端崩溃，会话关闭，由 Zookeeper 删除 lock 节点</li><li>其他客户端获得 lock 节点被删除的通知</li><li>重复上述4个步骤，直至无客户端在等待获取锁了</li></ol><h4 id="2-读写锁"><a href="#2-读写锁" class="headerlink" title="2. 读写锁"></a>2. 读写锁</h4><p>读写锁包含一个读锁和写锁，操作 O1 对资源 R1 加读锁，且获得了锁，其他操作可同时对资源 R1 设置读锁，进行共享读操作。如果操作 O1 对资源 R1 加写锁，且获得了锁，其他操作再对资源 R1 设置不同类型的锁都会被阻塞。总结来说，读锁具有共享性，而写锁具有排他性。 </p><p>在 Zookeeper 中，由于读写锁和独占锁的节点结构不同，读写锁的客户端不用再去竞争创建 lock 节点。所以在一开始，所有的客户端都会创建自己的锁节点。如果不出意外，所有的锁节点都能被创建成功，此时锁节点结构如图3所示。之后，客户端从 Zookeeper 端获取 /share_lock 下所有的子节点，并判断自己能否获取锁。如果客户端创建的是读锁节点，获取锁的条件（满足其中一个即可）如下：</p><ol><li>自己创建的节点序号排在所有其他子节点前面</li><li>自己创建的节点前面无写锁节点</li></ol><p>如果客户端创建的是写锁节点，由于写锁具有排他性。所以获取锁的条件要简单一些，只需确定自己创建的锁节点是否排在其他子节点前面即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root </span><br><span class="line">-share_lock</span><br><span class="line">---host1-R-<span class="number">0000000001</span></span><br><span class="line">---host2-R-<span class="number">0000000002</span></span><br><span class="line">    ---host3-R-<span class="number">0000000003</span></span><br></pre></td></tr></table></figure><p>详细的流程如下：</p><ol><li>所有客户端创建自己的锁节点</li><li>从 Zookeeper 端获取 /share_lock 下所有的子节点</li><li>判断自己创建的锁节点是否可以获取锁，如果可以，持有锁。否则<strong>对自己关心的锁节点设置 watcher</strong></li><li>持有锁的客户端删除自己的锁节点，某个客户端收到该节点被删除的通知，并获取锁</li><li>重复步骤4，直至无客户端在等待获取锁了</li></ol><p><code>host2-R-0000000002</code> 对应的客户端 <code>C2</code> 只需监视 <code>host1-W-0000000001</code> 节点是否被删除即可。而 <code>host3-W-0000000003</code> 对应的客户端 <code>C3</code> 只需监视 <code>host2-R-0000000002</code> 节点是否被删除即可，只有 <code>host2-R-0000000002</code> 节点被删除，客户端 <code>C3</code> 才能获取锁。而 <code>host1-W-0000000001</code> 节点被删除时，产生的通知对于客户端 C3 来说是无用的，即使客户端 C3 响应了通知也没法获取锁。</p><p>这里总结一下，<strong>不同客户端关心的锁节点是不同的。如果客户端创建的是读锁节点，那么客户端只需找出比读锁节点序号小的最后一个的写锁节点，并设置 watcher 即可。而如果是写锁节点，则更简单，客户端仅需对该节点的上一个节点设置 watcher 即可</strong>。</p><h3 id="2-4-例子"><a href="#2-4-例子" class="headerlink" title="2.4 例子"></a>2.4 例子</h3><p>ZooKeeper可以通过依赖于临时节点实现分布式锁。<br>假设有两台服务器 一台8888 一台8889，都部署了同一个web程序。</p><p>此刻同时来了两个请求 一个被分到了8888服务器，一个被分到了8889服务器上。<br>两个请求都要去修改数据库中的User表里的ID 为666的用户的信息(例如都是把age属性+1 假设当前age为22）</p><p><strong>没加锁前</strong>：<br> 用户A查询到age为22 ++后变成23<br> 用户B也查询到是22  ++后也变成23<br> 其中这里两个++后应该变成24的，由于没加锁出现了数据异常</p><p><strong>加锁后</strong> ：<br> 用户A先在ZooKeeper中创建临时有序节点假设为<code>/locker/node-0000000009</code>，创建之后会<code>getChildren</code>查看<code>/locker</code>节点下的所有子节点，如果自己的编号是最小的，说明自己是最先创建的，则获取到了锁，如果不是就等待前面的节点被自动删除(即前面的用户释放了锁)。<br>此时用户B也来访问，也要临时有序节点，假设为<code>/locker/node-00000000010</code>，接着<code>getChildren</code>查看<code>/locker</code>节点下的所有子节点，发现自己不是最小的，那么就会等待在这里。<br> 最终A和B只有一个人能成功创建节点并修改数据，<br>A获取到锁后开始执行业务代码，那么A将age ++后变成23了 然后数据库持久化 8888中的age就是23了 8889中还是22<br> 接着服务器8888和8889之间执行进行数据同步 同步成功后A关闭会话，临时节点失效，锁释放了。</p><p>此时B用户创建的节点是最小的，就获取到了锁，开始执行业务代码，去修改数据 此时获取到age=23  ++后变成了24 持久化后 再次进行8888 8889服务期间进行数据同步。<br> 这样就不会出现数据异常。</p><p> 问题：为什么要用临时节点，创建持久化节点然后执行完后删除不行吗？<br> 答：临时节点性能高</p><h2 id="3-参考"><a href="#3-参考" class="headerlink" title="3. 参考"></a>3. 参考</h2><p><code>https://blog.csdn.net/qiangcuo6087/article/details/79067136</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文讲述了ZooKeeper的watch监听与ZooKeeper分布式锁的实现原理。&lt;/p&gt;
    
    </summary>
    
      <category term="ZooKeeper" scheme="https://www.lixueduan.com/categories/ZooKeeper/"/>
    
    
      <category term="ZooKeeper" scheme="https://www.lixueduan.com/tags/ZooKeeper/"/>
    
  </entry>
  
  <entry>
    <title>ZooKeeper入门教程(二)---原生API与ACL权限认证</title>
    <link href="https://www.lixueduan.com/posts/3ced5d74.html"/>
    <id>https://www.lixueduan.com/posts/3ced5d74.html</id>
    <published>2019-03-02T14:00:00.000Z</published>
    <updated>2019-03-10T02:56:24.003Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录了ZooKeeper原生API的基本使用和ZooKeeper的ACL权限认证说明。</p><a id="more"></a><blockquote><p><strong><a href="https://www.lixueduan.com/categories/ZooKeeper/">ZooKeeper入门系列文章目录</a></strong></p><p><a href="https://www.lixueduan.com/posts/137f5008.html">ZooKeeper入门教程(一)—安装与基本使用</a></p><p><a href="https://www.lixueduan.com/posts/3ced5d74.html">ZooKeeper入门教程(二)—原生API与ACL权限认证</a></p><p><a href="https://www.lixueduan.com/posts/4975d97e.html">ZooKeeper入门教程(三)—Watcher与分布式锁</a></p><p>…..</p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-原生API"><a href="#1-原生API" class="headerlink" title="1. 原生API"></a>1. 原生API</h2><h3 id="1-1-引入依赖"><a href="#1-1-引入依赖" class="headerlink" title="1.1 引入依赖"></a>1.1 引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--zookeeper--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4-beta<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-代码示例"><a href="#1-2-代码示例" class="headerlink" title="1.2 代码示例"></a>1.2 代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> zookeeper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.AsyncCallback;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.CreateMode;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooDefs;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.data.Stat;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZooKeeperBase</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ZooKeeper地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String CONN_ADDR = <span class="string">"192.168.5.154:2181,192.168.5.155:2181,192.168.5.156:2181"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * session超时时间ms</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SESSION_TIMEOUT = <span class="number">5000</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * wait for zk connect</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> CountDownLatch waitZooKeeperConnOne = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> ZooKeeper zooKeeper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * zk客户端</span></span><br><span class="line"><span class="comment">         * 参数1 connectString 连接服务器列表，用逗号分隔</span></span><br><span class="line"><span class="comment">         * 参数2 sessionTimeout 心跳检测时间周期 毫秒</span></span><br><span class="line"><span class="comment">         * 参数3 watcher 事件处理通知器</span></span><br><span class="line"><span class="comment">         * 参数4 canBeReadOnly 标识当前会话是否支持只读</span></span><br><span class="line"><span class="comment">         * 参数5 6 sessionId sessionPassword通过这两个确定唯一一台客户端 目的是提供重复会话</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        zooKeeper = <span class="keyword">new</span> ZooKeeper(CONN_ADDR, SESSION_TIMEOUT, <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent watchedEvent)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//获取事件状态与类型</span></span><br><span class="line">                Event.KeeperState state = watchedEvent.getState();</span><br><span class="line">                Event.EventType type = watchedEvent.getType();</span><br><span class="line">                <span class="comment">//如果是建立连接成功</span></span><br><span class="line">                <span class="keyword">if</span> (Event.KeeperState.SyncConnected == state) &#123;</span><br><span class="line">                    <span class="comment">//刚连接成功什么都没有所以是None</span></span><br><span class="line">                    <span class="keyword">if</span> (Event.EventType.None == type) &#123;</span><br><span class="line">                        <span class="comment">//连接成功则发送信号 让程序继续执行</span></span><br><span class="line">                        waitZooKeeperConnOne.countDown();</span><br><span class="line">                        System.out.println(<span class="string">"ZK 连接成功"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreate</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException, KeeperException </span>&#123;</span><br><span class="line">        waitZooKeeperConnOne.await();</span><br><span class="line">        System.out.println(<span class="string">"zk start"</span>);</span><br><span class="line">        <span class="comment">//创建简介</span></span><br><span class="line">        <span class="comment">// 参数1 key</span></span><br><span class="line">        <span class="comment">// 参数2 value  参数3 一般就是ZooDefs.Ids.OPEN_ACL_UNSAFE</span></span><br><span class="line">        <span class="comment">// 参数4 为节点模式 有临时节点(本次会话有效，分布式锁就是基于临时节点)或者持久化节点</span></span><br><span class="line">        <span class="comment">// 返回值就是path 节点已存在则报错NodeExistsException</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同步方式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数1 path 可以看成是key  原生Api不能递归创建 不能在没父节点的情况下创建子节点的，会抛出异常</span></span><br><span class="line"><span class="comment"> *     框架封装也是通过if一层层判断的 如果父节点没有 就先给你创建出来 这样实现的递归创建</span></span><br><span class="line"><span class="comment"> * 参数2 data 可以看成是value 要求是字节数组 也就是说不支持序列化</span></span><br><span class="line"><span class="comment"> *      如果要序列化可以使用一些序列化框架 Hessian Kryo等</span></span><br><span class="line"><span class="comment"> * 参数3 节点权限 使用ZooDefs.Ids.OPEN_ACL_UNSAFE开放权限即可</span></span><br><span class="line"><span class="comment"> *      在权限没有太高要求的场景下 没必要关注</span></span><br><span class="line"><span class="comment"> * 参数4  节点类型 创建节点的类型 提供了多种类型</span></span><br><span class="line"><span class="comment"> *             CreateMode.PERSISTENT     持久节点</span></span><br><span class="line"><span class="comment"> *             CreateMode.PERSISTENT_SEQUENTIAL  持久顺序节点</span></span><br><span class="line"><span class="comment"> *             CreateMode.EPHEMERAL       临时节点</span></span><br><span class="line"><span class="comment"> *             CreateMode.EPHEMERAL_SEQUENTIAL   临时顺序节点</span></span><br><span class="line"><span class="comment"> *             CreateMode.CONTAINER</span></span><br><span class="line"><span class="comment"> *             CreateMode.PERSISTENT_WITH_TTL</span></span><br><span class="line"><span class="comment"> *             CreateMode.PERSISTENT_SEQUENTIAL_WITH_TTL</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//        String s = zooKeeper.create("/illusory", "test".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span></span><br><span class="line">        <span class="comment">//illusory</span></span><br><span class="line"><span class="comment">//        System.out.println(s);</span></span><br><span class="line">        <span class="comment">//原生Api不能递归创建 不能在没父节点的情况下创建子节点的</span></span><br><span class="line">        <span class="comment">//框架封装也是同过if判断的 如果父节点没有 就先给你创建出来 这样实现的递归创建</span></span><br><span class="line"><span class="comment">//        zooKeeper.create("/illusory/testz/zzz", "testzz".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span></span><br><span class="line"><span class="comment">//        System.out.println();</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异步方式</span></span><br><span class="line"><span class="comment"> * 在同步基础上多加两个参数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数5 注册一个回调函数 要实现AsyncCallback.Create2Callback()重写processResult(int rx, String path, Object ctx, String name, Stat stat)方法</span></span><br><span class="line"><span class="comment"> *   processResult参数1  int rx为服务端响应码 0表示调用成功 -4表示端口连接 -110表示指定节点存在 -112表示会话已过期</span></span><br><span class="line"><span class="comment"> *                参数2 String path 节点调用时传入Api的数据节点路径</span></span><br><span class="line"><span class="comment"> *                参数3 Object ctx 调用接口时传入的ctx值</span></span><br><span class="line"><span class="comment"> *                参数4 String name 实际在服务器创建节点的名称</span></span><br><span class="line"><span class="comment"> *                参数5 Stat stat 被创建的那个节点信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">        zooKeeper.create(<span class="string">"/illusory/testz/zzz/zzz/aa"</span>, <span class="string">"testzz"</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT</span><br><span class="line">                , (rc, path, ctx, name, stat) -&gt; &#123;</span><br><span class="line">                    System.out.println(stat.getAversion());</span><br><span class="line">                    System.out.println(rc);</span><br><span class="line">                    System.out.println(path);</span><br><span class="line">                    System.out.println(ctx);</span><br><span class="line">                &#125;, <span class="string">"s"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"继续执行"</span>);</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] data = zooKeeper.getData(<span class="string">"/illusory"</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(data));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">        waitZooKeeperConnOne.await();</span><br><span class="line"><span class="comment">//        zooKeeper.create("/illusory","root".getBytes(),ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span></span><br><span class="line"><span class="comment">//        zooKeeper.create("/illusory/aaa","aaa".getBytes(),ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span></span><br><span class="line"><span class="comment">//        zooKeeper.create("/illusory/bbb","aaa".getBytes(),ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span></span><br><span class="line"><span class="comment">//        zooKeeper.create("/illusory/ccc","aaa".getBytes(),ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span></span><br><span class="line">        <span class="comment">//不支持递归 只能取下面的一层</span></span><br><span class="line">        List&lt;String&gt; children = zooKeeper.getChildren(<span class="string">"/illusory"</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : children) &#123;</span><br><span class="line">            <span class="comment">//拼接绝对路径</span></span><br><span class="line">            String realPath = <span class="string">"/illusory/"</span> + s;</span><br><span class="line">            <span class="keyword">byte</span>[] data = zooKeeper.getData(realPath, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(data));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSet</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">        waitZooKeeperConnOne.await();</span><br><span class="line">        zooKeeper.setData(<span class="string">"/illusory/aaa"</span>, <span class="string">"new AAA"</span>.getBytes(), -<span class="number">1</span>);</span><br><span class="line">        zooKeeper.setData(<span class="string">"/illusory/bbb"</span>, <span class="string">"new BBB"</span>.getBytes(), -<span class="number">1</span>);</span><br><span class="line">        zooKeeper.setData(<span class="string">"/illusory/ccc"</span>, <span class="string">"new CCC"</span>.getBytes(), -<span class="number">1</span>);</span><br><span class="line">        testGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">        waitZooKeeperConnOne.await();</span><br><span class="line">        zooKeeper.delete(<span class="string">"/illusory/aaa"</span>, -<span class="number">1</span>);</span><br><span class="line">        testGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExists</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">        waitZooKeeperConnOne.await();</span><br><span class="line">        <span class="comment">//判断节点是否存在 没有就是null 有的话会返回一长串12884901923,12884901933,1552027900801,1552028204414,1,0,0,0,7,0,12884901923</span></span><br><span class="line">        Stat exists = zooKeeper.exists(<span class="string">"/illusory/bbb"</span>, <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(exists);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-ACL权限认证"><a href="#2-ACL权限认证" class="headerlink" title="2. ACL权限认证"></a>2. ACL权限认证</h2><h3 id="2-1-为什么需要ACL"><a href="#2-1-为什么需要ACL" class="headerlink" title="2.1 为什么需要ACL"></a>2.1 为什么需要ACL</h3><p>简单来说 :在通常情况下,zookeeper允许未经授权的访问,因此在安全漏洞扫 描中暴漏未授权访问漏洞。<br> 这在一些监控很严的系统中是不被允许的,所以需要ACL来控制权限.</p><h3 id="2-2-Zookeeper权限分类"><a href="#2-2-Zookeeper权限分类" class="headerlink" title="2.2 Zookeeper权限分类"></a>2.2 Zookeeper权限分类</h3><p> 权限包括以下几种:</p><ul><li><p><strong>CREATE</strong>: 能创建子节点</p></li><li><p><strong>READ</strong>：能获取节点数据和列出其子节点</p></li><li><strong>WRITE</strong>: 能设置节点数据</li><li><strong>DELETE</strong>: 能删除子节点</li><li><strong>ADMIN</strong>: 能设置权限</li></ul><h3 id="2-3-zookeeper认证方式"><a href="#2-3-zookeeper认证方式" class="headerlink" title="2.3 zookeeper认证方式"></a>2.3 zookeeper认证方式</h3><ul><li><strong>world</strong>：默认方式，相当于全世界都能访问</li><li><strong>auth</strong>：代表已经认证通过的用户(cli中可以通过addauth digest user:pwd 来添加当前上下文中的授权用户)</li><li><strong>digest</strong>：即用户名:密码这种方式认证，这也是业务系统中最常用的</li><li><strong>ip</strong>：使用IP地址认证</li></ul><p>一般常用的是<code>digest</code>或者<code>ip</code>这两种。</p><h3 id="2-4-代码示例"><a href="#2-4-代码示例" class="headerlink" title="2.4 代码示例"></a>2.4 代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAuth</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException, IOException </span>&#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 测试路径</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">final</span> String Path = <span class="string">"/testAuth"</span>;</span><br><span class="line">     <span class="keyword">final</span> String pathDel = <span class="string">"/testAuth/delNode"</span>;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 认证类型</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">final</span> String authType = <span class="string">"digest"</span>;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 正确的key</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">final</span> String rightAuth = <span class="string">"123456"</span>;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 错误的key</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">final</span> String badAuth = <span class="string">"654321"</span>;</span><br><span class="line">     ZooKeeper z1 = <span class="keyword">new</span> ZooKeeper(CONN_ADDR, SESSION_TIMEOUT, <span class="keyword">null</span>);</span><br><span class="line">     </span><br><span class="line">     <span class="comment">//添加认证信息 类型和key   以后执行操作时必须带上一个相同的key才行</span></span><br><span class="line">     z1.addAuthInfo(authType, rightAuth.getBytes());</span><br><span class="line">     <span class="comment">//把所有的权限放入集合中，这样不管操作什么权限的节点都需要认证才行</span></span><br><span class="line">     List&lt;ACL&gt; acls = <span class="keyword">new</span> ArrayList&lt;&gt;(ZooDefs.Ids.CREATOR_ALL_ACL);</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         zooKeeper.create(Path, <span class="string">"xxx"</span>.getBytes(), acls, CreateMode.PERSISTENT);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         System.out.println(<span class="string">"创建节点，抛出异常： "</span> + e.getMessage());</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">     ZooKeeper z2 = <span class="keyword">new</span> ZooKeeper(CONN_ADDR, SESSION_TIMEOUT, <span class="keyword">null</span>);</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 未授权</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//未授权客户端操作时抛出异常</span></span><br><span class="line">         <span class="comment">//NoAuthException: KeeperErrorCode = NoAuth for /testAuth</span></span><br><span class="line">         z2.getData(Path, <span class="keyword">false</span>, <span class="keyword">new</span> Stat());</span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         System.out.println(<span class="string">"未授权：操作失败，抛出异常： "</span> + e.getMessage());</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 错误授权信息</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">         ZooKeeper z3 = <span class="keyword">new</span> ZooKeeper(CONN_ADDR, SESSION_TIMEOUT, <span class="keyword">null</span>);</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//添加错误授权信息后再次执行</span></span><br><span class="line">         z3.addAuthInfo(authType, badAuth.getBytes());</span><br><span class="line">         <span class="comment">//NoAuthException: KeeperErrorCode = NoAuth for /testAuth</span></span><br><span class="line">         z3.getData(Path, <span class="keyword">false</span>, <span class="keyword">new</span> Stat());</span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         System.out.println(<span class="string">"错误授权信息：操作失败，抛出异常： "</span> + e.getMessage());</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 正确授权信息</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     ZooKeeper z4 = <span class="keyword">new</span> ZooKeeper(CONN_ADDR, SESSION_TIMEOUT, <span class="keyword">null</span>);</span><br><span class="line">     <span class="comment">//添加正确授权信息后再次执行</span></span><br><span class="line">     z4.addAuthInfo(authType, rightAuth.getBytes());</span><br><span class="line">     <span class="keyword">byte</span>[] data = z4.getData(Path, <span class="keyword">false</span>, <span class="keyword">new</span> Stat());</span><br><span class="line">     System.out.println(<span class="string">"正确授权信息：再次操作成功获取到数据："</span> + <span class="keyword">new</span> String(data));</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="3-参考"><a href="#3-参考" class="headerlink" title="3. 参考"></a>3. 参考</h2><p><code>https://mulingya.iteye.com/blog/2425990</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录了ZooKeeper原生API的基本使用和ZooKeeper的ACL权限认证说明。&lt;/p&gt;
    
    </summary>
    
      <category term="ZooKeeper" scheme="https://www.lixueduan.com/categories/ZooKeeper/"/>
    
    
      <category term="ZooKeeper" scheme="https://www.lixueduan.com/tags/ZooKeeper/"/>
    
  </entry>
  
  <entry>
    <title>ZooKeeper入门教程(一)---安装与基本使用</title>
    <link href="https://www.lixueduan.com/posts/137f5008.html"/>
    <id>https://www.lixueduan.com/posts/137f5008.html</id>
    <published>2019-03-01T14:00:00.000Z</published>
    <updated>2019-03-10T02:56:06.233Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要对ZooKeeper做了简要介绍包括设计目标、服务组成、应用场景等，同时记录了Linux下安装ZooKeeper的详细过程，最后还包括了ZooKeeper的基本使用方法。</p><a id="more"></a><blockquote><p><strong><a href="https://www.lixueduan.com/categories/ZooKeeper/">ZooKeeper入门系列文章目录</a></strong></p><p><a href="https://www.lixueduan.com/posts/137f5008.html">ZooKeeper入门教程(一)—安装与基本使用</a></p><p><a href="https://www.lixueduan.com/posts/3ced5d74.html">ZooKeeper入门教程(二)—原生API与ACL权限认证</a></p><p><a href="https://www.lixueduan.com/posts/4975d97e.html">ZooKeeper入门教程(三)—Watcher与分布式锁</a></p><p>…..</p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。</p><p>ZooKeeper的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。</p><p>ZooKeeper包含一个简单的原语集， 提供Java和C的接口。</p><h3 id="1-设计目标"><a href="#1-设计目标" class="headerlink" title="1. 设计目标"></a>1. 设计目标</h3><ul><li>1.简单的数据结构，Zookeeper就是以简单的树形结构来进行相互协调的</li><li>2.可以构建集群，只要集群中超过半数的机器能正常工作，整个集群就能正常对外提供服务。</li><li>3.顺序访问，对于每个客户端的每个请求，zk都会分配一个全局唯一的递增编号，这个编号反应了所有事务操作的先后顺序</li><li>4.高性能，全量数据保存在内存中，并直接服务于所有的非事务请求</li></ul><h3 id="2-服务组成"><a href="#2-服务组成" class="headerlink" title="2. 服务组成"></a>2. 服务组成</h3><p>ZKServer根据身份特性分为三种</p><ul><li>Leader，负责客户端的write类型请求</li><li>Follower,负责客户端的read类型请求</li><li>Observer，特殊的Follower，可以接受客户端的read氢气球，但不参加选举</li></ul><h3 id="3-应用场景"><a href="#3-应用场景" class="headerlink" title="3. 应用场景"></a>3. 应用场景</h3><p>Hadoop、Storm、消息中间件、RPC服务框架、数据库增量订阅与消费组件(MySQL Binlog)、分布式数据库同步系统、淘宝的Otter。</p><p>zookeeper的特性就是在分布式场景下高可用，但是原生的API实现分布式功能非 常困难，团队去实现也太浪费时间，即使实现了也未必稳定。那么可以采用第三方的 客户端的完美实现，比如Curator框架，他是Apache的顶级项目。</p><h4 id="1-配置管理"><a href="#1-配置管理" class="headerlink" title="1. 配置管理"></a>1. 配置管理</h4><p>配置的管理在分布式应用环境中很常见，比如我们在平常的应用系统<br>中，经常会碰到这样的求：如机器的配置列表、运行时的开关配罝、数据库配罝信<br>息等。这些全局配置信息通常具备以下3个特性：<br>1数据量比较小。<br>2数据内容在运行时动态发生变化。<br>3集群中各个集群共享信息，配置一致。</p><h4 id="2-集群管理"><a href="#2-集群管理" class="headerlink" title="2. 集群管理"></a>2. 集群管理</h4><p>Zookeeper不仅能够帮你维护当前的集群中机器的服务状态，而且能<br>够帮你选出一个“总管”，让这个总管来管理集群，这就是Zookeeper的另一个功能<br>Leader，并实现集群容错功能。<br>1希望知道当前集群中宄竞有多少机器工作。<br>2对集群中每天集群的运行时状态进行数据收集。<br>3对集群中每台集群进行上下线操作。</p><h4 id="3-发布与订阅"><a href="#3-发布与订阅" class="headerlink" title="3.发布与订阅"></a>3.发布与订阅</h4><p>Zookeeper是一个典型的发布/订阅模式的分布式数控管理与协调框<br>架，开发人员可以使用它来进行分布式数据的发布与订阅。</p><h4 id="4-数据库切换"><a href="#4-数据库切换" class="headerlink" title="4. 数据库切换"></a>4. 数据库切换</h4><p>比如我们初始化zookeeper的时候读取其节点上的数据库配置文件,<br>当ES—旦发生变更时，zookeeper就能帮助我们把变更的通知发送到各个客户端，<br>每个了互动在接收到这个变更通知后，就可以从新进行最新数据的获取。</p><h4 id="5-分布式日志的收集"><a href="#5-分布式日志的收集" class="headerlink" title="5. 分布式日志的收集"></a>5. 分布式日志的收集</h4><p>我们可以做一个日志系统收集集群中所有的日志信息，进行统 一管理。</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><p>注：Zookeeper集群最低需要3个节点，同时要求服务器间时间保持一致。</p><h3 id="2-1-下载"><a href="#2-1-下载" class="headerlink" title="2.1 下载"></a>2.1 下载</h3><p>官网：<code>https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/</code></p><p>这里下载的是<code>zookeeper-3.4.13.tar.gz</code></p><p>下载后上传到服务器上，习惯放在<code>/usr/software</code>目录下</p><h3 id="2-2-解压"><a href="#2-2-解压" class="headerlink" title="2.2 解压"></a>2.2 解压</h3><p>将Zookeeper解压到<code>/usr/local</code>目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost software]# tar -zxvf zookeeper-3.4.13.tar.gz  -C /usr/local/</span><br></pre></td></tr></table></figure><p>改个名字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost local]# mv zookeeper-3.4.13/ zookeeper</span><br></pre></td></tr></table></figure><h3 id="2-3-配置环境变量"><a href="#2-3-配置环境变量" class="headerlink" title="2.3 配置环境变量"></a>2.3 配置环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost etc]# vim /etc/profile</span><br></pre></td></tr></table></figure><p>添加如下内容：目录按照自己的目录写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ZOOKEEPER_HOME=/usr/local/zookeeper</span><br><span class="line">export PATH=$PATH:$ZOOKEEPER_HOME/bin</span><br></pre></td></tr></table></figure><p>刷新使其生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost etc]# source /etc/profile</span><br></pre></td></tr></table></figure><h3 id="2-4-修改配置文件"><a href="#2-4-修改配置文件" class="headerlink" title="2.4 修改配置文件"></a>2.4 修改配置文件</h3><p>ZooKeeper配置文件在<code>/usr/local/zookeeper/conf/zoo_sample.cfg</code></p><p>首先修改一下名字，改成<code>zoo.cfg</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# mv zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure><p>然后修改配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# vim zoo.cfg</span><br></pre></td></tr></table></figure><p>主要修改如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 保存数据的地方</span><br><span class="line">dataDir=/usr/local/zookeeper/data</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>文件末尾添加下面这些配置</span><br><span class="line"><span class="meta">#</span>server.0 IP </span><br><span class="line">server.0 192.168.1.111:2888:3888</span><br><span class="line">server.1 192.168.1.112:2888:3888</span><br><span class="line">server.2 192.168.1.113:2888:3888</span><br></pre></td></tr></table></figure><h3 id="2-5-配置myid"><a href="#2-5-配置myid" class="headerlink" title="2.5 配置myid"></a>2.5 配置myid</h3><p>然后创建一下上面配置的<code>/usr/local/zookeeper/data</code>目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost zookeeper]# mkdir data</span><br></pre></td></tr></table></figure><p>接着在<code>/usr/local/zookeeper/data</code>目录下创建一个叫<code>myid</code>的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost data]# vim myid</span><br></pre></td></tr></table></figure><p>分别写入一个数字，和上面配置的<code>server.0 192.168.1.111:2888:3888</code>这个对应上。</p><p>即</p><p><code>192.168.1.111</code>上的<code>myid</code>中写入一个数字<code>0</code></p><p><code>192.168.1.112</code>上的<code>myid</code>中写入一个数字<code>1</code></p><p><code>192.168.1.113</code>上的<code>myid</code>中写入一个数字<code>2</code></p><h3 id="2-6-配置详解"><a href="#2-6-配置详解" class="headerlink" title="2.6 配置详解"></a>2.6 配置详解</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">tickTinte： 基本事件服务器之间或客户端与服务器之间维持心跣的时间间隔</span><br><span class="line"></span><br><span class="line">dataDiri：存储内存中数据库快照的位置，顾名思义就是Zookeeper保存数据的目录，默认情況下，Zookeeper将写数据的日志文件也保存在这个目录里，</span><br><span class="line"></span><br><span class="line">clientPorti：这个端口就是客户端连接Zookeeper服务器的端口，Zookeeper会监听这个雄口，接受客户端的访间请求。</span><br><span class="line"></span><br><span class="line">initLimit： 这个配置表示ZooKeeper最大能接受多少个心跳时间间隔，当超过后最大次数后还没收到客户端信息，表明客户端连接失败</span><br><span class="line"></span><br><span class="line">syncLiniiti ：这个配置表明Leader和Follower之间发送消息，请求和应答时间长度，最长不能超多多少个tickTinte</span><br><span class="line"></span><br><span class="line">server.A = B：C：D</span><br><span class="line">A：表示这个是第几号服务器，myid中的数字就是这个</span><br><span class="line">B：这个服务器的IP</span><br><span class="line">C：与集群中的leader交换信息的端口</span><br><span class="line">D：集群中的leader挂了，需要一个端口用来进行选举，选出一个新的leader</span><br></pre></td></tr></table></figure><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h2><h3 id="1-启动"><a href="#1-启动" class="headerlink" title="1. 启动"></a>1. 启动</h3><p>到这里Zookeeper就算配置完成了,可以启动了。</p><p>进入<code>/usr/local/zookeeper/bin</code>目录，可以看到里面有很多脚本文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# ls</span><br><span class="line">README.txt  zkCleanup.sh  zkCli.cmd  zkCli.sh  zkEnv.cmd  zkEnv.sh  zkServer.cmd  zkServer.sh  zkTxnLogToolkit.cmd  zkTxnLogToolkit.sh</span><br></pre></td></tr></table></figure><p>其中<code>zkServer.sh</code>就是服务端操作相关脚本，<code>zkCli.sh</code>这个就是客户端。</p><p>前面配置了环境变量，所以在哪里都可以使用这些脚本，不用非得进到这个文件夹。</p><p>启动服务端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# zkServer.sh start</span><br></pre></td></tr></table></figure><p>查看Zookeeper状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost data]# zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/local/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Mode: leader</span><br></pre></td></tr></table></figure><p>可以已经启动了，而且这是一个<code>leader</code>节点。那么其他两个节点就是<code>follower</code>了。</p><p><strong>问题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error contacting service. It is probably not running.</span><br></pre></td></tr></table></figure><p><strong>解决</strong></p><p>1.<strong>可能是防火墙问题，关闭防火墙</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">临时关闭: systemctl stop firewalld</span><br><span class="line">开机禁用(需要重启生效):systemctl disable firewalld</span><br></pre></td></tr></table></figure><p>2.<strong>myid配置错了，这个必须和配置文件对应上，必须放在配置的那个文件夹下</strong></p><h3 id="2-进入客户端"><a href="#2-进入客户端" class="headerlink" title="2. 进入客户端"></a>2. 进入客户端</h3><p>可以通过shell操作zookeeper,首先进入客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost data]# zkCli.sh</span><br></pre></td></tr></table></figure><p>windows下的可视化工具ZooInspector</p><p>下载地址<code>https://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip</code></p><p>解压后build目录下有个jar包，cmd命令行中通过命令<code>java -jar zookeeper-dev-ZooInspector.jar</code>运行</p><p>idea下也有zookeeper插件。</p><p>常用操作：</p><h3 id="3-查询节点"><a href="#3-查询节点" class="headerlink" title="3. 查询节点"></a>3. 查询节点</h3><p><code>ls path</code>  ZK是一个树形结构 刚创建是跟目录下有个zookeeper节点，zookeeper节点下有个quoat节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 0] ls /</span><br><span class="line">[zookeeper]</span><br><span class="line">[zk: localhost:2181(CONNECTED) 2] ls /zookeeper</span><br><span class="line">[quota]</span><br></pre></td></tr></table></figure><h3 id="4-创建节点"><a href="#4-创建节点" class="headerlink" title="4. 创建节点"></a>4. 创建节点</h3><p><code>create path value</code>  创建节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 5] create /illusory redis</span><br><span class="line">Created /illusory</span><br></pre></td></tr></table></figure><h3 id="5-get-set"><a href="#5-get-set" class="headerlink" title="5. get/set"></a>5. get/set</h3><p><code>get path</code>获取值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 6] get /illusory</span><br><span class="line"><span class="meta">#</span> 值</span><br><span class="line">redis</span><br><span class="line"><span class="meta">#</span> 这个ID就是前面说的那个ID Zk会为所有客户端的每一次操作生成一个全局唯一的ID</span><br><span class="line">cZxid = 0x100000003</span><br><span class="line"><span class="meta">#</span> 创建时间</span><br><span class="line">ctime = Thu Mar 07 23:18:12 CST 2019</span><br><span class="line">mZxid = 0x100000003</span><br><span class="line"><span class="meta">#</span> 修改时间</span><br><span class="line">mtime = Thu Mar 07 23:18:12 CST 2019</span><br><span class="line">pZxid = 0x100000003</span><br><span class="line">cversion = 0</span><br><span class="line"><span class="meta">#</span>数据版本号 每次修改后都会加1</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 5</span><br><span class="line"><span class="meta">#</span> 孩子 子节点</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure><p><code>set path</code> 设置值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 7] set /illusory mysql</span><br><span class="line">cZxid = 0x100000003</span><br><span class="line">ctime = Thu Mar 07 23:18:12 CST 2019</span><br><span class="line">mZxid = 0x100000004</span><br><span class="line">mtime = Thu Mar 07 23:24:10 CST 2019</span><br><span class="line">pZxid = 0x100000003</span><br><span class="line">cversion = 0</span><br><span class="line"><span class="meta">#</span> 可以看到 改变后也加1了</span><br><span class="line">dataVersion = 1</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 5</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure><h3 id="6-删除"><a href="#6-删除" class="headerlink" title="6. 删除"></a>6. 删除</h3><p><code>delete path</code> 只能删除子节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 9] create /illusory/cloud nginx</span><br><span class="line">Created /illusory/cloud</span><br><span class="line">[zk: localhost:2181(CONNECTED) 11] ls /illusory</span><br><span class="line">[cloud]</span><br><span class="line">[zk: localhost:2181(CONNECTED) 12] delete /illusory</span><br><span class="line">Node not empty: /illusory</span><br><span class="line"><span class="meta">#</span> 删除子节点成功</span><br><span class="line">[zk: localhost:2181(CONNECTED) 13] delete /illusory/cloud</span><br></pre></td></tr></table></figure><p><code>rmr path</code>  递归删除父节点也可以删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 15] ls /illusory</span><br><span class="line">[cloud]</span><br><span class="line"><span class="meta">#</span> 递归删除</span><br><span class="line">[zk: localhost:2181(CONNECTED) 16] rmr /illusory</span><br></pre></td></tr></table></figure><p>所有命令列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ZooKeeper -server host:port cmd args</span><br><span class="line">stat path [watch]</span><br><span class="line">set path data [version]</span><br><span class="line">ls path [watch]</span><br><span class="line">delquota [-n|-b] path</span><br><span class="line">ls2 path [watch]</span><br><span class="line">setAcl path acl</span><br><span class="line">setquota -n|-b val path</span><br><span class="line">history </span><br><span class="line">redo cmdno</span><br><span class="line">printwatches on|off</span><br><span class="line">delete path [version]</span><br><span class="line">sync path</span><br><span class="line">listquota path</span><br><span class="line">rmr path</span><br><span class="line">get path [watch]</span><br><span class="line">create [-s] [-e] path data acl</span><br><span class="line">addauth scheme auth</span><br><span class="line">quit </span><br><span class="line">getAcl path</span><br><span class="line">close </span><br><span class="line">connect host:port</span><br></pre></td></tr></table></figure><h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h2><p><code>https://www.cnblogs.com/lsdb/p/7297731.html</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要对ZooKeeper做了简要介绍包括设计目标、服务组成、应用场景等，同时记录了Linux下安装ZooKeeper的详细过程，最后还包括了ZooKeeper的基本使用方法。&lt;/p&gt;
    
    </summary>
    
      <category term="ZooKeeper" scheme="https://www.lixueduan.com/categories/ZooKeeper/"/>
    
    
      <category term="ZooKeeper" scheme="https://www.lixueduan.com/tags/ZooKeeper/"/>
    
  </entry>
  
  <entry>
    <title>Redis入门教程(五)---搭建Redis集群</title>
    <link href="https://www.lixueduan.com/posts/397ed67.html"/>
    <id>https://www.lixueduan.com/posts/397ed67.html</id>
    <published>2019-02-27T14:00:00.000Z</published>
    <updated>2019-03-08T15:33:43.121Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录了Redis集群搭建与使用的详细过程。</p><a id="more"></a><blockquote><p><strong><a href="https://www.lixueduan.com/categories/Redis/">Redis系列教程目录</a></strong></p><p><a href="https://www.lixueduan.com/posts/876962d5.html">Redis入门教程(一)—安装与配置</a></p><p><a href="https://www.lixueduan.com/posts/8380a4fa.html">Redis入门教程(二)—五大基础数据类型与常用命令</a></p><p><a href="https://www.lixueduan.com/posts/5df38113.html">Redis入门教程(三)—安全性、事务、发布订阅</a></p><p><a href="https://www.lixueduan.com/posts/84dd6d72.html">Redis入门教程(四)—主从复制与持久化</a></p><p><a href="https://www.lixueduan.com/posts/397ed67.html">Redis入门教程(五)—搭建Redis集群</a></p><p><a href="https://www.lixueduan.com/posts/e456b1e5.html">Redis入门教程(六)—通过JavaApi(Jedis)操作Redis</a></p><p>…….</p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><blockquote><p>最少要3台机器才能形成集群，同时每个主需要配一个从，即最好6台机器。不过这里也没这么多机器<br>小霸王电脑也开不了6个虚拟机 所以就在一台机器上开6个Redis做个伪集群，真实情况下也差不多是这样配置的</p></blockquote><h2 id="1-创建文件夹"><a href="#1-创建文件夹" class="headerlink" title="1. 创建文件夹"></a>1. 创建文件夹</h2><p>先创建一个文件夹<code>redis-cluster</code>，然后在这个文件夹里分别创建6个文件夹当成6台机器，<code>redis7001</code>、<code>redis7002</code>、<code>redis7003</code>、<code>redis7004</code>、<code>redis7005</code>、<code>redis7006</code>、假装是6台服务器…..</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost etc]# mkdir -p /usr/local/redis-cluster</span><br><span class="line">[root@localhost etc]# cd /usr/local/redis-cluster/</span><br><span class="line">[root@localhost redis-cluster]# mkdir 7001 &amp;&amp; mkdir 7002 &amp;&amp; mkdir 7003 &amp;&amp; mkdir 7004 &amp;&amp; mkdir 7005 &amp;&amp; mkdir 7006</span><br></pre></td></tr></table></figure><h2 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2. 修改配置文件"></a>2. 修改配置文件</h2><p>然后把<code>redis.conf</code>配置文件分别复制到这6个文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 先复制一份 等修改好后再复制到其他地方</span><br><span class="line">[root@localhost redis-5.0.3]# cp redis.conf /usr/local/redis-cluster/7001</span><br></pre></td></tr></table></figure><p>然后修改配置文件<code>redis.conf</code>,主要修改下面这几个地方：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 开启后台启动</span><br><span class="line">1.daemonize yes </span><br><span class="line"><span class="meta">#</span> 端口号改为对应的700*</span><br><span class="line">2.port 7001 </span><br><span class="line"><span class="meta">#</span> 绑定IP 改为当前机器的IP</span><br><span class="line">3.bind 192.168.5.191 </span><br><span class="line"><span class="meta">#</span> 数据存储目录 每台机器必须指向不同的位置 改为对应的700*</span><br><span class="line">4.dir /usr/local/redis-cluster/7001 </span><br><span class="line"><span class="meta">#</span> 开启集群模式</span><br><span class="line">5.cluster-enabled yes </span><br><span class="line"><span class="meta">#</span> 这里最好和port对应700*</span><br><span class="line">6.cluster-config-file nodes-7001.conf </span><br><span class="line"><span class="meta">#</span> 超时时间可以自己调整</span><br><span class="line">7.cluster-node-timeout 5000 </span><br><span class="line"><span class="meta">#</span> 开启AOF持久化</span><br><span class="line">8.appendonly yes</span><br></pre></td></tr></table></figure><p>修改完成后再分别负责到另外5台机器。<strong>复制后记得把需要修改的地方修改一下，port、dir、cluster-config-file</strong></p><h2 id="3-环境准备"><a href="#3-环境准备" class="headerlink" title="3. 环境准备"></a>3. 环境准备</h2><p>到这里6个文件夹的redis.conf配置文件都修改好了，<br>由于Redis集群需要Ruby命令，所以需要安装Ruby。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 7006]# yum install ruby</span><br><span class="line">[root@localhost 7006]# yum install rubygems</span><br><span class="line"><span class="meta">#</span>redis和Ruby的接口</span><br><span class="line">[root@localhost 7006]# gem install redis</span><br></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>可能最后一步出现问题，提示如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis <span class="keyword">requires</span> Ruby version &gt;= <span class="number">2.2</span>.2</span><br></pre></td></tr></table></figure><p>CentOS 默认支持ruby是2.0版本导，redis需要大于2.2.2的版本。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>通过rvm安装最新的ruby即可，具体如下;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 安装curl curl是Linux下的文件传输工具</span><br><span class="line">[root@localhost 7006]# yum install curl</span><br><span class="line"><span class="meta">#</span> 安装rvm RVM是一个命令行工具，可以提供一个便捷的多版本Ruby环境的管理和切换。</span><br><span class="line">[root@localhost 7006]# gpg2 --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB</span><br><span class="line">[root@localhost 7006]# \curl -sSL https://get.rvm.io | bash -s stable</span><br><span class="line"><span class="meta">#</span> 查看一下rvm安装上没有</span><br><span class="line">[root@localhost 7006]# find / -name rvm -print</span><br><span class="line"><span class="meta">#</span>如果出现下面这样的就说明安装上了</span><br><span class="line">　　　　 /usr/local/rvm</span><br><span class="line">　　 　　/usr/local/rvm/src/rvm</span><br><span class="line">　　 　　/usr/local/rvm/src/rvm/bin/rvm</span><br><span class="line">　　 　　/usr/local/rvm/src/rvm/lib/rvm</span><br><span class="line">　　 　　/usr/local/rvm/src/rvm/scripts/rvm</span><br><span class="line">　　 　　/usr/local/rvm/bin/rvm</span><br><span class="line">　　 　　/usr/local/rvm/lib/rvm</span><br><span class="line">　　 　　/usr/local/rvm/scripts/rvm</span><br><span class="line"><span class="meta">#</span> 使rvm配置文件生效　 　　</span><br><span class="line">[root@localhost 7006]# source /usr/local/rvm/scripts/rvm</span><br><span class="line"><span class="meta">#</span> 查看rvm库中已知的ruby版本</span><br><span class="line">[root@localhost 7006]# rvm list known</span><br><span class="line"><span class="meta">#</span> 大概会向这样 当前最新的时2.6</span><br><span class="line"><span class="meta">#</span> MRI Rubies</span><br><span class="line">[ruby-]1.8.6[-p420]</span><br><span class="line">[ruby-]1.8.7[-head] # security released on head</span><br><span class="line">[ruby-]1.9.1[-p431]</span><br><span class="line">[ruby-]1.9.2[-p330]</span><br><span class="line">[ruby-]1.9.3[-p551]</span><br><span class="line">[ruby-]2.0.0[-p648]</span><br><span class="line">[ruby-]2.1[.10]</span><br><span class="line">[ruby-]2.2[.10]</span><br><span class="line">[ruby-]2.3[.8]</span><br><span class="line">[ruby-]2.4[.5]</span><br><span class="line">[ruby-]2.5[.3]</span><br><span class="line">[ruby-]2.6[.0]</span><br><span class="line">ruby-head</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>安装ruby2.6.0  这里需要等一会 下载之后还要等编译完...</span><br><span class="line">[root@localhost 7006]# rvm install 2.6.0</span><br><span class="line"><span class="meta">#</span>使用ruby2.6.0</span><br><span class="line">[root@localhost 7006]# rvm use 2.6.0</span><br><span class="line"><span class="meta">#</span>设置ruby默认版本</span><br><span class="line">[root@localhost 7006]# rvm use 2.6.0 --default</span><br><span class="line"><span class="meta">#</span>查看ruby版本 </span><br><span class="line">[root@localhost 7006]# ruby --version</span><br><span class="line"><span class="meta">#</span> 继续安装Redis</span><br><span class="line">[root@localhost 7006]# gem install redis</span><br></pre></td></tr></table></figure><h2 id="4-启动Redis"><a href="#4-启动Redis" class="headerlink" title="4. 启动Redis"></a>4. 启动Redis</h2><p>分别启动6个Redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 分别启动6个Redis</span><br><span class="line">[root@localhost 7006]# /usr/local/redis/bin/redis-server /usr/local/redis-cluster/7001/redis.conf</span><br><span class="line">[root@localhost 7006]# /usr/local/redis/bin/redis-server /usr/local/redis-cluster/7002/redis.conf</span><br><span class="line">[root@localhost 7006]# /usr/local/redis/bin/redis-server /usr/local/redis-cluster/7003/redis.conf</span><br><span class="line">[root@localhost 7006]# /usr/local/redis/bin/redis-server /usr/local/redis-cluster/7004/redis.conf</span><br><span class="line">[root@localhost 7006]# /usr/local/redis/bin/redis-server /usr/local/redis-cluster/7005/redis.conf</span><br><span class="line">[root@localhost 7006]# /usr/local/redis/bin/redis-server /usr/local/redis-cluster/7006/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>查看一下启动成功没</span><br><span class="line">[root@localhost redis-cluster]# ps aux|grep redis</span><br><span class="line">root      16205  0.1  0.2 159512  2604 ?        Ssl  14:08   0:16 /usr/local/redis/bin/redis-server 0.0.0.0:6379</span><br><span class="line">root      35225  0.2  0.2 153880  2836 ?        Ssl  16:22   0:00 /usr/local/redis/bin/redis-server 192.168.5.154:7001 [cluster]</span><br><span class="line">root      35388  0.2  0.2 153880  2836 ?        Ssl  16:24   0:00 /usr/local/redis/bin/redis-server 192.168.5.154:7002 [cluster]</span><br><span class="line">root      35398  0.1  0.2 153880  2832 ?        Ssl  16:24   0:00 /usr/local/redis/bin/redis-server 192.168.5.154:7003 [cluster]</span><br><span class="line">root      35407  0.1  0.2 153880  2836 ?        Ssl  16:25   0:00 /usr/local/redis/bin/redis-server 192.168.5.154:7004 [cluster]</span><br><span class="line">root      35415  0.1  0.2 153880  2836 ?        Ssl  16:25   0:00 /usr/local/redis/bin/redis-server 192.168.5.154:7005 [cluster]</span><br><span class="line">root      35424  0.1  0.2 153880  2832 ?        Ssl  16:25   0:00 /usr/local/redis/bin/redis-server 192.168.5.154:7006 [cluster]</span><br><span class="line">root      35468  0.0  0.0 112708   976 pts/1    R+   16:25   0:00 grep --color=auto redis</span><br><span class="line"><span class="meta">#</span> ok的</span><br></pre></td></tr></table></figure><h2 id="5-创建集群"><a href="#5-创建集群" class="headerlink" title="5. 创建集群"></a>5. 创建集群</h2><h4 id="5-0之前的方式"><a href="#5-0之前的方式" class="headerlink" title="5.0之前的方式"></a>5.0之前的方式</h4><p>进入redis安装目录<code>/usr/local/redis-5.0.3/src</code>找到<code>redis-trib.rb</code>脚本,这就是redis集群相关操作的脚本，是ruby写的.<br>执行命令创建集群</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 解释： </span><br><span class="line"><span class="meta">#</span> ./redis-trib.rb 即redis集群操作脚本 </span><br><span class="line"><span class="meta">#</span> create 即创建集群</span><br><span class="line"><span class="meta">#</span> --replicas  即配置 后面一长串都是集群配置</span><br><span class="line"><span class="meta">#</span> 1  这个1是redis主从比例 主机三台 从机三台 主/--&gt; 3/3 即 1</span><br><span class="line"><span class="meta">#</span> 后面的6台机器中 会根据配置的比例把前面的几台(这里是3台)做为主，后面的做为从</span><br><span class="line"><span class="meta">#</span> 然后主节点中的第一个对应的一定是从节点中的第一个 依次排下去这里就是7001 对应7004</span><br><span class="line">[root@localhost src]# ./redis-trib.rb create --replicas 1 192.168.5.154:7001 192.168.5.154:7002 </span><br><span class="line"> 192.168.5.154:7003 192.168.5.154:7004 192.168.5.154:7005 192.168.5.154:7006</span><br></pre></td></tr></table></figure><h4 id="5-0之后的方式"><a href="#5-0之后的方式" class="headerlink" title="5.0之后的方式"></a>5.0之后的方式</h4><p>Redis 5.0 版本，放弃了Ruby的集群方式，改为使用C语言编写的 redis-cli的方式，使集群的构建方式复杂度大大降低。<br>命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 参数的含义和上面也是一样的</span><br><span class="line"><span class="meta">#</span>create 即创建集群</span><br><span class="line"><span class="meta">#</span> --replicas  即配置 后面一长串都是集群配置</span><br><span class="line"><span class="meta">#</span> 1  这个1是redis主从比例 主机三台 从机三台 主/--&gt; 3/3 即 1</span><br><span class="line"><span class="meta">#</span> 后面的6台机器中 会根据配置的比例把前面的几台(这里是3台)做为主，后面的做为从</span><br><span class="line"><span class="meta">#</span> 然后主节点中的第一个对应的一定是从节点中的第一个 依次排下去这里就是7001 对应7004</span><br><span class="line"></span><br><span class="line">[root@localhost src]# redis-cli --cluster create 192.168.5.154:7001 192.168.5.154:7002 </span><br><span class="line">192.168.5.154:7003 192.168.5.154:7004 192.168.5.154:7005 192.168.5.154:7006 --cluster-replicas 1</span><br><span class="line"><span class="meta">#</span> 接下来会询问是否设置 输入yes即可</span><br><span class="line">Can I set the above configuration? (type 'yes' to accept): yes</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; Performing Cluster Check (using node 192.168.5.154:7001)</span><br><span class="line">M: 092694ff8d9a2fef0df632af1650653b6756efd5 192.168.5.154:7001</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 1c465b386313dbe47fbdea93775a9ef249b8e5ae 192.168.5.154:7004</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 092694ff8d9a2fef0df632af1650653b6756efd5</span><br><span class="line">M: 1c3f76d0f78d378f6413a66b7df0092b3f5be7ea 192.168.5.154:7002</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 80694351fa024c34316ffc443a3e25a5e99132cf 192.168.5.154:7005</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 1c3f76d0f78d378f6413a66b7df0092b3f5be7ea</span><br><span class="line">S: 35eeed488e23f852520df69cdac3dfcb0001c7cf 192.168.5.154:7006</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 74fde96cb2cd794f0c15d26366641ce9afc34946</span><br><span class="line">M: 74fde96cb2cd794f0c15d26366641ce9afc34946 192.168.5.154:7003</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 到这里集群就搭建好了 其中 slots:[0-5460] (5461 slots) 表示槽 </span><br><span class="line"><span class="meta">#</span> 可以发现只有master有 slave没有 因为slave是不支持写的 只能读</span><br></pre></td></tr></table></figure><h2 id="6-测试"><a href="#6-测试" class="headerlink" title="6. 测试"></a>6. 测试</h2><p>到此为止，集群已经搭建成功，进行验证。<br>连接随便一个客户端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -c 表示集群模式 -h 主机名 -p 端口号</span><br><span class="line">[root@localhost bin]# /usr/local/redis/bin/reids-cli -c -h 192.168.5.154 -p 7001</span><br></pre></td></tr></table></figure><p><strong>检测</strong><br><code>cluster nodes</code>查看集群信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# /usr/local/redis/bin/redis-cli -c -h 192.168.5.154 -p 7001</span><br><span class="line">192.168.5.154:7001&gt; cluster nodes</span><br><span class="line">1c465b386313dbe47fbdea93775a9ef249b8e5ae 192.168.5.154:7004@17004 slave 092694ff8d9a2fef0df632af1650653b6756efd5 0 1551948999244 4 connected</span><br><span class="line">092694ff8d9a2fef0df632af1650653b6756efd5 192.168.5.154:7001@17001 myself,master - 0 1551948997000 1 connected 0-5460</span><br><span class="line">1c3f76d0f78d378f6413a66b7df0092b3f5be7ea 192.168.5.154:7002@17002 master - 0 1551948997000 2 connected 5461-10922</span><br><span class="line">80694351fa024c34316ffc443a3e25a5e99132cf 192.168.5.154:7005@17005 slave 1c3f76d0f78d378f6413a66b7df0092b3f5be7ea 0 1551948998236 5 connected</span><br><span class="line">35eeed488e23f852520df69cdac3dfcb0001c7cf 192.168.5.154:7006@17006 slave 74fde96cb2cd794f0c15d26366641ce9afc34946 0 1551948997226 6 connected</span><br><span class="line">74fde96cb2cd794f0c15d26366641ce9afc34946 192.168.5.154:7003@17003 master - 0 1551948999000 3 connected 10923-16383</span><br></pre></td></tr></table></figure><p><strong>添加数据测试一下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 集群模式下 数据会随机或者平均分到几个主机中 这里在7001存的数据进入了第5798个槽中 即7002主机</span><br><span class="line">192.168.5.154:7001&gt; set name illusory</span><br><span class="line"><span class="meta">-&gt;</span> Redirected to slot [5798] located at 192.168.5.154:7002</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>然后7002查询，在添加前查询时没有数据的 等7001存数据后 再次查询就能查到了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# /usr/local/redis/bin/redis-cli -c -h 192.168.5.154 -p 7002</span><br><span class="line">192.168.5.154:7002&gt; keys *</span><br><span class="line">(empty list or set)</span><br><span class="line">192.168.5.154:7002&gt; keys *</span><br><span class="line">1) "name"</span><br><span class="line">192.168.5.154:7002&gt;</span><br></pre></td></tr></table></figure><p>注：集群模式只需要配置一次，以后启动后就自动为集群模式了。</p><h2 id="7-集群常用命令"><a href="#7-集群常用命令" class="headerlink" title="7. 集群常用命令"></a>7. 集群常用命令</h2><p>redis5提供了一些操作集群的工具，在redis安装目录下<br><code>/usr/local/redis-5.0.3/utils/create-cluster/create-cluster</code> 是个shell脚本文件。<br>使用前需要修改脚本中的一些信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost create-cluster]# vim create-cluster</span><br><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Settings</span><br><span class="line"><span class="meta">#</span>这个端口改为比自己的第一个节点小1</span><br><span class="line"><span class="meta">#</span> 会默认自增1形成7001~7006 六个节点</span><br><span class="line">PORT=7000</span><br><span class="line"><span class="meta">#</span> 超时时间</span><br><span class="line">TIMEOUT=2000</span><br><span class="line"><span class="meta">#</span> 节点数 也需要改为相对应的</span><br><span class="line">NODES=6</span><br><span class="line"><span class="meta">#</span> 主从比例也是</span><br><span class="line">REPLICAS=1</span><br></pre></td></tr></table></figure><ul><li>启动集群：<code>/root/local/redis-5.0.3/utils/create-cluster/create-cluster start</code></li><li>关闭集群：<code>/root/local/redis-5.0.3/utils/create-cluster/create-cluster stop</code></li></ul><p>附上一个启动集群的脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/sh</span><br><span class="line">/usr/local/redis/bin/redis-server  /usr/local/redis-cluster/7001/redis.conf</span><br><span class="line">/usr/local/redis/bin/redis-server  /usr/local/redis-cluster/7002/redis.conf</span><br><span class="line">/usr/local/redis/bin/redis-server  /usr/local/redis-cluster/7003/redis.conf</span><br><span class="line">/usr/local/redis/bin/redis-server  /usr/local/redis-cluster/7004/redis.conf</span><br><span class="line">/usr/local/redis/bin/redis-server  /usr/local/redis-cluster/7005/redis.conf</span><br><span class="line">/usr/local/redis/bin/redis-server  /usr/local/redis-cluster/7006/redis.conf</span><br><span class="line"></span><br><span class="line">/usr/local/redis/bin/redis-cli --cluster create 192.168.5.154:7001 192.168.5.154:7002 </span><br><span class="line">192.168.5.154:7003 192.168.5.154:7004 192.168.5.154:7005 192.168.5.154:7006 --cluster-replicas 1</span><br></pre></td></tr></table></figure><p>更多集群相关命令<br><code>/usr/local/redis/bin/redis-cli --cluster help</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Cluster Manager Commands:</span><br><span class="line">  create         host1:port1 ... hostN:portN</span><br><span class="line">                 --cluster-replicas &lt;arg&gt;</span><br><span class="line">  check          host:port</span><br><span class="line">                 --cluster-search-multiple-owners</span><br><span class="line">  info           host:port</span><br><span class="line">  fix            host:port</span><br><span class="line">                 --cluster-search-multiple-owners</span><br><span class="line">  reshard        host:port</span><br><span class="line">                 --cluster-from &lt;arg&gt;</span><br><span class="line">                 --cluster-to &lt;arg&gt;</span><br><span class="line">                 --cluster-slots &lt;arg&gt;</span><br><span class="line">                 --cluster-yes</span><br><span class="line">                 --cluster-timeout &lt;arg&gt;</span><br><span class="line">                 --cluster-pipeline &lt;arg&gt;</span><br><span class="line">                 --cluster-replace</span><br><span class="line">  rebalance      host:port</span><br><span class="line">                 --cluster-weight &lt;node1=w1...nodeN=wN&gt;</span><br><span class="line">                 --cluster-use-empty-masters</span><br><span class="line">                 --cluster-timeout &lt;arg&gt;</span><br><span class="line">                 --cluster-simulate</span><br><span class="line">                 --cluster-pipeline &lt;arg&gt;</span><br><span class="line">                 --cluster-threshold &lt;arg&gt;</span><br><span class="line">                 --cluster-replace</span><br><span class="line">  add-node       new_host:new_port existing_host:existing_port</span><br><span class="line">                 --cluster-slave</span><br><span class="line">                 --cluster-master-id &lt;arg&gt;</span><br><span class="line">  del-node       host:port node_id</span><br><span class="line">  call           host:port command arg arg .. arg</span><br><span class="line">  set-timeout    host:port milliseconds</span><br><span class="line">  import         host:port</span><br><span class="line">                 --cluster-from &lt;arg&gt;</span><br><span class="line">                 --cluster-copy</span><br><span class="line">                 --cluster-replace</span><br><span class="line">  help           </span><br><span class="line"></span><br><span class="line">For check, fix, reshard, del-node, set-timeout you can specify the host and port of any working node in the cluster.</span><br></pre></td></tr></table></figure><h2 id="8-参考"><a href="#8-参考" class="headerlink" title="8. 参考"></a>8. 参考</h2><p><code>https://www.jianshu.com/p/72443fef9554</code></p><p><code>http://www.runoob.com/redis/redis-hashes.html</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录了Redis集群搭建与使用的详细过程。&lt;/p&gt;
    
    </summary>
    
      <category term="Redis" scheme="https://www.lixueduan.com/categories/Redis/"/>
    
    
      <category term="Redis" scheme="https://www.lixueduan.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis入门教程(六)---通过JavaApi(Jedis)操作Redis</title>
    <link href="https://www.lixueduan.com/posts/e456b1e5.html"/>
    <id>https://www.lixueduan.com/posts/e456b1e5.html</id>
    <published>2019-02-27T14:00:00.000Z</published>
    <updated>2019-03-08T15:33:57.170Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录了如果通过Jedis操作Redis，包括了单机版Redis和集群版Redis。</p><a id="more"></a><blockquote><p><strong><a href="https://www.lixueduan.com/categories/Redis/">Redis系列教程目录</a></strong></p><p><a href="https://www.lixueduan.com/posts/876962d5.html">Redis入门教程(一)—安装与配置</a></p><p><a href="https://www.lixueduan.com/posts/8380a4fa.html">Redis入门教程(二)—五大基础数据类型与常用命令</a></p><p><a href="https://www.lixueduan.com/posts/5df38113.html">Redis入门教程(三)—安全性、事务、发布订阅</a></p><p><a href="https://www.lixueduan.com/posts/84dd6d72.html">Redis入门教程(四)—主从复制与持久化</a></p><p><a href="https://www.lixueduan.com/posts/397ed67.html">Redis入门教程(五)—搭建Redis集群</a></p><p><a href="https://www.lixueduan.com/posts/e456b1e5.html">Redis入门教程(六)—通过JavaApi(Jedis)操作Redis</a></p><p>…….</p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-导包"><a href="#1-导包" class="headerlink" title="1. 导包"></a>1. 导包</h2><p>需要引入Jedis包，其实和直接在shell中操作是一样的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jedis.Jedis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2. 基本使用"></a>2. 基本使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusoryCloud</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jedisTestOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"192.168.1.111"</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//-------------string----------------</span></span><br><span class="line">        String set = jedis.set(<span class="string">"name"</span>, <span class="string">"illusorycloud"</span>);</span><br><span class="line">        <span class="comment">//ok</span></span><br><span class="line">        System.out.println(set);</span><br><span class="line">        String name = jedis.get(<span class="string">"name"</span>);</span><br><span class="line">        <span class="comment">//illusorycloud</span></span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="comment">//-------------hash----------------</span></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"name"</span>, <span class="string">"illusory"</span>);</span><br><span class="line">        map.put(<span class="string">"age"</span>, <span class="string">"30"</span>);</span><br><span class="line">        map.put(<span class="string">"address"</span>, <span class="string">"cq"</span>);</span><br><span class="line">        jedis.hmset(<span class="string">"user"</span>, map);</span><br><span class="line"></span><br><span class="line">        JedisPool pool = jedisPoolTest();</span><br><span class="line">        <span class="comment">//从连接池中获取一个Jedis实例</span></span><br><span class="line">        Jedis j = pool.getResource();</span><br><span class="line">        j.set(<span class="string">"test"</span>, <span class="string">"111"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法描述 构建redis连接池</span></span><br><span class="line"><span class="comment">     * 池子中存放着多个jedis实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JedisPool <span class="title">jedisPoolTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        JedisPool pool = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (pool == <span class="keyword">null</span>) &#123;</span><br><span class="line">            JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">            <span class="comment">//控制一个pool可分配多少个jedis实例，通过pool.getResource()来获取；</span></span><br><span class="line">            <span class="comment">//如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)。</span></span><br><span class="line">            config.setMaxTotal(<span class="number">50</span>);</span><br><span class="line">            <span class="comment">//控制一个pool最多有多少个状态为idle(空闲的)的jedis实例。</span></span><br><span class="line">            config.setMaxIdle(<span class="number">5</span>);</span><br><span class="line">            <span class="comment">//表示当borrow(引入)一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛出JedisConnectionException；单位毫秒</span></span><br><span class="line">            <span class="comment">//小于零:阻塞不确定的时间,  默认-1</span></span><br><span class="line">            config.setMaxWaitMillis(<span class="number">1000</span> * <span class="number">100</span>);</span><br><span class="line">            <span class="comment">//在borrow(引入)一个jedis实例时，是否提前进行validate操作；如果为true，则得到的jedis实例均是可用的；</span></span><br><span class="line">            config.setTestOnBorrow(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//return 一个jedis实例给pool时，是否检查连接可用性（ping()）</span></span><br><span class="line">            config.setTestOnReturn(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//connectionTimeout 连接超时（默认2000ms）</span></span><br><span class="line">            <span class="comment">//soTimeout 响应超时（默认2000ms）</span></span><br><span class="line">            pool = <span class="keyword">new</span> JedisPool(config, <span class="string">"127.0.0.1"</span>, <span class="number">6379</span>, <span class="number">2000</span>, <span class="string">"619868"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pool;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-组合使用"><a href="#3-组合使用" class="headerlink" title="3. 组合使用"></a>3. 组合使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定业务 查询业务 SYS_USER_SEL_AGE_25</span></span><br><span class="line">    <span class="comment">//指定业务 查询业务 SYS_USER_SEL_SEX_MAN</span></span><br><span class="line">    <span class="comment">//指定业务 查询业务 SYS_USER_SEL_SEX_WOMEN</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String SYS_USER_TABLE = <span class="string">"SYS_USER_TABLE"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String SYS_USER_SEL_AGE_25 = <span class="string">"SYS_USER_SEL_AGE_25"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String SYS_USER_SEL_SEX_MAN = <span class="string">"SYS_USER_SEL_SEX_MAN"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String SYS_USER_SEL_SEX_WOMEN = <span class="string">"SYS_USER_SEL_SEX_WOMEN"</span>;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * User对象 数据量很大且查询频繁 需要把user表中的数据都放入缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jedisTestTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"192.168.5.154"</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.做放入操作</span></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        String uid1 = <span class="string">"illusory"</span> + UUID.randomUUID().toString();</span><br><span class="line">        User u1 = <span class="keyword">new</span> User(uid1, <span class="string">"illusoryCloud"</span>, <span class="number">22</span>, <span class="string">"man"</span>);</span><br><span class="line">        map.put(uid1, JSON.toJSONString(u1));</span><br><span class="line"></span><br><span class="line">        String uid2 = <span class="string">"illusory"</span> + UUID.randomUUID().toString();</span><br><span class="line">        User u2 = <span class="keyword">new</span> User(uid2, <span class="string">"Java"</span>, <span class="number">23</span>, <span class="string">"women"</span>);</span><br><span class="line">        map.put(uid2, JSON.toJSONString(u2));</span><br><span class="line">        String uid3 = <span class="string">"illusory"</span> + UUID.randomUUID().toString();</span><br><span class="line">        User u3 = <span class="keyword">new</span> User(uid3, <span class="string">"Android"</span>, <span class="number">24</span>, <span class="string">"man"</span>);</span><br><span class="line">        map.put(uid3, JSON.toJSONString(u3));</span><br><span class="line"></span><br><span class="line">        String uid4 = <span class="string">"illusory"</span> + UUID.randomUUID().toString();</span><br><span class="line">        User u4 = <span class="keyword">new</span> User(uid4, <span class="string">"iOS"</span>, <span class="number">25</span>, <span class="string">"women"</span>);</span><br><span class="line">        map.put(uid4, JSON.toJSONString(u4));</span><br><span class="line"></span><br><span class="line">        String uid5 = <span class="string">"illusory"</span> + UUID.randomUUID().toString();</span><br><span class="line">        User u5 = <span class="keyword">new</span> User(uid5, <span class="string">"Python"</span>, <span class="number">26</span>, <span class="string">"man"</span>);</span><br><span class="line">        map.put(uid5, JSON.toJSONString(u5));</span><br><span class="line">        jedis.hmset(<span class="string">"SYS_USER_TABLE"</span>, map);</span><br><span class="line">        <span class="comment">//假如这里放入了1000W条数据</span></span><br><span class="line">        <span class="comment">//如何按条件查询</span></span><br><span class="line">        <span class="comment">//select * from user where set='women'</span></span><br><span class="line">        <span class="comment">//select * from user where set='women' and age=25</span></span><br><span class="line">        <span class="comment">//很明显是做不到的</span></span><br><span class="line">        <span class="comment">//一般持久化时都是多种数据类型配合使用 hash+set</span></span><br><span class="line">        <span class="comment">//详情见jedsiTestThree();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>直接存进入后无法按条件查询，所以存时需要好好考虑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jedsiTestThree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"192.168.5.154"</span>, <span class="number">6379</span>);</span><br><span class="line">     <span class="comment">//写入数据时往多个集合中写</span></span><br><span class="line">     <span class="comment">//1.做放入操作</span></span><br><span class="line">     Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">     String uid1 = <span class="string">"illusory"</span> + UUID.randomUUID().toString();</span><br><span class="line">     User u1 = <span class="keyword">new</span> User(uid1, <span class="string">"illusoryCloud"</span>, <span class="number">22</span>, <span class="string">"man"</span>);</span><br><span class="line">     <span class="comment">//这里满足多种条件时 每个集合都存一次</span></span><br><span class="line">     map.put(uid1, JSON.toJSONString(u1));</span><br><span class="line">     jedis.sadd(SYS_USER_SEL_SEX_MAN, uid1);</span><br><span class="line"></span><br><span class="line">     String uid2 = <span class="string">"illusory"</span> + UUID.randomUUID().toString();</span><br><span class="line">     User u2 = <span class="keyword">new</span> User(uid2, <span class="string">"Java"</span>, <span class="number">23</span>, <span class="string">"women"</span>);</span><br><span class="line">     map.put(uid2, JSON.toJSONString(u2));</span><br><span class="line">     jedis.sadd(SYS_USER_SEL_SEX_WOMEN, uid2);</span><br><span class="line"></span><br><span class="line">     String uid3 = <span class="string">"illusory"</span> + UUID.randomUUID().toString();</span><br><span class="line">     User u3 = <span class="keyword">new</span> User(uid3, <span class="string">"Android"</span>, <span class="number">24</span>, <span class="string">"man"</span>);</span><br><span class="line">     map.put(uid3, JSON.toJSONString(u3));</span><br><span class="line">     jedis.sadd(SYS_USER_SEL_SEX_MAN, uid3);</span><br><span class="line"></span><br><span class="line">     String uid4 = <span class="string">"illusory"</span> + UUID.randomUUID().toString();</span><br><span class="line">     User u4 = <span class="keyword">new</span> User(uid4, <span class="string">"iOS"</span>, <span class="number">25</span>, <span class="string">"women"</span>);</span><br><span class="line">     map.put(uid4, JSON.toJSONString(u4));</span><br><span class="line">     jedis.sadd(SYS_USER_SEL_SEX_WOMEN, uid4);</span><br><span class="line">     jedis.sadd(SYS_USER_SEL_AGE_25, uid4);</span><br><span class="line"></span><br><span class="line">     String uid5 = <span class="string">"illusory"</span> + UUID.randomUUID().toString();</span><br><span class="line">     User u5 = <span class="keyword">new</span> User(uid5, <span class="string">"Python"</span>, <span class="number">26</span>, <span class="string">"man"</span>);</span><br><span class="line">     map.put(uid5, JSON.toJSONString(u5));</span><br><span class="line">     jedis.hmset(SYS_USER_TABLE, map);</span><br><span class="line">     jedis.sadd(SYS_USER_SEL_SEX_MAN, uid5);</span><br><span class="line">     <span class="comment">//select * from user where set='women'</span></span><br><span class="line">     <span class="comment">//select * from user where set='women' and age=25</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"192.168.5.154"</span>, <span class="number">6379</span>);</span><br><span class="line">       <span class="comment">//select * from user where set='women'</span></span><br><span class="line">       System.out.println(<span class="string">"------------select * from user where set='women'--------"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//查出所有women的id</span></span><br><span class="line">       Set&lt;String&gt; userWomenId = jedis.smembers(SYS_USER_SEL_SEX_WOMEN);</span><br><span class="line">       <span class="comment">//再通过id查询user</span></span><br><span class="line">       <span class="keyword">for</span> (Iterator iterator = userWomenId.iterator(); iterator.hasNext(); ) &#123;</span><br><span class="line">           String next = (String) iterator.next();</span><br><span class="line">           String userString = jedis.hget(SYS_USER_TABLE, next);</span><br><span class="line">           <span class="comment">//string--&gt;json--&gt;user</span></span><br><span class="line">           JSON userJson = (JSON) JSONObject.parse(userString);</span><br><span class="line">           User user = JSON.toJavaObject(userJson, User.class);</span><br><span class="line">           System.out.println(<span class="string">"userName: "</span>+user.getName());</span><br><span class="line">           System.out.println(userJson);</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">"------------select * from user where set='women' and age=25--------"</span>);</span><br><span class="line">       <span class="comment">//select * from user where set='women' and age=25</span></span><br><span class="line">       Set&lt;String&gt; sinter = jedis.sinter(SYS_USER_SEL_AGE_25, SYS_USER_SEL_SEX_WOMEN);</span><br><span class="line">       <span class="keyword">for</span> (Iterator iterator = sinter.iterator(); iterator.hasNext(); ) &#123;</span><br><span class="line">           String next = (String) iterator.next();</span><br><span class="line">           String userJson = jedis.hget(SYS_USER_TABLE, next);</span><br><span class="line">           System.out.println(userJson);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">------------select * from user where set=<span class="string">'women'</span>--------</span><br><span class="line">userName: iOS</span><br><span class="line">&#123;<span class="string">"sex"</span>:<span class="string">"women"</span>,<span class="string">"name"</span>:<span class="string">"iOS"</span>,<span class="string">"id"</span>:<span class="string">"illusory8bf000a3-3ed9-4f80-8d25-95729d3b8447"</span>,<span class="string">"age"</span>:<span class="number">25</span>&#125;</span><br><span class="line">userName: Java</span><br><span class="line">&#123;<span class="string">"sex"</span>:<span class="string">"women"</span>,<span class="string">"name"</span>:<span class="string">"Java"</span>,<span class="string">"id"</span>:<span class="string">"illusoryc42cbc91-9ed2-4468-b1a3-8ce05ff86766"</span>,<span class="string">"age"</span>:<span class="number">23</span>&#125;</span><br><span class="line">------------select * from user where set=<span class="string">'women'</span> and age=<span class="number">25</span>--------</span><br><span class="line">&#123;<span class="string">"age"</span>:<span class="number">25</span>,<span class="string">"id"</span>:<span class="string">"illusory8bf000a3-3ed9-4f80-8d25-95729d3b8447"</span>,<span class="string">"name"</span>:<span class="string">"iOS"</span>,<span class="string">"sex"</span>:<span class="string">"women"</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="4-Redis集群"><a href="#4-Redis集群" class="headerlink" title="4. Redis集群"></a>4. Redis集群</h2><p>Redis集群操作主要使用<code>JedisCluster</code>这个类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jedisClusterTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String host = <span class="string">"192.168.5.154"</span>;</span><br><span class="line">    Set&lt;HostAndPort&gt; jedisClusterNode = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    jedisClusterNode.add(<span class="keyword">new</span> HostAndPort(host, <span class="number">7001</span>));</span><br><span class="line">    jedisClusterNode.add(<span class="keyword">new</span> HostAndPort(host, <span class="number">7002</span>));</span><br><span class="line">    jedisClusterNode.add(<span class="keyword">new</span> HostAndPort(host, <span class="number">7003</span>));</span><br><span class="line">    jedisClusterNode.add(<span class="keyword">new</span> HostAndPort(host, <span class="number">7004</span>));</span><br><span class="line">    jedisClusterNode.add(<span class="keyword">new</span> HostAndPort(host, <span class="number">7005</span>));</span><br><span class="line">    jedisClusterNode.add(<span class="keyword">new</span> HostAndPort(host, <span class="number">7006</span>));</span><br><span class="line">    <span class="comment">//jedsi连接池配置</span></span><br><span class="line">    JedisPoolConfig cfg = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">    <span class="comment">//最大实例数</span></span><br><span class="line">    cfg.setMaxTotal(<span class="number">100</span>);</span><br><span class="line">    <span class="comment">//最大空闲数</span></span><br><span class="line">    cfg.setMaxIdle(<span class="number">20</span>);</span><br><span class="line">    <span class="comment">//最大等待时间 -1 无限</span></span><br><span class="line">    cfg.setMaxWaitMillis(-<span class="number">1</span>);</span><br><span class="line">    cfg.setTestOnBorrow(<span class="keyword">true</span>);</span><br><span class="line">    JedisCluster jc = <span class="keyword">new</span> JedisCluster(jedisClusterNode, <span class="number">6000</span>, <span class="number">100</span>, cfg);</span><br><span class="line">    <span class="comment">//向单机操作一样 会自动从连接池中拿出一个实例来操作。</span></span><br><span class="line">    jc.set(<span class="string">"name"</span>, <span class="string">"illusory"</span>);</span><br><span class="line">    jc.set(<span class="string">"age"</span>, <span class="string">"22"</span>);</span><br><span class="line">    jc.set(<span class="string">"sex"</span>, <span class="string">"man"</span>);</span><br><span class="line">    jc.set(<span class="string">"addr"</span>, <span class="string">"cq"</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(jc.set(<span class="string">"name"</span>, <span class="string">"illusory"</span>));</span><br><span class="line">    System.out.println(jc.set(<span class="string">"age"</span>, <span class="string">"22"</span>));</span><br><span class="line">    System.out.println(jc.set(<span class="string">"sex"</span>, <span class="string">"man"</span>));</span><br><span class="line">    System.out.println(jc.set(<span class="string">"addr"</span>, <span class="string">"cq"</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(jc.get(<span class="string">"name"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h2><p><code>http://www.runoob.com/redis/redis-hashes.html</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录了如果通过Jedis操作Redis，包括了单机版Redis和集群版Redis。&lt;/p&gt;
    
    </summary>
    
      <category term="Redis" scheme="https://www.lixueduan.com/categories/Redis/"/>
    
    
      <category term="Redis" scheme="https://www.lixueduan.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis入门教程(四)---主从复制与持久化</title>
    <link href="https://www.lixueduan.com/posts/84dd6d72.html"/>
    <id>https://www.lixueduan.com/posts/84dd6d72.html</id>
    <published>2019-02-26T14:00:00.000Z</published>
    <updated>2019-03-08T15:33:27.730Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录了如何配置Redis主从复制和Redis的持久化机制介绍与具体配置使用，包括RDB和AOF，通过对比阐述了其各自的优缺点。</p><a id="more"></a><blockquote><p><strong><a href="https://www.lixueduan.com/categories/Redis/">Redis系列教程目录</a></strong></p><p><a href="https://www.lixueduan.com/posts/876962d5.html">Redis入门教程(一)—安装与配置</a></p><p><a href="https://www.lixueduan.com/posts/8380a4fa.html">Redis入门教程(二)—五大基础数据类型与常用命令</a></p><p><a href="https://www.lixueduan.com/posts/5df38113.html">Redis入门教程(三)—安全性、事务、发布订阅</a></p><p><a href="https://www.lixueduan.com/posts/84dd6d72.html">Redis入门教程(四)—主从复制与持久化</a></p><p><a href="https://www.lixueduan.com/posts/397ed67.html">Redis入门教程(五)—搭建Redis集群</a></p><p><a href="https://www.lixueduan.com/posts/e456b1e5.html">Redis入门教程(六)—通过JavaApi(Jedis)操作Redis</a></p><p>…….</p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-主从复制"><a href="#1-主从复制" class="headerlink" title="1. 主从复制"></a>1. 主从复制</h2><p>主节点负责写数据，从节点负责读数据，主节点定期把数据同步到从节点保证数据的一致性。</p><h3 id="1-1-要点"><a href="#1-1-要点" class="headerlink" title="1.1 要点"></a>1.1 要点</h3><ul><li>1.Master可以拥有多个slave</li><li>2.多个Slavic可以连接同一个master外，还可以连接到其他的slave </li><li>3.从复制不会阻塞master在同步数据时master可以继续处理client请求 </li><li>4.提供系统的伸缩性 </li></ul><h3 id="1-2-过程"><a href="#1-2-过程" class="headerlink" title="1.2 过程"></a>1.2 过程</h3><ul><li>1.slave与master建立连接，发送sync同步命令</li><li>2.master开启一个后台进程，将数据库快照保存到文件中，同时master主进程会开始收集新的写命令并缓存</li><li>3.后台完成保存后，就将文件发送给slave</li><li>4.slave将此文件保存到硬盘上 </li></ul><h3 id="1-3-使用"><a href="#1-3-使用" class="headerlink" title="1.3 使用"></a>1.3 使用</h3><p><strong>主服务器不需要任何调整，只需要对从服务器进行配置</strong>。</p><p>修改从服务器Redis配置文件：<code>/usr/local/redis/etc/redis.conf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>添加如下配置</span><br><span class="line"><span class="meta">#</span>slaveof master服务器IP master服务器端口号</span><br><span class="line"><span class="meta">#</span>slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line">slaveof 192.168.1.111 6379</span><br></pre></td></tr></table></figure><p>如果master服务器上的Redis配置了密码，那么还需要配置以下密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>masterauth &lt;master-password&gt;</span><br><span class="line">masterauth redis</span><br></pre></td></tr></table></figure><p>最后使用info查看role角色即可知道是主服务或从服务。</p><p>主服务器可读可写，从服务器只能读不能写。</p><h3 id="1-4-问题"><a href="#1-4-问题" class="headerlink" title="1.4 问题"></a>1.4 问题</h3><p>如果从服务器中查看info出现</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">master_link_status:down</span><br></pre></td></tr></table></figure><p>即主从连接失败，这时在Redis.conf配置文件中做如下修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>bindip 表示具有访问权限</span><br><span class="line"><span class="meta">#</span>bind 127.0.0.1 即localhost才能访问 修改为0.0.0.0 即都可以访问</span><br><span class="line">bind 0.0.0.0</span><br></pre></td></tr></table></figure><p>修改后从重启一下，应该就oK了。</p><p>当然可能还要防火墙的问题，需要关掉防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld # 临时关闭防火墙</span><br><span class="line">systemctl disable firewalld # 禁止开机启动</span><br></pre></td></tr></table></figure><p>或者主从服务器根本ping不通，这….</p><h2 id="2-Redis持久化"><a href="#2-Redis持久化" class="headerlink" title="2. Redis持久化"></a>2. Redis持久化</h2><h3 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h3><p>Redis是一个支持持久化的内存数据库，可以将内存中的数据写入到磁盘里。</p><p>Redis有两种持久化机制：</p><ul><li><strong>RDB</strong>持久化（原理是将Reids在内存中的数据以快照的方式写入到二进制文件dump.rdb中,所以叫RDB），默认开启RDB机制。实际操作过程是fork一个子进程，先将数据集写入临时文件，写入成功后，再替换之前的文件，用二进制压缩存储。 </li><li><strong>AOF(append-only file)</strong>机制日志的形式记录服务器所处理的每一个写、删除操作，查询操作不会记录以append-only的模式写入一个AOF日志文件中，在redis重启的时候，可以通过回放AOF日志中的写入指令来重新构建整个数据集。 </li></ul><h3 id="2-2-对比"><a href="#2-2-对比" class="headerlink" title="2.2 对比"></a>2.2 对比</h3><p><code>RDB方式</code>是定时保存一次，若突然掉电，很可能会<code>丢失数据</code>。</p><p><code>AOF方式</code>可以配置每次操作都写入日志文件中,<code>数据安全性高</code>。</p><h4 id="1-RDB"><a href="#1-RDB" class="headerlink" title="1. RDB"></a>1. RDB</h4><p><strong>优点</strong> ：</p><p>1). <strong>单文件备份</strong>: 一旦采用该方式，那么你的整个Redis数据库将只包含一个文件，这对于文件备份而言是非常完美的。</p><p>2). <strong>恢复简单</strong>: 对于灾难恢复而言，RDB是非常不错的选择。因为我们可以非常轻松的将一个单独的文件压缩后再转移到其它存储介质上。</p><p>3). <strong>性能最大化 </strong>: 对于Redis的服务进程而言，在开始持久化时，它唯一需要做的只是fork出子进程，之后再由子进程完成这些持久化的工作，这样就可以极大的避免服务进程执行IO操作了。</p><p>4). 相比于AOF机制，如果数据集很大，RDB的<strong>启动效率会更高</strong>。</p><p><strong>缺点</strong> :</p><p>1). <strong>数据丢失</strong> ： 如果你想保证数据的高可用性，即最大限度的避免数据丢失，那么RDB将不是一个很好的选择。因为系统一旦在定时持久化之前出现宕机现象，此前没有来得及写入磁盘的数据都将丢失。</p><p>2). <strong>停顿</strong> ： 由于RDB是通过fork子进程来协助完成数据持久化工作的，因此，如果当数据集较大时，可能会导致整个服务器停止服务几百毫秒，甚至是1秒钟。</p><h4 id="2-AOF"><a href="#2-AOF" class="headerlink" title="2. AOF"></a>2. AOF</h4><p><strong>优点</strong> ： </p><p>1). 该机制可以带来<strong>更高的数据安全性</strong>，即数据持久性。Redis中提供了3中同步策略，即每秒同步、每修改同步和不同步。事实上，每秒同步也是异步完成的，其效率也是非常高的，所差的是一旦系统出现宕机现象，那么这一秒钟之内修改的数据将会丢失。而<strong>每修改同步，即每次发生的数据变 化都会被立即记录到磁盘中</strong>。</p><p>2). <strong>安全</strong> ：由于该机制对日志文件的写入操作采用的是append模式，因此在写入过程中即使出现宕机现象，也不会破坏日志文件中已经存在的内容。然而如果我们本次操 作只是写入了一半数据就出现了系统崩溃问题，不用担心，在Redis下一次启动之前，我们可以通过redis-check-aof工具来帮助我们解决数据 一致性的问题。</p><p>3). <strong>安全</strong>： 如果日志过大，Redis可以自动启用rewrite机制。即Redis以append模式不断的将修改数据写入到老的磁盘文件中，同时Redis还会创建一个新的文件用于记录此期间有哪些修改命令被执行。因此在进行rewrite切换时可以更好的保证数据安全性。</p><p>4). AOF包含一个格式清晰、易于理解的日志文件用于记录所有的修改操作。事实上，我们也可以通过该文件完成数据的重建。</p><p><strong>缺点</strong> ：</p><p>1). <strong>大数据时恢复速度慢</strong>，对于相同数量的数据集而言，AOF文件通常要大于RDB文件。</p><p>2). 根据同步策略的不同，<strong>AOF在运行效率上往往会慢于RDB</strong>。总之，每秒同步策略的效率是比较高的，同步禁用策略的效率和RDB一样高效。</p><h4 id="3-小结"><a href="#3-小结" class="headerlink" title="3. 小结"></a>3. 小结</h4><ul><li><strong>AOF</strong> ： 牺牲一些性能，换取更高的缓存一致性。</li><li><strong>RDB</strong> ：保证性能最大化，有一定数据丢失风险。</li></ul><h3 id="2-3-使用"><a href="#2-3-使用" class="headerlink" title="2.3 使用"></a>2.3 使用</h3><p>RDB方式是默认开启的不用配置，如果配置开启了AOF那么RDB会关闭。</p><p>如何开启AOF？</p><p>修改Redis.conf配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>appendonly no 是否开启aof 改成yes即可</span><br><span class="line">appendonly yes</span><br><span class="line"><span class="meta">#</span> The name of the append only file (default: "appendonly.aof")</span><br><span class="line"><span class="meta">#</span>设置保存的日志文件名 一般用默认的就好了</span><br><span class="line">appendfilename "appendonly.aof"</span><br></pre></td></tr></table></figure><h2 id="3-参考"><a href="#3-参考" class="headerlink" title="3. 参考"></a>3. 参考</h2><p><code>http://www.runoob.com/redis/redis-hashes.html</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录了如何配置Redis主从复制和Redis的持久化机制介绍与具体配置使用，包括RDB和AOF，通过对比阐述了其各自的优缺点。&lt;/p&gt;
    
    </summary>
    
      <category term="Redis" scheme="https://www.lixueduan.com/categories/Redis/"/>
    
    
      <category term="Redis" scheme="https://www.lixueduan.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis入门教程(三)---安全性、事务、发布订阅</title>
    <link href="https://www.lixueduan.com/posts/5df38113.html"/>
    <id>https://www.lixueduan.com/posts/5df38113.html</id>
    <published>2019-02-24T14:00:00.000Z</published>
    <updated>2019-03-08T15:33:13.844Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录了Redis安全性(设置密码)、Redis事务和Redis提供的的发布与订阅功能。</p><a id="more"></a><blockquote><p><strong><a href="https://www.lixueduan.com/categories/Redis/">Redis系列教程目录</a></strong></p><p><a href="https://www.lixueduan.com/posts/876962d5.html">Redis入门教程(一)—安装与配置</a></p><p><a href="https://www.lixueduan.com/posts/8380a4fa.html">Redis入门教程(二)—五大基础数据类型与常用命令</a></p><p><a href="https://www.lixueduan.com/posts/5df38113.html">Redis入门教程(三)—安全性、事务、发布订阅</a></p><p><a href="https://www.lixueduan.com/posts/84dd6d72.html">Redis入门教程(四)—主从复制与持久化</a></p><p><a href="https://www.lixueduan.com/posts/397ed67.html">Redis入门教程(五)—搭建Redis集群</a></p><p><a href="https://www.lixueduan.com/posts/e456b1e5.html">Redis入门教程(六)—通过JavaApi(Jedis)操作Redis</a></p><p>…….</p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-安全性"><a href="#1-安全性" class="headerlink" title="1. 安全性"></a>1. 安全性</h2><p>可以为Redis设置密码。<br>修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost etc]# vim redis.conf </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Warning: since Redis is pretty fast an outside user can try up to</span><br><span class="line"><span class="meta">#</span> 150k passwords per second against a good box. This means that you should</span><br><span class="line"><span class="meta">#</span> use a very strong password otherwise it will be very easy to break.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> requirepass foobared</span><br><span class="line"><span class="meta">#</span>设置密码 这里的redis就是密码</span><br><span class="line">requirepass redis</span><br></pre></td></tr></table></figure><p>重启Redis，并进入客户端，执行查询keys * 提示无权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost etc]# /usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf</span><br><span class="line">[root@localhost etc]# /usr/local/redis/bin/redis-cli </span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(error) NOAUTH Authentication required.</span><br></pre></td></tr></table></figure><p>输入密码后即可正常使用。</p><p><code>auth password</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; auth redis</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) "zset1"</span><br><span class="line">2) "set1"</span><br><span class="line">3) "list1"</span><br></pre></td></tr></table></figure><p>也可以在进入客户端时输入密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli -a password</span><br></pre></td></tr></table></figure><p>不过一般都不设置密码，工作中都是只能内网访问。</p><h2 id="2-Redis事务"><a href="#2-Redis事务" class="headerlink" title="2. Redis事务"></a>2. Redis事务</h2><p>Redis事务非常简单，使用方法如下：</p><p>首先使用<code>multi</code>打开事务，然后就写数据了，现在设置的数据都会放在队列里进行保存，最后使用<code>exec</code>执行，把数据依次存储到Redis中，<code>discard</code>取消事务。</p><p><code>watch</code> : 监视一个或多个key，如果事务执行前key被修改了，那么事务将被打断。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set a 1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set b 2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set c 3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incr a</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set d a</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incr d</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) OK</span><br><span class="line">4) (integer) 2</span><br><span class="line">5) OK</span><br><span class="line">6) (error) ERR value is not an integer or out of range</span><br></pre></td></tr></table></figure><p>不过事务中出错后并不会回滚，前面的还是已经执行了…</p><h2 id="3-发布与订阅"><a href="#3-发布与订阅" class="headerlink" title="3. 发布与订阅"></a>3. 发布与订阅</h2><p>Redis提供了简单的发布订阅功能，具体如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 订阅监听</span><br><span class="line">subscribe [频道]   </span><br><span class="line"><span class="meta">#</span> 进行发布消息广播</span><br><span class="line">publish [频道][发布内容]</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 订阅频道cctv</span><br><span class="line">127.0.0.1:6379&gt; subscribe cctv</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) "subscribe"</span><br><span class="line">2) "cctv"</span><br><span class="line">3) (integer) 1</span><br><span class="line"><span class="meta">#</span> 发布广播</span><br><span class="line">127.0.0.1:6379&gt; publish cctv hello</span><br><span class="line">(integer) 0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 订阅窗口就可以接受到消息了</span><br><span class="line">1) "message"</span><br><span class="line">2) "cctv"</span><br><span class="line">3) "hello"</span><br></pre></td></tr></table></figure><h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h2><p><code>http://www.runoob.com/redis/redis-hashes.html</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录了Redis安全性(设置密码)、Redis事务和Redis提供的的发布与订阅功能。&lt;/p&gt;
    
    </summary>
    
      <category term="Redis" scheme="https://www.lixueduan.com/categories/Redis/"/>
    
    
      <category term="Redis" scheme="https://www.lixueduan.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis入门教程(二)---五大基础数据类型与常用命令</title>
    <link href="https://www.lixueduan.com/posts/8380a4fa.html"/>
    <id>https://www.lixueduan.com/posts/8380a4fa.html</id>
    <published>2019-02-23T14:00:00.000Z</published>
    <updated>2019-03-08T15:33:01.486Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录了Redis五大基础数据类型与key命令，包括了<code>String</code>、<code>Hash</code>、<code>List</code>、<code>Set</code>、<code>ZSet</code>。</p><a id="more"></a><blockquote><p><strong><a href="https://www.lixueduan.com/categories/Redis/">Redis系列教程目录</a></strong></p><p><a href="https://www.lixueduan.com/posts/876962d5.html">Redis入门教程(一)—安装与配置</a></p><p><a href="https://www.lixueduan.com/posts/8380a4fa.html">Redis入门教程(二)—五大基础数据类型与常用命令</a></p><p><a href="https://www.lixueduan.com/posts/5df38113.html">Redis入门教程(三)—安全性、事务、发布订阅</a></p><p><a href="https://www.lixueduan.com/posts/84dd6d72.html">Redis入门教程(四)—主从复制与持久化</a></p><p><a href="https://www.lixueduan.com/posts/397ed67.html">Redis入门教程(五)—搭建Redis集群</a></p><p><a href="https://www.lixueduan.com/posts/e456b1e5.html">Redis入门教程(六)—通过JavaApi(Jedis)操作Redis</a></p><p>…….</p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><p>Redis一共分5种数据类型：<code>String</code>、<code>Hash</code>、<code>List</code>、<code>Set</code>、<code>ZSet</code></p><h2 id="1-String"><a href="#1-String" class="headerlink" title="1. String"></a>1. String</h2><h3 id="1-1-set"><a href="#1-1-set" class="headerlink" title="1.1 set"></a>1.1 set</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><strong>set</strong>  key value</td><td>设置指定 key 的值</td></tr><tr><td><strong>setnx</strong> key value</td><td>只有在 key 不存在时设置 key 的值。(not exist)</td></tr><tr><td><strong>setex</strong> key seconds valuel</td><td>将值 value 关联到 key ，并将 key 的过期时间设为 seconds (秒)。expired</td></tr><tr><td>psetex key milliseconds value]</td><td>和setex命令相似，但它以毫秒为单位设置 key 的生存时间</td></tr><tr><td><strong>mset</strong> key value [key value …]</td><td>同时设置一个或多个 key-value 对。</td></tr><tr><td>msetnx key value [key value …]</td><td>同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</td></tr></tbody></table><h3 id="1-2-get"><a href="#1-2-get" class="headerlink" title="1.2 get"></a>1.2 get</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><strong>get</strong> key</td><td>获取指定 key 的值。</td></tr><tr><td><strong>mget</strong> key1 [key2..]</td><td>获取所有(一个或多个)给定 key 的值。</td></tr><tr><td>getrange key start end</td><td>返回 key 中字符串值的子字符</td></tr><tr><td>strlen key</td><td>返回 key 所储存的字符串值的长度。</td></tr></tbody></table><h3 id="1-3-update"><a href="#1-3-update" class="headerlink" title="1.3 update"></a>1.3 update</h3><table><thead><tr><th style="text-align:left">命令</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left">getset key value</td><td>将给定 key 的值设为 value ，并返回 key 的旧值(old value)。</td></tr><tr><td style="text-align:left">setrange key offset value</td><td>用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。</td></tr><tr><td style="text-align:left"><strong>incr</strong> key</td><td>将 key 中储存的数字值一。</td></tr><tr><td style="text-align:left"><strong>incrby</strong> key increment</td><td>将 key 所储存的值加上给定的增量值（increment） 。</td></tr><tr><td style="text-align:left">incrbyfloat key increment</td><td>将 key 所储存的值加上给定的浮点增量值（increment） 。</td></tr><tr><td style="text-align:left"><strong>decr</strong> key</td><td>将 key 中储存的数字值减一。</td></tr><tr><td style="text-align:left"><strong>decrby</strong> key decrement</td><td>key 所储存的值减去给定的减量值（decrement） 。</td></tr><tr><td style="text-align:left">append key value</td><td>追加字符串到key末尾</td></tr></tbody></table><h3 id="1-4-实例"><a href="#1-4-实例" class="headerlink" title="1.4 实例"></a>1.4 实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">设置值：set key value--&gt;set myname illusory   <span class="comment">//同一个key多次set会覆盖</span></span><br><span class="line">获取值：get key  ------&gt;get myname</span><br><span class="line">删除值：del key--------&gt;del myname</span><br></pre></td></tr></table></figure><p>其他set方法：</p><p><code>setnx(not exist)</code>: 如果key不存在就设置值，返回1;存在就不设置，返回0；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>格式：setnx key value</span><br><span class="line">127.0.0.1:6379&gt; set myname illusory</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; setnx myname cloud   #myname 已经存在了 返回0</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; get myname  # 值也没有发生变化</span><br><span class="line">"illusory"</span><br></pre></td></tr></table></figure><p><code>setex(expired)</code>: 设置数据过期时间，数据只存在一段时间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>格式：setnx key seconds value;</span><br><span class="line">setnx vercode 60 123456； </span><br><span class="line"><span class="meta">#</span>设置key--&gt;vercode有效时间60s，60s内获取值为123456,60s后返回nil（Redis中nil表示空）</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setex vercode 5 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get vercode #时间没到 还能查询到</span><br><span class="line">"123456"</span><br><span class="line">127.0.0.1:6379&gt; get vercode  #5s到了 数据过期 查询返回nil</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><p><code>setrange</code>：替换字符串</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>格式：setrange key offset value</span><br><span class="line">set email 123456789@gmail.com</span><br><span class="line">setrange email 10 qqqqq # 从第10位开始替换(不包括第10位) 后面跟上用来替换的字符串</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set email 123456789@gmail.com</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get email</span><br><span class="line">"123456789@qqail.com"</span><br><span class="line">127.0.0.1:6379&gt; setrange email 10 qqqqq</span><br><span class="line">(integer) 19</span><br><span class="line">127.0.0.1:6379&gt; get email</span><br><span class="line">"123456789@qqqqq.com"</span><br></pre></td></tr></table></figure><p>mset：一次设置多个值</p><p><code>mset key1 value1 key2 value2 ...keyn valuen</code></p><p>mget：一次获取多个值</p><p><code>mget key1 key2 key3...keyn</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; mset k1 111 k2 222 k3 333 </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget k1 k2 k3</span><br><span class="line">1) "111"</span><br><span class="line">2) "222"</span><br><span class="line">3) "333"</span><br></pre></td></tr></table></figure><p><code>getset</code>: 返回旧值并设置新值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>格式 getset key value</span><br><span class="line">getset name cloud #将name设置为cloud并放回name的旧值</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set name illusory</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">"illusory"</span><br><span class="line">127.0.0.1:6379&gt; getset name cloud</span><br><span class="line">"illusory"</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">"cloud"</span><br></pre></td></tr></table></figure><p><code>incr/decr</code>:对一个值进行递增或者递减操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 格式 incr key/decr key</span><br><span class="line">incr age #age递增1</span><br><span class="line">decr age #age递减1</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line">"22"</span><br><span class="line">127.0.0.1:6379&gt; incr age #递增</span><br><span class="line">(integer) 23</span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line">"23"</span><br><span class="line">127.0.0.1:6379&gt; decr age #递减</span><br><span class="line">(integer) 22</span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line">"22"</span><br></pre></td></tr></table></figure><p><code>incrby/decrby</code>:对一个值按照一定<code>步长</code>进行递增或者递减操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 格式 incrby key increment/decrby key increment</span><br><span class="line">incrby age 3 #age递增3</span><br><span class="line">decrby age 3 #age递减3</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line">"22"</span><br><span class="line">127.0.0.1:6379&gt; incrby age 3</span><br><span class="line">(integer) 25</span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line">"25"</span><br><span class="line">127.0.0.1:6379&gt; decrby age 3</span><br><span class="line">(integer) 22</span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line">"22"</span><br></pre></td></tr></table></figure><p><code>append</code>:字符串追加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>格式 append key value</span><br><span class="line">append name cloud #在name后追加cloud</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">"illusory"</span><br><span class="line">127.0.0.1:6379&gt; append name cloud</span><br><span class="line">(integer) 13</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">"illusorycloud"</span><br></pre></td></tr></table></figure><p><code>strlen</code>：获取字符串长度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>格式 strlen key </span><br><span class="line">strlen name #获取name对应的value的长度</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">"illusorycloud"</span><br><span class="line">127.0.0.1:6379&gt; strlen name</span><br><span class="line">(integer) 13</span><br></pre></td></tr></table></figure><h2 id="2-Hash"><a href="#2-Hash" class="headerlink" title="2. Hash"></a>2. Hash</h2><p>工作中使用最多的就是Hash类型</p><p>将一个对象存储在Hash类型里要比String类型里占用的空间少一些，并方便存取整个对象。</p><p><code>hset</code>:类似于set，数据都存为Hash类型，类似于存在map中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 格式 hset key filed value</span><br><span class="line">hset me name illusory #me是hash名 name是hash中的key illusory为hash中的value </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>类似于Java中的Map</span><br><span class="line">        Map&lt;Object,Object&gt; me = new HashMap&lt;&gt;();</span><br><span class="line">        me.put("name", "illusory");</span><br></pre></td></tr></table></figure><h3 id="2-1-hset"><a href="#2-1-hset" class="headerlink" title="2.1 hset"></a>2.1 hset</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><strong>hset</strong> key filed value</td><td>将哈希表 key 中的字段 field 的值设为 value 。</td></tr><tr><td><strong>hsetnx</strong> key filed value</td><td>类似setnx,只有在字段 field 不存在时，设置哈希表字段的值。</td></tr><tr><td><strong>hmset</strong> key filed1 value1[filed2 value2..]</td><td>同时将多个 field-value (域-值)对设置到哈希表 key 中。</td></tr><tr><td></td></tr></tbody></table><h3 id="2-2-hget"><a href="#2-2-hget" class="headerlink" title="2.2 hget"></a>2.2 hget</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><strong>hget</strong> key filed</td><td>获取存储在哈希表中指定字段的值。</td></tr><tr><td><strong>hmget</strong> key filed1 [filed2…]</td><td>获取所有给定字段的值</td></tr><tr><td><strong>hgetall</strong> key</td><td>获取在哈希表中指定 key 的所有字段和值</td></tr><tr><td><strong>hkeys</strong> key</td><td>获取所有哈希表中的字段</td></tr><tr><td><strong>hvals</strong> key</td><td>获取哈希表中所有值</td></tr><tr><td>hscankey cursor [MATCH pattern][COUNT count]</td><td>迭代哈希表中的键值对。</td></tr><tr><td>hexists key filed</td><td>查看哈希表 key 中，指定的字段是否存在。</td></tr><tr><td>hlen key</td><td>获取哈希表中字段的数量</td></tr><tr><td>hstrlen key filed</td><td>返回哈希表 key 中， 给定field的字符串长度</td></tr></tbody></table><h3 id="2-3-update"><a href="#2-3-update" class="headerlink" title="2.3 update"></a>2.3 update</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><strong>hincrby</strong> key field increment</td><td>为哈希表 key 中的指定字段的整数值加上增量 increment 。</td></tr><tr><td>hincrbyfloat key field increment</td><td>为哈希表 key 中的指定字段的浮点数值加上增量 increment 。</td></tr><tr><td><strong>hdel</strong> key</td><td>删除哈希表key 中的一个或多个指定域，不存在的域将被忽略。</td></tr></tbody></table><h3 id="2-4-实例"><a href="#2-4-实例" class="headerlink" title="2.4 实例"></a>2.4 实例</h3><p><code>hset</code>:类似于set，数据都存为Hash类型，类似于存在map中</p><p><code>hget</code>:类似于get</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 格式 hget hash filed</span><br><span class="line">hget me name #获取hash名为me的hash中的name对应的value</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset me name illusory</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hset me age 22</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hget me name</span><br><span class="line">"illusory"</span><br><span class="line">127.0.0.1:6379&gt; hget me age</span><br><span class="line">"22"</span><br></pre></td></tr></table></figure><p>同样也有批量操作的<code>hmset</code>、<code>hmget</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>格式 hmset key filed1 value1 filde2 value2 ....filedn valuen</span><br><span class="line"><span class="meta">#</span>格式 hmget key filed1  filde2....filedn</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hmset me name illusory age 22</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hmget me name age</span><br><span class="line">1) "illusory"</span><br><span class="line">2) "22"</span><br></pre></td></tr></table></figure><p><code>hsetnx(not exist)</code>: 如果key不存在就设置值，返回1;存在就不设置，返回0；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>格式 hsetnx value filed value</span><br></pre></td></tr></table></figure><p><code>hincrby/hdecrby</code>:对一个值按照一定<code>步长</code>进行递增或者递减操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 格式 hincrby key filed increment/hdecrby key filed increment</span><br><span class="line">incrby me age 3 #age递增3</span><br><span class="line">decrby me age 3 #age递减3</span><br></pre></td></tr></table></figure><p><code>hstrlen key filed</code>:回哈希表 <code>key</code> 中， 与给定域 <code>field</code> 相关联的值的字符串长度（string length）。</p><p>如果给定的键或者域不存在， 那么命令返回 <code>0</code> 。</p><p><code>hexists</code>:判断是否存在</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>格式 hexists value filed</span><br></pre></td></tr></table></figure><p><code>hlen</code>:查看hash的filed数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>格式 hlen key</span><br></pre></td></tr></table></figure><p><code>hdel</code>:删除指定hash中的filed</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>格式 hdel key filed</span><br></pre></td></tr></table></figure><p><code>hkeys</code>:返回指定hash中所有的filed</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>格式 hkeys key</span><br></pre></td></tr></table></figure><p><code>hvals</code>:返回指定hash中所有的value</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>格式 hvals key</span><br></pre></td></tr></table></figure><p><code>hgetall</code>:返回指定hash中所有的filed和value</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>格式 hgetall key</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hgetall me</span><br><span class="line">1) "name"</span><br><span class="line">2) "illusory"</span><br><span class="line">3) "age"</span><br><span class="line">4) "23"</span><br></pre></td></tr></table></figure><h2 id="3-List"><a href="#3-List" class="headerlink" title="3. List"></a>3. List</h2><p>可以看做Java中的List，不过更像Queue。</p><h3 id="3-1-lpush-rpush"><a href="#3-1-lpush-rpush" class="headerlink" title="3.1 lpush/rpush"></a>3.1 lpush/rpush</h3><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><strong>lpush</strong> key value1 [value2..]</td><td style="text-align:left">将一个或多个值插入到列表<strong>头部</strong></td></tr><tr><td style="text-align:left">lpushx key value</td><td style="text-align:left">将一个值插入到已存在的列表<strong>头部</strong></td></tr><tr><td style="text-align:left"><strong>rpush</strong> key value1 [value2..]</td><td style="text-align:left">将一个或多个值插入到列表<strong>尾部</strong></td></tr><tr><td style="text-align:left">rpushx key value</td><td style="text-align:left">将一个值插入到已存在的列表<strong>尾部</strong></td></tr><tr><td style="text-align:left"><strong>lset</strong> key index value</td><td style="text-align:left">将列表 <code>key</code> 下标为 <code>index</code> 的元素的值设置为 <code>value</code> 。</td></tr><tr><td style="text-align:left">linsert key BEFORE\</td><td style="text-align:left">AFTER pivot value</td><td>将值 <code>value</code> 插入到列表 <code>key</code> 当中，位于值 <code>pivot</code> 之前或之后。</td></tr></tbody></table><h3 id="3-2-lpop-rpop"><a href="#3-2-lpop-rpop" class="headerlink" title="3.2 lpop/rpop"></a>3.2 lpop/rpop</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><strong>lpop</strong> key</td><td>移除并获取列表的第一个元素</td></tr><tr><td>blpop key [key …] timeout</td><td>lpop的阻塞版本，没有元素可供弹出的时候会阻塞直到有元素或超时。</td></tr><tr><td><strong>rpop</strong> key</td><td>移除并获取列表的倒数第一个元素</td></tr><tr><td>brpop key [key …] timeout</td><td>rpop的阻塞版本，没有元素可供弹出的时候会阻塞直到有元素或超时。</td></tr><tr><td>rpoplpush source destination</td><td>移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td></tr><tr><td>brpoplpush source destination timeout</td><td>rpoplpush的阻塞版，source为空时阻塞直到不为空或者超时。</td></tr><tr><td>lrem key count value</td><td>移除列表元素</td></tr><tr><td><strong>lrange</strong> key start stop</td><td>返回列表 <code>key</code> 中指定区间内的元素，区间以偏移量 <code>start</code> 和 <code>stop</code> 指定。</td></tr><tr><td>ltrim key start stop</td><td>对一个列表进行修剪(trim)，只保留指定区间内的元素。</td></tr><tr><td>llen key</td><td>返回列表 key的长度。</td></tr><tr><td>lindex key index</td><td>返回列表 key 中，下标为 index的元素。</td></tr></tbody></table><h2 id="4-Set"><a href="#4-Set" class="headerlink" title="4. Set"></a>4. Set</h2><p><code>Set</code>集合是String类型的<code>无序</code>集合，通过hashtable实现的，对集合我们可以取交集，并集，差集。</p><p>Java中List的升级版。</p><h3 id="4-1-sadd-spop"><a href="#4-1-sadd-spop" class="headerlink" title="4.1 sadd/spop"></a>4.1 sadd/spop</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><strong>sadd</strong> key member [member …]</td><td>将一个或多个 <code>member</code> 元素加入到集合 <code>key</code> 当中，已经存在于集合的 <code>member</code> 元素将被忽略</td></tr><tr><td><strong>spop</strong> key</td><td>移除并返回集合中的一个随机元素。</td></tr><tr><td>srem key member [member …]</td><td>移除集合 <code>key</code> 中的一个或多个 <code>member</code> 元素，不存在的 <code>member</code> 元素会被忽略。</td></tr><tr><td><strong>smove</strong> source destination member</td><td>将 <code>member</code> 元素从 <code>source</code> 集合移动到 <code>destination</code> 集合。</td></tr></tbody></table><h3 id="4-2-get"><a href="#4-2-get" class="headerlink" title="4.2 get"></a>4.2 get</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><strong>sinter</strong> key [key …]</td><td>返回给定所有集合的<strong>交集</strong></td></tr><tr><td>sinterstore destination key [key …]</td><td>返回给定所有集合的交集并存储在 destination 中</td></tr><tr><td><strong>sunion</strong> key [key …]</td><td>返回所有给定集合的<strong>并集</strong></td></tr><tr><td>sunionstore destination key [key …]</td><td>返回所有给定集合的并集存储在 destination 集合中</td></tr><tr><td><strong>sdiff</strong>key [key …]</td><td>返回给定所有集合的<strong>差集</strong></td></tr><tr><td>sdiffstore destination key [key …]</td><td>返回给定所有集合的差集并存储在 destination 中</td></tr><tr><td><strong>smembers</strong> key</td><td>返回集合 <code>key</code> 中的所有成员。</td></tr><tr><td>sismember key member</td><td>判断 <code>member</code> 元素是否集合 <code>key</code> 的成员。</td></tr><tr><td><strong>scard</strong> key</td><td>返回集合 <code>key</code> 的基数(集合中元素的数量)</td></tr><tr><td><strong>srandmember</strong> key [count]</td><td>返回集合中一个或多个随机数</td></tr></tbody></table><h2 id="5-ZSet"><a href="#5-ZSet" class="headerlink" title="5. ZSet"></a>5. ZSet</h2><p><code>ZSet</code>则是<code>有序</code>的。</p><h3 id="5-1-zadd"><a href="#5-1-zadd" class="headerlink" title="5.1 zadd"></a>5.1 zadd</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>zadd key score1 member1 [score2 member2…]</td><td>将一个或多个 <code>member</code> 元素及其 <code>score</code> 值加入到有序集 <code>key</code> 当中。</td></tr><tr><td><strong>zincrby</strong> key increment member</td><td>为有序集 <code>key</code> 的成员 <code>member</code> 的 <code>score</code> 值加上增量 <code>increment</code> 。</td></tr></tbody></table><h3 id="5-2-get"><a href="#5-2-get" class="headerlink" title="5.2 get"></a>5.2 get</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>zscore key member</td><td>返回有序集 <code>key</code> 中，成员 <code>member</code> 的 <code>score</code> 值。</td></tr><tr><td>zcard key</td><td>返回有序集 <code>key</code> 的基数。(集合中元素的数量)</td></tr><tr><td>zcount key min max</td><td>返回有序集 <code>key</code> 中， <code>score</code> 值在 <code>min</code> 和 <code>max</code> 之间(默认包括 <code>score</code> 值等于 <code>min</code> 或 <code>max</code> )的成员的数量。</td></tr><tr><td><strong>zrange</strong> key start stop [withscores]</td><td>返回有序集 <code>key</code> 中，指定区间内的成员。其中成员的位置按 <code>score</code> 值递增(<strong>从小到大</strong>)来排序。</td></tr><tr><td>zrevrange key start stop [withscores]</td><td>类似zrange,不过成员位置按 <code>score</code> 值递增(<strong>从大到小</strong>)来排序。</td></tr><tr><td><strong>zrangebyscore</strong> key min max [withscores][LIMIT offset count]</td><td>返回有序集 <code>key</code> 中，所有 <code>score</code> 值介于 <code>min</code> 和 <code>max</code> 之间(包括等于 <code>min</code> 或 <code>max</code> )的成员。有序集成员按 <code>score</code> 值递增(<strong>从小到大</strong>)次序排列。</td></tr><tr><td>zrevrangebyscore key min max [withscores][LIMIT offset count]</td><td>类似zrangebyscore，不过有序集成员按 <code>score</code> 值递增(<strong>从小到大</strong>)次序排列。</td></tr><tr><td><strong>zrank</strong> key member</td><td>返回有序集 <code>key</code> 中成员 <code>member</code> 的排名。其中有序集成员按 <code>score</code> 值递增(<strong>从小到大</strong>)顺序排列。</td></tr><tr><td>zrevrank key member</td><td>类似zrank，其中有序集成员按 <code>score</code> 值递增(<strong>从大到小</strong>)顺序排列。</td></tr><tr><td>zrangebylex key min max [LIMIT offset count]</td><td>通过字典区间返回有序集合的成员</td></tr><tr><td>zlexcount key min max</td><td>返回该集合中， 成员介于 <code>min</code> 和 <code>max</code> 范围内的元素数量。</td></tr><tr><td><strong>zuniostore</strong> destination numkeys key [key …]</td><td>计算给定的一个或多个有序集的<strong>并集</strong>，并存储在新的 key 中</td></tr><tr><td><strong>zinterstore</strong> destination numkeys key [key …]</td><td>计算给定的一个或多个有序集的<strong>交集</strong>，并存储在新的 key 中</td></tr></tbody></table><h3 id="5-3-delete"><a href="#5-3-delete" class="headerlink" title="5.3 delete"></a>5.3 delete</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>zrem key member [member …]</td><td>移除有序集 <code>key</code> 中的一个或多个成员，不存在的成员将被忽略。</td></tr><tr><td>zremrangebyrank key start stop</td><td>移除有序集 <code>key</code> 中，指定排名(rank)区间内的所有成员。</td></tr><tr><td>zremrangebyscore key min max</td><td>移除有序集 <code>key</code> 中，所有 <code>score</code> 值介于 <code>min</code> 和 <code>max</code> 之间(包括等于 <code>min</code> 或 <code>max</code> )的成员</td></tr><tr><td>zremrangebylex key min max</td><td>移除该集合中， 成员介于 <code>min</code> 和 <code>max</code> 范围内的所有元素。</td></tr></tbody></table><h2 id="6-Key命令"><a href="#6-Key命令" class="headerlink" title="6. Key命令"></a>6. Key命令</h2><p>Redis中所有key都可以使用的命令。</p><table><thead><tr><th>命令</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td><strong>del</strong> key</td><td style="text-align:left">该命令用于在 key 存在时删除 key。</td></tr><tr><td>dump key</td><td style="text-align:left">序列化给定 key ，并返回被序列化的值。</td></tr><tr><td><strong>exists</strong> key</td><td style="text-align:left">检查给定 key 是否存在。</td></tr><tr><td><strong>expire</strong> key seconds</td><td style="text-align:left">为给定 key 设置过期时间，以秒计。</td></tr><tr><td>expireat key timestamp</td><td style="text-align:left">类似expirre，都用于为 key 设置过期时间。 不同在于 expireat命令接受的时间参数是 UNIX 时间戳(unix timestamp)。</td></tr><tr><td>pexpire key milliseconds</td><td style="text-align:left">设置 key 的过期时间以毫秒计。</td></tr><tr><td>pexpireat key timestamp</td><td style="text-align:left">设置 key 过期时间的时间戳(unix timestamp) 以毫秒计</td></tr><tr><td><strong>keys</strong> pattern</td><td style="text-align:left">类似模糊查询，查找所有符合给定模式( pattern)的 key。key l 查出以l开头的</td></tr><tr><td>move key db</td><td style="text-align:left">将当前数据库的 key 移动到给定的数据库 db(0~15) 当中。</td></tr></tbody></table><h2 id="7-其他命令"><a href="#7-其他命令" class="headerlink" title="7. 其他命令"></a>7. 其他命令</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>keys *</td><td>返回满足的所有键 (可以模糊匹配）</td></tr><tr><td>exists key[keys…]</td><td>是否存在指定的key</td></tr><tr><td>expire key secondes</td><td>设置某个key的过期时间，</td></tr><tr><td>ttl key</td><td>与expire搭配，查看剩余时间</td></tr><tr><td>persist key</td><td>取消过期时间</td></tr><tr><td>select db(0~15)</td><td>择数据库数据库,默认进入的是0数据库</td></tr><tr><td>move key db(0~15)</td><td>将当前数据中的key转移到其他数据库中</td></tr><tr><td>randomkey</td><td>随机返回数据库里的一个key</td></tr><tr><td>rename key</td><td>重命名key</td></tr><tr><td>echo</td><td>打印命令</td></tr><tr><td>dbsize</td><td>查看数据库的key数量</td></tr><tr><td>info</td><td>获取数据库信息</td></tr><tr><td>conflg get</td><td>实时传储收到的请求(返回相关的配置信息}</td></tr><tr><td>config get *</td><td>返回所有配置</td></tr><tr><td>flushdb</td><td>空当前数据库</td></tr><tr><td>flushall</td><td>清空所有数据库</td></tr></tbody></table><h2 id="8-参考"><a href="#8-参考" class="headerlink" title="8. 参考"></a>8. 参考</h2><p><code>http://redisdoc.com/internal/index.html</code></p><p><code>http://www.runoob.com/redis/redis-hashes.html</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录了Redis五大基础数据类型与key命令，包括了&lt;code&gt;String&lt;/code&gt;、&lt;code&gt;Hash&lt;/code&gt;、&lt;code&gt;List&lt;/code&gt;、&lt;code&gt;Set&lt;/code&gt;、&lt;code&gt;ZSet&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Redis" scheme="https://www.lixueduan.com/categories/Redis/"/>
    
    
      <category term="Redis" scheme="https://www.lixueduan.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis入门教程(一)---安装与配置</title>
    <link href="https://www.lixueduan.com/posts/876962d5.html"/>
    <id>https://www.lixueduan.com/posts/876962d5.html</id>
    <published>2019-02-20T14:00:00.000Z</published>
    <updated>2019-03-08T15:32:45.070Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录了如何在Linux(CentOS 7)下安装Redis与Redis基本使用与配置。</p><a id="more"></a><blockquote><p><strong><a href="https://www.lixueduan.com/categories/Redis/">Redis系列教程目录</a></strong></p><p><a href="https://www.lixueduan.com/posts/876962d5.html">Redis入门教程(一)—安装与配置</a></p><p><a href="https://www.lixueduan.com/posts/8380a4fa.html">Redis入门教程(二)—五大基础数据类型与常用命令</a></p><p><a href="https://www.lixueduan.com/posts/5df38113.html">Redis入门教程(三)—安全性、事务、发布订阅</a></p><p><a href="https://www.lixueduan.com/posts/84dd6d72.html">Redis入门教程(四)—主从复制与持久化</a></p><p><a href="https://www.lixueduan.com/posts/397ed67.html">Redis入门教程(五)—搭建Redis集群</a></p><p><a href="https://www.lixueduan.com/posts/e456b1e5.html">Redis入门教程(六)—通过JavaApi(Jedis)操作Redis</a></p><p>…….</p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-Redis安装"><a href="#1-Redis安装" class="headerlink" title="1. Redis安装"></a>1. Redis安装</h2><h3 id="1-1-下载"><a href="#1-1-下载" class="headerlink" title="1.1 下载"></a>1.1 下载</h3><p>官网<code>https://redis.io/download</code> 下载文件，这里下的是<code>redis-5.0.3.tar.gz</code></p><p>然后上传到服务器。这里是放在了<code>/usr/software</code>目录下</p><h3 id="1-2-环境准备"><a href="#1-2-环境准备" class="headerlink" title="1.2 环境准备"></a>1.2 环境准备</h3><p><strong>安装编译源码所需要的工具和库</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install gcc gcc-c++ ncurses-devel perl</span><br></pre></td></tr></table></figure><h3 id="1-3-解压安装"><a href="#1-3-解压安装" class="headerlink" title="1.3 解压安装"></a>1.3 解压安装</h3><h4 id="1-解压"><a href="#1-解压" class="headerlink" title="1. 解压"></a>1. 解压</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost software]# tar -zxvf redis-5.0.3.tar.gz -C /usr/local</span><br><span class="line">//解压到/usr/local目录下</span><br></pre></td></tr></table></figure><h4 id="2-编译"><a href="#2-编译" class="headerlink" title="2. 编译"></a>2. 编译</h4><p>进入刚才解压的后的文件夹<code>redis-5.0.3</code>进行编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost redis-5.0.3]# make</span><br></pre></td></tr></table></figure><p>如果提示<code>Hint: It&#39;s a good idea to run &#39;make test&#39; ;)</code>就说明编译ok了，接下来进行安装。</p><h4 id="3-安装"><a href="#3-安装" class="headerlink" title="3. 安装"></a>3. 安装</h4><p>进入<code>src</code>目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost redis-5.0.3]# cd src/</span><br><span class="line">[root@localhost src]# make install</span><br></pre></td></tr></table></figure><p>出现下面的提示代表安装ok</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    CC Makefile.dep</span><br><span class="line"></span><br><span class="line">Hint: It's a good idea to run 'make test' ;)</span><br><span class="line"></span><br><span class="line">    INSTALL install</span><br><span class="line">    INSTALL install</span><br><span class="line">    INSTALL install</span><br><span class="line">    INSTALL install</span><br><span class="line">    INSTALL install</span><br></pre></td></tr></table></figure><h4 id="4-文件复制"><a href="#4-文件复制" class="headerlink" title="4. 文件复制"></a>4. 文件复制</h4><p>创建两个文件夹来存放Redis命令和配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost local]# mkdir -p /usr/local/redis/etc</span><br><span class="line">[root@localhost local]# mkdir -p /usr/local/redis/bin</span><br></pre></td></tr></table></figure><p>把<code></code>redis-5.0.3<code>下的</code>redis.conf<code>复制到</code>/usr/local/redis/etc`目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost redis-5.0.3]# cp redis.conf /usr/local/redis/etc/</span><br></pre></td></tr></table></figure><p>把<code>redis-5.0.3/src</code>里的<code>mkreleasehdr.sh</code>、<code>redis-benchmark</code>、<code>redis-check-aof</code>、<code>redis-check-rdb</code>、<code>redis-cli</code>、<code>redis-server</code> 文件移动到<code>/usr/local/redis/bin</code>下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost src]# mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-check-rdb redis-cli redis-server /usr/local/redis/bin</span><br></pre></td></tr></table></figure><h2 id="2-启动"><a href="#2-启动" class="headerlink" title="2. 启动"></a>2. 启动</h2><h3 id="2-1-前台启动"><a href="#2-1-前台启动" class="headerlink" title="2.1 前台启动"></a>2.1 前台启动</h3><p>启动时并指定配置文件：.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost etc]# /usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf</span><br></pre></td></tr></table></figure><p>出现如下提示代表启动成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost etc]# /usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf</span><br><span class="line">10869:C 05 Mar 2019 13:33:39.041 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">10869:C 05 Mar 2019 13:33:39.042 # Redis version=5.0.3, bits=64, commit=00000000, modified=0, pid=10869, just started</span><br><span class="line">10869:C 05 Mar 2019 13:33:39.042 # Configuration loaded</span><br><span class="line">10869:M 05 Mar 2019 13:33:39.044 * Increased maximum number of open files to 10032 (it was originally set to 1024).</span><br><span class="line">                _._                                                  </span><br><span class="line">           _.-``__ ''-._                                             </span><br><span class="line">      _.-``    `.  `_.  ''-._           Redis 5.0.3 (00000000/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ ''-._                                   </span><br><span class="line"> (    '      ,       .-`  | `,    )     Running in standalone mode</span><br><span class="line"> |`-._`-...-` __...-.``-._|'` _.-'|     Port: 6379</span><br><span class="line"> |    `-._   `._    /     _.-'    |     PID: 10869</span><br><span class="line">  `-._    `-._  `-./  _.-'    _.-'                                   </span><br><span class="line"> |`-._`-._    `-.__.-'    _.-'_.-'|                                  </span><br><span class="line"> |    `-._`-._        _.-'_.-'    |           http://redis.io        </span><br><span class="line">  `-._    `-._`-.__.-'_.-'    _.-'                                   </span><br><span class="line"> |`-._`-._    `-.__.-'    _.-'_.-'|                                  </span><br><span class="line"> |    `-._`-._        _.-'_.-'    |                                  </span><br><span class="line">  `-._    `-._`-.__.-'_.-'    _.-'                                   </span><br><span class="line">      `-._    `-.__.-'    _.-'                                       </span><br><span class="line">          `-._        _.-'                                           </span><br><span class="line">              `-.__.-'                                               </span><br><span class="line"></span><br><span class="line">10869:M 05 Mar 2019 13:33:39.046 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span><br><span class="line">10869:M 05 Mar 2019 13:33:39.046 # Server initialized</span><br><span class="line">10869:M 05 Mar 2019 13:33:39.047 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.</span><br><span class="line">10869:M 05 Mar 2019 13:33:39.047 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.</span><br><span class="line">10869:M 05 Mar 2019 13:33:39.047 * DB loaded from disk: 0.000 seconds</span><br><span class="line">10869:M 05 Mar 2019 13:33:39.047 * Ready to accept connections</span><br></pre></td></tr></table></figure><p><strong>退出</strong>：<code>CTRL+C</code></p><h3 id="2-2-后台启动"><a href="#2-2-后台启动" class="headerlink" title="2.2 后台启动"></a>2.2 后台启动</h3><p>(<strong>注意要使用后台启动需要修改<code>redis.conf</code>里的<code>daemonize</code>改为<code>yes</code></strong>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost etc]# vim redis.conf </span><br><span class="line"><span class="meta">#</span>主要修改下面这个daemonize</span><br><span class="line"><span class="meta">#</span> By default Redis does not run as a daemon. Use 'yes' if you need it.</span><br><span class="line"><span class="meta">#</span> Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</span><br><span class="line"><span class="meta">#</span> daemonize no 把这个改为yes no代表前台启动 yes代表后台启动</span><br><span class="line">daemonize yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> The working directory.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> The DB will be written inside this directory, with the filename specified</span><br><span class="line"><span class="meta">#</span> above using the 'dbfilename' configuration directive.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> The Append Only File will also be created inside this directory.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> Note that you must specify a directory here, not a file name.</span><br><span class="line"><span class="meta">#</span> dir ./  这个是工作区 默认为./ 即上级目录 这里也改一下</span><br><span class="line">dir /usr/local/redis/etc</span><br></pre></td></tr></table></figure><p>再次启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost etc]# /usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf</span><br></pre></td></tr></table></figure><p><strong>验证启动是否成功</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost etc]#/ps aux|grep redis</span><br><span class="line"></span><br><span class="line">root      11012  0.2  0.2 153880  2344 ?        Ssl  13:36   0:00 /usr/local/redis/bin/redis-server 127.0.0.1:6379</span><br><span class="line">root      11126  0.0  0.0 112708   976 pts/2    R+   13:39   0:00 grep --color=auto redis</span><br></pre></td></tr></table></figure><p>redis启动成功端口号也是默认的6379。</p><h3 id="2-3-使用"><a href="#2-3-使用" class="headerlink" title="2.3 使用"></a>2.3 使用</h3><h4 id="1-进入客户端"><a href="#1-进入客户端" class="headerlink" title="1. 进入客户端"></a>1. 进入客户端</h4><p>进入redis客户端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>语法redis-cli -h host -p port -a password</span><br><span class="line"><span class="meta">#</span>连接本机则不用写host和port 这里没设置密码也不用写</span><br><span class="line"></span><br><span class="line">[root@localhost etc]# /usr/local/redis/bin/redis-cli </span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>成功进入Redis客户端</p><p>随意操作一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or set)</span><br><span class="line">127.0.0.1:6379&gt; set name illusory</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) "name"</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">"illusory"</span><br><span class="line">127.0.0.1:6379&gt; set age 22</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line">"22"</span><br><span class="line">127.0.0.1:6379&gt; quit #退出命令</span><br><span class="line">[root@localhost etc]#</span><br></pre></td></tr></table></figure><p><strong>退出客户端</strong>：<code>quit</code></p><h4 id="2-关闭Redis"><a href="#2-关闭Redis" class="headerlink" title="2. 关闭Redis"></a>2. 关闭Redis</h4><p>退出redis服务的三种方法：</p><ul><li>1.<code>pkill redis-server</code>、</li><li>2.<code>kill 进程号</code>、</li><li>3.<code>/usr/local/redis/bhi/redis-cli shutdown</code></li></ul><h4 id="3-dump-rdb文件"><a href="#3-dump-rdb文件" class="headerlink" title="3. dump.rdb文件"></a>3. dump.rdb文件</h4><p>由于前面配置文件中配置的是<code>dir /usr/local/redis/etc</code>,所以Redis的所有数据都会存储在这个目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost etc]# ll</span><br><span class="line">total 68</span><br><span class="line">-rw-r--r--. 1 root root    92 Mar  5 13:36 dump.rdb</span><br><span class="line">-rw-r--r--. 1 root root 62174 Mar  5 13:36 redis.conf</span><br></pre></td></tr></table></figure><p>确实有这个文件。<strong>这个文件删除后Redis中的数据就真的没了</strong>。</p><h2 id="3-参考"><a href="#3-参考" class="headerlink" title="3. 参考"></a>3. 参考</h2><p><code>http://www.runoob.com/redis/redis-hashes.html</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录了如何在Linux(CentOS 7)下安装Redis与Redis基本使用与配置。&lt;/p&gt;
    
    </summary>
    
      <category term="Redis" scheme="https://www.lixueduan.com/categories/Redis/"/>
    
    
      <category term="Redis" scheme="https://www.lixueduan.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Nginx入门教程(四)---反向代理与负载均衡</title>
    <link href="https://www.lixueduan.com/posts/930200c5.html"/>
    <id>https://www.lixueduan.com/posts/930200c5.html</id>
    <published>2019-02-17T14:00:00.000Z</published>
    <updated>2019-03-08T15:32:27.733Z</updated>
    
    <content type="html"><![CDATA[<p>本章主要对Nginx服务器的常用配置文件，包括虚拟主机配置，location配置级语法等。</p><a id="more"></a><blockquote><p><strong><a href="https://www.lixueduan.com/categories/">Nginx入门教程系列文章目录</a></strong></p><p><a href="https://www.lixueduan.com/posts/545ed69.html">Nginx入门教程(一)—安装与配置</a></p><p><a href="https://www.lixueduan.com/posts/5a0a337e.html">Nginx入门教程(二)—配置文件详解</a></p><p><a href="https://www.lixueduan.com/posts/3ebafd31.html">Nginx入门教程(三)—日志文件切割</a></p><p><a href="https://www.lixueduan.com/posts/930200c5.html">Nginx入门教程(四)—反向代理与负载均衡</a></p><p>……</p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-反向代理-proxy"><a href="#1-反向代理-proxy" class="headerlink" title="1. 反向代理(proxy)"></a>1. 反向代理(proxy)</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><p><strong>如果您的内容服务器具有必须保持安全的敏感信息，如信用卡号数据库，可在防火墙外部设置一个<code>代理服务器</code>作为<code>内容服务器的替身</code></strong>。</p><p>当外部客户机尝试访问内容服务器时，会将其送到代理服务器。实际内容位于内容服务器上，在防火墙内部受到安全保护。代理服务器位于防火墙外部，在客户机看来就像是内容服务器。</p><p> 这样，代理服务器就在安全数据库和可能的恶意攻击之间提供了又一道屏障。与有权访问整个数据库的情况相对比，就算是侥幸攻击成功，作恶者充其量也仅限于访问单个事务中所涉及的信息。未经授权的用户无法访问到真正的内容服务器，因为防火墙通路只允许代理服务器有权进行访问。</p><p><strong>就是客户端先访问Nginx服务器，Nginx收到请求后再去请求内容服务器,这样中间多了一个Nginx服务器中转，会更加安全</strong>。</p><h3 id="1-2-配置"><a href="#1-2-配置" class="headerlink" title="1.2 配置"></a>1.2 配置</h3><h4 id="1-修改配置文件"><a href="#1-修改配置文件" class="headerlink" title="1. 修改配置文件"></a>1. 修改配置文件</h4><p>首先需要修改<code>Nginx服务器</code>配置文件<code></code>nginx.conf`。</p><p>配置文件大概是这样的，在<code>server</code>中添加一个<code>location</code>用于中转。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line">    server&#123;</span><br><span class="line">        listen 80; //端口号</span><br><span class="line">        server_name localhost; //域名</span><br><span class="line">        <span class="attribute">location</span> \ &#123;</span><br><span class="line">            root html; //网站根目录</span><br><span class="line">            index index.html; //网站首页</span><br><span class="line">        &#125;  </span><br><span class="line">        access_log  logs/host.access.log  main; //访问日志</span><br><span class="line">        error page 500 error.html; //错误页面</span><br><span class="line">        <span class="comment">#这里就是代理 通过正则表达式来匹配</span></span><br><span class="line">        <span class="comment">#后缀以.jsp结尾的请求都会跳转到 http://192.168.5.154:8080;</span></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ \.jsp$</span> &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span>   http://192.168.5.154:8080;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-开启内容服务器"><a href="#2-开启内容服务器" class="headerlink" title="2. 开启内容服务器"></a>2. 开启内容服务器</h4><p>然后在<code>192.168.5.154</code>的<code>8080</code>端口开启了一个<code></code>tomcat<code>,当做是真正的内容服务器，在tomcat默认的</code>index.jsp`中添加了一句显示IP地址的。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--测试Nginx反向代理新增--&gt;</span><br><span class="line">remote ip:&lt;%=request.getRemoteAddr()%&gt;</span><br></pre></td></tr></table></figure><h3 id="1-3-测试"><a href="#1-3-测试" class="headerlink" title="1.3 测试"></a>1.3 测试</h3><p>然后开始访问：</p><p>首先直接访问内容服务器(Tomcat)：<code>192.168.5.154:8080</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">remote ip:<span class="number">192.168</span>.5.199</span><br></pre></td></tr></table></figure><p>然后访问Nginx通过代理来访问内容服务器：<code>192.168.5.154/index.jsp</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">remote ip:<span class="number">192.168</span>.5.154</span><br></pre></td></tr></table></figure><p>显示远程    IP是192.168.5.154，这个刚好就是Nginx服务器的IP；</p><p>反向代理成功。</p><h3 id="1-4-问题"><a href="#1-4-问题" class="headerlink" title="1.4 问题"></a>1.4 问题</h3><p>前面设置后反向代理已经成功了,但是这样设置后，每次访问内容服务器都显示的是Nginx服务器的IP,内容服务器无法获取用户的真实IP，所以还需要进行一点修改。</p><h4 id="1-修改"><a href="#1-修改" class="headerlink" title="1. 修改"></a>1. 修改</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line">    server&#123;</span><br><span class="line">        listen 80; //端口号</span><br><span class="line">        server_name localhost; //域名</span><br><span class="line">        <span class="attribute">location</span> \ &#123;</span><br><span class="line">            root html; //网站根目录</span><br><span class="line">            index index.html; //网站首页</span><br><span class="line">        &#125;  </span><br><span class="line">        access_log  logs/host.access.log  main; //访问日志</span><br><span class="line">        error page 500 error.html; //错误页面</span><br><span class="line">        <span class="comment">#这里就是代理 通过正则表达式来匹配</span></span><br><span class="line">        <span class="comment">#后缀以.jsp结尾的请求都会跳转到 http://192.168.5.154:8080;</span></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ \.jsp$</span> &#123;</span><br><span class="line">            <span class="comment">#在请求头中添加上真实的IP </span></span><br><span class="line">            <span class="comment">#具体格式为 proxy_set_header 属性名 数据</span></span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-real-ip <span class="variable">$remote_addr</span></span><br><span class="line">            proxy_pass   http://192.168.5.154:8080;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>proxy_set_header X-real-ip $remote_addr</code> :Nginx服务器是知道客户端真实IP的，所以为了让内容服务器知道真实IP，只需要将真实IP添加到请求头中就可以了。</p><p>其中<code>X-real-ip</code> 是自定义的，内容服务器取数据时也使用这个<code>X-real-ip</code></p><p><code>$remote_addr</code> 则是获取远程客户端IP。</p><h4 id="2-测试："><a href="#2-测试：" class="headerlink" title="2. 测试："></a>2. 测试：</h4><p>修改jsp，添加了一句代码。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">         &lt;!--测试Nginx反向代理新增--&gt;</span><br><span class="line">&lt;!--获取请求头中的真实IP--&gt;</span><br><span class="line">         Real remote ip:&lt;%=request.getHeader(<span class="string">"X-real-ip"</span>)%&gt; &lt;br /&gt;</span><br><span class="line">         remote ip/Nginx ip:&lt;%=request.getRemoteAddr()%&gt;</span><br></pre></td></tr></table></figure><p>然后开始访问：</p><p>首先直接访问内容服务器(Tomcat)：<code>192.168.5.154:8080</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Real remote ip:<span class="keyword">null</span> </span><br><span class="line">remote ip/Nginx ip:<span class="number">192.168</span>.5.199</span><br></pre></td></tr></table></figure><p>然后访问Nginx通过代理来访问内容服务器：<code>192.168.5.154/index.jsp</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Real remote ip:<span class="number">192.168</span>.5.199 </span><br><span class="line">remote ip/Nginx ip:<span class="number">192.168</span>.5.154</span><br></pre></td></tr></table></figure><p>成功获取到真实IP，问题解决。</p><h2 id="2-负载均衡-upstream"><a href="#2-负载均衡-upstream" class="headerlink" title="2. 负载均衡(upstream)"></a>2. 负载均衡(upstream)</h2><h3 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h3><p><strong>可以在一个组织内使用多个代理服务器来平衡各 Web 服务器间的网络负载</strong>。</p><p>对于客户机发往真正服务器的请求，代理服务器起着中间调停者的作用。客户机每次都使用同一个 URL，但请求所采取的路由每次都可能经过不同的代理服务器。</p><p><strong>同样是客户端先访问Nginx服务器，然后Nginx服务器再根据负载均衡算法将请求分发到不同的内容服务器上</strong>。</p><h3 id="2-2-配置"><a href="#2-2-配置" class="headerlink" title="2.2 配置"></a>2.2 配置</h3><p>同意需要修改<code>Nginx服务器</code>配置文件<code></code>nginx.conf`。</p><p>配置文件大概是这样的，在<code>server</code>中添加一个<code>location</code>用于中转。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line">    <span class="comment">#upstream 负载均衡 与server同级</span></span><br><span class="line">    <span class="comment">#tomcat_server 负载均衡名字 自定义的 </span></span><br><span class="line">    <span class="comment">#要用在下面location反向代理处 </span></span><br><span class="line">    <span class="comment">#poxy_pass   http://tomcat_server;</span></span><br><span class="line">    <span class="attribute">upstream</span> tomcat_server&#123;</span><br><span class="line">        <span class="comment">#weight权重 max_fails 最大失败次数 超过后就认为该节点down掉了 fail_timeout 超时时间</span></span><br><span class="line">        <span class="comment">#192.168.5.154:8080 IP地址或者域名都可以</span></span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.5.154:8080</span> weight=<span class="number">1</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">30s</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.5.155:8080</span> weight=<span class="number">1</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">30s</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    server&#123;</span><br><span class="line">        listen 80; //端口号</span><br><span class="line">        server_name localhost; //域名</span><br><span class="line">        <span class="attribute">location</span> \ &#123;</span><br><span class="line">            root html; //网站根目录</span><br><span class="line">            index index.html; //网站首页</span><br><span class="line">        &#125;  </span><br><span class="line">        access_log  logs/host.access.log  main; //访问日志</span><br><span class="line">        error page 500 error.html; //错误页面</span><br><span class="line">        <span class="comment">#proxy_pass 反向代理 通过正则表达式来匹配</span></span><br><span class="line">        <span class="comment">#后缀以.jsp结尾的请求都会跳转到 http://192.168.5.154:8080;</span></span><br><span class="line">        <span class="comment">#proxy_set_header 将真实IP添加到请求头中 传递到内容服务器</span></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ \.jsp$</span> &#123;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-real-ip <span class="variable">$remote_addr</span></span><br><span class="line">            <span class="comment">#proxy_pass   http://192.168.5.154:8080;</span></span><br><span class="line">            <span class="comment">#反向代理这里不光可以写IP 还可以写上面配置的负载均衡</span></span><br><span class="line">            proxy_pass   http://tomcat_server;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-测试"><a href="#2-3-测试" class="headerlink" title="2.3 测试"></a>2.3 测试</h3><p>开启两个tomcat，一个是<code>192.168.5.154</code>,一个是<code></code>192.168.5.155`.</p><p>然后浏览器访问nginx服务器：<code>192.168.5.154/index.jsp</code>；</p><p>会随机跳转到两个tomcat服务器中的一个就说明负载均衡配置成功了。</p><h2 id="3-参考"><a href="#3-参考" class="headerlink" title="3. 参考"></a>3. 参考</h2><p><code>http://www.runoob.com/linux/nginx-install-setup.html</code></p><p><code>https://www.cnblogs.com/javahr/p/8318728.html</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章主要对Nginx服务器的常用配置文件，包括虚拟主机配置，location配置级语法等。&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="https://www.lixueduan.com/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://www.lixueduan.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx入门教程(三)---日志文件切割</title>
    <link href="https://www.lixueduan.com/posts/3ebafd31.html"/>
    <id>https://www.lixueduan.com/posts/3ebafd31.html</id>
    <published>2019-02-16T14:00:00.000Z</published>
    <updated>2019-03-08T15:32:13.483Z</updated>
    
    <content type="html"><![CDATA[<p>本章主要对Nginx服务器的日志文件分析，包括<code>日志文件切割</code>与<code>cron定时任务</code>语法详解。</p><a id="more"></a><blockquote><p><strong><a href="https://www.lixueduan.com/categories/">Nginx入门教程系列文章目录</a></strong></p><p><a href="https://www.lixueduan.com/posts/545ed69.html">Nginx入门教程(一)—安装与配置</a></p><p><a href="https://www.lixueduan.com/posts/5a0a337e.html">Nginx入门教程(二)—配置文件详解</a></p><p><a href="https://www.lixueduan.com/posts/3ebafd31.html">Nginx入门教程(三)—日志文件切割</a></p><p><a href="https://www.lixueduan.com/posts/930200c5.html">Nginx入门教程(四)—反向代理与负载均衡</a></p><p>……</p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-日志文件"><a href="#1-日志文件" class="headerlink" title="1. 日志文件"></a>1. 日志文件</h2><p>再看一下Nginx目录结构</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx</span><br><span class="line">--conf配置文件</span><br><span class="line">--html  网页文件</span><br><span class="line">--logs  日志文件</span><br><span class="line">--sbin  主要二进制文件</span><br></pre></td></tr></table></figure><h3 id="1-1-查看日志"><a href="#1-1-查看日志" class="headerlink" title="1.1 查看日志"></a>1.1 查看日志</h3><p>前面看了<code>conf配置文件</code>，这里看下<code>logs日志文件</code>;</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/logs</span><br><span class="line">-- access.log #访问日志</span><br><span class="line"> -- error.log  #错误日志</span><br><span class="line"> -- nginx.pid  #存放Nginx当前进程的pid</span><br></pre></td></tr></table></figure><p><code>nginx.pid</code> 存放Nginx当前进程的pid</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost logs]# cat nginx.pid</span><br><span class="line">98830</span><br><span class="line">[root@localhost logs]# ps aux|grep nginx</span><br><span class="line"><span class="attribute">root</span>      <span class="number">98830</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">20552</span>   <span class="number">616</span> ?        Ss   <span class="number">09</span>:<span class="number">57</span>   <span class="number">0</span>:<span class="number">00</span> nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class="line">nobody    <span class="number">98831</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">1</span>  <span class="number">23088</span>  <span class="number">1636</span> ?        S    <span class="number">09</span>:<span class="number">57</span>   <span class="number">0</span>:<span class="number">00</span> nginx: worker process</span><br><span class="line">root     <span class="number">105254</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span> <span class="number">112708</span>   <span class="number">976</span> pts/<span class="number">1</span>    R+   <span class="number">11</span>:<span class="number">02</span>   <span class="number">0</span>:<span class="number">00</span> grep --color=auto nginx</span><br></pre></td></tr></table></figure><p><code>access.log</code> 访问日志</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost logs]# tail -f -n 20  access.log</span><br><span class="line"></span><br><span class="line">192.168.5.199 - - [04/Mar/2019:10:02:10 +0800] "GET / HTTP/1.1" 200 612 "-" "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36"</span><br><span class="line">192.168.5.199 - - [04/Mar/2019:10:02:10 +0800] "GET /favicon.ico HTTP/1.1" 404 555 "http://192.168.5.154/" "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36"</span><br></pre></td></tr></table></figure><h3 id="1-2-日志分割"><a href="#1-2-日志分割" class="headerlink" title="1.2 日志分割"></a>1.2 日志分割</h3><p>Nginx日志都会存在一个文件里，随着时间推移，这个日志文件会变得非常大，分析的时候很难操作，所以需要对日志文件进行分割，可以根据访问量来进行选择：如按照天分割、或者半天、小时等。</p><p>建议使用shell脚本方式进行切割日志 。</p><h4 id="1-编写脚本"><a href="#1-编写脚本" class="headerlink" title="1. 编写脚本"></a>1. 编写脚本</h4><p>脚本如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/sh</span><br><span class="line"><span class="meta">#</span>根路径</span><br><span class="line">BASE_DIR=/usr/local/nginx</span><br><span class="line"><span class="meta">#</span>最开始的日志文件名</span><br><span class="line">BASE_FILE_NAME_ACCESS=access.log</span><br><span class="line">BASE_FILE_NAME_ERROR=error.log</span><br><span class="line">BASE_FILE_NAME_PID=nginx.pid</span><br><span class="line"><span class="meta">#</span>默认日志存放路径</span><br><span class="line">DEFAULT_PATH=$BASE_DIR/logs</span><br><span class="line"><span class="meta">#</span>日志备份根路径</span><br><span class="line">BASE_BAK_PATH=$BASE_DIR/datalogs</span><br><span class="line"></span><br><span class="line">BAK_PATH_ACCESS=$BASE_BAK_PATH/access</span><br><span class="line">BAK_PATH_ERROR=$BASE_BAK_PATH/error</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>默认日志文件路径+文件名</span><br><span class="line">DEFAULT_FILE_ACCESS=$DEFAULT_PATH/$BASE_FILE_NAME_ACCESS</span><br><span class="line">DEFAULT_FILE_ERROR=$DEFAULT_PATH/$BASE_FILE_NAME_ERROR</span><br><span class="line"><span class="meta">#</span>备份时间</span><br><span class="line">BAK_TIME=`/bin/date -d yesterday +%Y%m%d%H%M`</span><br><span class="line"><span class="meta">#</span>备份文件 路径+文件名</span><br><span class="line">BAK_FILE_ACCESS=$BAK_PATH_ACCESS/$BAK_TIME-$BASE_FILE_NAME_ACCESS</span><br><span class="line">BAK_FILE_ERROR=$BAK_PATH_ERROR/$BAK_TIME-$BASE_FILE_NAME_ERROR</span><br><span class="line">        </span><br><span class="line"><span class="meta">#</span> 打印一下备份文件 </span><br><span class="line">echo access.log备份成功：$BAK_FILE_ACCESS</span><br><span class="line">echo error.log备份成功：$BAK_FILE_ERROR</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>移动文件</span><br><span class="line">mv $DEFAULT_FILE_ACCESS $BAK_FILE_ACCESS</span><br><span class="line">mv $DEFAULT_FILE_ERROR $BAK_FILE_ERROR</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>向nginx主进程发信号重新打开日志</span><br><span class="line">kill -USR1 `cat $DEFAULT_PATH/$BASE_FILE_NAME_PID`</span><br></pre></td></tr></table></figure><p> 其实很简单，主要步骤如下：</p><ul><li>1.移动日志文件：这里已经将日志文件移动到<code></code>datalogs`目录下了，但Nginx还是会继续往这里面写日志</li><li>2.发送<code>USR1</code>命令：告诉Nginx把日志写到<code></code>Nginx.conf`中配置的那个文件中，这里会重新生成日志文件</li></ul><p>具体如下：</p><ul><li><strong>第一步</strong>:就是重命名日志文件，不用担心重命名后nginx找不到日志文件而丢失日志。在你未重新打开原名字的日志文件前(即执行第二步之前)，nginx还是会向你重命名的文件写日志，Linux是靠<code>文件描述符</code>而不是<code>文件名</code>定位文件。</li><li><strong>第二步</strong>:向nginx主进程发送<code>USR1信号</code>。nginx主进程接到信号后会从配置文件中读取日志文件名称，重新打开日志文件(以配置文件中的日志名称命名)，并以工作进程的用户作为日志文件的所有者。重新打开日志文后，nginx主进程会关闭重名的日志文件并通知工作进程使用新打开的日志文件。(就不会继续写到前面备份的那个文件中了)工作进程立刻打开新的日志文件并关闭重名名的日志文件。然后你就可以处理旧的日志文件了。</li></ul><h4 id="2-赋权"><a href="#2-赋权" class="headerlink" title="2. 赋权"></a>2. 赋权</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost sbin]# chmod 777 log.sh</span><br></pre></td></tr></table></figure><p>将<code>log.sh</code>脚本设置为可执行文件</p><h4 id="3-执行"><a href="#3-执行" class="headerlink" title="3. 执行"></a>3. 执行</h4><p>设置一个定时任务用于周期性的执行该脚本</p><p><code>cron</code>是一个linux下的定时执行工具，可以在无需人工干预的情况下运行作业。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">service crond start   //启动服务</span><br><span class="line"></span><br><span class="line">service crond stop    //关闭服务</span><br><span class="line"></span><br><span class="line">service crond restart  //重启服务</span><br><span class="line"></span><br><span class="line">service crond reload  //重新载入配置</span><br><span class="line"></span><br><span class="line">service crond status  //查看服务状态</span><br></pre></td></tr></table></figure><p><strong>设置定时任务</strong>：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost datalogs]# crontab -e</span><br><span class="line"></span><br><span class="line">*/1 * * * * sh /usr/local/nginx/sbin/log.sh</span><br></pre></td></tr></table></figure><p><code>*/1 * * * *</code>： 为定时时间 这里为了测试 是设置的每分钟执行一次；</p><p><code>0 2 * * *</code> :每天凌晨两点执行</p><p><code>sh</code> ：为任务类型 这里是一个sh脚本</p><p><code>/usr/local/nginx/sbin/log.sh</code> ：为脚本路径</p><h4 id="4-Nginx信号量"><a href="#4-Nginx信号量" class="headerlink" title="4. Nginx信号量"></a>4. Nginx信号量</h4><p>Nginx支持以下几种信号选项：</p><ul><li><strong>TERM，INT</strong> :  快速关闭</li><li><strong>QUIT</strong> ：从容关闭（优雅的关闭进程,即等请求结束后再关闭)</li><li><strong>HUP</strong> ：平滑重启，重新加载配置文件 （平滑重启，修改配置文件之后不用重启服务器。直接kill -PUT 进程号即可）</li><li><strong>USR1</strong> ：重新读取日志文件，在切割日志时用途较大（停止写入老日志文件，打开新日志文件，之所以这样是因为老日志文件就算修改的文件名，由于inode的原因，nginx还会一直往老的日志文件写入数据） </li><li><strong>USR2</strong> ：平滑升级可执行程序  ，nginx升级时候用                           　　　　 </li><li><strong>WINCH</strong> ：从容关闭工作进程 </li></ul><h2 id="2-cron表达式"><a href="#2-cron表达式" class="headerlink" title="2.cron表达式"></a>2.cron表达式</h2><h3 id="2-1-基本语法"><a href="#2-1-基本语法" class="headerlink" title="2.1 基本语法"></a>2.1 基本语法</h3><p>　cron表达式代表一个时间的集合，使用6个空格分隔的字段表示：</p><table><thead><tr><th>字段名</th><th>是否必须</th><th>允许的值</th><th>允许的特定字符</th></tr></thead><tbody><tr><td>秒(Seconds)</td><td>是</td><td>0-59</td><td>* / , -</td></tr><tr><td>分(Minute)</td><td>是</td><td>0-59</td><td>* / , -</td></tr><tr><td>时(Hours)</td><td>是</td><td>0-23</td><td>* / , -</td></tr><tr><td>日(Day of month)</td><td>是</td><td>1-31</td><td>* / , - ?</td></tr><tr><td>月(Month)</td><td>是</td><td>1-12 或 JAN-DEC</td><td>* / , -</td></tr><tr><td>星期(Day of week)</td><td>否</td><td>0-6 或 SUM-SAT</td><td>* / , - ?</td></tr></tbody></table><p>注：月(Month)和星期(Day of week)字段的值不区分大小写，如：SUN、Sun 和 sun 是一样的。 </p><p><strong>星期字段没提供相当于<code>*</code></strong></p><p><strong>一般只需要写5位就行了。即 <code>分 时 日 月 周</code></strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># ┌───────────── min (0 - 59)</span><br><span class="line"># │ ┌────────────── hour (0 - 23)</span><br><span class="line"># │ │ ┌─────────────── day of month (1 - 31)</span><br><span class="line"># │ │ │ ┌──────────────── month (1 - 12)</span><br><span class="line"># │ │ │ │ ┌───────────────── day of week (0 - 6) (0 to 6 are Sunday to</span><br><span class="line"># │ │ │ │ │                  Saturday, or use names; 7 is also Sunday)</span><br><span class="line"># │ │ │ │ │</span><br><span class="line"># │ │ │ │ │</span><br><span class="line"># * * * * *  command to execute</span><br></pre></td></tr></table></figure><h3 id="2-2-特定字符"><a href="#2-2-特定字符" class="headerlink" title="2.2 特定字符"></a>2.2 特定字符</h3><ul><li><strong>星号(*)</strong>:表示 cron 表达式能匹配该字段的所有值。如在第2个字段使用星号(hour)，表示每小时</li><li><strong>斜线(/)</strong>:表示增长间隔，如第1个字段(minutes) 值是 <code>3/1</code>，表示每小时的第3分钟开始执行一次，之后每隔1分钟执行一次（1,2,3,4….59都执行一次）</li><li><strong>逗号(,)</strong>:用于枚举值，如第6个字段值是 MON,WED,FRI，表示 星期一、三、五 执行。</li><li><strong>连字号(-)</strong>:表示一个范围，如第3个字段的值为 9-17 表示 9am 到 5pm 之间每个小时（包括9和17）</li><li><strong>问号(?)</strong>:只用于 日(Day of month) 和 星期(Day of week)，表示不指定值，可以用于代替 *</li></ul><h2 id="3-参考"><a href="#3-参考" class="headerlink" title="3. 参考"></a>3. 参考</h2><p><code>https://www.cnblogs.com/crazylqy/p/6891929.html</code></p><p><code>http://www.runoob.com/linux/nginx-install-setup.html</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章主要对Nginx服务器的日志文件分析，包括&lt;code&gt;日志文件切割&lt;/code&gt;与&lt;code&gt;cron定时任务&lt;/code&gt;语法详解。&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="https://www.lixueduan.com/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://www.lixueduan.com/tags/Nginx/"/>
    
  </entry>
  
</feed>
