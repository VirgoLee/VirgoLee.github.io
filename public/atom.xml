<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>幻境云图</title>
  
  <subtitle>不忘初心,方得始终</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.lixueduan.com/"/>
  <updated>2018-12-31T16:01:50.402Z</updated>
  <id>https://www.lixueduan.com/</id>
  
  <author>
    <name>illusoryCloud</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo个人博客之转移（四）</title>
    <link href="https://www.lixueduan.com/hexo/hexo-blog-tranfer-four/"/>
    <id>https://www.lixueduan.com/hexo/hexo-blog-tranfer-four/</id>
    <published>2018-12-27T14:00:00.000Z</published>
    <updated>2018-12-31T16:01:50.402Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 01 2019 00:57:11 GMT+0800 (GMT+08:00) --><p>本章主要记录了如何通过使用<code>Github</code>的<code>分支功能</code>解决更换电脑后博客更新不方便的问题，让你的博客能在各个电脑上灵活切换。在也不用担心换电脑后博客配置丢失等问题了。</p><a id="more"></a><blockquote><p>这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。</p><p><a href="https://www.lixueduan.com/hexo/hexo-blog-setup-one/">Hexo个人博客之搭建（一）</a></p><p><a href="https://www.lixueduan.com/hexo/hexo-blog-config-two/">Hexo个人博客之优化（二）</a></p><p><a href="https://www.lixueduan.com/hexo/hexo-blog-deploy-three/">Hexo个人博客之部署（三）</a></p><p><a href="https://www.lixueduan.com/hexo/hexo-blog-tranfer-four/">Hexo个人博客之转移（四）</a></p></blockquote><p>到此为止，我们已经完成了差不多所有的步骤。</p><ul><li>1.搭建博客</li><li>2.优化主题</li><li>3.部署收录</li></ul><p><strong>新问题：</strong></p><p>​ 现在博客只能在自己的电脑上更新，如果换电脑了就很麻烦。配置文件主题什么的都要重新弄。所以网上找了找多台电脑同时操作的办法，我们可以利用Github的分支功能。</p><p>​ 将博客文件夹下所有文件全<code>push</code>到<code>Github</code>。这样换电脑后直接<code>pull</code>就可以了。</p><h2 id="1-新建分支"><a href="#1-新建分支" class="headerlink" title="1. 新建分支"></a>1. 新建分支</h2><ul><li><p>1.在<code>Github</code>的<code>lillusory.github.io</code>（hexo仓库）上新建一个分支，例如<code>Hexo</code>，并切换到该分支.</p></li><li><p>2.并在该仓库<code>Settings-&gt;Branches-&gt;Default branch</code>中将默认分支设为<code>Hexo</code>.<code>Hexo</code>分支是博客的开发环境，用来写博客，保存原始文件,<code>master</code>分支用于显示，保存生产的静态文件。</p></li><li><p>3.新建分支后将博客目录下的所有文件上传到该分支，注意由于一个<code>git仓库</code>中不能包含其他仓库，所以需要删除掉主题文件夹中的<code>.git</code>目录。</p></li><li><p>4.如果按照前面的博文添加了背景，则需要删掉<code>站点目录\themes\next\source\lib\canvas-nest</code>文件夹中的<code>.git</code>目录。以后需要更新主题时，可以先克隆到本地在复制到相应目录.</p></li></ul><h2 id="2-写博客"><a href="#2-写博客" class="headerlink" title="2. 写博客"></a>2. 写博客</h2><p>在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理。</p><ul><li>依次执行<code>git add .</code>、<code>git commit -m &quot;这里写备注&quot;</code>、<code>git push origin 这里写分支名字</code>指令将改动推送到GitHub（此时当前分支应为hexo）。</li><li>然后才执行<code>hexo g -d</code>发布网站到master分支上。</li></ul><h2 id="3-博客转移"><a href="#3-博客转移" class="headerlink" title="3. 博客转移"></a>3. 博客转移</h2><p>当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：</p><ul><li>克隆仓库<ul><li>使用<code>git clone git@github.com:lillusorycloud/lillusory.github.io.git</code>拷贝仓库（默认分支为hexo）；//修改成自己的</li></ul></li><li>安装插件 在前面克隆下的项目中安装插件<ul><li>执行命令<code>npm install hexo、npm install</code>、<code>npm install hexo-deployer-git</code></li></ul></li></ul><h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h2><p><a href="https://blog.csdn.net/qq_25560423/article/details/53785707" target="_blank" rel="noopener">如何在多台电脑上更新博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 01 2019 00:57:11 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;本章主要记录了如何通过使用&lt;code&gt;Github&lt;/code&gt;的&lt;code&gt;分支功能&lt;/code&gt;解决更换电脑后博客更新不方便的问题，让你的博客能在各个电脑上灵活切换。在也不用担心换电脑后博客配置丢失等问题了。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://www.lixueduan.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://www.lixueduan.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo个人博客之部署（三）</title>
    <link href="https://www.lixueduan.com/hexo/hexo-blog-deploy-three/"/>
    <id>https://www.lixueduan.com/hexo/hexo-blog-deploy-three/</id>
    <published>2018-12-25T04:00:00.000Z</published>
    <updated>2018-12-31T15:53:55.878Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 01 2019 00:57:11 GMT+0800 (GMT+08:00) --><p>本章主要记录了如何将博客部署至云端，怎么设置个性域名，怎么将自己的网站提交到百度Google。让自己的网站能够出现在各大搜索引擎的具体方法和过程，希望能对大家有帮助。</p><a id="more"></a><blockquote><p>这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。</p><p><a href="https://www.lixueduan.com/hexo/hexo-blog-setup-one/">Hexo个人博客之搭建（一）</a></p><p><a href="https://www.lixueduan.com/hexo/hexo-blog-config-two/">Hexo个人博客之优化（二）</a></p><p><a href="https://www.lixueduan.com/hexo/hexo-blog-deploy-three/">Hexo个人博客之部署（三）</a></p><p><a href="https://www.lixueduan.com/hexo/hexo-blog-tranfer-four/">Hexo个人博客之转移（四）</a></p></blockquote><h2 id="1-购买个性域名"><a href="#1-购买个性域名" class="headerlink" title="1. 购买个性域名"></a>1. 购买个性域名</h2><p>估计大家折腾了这么久也就是为 了拥有一个自己的个性站点,所以强烈建议大家为自己的博客站点配置一个独一无二的个性域名.我这里选择阿里旗下的<a href="https://wanwang.aliyun.com/?spm=5176.8142029.735711.62.f0586d3eFXYcmo" target="_blank" rel="noopener">万网</a>。我的域名是<a href="https://www.lixueduan.com">www.lixueduan.com</a></p><p>大家可以选择一个自己喜欢的域名。等部署完毕就可以通过域名访问自己的博客了。</p><p><strong>问题：</strong></p><ul><li><p><strong>GithubPages/CodingPages</strong></p><ul><li>Github Pages是<a href="https://github.com/" target="_blank" rel="noopener">Github</a>免费提供给开发者的一款托管个人网站的产品。</li><li>Coding Pages也是<a href="https://coding.net/" target="_blank" rel="noopener">Coding</a>免费提供给开发者的一款托管个人网站的产品。</li></ul></li><li><p><strong>关于为什么要部署两次</strong></p><blockquote><p>虽然可以根据自定义域名来访问自己的博客了，但是百度谷歌上都搜索不到，那岂不是很难受<code>╮(╯▽╰)╭</code>。</p><p>所以接下来为了让自己的博客能够被搜索出来，就需要让百度谷歌收录我们的网站。在部署收录过程中发现，<strong><code>Github</code>屏蔽了百度的爬虫</strong>，所以搭建上<code>GithubPages</code>的话无法提交至百度，只有Google可以收录。</p><p>所以为了让百度收录我们网站，就得在Coding上也搭建一个。</p><p>同时在搭建的过程中发现如果先搭建在Github上，然后再搭建Coding时会出现<code>DNS解析</code>冲突。所以需要：<strong>先搭建Coding上的，再搭建Github上的，国外的访问则走<code>Github</code>，国内的访问会走<code>Coding</code>，完美</strong></p></blockquote></li></ul><h2 id="2-部署到CodingPages"><a href="#2-部署到CodingPages" class="headerlink" title="2. 部署到CodingPages"></a>2. 部署到CodingPages</h2><h3 id="2-1-注册coding账户"><a href="#2-1-注册coding账户" class="headerlink" title="2.1 注册coding账户"></a>2.1 注册coding账户</h3><p>点击这里注册Coding](<a href="https://coding.net/" target="_blank" rel="noopener">https://coding.net/</a>)</p><h3 id="2-2-创建新项目"><a href="#2-2-创建新项目" class="headerlink" title="2.2 创建新项目"></a>2.2 创建新项目</h3><ul><li>注册好后创建一个项目用来部署个人博客，项目路径和项目名称最好和用户名一致</li><li><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-deploy-coding1.png" alt=""></li></ul><h3 id="2-3-开启CodingPages"><a href="#2-3-开启CodingPages" class="headerlink" title="2.3 开启CodingPages"></a>2.3 开启CodingPages</h3><ul><li><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-deploy-coding2.png" alt=""></p><p>点击Pages服务，然后一键开启。</p></li></ul><p>部署master分支</p><p>自定义域名 可以填两个 <code>www.xxx.com</code> 和<code>xxx.com</code></p><p>绑定自定义域名的时候需要在买域名的地方(我这里是阿里的万网)配置DNS解析</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-coding-dns.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">添加两条CNAME解析</span><br><span class="line">主机记录</span><br><span class="line">一个@，一个www<span class="comment">//@就是无前缀，xxx.com, www就是www.xxx.com</span></span><br><span class="line">解析路线</span><br><span class="line">默认就行</span><br><span class="line">记录值</span><br><span class="line">lillusory.coding.me <span class="comment">//这里改成自己的</span></span><br></pre></td></tr></table></figure><p>然后可以开启Https访问。</p><p>到这里就可以通过个性域名访问啦。不过现在博客代码还没有<code>push</code>到项目里。</p><h3 id="2-4-Push代码到Coding"><a href="#2-4-Push代码到Coding" class="headerlink" title="2.4 Push代码到Coding"></a>2.4 Push代码到Coding</h3><p><strong>配置SSH key</strong></p><p>首先需要配置一个<code>SSHkey</code>，<code>Git</code>有<code>Http</code>协议和<code>Git</code>协议两种。我们这里使用<code>Git</code>协议就需要配置一个<code>SSH key</code>,等会部署到<code>Github</code>上也需要配置这个。</p><p>具体配置方法如下：</p><p><a href="https://www.lixueduan.com/git/git-ssh-key-set/">Git 配置及SSH key</a></p><p><strong>修改站点配置文件</strong></p><p>这里只配置了Coding，可以先把Github的注释掉</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Deployment 部署到云端相关配置</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: </span><br><span class="line">   github: git<span class="meta">@github</span>.com:lillusory/lillusory.github.io.git</span><br><span class="line">   coding: git<span class="meta">@git</span>.coding.net:lillusory/lillusory.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p><strong>地址在这里：</strong></p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-deploy-coding3.png" alt=""></p><p>配置好后，运行<code>hexo g时就可以把博客部署到Coding上了，也可以通过个性域名访问了。</code></p><h2 id="3-收录到百度"><a href="#3-收录到百度" class="headerlink" title="3. 收录到百度"></a>3. 收录到百度</h2><h3 id="3-1-网站添加"><a href="#3-1-网站添加" class="headerlink" title="3.1 网站添加"></a>3.1 网站添加</h3><p>直接百度搜索你的域名,比如我的<code>www.lixueduan.com</code> ，如果没有收录就会提示暂未收录，点击<code>提交网址</code>。</p><p>点击这个链接进入百度站长平台，登录成功后选择`用户中心–&gt;站点管理–&gt;添加网站</p><p>输入自己的网站，如<code>www.lixueduan.com</code> 协议头如果开启了<code>https</code>就选<code>https</code></p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-baidu1-add.png" alt=""></p><h3 id="3-2-网站验证"><a href="#3-2-网站验证" class="headerlink" title="3.2 网站验证"></a>3.2 网站验证</h3><p>然后会验证这个网站是不是你的，选CNAME验证</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-baidu2-verfication.png" alt=""></p><p>然后去域名哪里添加一条解析即可。</p><p>记录类型–&gt;<code>CNAME</code></p><p>主机记录—&gt;前面那一串<code>l3rUDBLOMX</code></p><p>记录值–&gt;后面那个<code>ziyuan.baidu.com</code></p><p>其他的都按默认的就行了，添加后别删除，需要一直留着。</p><h3 id="3-3-站点地图"><a href="#3-3-站点地图" class="headerlink" title="3.3 站点地图"></a>3.3 站点地图</h3><p>接下来我们需要生成网站地图<code>sitemap</code>,使用sitemap方式向百度提交我们的网址</p><p>站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。</p><ul><li>先安装一下，打开你的hexo博客根目录，分别用下面两个命令来安装针对谷歌和百度的插件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save  #sitemap.xml适合提交给谷歌搜素引擎</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save  #baidusitemap.xml适合提交百度搜索引擎</span><br></pre></td></tr></table></figure><ul><li>在<code>站点配置文件</code>中添加如下代码</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Plugins:</span><br><span class="line">- hexo-generator-baidu-sitemap</span><br><span class="line">- hexo-generator-sitemap</span><br><span class="line"></span><br><span class="line">baidusitemap:</span><br><span class="line">    path: baidusitemap.xml</span><br><span class="line">sitemap:</span><br><span class="line">    path: sitemap.xml</span><br></pre></td></tr></table></figure><p>在你的博客根目录的public下面发现生成了sitemap.xml以及baidusitemap.xml就表示成功了.</p><p>然后将博客重新部署后就可以直接访问站点地图了。如<code>https://www.lixueduan.com/baidusitemap.xml</code></p><p>然后将这个<code>站点地图</code>提交到百度</p><p><code>站点管理--&gt;站点属性--&gt;链接提交--&gt;自动提交--&gt;sitemap</code></p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-baidu3-sitemap.png" alt=""></p><p>完成后就算是提交成功了，百度比较慢，要好几天才能收录。</p><h2 id="4-部署到GitHub"><a href="#4-部署到GitHub" class="headerlink" title="4. 部署到GitHub"></a>4. 部署到GitHub</h2><p>步骤和Coding差不多的。</p><h3 id="4-1-注册Github账号"><a href="#4-1-注册Github账号" class="headerlink" title="4.1 注册Github账号"></a>4.1 注册Github账号</h3><p><a href="https://github.com/" target="_blank" rel="noopener">点这里注册Github账号</a></p><h3 id="4-2-创建新仓库"><a href="#4-2-创建新仓库" class="headerlink" title="4.2 创建新仓库"></a>4.2 创建新仓库</h3><p>也是名字必须和用户名一样，必须按照这个格式<code>username.github.io</code>，例如<code>lillusorycloud.github.io</code></p><p>创建好仓库后找到<code>Setings</code> 往下拉，找到<code>Github Pages</code> 设置<code>Custom domain</code>填下自定义域名，如<code>www.lixueduan.com</code>.如果有<code>Enforce HTTPS</code>选项也可以勾上。</p><h3 id="4-3-Push代码到Github"><a href="#4-3-Push代码到Github" class="headerlink" title="4.3 Push代码到Github"></a>4.3 Push代码到Github</h3><p><strong>配置SSH key</strong></p><p>首先需要配置一个<code>SSHkey</code>，<code>Git</code>有<code>Http</code>协议和<code>Git</code>协议两种。我们这里使用<code>Git</code>协议就需要配置一个<code>SSH key</code>,等会部署到<code>Github</code>上也需要配置这个。</p><p>具体配置方法：</p><p><a href="https://www.lixueduan.com/git/git-ssh-key-set/">Git 配置及SSH key</a></p><p><strong>修改站点配置文件</strong></p><p><code>repository</code>中添加一个<code>github</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Deployment 部署到云端相关配置</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: </span><br><span class="line">    github: git<span class="meta">@github</span>.com:illusorycloud/illusorycloud.github.io.git</span><br><span class="line">    coding: git<span class="meta">@git</span>.coding.net:illusorycloud/illusorycloud.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>配置好后，运行<code>hexo g时就可以把博客同时部署到Coding和Github上了，也可以通过个性域名访问了。</code></p><h2 id="5-收录到Google"><a href="#5-收录到Google" class="headerlink" title="5. 收录到Google"></a>5. 收录到Google</h2><p>和百度差不多。</p><h3 id="5-1-网站添加"><a href="#5-1-网站添加" class="headerlink" title="5.1 网站添加"></a>5.1 网站添加</h3><p>首先进入<a href="https://www.google.com/webmasters/#?modal_active=none" target="_blank" rel="noopener">Google站点平台</a></p><p>然后添加资源，注意<code>http</code>和<code>https</code></p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-add.png" alt=""></p><h3 id="5-2-验证所有权"><a href="#5-2-验证所有权" class="headerlink" title="5.2 验证所有权"></a>5.2 验证所有权</h3><p>然后验证所有权,选择DNS供应商</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-verfication1.png" alt=""></p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-verfication2.png" alt=""></p><p>供应商选择其他，然后选择添加CNAME记录，在域名解析中添加一条记录。也是添加后不要删除。</p><h3 id="5-3-站点地图"><a href="#5-3-站点地图" class="headerlink" title="5.3 站点地图"></a>5.3 站点地图</h3><p>验证后就可以添加站点地图了</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-sitemap.png" alt=""></p><p>提交成功后,我们的站点就已经被Google收录了.大概一天就能收录成功，比百度块一些。</p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>本文主要讲了怎么将博客部署到<code>Coding</code>和<code>Github</code>和怎么让<code>百度</code>,<code>Google</code>收录我们的网站。</p><h2 id="7-参考"><a href="#7-参考" class="headerlink" title="7.参考"></a>7.参考</h2><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方文档</a></p><p><a href="https://www.jianshu.com/p/cc902b54d493" target="_blank" rel="noopener">基于Hexo的个人博客</a></p><p><a href="https://blog.csdn.net/qq_35561857/article/details/81590953" target="_blank" rel="noopener">Hex博客搭建</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 01 2019 00:57:11 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;本章主要记录了如何将博客部署至云端，怎么设置个性域名，怎么将自己的网站提交到百度Google。让自己的网站能够出现在各大搜索引擎的具体方法和过程，希望能对大家有帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://www.lixueduan.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://www.lixueduan.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo个人博客之优化（二）</title>
    <link href="https://www.lixueduan.com/hexo/hexo-blog-config-two/"/>
    <id>https://www.lixueduan.com/hexo/hexo-blog-config-two/</id>
    <published>2018-12-22T14:00:00.000Z</published>
    <updated>2018-12-31T15:41:36.718Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 01 2019 00:57:11 GMT+0800 (GMT+08:00) --><p>本章主要包含了博客主题优化相关内容，第三方服务和插件的配置与使用。如：炫酷头像动态背景、链接变色、鼠标点击效果、站点字数、访客数统计等。</p><a id="more"></a><blockquote><p>这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。</p><p><a href="https://www.lixueduan.com/hexo/hexo-blog-setup-one/">Hexo个人博客之搭建（一）</a></p><p><a href="https://www.lixueduan.com/hexo/hexo-blog-config-two/">Hexo个人博客之优化（二）</a></p><p><a href="https://www.lixueduan.com/hexo/hexo-blog-deploy-three/">Hexo个人博客之部署（三）</a></p><p><a href="https://www.lixueduan.com/hexo/hexo-blog-tranfer-four/">Hexo个人博客之转移（四）</a></p></blockquote><h3 id="0-选择主题"><a href="#0-选择主题" class="headerlink" title="0. 选择主题"></a>0. 选择主题</h3><p>你可以点击这里选择你喜欢的<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Themes</a>,里面有大量美观的主题</p><p>我这里用的是简约著称的<code>Next</code>主题.</p><ul><li>下载主题<ul><li>使用<code>git</code>命令下载该主题到本地.</li><li><code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code></li><li>clone成功后,你的Themes文件夹下就会有next主题文件了.</li></ul></li><li>Hexo配置文件:<ul><li>都叫<code>_config.yml</code></li><li>一份位于站点根目录下，主要包含 Hexo 本身的配置,称为 <code>站点配置文件</code></li><li>另一份位于主题目录下主要用于配置主题相关的选项,称为<code>主题配置文件</code></li></ul></li><li>开启主题<ul><li><code>站点配置文件</code>进行修改: 将<code>theme: landscape</code>修改为 <code>theme: next</code></li></ul></li></ul><h3 id="1-侧边栏头像设置"><a href="#1-侧边栏头像设置" class="headerlink" title="1. 侧边栏头像设置"></a>1. 侧边栏头像设置</h3><p>新版next注意引入了该功能,直接在<code>主题配置文件</code>修改即可,如下:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar 头像</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line"><span class="attr">  url:</span> <span class="string">/images/avatar.gif</span></span><br><span class="line">  <span class="comment"># 圆形头像</span></span><br><span class="line"><span class="attr">  rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 透明度 0~1之间</span></span><br><span class="line"><span class="attr">  opacity:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># 头像旋转</span></span><br><span class="line"><span class="attr">  rotated:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="2-设置个人社交图标链接"><a href="#2-设置个人社交图标链接" class="headerlink" title="2. 设置个人社交图标链接"></a>2. 设置个人社交图标链接</h3><p>直接在<code>主题配置文件</code>修改即可,如下:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Social Links. 社交链接 前面为链接地址 后面是图标 </span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line"><span class="attr">  GitHub:</span> <span class="attr">https://github.com/lillusorycloud</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line"><span class="attr">  E-Mail:</span> <span class="attr">mailto:xueduan.li@gmail.com</span> <span class="string">||</span> <span class="string">envelope</span></span><br><span class="line">  <span class="comment">#Weibo: https://weibo.com/yourname || weibo</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || google</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || facebook</span></span><br><span class="line">  <span class="comment">#VK Group: https://vk.com/yourname || vk</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || skype</span></span><br><span class="line"><span class="comment"># 图标配置 </span></span><br><span class="line"><span class="attr">social_icons:</span></span><br><span class="line">  <span class="comment">#是否显示图标</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">#是否只显示图标</span></span><br><span class="line"><span class="attr">  icons_only:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">#是否开启图标变化(就是刷新后会变颜色)</span></span><br><span class="line"><span class="attr">  transition:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="3-添加菜单项"><a href="#3-添加菜单项" class="headerlink" title="3. 添加菜单项"></a>3. 添加菜单项</h3><p>1.先在<code>主题配置文件</code>修改</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line"><span class="attr">  about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line"><span class="attr">  AAAAA:</span> <span class="string">/BBBBB/</span> <span class="string">||</span> <span class="string">CCC</span></span><br><span class="line"><span class="string">其中AAA</span> <span class="string">为菜单项的名字,BBB是路径,CCC是菜单项显示的图标</span></span><br></pre></td></tr></table></figure><p><code>next</code> 使用的是 <a href="http://fontawesome.io/" target="_blank" rel="noopener">Font Awesome</a> 提供的图标 ,在这里可以选择自己喜欢的图标.</p><p>2.生成上述路径的文件</p><p><code>git</code>命令行输入</p><p><code>hexo new page BBB</code> –其中BBB替换为具体的名字,会在<code>站点目录\source</code>下新增一个BBB文件夹,文件夹中有一个<code>index.md</code>文件，需要在文件头中增加一句<code>type: XXX</code>,例如<code>type: categories</code>。这样就会在这个页面显示所有的分类了。</p><p>3.修改主题文件下的对应语言的配置文件,这里是中文就修改<code>zh-CN.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">首页</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">归档</span></span><br><span class="line">  <span class="string">AAAA</span> <span class="string">:</span> <span class="string">XXXX</span></span><br><span class="line"><span class="string">AAA为上边的菜单项名字,XXX为中文的名字</span></span><br></pre></td></tr></table></figure><h3 id="4-添加RSS"><a href="#4-添加RSS" class="headerlink" title="4. 添加RSS"></a>4. 添加RSS</h3><ul><li><p>1.安装插件</p><ul><li><p>首先在Git中运行<code>npm install --save hexo-generator-feed</code>命令,安装插件,插件会放在</p><p><code>node_modules</code>文件夹里面.</p></li></ul></li><li><p>2.修改<code>站点配置文件</code></p><ul><li>安装好插件后,打开站点配置文件_config.yml`,在末尾加入以下代码:</li></ul></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: http://hexo.io/plugins/</span></span><br><span class="line"><span class="attr">plugins:</span> <span class="string">hexo-generate-feed</span></span><br></pre></td></tr></table></figure><ul><li>3.修改<code>主题配置文件</code><ul><li>打开主题配置文件<code>_config.yml</code>,找到<code>rss</code> 添加配置:<code>rss: /atom.xml</code></li></ul></li></ul><h3 id="5-设置酷炫动态背景"><a href="#5-设置酷炫动态背景" class="headerlink" title="5. 设置酷炫动态背景"></a>5. 设置酷炫动态背景</h3><p>next主题提供了两种背景可以选择.</p><ul><li>第一种背景（我是用的这种）</li></ul><p>新版本的next主题的话直接在主题配置文件中,找到<code>canvas-nest</code> 修改为<code>canvas-nest: true</code>,</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span></span><br><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  onmobile:</span> <span class="literal">true</span> <span class="comment"># display on mobile or not</span></span><br><span class="line"><span class="attr">  color:</span> <span class="string">'0,0,255'</span> <span class="comment"># RGB values, use ',' to separate</span></span><br><span class="line"><span class="attr">  opacity:</span> <span class="number">0.5</span> <span class="comment"># the opacity of line: 0~1</span></span><br><span class="line"><span class="attr">  zIndex:</span> <span class="bullet">-1</span> <span class="comment"># z-index property of the background</span></span><br><span class="line"><span class="attr">  count:</span> <span class="number">99</span> <span class="comment"># the number of lines</span></span><br></pre></td></tr></table></figure><p>进入theme/next目录</p><p>执行命令<code>git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest</code></p><ul><li>第二种背景</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># JavaScript 3D library.</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-three</span></span><br><span class="line"><span class="comment"># three_waves</span></span><br><span class="line"><span class="attr">three_waves:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># canvas_lines</span></span><br><span class="line"><span class="attr">canvas_lines:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># canvas_sphere</span></span><br><span class="line"><span class="attr">canvas_sphere:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>也是需要下载依赖</p><ol><li>进入theme/next目录</li><li>执行命令：<code>git clone https://github.com/theme-next/theme-next-three source/lib/three</code></li></ol><p><strong>4个背景中只能开启一种背景,不然会出错</strong></p><h3 id="6-设置网站logo"><a href="#6-设置网站logo" class="headerlink" title="6. 设置网站logo"></a>6. 设置网站logo</h3><p>把你的图片放在<code>themes/next/source/images</code>里</p><p>打开<code>主题配置文件</code>_config.yml ,找到字段<code>favicon:</code> 都修改为对应路径</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line"><span class="attr">  small:</span> <span class="string">/images/favicon-16x16-next.png</span></span><br><span class="line"><span class="attr">  medium:</span> <span class="string">/images/favicon-32x32-next.png</span></span><br><span class="line"><span class="attr">  apple_touch_icon:</span> <span class="string">/images/apple-touch-icon-next.png</span></span><br><span class="line"><span class="attr">  safari_pinned_tab:</span> <span class="string">/images/logo.svg</span></span><br></pre></td></tr></table></figure><h3 id="7-实现点击出现桃心效果"><a href="#7-实现点击出现桃心效果" class="headerlink" title="7. 实现点击出现桃心效果"></a>7. 实现点击出现桃心效果</h3><p><code>themes/next/source/js/src</code>里面 新建一个love.js,</p><p>复制下面的代码进去</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">"left:"</span>+d[e].x+<span class="string">"px;top:"</span>+d[e].y+<span class="string">"px;opacity:"</span>+d[e].alpha+<span class="string">";transform:scale("</span>+d[e].scale+<span class="string">","</span>+d[e].scale+<span class="string">") rotate(45deg);background:"</span>+d[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">"function"</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;setTimeout(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure><p>然后打开<code>\themes\next\layout\_layout.swig</code>文件,在末尾 添加以下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面点击小红心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/love.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-修改文章内链接文本样式"><a href="#8-修改文章内链接文本样式" class="headerlink" title="8. 修改文章内链接文本样式"></a>8. 修改文章内链接文本样式</h3><p>鼠标移动到连接上变颜色</p><p>修改文件 <code>themes\next\source\css\_common\components\post\post.styl</code>，在末尾添加如下css样式，：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 文章内链接文本样式</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-id">#fc6423</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: <span class="selector-tag">none</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fc6423</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-设置顶部滚动加载条"><a href="#9-设置顶部滚动加载条" class="headerlink" title="9. 设置顶部滚动加载条"></a>9. 设置顶部滚动加载条</h3><p>打开<code>next\layout\_partials\head</code>文件，在文件末尾添加以下代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/pace/1.0.2/pace.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.pace</span> <span class="selector-class">.pace-progress</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-id">#1E92FB</span>; <span class="comment">/*进度条颜色*/</span></span></span><br><span class="line"><span class="undefined">        height: 3px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.pace</span> <span class="selector-class">.pace-progress-inner</span> &#123;</span></span><br><span class="line"><span class="css">         <span class="selector-tag">box-shadow</span>: 0 0 10<span class="selector-tag">px</span> <span class="selector-id">#1E92FB</span>, 0 0 5<span class="selector-tag">px</span>     <span class="selector-id">#1E92FB</span>; <span class="comment">/*阴影颜色*/</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.pace</span> <span class="selector-class">.pace-activity</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border-top-color</span>: <span class="selector-id">#1E92FB</span>;    <span class="comment">/*上边框颜色*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">border-left-color</span>: <span class="selector-id">#1E92FB</span>;    <span class="comment">/*左边框颜色*/</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-在每篇文章末尾统一添加“本文结束”标记"><a href="#10-在每篇文章末尾统一添加“本文结束”标记" class="headerlink" title="10. 在每篇文章末尾统一添加“本文结束”标记"></a>10. 在每篇文章末尾统一添加“本文结束”标记</h3><p>在路径 <code>\themes\next\layout\_macro</code> 中新建 <code>page-end-tag.swig</code> 文件,并添加以下内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--文字可以自己修改--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center;color: #A2CD5A;font-size:15px;"</span>&gt;</span>------------------本文到此结束<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-paw"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>感谢您的阅读------------------<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着打开<code>\themes\next\layout\_macro\post.swig</code>文件，在<code>post-body</code> 之后， <code>post-footer</code> 之前添加下面的代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    &#123;% include 'page-end-tag.swig' %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后打开主题配置文件（<code>_config.yml</code>),在末尾添加：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文章末尾添加“本文结束”标记</span></span><br><span class="line"><span class="attr">page_end_tag:</span></span><br><span class="line"><span class="attr">  enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="11-静态资源压缩"><a href="#11-静态资源压缩" class="headerlink" title="11. 静态资源压缩"></a>11. 静态资源压缩</h3><p>Hexo自动生成的html中有很多空白的地方,会影响加载速度,所以最好还是压缩一下.</p><p>这里使用<code>hexo-neat</code>插件来压缩。</p><ul><li><p>安装插件</p><ul><li><code>npm install hexo-neat --save</code></li></ul></li><li><p>在<code>站点配置文件</code>添加配置</p><ul><li><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-neat</span></span><br><span class="line"><span class="comment"># 博文压缩</span></span><br><span class="line"><span class="attr">neat_enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 压缩html</span></span><br><span class="line"><span class="attr">neat_html:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  exclude:</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 压缩css  跳过min.css</span></span><br><span class="line"><span class="attr">neat_css:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  exclude:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'**/*.min.css'</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 压缩js 跳过min.js</span></span><br><span class="line"><span class="attr">neat_js:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  mangle:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  output:</span></span><br><span class="line"><span class="attr">  compress:</span></span><br><span class="line"><span class="attr">  exclude:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'**/*.min.js'</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'**/jquery.fancybox.pack.js'</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'**/index.js'</span>  </span><br><span class="line"><span class="bullet">    -</span> <span class="string">'**/love.js'</span></span><br><span class="line"><span class="comment"># 压缩博文配置结束</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>3.使用</p><ul><li>以后再执行<code>hexo g</code>命令时就会自动压缩了</li></ul></li></ul><h3 id="12-主页文章添加阴影效果"><a href="#12-主页文章添加阴影效果" class="headerlink" title="12. 主页文章添加阴影效果"></a>12. 主页文章添加阴影效果</h3><p>打开<code>\themes\next\source\css\_custom\custom.styl</code>,向里面加入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主页文章添加阴影效果</span></span><br><span class="line"> .post &#123;</span><br><span class="line">   margin-top: <span class="number">60</span>px;</span><br><span class="line">   margin-bottom: <span class="number">60</span>px;</span><br><span class="line">   padding: <span class="number">25</span>px;</span><br><span class="line">   -webkit-box-shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">5</span>px rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, <span class="number">.5</span>);</span><br><span class="line">   -moz-box-shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">5</span>px rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, <span class="number">.5</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="13-修改文章底部的的标签样式"><a href="#13-修改文章底部的的标签样式" class="headerlink" title="13. 修改文章底部的的标签样式"></a>13. 修改文章底部的的标签样式</h3><p>打开模板文件<code>/themes/next/layout/_macro/post.swig</code>，找到<code>rel=&quot;tag&quot;&gt;#</code>字段， 将<code># 换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code>,其中tag是你选择标签图标的名字,也是可以自定义的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for(tag.path) &#125;&#125;"</span> <span class="attr">rel</span>=<span class="string">"tag"</span>&gt;</span> <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-tag"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> &#123;&#123; tag.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="14-实现文章字数统计和预计阅读时间"><a href="#14-实现文章字数统计和预计阅读时间" class="headerlink" title="14. 实现文章字数统计和预计阅读时间"></a>14. 实现文章字数统计和预计阅读时间</h3><p>1.在站点根目录下使用<code>GitBash</code>命令安装 <code>hexo-wordcoun</code>t插件:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure><p>2.在全局配置文件<code>_config.yml</code>中激活插件:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line"><span class="attr">    symbols:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    time:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    total_symbols:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    total_time:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>3.在主题的配置文件<code>_config.yml</code>中进行如下配置:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字数统计</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line"><span class="attr">  separated_meta:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  item_text_post:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  item_text_total:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  awl:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">  wpm:</span> <span class="number">275</span></span><br></pre></td></tr></table></figure><p>到此,我们就实现了文章字数统计和预估时间的显示功能</p><h3 id="15-在文章底部增加版权信息"><a href="#15-在文章底部增加版权信息" class="headerlink" title="15. 在文章底部增加版权信息"></a>15. 在文章底部增加版权信息</h3><p>修改<code>主题配置文件</code>,找到<code>creative_commons</code>字段</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Creative Commons 4.0 International License.</span></span><br><span class="line"><span class="comment"># https://creativecommons.org/share-your-work/licensing-types-examples</span></span><br><span class="line"><span class="comment"># Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span></span><br><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="comment">#选择一个License</span></span><br><span class="line"><span class="attr">  license:</span> <span class="string">by-nc-sa</span></span><br><span class="line">  <span class="comment">#是否在侧边栏显示</span></span><br><span class="line"><span class="attr">  sidebar:</span> <span class="literal">false</span>  </span><br><span class="line">  <span class="comment">#是否在文章末尾显示</span></span><br><span class="line"><span class="attr">  post:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="16-文章置顶"><a href="#16-文章置顶" class="headerlink" title="16. 文章置顶"></a>16. 文章置顶</h3><p>打开文件：<code>node_modules/hexo-generator-index/lib/generator.js</code>,将原来的代码用下面的代码替换掉</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">'hexo-pagination'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">  <span class="keyword">var</span> posts = locals.posts;</span><br><span class="line">    posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章top都有定义</span></span><br><span class="line">            <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</span><br><span class="line">  <span class="keyword">return</span> pagination(<span class="string">''</span>, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</span><br><span class="line">    format: paginationDir + <span class="string">'/%d/'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>写文章的时候,在标题加上top值,数值越大排在越前面.</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tag: hexo </span><br><span class="line">copyright: true</span><br><span class="line">password: xxx</span><br><span class="line">top: 150</span><br></pre></td></tr></table></figure><h3 id="17-在网站底部加上访问量"><a href="#17-在网站底部加上访问量" class="headerlink" title="17. 在网站底部加上访问量"></a>17. 在网站底部加上访问量</h3><p><strong>Next主题配置这个就比较方便了</strong></p><p>打开<code>主题配置文件</code>，找到如下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_visitors:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_visitors_icon:</span> <span class="string">user</span></span><br><span class="line"><span class="attr">  total_views:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_views_icon:</span> <span class="string">eye</span></span><br><span class="line"><span class="attr">  post_views:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  post_views_icon:</span> <span class="string">eye</span></span><br></pre></td></tr></table></figure><p>将<code>enable</code>的值由<code>false</code>改为<code>true</code>，便可以看到页脚出现访问量.</p><p>另外本地预览时访客数异常是正常的,部署至云端后就不会出现这样的问题.</p><h3 id="18-网站搜索功能"><a href="#18-网站搜索功能" class="headerlink" title="18. 网站搜索功能"></a>18. 网站搜索功能</h3><p>1.安装插件</p><p>​ 站点目录下执行命令<code>npm install hexo-generator-searchdb --save</code></p><p>2.修改<code>站点配置文件</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">  field:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">  format:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>3.修改<code>主题配置文件</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="string">enable</span></span><br><span class="line">  <span class="comment"># if auto, trigger search by changing input</span></span><br><span class="line">  <span class="comment"># if manual, trigger search by pressing enter key or search button</span></span><br><span class="line"><span class="attr">  trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># show top n results per article, show all results by setting to -1</span></span><br><span class="line"><span class="attr">  top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># unescape html strings to the readable one</span></span><br><span class="line"><span class="attr">  unescape:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>重新开启服务后即可看到效果。</p><h3 id="TODO开启留言评论功能"><a href="#TODO开启留言评论功能" class="headerlink" title="TODO开启留言评论功能"></a>TODO开启留言评论功能</h3><p>//TODO 待更新</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方文档</a></p><p><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">Next官方文档</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 01 2019 00:57:11 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;本章主要包含了博客主题优化相关内容，第三方服务和插件的配置与使用。如：炫酷头像动态背景、链接变色、鼠标点击效果、站点字数、访客数统计等。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://www.lixueduan.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://www.lixueduan.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo个人博客之搭建（一）</title>
    <link href="https://www.lixueduan.com/hexo/hexo-blog-setup-one/"/>
    <id>https://www.lixueduan.com/hexo/hexo-blog-setup-one/</id>
    <published>2018-12-20T14:00:00.000Z</published>
    <updated>2018-12-31T15:54:40.499Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 01 2019 00:57:11 GMT+0800 (GMT+08:00) --><p>本文主要记录了如何搭建自己的博客。基于Hexo框架在本地搭建自己博客的全过程，包括了环境准备到Hexo初始化，再到服务的开启等。</p><a id="more"></a><blockquote><p>这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。</p><p><a href="https://www.lixueduan.com/hexo/hexo-blog-setup-one/">Hexo个人博客之搭建（一）</a></p><p><a href="https://www.lixueduan.com/hexo/hexo-blog-config-two/">Hexo个人博客之优化（二）</a></p><p><a href="https://www.lixueduan.com/hexo/hexo-blog-deploy-three/">Hexo个人博客之部署（三）</a></p><p><a href="https://www.lixueduan.com/hexo/hexo-blog-tranfer-four/">Hexo个人博客之转移（四）</a></p></blockquote><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><ul><li>Git <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git下载地址</a></li><li>Node.js <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js下载地址</a></li></ul><p>小白式安装，一直下一步就ok了。</p><p>都安装好后就可以开始安装Hexo啦.</p><h2 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2. 安装Hexo"></a>2. 安装Hexo</h2><ul><li>1.新建一个文件夹,用于安装Hexo,以后这个就是放博客文件的.</li><li>2.在此文件夹右键,<code>Git Bash Here</code>,打开Git</li><li>3.安装Hexo 命令<code>npm install -g hexo</code></li><li>4.初始化Hexo 命令<code>hexo init</code></li><li>5.安装组件 命令<code>npm install</code></li></ul><p>到此为止,Hexo就算是安装完成了。</p><h2 id="3-开启服务"><a href="#3-开启服务" class="headerlink" title="3. 开启服务"></a>3. 开启服务</h2><ul><li><p>1.<code>hexo generate</code>或者简写<code>hexo g</code> 编译,生成静态文件,就是生成一个个html文件.</p></li><li><p>2.开启服务<code>hexo server</code>或者<code>hexo s</code> 成功开启后就可以在本地访问了。 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></p><ul><li>假如页面一直无法跳转，那么可能端口被占用了。此时我们ctrl+c停止服务器，<code>hexo server -p 端口号</code>来改变端口号</li><li>如<code>hexo server -p 5000</code> 将端口号换为<code>5000</code>,默认是<code>4000</code></li></ul></li><li>3.常用命令<ul><li><code>hexo clean</code> 清除缓存文件</li><li><code>hexo deploy</code>或者<code>hexo d</code> 部署网站到云端,这个后面再讲。</li></ul></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方文档</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 01 2019 00:57:11 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;本文主要记录了如何搭建自己的博客。基于Hexo框架在本地搭建自己博客的全过程，包括了环境准备到Hexo初始化，再到服务的开启等。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://www.lixueduan.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://www.lixueduan.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式之单例模式(一)</title>
    <link href="https://www.lixueduan.com/design_pattern/java-singleton-pattern/"/>
    <id>https://www.lixueduan.com/design_pattern/java-singleton-pattern/</id>
    <published>2018-10-08T14:00:00.000Z</published>
    <updated>2018-12-31T16:31:12.295Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 01 2019 00:57:11 GMT+0800 (GMT+08:00) --><p>本文主要介绍了设计模式的六大原则，并结合实例描述了各种单例模式的具体实现和性能分析测试。包括：<code>饿汉式</code>、<code>静态内部类</code>、<code>懒汉式</code>、<code>双重校验锁</code>、<code>枚举</code>等。</p><a id="more"></a><blockquote><p>设计模式系列文章</p><p><a href="">Java设计模式之单例模式(一)</a></p></blockquote><h2 id="1-设计模式的六大原则"><a href="#1-设计模式的六大原则" class="headerlink" title="1. 设计模式的六大原则"></a>1. 设计模式的六大原则</h2><p><strong>1、开闭原则（Open Close Principle）</strong></p><blockquote><p>开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。</p></blockquote><p><strong>2、里氏代换原则（Liskov Substitution Principle）</strong></p><blockquote><p>其官方描述比较抽象，可自行百度。实际上可以这样理解：</p><p>（1）子类的能力必须大于等于父类，即父类可以使用的方法，子类都可以使用。</p><p>（2）返回值也是同样的道理。假设一个父类方法返回一个List，子类返回一个ArrayList，这当然可以。如果父类方法返回一个ArrayList，子类返回一个List，就说不通了。这里子类返回值的能力是比父类小的。</p><p>（3）还有抛出异常的情况。任何子类方法可以声明抛出父类方法声明异常的子类。而不能声明抛出父类没有声明的异常。</p></blockquote><p><strong>3、依赖倒转原则（Dependence Inversion Principle）</strong></p><blockquote><p>这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。</p></blockquote><p><strong>4、接口隔离原则（Interface Segregation Principle）</strong></p><blockquote><p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。</p></blockquote><p><strong>5、迪米特法则（最少知道原则）（Demeter Principle）</strong></p><blockquote><p>为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。</p></blockquote><p><strong>6、合成复用原则（Composite Reuse Principle）</strong></p><blockquote><p>原则是尽量使用合成/聚合的方式，而不是使用继承。</p></blockquote><p>Java 中一般认为有 23 种设计模式，总体来说设计模式分为三大类：</p><p><code>创建型模式</code>，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</p><p><code>结构型模式</code>，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</p><p><code>行为型模式</code>，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录</p><p>模式、状态模式、访问者模式、中介者模式、解释器模式。</p><p>比较常用的有：工厂方法模式、抽象工厂模式、单例模式、建造者模式、适配器模式、代理模式、享元模式、策略模式、观察者模式。</p><h2 id="2-单例模式"><a href="#2-单例模式" class="headerlink" title="2. 单例模式"></a>2. 单例模式</h2><h3 id="2-1-单利模式介绍"><a href="#2-1-单利模式介绍" class="headerlink" title="2.1 单利模式介绍"></a>2.1 单利模式介绍</h3><p><strong>作用：</strong>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><p><strong>主要解决：</strong>一个全局使用的类频繁地创建与销毁。</p><p><strong>优点：</strong> 1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。 2、避免对资源的多重占用（比如写文件操作）。</p><p><strong>缺点：</strong>没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</p><p><strong>使用场景：</strong> 1、要求生产唯一序列号。 2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。 3、创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果单件模式实例在系统中经常会被用到，饿汉式是一个不错的选择。</span><br><span class="line">反之如果单件模式在系统中会很少用到或者几乎不会用到，那么懒汉式是一个不错的选择。</span><br></pre></td></tr></table></figure><h3 id="2-2-单利模式实现"><a href="#2-2-单利模式实现" class="headerlink" title="2.2 单利模式实现"></a>2.2 单利模式实现</h3><h4 id="1-饿汉式"><a href="#1-饿汉式" class="headerlink" title="1. 饿汉式"></a>1. 饿汉式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="comment">//类变量在类准备阶段就初始化了然后放在&lt;clinit&gt;构造方法中</span></span><br><span class="line">    <span class="comment">//一旦外部调用了静态方法，那么就会初始化完成。</span></span><br><span class="line">    <span class="comment">//一个类的&lt;clinit&gt;只会执行一次</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">   　　 <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式实现的单例：类加载时就创建实例。由<code>classloder</code>保证了线程安全。</p><h4 id="2-静态内部类"><a href="#2-静态内部类" class="headerlink" title="2. 静态内部类"></a>2. 静态内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    　　<span class="keyword">return</span> SingletonHolder.INSTANCE;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式实现的单例：实现了<code>lazy loading</code> 使用时才创建实例，由<code>classloder</code>保证了线程安全。</p><p><strong>饿汉式/静态内部类是如何保证线程安全的：</strong></p><p>在《深入理解JAVA虚拟机》中，有这么一句话:</p><blockquote><p>虚拟机会保证一个类的<code>&lt;clinit&gt;()</code>方法在多线程环境中被正确地加锁、同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的<code>&lt;clinit&gt;()</code>方法，其他线程都需要阻塞等待，直到活动线程执行<code>&lt;clinit&gt;()</code>方法完毕。</p></blockquote><h4 id="3-懒汉式"><a href="#3-懒汉式" class="headerlink" title="3. 懒汉式"></a>3. 懒汉式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">   　　 <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式实现的单例：实现了<code>lazy loading</code> 使用时才创建实例。<code>synchronized</code>保证了线程安全，但效率低。</p><h4 id="4-双重校验锁"><a href="#4-双重校验锁" class="headerlink" title="4. 双重校验锁"></a>4. 双重校验锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> Singleton();<span class="comment">//非原子操作</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//singleton = new Singleton(); 非原子操作 分为三步</span></span><br><span class="line"><span class="comment">// 1.给singleton分配内存</span></span><br><span class="line"><span class="comment">// 2.调用 Singleton 的构造函数来初始化成员变量</span></span><br><span class="line"><span class="comment">// 3.将给singleton对象指向分配的内存空间（此时singleton才不为null）</span></span><br><span class="line"><span class="comment">// 指令重排序--&gt;执行命令时虚拟机可能会对以上3个步骤交换位置 最后可能是132这种 分配内存并修改指针后未初始化 多线程获取时可能会出现问题。</span></span><br><span class="line"><span class="comment">//volatile关键字会禁止指令重排序 即可避免这种问题。</span></span><br></pre></td></tr></table></figure><p>这种方式实现的单例：实现了<code>lazy loading</code> 使用时才创建实例。<code>synchronized</code>保证了线程安全，<code>volatile</code>禁止指令重排序保证了多线程获取时不为空。但要JDK1.5以上才行。</p><h4 id="5-枚举"><a href="#5-枚举" class="headerlink" title="5. 枚举"></a>5. 枚举</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;</span><br><span class="line"> <span class="comment">//定义一个枚举的元素，它就是 Singleton 的一个实例</span></span><br><span class="line">    INSTANCE;  </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeThing</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">     System.out.println(<span class="string">"枚举方法实现单例"</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Singleton singleton = Singleton.INSTANCE;</span><br><span class="line">singleton.doSomeThing();<span class="comment">//output:枚举方法实现单例</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式也是《Effective Java 》以及《Java与模式》的作者推荐的方式，不过工作中却很少看到用。</p><h3 id="3-性能测试"><a href="#3-性能测试" class="headerlink" title="3. 性能测试"></a>3. 性能测试</h3><p>五种单例实现方式，在100个线程下，每个线程访问1千万次实例的用时.</p><table><thead><tr><th>Tables</th><th>实现方式</th><th>用时(毫秒)</th></tr></thead><tbody><tr><td>1</td><td>饿汉式</td><td>13</td></tr><tr><td>2</td><td>懒汉式</td><td>10778</td></tr><tr><td>3</td><td>双重检查</td><td>15</td></tr><tr><td>4</td><td>静态内部类</td><td>14</td></tr><tr><td>5</td><td>枚举</td><td>12</td></tr></tbody></table><p>(*注意:由于不同电脑之间的性能差异，测试的结果可能不同)</p><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h3><p>根据不同场合选择具体的实现方式，一般情况下我是使用的<strong>静态内部类</strong>方式。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/qq_22706515/article/details/74202814" target="_blank" rel="noopener">单例模式性能分析</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 01 2019 00:57:11 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;本文主要介绍了设计模式的六大原则，并结合实例描述了各种单例模式的具体实现和性能分析测试。包括：&lt;code&gt;饿汉式&lt;/code&gt;、&lt;code&gt;静态内部类&lt;/code&gt;、&lt;code&gt;懒汉式&lt;/code&gt;、&lt;code&gt;双重校验锁&lt;/code&gt;、&lt;code&gt;枚举&lt;/code&gt;等。&lt;/p&gt;
    
    </summary>
    
      <category term="design-pattern" scheme="https://www.lixueduan.com/categories/design-pattern/"/>
    
    
      <category term="design-pattern" scheme="https://www.lixueduan.com/tags/design-pattern/"/>
    
  </entry>
  
  <entry>
    <title>Git 配置及SSH key及使用</title>
    <link href="https://www.lixueduan.com/git/git-ssh-key-set/"/>
    <id>https://www.lixueduan.com/git/git-ssh-key-set/</id>
    <published>2017-07-01T04:00:00.000Z</published>
    <updated>2018-12-31T15:39:53.363Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jan 01 2019 00:57:11 GMT+0800 (GMT+08:00) --><p>​ 本地 Git 仓库和 GitHub 仓库之间的传输是通过 SSH 加密的，所以配置SSH key之后，上传代码到<code>Github</code>远程仓库时就不用输入密码了。一般是在C盘用户目录下有一个 <code>something</code> 和 <code>something.pub</code> 来命名的一对文件，这个 <code>something</code> 通常就是 <code>id_dsa</code> 或 <code>id_rsa</code>。有 <code>.pub</code> 后缀的文件就是公钥，另一个文件则是密钥。连接时必须提供一个公钥用于授权，没有的话就要生成一个。</p><a id="more"></a><h2 id="1-Git-配置"><a href="#1-Git-配置" class="headerlink" title="1. Git 配置"></a>1. Git 配置</h2><p>配置全局用户名和密码，git提交代码时用来显示你身份和联系方式，并不是github用户名和邮箱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"lillusory"</span> <span class="comment">//改成自己的</span></span><br><span class="line">git config --global user.email <span class="string">"xueduanli@163.com"</span>  <span class="comment">//改成自己的</span></span><br></pre></td></tr></table></figure><h2 id="2-生成SSH-key"><a href="#2-生成SSH-key" class="headerlink" title="2. 生成SSH key"></a>2. 生成SSH key</h2><h3 id="2-1-生成秘钥"><a href="#2-1-生成秘钥" class="headerlink" title="2.1 生成秘钥"></a>2.1 生成秘钥</h3><ul><li>执行<code>ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;</code> 命令 生成ssh key</li><li>然后会叫你输入保存路径，直接按回车即可，保存在C盘用户目录下</li><li>然后会提示输入密码和确认密码，不用输入直接按两下回车即可</li></ul><p>到这里SSH key就生成好了，接下来就是配置到github上。</p><h3 id="2-2-配置SSH-key"><a href="#2-2-配置SSH-key" class="headerlink" title="2.2 配置SSH key"></a>2.2 配置SSH key</h3><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/2018-12-27-git-ssh-key-set1.png" alt=""></p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/2018-12-27-git-ssh-key-set2.png" alt=""></p><p>登陆Github–&gt;点击头像–&gt;Settings–&gt;SSH and GPG keys–&gt;选择SSh keys上的New SSH keys–&gt;name 随便写，key就是刚才生成的文件中的所有内容。</p><p>文件默认是在C盘用户目录下，我的是<code>C:\Users\13452\.ssh</code></p><p>文件夹中应该会有两个文件 ：<code>id_rsa</code>和<code>id_rsa.pub</code></p><p><code>id_rsa.pub</code>就是我们要的key, 一般以<code>ssh-rsa</code>开头，以你刚才输的邮箱结尾。</p><h3 id="2-3-测试"><a href="#2-3-测试" class="headerlink" title="2.3 测试"></a>2.3 测试</h3><p>执行<code>ssh -T git@github.com</code>命令验证一下。</p><p>可能会提示，<code>无法验证主机的真实性</code>是否要建立连接，输入<code>yes</code>就行了。</p><p>如果，看到：</p><blockquote><p>Hi xxx! You’ve successfully authenticated, but GitHub does not # provide shell access.</p></blockquote><p>恭喜你，你的设置已经成功了。</p><h2 id="3-参考"><a href="#3-参考" class="headerlink" title="3. 参考"></a>3. 参考</h2><p><a href="https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5" target="_blank" rel="noopener">Git Book</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jan 01 2019 00:57:11 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;​ 本地 Git 仓库和 GitHub 仓库之间的传输是通过 SSH 加密的，所以配置SSH key之后，上传代码到&lt;code&gt;Github&lt;/code&gt;远程仓库时就不用输入密码了。一般是在C盘用户目录下有一个 &lt;code&gt;something&lt;/code&gt; 和 &lt;code&gt;something.pub&lt;/code&gt; 来命名的一对文件，这个 &lt;code&gt;something&lt;/code&gt; 通常就是 &lt;code&gt;id_dsa&lt;/code&gt; 或 &lt;code&gt;id_rsa&lt;/code&gt;。有 &lt;code&gt;.pub&lt;/code&gt; 后缀的文件就是公钥，另一个文件则是密钥。连接时必须提供一个公钥用于授权，没有的话就要生成一个。&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="https://www.lixueduan.com/categories/Git/"/>
    
    
      <category term="Git" scheme="https://www.lixueduan.com/tags/Git/"/>
    
  </entry>
  
</feed>
