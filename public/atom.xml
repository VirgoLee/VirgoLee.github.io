<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>幻境云图</title>
  
  <subtitle>勿在浮沙筑高台</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.lixueduan.com/"/>
  <updated>2019-07-07T07:38:15.149Z</updated>
  <id>https://www.lixueduan.com/</id>
  
  <author>
    <name>illusoryCloud</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gRPC入门教程(二)---gRPC简单使用</title>
    <link href="https://www.lixueduan.com/posts/5ad1b62f.html"/>
    <id>https://www.lixueduan.com/posts/5ad1b62f.html</id>
    <published>2019-05-12T14:00:00.000Z</published>
    <updated>2019-07-07T07:38:15.149Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要对 gRPC 框架做了简单的介绍，同时记录了具体安装方法与基本使用教程。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>gRPC 是一个高性能、通用的开源RPC框架，其由Google主要面向移动应用开发并基于HTTP/2协议标准而设计，基于ProtoBuf(Protocol Buffers)序列化协议开发，且支持众多开发语言。 gRPC基于HTTP/2标准设计，带来诸如双向流控、头部压缩、单TCP连接上的多复用请求等特性。这些特性使得其在移动设备上表现更好，更省电和节省空间占用。</p><p>在 gRPC 里<code>客户端</code>应用可以像调用本地对象一样直接调用另一台不同的机器上<code>服务端</code>应用的方法，使得您能够更容易地创建分布式应用和服务。与许多 RPC 系统类似，gRPC 也是基于以下理念：<strong>定义一个<code>服务</code>，指定其能够被远程调用的方法（包含参数和返回类型）。在服务端实现这个接口，并运行一个 gRPC 服务器来处理客户端调用。在客户端拥有一个<code>存根</code>能够像服务端一样的方法</strong>。</p><p>gRPC 默认使用 <strong>protocol buffers</strong>，这是 Google 开源的一套成熟的结构数据序列化机制（当然也可以使用其他数据格式如 JSON）。</p><h2 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2. 环境准备"></a>2. 环境准备</h2><h4 id="env"><a href="#env" class="headerlink" title="env"></a>env</h4><ul><li>gRPC 需要 go 1.6以上</li></ul><h4 id="安装gRPC"><a href="#安装gRPC" class="headerlink" title="安装gRPC"></a>安装gRPC</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> get -u google.golang.org/grpc</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">go</span> get -u google.golang.org/grpc</span><br><span class="line"><span class="keyword">package</span> google.golang.org/grpc: unrecognized <span class="keyword">import</span> path <span class="string">"google.golang.org/grpc"</span> (https fetch: Get https:<span class="comment">//google.golang.org/grpc?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)</span></span><br></pre></td></tr></table></figure><p>国内一般这样安装不上，具体解决办法：<code>https://github.com/grpc/grpc-go#FAQ</code></p><p>如果用了go mod 可以用下面的方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> mod edit -replace=google.golang.org/grpc=github.com/grpc/grpc-<span class="keyword">go</span>@latest</span><br><span class="line"><span class="keyword">go</span> mod tidy</span><br><span class="line"><span class="keyword">go</span> mod vendor</span><br><span class="line"><span class="keyword">go</span> build -mod=vendor</span><br></pre></td></tr></table></figure><h4 id="安装protobuf"><a href="#安装protobuf" class="headerlink" title="安装protobuf"></a>安装protobuf</h4><p>具体见<a href="https://www.lixueduan.com/posts/5ad1b62f.html">gRPC入门教程(一)—Protobuf安装与基本使用</a></p><h2 id="3-使用步骤"><a href="#3-使用步骤" class="headerlink" title="3. 使用步骤"></a>3. 使用步骤</h2><ul><li><p>1）需要使用 protobuf 定义接口，即编写 .proto 文件</p></li><li><p>2）然后使用 compile 工具生成特定语言的执行代码，比如 Java、C/C++、Python 等。类似于 thrift，为了解决跨语言问题。</p></li><li><p>3）启动一个 Server 端，server 端通过侦听指定的 port，来等待 Client 链接请求，通常使用 Netty 来构建，gRPC 内置了 Netty 的支持。</p></li><li><p>4）启动一个或者多个 Client 端，Client 也是基于 Netty，Client 通过与 Server 建立 TCP 长链接，并发送请求；Request 与 Response 均被封装成 HTTP2 的 stream Frame，通过 Netty Channel 进行交互。</p></li></ul><h2 id="4-示例程序"><a href="#4-示例程序" class="headerlink" title="4. 示例程序"></a>4. 示例程序</h2><h4 id="1-hello-proto"><a href="#1-hello-proto" class="headerlink" title="1.hello.proto"></a>1.hello.proto</h4><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">package helloworld;</span><br><span class="line"></span><br><span class="line">// The greeting service definition.</span><br><span class="line">service Greeter &#123;</span><br><span class="line">    // Sends a greeting</span><br><span class="line">    rpc SayHello (HelloRequest) returns (HelloReply) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// The request message containing the user&apos;s name.</span><br><span class="line">message HelloRequest &#123;</span><br><span class="line">    string name = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// The response message containing the greetings</span><br><span class="line">message HelloReply &#123;</span><br><span class="line">    string message = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官方插件</span></span><br><span class="line">protoc --go_out=plugins=grpc:. hello.proto</span><br><span class="line"><span class="comment">// protoc 编译命令</span></span><br><span class="line"><span class="comment">// go_out 编译成go代码 java_out 则编译成Java代码</span></span><br><span class="line"><span class="comment">// plugins=grpc 使用grpc插件提供对grpc的支持 否则不会生成Service的接口</span></span><br><span class="line"><span class="comment">// :. 编译到当前路径</span></span><br><span class="line"><span class="comment">// hello.proto 被编译的文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// gofast插件</span></span><br><span class="line">protoc --gofast_out=plugins=grpc:. hello.proto</span><br></pre></td></tr></table></figure><p>生成对应的 pb.go 文件。这里用了 plugins 选项，提供对 grpc 的支持，否则不会生成 Service 的接口。</p><p>这里定义了一个服务 Greeter，其中有个API <code>SayHello</code>。其接受参数为<code>HelloRequest</code>类型，返回<code>HelloReply</code>类型。这里<code>HelloRequest</code>和<code>HelloReply</code>就是普通的PB定义</p><p>服务定义为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The greeting service definition.</span></span><br><span class="line"></span><br><span class="line">service Greeter &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Sends a greeting</span></span><br><span class="line"></span><br><span class="line">  <span class="function">rpc <span class="title">SayHello</span> <span class="params">(HelloRequest)</span> <span class="title">returns</span> <span class="params">(HelloReply)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>service</code>定义了一个server。其中的接口可以是四种类型</p><ul><li>rpc GetFeature(Point) returns (Feature) {}<br>类似普通的函数调用，客户端发送请求Point到服务器，服务器返回相应Feature.</li><li>rpc ListFeatures(Rectangle) returns (stream Feature) {}<br>客户端发起一次请求，服务器端返回一个流式数据，比如一个数组中的逐个元素</li><li>rpc RecordRoute(stream Point) returns (RouteSummary) {}<br>客户端发起的请求是一个流式的数据，比如数组中的逐个元素，服务器返回一个相应</li><li>rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}<br>客户端发起的请求是一个流式数据，比如数组中的逐个元素，二服务器返回的也是一个类似的数据结构</li></ul><h4 id="2-Server"><a href="#2-Server" class="headerlink" title="2.Server"></a>2.Server</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"net"</span></span><br><span class="line"> <span class="comment">//pb文件目录</span></span><br><span class="line">    pb <span class="string">"your_path_to_gen_pb_dir/helloworld"</span> </span><br><span class="line">    <span class="string">"golang.org/x/net/context"</span></span><br><span class="line">    <span class="string">"google.golang.org/grpc"</span></span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    port = <span class="string">":50051"</span></span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// server is used to implement helloworld.GreeterServer.</span></span><br><span class="line"><span class="keyword">type</span> server <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// SayHello implements helloworld.GreeterServer</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *server)</span> <span class="title">SayHello</span><span class="params">(ctx context.Context, in *pb.HelloRequest)</span> <span class="params">(*pb.HelloReply, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;pb.HelloReply&#123;Message: <span class="string">"Hello "</span> + in.Name&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    lis, err := net.Listen(<span class="string">"tcp"</span>, port)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">"failed to listen: %v"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    s := grpc.NewServer()</span><br><span class="line">    pb.RegisterGreeterServer(s, &amp;server&#123;&#125;)</span><br><span class="line">    s.Serve(lis)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里首先定义一个 server 结构，然后实现 SayHello 的接口。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SayHello(context.Context, *HelloRequest) (*HelloReply, error)</span><br></pre></td></tr></table></figure><p>然后调用<code>grpc.NewServer()</code> 创建一个server s。接着注册这个server s到结构server上面 <code>pb.RegisterGreeterServer(s, &amp;server{})</code> 最后将创建的net.Listener传给<code>s.Serve()</code>。就可以开始监听并服务了，类似HTTP的ListenAndServe。</p><h4 id="3-client"><a href="#3-client" class="headerlink" title="3.client"></a>3.client</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line"> </span><br><span class="line">    pb <span class="string">"your_path_to_gen_pb_dir/helloworld"</span></span><br><span class="line">    <span class="string">"golang.org/x/net/context"</span></span><br><span class="line">    <span class="string">"google.golang.org/grpc"</span></span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    address     = <span class="string">"localhost:50051"</span></span><br><span class="line">    defaultName = <span class="string">"world"</span></span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Set up a connection to the server.</span></span><br><span class="line">    conn, err := grpc.Dial(address, grpc.WithInsecure())</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">"did not connect: %v"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> conn.Close()</span><br><span class="line">    c := pb.NewGreeterClient(conn)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Contact the server and print out its response.</span></span><br><span class="line">    name := defaultName</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(os.Args) &gt; <span class="number">1</span> &#123;</span><br><span class="line">        name = os.Args[<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    r, err := c.SayHello(context.Background(), &amp;pb.HelloRequest&#123;Name: name&#125;)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">"could not greet: %v"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    log.Printf(<span class="string">"Greeting: %s"</span>, r.Message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里通过pb.NewGreeterClient()传入一个conn创建一个client，然后直接调用client上面对应的服务器的接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SayHello(context.Context, *HelloRequest) (*HelloReply, error)</span><br></pre></td></tr></table></figure><p>接口，返回*HelloReply 对象。</p><p>先运行服务器，在运行客户端，可以看到。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>/<span class="number">07</span>/<span class="number">02</span> <span class="number">17</span>:<span class="number">07</span>:<span class="number">50</span> Greeting: Hello world</span><br></pre></td></tr></table></figure><h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h2><p>使用gRPC的3个步骤</p><h4 id="1-写proto文件"><a href="#1-写proto文件" class="headerlink" title="1. 写proto文件"></a>1. 写proto文件</h4><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">package helloworld;</span><br><span class="line"></span><br><span class="line">// 定义一个服务</span><br><span class="line">service UserService &#123;</span><br><span class="line">// 定义服务中的某个方法 请求参数User 返回值Resp</span><br><span class="line">    rpc Create (User) returns (Resp) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 请求参数</span><br><span class="line">message User &#123;</span><br><span class="line">    string name = 1;</span><br><span class="line">    string age = 2;</span><br><span class="line">&#125;</span><br><span class="line">// 返回值</span><br><span class="line">message Resp &#123;</span><br><span class="line">    string message = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-编译后的文件"><a href="#2-编译后的文件" class="headerlink" title="2. 编译后的文件"></a>2. 编译后的文件</h4><p>部分代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UserServiceClient is the client API for UserService service.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.</span></span><br><span class="line"><span class="comment">// 客户端调用接口</span></span><br><span class="line"><span class="keyword">type</span> UserServiceClient <span class="keyword">interface</span> &#123;</span><br><span class="line">Create(ctx context.Context, in *User, opts ...grpc.CallOption) (*Resp, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> userServiceClient <span class="keyword">struct</span> &#123;</span><br><span class="line">cc *grpc.ClientConn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewUserServiceClient</span><span class="params">(cc *grpc.ClientConn)</span> <span class="title">UserServiceClient</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;userServiceClient&#123;cc&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 客户端调用的方法具体实现</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *userServiceClient)</span> <span class="title">Create</span><span class="params">(ctx context.Context, in *User, opts ...grpc.CallOption)</span> <span class="params">(*Resp, error)</span></span> &#123;</span><br><span class="line">out := <span class="built_in">new</span>(Resp)</span><br><span class="line">    <span class="comment">// invoke 大概是反射调用 service中的方法</span></span><br><span class="line">err := c.cc.Invoke(ctx, <span class="string">"/helloworld.UserService/Create"</span>, in, out, opts...)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> out, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UserServiceServer is the server API for UserService service.</span></span><br><span class="line"><span class="keyword">type</span> UserServiceServer <span class="keyword">interface</span> &#123;</span><br><span class="line">Create(context.Context, *User) (*Resp, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RegisterUserServiceServer</span><span class="params">(s *grpc.Server, srv UserServiceServer)</span></span> &#123;</span><br><span class="line">s.RegisterService(&amp;_UserService_serviceDesc, srv)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> _<span class="title">UserService_Create_Handler</span><span class="params">(srv <span class="keyword">interface</span>&#123;&#125;, ctx context.Context, dec <span class="keyword">func</span>(<span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span>, <span class="title">interceptor</span> <span class="title">grpc</span>.<span class="title">UnaryServerInterceptor</span>) <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line">in := <span class="built_in">new</span>(User)</span><br><span class="line"><span class="keyword">if</span> err := dec(in); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> interceptor == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> srv.(UserServiceServer).Create(ctx, in)</span><br><span class="line">&#125;</span><br><span class="line">info := &amp;grpc.UnaryServerInfo&#123;</span><br><span class="line">Server:     srv,</span><br><span class="line">FullMethod: <span class="string">"/helloworld.UserService/Create"</span>,</span><br><span class="line">&#125;</span><br><span class="line">handler := <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context, req <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> srv.(UserServiceServer).Create(ctx, req.(*User))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> interceptor(ctx, in, info, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _UserService_serviceDesc = grpc.ServiceDesc&#123;</span><br><span class="line">ServiceName: <span class="string">"helloworld.UserService"</span>,</span><br><span class="line">HandlerType: (*UserServiceServer)(<span class="literal">nil</span>),</span><br><span class="line">Methods: []grpc.MethodDesc&#123;</span><br><span class="line">&#123;</span><br><span class="line">MethodName: <span class="string">"Create"</span>,</span><br><span class="line">Handler:    _UserService_Create_Handler,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">Streams:  []grpc.StreamDesc&#123;&#125;,</span><br><span class="line">Metadata: <span class="string">"hello.proto"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-Service"><a href="#3-Service" class="headerlink" title="3. Service"></a>3. Service</h4><p>定义结构体，实现proto中定义的接口。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"golang.org/x/net/context"</span></span><br><span class="line"><span class="string">"google.golang.org/grpc"</span></span><br><span class="line">pb <span class="string">"i-go/grpc/proto"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// 定义一个结构体</span></span><br><span class="line"><span class="keyword">type</span> userServer <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 然后实现proto中定义的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *userServer)</span> <span class="title">Create</span><span class="params">(ctx context.Context, user *pb.User)</span> <span class="params">(msg *pb.Resp, err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;pb.Resp&#123;Message: <span class="string">"Create Success"</span>&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">listener, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">"50052"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"net.Listen fail: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">newServer := grpc.NewServer()</span><br><span class="line">pb.RegisterUserServiceServer(newServer, &amp;userServer&#123;&#125;)</span><br><span class="line">newServer.Serve(listener)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-client"><a href="#4-client" class="headerlink" title="4. client"></a>4. client</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"google.golang.org/grpc"</span></span><br><span class="line">pb <span class="string">"i-go/grpc/proto"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// grpc.WithInsecure() 禁用传输安全性</span></span><br><span class="line">conn, err := grpc.Dial(<span class="string">"localhost:50052"</span>, grpc.WithInsecure())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"did not connect: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">    <span class="comment">// 创建一个client</span></span><br><span class="line">client := pb.NewUserServiceClient(conn)</span><br><span class="line">    <span class="comment">// 调用的是UserServiceClient中的方法</span></span><br><span class="line">resp, err := client.Create(context.Background(), &amp;pb.User&#123;Name: <span class="string">"illusory"</span>, Age: <span class="string">"23"</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"could not Create: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">"Create Resp: %s"</span>, resp.Message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要对 gRPC 框架做了简单的介绍，同时记录了具体安装方法与基本使用教程。&lt;/p&gt;
    
    </summary>
    
      <category term="gRPC" scheme="https://www.lixueduan.com/categories/gRPC/"/>
    
    
      <category term="gRPC" scheme="https://www.lixueduan.com/tags/gRPC/"/>
    
  </entry>
  
  <entry>
    <title>gRPC入门教程(一)---Protobuf安装与基本使用</title>
    <link href="https://www.lixueduan.com/posts/5ad1b62f.html"/>
    <id>https://www.lixueduan.com/posts/5ad1b62f.html</id>
    <published>2019-05-08T14:00:00.000Z</published>
    <updated>2019-07-03T12:35:04.744Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录了 Windows 环境下 Protobuf 的安装与基本使用教程。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>Protocol buffers是一个灵活的、高效的、自动化的用于对结构化数据进行序列化的协议，与XML、json相比，Protocol buffers序列化后的码流更小、速度更快、操作更简单。</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><h3 id="2-1-安装protoc"><a href="#2-1-安装protoc" class="headerlink" title="2.1 安装protoc"></a>2.1 安装protoc</h3><p>protoc 用来将.proto文件转化为自己使用的语言格式，我使用的是go语言，所以还要下载一个与protoc配合的插件，一会再说这个插件。</p><p><strong>下载地址</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//github.com/protocolbuffers/protobuf/releases</span></span><br></pre></td></tr></table></figure><p>我这里是windows，所以下载的是<code>[protoc-3.8.0-win64.zip]</code>,下载后解压,将<code>bin</code>目录下的<code>protoc.exe</code>复制到<code>$GOPATH/bin</code>目录中。</p><h3 id="2-2-安装proto"><a href="#2-2-安装proto" class="headerlink" title="2.2 安装proto"></a>2.2 安装proto</h3><p>proto是protobuf在golang中的接口模块</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> get github.com/golang/protobuf/proto</span><br></pre></td></tr></table></figure><h3 id="2-3-安装插件"><a href="#2-3-安装插件" class="headerlink" title="2.3 安装插件"></a>2.3 安装插件</h3><p><code>protoc-gen-go</code> 是用来将protobuf的的代码转换成go语言代码的一个插件</p><p>github地址：<code>https://github.com/golang/protobuf</code></p><p>使用以下命令将会自动把<code>protoc-gen-go</code>安装到<code>$GOPATH/bin</code>目录下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> get -u github.com/golang/protobuf/protoc-gen-<span class="keyword">go</span></span><br></pre></td></tr></table></figure><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h2><h3 id="3-1-编写一个proto文件"><a href="#3-1-编写一个proto文件" class="headerlink" title="3.1 编写一个proto文件"></a>3.1 编写一个proto文件</h3><p><code>derssbook.proto</code></p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line">package go_protoc;</span><br><span class="line"></span><br><span class="line">message Person &#123;</span><br><span class="line">  string name = 1;</span><br><span class="line">  int32 id = 2;</span><br><span class="line">  string email = 3;</span><br><span class="line"></span><br><span class="line">  enum PhoneType &#123;</span><br><span class="line">    MOBILE = 0;</span><br><span class="line">    HOME = 1;</span><br><span class="line">    WORK = 2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  message PhoneNumber &#123;</span><br><span class="line">    string number = 1;</span><br><span class="line">    PhoneType type = 2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  repeated PhoneNumber phones = 4;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message AddressBook &#123;</span><br><span class="line">  repeated Person people = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-编译"><a href="#3-2-编译" class="headerlink" title="3.2 编译"></a>3.2 编译</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc --go_out=. derssbook.proto</span><br></pre></td></tr></table></figure><p>编译后会生成一个<code>derssbook.pb.go</code>文件。</p><h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h2><p>到此为止 主要记录了 protobuf 安装与插件支持，proto文件的编写与编译等流程。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录了 Windows 环境下 Protobuf 的安装与基本使用教程。&lt;/p&gt;
    
    </summary>
    
      <category term="gRPC" scheme="https://www.lixueduan.com/categories/gRPC/"/>
    
    
      <category term="gRPC" scheme="https://www.lixueduan.com/tags/gRPC/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB入门系列(一)---基于Docker安装MongoDB</title>
    <link href="https://www.lixueduan.com/posts/5d09291b.html"/>
    <id>https://www.lixueduan.com/posts/5d09291b.html</id>
    <published>2019-05-02T14:00:00.000Z</published>
    <updated>2019-06-13T12:56:30.888Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录了如何通过<code>Docker</code>方便快捷的安装<code>MongoDB</code>数据库。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。</p><p>MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><h3 id="2-1-拉取镜像"><a href="#2-1-拉取镜像" class="headerlink" title="2.1 拉取镜像"></a>2.1 拉取镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mongo</span><br></pre></td></tr></table></figure><h3 id="2-2-准备环境"><a href="#2-2-准备环境" class="headerlink" title="2.2 准备环境"></a>2.2 准备环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/docker/mongodb/data //数据</span><br><span class="line">/usr/local/docker/mongodb/backup //备份</span><br><span class="line">/usr/local/docker/mongodb/conf  //配置文件</span><br></pre></td></tr></table></figure><p>准备3个文件夹用来存放相应数据。</p><h3 id="2-3-配置文件"><a href="#2-3-配置文件" class="headerlink" title="2.3 配置文件"></a>2.3 配置文件</h3><p><code>mongodb.conf</code>配置文件如下，建立好配置文件放到前面建好的目录中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> mongodb.conf</span><br><span class="line">logappend=true</span><br><span class="line"><span class="meta">#</span> bind_ip=127.0.0.1</span><br><span class="line">port=27017 </span><br><span class="line">fork=false</span><br><span class="line">noprealloc=true</span><br><span class="line"><span class="meta">#</span> 是否开启身份认证</span><br><span class="line">auth=false</span><br></pre></td></tr></table></figure><h3 id="2-4-启动容器"><a href="#2-4-启动容器" class="headerlink" title="2.4 启动容器"></a>2.4 启动容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mongodb -v \</span><br><span class="line">/usr/local/docker/mongodb/data:/data/db -v \</span><br><span class="line">/usr/local/docker/mongodb/backup:/data/backup -v \</span><br><span class="line">/usr/local/docker/mongodb/conf:/data/configdb -p \27017:27017 -d mongo \</span><br><span class="line">-f /data/configdb/mongodb.conf \</span><br><span class="line">--auth</span><br><span class="line"><span class="meta">#</span> 命令说明</span><br><span class="line">容器命名mongodb，</span><br><span class="line">数据库数据文件挂载到/usr/local/docker/mongodb/data</span><br><span class="line">备份文件挂载到/usr/local/docker/mongodb/backup</span><br><span class="line">启动的配置文件目录挂载到容器的/usr/local/docker/mongodb/conf</span><br><span class="line">--auth开启身份验证。</span><br><span class="line">-f /data/configdb/mongodb.conf 以配置文件启动 </span><br><span class="line"><span class="meta">#</span> mongod启动命令是在容器内执行的，因此使用的配置文件路径是相对于容器的内部路径。</span><br></pre></td></tr></table></figure><h2 id="3-添加用户"><a href="#3-添加用户" class="headerlink" title="3. 添加用户"></a>3. 添加用户</h2><p>使用<code>MongoDB</code>之前需要先创建用户。</p><h3 id="3-1-进入容器"><a href="#3-1-进入容器" class="headerlink" title="3.1 进入容器"></a>3.1 进入容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mongodb bash</span><br></pre></td></tr></table></figure><p>执行该命令进入到刚才启动的容器中。</p><h3 id="3-2-进入-MongoDB"><a href="#3-2-进入-MongoDB" class="headerlink" title="3.2 进入 MongoDB"></a>3.2 进入 MongoDB</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure><p>执行该命令进入到<code>MongoDB</code>客户端。</p><h3 id="3-3-创建用户"><a href="#3-3-创建用户" class="headerlink" title="3.3 创建用户"></a>3.3 创建用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 进入 admin 的数据库</span><br><span class="line">use admin</span><br><span class="line"><span class="meta">#</span> 创建管理员用户</span><br><span class="line">db.createUser(</span><br><span class="line">   &#123;</span><br><span class="line">     user: "admin",</span><br><span class="line">     pwd: "123456",</span><br><span class="line">     roles: [ &#123; role: "userAdminAnyDatabase", db: "admin" &#125; ]</span><br><span class="line">   &#125;</span><br><span class="line"> )</span><br><span class="line"><span class="meta"> #</span> 创建有可读写权限的用户. 对于一个特定的数据库, 比如'demo'</span><br><span class="line"> db.createUser(&#123;</span><br><span class="line">     user: 'test',</span><br><span class="line">     pwd: '123456',</span><br><span class="line">     roles: [&#123;role: "readWrite", db: "demo"&#125;]</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><h2 id="4-使用"><a href="#4-使用" class="headerlink" title="4. 使用"></a>4. 使用</h2><p>到此为止<code>MongoDB</code>就安装完成了，可以远程连接了。连接之前先关闭<code>Linux</code>防火墙。</p><h3 id="4-1-可视化工具"><a href="#4-1-可视化工具" class="headerlink" title="4.1 可视化工具"></a>4.1 可视化工具</h3><p>可视化工具暂时用的<code>Robo3T</code>,官网：<code>https://robomongo.org/</code></p><h3 id="4-2-连接"><a href="#4-2-连接" class="headerlink" title="4.2 连接"></a>4.2 连接</h3><p>使用前面创建的用户就可以远程连接到<code>MongoDB</code>了.</p><p>其中管理员用户是用来管理用户的。</p><p>每个用户只能访问指定的db。</p><p>比如上面的<code>test</code>账号只能访问<code>demo</code>这个db。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url:192.168.1.1:27017</span><br><span class="line">username:test</span><br><span class="line">password:123456</span><br></pre></td></tr></table></figure><h2 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h2><p><code>https://www.runoob.com/mongodb/mongodb-tutorial.html</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录了如何通过&lt;code&gt;Docker&lt;/code&gt;方便快捷的安装&lt;code&gt;MongoDB&lt;/code&gt;数据库。&lt;/p&gt;
    
    </summary>
    
      <category term="MongoDB" scheme="https://www.lixueduan.com/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="https://www.lixueduan.com/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Java中为什么方法内定义的内部类可以访问方法中的局部变量</title>
    <link href="https://www.lixueduan.com/posts/7d00948d.html"/>
    <id>https://www.lixueduan.com/posts/7d00948d.html</id>
    <published>2019-04-28T14:00:00.000Z</published>
    <updated>2019-04-30T09:02:21.434Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要通过实例代码分析了 Java 中为什么方法内定义的内部类可以访问方法中的局部变量。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>匿名内部类和非匿名内部类。</p><p>在平时写代码的过程中， 我们经常会写类似下面的代码段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> <span class="keyword">var</span> = count;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码在 main 方法中定义了一个匿名内部类， 并且创建了匿名内部类的一个对象， 使用这个对象调用了匿名内部类中的方法。 所有这些操作都在<code>new Thread(){}.start()</code> 这一句代码中完成， 这不禁让人感叹 Java 的表达能力还是很强的。 上面的代码和以下代码等价：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在方法中定义一个内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> <span class="keyword">var</span> = count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> MyThread().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们不关心方法中匿名内部类和非匿名内部类的区别， 我们只需要知道， 这两种方式都是定义在方法中的内部类， 他们的工作原理是相同的。 在本文中主要根据非匿名内部类讲解。 </p><p>让我们仔细观察上面的代码都有哪些“奇怪”的行为：</p><ul><li>1.在外部类的 main 方法中有一个局部变量 count， 并且在内部类的 run 方法中访问了这个 count 变量。 也就是说， 方法中定义的内部类， 可以访问方法中的局部变量（方法的参数也是局部变量）；</li><li>2.count 变量使用 final  关键字修饰， 如果去掉 final， 则编译失败。 也就是说被方法中的内部类访问的局部变量必须是final的。</li></ul><p>由于我们经常这样做， 这样写代码， 久而久之养成了习惯， 就成了司空见惯的做法了。 但是如果要问为什么Java支持这样的做法， 恐怕很少有人能说的出来。 在下面， 我们就会分析为什么Java支持这种做法， 让我们不仅知其然， 还要知其所以然。</p><p>为什么定义在方法中的内部类可以访问方法中的局部变量？</p><h2 id="2-原理分析"><a href="#2-原理分析" class="headerlink" title="2. 原理分析"></a>2. 原理分析</h2><h3 id="2-1-当被访问的局部变量是编译时可确定的字面常量时"><a href="#2-1-当被访问的局部变量是编译时可确定的字面常量时" class="headerlink" title="2.1 当被访问的局部变量是编译时可确定的字面常量时"></a>2.1 当被访问的局部变量是编译时可确定的字面常量时</h3><p>我们首先看这样一段代码， 本文的以下部分会以这样的代码进行讲解。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">outerMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span>  String localVar = <span class="string">"abc"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*定义在方法中的内部类*/</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">innerMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">                String a = localVar;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在外部类的方法 outerMethod 中定义了成员变量 String localVar， 并且用一个编译时字面量 “abc” 给他赋值。在 outerMethod 方法中定义了内部类 Inner， 并且在内部类的方法 innerMethod 中访问了 localVar 变量。 接下来我们就根据这个例子来讲解为什么可以这样做。</p><p>首先看编译后的文件， 和普通的内部类一样， 定义在方法中的内部类在编译之后， 也有自己独立的 class 文件：</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/java/%E5%86%85%E9%83%A8%E7%B1%BB-%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F-class.png" alt="inner"></p><h4 id="1-反编译"><a href="#1-反编译" class="headerlink" title="1. 反编译"></a>1. 反编译</h4><p>执行以下命令反编译该文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javap -classpath . -v Outer$<span class="number">1</span>Inner</span><br></pre></td></tr></table></figure><blockquote><p><code>-classpath .</code>  :  说明在当前目录下寻找要反编译的class文件<br><code>-v</code>   : 加上这个参数输出的信息比较全面。包括常量池和方法内的局部变量表， 行号， 访问标志等等。</p></blockquote><h4 id="2-结果分析"><a href="#2-结果分析" class="headerlink" title="2. 结果分析"></a>2. 结果分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">D:\lillusory\Java\work_idea\java-learning\target\classes\jvm\localfiled&gt;javap -c</span><br><span class="line">lasspath . -v Outer$<span class="number">1</span>Inner</span><br><span class="line"></span><br><span class="line">Classfile /D:/lillusory/Java/work_idea/java-learning/target/classes/jvm/localfil</span><br><span class="line">ed/Outer$<span class="number">1</span>Inner.class</span><br><span class="line">  Last modified <span class="number">2019</span>-<span class="number">4</span>-<span class="number">29</span>; size <span class="number">643</span> bytes</span><br><span class="line">  MD5 checksum <span class="number">12</span>cea9ab1340856585960146078de1b3</span><br><span class="line">  Compiled from <span class="string">"Outer.java"</span></span><br><span class="line">   &lt;!--版本号等信息--&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">jvm</span>.<span class="title">localfiled</span>.<span class="title">Outer</span>$1<span class="title">Inner</span></span></span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: ACC_SUPER</span><br><span class="line">  &lt;!--常量池--&gt;</span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Fieldref           #4.#27         // jvm/localfiled/Outer$1Inner.this$0:</span><br><span class="line">Ljvm/localfiled/Outer;</span><br><span class="line">   #2 = Methodref          #5.#28         // java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">   #3 = String             #29            // abc</span><br><span class="line">   #4 = Class              #30            // jvm/localfiled/Outer$1Inner</span><br><span class="line">   #5 = Class              #31            // java/lang/Object</span><br><span class="line">   #6 = Utf8               this$0</span><br><span class="line">   #7 = Utf8               Ljvm/localfiled/Outer;</span><br><span class="line">   #8 = Utf8               &lt;init&gt;</span><br><span class="line">   #9 = Utf8               (Ljvm/localfiled/Outer;)V</span><br><span class="line">  #10 = Utf8               Code</span><br><span class="line">  #11 = Utf8               LineNumberTable</span><br><span class="line">  #12 = Utf8               LocalVariableTable</span><br><span class="line">  #13 = Utf8               this</span><br><span class="line">  #14 = Utf8               Inner</span><br><span class="line">  #15 = Utf8               InnerClasses</span><br><span class="line">  #16 = Utf8               Ljvm/localfiled/Outer$1Inner;</span><br><span class="line">  #17 = Utf8               MethodParameters</span><br><span class="line">  #18 = Utf8               innerMethod</span><br><span class="line">  #19 = Utf8               ()V</span><br><span class="line">  #20 = Utf8               a</span><br><span class="line">  #21 = Utf8               Ljava/lang/String;</span><br><span class="line">  #22 = Utf8               SourceFile</span><br><span class="line">  #23 = Utf8               Outer.java</span><br><span class="line">  #24 = Utf8               EnclosingMethod</span><br><span class="line">  #25 = Class              #32            // jvm/localfiled/Outer</span><br><span class="line">  #26 = NameAndType        #33:#19        // outerMethod:()V</span><br><span class="line">  #27 = NameAndType        #6:#7          // this$0:Ljvm/localfiled/Outer;</span><br><span class="line">  #28 = NameAndType        #8:#19         // "&lt;init&gt;":()V</span><br><span class="line">  #29 = Utf8               abc</span><br><span class="line">  #30 = Utf8               jvm/localfiled/Outer$1Inner</span><br><span class="line">  #31 = Utf8               java/lang/Object</span><br><span class="line">  #32 = Utf8               jvm/localfiled/Outer</span><br><span class="line">  #33 = Utf8               outerMethod</span><br><span class="line"> &lt;!--从这里开始看--&gt;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">final</span> jvm.localfiled.Outer <span class="keyword">this</span>$<span class="number">0</span>;</span><br><span class="line">    descriptor: Ljvm/localfiled/Outer;</span><br><span class="line">    flags: ACC_FINAL, ACC_SYNTHETIC</span><br><span class="line"></span><br><span class="line">  jvm.localfiled.Outer$<span class="number">1</span>Inner(jvm.localfiled.Outer);</span><br><span class="line">    descriptor: (Ljvm/localfiled/Outer;)V</span><br><span class="line">    flags:</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">2</span>, args_size=<span class="number">2</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: aload_1</span><br><span class="line">         2: putfield      #1                  // Field this$0:Ljvm/localfiled/Ou</span><br><span class="line">ter;</span><br><span class="line">         <span class="number">5</span>: aload_0</span><br><span class="line">         6: invokespecial #2                  // Method java/lang/Object."&lt;init&gt;</span><br><span class="line"><span class="string">":()V</span></span><br><span class="line"><span class="string">         9: return</span></span><br><span class="line"><span class="string">      LineNumberTable:</span></span><br><span class="line"><span class="string">        line 11: 0</span></span><br><span class="line"><span class="string">      LocalVariableTable:</span></span><br><span class="line"><span class="string">        Start  Length  Slot  Name   Signature</span></span><br><span class="line"><span class="string">            0      10     0  this   Ljvm/localfiled/Outer$1Inner;</span></span><br><span class="line"><span class="string">            0      10     1 this$0   Ljvm/localfiled/Outer;</span></span><br><span class="line"><span class="string">    MethodParameters:</span></span><br><span class="line"><span class="string">      Name                           Flags</span></span><br><span class="line"><span class="string">      this$0                         final mandated</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  void innerMethod();</span></span><br><span class="line"><span class="string">    descriptor: ()V</span></span><br><span class="line"><span class="string">    flags:</span></span><br><span class="line"><span class="string">    Code:</span></span><br><span class="line"><span class="string">      stack=1, locals=2, args_size=1</span></span><br><span class="line"><span class="string">         0: ldc           #3                  // String abc</span></span><br><span class="line"><span class="string">         2: astore_1</span></span><br><span class="line"><span class="string">         3: return</span></span><br><span class="line"><span class="string">      LineNumberTable:</span></span><br><span class="line"><span class="string">        line 13: 0</span></span><br><span class="line"><span class="string">        line 14: 3</span></span><br><span class="line"><span class="string">      LocalVariableTable:</span></span><br><span class="line"><span class="string">        Start  Length  Slot  Name   Signature</span></span><br><span class="line"><span class="string">            0       4     0  this   Ljvm/localfiled/Outer$1Inner;</span></span><br><span class="line"><span class="string">            3       1     1     a   Ljava/lang/String;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">SourceFile: "</span>Outer.java<span class="string">"</span></span><br><span class="line"><span class="string">EnclosingMethod: #25.#26                // jvm.localfiled.Outer.outerMethod</span></span><br><span class="line"><span class="string">InnerClasses:</span></span><br><span class="line"><span class="string">     #14= #4; //Inner=class jvm/localfiled/Outer$1Inner</span></span><br></pre></td></tr></table></figure><p>其中 InnerMethod 相关如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">innerMethod</span><span class="params">()</span></span>;</span><br><span class="line">  descriptor: ()V</span><br><span class="line">  flags:</span><br><span class="line">  Code:</span><br><span class="line">    stack=<span class="number">1</span>, locals=<span class="number">2</span>, args_size=<span class="number">1</span></span><br><span class="line">       0: ldc           #3                  // String abc</span><br><span class="line">       <span class="number">2</span>: astore_1</span><br><span class="line">       <span class="number">3</span>: <span class="keyword">return</span></span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line <span class="number">13</span>: <span class="number">0</span></span><br><span class="line">      line <span class="number">14</span>: <span class="number">3</span></span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          <span class="number">0</span>       <span class="number">4</span>     <span class="number">0</span>  <span class="keyword">this</span>   Ljvm/localfiled/Outer$<span class="number">1</span>Inner;</span><br><span class="line">          <span class="number">3</span>       <span class="number">1</span>     <span class="number">1</span>     a   Ljava/lang/String;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldc           #3                  // String abc</span><br></pre></td></tr></table></figure><p>Idc 指令的意思是将索引指向的常量池中的项压入操作数栈。 这里的索引为3 ， 引用的常量池中的项为字符串“abc” 。 这句话就揭示了内部类访问方法局部变量的原理。 让我们从常量池第3项看起。 </p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#3 = String             #29            // abc</span><br></pre></td></tr></table></figure><p> 但是这个字符串  “abc”  明明是定义在外部类 Outer 中的， 因为出现在外部类的 outerMethod 方法中。 为了查看这个 “abc” 是否在外部类中， 我们继续反编译外部类 Outer.class 。</p><h4 id="3-反编译外部类"><a href="#3-反编译外部类" class="headerlink" title="3. 反编译外部类"></a>3. 反编译外部类</h4><p>反编译外部类结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">D:\lillusory\Java\work_idea\java-learning\target\classes\jvm\localfiled&gt;javap -c</span><br><span class="line">lasspath . -v Outer.class</span><br><span class="line">Classfile /D:/lillusory/Java/work_idea/java-learning/target/classes/jvm/localfil</span><br><span class="line">ed/Outer.class</span><br><span class="line">  Last modified <span class="number">2019</span>-<span class="number">4</span>-<span class="number">29</span>; size <span class="number">471</span> bytes</span><br><span class="line">  MD5 checksum <span class="number">4442f</span>d25b31a0563253f16e275643d11</span><br><span class="line">  Compiled from <span class="string">"Outer.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jvm</span>.<span class="title">localfiled</span>.<span class="title">Outer</span></span></span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Methodref          #4.#20         // java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">   #2 = String             #21            // abc</span><br><span class="line">   #3 = Class              #22            // jvm/localfiled/Outer</span><br><span class="line">   #4 = Class              #23            // java/lang/Object</span><br><span class="line">   #5 = Class              #24            // jvm/localfiled/Outer$1Inner</span><br><span class="line">   #6 = Utf8               Inner</span><br><span class="line">   #7 = Utf8               InnerClasses</span><br><span class="line">   #8 = Utf8               &lt;init&gt;</span><br><span class="line">   #9 = Utf8               ()V</span><br><span class="line">  #10 = Utf8               Code</span><br><span class="line">  #11 = Utf8               LineNumberTable</span><br><span class="line">  #12 = Utf8               LocalVariableTable</span><br><span class="line">  #13 = Utf8               this</span><br><span class="line">  #14 = Utf8               Ljvm/localfiled/Outer;</span><br><span class="line">  #15 = Utf8               outerMethod</span><br><span class="line">  #16 = Utf8               localVar</span><br><span class="line">  #17 = Utf8               Ljava/lang/String;</span><br><span class="line">  #18 = Utf8               SourceFile</span><br><span class="line">  #19 = Utf8               Outer.java</span><br><span class="line">  #20 = NameAndType        #8:#9          // "&lt;init&gt;":()V</span><br><span class="line">  #21 = Utf8               abc</span><br><span class="line">  #22 = Utf8               jvm/localfiled/Outer</span><br><span class="line">  #23 = Utf8               java/lang/Object</span><br><span class="line">  #24 = Utf8               jvm/localfiled/Outer$1Inner</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> jvm.localfiled.Outer();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;</span><br><span class="line"><span class="string">":()V</span></span><br><span class="line"><span class="string">         4: return</span></span><br><span class="line"><span class="string">      LineNumberTable:</span></span><br><span class="line"><span class="string">        line 6: 0</span></span><br><span class="line"><span class="string">      LocalVariableTable:</span></span><br><span class="line"><span class="string">        Start  Length  Slot  Name   Signature</span></span><br><span class="line"><span class="string">            0       5     0  this   Ljvm/localfiled/Outer;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  void outerMethod();</span></span><br><span class="line"><span class="string">    descriptor: ()V</span></span><br><span class="line"><span class="string">    flags:</span></span><br><span class="line"><span class="string">    Code:</span></span><br><span class="line"><span class="string">      stack=1, locals=2, args_size=1</span></span><br><span class="line"><span class="string">         0: ldc           #2                  // String abc</span></span><br><span class="line"><span class="string">         2: astore_1</span></span><br><span class="line"><span class="string">         3: return</span></span><br><span class="line"><span class="string">      LineNumberTable:</span></span><br><span class="line"><span class="string">        line 8: 0</span></span><br><span class="line"><span class="string">        line 16: 3</span></span><br><span class="line"><span class="string">      LocalVariableTable:</span></span><br><span class="line"><span class="string">        Start  Length  Slot  Name   Signature</span></span><br><span class="line"><span class="string">            0       4     0  this   Ljvm/localfiled/Outer;</span></span><br><span class="line"><span class="string">            3       1     1 localVar   Ljava/lang/String;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">SourceFile: "</span>Outer.java<span class="string">"</span></span><br><span class="line"><span class="string">InnerClasses:</span></span><br><span class="line"><span class="string">     #6= #5; //Inner=class jvm/localfiled/Outer$1Inner</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#2 = String             #21            // abc</span><br></pre></td></tr></table></figure><p>我们可以看到， “abc” 这个字符串确实出现在 Outer.class 常量池的第15项。 这就奇怪了， 明明是定义在外部类的字面量， 为什么会出现在 内部类的常量池中呢？ 其实这正是编译器在编译方法中定义的内部类时， 所做的额外工作。 </p><h4 id="4-修改局部变量类型"><a href="#4-修改局部变量类型" class="headerlink" title="4. 修改局部变量类型"></a>4. 修改局部变量类型</h4><p>下面我们将这个被内部类访问的局部变量改成整形的。 看看在字节码层面上会有什么变化。 修改后的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">outerMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">final</span>  <span class="keyword">int</span> localVar = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*定义在方法中的内部类*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">innerMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = localVar;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反编译内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">D:\lillusory\Java\work_idea\java-learning\target\classes\jvm\localfiled&gt;javap -c</span><br><span class="line">lasspath . -v Outer$<span class="number">1</span>Inner</span><br><span class="line">警告: 二进制文件Outer$<span class="number">1</span>Inner包含jvm.localfiled.Outer$<span class="number">1</span>Inner</span><br><span class="line">Classfile /D:/lillusory/Java/work_idea/java-learning/target/classes/jvm/localfil</span><br><span class="line">ed/Outer$<span class="number">1</span>Inner.class</span><br><span class="line">  Last modified <span class="number">2019</span>-<span class="number">4</span>-<span class="number">29</span>; size <span class="number">616</span> bytes</span><br><span class="line">  MD5 checksum f3e4d21797e0fe422029c3894699dbf6</span><br><span class="line">  Compiled from <span class="string">"Outer.java"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">jvm</span>.<span class="title">localfiled</span>.<span class="title">Outer</span>$1<span class="title">Inner</span></span></span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Fieldref           #3.#26         // jvm/localfiled/Outer$1Inner.this$0:</span><br><span class="line">Ljvm/localfiled/Outer;</span><br><span class="line">   #2 = Methodref          #4.#27         // java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">   #3 = Class              #28            // jvm/localfiled/Outer$1Inner</span><br><span class="line">   #4 = Class              #29            // java/lang/Object</span><br><span class="line">   #5 = Utf8               this$0</span><br><span class="line">   #6 = Utf8               Ljvm/localfiled/Outer;</span><br><span class="line">   #7 = Utf8               &lt;init&gt;</span><br><span class="line">   #8 = Utf8               (Ljvm/localfiled/Outer;)V</span><br><span class="line">   #9 = Utf8               Code</span><br><span class="line">  #10 = Utf8               LineNumberTable</span><br><span class="line">  #11 = Utf8               LocalVariableTable</span><br><span class="line">  #12 = Utf8               this</span><br><span class="line">  #13 = Utf8               Inner</span><br><span class="line">  #14 = Utf8               InnerClasses</span><br><span class="line">  #15 = Utf8               Ljvm/localfiled/Outer$1Inner;</span><br><span class="line">  #16 = Utf8               MethodParameters</span><br><span class="line">  #17 = Utf8               innerMethod</span><br><span class="line">  #18 = Utf8               ()V</span><br><span class="line">  #19 = Utf8               a</span><br><span class="line">  #20 = Utf8               I</span><br><span class="line">  #21 = Utf8               SourceFile</span><br><span class="line">  #22 = Utf8               Outer.java</span><br><span class="line">  #23 = Utf8               EnclosingMethod</span><br><span class="line">  #24 = Class              #30            // jvm/localfiled/Outer</span><br><span class="line">  #25 = NameAndType        #31:#18        // outerMethod:()V</span><br><span class="line">  #26 = NameAndType        #5:#6          // this$0:Ljvm/localfiled/Outer;</span><br><span class="line">  #27 = NameAndType        #7:#18         // "&lt;init&gt;":()V</span><br><span class="line">  #28 = Utf8               jvm/localfiled/Outer$1Inner</span><br><span class="line">  #29 = Utf8               java/lang/Object</span><br><span class="line">  #30 = Utf8               jvm/localfiled/Outer</span><br><span class="line">  #31 = Utf8               outerMethod</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">final</span> jvm.localfiled.Outer <span class="keyword">this</span>$<span class="number">0</span>;</span><br><span class="line">    descriptor: Ljvm/localfiled/Outer;</span><br><span class="line">    flags: ACC_FINAL, ACC_SYNTHETIC</span><br><span class="line"></span><br><span class="line">  jvm.localfiled.Outer$<span class="number">1</span>Inner(jvm.localfiled.Outer);</span><br><span class="line">    descriptor: (Ljvm/localfiled/Outer;)V</span><br><span class="line">    flags:</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">2</span>, args_size=<span class="number">2</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: aload_1</span><br><span class="line">         2: putfield      #1                  // Field this$0:Ljvm/localfiled/Ou</span><br><span class="line">ter;</span><br><span class="line">         <span class="number">5</span>: aload_0</span><br><span class="line">         6: invokespecial #2                  // Method java/lang/Object."&lt;init&gt;</span><br><span class="line"><span class="string">":()V</span></span><br><span class="line"><span class="string">         9: return</span></span><br><span class="line"><span class="string">      LineNumberTable:</span></span><br><span class="line"><span class="string">        line 12: 0</span></span><br><span class="line"><span class="string">      LocalVariableTable:</span></span><br><span class="line"><span class="string">        Start  Length  Slot  Name   Signature</span></span><br><span class="line"><span class="string">            0      10     0  this   Ljvm/localfiled/Outer$1Inner;</span></span><br><span class="line"><span class="string">            0      10     1 this$0   Ljvm/localfiled/Outer;</span></span><br><span class="line"><span class="string">    MethodParameters:</span></span><br><span class="line"><span class="string">      Name                           Flags</span></span><br><span class="line"><span class="string">      this$0                         final mandated</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  void innerMethod();</span></span><br><span class="line"><span class="string">    descriptor: ()V</span></span><br><span class="line"><span class="string">    flags:</span></span><br><span class="line"><span class="string">    Code:</span></span><br><span class="line"><span class="string">      stack=1, locals=2, args_size=1</span></span><br><span class="line"><span class="string">         0: iconst_1</span></span><br><span class="line"><span class="string">         1: istore_1</span></span><br><span class="line"><span class="string">         2: return</span></span><br><span class="line"><span class="string">      LineNumberTable:</span></span><br><span class="line"><span class="string">        line 14: 0</span></span><br><span class="line"><span class="string">        line 15: 2</span></span><br><span class="line"><span class="string">      LocalVariableTable:</span></span><br><span class="line"><span class="string">        Start  Length  Slot  Name   Signature</span></span><br><span class="line"><span class="string">            0       3     0  this   Ljvm/localfiled/Outer$1Inner;</span></span><br><span class="line"><span class="string">            2       1     1     a   I</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">SourceFile: "</span>Outer.java<span class="string">"</span></span><br><span class="line"><span class="string">EnclosingMethod: #24.#25                // jvm.localfiled.Outer.outerMethod</span></span><br><span class="line"><span class="string">InnerClasses:</span></span><br><span class="line"><span class="string">     #13= #3; //Inner=class jvm/localfiled/Outer$1Inner</span></span><br></pre></td></tr></table></figure><p>其中 InnerMethod 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">innerMethod</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags:</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">2</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: iconst_1</span><br><span class="line">         <span class="number">1</span>: istore_1</span><br><span class="line">         <span class="number">2</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">14</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">15</span>: <span class="number">2</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">3</span>     <span class="number">0</span>  <span class="keyword">this</span>   Ljvm/localfiled/Outer$<span class="number">1</span>Inner;</span><br><span class="line">            <span class="number">2</span>       <span class="number">1</span>     <span class="number">1</span>     a   I</span><br></pre></td></tr></table></figure><p>第一句变成了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iconst_1</span><br></pre></td></tr></table></figure><p>这句字节码的意义是：将int类型的常量 1 压入操作数栈。</p><p>这就是在内部类中访问外部类方法中的局部变量 int localVar = 1 的原理。</p><h4 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h4><p> 由此可见， <strong>当内部类中访问的局部变量是int型的字面量时， 编译器直接将对该变量的访问嵌入到内部类的字节码中</strong>， 也就是说， 在运行时， 方法中的内部类和外部类， 和外部类方法中的局部变量就没有任何关系了。 这也是编译器所做的额外工作。</p><p>上面两种情况有一个共同点， 那就是， 被内部类访问的外部了方法中的局部变量， 都是在编译时可以确定的字面常量。 像下面这样的形式都是编译时可确定的字面常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span>  String localVar = <span class="string">"abc"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span>  <span class="keyword">int</span> localVar = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>他们之所以被称为字面常量， 是因为他们被 final 修饰， 运行时不可改变， 当编译器在编译源文件时， 可以确定他们的值， 也可以确定他们在运行时不会被修改， 所以可以实现类似C语言宏替换的功能。也就是说虽然在编写源代码时， 在内部类中访问的是外部类定义的这个变量， 但是在编译成字节码时， 却把这个变量的值放入了访问这个变量的内部类的常量池中， 或直接将这个变量的值嵌入内部类的字节码指令中。 运行时这两个类各不相干， 各自访问各自的常量池， 各自执行各自的字节码指令。在编译方法中定义的内部类时， 编译器的行为就是这样的。 </p><h3 id="2-2-当被访问的局部变量的值在编译时不可确定时"><a href="#2-2-当被访问的局部变量的值在编译时不可确定时" class="headerlink" title="2.2 当被访问的局部变量的值在编译时不可确定时"></a>2.2 当被访问的局部变量的值在编译时不可确定时</h3><p>那么当方法中定义的内部类访问的局部变量不是编译时可确定的字面常量， 又会怎么样呢？想要让这个局部变量变成编译时不可确定的， 只需要将源码修改如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">outerMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">final</span>  String localVar = getString();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*定义在方法中的内部类*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">innerMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">String a = localVar;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Inner();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">String <span class="title">getString</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"illusory"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于使用 getString 方法的返回值为 localVar 赋值， 所以在编译时期， 编译器不可确定 localVar 的值， 必须在运行时执行了 getString 方法之后才能确定它的值。 既然编译时不不可确定， 那么像上面那样的处理就行不通了。</p><h4 id="1-反编译-1"><a href="#1-反编译-1" class="headerlink" title="1. 反编译"></a>1. 反编译</h4><p>执行以下命令反编译该文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javap -classpath . -v Outer$<span class="number">1</span>Inner</span><br></pre></td></tr></table></figure><blockquote><p><code>-classpath .</code>  :  说明在当前目录下寻找要反编译的class文件<br><code>-v</code>   : 加上这个参数输出的信息比较全面。包括常量池和方法内的局部变量表， 行号， 访问标志等等。</p></blockquote><p> 那么在这种情况下， 内部类是通过什么机制访问方法中的局部变量的呢？ 让我们继续反编译内部类的字节码：</p><h4 id="2-结果分析-1"><a href="#2-结果分析-1" class="headerlink" title="2. 结果分析"></a>2. 结果分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">D:\lillusory\Java\work_idea\java-learning\target\classes\jvm\localfiled&gt;javap -c</span><br><span class="line">lasspath . -v Outer$<span class="number">1</span>Inner</span><br><span class="line">警告: 二进制文件Outer$<span class="number">1</span>Inner包含jvm.localfiled.Outer$<span class="number">1</span>Inner</span><br><span class="line">Classfile /D:/lillusory/Java/work_idea/java-learning/target/classes/jvm/localfil</span><br><span class="line">ed/Outer$<span class="number">1</span>Inner.class</span><br><span class="line">  Last modified <span class="number">2019</span>-<span class="number">4</span>-<span class="number">29</span>; size <span class="number">716</span> bytes</span><br><span class="line">  MD5 checksum e63d82ebc8752469f0d30edde17e88a5</span><br><span class="line">  Compiled from <span class="string">"Outer.java"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">jvm</span>.<span class="title">localfiled</span>.<span class="title">Outer</span>$1<span class="title">Inner</span></span></span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Fieldref           #4.#29         // jvm/localfiled/Outer$1Inner.this$0:</span><br><span class="line">Ljvm/localfiled/Outer;</span><br><span class="line">   #2 = Fieldref           #4.#30         // jvm/localfiled/Outer$1Inner.val$loc</span><br><span class="line">alVar:Ljava/lang/String;</span><br><span class="line">   #3 = Methodref          #5.#31         // java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">   #4 = Class              #32            // jvm/localfiled/Outer$1Inner</span><br><span class="line">   #5 = Class              #33            // java/lang/Object</span><br><span class="line">   #6 = Utf8               val$localVar</span><br><span class="line">   #7 = Utf8               Ljava/lang/String;</span><br><span class="line">   #8 = Utf8               this$0</span><br><span class="line">   #9 = Utf8               Ljvm/localfiled/Outer;</span><br><span class="line">  #10 = Utf8               &lt;init&gt;</span><br><span class="line">  #11 = Utf8               (Ljvm/localfiled/Outer;Ljava/lang/String;)V</span><br><span class="line">  #12 = Utf8               Code</span><br><span class="line">  #13 = Utf8               LineNumberTable</span><br><span class="line">  #14 = Utf8               LocalVariableTable</span><br><span class="line">  #15 = Utf8               this</span><br><span class="line">  #16 = Utf8               Inner</span><br><span class="line">  #17 = Utf8               InnerClasses</span><br><span class="line">  #18 = Utf8               Ljvm/localfiled/Outer$1Inner;</span><br><span class="line">  #19 = Utf8               MethodParameters</span><br><span class="line">  #20 = Utf8               Signature</span><br><span class="line">  #21 = Utf8               ()V</span><br><span class="line">  #22 = Utf8               innerMethod</span><br><span class="line">  #23 = Utf8               a</span><br><span class="line">  #24 = Utf8               SourceFile</span><br><span class="line">  #25 = Utf8               Outer.java</span><br><span class="line">  #26 = Utf8               EnclosingMethod</span><br><span class="line">  #27 = Class              #34            // jvm/localfiled/Outer</span><br><span class="line">  #28 = NameAndType        #35:#21        // outerMethod:()V</span><br><span class="line">  #29 = NameAndType        #8:#9          // this$0:Ljvm/localfiled/Outer;</span><br><span class="line">  #30 = NameAndType        #6:#7          // val$localVar:Ljava/lang/String;</span><br><span class="line">  #31 = NameAndType        #10:#21        // "&lt;init&gt;":()V</span><br><span class="line">  #32 = Utf8               jvm/localfiled/Outer$1Inner</span><br><span class="line">  #33 = Utf8               java/lang/Object</span><br><span class="line">  #34 = Utf8               jvm/localfiled/Outer</span><br><span class="line">  #35 = Utf8               outerMethod</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">final</span> java.lang.String val$localVar;</span><br><span class="line">    descriptor: Ljava/lang/String;</span><br><span class="line">    flags: ACC_FINAL, ACC_SYNTHETIC</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> jvm.localfiled.Outer <span class="keyword">this</span>$<span class="number">0</span>;</span><br><span class="line">    descriptor: Ljvm/localfiled/Outer;</span><br><span class="line">    flags: ACC_FINAL, ACC_SYNTHETIC</span><br><span class="line"></span><br><span class="line">  jvm.localfiled.Outer$<span class="number">1</span>Inner();</span><br><span class="line">    descriptor: (Ljvm/localfiled/Outer;Ljava/lang/String;)V</span><br><span class="line">    flags:</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">3</span>, args_size=<span class="number">3</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: aload_1</span><br><span class="line">         2: putfield      #1                  // Field this$0:Ljvm/localfiled/Ou</span><br><span class="line">ter;</span><br><span class="line">         <span class="number">5</span>: aload_0</span><br><span class="line">         <span class="number">6</span>: aload_2</span><br><span class="line">         7: putfield      #2                  // Field val$localVar:Ljava/lang/S</span><br><span class="line">tring;</span><br><span class="line">        <span class="number">10</span>: aload_0</span><br><span class="line">        11: invokespecial #3                  // Method java/lang/Object."&lt;init&gt;</span><br><span class="line"><span class="string">":()V</span></span><br><span class="line"><span class="string">        14: return</span></span><br><span class="line"><span class="string">      LineNumberTable:</span></span><br><span class="line"><span class="string">        line 12: 0</span></span><br><span class="line"><span class="string">      LocalVariableTable:</span></span><br><span class="line"><span class="string">        Start  Length  Slot  Name   Signature</span></span><br><span class="line"><span class="string">            0      15     0  this   Ljvm/localfiled/Outer$1Inner;</span></span><br><span class="line"><span class="string">            0      15     1 this$0   Ljvm/localfiled/Outer;</span></span><br><span class="line"><span class="string">    MethodParameters:</span></span><br><span class="line"><span class="string">      Name                           Flags</span></span><br><span class="line"><span class="string">      this$0                         final mandated</span></span><br><span class="line"><span class="string">      val$localVar                   final synthetic</span></span><br><span class="line"><span class="string">    Signature: #21                          // ()V</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  void innerMethod();</span></span><br><span class="line"><span class="string">    descriptor: ()V</span></span><br><span class="line"><span class="string">    flags:</span></span><br><span class="line"><span class="string">    Code:</span></span><br><span class="line"><span class="string">      stack=1, locals=2, args_size=1</span></span><br><span class="line"><span class="string">         0: aload_0</span></span><br><span class="line"><span class="string">         1: getfield      #2                  // Field val$localVar:Ljava/lang/S</span></span><br><span class="line"><span class="string">tring;</span></span><br><span class="line"><span class="string">         4: astore_1</span></span><br><span class="line"><span class="string">         5: return</span></span><br><span class="line"><span class="string">      LineNumberTable:</span></span><br><span class="line"><span class="string">        line 14: 0</span></span><br><span class="line"><span class="string">        line 15: 5</span></span><br><span class="line"><span class="string">      LocalVariableTable:</span></span><br><span class="line"><span class="string">        Start  Length  Slot  Name   Signature</span></span><br><span class="line"><span class="string">            0       6     0  this   Ljvm/localfiled/Outer$1Inner;</span></span><br><span class="line"><span class="string">            5       1     1     a   Ljava/lang/String;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">SourceFile: "</span>Outer.java<span class="string">"</span></span><br><span class="line"><span class="string">EnclosingMethod: #27.#28                // jvm.localfiled.Outer.outerMethod</span></span><br><span class="line"><span class="string">InnerClasses:</span></span><br><span class="line"><span class="string">     #16= #4; //Inner=class jvm/localfiled/Outer$1Inner</span></span><br></pre></td></tr></table></figure><p>首先来看它的构造方法。 方法的签名为： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jvm.localfiled.Outer$<span class="number">1</span>Inner();</span><br><span class="line">    descriptor: (Ljvm/localfiled/Outer;Ljava/lang/String;)V</span><br><span class="line">    flags:</span><br><span class="line">    Code:</span><br></pre></td></tr></table></figure><p>我们知道， 如果不定义构造方法， 那么编译器会为这个类自动生成一个无参数的构造方法。 这个说法在这里就行不通了， 因为我们看到， 这个内部类的构造方法又两个参数。 至于第一个参数， 是指向外部类对象的引用， 在前面一篇博客中已经详细的介绍过了， 不明白的可以先看上一篇博客， 这里就不再重复叙述。这也说明了方法中的内部类和类中定义的内部类有相同的地方， 既然他们都是内部类， 就都持有指向外部类对象的引用。  我们来分析第二个参数， 他是 String 类型的， 和在内部类中访问的局部变量 localVar 的类型相同。 再看构造方法中编号为6和7的字节码指令：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span>: aload_2</span><br><span class="line">7: putfield      #2              // Field val$localVar:Ljava/lang/String;</span><br></pre></td></tr></table></figure><p>这句话的意思是， 使用构造方法的第二个参数， 为当前这个内部类对象的成员变量赋值， 这个被赋值的成员变量的名字是 val$localVar 。 由此可见， 编译器自动为内部类增加了一个成员变量， 其实这个成员变量就是被访问的外部类方法中的局部变量。 这个局部变量在创建内部类对象时， 通过构造方法注入。 在调用构造方法时， 编译器会默认为这个参数传入外部类方法中的局部变量的值。 </p><p>再看内部类中的方法 innerMethod 中是如何访问这个所谓的“局部变量的”。 看 innerMethod 中的前两条字节码： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">innerMethod</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags:</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">2</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         1: getfield      #2         // Field val$localVar:Ljava/lang/String;</span><br><span class="line">         <span class="number">4</span>: astore_1</span><br><span class="line">         <span class="number">5</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">14</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">15</span>: <span class="number">5</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">6</span>     <span class="number">0</span>  <span class="keyword">this</span>   Ljvm/localfiled/Outer$<span class="number">1</span>Inner;</span><br><span class="line">            <span class="number">5</span>       <span class="number">1</span>     <span class="number">1</span>     a   Ljava/lang/String;</span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>: aload_0</span><br><span class="line">1: getfield      #2         // Field val$localVar:Ljava/lang/String;</span><br></pre></td></tr></table></figure><p>这两条指令的意思是， 访问成员变量<code>val$localVar</code>的值。 而源代码中是访问外部类方法中局部变量的值。 所以， 在这里将编译时对外部类方法中的局部变量的访问， 转化成运行时对当前内部类对象中成员变量的访问。  </p><h4 id="3-小结"><a href="#3-小结" class="headerlink" title="3. 小结"></a>3. 小结</h4><p>总结一下就是： </p><p>当方法中定义的内部类访问的方法局部变量的值， 不是在编译时能确定的字面常量时， 编译器会为内部类增加一个成员变量， 在运行时， 将对外部类方法中局部变量的访问转换成对这个内部类成员变量的方法。 </p><p>这就要求内部类中的这个新增的成员变量和外部类方法中的局部变量具有相同的值。</p><p> 编译器通过为内部类的构造方法增加参数， 并在调用构造器初始化内部类对象时传入这个参数， 来初始化内部类中的这个成员变量的值。 </p><p><strong>所以， 虽然在源文件中看起来是访问的外部类方法的局部变量， 其实运行时访问的是内部类对象自己的成员变量</strong>。 </p><h2 id="3-为什么局部变量必须是final的"><a href="#3-为什么局部变量必须是final的" class="headerlink" title="3. 为什么局部变量必须是final的"></a>3. 为什么局部变量必须是final的</h2><p>上面我们讲解了， 方法中的内部类访问方法局部变量是怎么实现的。 那么为什么这个局部变量必须是 final 的呢？ 我认为有以下两个原因：</p><h3 id="1-原因一"><a href="#1-原因一" class="headerlink" title="1. 原因一"></a>1. 原因一</h3><p>当局部变量的值为编译时可确定的字面常量时（ 如字符串 “abc” 或整数1 ）， 通过 final 修饰， 可以实现类似 C 语言的编译时宏替换功能。</p><p> 这样的话， 外部类和内部类各自访问自己的常量池， 各自执行各自的字节码指令， 看起来就像共同访问外部类方法中的局部变量， 这样就可以达到<strong>语义上的一致性</strong>。 由于存在内部类和外部类中的常量值是一样的， 并且是不可改变的，这样就可以达到<strong>数值访问的一致性</strong>。</p><h3 id="2-原因二"><a href="#2-原因二" class="headerlink" title="2. 原因二"></a>2. 原因二</h3><p>当局部变量的值不是可在编译时确定的字面常量时（比如通过方法调用为它赋值）， 这种情况下， 编译器给内部类增加相同类型的成员变量， 并通过构造函数将外部类方法中的局部变量的值赋给这个新增的内部类成员量。</p><h3 id="3-基本数据类型"><a href="#3-基本数据类型" class="headerlink" title="3. 基本数据类型"></a>3. 基本数据类型</h3><p>如果这个局部变量是基本数据类型时， 直接拷贝数值给内部类成员变量。这样的话， 内部类和外部类各自访问自己的基本数据类型的变量， 他们的变量值一样， 并且不可修改， 这样就保证了语义上和数值访问上的一致性。</p><h3 id="4-引用类型"><a href="#4-引用类型" class="headerlink" title="4. 引用类型"></a>4. 引用类型</h3><p>如果这个局部变量是引用数据类型时， 拷贝外部类方法中的引用值给内部类对象的成员变量， 这样的话， 他们就指向了同一个对象。 由于这两个引用变量指向同一个对象， 所以通过引用访问的对象的数据是一样的， 由于他们都不能再指向其他对象（被 final 修饰）， 所以可以保证内部类和外部类数据访问的一致性。</p><h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h2><p><code>https://blog.csdn.net/zhangjg_blog/article/details/19996629</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要通过实例代码分析了 Java 中为什么方法内定义的内部类可以访问方法中的局部变量。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.lixueduan.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.lixueduan.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java中为什么内部类可以访问外部类的成员</title>
    <link href="https://www.lixueduan.com/posts/8d9c98e3.html"/>
    <id>https://www.lixueduan.com/posts/8d9c98e3.html</id>
    <published>2019-04-26T14:00:00.000Z</published>
    <updated>2019-04-30T08:59:12.977Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要通过实例源码与反编译详细分析了Java中为什么内部类可以访问外部类的成员。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p><strong>内部类就是定义在一个类内部的类</strong>。</p><p>定义在类内部的类有两种情况：</p><ul><li>一种是被static关键字修饰的， 叫做静态内部类.</li><li>另一种是不被static关键字修饰的， 就是普通内部类。</li></ul><p><strong>注</strong>：在下文中所提到的内部类都是指这种不被static关键字修饰的普通内部类</p><p>静态内部类虽然也定义在外部类的里面， 但是它只是在形式上（写法上）和外部类有关系， 其实在逻辑上和外部类并没有直接的关系。而一般的内部类，不仅在形式上和外部类有关系（写在外部类的里面）， 在逻辑上也和外部类有联系。 </p><p>这种逻辑上的关系可以总结为以下两点：</p><ul><li>1.内部类对象的创建依赖于外部类对象</li><li>2.内部类对象持有指向外部类对象的引用。</li></ul><p>上边的第二条可以解释为什么在内部类中可以访问外部类的成员。就是因为内部类对象持有外部类对象的引用。</p><h2 id="2-测试"><a href="#2-测试" class="headerlink" title="2. 测试"></a>2. 测试</h2><h3 id="2-1-测试类"><a href="#2-1-测试类" class="headerlink" title="2.1 测试类"></a>2.1 测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> outerField = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InnerMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = outerField;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然这两个类写在同一个文件中， 但是编译完成后， 还是生成各自的class文件： </p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/java/%E5%86%85%E9%83%A8%E7%B1%BB-%E5%A4%96%E9%83%A8%E7%B1%BB-class.png" alt="local"></p><h3 id="2-2-反编译"><a href="#2-2-反编译" class="headerlink" title="2.2 反编译"></a>2.2 反编译</h3><p>这里我们的目的是探究内部类的行为， 所以只反编译内部类的 class 文件 Outer$Inner.class 。 在命令行中， 切换到工程的bin目录， 输入以下命令反编译这个类文件：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javap -classpath . -v Outer$Inner</span><br></pre></td></tr></table></figure><blockquote><p><code>-classpath .</code>  :  说明在当前目录下寻找要反编译的class文件<br><code>-v</code>   : 加上这个参数输出的信息比较全面。包括常量池和方法内的局部变量表， 行号， 访问标志等等。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">D:\lillusory\Java\work_idea\java-learning\target\classes\jvm\innerclass&gt;javap -c</span><br><span class="line">lasspath . -v Outer$Inner</span><br><span class="line">警告: 二进制文件Outer$Inner包含jvm.innerclass.Outer$Inner</span><br><span class="line">Classfile /D:/lillusory/Java/work_idea/java-learning/target/classes/jvm/innercla</span><br><span class="line">ss/Outer$Inner.class</span><br><span class="line">  Last modified <span class="number">2019</span>-<span class="number">4</span>-<span class="number">29</span>; size <span class="number">596</span> bytes</span><br><span class="line">  MD5 checksum <span class="number">1</span>c7365a21e81dd01b3c6b115c1a72484</span><br><span class="line">  Compiled from <span class="string">"Outer.java"</span></span><br><span class="line">  &lt;!--类信息--&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">jvm</span>.<span class="title">innerclass</span>.<span class="title">Outer</span>$<span class="title">Inner</span></span></span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: ACC_SUPER</span><br><span class="line">  &lt;!--常量池--&gt;</span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Fieldref           #4.#24         // jvm/innerclass/Outer$Inner.this$0:L</span><br><span class="line">jvm/innerclass/Outer;</span><br><span class="line">   #2 = Methodref          #5.#25         // java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">   #3 = Fieldref           #26.#27        // jvm/innerclass/Outer.outerField:I</span><br><span class="line">   #4 = Class              #28            // jvm/innerclass/Outer$Inner</span><br><span class="line">   #5 = Class              #29            // java/lang/Object</span><br><span class="line">   #6 = Utf8               this$0</span><br><span class="line">   #7 = Utf8               Ljvm/innerclass/Outer;</span><br><span class="line">   #8 = Utf8               &lt;init&gt;</span><br><span class="line">   #9 = Utf8               (Ljvm/innerclass/Outer;)V</span><br><span class="line">  #10 = Utf8               Code</span><br><span class="line">  #11 = Utf8               LineNumberTable</span><br><span class="line">  #12 = Utf8               LocalVariableTable</span><br><span class="line">  #13 = Utf8               this</span><br><span class="line">  #14 = Utf8               Inner</span><br><span class="line">  #15 = Utf8               InnerClasses</span><br><span class="line">  #16 = Utf8               Ljvm/innerclass/Outer$Inner;</span><br><span class="line">  #17 = Utf8               MethodParameters</span><br><span class="line">  #18 = Utf8               InnerMethod</span><br><span class="line">  #19 = Utf8               ()V</span><br><span class="line">  #20 = Utf8               i</span><br><span class="line">  #21 = Utf8               I</span><br><span class="line">  #22 = Utf8               SourceFile</span><br><span class="line">  #23 = Utf8               Outer.java</span><br><span class="line">  #24 = NameAndType        #6:#7          // this$0:Ljvm/innerclass/Outer;</span><br><span class="line">  #25 = NameAndType        #8:#19         // "&lt;init&gt;":()V</span><br><span class="line">  #26 = Class              #30            // jvm/innerclass/Outer</span><br><span class="line">  #27 = NameAndType        #31:#21        // outerField:I</span><br><span class="line">  #28 = Utf8               jvm/innerclass/Outer$Inner</span><br><span class="line">  #29 = Utf8               java/lang/Object</span><br><span class="line">  #30 = Utf8               jvm/innerclass/Outer</span><br><span class="line">  #31 = Utf8               outerField</span><br><span class="line">  &lt;!--从这里开始看--&gt;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">final</span> jvm.innerclass.Outer <span class="keyword">this</span>$<span class="number">0</span>;</span><br><span class="line">    descriptor: Ljvm/innerclass/Outer;</span><br><span class="line">    flags: ACC_FINAL, ACC_SYNTHETIC</span><br><span class="line"></span><br><span class="line">  jvm.innerclass.Outer$Inner(jvm.innerclass.Outer);</span><br><span class="line">    descriptor: (Ljvm/innerclass/Outer;)V</span><br><span class="line">    flags:</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">2</span>, args_size=<span class="number">2</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: aload_1</span><br><span class="line">         2: putfield      #1                  // Field this$0:Ljvm/innerclass/Ou</span><br><span class="line">ter;</span><br><span class="line">         <span class="number">5</span>: aload_0</span><br><span class="line">         6: invokespecial #2                  // Method java/lang/Object."&lt;init&gt;</span><br><span class="line"><span class="string">":()V</span></span><br><span class="line"><span class="string">         9: return</span></span><br><span class="line"><span class="string">      LineNumberTable:</span></span><br><span class="line"><span class="string">        line 9: 0</span></span><br><span class="line"><span class="string">      LocalVariableTable:</span></span><br><span class="line"><span class="string">        Start  Length  Slot  Name   Signature</span></span><br><span class="line"><span class="string">            0      10     0  this   Ljvm/innerclass/Outer$Inner;</span></span><br><span class="line"><span class="string">            0      10     1 this$0   Ljvm/innerclass/Outer;</span></span><br><span class="line"><span class="string">    MethodParameters:</span></span><br><span class="line"><span class="string">      Name                           Flags</span></span><br><span class="line"><span class="string">      this$0                         final mandated</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  void InnerMethod();</span></span><br><span class="line"><span class="string">    descriptor: ()V</span></span><br><span class="line"><span class="string">    flags:</span></span><br><span class="line"><span class="string">    Code:</span></span><br><span class="line"><span class="string">      stack=1, locals=2, args_size=1</span></span><br><span class="line"><span class="string">         0: aload_0</span></span><br><span class="line"><span class="string">         1: getfield      #1                  // Field this$0:Ljvm/innerclass/Ou</span></span><br><span class="line"><span class="string">ter;</span></span><br><span class="line"><span class="string">         4: getfield      #3                  // Field jvm/innerclass/Outer.oute</span></span><br><span class="line"><span class="string">rField:I</span></span><br><span class="line"><span class="string">         7: istore_1</span></span><br><span class="line"><span class="string">         8: return</span></span><br><span class="line"><span class="string">      LineNumberTable:</span></span><br><span class="line"><span class="string">        line 11: 0</span></span><br><span class="line"><span class="string">        line 12: 8</span></span><br><span class="line"><span class="string">      LocalVariableTable:</span></span><br><span class="line"><span class="string">        Start  Length  Slot  Name   Signature</span></span><br><span class="line"><span class="string">            0       9     0  this   Ljvm/innerclass/Outer$Inner;</span></span><br><span class="line"><span class="string">            8       1     1     i   I</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">SourceFile: "</span>Outer.java<span class="string">"</span></span><br><span class="line"><span class="string">InnerClasses:</span></span><br><span class="line"><span class="string">     #14= #4 of #26; //Inner=class jvm/innerclass/Outer$Inner of class jvm/inner</span></span><br><span class="line"><span class="string">class/Outer</span></span><br></pre></td></tr></table></figure><h3 id="2-3-解析"><a href="#2-3-解析" class="headerlink" title="2.3 解析"></a>2.3 解析</h3><p>暂时不看常量池等其他信息，从50行开始，可以看到第一行信息如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> jvm.innerclass.Outer <span class="keyword">this</span>$<span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>这句话的意思是， 在内部类<code>Outer$Inner</code>中， 存在一个名字为<code>this$0</code> ， 类型为<code>jvm.innerclass.Outer</code>的成员变量， 并且这个变量是<code>final</code>的。 其实这个就是所谓的“在内部类对象中存在的指向外部类对象的引用”。</p><p>但是我们在定义这个内部类的时候， 并没有声明它， 所以这个成员变量是编译器加上的。</p><p>虽然编译器在创建内部类时为它加上了一个指向外部类的引用， 但是这个引用是怎样赋值的呢？毕竟必须先给他赋值，它才能指向外部类对象。</p><p>下面我们把注意力转移到构造函数上,下面这段输出是关于构造函数的信息:</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">jvm.innerclass.Outer$Inner(jvm.innerclass.Outer);</span><br><span class="line">  descriptor: (Ljvm/innerclass/Outer;)V</span><br><span class="line">  flags:</span><br><span class="line">  Code:</span><br><span class="line">    stack=<span class="number">2</span>, locals=<span class="number">2</span>, args_size=<span class="number">2</span></span><br><span class="line">       <span class="number">0</span>: aload_0</span><br><span class="line">       <span class="number">1</span>: aload_1</span><br><span class="line">       2: putfield      #1           // Field this$0:Ljvm/innerclass/Outer;</span><br><span class="line">       <span class="number">5</span>: aload_0</span><br><span class="line">       6: invokespecial #2           // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">       <span class="number">9</span>: <span class="keyword">return</span></span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line <span class="number">9</span>: <span class="number">0</span></span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          <span class="number">0</span>      <span class="number">10</span>     <span class="number">0</span>  <span class="keyword">this</span>   Ljvm/innerclass/Outer$Inner;</span><br><span class="line">          <span class="number">0</span>      <span class="number">10</span>     <span class="number">1</span> <span class="keyword">this</span>$<span class="number">0</span>   Ljvm/innerclass/Outer;</span><br></pre></td></tr></table></figure><p>我们知道， <strong>如果在一个类中， 不声明构造方法的话， 编译器会默认添加一个无参数的构造方法</strong>。 但是这句话在这里就行不通了， 因为我们明明看到， 这个构造函数有一个构造方法， 并且类型为Outer。 所以说，<strong>编译器会为内部类的构造方法添加一个参数， 参数的类型就是外部类的类型</strong>。</p><p>下面我们看看在构造参数中如何使用这个默认添加的参数。 我们来分析一下构造方法的字节码。 下面是每行字节码的意义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aload_0 ：</span><br></pre></td></tr></table></figure><p>将局部变量表中的第一个引用变量加载到操作数栈。 这里有几点需要说明。 </p><ul><li>1.局部变量表中的变量在方法执行前就已经初始化完成；</li><li>2.局部变量表中的变量包括方法的参数；</li><li>3.操作数栈就是执行当前代码的栈；</li><li>4.成员方法的局部变量表中的第一个变量永远是this；</li></ul><p><strong>所以这句话的意思是： 将this引用从局部变量表加载到操作数栈</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aload_1：</span><br></pre></td></tr></table></figure><p>将局部变量表中的第二个引用变量加载到操作数栈。</p><p> 这里加载的变量就是构造方法中的Outer类型的参数 .</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">putfield      #1           // Field this$0:Ljvm/innerclass/Outer;</span><br></pre></td></tr></table></figure><p>使用操作数栈顶端的引用变量为指定的成员变量赋值。 这里的意思是将外面传入的<code>Outer</code>类型的参数赋给成员变量<code>this$0</code> 。 </p><p>这一句<code>putfield</code>字节码就揭示了， 指向外部类对象的这个引用变量是如何赋值的。</p><p>后面几句如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>: aload_0</span><br><span class="line">6: invokespecial #2           // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line"><span class="number">9</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>大致就是<strong>使用this引用调用父类（Object）的构造方法然后返回</strong>。 </p><p><strong>这也印证了上面所说的内部类和外部类逻辑关系的第一条： 内部类对象的创建依赖于外部类对象</strong>。 </p><p>在内部类的 InnerMethod 方法中， 访问了外部类的成员变量 outerField， 下面的字节码揭示了访问是如何进行的： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InnerMethod</span><span class="params">()</span></span>;</span><br><span class="line">  descriptor: ()V</span><br><span class="line">  flags:</span><br><span class="line">  Code:</span><br><span class="line">    stack=<span class="number">1</span>, locals=<span class="number">2</span>, args_size=<span class="number">1</span></span><br><span class="line">       <span class="number">0</span>: aload_0</span><br><span class="line">       1: getfield      #1         // Field this$0:Ljvm/innerclass/Outer;</span><br><span class="line">       4: getfield      #3         // Field jvm/innerclass/Outer.outerField:I</span><br><span class="line">       <span class="number">7</span>: istore_1</span><br><span class="line">       <span class="number">8</span>: <span class="keyword">return</span></span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line <span class="number">11</span>: <span class="number">0</span></span><br><span class="line">      line <span class="number">12</span>: <span class="number">8</span></span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          <span class="number">0</span>       <span class="number">9</span>     <span class="number">0</span>  <span class="keyword">this</span>   Ljvm/innerclass/Outer$Inner;</span><br><span class="line">          <span class="number">8</span>       <span class="number">1</span>     <span class="number">1</span>     i   I</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getfield      #1         // Field this$0:Ljvm/innerclass/Outer;</span><br></pre></td></tr></table></figure><p>将成员变量<code>this$0</code>加载到操作数栈上来 </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getfield      #3         // Field jvm/innerclass/Outer.outerField:I</span><br></pre></td></tr></table></figure><p>使用上面加载的this$0引用， 将外部类的成员变量outerField加载到操作数栈 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">istore_1</span><br></pre></td></tr></table></figure><p>将操作数栈顶端的int类型的值保存到局部变量表中的第二个变量上（注意， 第一个局部变量被 this 占用， 第二个局部变量是 i）。操作数栈顶端的 int 型变量就是上一步加载的 outerField 变量。 </p><p><strong>所以， 这句字节码的含义就是： 使用<code>outerField</code>为i赋值</strong>。 </p><p>上面三步就是内部类中是如何通过指向外部类对象的引用， 来访问外部类成员的。 </p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>本文通过反编译内部类的字节码， 说明了内部类是如何访问外部类对象的成员的，除此之外， 我们也对编译器的行为有了一些了解， 编译器在编译时会自动加上一些逻辑， 这正是我们感觉困惑的原因。  </p><p>关于内部类如何访问外部类的成员， 分析之后其实也很简单， 主要是通过以下几步做到的：</p><ul><li>1.编译器自动为内部类添加一个成员变量， 这个成员变量的类型和外部类的类型相同， 这个成员变量就是指向外部类对象的引用；</li><li>2.编译器自动为内部类的构造方法添加一个参数， 参数的类型是外部类的类型， 在构造方法内部使用这个参数为1中添加的成员变量赋值；</li><li>3.在调用内部类的构造函数初始化内部类对象时， 会默认传入外部类的引用。</li></ul><h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h2><p><code>https://blog.csdn.net/weixin_39214481/article/details/80372676</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要通过实例源码与反编译详细分析了Java中为什么内部类可以访问外部类的成员。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.lixueduan.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.lixueduan.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Redis入门教程(七)---通过 Docker 安装 Redis</title>
    <link href="https://www.lixueduan.com/posts/96375af.html"/>
    <id>https://www.lixueduan.com/posts/96375af.html</id>
    <published>2019-04-18T14:00:00.000Z</published>
    <updated>2019-05-25T12:10:07.185Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录了如何通过 Docker 来快速的安装部署 Redis。相比直接安装，通过 Docker 来安装极为方便。</p><a id="more"></a><blockquote><p><strong><a href="https://www.lixueduan.com/categories/Redis/">Redis系列教程目录</a></strong></p><p><a href="https://www.lixueduan.com/posts/876962d5.html">Redis入门教程(一)—安装与配置</a></p><p><a href="https://www.lixueduan.com/posts/8380a4fa.html">Redis入门教程(二)—五大基础数据类型与常用命令</a></p><p><a href="https://www.lixueduan.com/posts/5df38113.html">Redis入门教程(三)—安全性、事务、发布订阅</a></p><p><a href="https://www.lixueduan.com/posts/84dd6d72.html">Redis入门教程(四)—主从复制与持久化</a></p><p><a href="https://www.lixueduan.com/posts/397ed67.html">Redis入门教程(五)—搭建Redis集群</a></p><p><a href="https://www.lixueduan.com/posts/e456b1e5.html">Redis入门教程(六)—通过JavaApi(Jedis)操作Redis</a></p><p><a href="https://www.lixueduan.com/posts/96375af.html">Redis入门教程(七)—通过 Docker 安装 Redis</a></p><p>…….</p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>最开始是通过 Redis 官网下载的文件安装的，这里使用 Docker 在安装部署一次。</p><p>主要分为3个步骤：</p><ul><li>1.拉取 Redis 镜像</li><li>2.准备配置文件</li><li>3.启动容器</li></ul><p>当然 需要提前安装 Docker。</p><h2 id="2-拉取-Redis-镜像"><a href="#2-拉取-Redis-镜像" class="headerlink" title="2. 拉取 Redis 镜像"></a>2. 拉取 Redis 镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure><p>一句话就可以从 Docker 镜像仓库中拉取 Redis 最新镜像到本地。</p><h2 id="3-准备配置文件"><a href="#3-准备配置文件" class="headerlink" title="3. 准备配置文件"></a>3. 准备配置文件</h2><p>一般启动时都手动配置，使用外部配置文件<code>redis.conf</code>，Redis 配置文件样例如下：</p><p>这里需要注意的是：</p><ul><li>1.<code>bind 127.0.0.1</code>这个一定要注释掉，不让无法通过外部连接</li><li>2.<code>daemonize yes</code>这个后台运行也要注释掉，否则后面会无法启动容器。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Redis配置文件样例</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Note on units: when memory size is needed, it is possible to specifiy</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> it <span class="keyword">in</span> the usual form of 1k 5GB 4M and so forth:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1k =&gt; 1000 bytes</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1kb =&gt; 1024 bytes</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1m =&gt; 1000000 bytes</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1mb =&gt; 1024*1024 bytes</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1g =&gt; 1000000000 bytes</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1gb =&gt; 1024*1024*1024 bytes</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> units are <span class="keyword">case</span> insensitive so 1GB 1Gb 1gB are all the same.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启用守护进程后，Redis会把pid写到一个pidfile中，在/var/run/redis.pid</span></span><br><span class="line">daemonize no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定</span></span><br><span class="line">pidfile /var/run/redis.pid</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定Redis监听端口，默认端口为6379</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果指定0端口，表示Redis不监听TCP连接</span></span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 绑定的主机地址</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 你可以绑定单一接口，如果没有绑定，所有接口都会监听到来的连接</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">bind</span> 127.0.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Specify the path <span class="keyword">for</span> the unix socket that will be used to listen <span class="keyword">for</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> incoming connections. There is no default, so Redis will not listen</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> on a unix socket when not specified.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> unixsocket /tmp/redis.sock</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> unixsocketperm 755</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能</span></span><br><span class="line">timeout 0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> debug (很多信息, 对开发／测试比较有用)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> verbose (many rarely useful info, but not a mess like the debug level)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> notice (moderately verbose, what you want <span class="keyword">in</span> production probably)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> warning (only very important / critical messages are logged)</span></span><br><span class="line">loglevel verbose</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 日志记录方式，默认为标准输出，如果配置为redis为守护进程方式运行，而这里又配置为标准输出，则日志将会发送给/dev/null</span></span><br><span class="line">logfile stdout</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> To <span class="built_in">enable</span> logging to the system logger, just <span class="built_in">set</span> <span class="string">'syslog-enabled'</span> to yes,</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> and optionally update the other syslog parameters to suit your needs.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> syslog-enabled no</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Specify the syslog identity.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> syslog-ident redis</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Specify the syslog facility.  Must be USER or between LOCAL0-LOCAL7.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> syslog-facility local0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置数据库的数量，默认数据库为0，可以使用select &lt;dbid&gt;命令在连接上指定数据库id</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> dbid是从0到‘databases’-1的数目</span></span><br><span class="line">databases 16</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############################### SNAPSHOTTING  #################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Save the DB on disk:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">   save &lt;seconds&gt; &lt;changes&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">   Will save the DB <span class="keyword">if</span> both the given number of seconds and the given</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   number of write operations against the DB occurred.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">   满足以下条件将会同步数据:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   900秒（15分钟）内有1个更改</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   300秒（5分钟）内有10个更改</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   60秒内有10000个更改</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   Note: 可以把所有“save”行注释掉，这样就取消同步操作了</span></span><br><span class="line"></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大</span></span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定本地数据库文件名，默认值为dump.rdb</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 工作目录.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定本地数据库存放目录，文件名由上一个dbfilename配置项指定</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Also the Append Only File will be created inside this directory.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意，这里只能指定一个目录，不能指定文件名</span></span><br><span class="line">dir ./</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################################ REPLICATION #################################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 主从复制。使用slaveof从 Redis服务器复制一个Redis实例。注意，该配置仅限于当前slave有效</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> so <span class="keyword">for</span> example it is possible to configure the slave to save the DB with a</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> different interval, or to listen to another port, and so on.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置当本机为slav服务时，设置master服务的ip地址及端口，在Redis启动时，它会自动从master进行数据同步</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> slaveof &lt;masterip&gt; &lt;masterport&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当master服务设置了密码保护时，slav服务连接master的密码</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下文的“requirepass”配置项可以指定密码</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> masterauth &lt;master-password&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> When a slave lost the connection with the master, or when the replication</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> is still <span class="keyword">in</span> progress, the slave can act <span class="keyword">in</span> two different ways:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1) <span class="keyword">if</span> slave-serve-stale-data is <span class="built_in">set</span> to <span class="string">'yes'</span> (the default) the slave will</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    still reply to client requests, possibly with out of data data, or the</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    data <span class="built_in">set</span> may just be empty <span class="keyword">if</span> this is the first synchronization.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2) <span class="keyword">if</span> slave-serve-stale data is <span class="built_in">set</span> to <span class="string">'no'</span> the slave will reply with</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    an error <span class="string">"SYNC with master in progress"</span> to all the kind of commands</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    but to INFO and SLAVEOF.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Slaves send PINGs to server <span class="keyword">in</span> a predefined interval. It<span class="string">'s possible to change</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> this interval with the repl_ping_slave_period option. The default value is 10</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> seconds.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> repl-ping-slave-period 10</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> The following option sets a timeout <span class="keyword">for</span> both Bulk transfer I/O timeout and</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> master data or ping response timeout. The default value is 60 seconds.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> It is important to make sure that this value is greater than the value</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> specified <span class="keyword">for</span> repl-ping-slave-period otherwise a timeout will be detected</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> every time there is low traffic between the master and the slave.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> repl-timeout 60</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################################# SECURITY ###################################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Warning: since Redis is pretty fast an outside user can try up to</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 150k passwords per second against a good box. This means that you should</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> use a very strong password otherwise it will be very easy to <span class="built_in">break</span>.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过auth &lt;password&gt;命令提供密码，默认关闭</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> requirepass foobared</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Command renaming.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> It is possilbe to change the name of dangerous commands <span class="keyword">in</span> a shared</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> environment. For instance the CONFIG <span class="built_in">command</span> may be renamed into something</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> of hard to guess so that it will be still available <span class="keyword">for</span> internal-use</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tools but not available <span class="keyword">for</span> general clients.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Example:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> It is also possilbe to completely <span class="built_in">kill</span> a <span class="built_in">command</span> renaming it into</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> an empty string:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rename-command CONFIG <span class="string">""</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################################## LIMITS ####################################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果设置maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max Number of clients reached错误信息</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> maxclients 128</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Don<span class="string">'t use more memory than the specified amount of bytes.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> When the memory <span class="built_in">limit</span> is reached Redis will try to remove keys with an</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> EXPIRE <span class="built_in">set</span>. It will try to start freeing keys that are going to expire</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">in</span> little time and preserve keys with a longer time to live.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Redis will also try to remove objects from free lists <span class="keyword">if</span> possible.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> If all this fails, Redis will start to reply with errors to commands</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> that will use more memory, like SET, LPUSH, and so on, and will <span class="built_in">continue</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> to reply to most <span class="built_in">read</span>-only commands like GET.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> WARNING: maxmemory can be a good idea mainly <span class="keyword">if</span> you want to use Redis as a</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">'state'</span> server or cache, not as a real DB. When Redis is used as a real</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> database the memory usage will grow over the weeks, it will be obvious <span class="keyword">if</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> it is going to use too much memory <span class="keyword">in</span> the long run, and you<span class="string">'ll have the time</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> to upgrade. With maxmemory after the <span class="built_in">limit</span> is reached you<span class="string">'ll start to get</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> errors <span class="keyword">for</span> write operations, and this may even lead to DB inconsistency.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当此方法处理后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Redis新的vm机制，会把Key存放内存，Value会存放在swap区</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> maxmemory &lt;bytes&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> MAXMEMORY POLICY: how Redis will select what to remove when maxmemory</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> is reached? You can select among five behavior:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> volatile-lru -&gt; remove the key with an expire <span class="built_in">set</span> using an LRU algorithm</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> allkeys-lru -&gt; remove any key accordingly to the LRU algorithm</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> volatile-random -&gt; remove a random key with an expire <span class="built_in">set</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> allkeys-&gt;random -&gt; remove a random key, any key</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> volatile-ttl -&gt; remove the key with the nearest expire time (minor TTL)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> noeviction -&gt; don<span class="string">'t expire at all, just return an error on write operations</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Note: with all the kind of policies, Redis will <span class="built_in">return</span> an error on write</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       operations, when there are not suitable keys <span class="keyword">for</span> eviction.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">       At the date of writing this commands are: <span class="built_in">set</span> setnx setex append</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       getset mset msetnx <span class="built_in">exec</span> sort</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> The default is:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> maxmemory-policy volatile-lru</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> LRU and minimal TTL algorithms are not precise algorithms but approximated</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> algorithms (<span class="keyword">in</span> order to save memory), so you can select as well the sample</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> size to check. For instance <span class="keyword">for</span> default Redis will check three keys and</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> pick the one that was used less recently, you can change the sample size</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> using the following configuration directive.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> maxmemory-samples 3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############################# APPEND ONLY MODE ###############################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Note that you can have both the async dumps and the append only file <span class="keyword">if</span> you</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> like (you have to comment the <span class="string">"save"</span> statements above to <span class="built_in">disable</span> the dumps).</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Still <span class="keyword">if</span> append only mode is enabled Redis will load the data from the</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">log</span> file at startup ignoring the dump.rdb file.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 因为redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> IMPORTANT: Check the BGREWRITEAOF to check how to rewrite the append</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">log</span> file <span class="keyword">in</span> background when it gets too big.</span></span><br><span class="line"></span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定更新日志文件名，默认为appendonly.aof</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> appendfilename appendonly.aof</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> The fsync() call tells the Operating System to actually write data on disk</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> instead to <span class="built_in">wait</span> <span class="keyword">for</span> more data <span class="keyword">in</span> the output buffer. Some OS will really flush </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> data on disk, some other OS will just try to <span class="keyword">do</span> it ASAP.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定更新日志条件，共有3个可选值：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> no:表示等操作系统进行数据缓存同步到磁盘（快）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> always:表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> everysec:表示每秒同步一次（折衷，默认值）</span></span><br><span class="line"></span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="meta">#</span><span class="bash"> appendfsync no</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> When the AOF fsync policy is <span class="built_in">set</span> to always or everysec, and a background</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> saving process (a background save or AOF <span class="built_in">log</span> background rewriting) is</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> performing a lot of I/O against the disk, <span class="keyword">in</span> some Linux configurations</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Redis may block too long on the fsync() call. Note that there is no fix <span class="keyword">for</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> this currently, as even performing fsync <span class="keyword">in</span> a different thread will block</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> our synchronous write(2) call.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> In order to mitigate this problem it<span class="string">'s possible to use the following option</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> that will prevent fsync() from being called <span class="keyword">in</span> the main process <span class="keyword">while</span> a</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> BGSAVE or BGREWRITEAOF is <span class="keyword">in</span> progress.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> This means that <span class="keyword">while</span> another child is saving the durability of Redis is</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> the same as <span class="string">"appendfsync none"</span>, that <span class="keyword">in</span> pratical terms means that it is</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> possible to lost up to 30 seconds of <span class="built_in">log</span> <span class="keyword">in</span> the worst scenario (with the</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> default Linux settings).</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> If you have latency problems turn this to <span class="string">"yes"</span>. Otherwise leave it as</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">"no"</span> that is the safest pick from the point of view of durability.</span></span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Automatic rewrite of the append only file.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Redis is able to automatically rewrite the <span class="built_in">log</span> file implicitly calling</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> BGREWRITEAOF when the AOF <span class="built_in">log</span> size will growth by the specified percentage.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> This is how it works: Redis remembers the size of the AOF file after the</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> latest rewrite (or <span class="keyword">if</span> no rewrite happened since the restart, the size of</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> the AOF at startup is used).</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> This base size is compared to the current size. If the current size is</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> bigger than the specified percentage, the rewrite is triggered. Also</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> you need to specify a minimal size <span class="keyword">for</span> the AOF file to be rewritten, this</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> is useful to avoid rewriting the AOF file even <span class="keyword">if</span> the percentage increase</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> is reached but it is still pretty small.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Specify a precentage of zero <span class="keyword">in</span> order to <span class="built_in">disable</span> the automatic AOF</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rewrite feature.</span></span><br><span class="line"></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################################# SLOW LOG ###################################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> The Redis Slow Log is a system to <span class="built_in">log</span> queries that exceeded a specified</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> execution time. The execution time does not include the I/O operations</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> like talking with the client, sending the reply and so forth,</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> but just the time needed to actually execute the <span class="built_in">command</span> (this is the only</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> stage of <span class="built_in">command</span> execution <span class="built_in">where</span> the thread is blocked and can not serve</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> other requests <span class="keyword">in</span> the meantime).</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> You can configure the slow <span class="built_in">log</span> with two parameters: one tells Redis</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> what is the execution time, <span class="keyword">in</span> microseconds, to exceed <span class="keyword">in</span> order <span class="keyword">for</span> the</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">command</span> to get logged, and the other parameter is the length of the</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> slow <span class="built_in">log</span>. When a new <span class="built_in">command</span> is logged the oldest one is removed from the</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> queue of logged commands.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> The following time is expressed <span class="keyword">in</span> microseconds, so 1000000 is equivalent</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> to one second. Note that a negative number disables the slow <span class="built_in">log</span>, <span class="keyword">while</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> a value of zero forces the logging of every <span class="built_in">command</span>.</span></span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> There is no <span class="built_in">limit</span> to this length. Just be aware that it will consume memory.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> You can reclaim memory used by the slow <span class="built_in">log</span> with SLOWLOG RESET.</span></span><br><span class="line">slowlog-max-len 1024</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############################### VIRTUAL MEMORY ###############################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## WARNING! Virtual Memory is deprecated in Redis 2.4</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## The use of Virtual Memory is strongly discouraged.</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## WARNING! Virtual Memory is deprecated in Redis 2.4</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## The use of Virtual Memory is strongly discouraged.</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Virtual Memory allows Redis to work with datasets bigger than the actual</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> amount of RAM needed to hold the whole dataset <span class="keyword">in</span> memory.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> In order to <span class="keyword">do</span> so very used keys are taken <span class="keyword">in</span> memory <span class="keyword">while</span> the other keys</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> are swapped into a swap file, similarly to what operating systems <span class="keyword">do</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> with memory pages.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定是否启用虚拟内存机制，默认值为no，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 把vm-enabled设置为yes，根据需要设置好接下来的三个VM参数，就可以启动VM了</span></span><br><span class="line">vm-enabled no</span><br><span class="line"><span class="meta">#</span><span class="bash"> vm-enabled yes</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> This is the path of the Redis swap file. As you can guess, swap files</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> can<span class="string">'t be shared by different Redis instances, so make sure to use a swap</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> file <span class="keyword">for</span> every redis process you are running. Redis will complain <span class="keyword">if</span> the</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> swap file is already <span class="keyword">in</span> use.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Redis交换文件最好的存储是SSD（固态硬盘）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> *** WARNING *** <span class="keyword">if</span> you are using a shared hosting the default of putting</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> the swap file under /tmp is not secure. Create a dir with access granted</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> only to Redis user and configure Redis to create the swap file there.</span></span><br><span class="line">vm-swap-file /tmp/redis.swap</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> With vm-max-memory 0 the system will swap everything it can. Not a good</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> default, just specify the max amount of RAM you can <span class="keyword">in</span> bytes, but it<span class="string">'s</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> better to leave some margin. For instance specify an amount of RAM</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> that<span class="string">'s more or less between 60 and 80% of your free RAM.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将所有大于vm-max-memory的数据存入虚拟内存，无论vm-max-memory设置多少，所有索引数据都是内存存储的（Redis的索引数据就是keys）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 也就是说当vm-max-memory设置为0的时候，其实是所有value都存在于磁盘。默认值为0</span></span><br><span class="line">vm-max-memory 0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的数据大小来设定的。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 建议如果存储很多小对象，page大小最后设置为32或64bytes；如果存储很大的对象，则可以使用更大的page，如果不确定，就使用默认值</span></span><br><span class="line">vm-page-size 32</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置swap文件中的page数量由于页表（一种表示页面空闲或使用的bitmap）是存放在内存中的，在磁盘上每8个pages将消耗1byte的内存</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> swap空间总容量为 vm-page-size * vm-pages</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> With the default of 32-bytes memory pages and 134217728 pages Redis will</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> use a 4 GB swap file, that will use 16 MB of RAM <span class="keyword">for</span> the page table.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> It<span class="string">'s better to use the smallest acceptable value for your application,</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> but the default is large <span class="keyword">in</span> order to work <span class="keyword">in</span> most conditions.</span></span><br><span class="line">vm-pages 134217728</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Max number of VM I/O threads running at the same time.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> This threads are used to <span class="built_in">read</span>/write data from/to swap file, since they</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> also encode and decode objects from disk to memory or the reverse, a bigger</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> number of threads can <span class="built_in">help</span> with big objects even <span class="keyword">if</span> they can<span class="string">'t help with</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> I/O itself as the physical device may not be able to couple with many</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> reads/writes operations at the same time.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置访问swap文件的I/O线程数，最后不要超过机器的核数，如果设置为0，那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟，默认值为4</span></span><br><span class="line">vm-max-threads 4</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############################## ADVANCED CONFIG ###############################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Hashes are encoded <span class="keyword">in</span> a special way (much more memory efficient) when they</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> have at max a given numer of elements, and the biggest element does not</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> exceed a given threshold. You can configure this limits with the following</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> configuration directives.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</span></span><br><span class="line">hash-max-zipmap-entries 512</span><br><span class="line">hash-max-zipmap-value 64</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Similarly to hashes, small lists are also encoded <span class="keyword">in</span> a special way <span class="keyword">in</span> order</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> to save a lot of space. The special representation is only used when</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> you are under the following limits:</span></span><br><span class="line">list-max-ziplist-entries 512</span><br><span class="line">list-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Sets have a special encoding <span class="keyword">in</span> just one <span class="keyword">case</span>: when a <span class="built_in">set</span> is composed</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> of just strings that happens to be integers <span class="keyword">in</span> radix 10 <span class="keyword">in</span> the range</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> of 64 bit signed integers.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> The following configuration setting sets the <span class="built_in">limit</span> <span class="keyword">in</span> the size of the</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">set</span> <span class="keyword">in</span> order to use this special memory saving encoding.</span></span><br><span class="line">set-max-intset-entries 512</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Similarly to hashes and lists, sorted sets are also specially encoded <span class="keyword">in</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> order to save a lot of space. This encoding is only used when the length and</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> elements of a sorted <span class="built_in">set</span> are below the following limits:</span></span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Active rehashing uses 1 millisecond every 100 milliseconds of CPU time <span class="keyword">in</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> order to <span class="built_in">help</span> rehashing the main Redis <span class="built_in">hash</span> table (the one mapping top-level</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> keys to values). The <span class="built_in">hash</span> table implementation redis uses (see dict.c)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> performs a lazy rehashing: the more operation you run into an <span class="built_in">hash</span> table</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> that is rhashing, the more rehashing <span class="string">"steps"</span> are performed, so <span class="keyword">if</span> the</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> server is idle the rehashing is never complete and some more memory is used</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> by the <span class="built_in">hash</span> table.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> The default is to use this millisecond 10 <span class="built_in">times</span> every second <span class="keyword">in</span> order to</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> active rehashing the main dictionaries, freeing memory when possible.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> If unsure:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> use <span class="string">"activerehashing no"</span> <span class="keyword">if</span> you have hard latency requirements and it is</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> not a good thing <span class="keyword">in</span> your environment that Redis can reply form time to time</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> to queries with 2 milliseconds delay.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定是否激活重置哈希，默认为开启</span></span><br><span class="line">activerehashing yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################################# INCLUDES ###################################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定包含其他的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各实例又拥有自己的特定配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> include /path/to/local.conf</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> include /path/to/other.conf</span></span><br></pre></td></tr></table></figure><h2 id="4-启动容器"><a href="#4-启动容器" class="headerlink" title="4. 启动容器"></a>4. 启动容器</h2><p>这里也可以通过挂载数据卷的方式，使用外部文件。</p><p>比如数据存放在<code>/usr/loacl/docker/redis/redis/data</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--privileged=<span class="literal">true</span> \</span><br><span class="line">-p <span class="number">6379</span>:<span class="number">6379</span> \</span><br><span class="line">-v /usr/loacl/docker/redis/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-v /usr/loacl/docker/redis/redis/data:/data \</span><br><span class="line">--name redis redis:latest \</span><br><span class="line">redis-server /etc/redis/redis.conf \</span><br><span class="line">--appendonly yes \</span><br><span class="line"></span><br><span class="line"><span class="comment">//---说明--</span></span><br><span class="line">-d 后台运行</span><br><span class="line">--privileged=<span class="literal">true</span>：容器内的root拥有真正root权限，否则容器内root只是外部普通用户权限</span><br><span class="line"></span><br><span class="line">-v /usr/loacl/docker/redis/redis.conf:/etc/redis/redis.conf ：映射配置文件</span><br><span class="line"></span><br><span class="line">-v /usr/loacl/docker/redis/redis/data:/data ：映射数据目录</span><br><span class="line"></span><br><span class="line">redis-server /etc/redis/redis.conf：指定配置文件启动redis-server进程</span><br><span class="line"></span><br><span class="line">--appendonly yes：开启数据持久化</span><br></pre></td></tr></table></figure><h2 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h2><p><code>https://www.cnblogs.com/osbreak/p/9449760.html</code></p><p><code>https://www.cnblogs.com/lysongbo/p/9506782.html</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录了如何通过 Docker 来快速的安装部署 Redis。相比直接安装，通过 Docker 来安装极为方便。&lt;/p&gt;
    
    </summary>
    
      <category term="Redis" scheme="https://www.lixueduan.com/categories/Redis/"/>
    
    
      <category term="Redis" scheme="https://www.lixueduan.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门教程(一)---什么是Docker</title>
    <link href="https://www.lixueduan.com/posts/9e614b5a.html"/>
    <id>https://www.lixueduan.com/posts/9e614b5a.html</id>
    <published>2019-04-15T14:00:00.000Z</published>
    <updated>2019-05-22T14:56:43.376Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了什么是容器，接着对 Docker 做了详细介绍，最后对虚拟机与容器技术做了简单的对比</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-什么是容器"><a href="#1-什么是容器" class="headerlink" title="1. 什么是容器"></a>1. 什么是容器</h2><p><strong>一句话概括容器：容器就是将软件打包成标准化单元，以用于开发、交付和部署。</strong></p><ul><li><strong>容器镜像是轻量的、可执行的独立软件包</strong> ，包含软件运行所需的所有内容：代码、运行时环境、系统工具、系统库和设置。</li><li><strong>容器化软件适用于基于Linux和Windows的应用，在任何环境中都能够始终如一地运行。</strong></li><li><strong>容器赋予了软件独立性</strong>　，使其免受外在环境差异（例如，开发和预演环境的差异）的影响，从而有助于减少团队间在相同基础设施上运行不同软件时的冲突。</li></ul><h2 id="2-什么是-Docker"><a href="#2-什么是-Docker" class="headerlink" title="2. 什么是 Docker?"></a>2. 什么是 Docker?</h2><p>说实话关于Docker是什么并太好说，下面我通过四点向你说明Docker到底是个什么东西。</p><ul><li><strong>Docker 是世界领先的软件容器平台。</strong></li><li><strong>Docker</strong> 使用 Google 公司推出的 <strong>Go 语言</strong> 进行开发实现，基于 <strong>Linux 内核</strong> 的cgroup，namespace，以及AUFS类的<strong>UnionFS</strong>等技术，<strong>对进程进行封装隔离，属于操作系统层面的虚拟化技术。</strong> 由于隔离的进程独立于宿主和其它的隔离的进 程，因此也称其为容器。<strong>Docke最初实现是基于 LXC.</strong></li><li><strong>Docker 能够自动执行重复性任务，例如搭建和配置开发环境，从而解放了开发人员以便他们专注在真正重要的事情上：构建杰出的软件。</strong></li><li><strong>用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</strong></li></ul><h3 id="2-1-Docker思想"><a href="#2-1-Docker思想" class="headerlink" title="2.1 Docker思想"></a>2.1 Docker思想</h3><ul><li><strong>集装箱</strong></li><li><strong>标准化：</strong> ①运输方式 ② 存储方式 ③ API接口</li><li><strong>隔离</strong></li></ul><h3 id="2-2-Docker-容器特点"><a href="#2-2-Docker-容器特点" class="headerlink" title="2.2 Docker 容器特点"></a>2.2 Docker 容器特点</h3><ul><li><h4 id="轻量"><a href="#轻量" class="headerlink" title="轻量"></a>轻量</h4><p>在一台机器上运行的多个 Docker 容器可以共享这台机器的操作系统内核；它们能够迅速启动，只需占用很少的计算和内存资源。镜像是通过文件系统层进行构造的，并共享一些公共文件。这样就能尽量降低磁盘用量，并能更快地下载镜像。</p></li><li><h4 id="标准"><a href="#标准" class="headerlink" title="标准"></a>标准</h4><p>Docker 容器基于开放式标准，能够在所有主流 Linux 版本、Microsoft Windows 以及包括 VM、裸机服务器和云在内的任何基础设施上运行。</p></li><li><h4 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h4><p>Docker 赋予应用的隔离性不仅限于彼此隔离，还独立于底层的基础设施。Docker 默认提供最强的隔离，因此应用出现问题，也只是单个容器的问题，而不会波及到整台机器。</p></li></ul><h2 id="3-为什么要用-Docker"><a href="#3-为什么要用-Docker" class="headerlink" title="3. 为什么要用 Docker ?"></a>3. 为什么要用 Docker ?</h2><ul><li><strong>一致的运行环境</strong> :   Docker 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 “这段代码在我机器上没问题啊” 这类问题。</li><li><strong>更快速的启动时间</strong> :   可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。</li><li><strong>隔离性</strong> ： 避免公用的服务器，资源会容易受到其他用户的影响。</li><li><strong>弹性伸缩，快速扩展</strong>：  善于处理集中爆发的服务器使用压力。</li><li><strong>迁移方便</strong> ：  可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。</li><li><strong>持续交付和部署</strong> ：  使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署。</li></ul><h2 id="4-虚拟机与容器"><a href="#4-虚拟机与容器" class="headerlink" title="4. 虚拟机与容器"></a>4. 虚拟机与容器</h2><ul><li><strong>容器是一个应用层抽象，用于将代码和依赖资源打包在一起。</strong> <strong>多个容器可以在同一台机器上运行，共享操作系统内核，但各自作为独立的进程在用户空间中运行</strong> 。与虚拟机相比， <strong>容器占用的空间较少</strong>（容器镜像大小通常只有几十兆），<strong>瞬间就能完成启动</strong> 。</li><li><strong>虚拟机 (VM) 是一个物理硬件层抽象，用于将一台服务器变成多台服务器。</strong> 管理程序允许多个 VM 在一台机器上运行。每个VM都包含一整套操作系统、一个或多个应用、必要的二进制文件和库资源，因此 <strong>占用大量空间</strong> 。而且 VM <strong>启动也十分缓慢</strong> 。</li></ul><p>通过Docker官网，我们知道了这么多Docker的优势，但是大家也没有必要完全否定虚拟机技术，因为两者有不同的使用场景。<strong>虚拟机更擅长于彻底隔离整个运行环境</strong>。例如，云服务提供商通常采用虚拟机技术隔离不同的用户。而 <strong>Docker通常用于隔离不同的应用</strong> ，例如前端，后端以及数据库。</p><h2 id="5-Docker概念"><a href="#5-Docker概念" class="headerlink" title="5. Docker概念"></a>5. Docker概念</h2><p>Docker 包括三个基本概念</p><ul><li><strong>镜像（Image）</strong></li><li><strong>容器（Container）</strong></li><li><strong>仓库（Repository）</strong></li></ul><p>理解了这三个概念，就理解了 Docker 的整个生命周期</p><h3 id="5-1-镜像-Image-一个特殊的文件系统"><a href="#5-1-镜像-Image-一个特殊的文件系统" class="headerlink" title="5.1 镜像(Image):一个特殊的文件系统"></a>5.1 镜像(Image):一个特殊的文件系统</h3><p>　　<strong>操作系统分为内核和用户空间</strong>。对于 Linux 而言，内核启动后，会挂载 root 文件系统为其提供用户空间支持。而Docker 镜像（Image），就相当于是一个 root 文件系统。</p><p>　　<strong>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。</strong> 镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p><p>　　Docker 设计时，就充分利用 <strong>Union FS</strong>的技术，将其设计为 <strong>分层存储的架构</strong> 。 镜像实际是由多层文件系统联合组成。</p><p>　　<strong>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。</strong>　比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p><p>　　分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</p><h3 id="5-2-容器-Container-镜像运行时的实体"><a href="#5-2-容器-Container-镜像运行时的实体" class="headerlink" title="5.2 容器(Container):镜像运行时的实体"></a>5.2 容器(Container):镜像运行时的实体</h3><p>　　镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，<strong>容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等</strong> 。</p><p>　　<strong>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。前面讲过镜像使用的是分层存储，容器也是如此。</strong></p><p>　　<strong>容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</strong></p><p>　　按照 Docker 最佳实践的要求，<strong>容器不应该向其存储层内写入任何数据</strong> ，容器存储层要保持无状态化。<strong>所有的文件写入操作，都应该使用数据卷（Volume）、或者绑定宿主目录</strong>，在这些位置的读写会跳过容器存储层，直接对宿主(或网络存储)发生读写，其性能和稳定性更高。数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此， <strong>使用数据卷后，容器可以随意删除、重新 run ，数据却不会丢失。</strong></p><h3 id="5-3-仓库-Repository-集中存放镜像文件的地方"><a href="#5-3-仓库-Repository-集中存放镜像文件的地方" class="headerlink" title="5.3 仓库(Repository):集中存放镜像文件的地方"></a>5.3 仓库(Repository):集中存放镜像文件的地方</h3><p>　　镜像构建完成后，可以很容易的在当前宿主上运行，但是， <strong>如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry就是这样的服务。</strong></p><p>　　一个 Docker Registry中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。所以说：<strong>镜像仓库是Docker用来集中存放镜像文件的地方类似于我们之前常用的代码仓库。</strong></p><p>　　通常，<strong>一个仓库会包含同一个软件不同版本的镜像</strong>，而<strong>标签就常用于对应该软件的各个版本</strong> 。我们可以通过<code>&lt;仓库名&gt;:&lt;标签&gt;</code>的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签.。</p><h2 id="6-Securely-Build-Share-and-Run"><a href="#6-Securely-Build-Share-and-Run" class="headerlink" title="6. Securely Build Share and Run"></a>6. Securely Build Share and Run</h2><p>如果你搜索Docker官网，会发现如下的字样：<strong>“Securely build, share and run any application, anywhere”</strong>。那么Build, Ship, and Run到底是在干什么呢？</p><ul><li><strong>Securely Build（安全构建镜像）</strong> ： 镜像就像是集装箱包括文件以及运行环境等等资源。</li><li><strong>Share（分享镜像）</strong> ：可以把镜像放到镜像仓库用于分享。</li><li><strong>Run （运行镜像）</strong> ：运行的镜像就是一个容器，容器就是运行程序的地方。</li></ul><p><strong>Docker 运行过程也就是去仓库把镜像拉到本地，然后用一条命令把镜像运行起来变成容器。所以，我们也常常将Docker称为码头工人或码头装卸工，这和Docker的中文翻译搬运工人如出一辙。</strong></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><code>https://github.com/Snailclimb/JavaGuide/</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了什么是容器，接着对 Docker 做了详细介绍，最后对虚拟机与容器技术做了简单的对比&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://www.lixueduan.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://www.lixueduan.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>String字符串详解</title>
    <link href="https://www.lixueduan.com/posts/91311934.html"/>
    <id>https://www.lixueduan.com/posts/91311934.html</id>
    <published>2019-04-10T14:00:00.000Z</published>
    <updated>2019-05-05T12:23:37.309Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要分析了 Java中的 String 字符串相关使用与优化方案，包括 String 类型相加的本质、String 字符串相关编译器优化、 StringBuilder 与 StringBuffer 选择、字符串拼接方法、基本类型转 String 类型等。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-String对象"><a href="#1-String对象" class="headerlink" title="1. String对象"></a>1. String对象</h2><p>String 对象是 Java 中重要的数据类型，在大部分情况下我们都会用到 String 对象。其实在 Java 语言中，其设计者也对 String 做了大量的优化工作，这些也是 String 对象的特点，它们就是:<code>不变性</code>，<code>常量池优化</code>和String类的<code>final</code>定义。</p><h3 id="1-1-不变性"><a href="#1-1-不变性" class="headerlink" title="1.1 不变性"></a>1.1 不变性</h3><p><strong>String对象的状态在其被创建之后就不在发生变化</strong>。为什么说这点也是 Java 设计者所做的优化，在 Java 中，有一种模式叫不变模式：在一个对象被多线程共享，而且被频繁的访问时，可以省略同步和锁的时间，从而提高性能。而 String 的不变性，可泛化为不变模式。</p><h3 id="1-2-常量池优化"><a href="#1-2-常量池优化" class="headerlink" title="1.2 常量池优化"></a>1.2 常量池优化</h3><p>常量池优化指的是什么呢？那就是当两个 String 对象拥有同一个值的时候，他们都只是引用了常量池中的同一个拷贝。所以当程序中某个字符串频繁出现时，这个优化技术就可以节省大幅度的内存空间了。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String s1  = <span class="string">"123"</span>;</span><br><span class="line">String s2  = <span class="string">"123"</span>;</span><br><span class="line">String s3 = <span class="keyword">new</span> String(<span class="string">"123"</span>);</span><br><span class="line">System.out.println(s1==s2);      <span class="comment">//true</span></span><br><span class="line">System.out.println(s1==s3);      <span class="comment">//false</span></span><br><span class="line">System.out.println(s1==s3.intern());    <span class="comment">//true123456</span></span><br></pre></td></tr></table></figure><p>　以上代码中，s1 和 s2 引用的是相同的地址，故而第四行打印出的结果是 true ;而 s3 虽然只与 s1,s2 相等，但是 s3 是通过 new String(“123”) 创建的，重新开辟了内存空间，因引用的地址不同，所以第5行打印出 false ; String 的 intern() 方法返回的是 String 对象在常量池中的引用，所以最后一行打印出 true。</p><h3 id="1-3-final的定义"><a href="#1-3-final的定义" class="headerlink" title="1.3 final的定义"></a>1.3 final的定义</h3><p>String 类以 final 进行了修饰，在系统中就不可能有 String 的子类，这一点也是出于对系统安全性的考虑。</p><h2 id="2-字符串操作中的常见优化方法"><a href="#2-字符串操作中的常见优化方法" class="headerlink" title="2. 字符串操作中的常见优化方法"></a>2. 字符串操作中的常见优化方法</h2><h3 id="2-1-split-方法优化"><a href="#2-1-split-方法优化" class="headerlink" title="2.1 split()方法优化"></a>2.1 split()方法优化</h3><p>　　通常情况下，split() 方法带给我们很大的方便，但是其性能不是很好。建议结合使用 indexOf( )和 subString()方法进行自定义拆分，这样性能会有显著的提高。　　　　</p><h3 id="2-2-String常量的累加操作优化方法"><a href="#2-2-String常量的累加操作优化方法" class="headerlink" title="2.2 String常量的累加操作优化方法"></a>2.2 String常量的累加操作优化方法</h3><p>示例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">long</span> sBeginTime = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">    s+=<span class="string">"s"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> sEndTime = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"s拼接100000遍s耗时: "</span> + (sEndTime - sBeginTime) + <span class="string">"ms"</span>);</span><br><span class="line"></span><br><span class="line">StringBuffer s1 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="keyword">long</span> s1BeginTime = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">    s1.append(<span class="string">"s"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> s1EndTime = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"s1拼接100000遍s耗时: "</span> + (s1EndTime - s1BeginTime) + <span class="string">"ms"</span>);</span><br><span class="line"></span><br><span class="line">StringBuilder s2 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">long</span> s2BeginTime = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">    s2.append(<span class="string">"s"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> s2EndTime = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"s2拼接100000遍s耗时: "</span> + (s2EndTime - s2BeginTime) + <span class="string">"ms"</span>);</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s拼接<span class="number">100000</span>遍s耗时: <span class="number">3426</span>ms</span><br><span class="line">s1拼接<span class="number">100000</span>遍s耗时: <span class="number">3</span>ms</span><br><span class="line">s2拼接<span class="number">100000</span>遍s耗时: <span class="number">1</span>ms</span><br></pre></td></tr></table></figure><p>上例所示，使用+号拼接字符串，其效率明显较低，而使用 StringBuffer 和 StringBuilder 的 append() 方法进行拼接，效率是使用+号拼接方式的百倍甚至千倍，而 StringBuffer 的效率比 StringBuilder 低些，这是由于StringBuffer 实现了线程安全，效率较低也是不可避免的。</p><p><strong>所以在字符串的累加操作中，建议结合线程问题选择 StringBuffer 或 StringBuilder，应避免使用+号拼接字符串</strong>。</p><h3 id="2-3-基本数据类型转化为-String-类型的优化方案"><a href="#2-3-基本数据类型转化为-String-类型的优化方案" class="headerlink" title="2.3 基本数据类型转化为 String 类型的优化方案"></a>2.3 基本数据类型转化为 String 类型的优化方案</h3><p>示例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Integer num  = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> loop = <span class="number">10000000</span>;  <span class="comment">// 将结果放大10000000倍，以便于观察结果</span></span><br><span class="line"><span class="keyword">long</span> beginTime = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loop; i++) &#123;</span><br><span class="line">    String s = num+<span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"+\"\"的方式耗时: "</span> + (endTime - beginTime) + <span class="string">"ms"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">beginTime = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loop; i++) &#123;</span><br><span class="line">    String s = String.valueOf(num);</span><br><span class="line">&#125;</span><br><span class="line">endTime = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"String.valueOf()的方式耗时: "</span> + (endTime - beginTime) + <span class="string">"ms"</span>);</span><br><span class="line"></span><br><span class="line">beginTime = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loop; i++) &#123;</span><br><span class="line">    String s = num.toString();</span><br><span class="line">&#125;</span><br><span class="line">endTime = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"toString()的方式耗时: "</span> + (endTime - beginTime) + <span class="string">"ms"</span>);</span><br><span class="line"><span class="number">1234567891011121314151617181920212223</span></span><br></pre></td></tr></table></figure><p>　以上示例中，String.valueOf() 直接调用了底层的 Integer.toString() 方法，不过其中会先判断是否为空；+”“由StringBuilder 实现，先 new StringBuilder() 然后调用了 append() 方法，最后调用了 toString() 方法返回 String 对象；num.toString() 直接调用了 Integer.toString() 方法。</p><p>以下是结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+<span class="string">""</span>的方式耗时: <span class="number">120</span>ms</span><br><span class="line">String.valueOf()的方式耗时: <span class="number">31</span>ms</span><br><span class="line">toString()的方式耗时: <span class="number">30</span>ms</span><br></pre></td></tr></table></figure><p><strong>所以效率是： num.toString() 方法最快，其次是 String.valueOf(num )，num+”“的方式最满</strong>。</p><h2 id="3-编译器优化"><a href="#3-编译器优化" class="headerlink" title="3. 编译器优化"></a>3. 编译器优化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * String类型优化测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">StringTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String a = <span class="string">"hello illusory"</span>;</span><br><span class="line">    String b = <span class="string">"hello "</span> + <span class="string">"illusory"</span>;</span><br><span class="line">    <span class="comment">//true</span></span><br><span class="line">    System.out.println(a == b);</span><br><span class="line">    String c = <span class="string">"hello "</span>;</span><br><span class="line">    String d = <span class="string">"illusory"</span>;</span><br><span class="line">    String e = c + d;</span><br><span class="line">    <span class="comment">//false</span></span><br><span class="line">    System.out.println(a == e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java 中的变量和基本类型的值存放于栈，而 new 出来的对象本身存放于堆内存，指向对象的引用还是放在栈内存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String b = <span class="string">"hello "</span> + <span class="string">"illusory"</span>;</span><br></pre></td></tr></table></figure><p>两个都是字符串，是固定值 所以编译器会自动优化为<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String b = <span class="string">"hello illusory"</span>;</span><br></pre></td></tr></table></figure></p><p><code>a</code>、<code>b</code> 都指向常量池中的<code>hello illusory</code>所以 <code>a==b</code> 为 <code>true</code></p><p>由于 String 的不可变性，对其进行操作的效率会大大降低，但对 “+”操作符,编译器也对其进行了优化<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String c = <span class="string">"hello "</span>;</span><br><span class="line">String d = <span class="string">"illusory"</span>;</span><br><span class="line">String e = c + d;</span><br></pre></td></tr></table></figure></p><p>其中的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String e = c + d</span><br></pre></td></tr></table></figure></p><p><strong>当+号两边存在变量时(两边或任意一边)，在编译期是无法确定其值的，所以要等到运行期再进行处理</strong> Java中对String 的相加其本质是 new 了 StringBuilder 对象进行 append 操作，拼接后调用 toString() 返回 String 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String e = <span class="keyword">new</span> StringBuilder().append(<span class="string">"hello "</span>).append(<span class="string">"illusory"</span>).toString();</span><br></pre></td></tr></table></figure><p><code>StringBuilder</code>的<code>toString</code>方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Create a copy, don't share the array</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(value, <span class="number">0</span>, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以<code>e</code>是指向<code>new</code>出来的一个 String 对象,而<code>a</code>指向常量池中的对象，<code>a==e</code> 为 <code>false</code></p><p>反编译后如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">D:\lillusory\Java\work_idea\java-learning\target\classes\jvm\string&gt;javap -<span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="class"><span class="title">path</span> . -<span class="title">v</span> <span class="title">StringTest</span>.<span class="title">class</span></span></span><br><span class="line">Classfile /D:/lillusory/Java/work_idea/java-learning/target/classes/jvm/string/S</span><br><span class="line">tringTest.class</span><br><span class="line">  Last modified <span class="number">2019</span>-<span class="number">5</span>-<span class="number">5</span>; size <span class="number">946</span> bytes</span><br><span class="line">  MD5 checksum <span class="number">2</span>d529fca114cf155ae7c647bfc733150</span><br><span class="line">  Compiled from <span class="string">"StringTest.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jvm</span>.<span class="title">string</span>.<span class="title">StringTest</span></span></span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Methodref          #12.#35        // java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">   #2 = String             #36            // hello illusory</span><br><span class="line">   #3 = String             #37            // hello</span><br><span class="line">   #4 = String             #38            // illusory</span><br><span class="line">   #5 = Class              #39            // java/lang/StringBuilder</span><br><span class="line">   #6 = Methodref          #5.#35         // java/lang/StringBuilder."&lt;init&gt;":()</span><br><span class="line">V</span><br><span class="line">   #7 = Methodref          #5.#40         // java/lang/StringBuilder.append:(Lja</span><br><span class="line">va/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">   #8 = Methodref          #5.#41         // java/lang/StringBuilder.toString:()</span><br><span class="line">Ljava/lang/String;</span><br><span class="line">   #9 = Fieldref           #42.#43        // java/lang/System.out:Ljava/io/Print</span><br><span class="line">Stream;</span><br><span class="line">  #10 = Methodref          #44.#45        // java/io/PrintStream.println:(Z)V</span><br><span class="line">  #11 = Class              #46            // jvm/string/StringTest</span><br><span class="line">  #12 = Class              #47            // java/lang/Object</span><br></pre></td></tr></table></figure></p><p>可以看到确实是用到了<code>StringBuilder</code></p><p>加上 final 有会如何呢?<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * String类型优化测试</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">StringTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       String a = <span class="string">"hello illusory"</span>;</span><br><span class="line">      </span><br><span class="line">       <span class="keyword">final</span> String c2 = <span class="string">"hello "</span>;</span><br><span class="line">       <span class="keyword">final</span> String d2 = <span class="string">"illusory"</span>;</span><br><span class="line">       String e2 = c2 + d2;</span><br><span class="line">       <span class="comment">//     true</span></span><br><span class="line">       System.out.println(a == e2);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>由于<code>c2</code>、<code>d2</code>都加了<code>final</code>修饰 所以被当作一个常量对待<br>此时+号两边都是常量，在编译期就可以确定其值了<br>类似于<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String b = <span class="string">"hello "</span> + <span class="string">"illusory"</span>;</span><br></pre></td></tr></table></figure></p><p>此时都指向常量池中的<code>hello illusory</code>所以<code>a == e2</code>为<code>true</code></p><p>如果+号两边有一个不是常量那么结果都是false<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * String类型优化测试</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">StringTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       String a = <span class="string">"hello illusory"</span>;</span><br><span class="line">      </span><br><span class="line">       <span class="keyword">final</span> String c2 = <span class="string">"hello "</span>;</span><br><span class="line">       String f = c2 + getName();</span><br><span class="line">       <span class="comment">//     false</span></span><br><span class="line">       System.out.println(a == f);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">"illusory"</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>其中<code>c2</code>是final 被当成常量 其值是固定的<br>但是<code>getName()</code> 要运行时才能确定值 所以最后 f 也是 new 的一个对象 <code>a == f</code>结果为<code>false</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * String类型优化测试</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">StringTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       String a = <span class="string">"hello illusory"</span>;</span><br><span class="line">       String g = a.intern();</span><br><span class="line">       System.out.println(a == g);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>当调用 String.intern() 方法时，如果常量池中已经存在该字符串，则返回池中的字符串引用；否则将此字符串添加到常量池中，并返回字符串的引用。<br>这里<code>g</code>和<code>a</code>是都是指向常量池中的<code>hello illusory</code>，所以<code>a == g</code>为<code>true</code></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>最后总结一下</p><p>1.直接字符串相加，编译器会优化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">"hello "</span> + <span class="string">"illusory"</span>;---&gt; String a = <span class="string">"hello illusory"</span>;</span><br></pre></td></tr></table></figure><p>2.String 用加号拼接本质是new了StringBuilder对象进行append操作，拼接后调用toString()返回String对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> String c = <span class="string">"hello "</span>;</span><br><span class="line">        String d = <span class="string">"illusory"</span>;</span><br><span class="line">        String e = c + d;</span><br><span class="line"><span class="comment">//实现如下</span></span><br><span class="line">String e = <span class="keyword">new</span> StringBuilder().append(<span class="string">"hello "</span>).append(<span class="string">"illusory"</span>).toString();</span><br></pre></td></tr></table></figure><p>3.+号两边都在编译期能确定的也会优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * String类型优化测试</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">StringTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       String a = <span class="string">"hello illusory"</span>;</span><br><span class="line">      </span><br><span class="line">       <span class="keyword">final</span> String c2 = <span class="string">"hello "</span>;</span><br><span class="line">       <span class="keyword">final</span> String d2 = <span class="string">"illusory"</span>;</span><br><span class="line">       String e2 = c2 + d2;</span><br><span class="line">       <span class="comment">//     true</span></span><br><span class="line">       System.out.println(a == e2);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>4.在字符串的累加操作中，建议结合线程问题选择 StringBuffe r或 StringBuilder，应避免使用+号拼接字符串</p><p>5.基本数据类型转化为 String 类型，效率是: num.toString() 方法最快，其次是 String.valueOf(num)，最后是num+”“的方式</p><h2 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h2><p><code>https://blog.csdn.net/SEU_Calvin/article/details/52291082</code></p><p><code>https://www.cnblogs.com/vincentl/p/9600093.html</code></p><p><code>https://www.cnblogs.com/will959/p/7537891.html</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要分析了 Java中的 String 字符串相关使用与优化方案，包括 String 类型相加的本质、String 字符串相关编译器优化、 StringBuilder 与 StringBuffer 选择、字符串拼接方法、基本类型转 String 类型等。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.lixueduan.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.lixueduan.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Spring系列(三)---BeanFactory 与 ApplicationContext</title>
    <link href="https://www.lixueduan.com/posts/53a05c34.html"/>
    <id>https://www.lixueduan.com/posts/53a05c34.html</id>
    <published>2019-04-06T14:00:00.000Z</published>
    <updated>2019-04-18T13:40:38.862Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了 Spring 框架中 BeanFactory 与 ApplicationContext 的区别。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-BeanFactory"><a href="#1-BeanFactory" class="headerlink" title="1.  BeanFactory"></a>1.  BeanFactory</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h3><p>BeanFactory 是 Spring 的“心脏”。它就是 Spring IoC 容器的真面目。Spring 使用 BeanFactory 来实例化、配置和管理 Bean。</p><p>BeanFactory：是IOC容器的核心接口， 它定义了IOC的基本功能，我们看到它主要定义了getBean方法。getBean方法是IOC容器获取bean对象和引发依赖注入的起点。方法的功能是返回特定的名称的Bean。</p><p>BeanFactory 是初始化 Bean 和调用它们生命周期方法的“吃苦耐劳者”。注意，BeanFactory 只能管理单例（Singleton）Bean 的生命周期。它不能管理原型(prototype,非单例)Bean 的生命周期。这是因为原型 Bean 实例被创建之后便被传给了客户端,容器失去了对它们的引用。</p><h3 id="1-2-源码分析"><a href="#1-2-源码分析" class="headerlink" title="1.2 源码分析"></a>1.2 源码分析</h3><p>BeanFactory 源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.beans.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来引用一个实例，或把它和工厂产生的Bean区分开，就是说，如果一个FactoryBean的名字为a，那么，&amp;a会得到那个Factory</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String FACTORY_BEAN_PREFIX = <span class="string">"&amp;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 四个不同形式的getBean方法，获取实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Object <span class="title">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String name, Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Object <span class="title">getBean</span><span class="params">(String name, Object... args)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">containsBean</span><span class="params">(String name)</span></span>; <span class="comment">// 是否存在</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;<span class="comment">// 是否为单实例</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isPrototype</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;<span class="comment">// 是否为原型（多实例）</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isTypeMatch</span><span class="params">(String name, Class&lt;?&gt; targetType)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;<span class="comment">// 名称、类型是否匹配</span></span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; getType(String name) <span class="keyword">throws</span> NoSuchBeanDefinitionException; <span class="comment">// 获取类型</span></span><br><span class="line"></span><br><span class="line">    String[] getAliases(String name);<span class="comment">// 根据实例的名字获取实例的别名</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-方法列表"><a href="#1-3-方法列表" class="headerlink" title="1.3 方法列表"></a>1.3 方法列表</h3><ul><li><p>4个获取实例的方法。getBean的重载方法。</p></li><li><p>4个判断的方法。判断是否存在，是否为单例、原型，名称类型是否匹配。</p></li><li><p>1个获取类型的方法、1个获取别名的方法。根据名称获取类型、根据名称获取别名。</p></li></ul><p>这10个方法，很明显，这是一个典型的工厂模式的工厂接口。</p><h3 id="1-4-实例演示"><a href="#1-4-实例演示" class="headerlink" title="1.4 实例演示"></a>1.4 实例演示</h3><p>在 Spring 3.2 之前的版本中，BeanFactory最常见的实现类为XmlBeanFactory(已废弃)，建议使用 XmlBeanDefinitionReader 与 DefaultListableBeanFactory。可以从classpath或文件系统等获取资源。</p><p>拿前面的 Book 举例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="comment">//省略Getter/Setter和构造方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml 配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"spring.Book"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"think in java"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"type"</span> <span class="attr">value</span>=<span class="string">"CS"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 DefaultListableBeanFactory 与 XmlBeanDefinitionReader 来启动 IoC 容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> esourcePatternResolver resolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br><span class="line"> Resource resource = resolver.getResource(<span class="string">"classpath:beans.xml"</span>);</span><br><span class="line"> System.out.println(<span class="string">"getURL:"</span> + resource.getURL());</span><br><span class="line">    　DefaultListableBeanFactory factory = <span class="keyword">new</span> DefaultListableBeanFactory();</span><br><span class="line"> XmlBeanDefinitionReader reader = <span class="keyword">new</span> XmlBeanDefinitionReader(factory);</span><br><span class="line"> reader.loadBeanDefinitions(resource);</span><br><span class="line">　　　　<span class="comment">//ApplicationContext factory=new ClassPathXmlApplicationContext("applicationContext.xml"); </span></span><br><span class="line">            </span><br><span class="line">       Book book = factory.getBean(<span class="string">"book"</span>,Book.class);</span><br><span class="line">       System.out.println(<span class="string">"boook对象已经初始化完成"</span>);</span><br><span class="line">       System.out.println(book.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-小结"><a href="#1-5-小结" class="headerlink" title="1.5 小结"></a>1.5 小结</h3><ul><li>XmlBeanFactory通过Resource装载Spring配置信息冰启动IoC容器，然后就可以通过factory.getBean从IoC容器中获取Bean了。</li><li><strong>通过BeanFactory启动IoC容器时，并不会初始化配置文件中定义的Bean，初始化动作发生在第一个调用时</strong>。</li><li>对于单实例（singleton）的Bean来说，BeanFactory会缓存Bean实例，所以第二次使用getBean时直接从IoC容器缓存中获取Bean。</li></ul><h2 id="2-ApplicationContext"><a href="#2-ApplicationContext" class="headerlink" title="2. ApplicationContext"></a>2. ApplicationContext</h2><p>ApplicationContext由BeanFactory派生而来，提供了更多面向实际应用的功能。在BeanFactory中，很多功能需要以编程的方式实现，而在ApplicationContext中则可以通过配置实现。</p><p>BeanFactorty接口提供了配置框架及基本功能，但是无法支持spring的aop功能和web应用。而ApplicationContext接口作为BeanFactory的派生，因而提供BeanFactory所有的功能。而且ApplicationContext还在功能上做了扩展，相较于BeanFactorty，ApplicationContext还提供了以下的功能： </p><p>（1）MessageSource, 提供国际化的消息访问<br>（2）资源访问，如URL和文件<br>（3）事件传播特性，即支持aop特性<br>（4）载入多个（有继承关系）上下文 ，使得每一个上下文都专注于一个特定的层次，比如应用的web层 </p><p>ApplicationContext：是IOC容器另一个重要接口， 它继承了BeanFactory的基本功能， 同时也继承了容器的高级功能，如：MessageSource（国际化资源接口）、ResourceLoader（资源加载接口）、ApplicationEventPublisher（应用事件发布接口）等。</p><h2 id="3-二者区别"><a href="#3-二者区别" class="headerlink" title="3. 二者区别"></a>3. 二者区别</h2><h3 id="3-1-bean-加载时机"><a href="#3-1-bean-加载时机" class="headerlink" title="3.1 bean 加载时机"></a>3.1 bean 加载时机</h3><p><code>BeanFactroy</code> 采用的是<code>延迟加载</code>形式来注入 Bean 的，即只有在使用到某个Bean时(调用getBean())，才对该Bean进行加载实例化，这样，我们就不能发现一些存在的Spring的配置问题。<br><code>ApplicationContext</code>则相反，它是在<code>容器启动时</code>，一次性<code>创建</code>了所有的Bean。这样，在容器启动时，我们就可以发现Spring中存在的配置错误。 </p><h3 id="3-2-Bean-注册"><a href="#3-2-Bean-注册" class="headerlink" title="3.2 Bean 注册"></a>3.2 Bean 注册</h3><p>BeanFactory 和 ApplicationContext 都支持 BeanPostProcessor、BeanFactoryPostProcessor 的使用。</p><p>但两者之间的区别是：BeanFactory需要手动注册，而ApplicationContext则是自动注册。</p><p>Applicationcontext比 beanFactory 加入了一些更好使用的功能。而且 beanFactory 的许多功能需要通过编程实现而 Applicationcontext 可以通过配置实现。</p><p>比如后处理 bean，ApplicationContext 直接配置在配置文件即可而 BeanFactory 这要在代码中显示的写出来才可以被容器识别。</p><h3 id="3-3-使用场景"><a href="#3-3-使用场景" class="headerlink" title="3.3 使用场景"></a>3.3 使用场景</h3><p>BeanFactory 主要是面对与 Spring 框架的基础设施，面对 Spring 自己。</p><p>ApplicationContext 主要面对与 Spring 使用的开发者。</p><p>基本都会使用 ApplicationContext 并非 BeanFactory 。</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><ul><li>1.BeanFactory 负责读取 bean 配置文档，管理 bean 的加载，实例化，维护 bean 之间的依赖关系，负责bean 的声明周期。</li><li>2.ApplicationContext 除了提供上述 BeanFactory 所能提供的功能之外，还提供了更完整的框架功能：<ul><li>a. 国际化支持(MessageSource)</li><li>b. 资源访问(ResourceLoader)</li><li>c.载入多个（有继承关系）上下文 ，使得每一个上下文都专注于一个特定的层次，比如应用的web层 </li><li>d.消息发送、响应机制（ApplicationEventPublisher）</li><li>e.AOP（拦截器）</li></ul></li></ul><h2 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h2><p><code>https://www.cnblogs.com/xiaoxi/p/5846416.html</code></p><p><code>https://www.jianshu.com/p/2808f7c4a24f</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了 Spring 框架中 BeanFactory 与 ApplicationContext 的区别。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="https://www.lixueduan.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://www.lixueduan.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring系列(二)---Spring 常用注解分析</title>
    <link href="https://www.lixueduan.com/posts/6704df3d.html"/>
    <id>https://www.lixueduan.com/posts/6704df3d.html</id>
    <published>2019-04-05T14:00:00.000Z</published>
    <updated>2019-04-18T13:40:38.862Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要对 Spring 框架中经常用到的注解与配置进行了说明。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-Bean相关的注解"><a href="#1-Bean相关的注解" class="headerlink" title="1. Bean相关的注解"></a>1. Bean相关的注解</h2><p>与SpringBean相关的注解有以下四大类：</p><ul><li><strong>@Controller</strong> ：标注一个控制器组件类 <code>Controller层</code></li><li><strong>@Service</strong>：标注一个业务逻辑组件类 <code>Service层</code></li><li><strong>@Repository</strong> ：标注一个 DAO 组件类 <code>DAO层</code></li><li><strong>@Component</strong> ：标注一个普通的 Spring Bean 类 前面三个都不是但又想交给Spring管理就用这个</li></ul><h2 id="2-Autowired与-Resource区别"><a href="#2-Autowired与-Resource区别" class="headerlink" title="2. @Autowired与@Resource区别"></a>2. @Autowired与@Resource区别</h2><h3 id="2-1-相同点"><a href="#2-1-相同点" class="headerlink" title="2.1 相同点"></a>2.1 相同点</h3><p><code>@Resource</code>的作用相当于<code>@Autowired</code>，均可标注在<code>字段</code>或属性的<code>setter方法</code>上。</p><h3 id="2-2-不同点"><a href="#2-2-不同点" class="headerlink" title="2.2 不同点"></a>2.2 不同点</h3><h4 id="1-提供方"><a href="#1-提供方" class="headerlink" title="1. 提供方"></a>1. 提供方</h4><p><code>@Autowired</code> 是 <code>Spring</code> 提供的注解；</p><p><code>@Resource</code>是<code>J2EE</code>提供的注解，javax.annotation 包下的注解，来自于JSR-250，需要JDK1.6及以上。</p><h4 id="2-注入方式"><a href="#2-注入方式" class="headerlink" title="2. 注入方式"></a>2. 注入方式</h4><p><code>@Autowired</code>只按照<code>Type</code> 注入；</p><p><code>@Resource</code> 默认按Name自动注入，也提供按照Type 注入；</p><h4 id="3-属性"><a href="#3-属性" class="headerlink" title="3. 属性"></a>3. 属性</h4><p><code>@Autowired</code>注解可用于为类的属性、构造器、方法进行注值。</p><p>默认情况下，其依赖的对象必须存在(bean可用)，如果需要改变这种默认方式，可以设置其 required 属性为false。<br><code>@Autowired</code>注解<code>默认</code>按照<code>类型</code>装配，如果容器中包含多个同一类型的Bean，那么启动容器时会报找不到指定类型bean的异常，解决办法是结合 <strong>@Qualifier</strong> 注解进行限定，指定注入的bean名称。</p><p><code>@Resource</code>有两个中重要的属性：<code>name</code>和<code>type</code>。</p><p>name 属性指定 byName，如果没有指定 name 属性:</p><p>当注解标注在字段上，即默认取字段的名称作为 bean 名称寻找依赖对象，<br>当注解标注在属性的setter方法上，即默认取属性名作为bean名称寻找依赖对象。<br><code>@Resource</code>如果没有指定name属性，并且按照默认的名称仍然找不到依赖对象时， @Resource注解会回退到按类型装配。但一旦指定了name属性，就只能按名称装配了。</p><h4 id="4-其他"><a href="#4-其他" class="headerlink" title="4. 其他"></a>4. 其他</h4><p><code>@Autowired</code>注解进行装配容易抛出异常，特别是装配的 bean 类型有多个的时候,解决的办法是增加 @Qualifier 注解进行限定。</p><p><code>@Resource</code>注解的使用性更为灵活，可指定名称，也可以指定类型；</p><h2 id="3-context-annotation-config与context-component-scan"><a href="#3-context-annotation-config与context-component-scan" class="headerlink" title="3. context:annotation-config与context:component-scan"></a>3. context:annotation-config与context:component-scan</h2><h3 id="3-1-context-annotation-config"><a href="#3-1-context-annotation-config" class="headerlink" title="3.1 context:annotation-config"></a>3.1 context:annotation-config</h3><p>我们一般在含有 Spring 的项目中，可能会看到配置项中包含这个配置节点</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这条配置会向 Spring 容器中注册以下4个 BeanPostProcessor </p><ul><li><p>AutowiredAnnotationBeanPostProcessor</p></li><li><p>CommonAnnotationBeanPostProcessor</p></li><li><p>PersistenceAnnotationBeanPostProcessor</p></li><li><p>RequiredAnnotationBeanPostProcessor</p></li></ul><p><strong>注册这4个 BeanPostProcessor 的作用，就是为了你的系统能够识别相应的注解</strong>。</p><p>如果想使用 <code>@Resource</code> 、<code>@PostConstruct</code>、<code>@PreDestroy</code>等注解就必须声明<code>CommonAnnotationBeanPostProcessor</code>。<br>如果想使用<code>@PersistenceContext</code>注解，就必须声明<code>PersistenceAnnotationBeanPostProcessor</code>的Bean。<br>如果想使用 @Autowired注解，那么就必须声明<code>AutowiredAnnotationBeanPostProcessor</code>的 Bean。<br>如果想使用 <code>@Required</code>的注解，就必须声明<code>RequiredAnnotationBeanPostProcesso</code>r的Bean。</p><p><strong>所以如果不加一句<code>context:annotation-config</code>那么上面的这些注解就无法识别</strong>。</p><h3 id="3-2-context-component-scan"><a href="#3-2-context-component-scan" class="headerlink" title="3.2 context:component-scan"></a>3.2 context:component-scan</h3><p><code>context:component-scan</code>包括了<code>context:annotation-config</code>的功能，即注册 BeanPostProcessor 使系统能够识别上面的注解。</p><p><strong>同时还会自动扫描所配置的包下的 bean</strong>。即 扫描包下面有<code>@Controller</code>、<code>@Service</code>、<code>@Repository</code>、<code>@Component</code>这四个注解的类，自动放入 Spring 容器。</p><p>所以一般写context:component-scan就行了。</p><h3 id="3-实例演示"><a href="#3-实例演示" class="headerlink" title="3. 实例演示"></a>3. 实例演示</h3><p>就拿前面的 student 和 book 举例<br>实体类这样写,使用注解进行属性注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(value = <span class="string">"illusory"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value</span>(value = <span class="string">"23"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Book book;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(value = <span class="string">"defaultType"</span>)</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="meta">@Value</span>(value = <span class="string">"defaultName"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件就不用写各种 property 属性注入了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"illusory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用<code>@Autowired</code>后也不用配置引用对象了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"book"</span> <span class="attr">ref</span>=<span class="string">"book"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是还是需要在 xml配置 bean 的基本信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"spring.Student"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"spring.Book"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>如果在实体类加上<code>@Component</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(value = <span class="string">"student"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(value = <span class="string">"illusory"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value</span>(value = <span class="string">"23"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Book book;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就不用在xml中配置bean了,只需要在xml中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"spring"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>系统可以识别到前面的注解，同时还会自动扫描包下的 bean。</p><p>这样xml中只要要一行就搞定了。</p><h2 id="4-自定义初始化与销毁方法"><a href="#4-自定义初始化与销毁方法" class="headerlink" title="4. 自定义初始化与销毁方法"></a>4. 自定义初始化与销毁方法</h2><p>init-method destroy-method属性对应的注解</p><ul><li>@PostConstruct注解，在对象创建后调用</li><li>@PreDestroy注解，在对象销毁前调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"init"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PreDestroy</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"destory"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-Component和-Configuration-作为配置类的区别"><a href="#5-Component和-Configuration-作为配置类的区别" class="headerlink" title="5. @Component和@Configuration 作为配置类的区别"></a>5. @Component和@Configuration 作为配置类的区别</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p><code>@Component</code>和<code>@Configuration</code>都可以作为配置类,但还是有一定差别的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span>  <span class="comment">//看这里！！！</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Configuration &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br></pre></td></tr></table></figure><p><strong>Spring 中新的 Java 配置支持的核心就是 @Configuration 注解的类</strong>。</p><p>这些类主要包括 @Bean 注解的方法来为 Spring 的 IoC 容器管理的对象定义实例，配置和初始化逻辑。</p><p>使用 @Configuration 来注解类表示类可以被 Spring 的 IoC 容器所使用，作为 bean 定义的资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyService <span class="title">myService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这和 Spring 的 XML 文件中的非常类似</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myService"</span> <span class="attr">class</span>=<span class="string">"com.acme.services.MyServiceImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-实例演示"><a href="#5-2-实例演示" class="headerlink" title="5.2 实例演示"></a>5.2 实例演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleBean <span class="title">simpleBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleBeanConsumer <span class="title">simpleBeanConsumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleBeanConsumer(simpleBean());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleBean <span class="title">simpleBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleBeanConsumer <span class="title">simpleBeanConsumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleBeanConsumer(simpleBean());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个代码正常工作，正如预期的那样，SimpleBeanConsumer 将会得到一个单例 SimpleBean 的链接。<br>第二个配置是完全错误的，虽然 Spring 会创建一个 SimpleBean 的单例bean，但是 SimpleBeanConsumer 将获得另一个SimpleBean实例（也就是相当于直接调用new SimpleBean() ，<br>这个bean是不归Spring管理的）。</p><h3 id="5-3-原因"><a href="#5-3-原因" class="headerlink" title="5.3 原因"></a>5.3 原因</h3><p>使用 <code>@Configuration</code> 所有标记为<code>@Bean</code>的方法将被包装成一个 <code>CGLIB包装器</code>，它的工作方式就好像是这个方法的第一个调用，那么原始方法的主体将被执行，最终的对象将在 Spring上下文中注册。所有进一步的调用只返回从上下文检索的 bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enhanceConfigurationClasses</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, AbstractBeanDefinition&gt; configBeanDefs = <span class="keyword">new</span> LinkedHashMap&lt;String, AbstractBeanDefinition&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String beanName : beanFactory.getBeanDefinitionNames()) &#123;</span><br><span class="line">            BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName);</span><br><span class="line">            <span class="comment">//判断是否被@Configuration标注</span></span><br><span class="line">            <span class="keyword">if</span> (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!(beanDef <span class="keyword">instanceof</span> AbstractBeanDefinition)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(<span class="string">"Cannot enhance @Configuration bean definition '"</span> +</span><br><span class="line">                            beanName + <span class="string">"' since it is not stored in an AbstractBeanDefinition subclass"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (logger.isWarnEnabled() &amp;&amp; beanFactory.containsSingleton(beanName)) &#123;</span><br><span class="line">                    logger.warn(<span class="string">"Cannot enhance @Configuration bean definition '"</span> + beanName +</span><br><span class="line">                            <span class="string">"' since its singleton instance has been created too early. The typical cause "</span> +</span><br><span class="line">                            <span class="string">"is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor "</span> +</span><br><span class="line">                            <span class="string">"return type: Consider declaring such methods as 'static'."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (configBeanDefs.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// nothing to enhance -&gt; return immediately</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ConfigurationClassEnhancer enhancer = <span class="keyword">new</span> ConfigurationClassEnhancer();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, AbstractBeanDefinition&gt; entry : configBeanDefs.entrySet()) &#123;</span><br><span class="line">            AbstractBeanDefinition beanDef = entry.getValue();</span><br><span class="line">            <span class="comment">// If a @Configuration class gets proxied, always proxy the target class</span></span><br><span class="line">            beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// Set enhanced subclass of the user-specified bean class</span></span><br><span class="line">                Class&lt;?&gt; configClass = beanDef.resolveBeanClass(<span class="keyword">this</span>.beanClassLoader);</span><br><span class="line">                <span class="comment">//生成代理的class</span></span><br><span class="line">                Class&lt;?&gt; enhancedClass = enhancer.enhance(configClass, <span class="keyword">this</span>.beanClassLoader);</span><br><span class="line">                <span class="keyword">if</span> (configClass != enhancedClass) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                        logger.debug(String.format(<span class="string">"Replacing bean definition '%s' existing class '%s' with "</span> +</span><br><span class="line">                                <span class="string">"enhanced class '%s'"</span>, entry.getKey(), configClass.getName(), enhancedClass.getName()));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//替换class，将原来的替换为CGLIB代理的class</span></span><br><span class="line">                    beanDef.setBeanClass(enhancedClass);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot load configuration class: "</span> + beanDef.getBeanClassName(), ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>isFullConfigurationClass</code>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//是否为配置类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isConfigurationCandidate</span><span class="params">(AnnotationMetadata metadata)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (isFullConfigurationCandidate(metadata) || isLiteConfigurationCandidate(metadata));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否为完整配置类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isFullConfigurationCandidate</span><span class="params">(AnnotationMetadata metadata)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> metadata.isAnnotated(Configuration.class.getName());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否为精简配置类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isLiteConfigurationCandidate</span><span class="params">(AnnotationMetadata metadata)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Do not consider an interface or an annotation...</span></span><br><span class="line">    <span class="keyword">if</span> (metadata.isInterface()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Any of the typical annotations found?</span></span><br><span class="line">    <span class="keyword">for</span> (String indicator : candidateIndicators) &#123;</span><br><span class="line">        <span class="keyword">if</span> (metadata.isAnnotated(indicator)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Finally, let's look for @Bean methods...</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> metadata.hasAnnotatedMethods(Bean.class.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"Failed to introspect @Bean methods on class ["</span> + metadata.getClassName() + <span class="string">"]: "</span> + ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//精简配置类包含的注解</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    candidateIndicators.add(Component.class.getName());</span><br><span class="line">    candidateIndicators.add(ComponentScan.class.getName());</span><br><span class="line">    candidateIndicators.add(Import.class.getName());</span><br><span class="line">    candidateIndicators.add(ImportResource.class.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-参考"><a href="#6-参考" class="headerlink" title="6. 参考"></a>6. 参考</h2><p><code>https://blog.csdn.net/long476964/article/details/80626930</code></p><p><code>https://www.jianshu.com/p/89f55286cf21</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要对 Spring 框架中经常用到的注解与配置进行了说明。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="https://www.lixueduan.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://www.lixueduan.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring系列(一)---Spring IoC 分析</title>
    <link href="https://www.lixueduan.com/posts/b93580d5.html"/>
    <id>https://www.lixueduan.com/posts/b93580d5.html</id>
    <published>2019-04-03T14:00:00.000Z</published>
    <updated>2019-04-18T13:40:38.862Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了 Spring 框架，通过代码演示详细讲述了 Spring IoC 的具体流程。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>Spring 是一个开源容器框架，可以接管 web 层，业务层，dao 层，持久层的组件，并且可以配置各种bean,和维护 bean 与 bean 之间的关系。其核心就是控制反转(IoC),和面向切面(AOP),简单的说就是一个分层的轻量级开源框架。 </p><h2 id="2-Spring-中的-IoC"><a href="#2-Spring-中的-IoC" class="headerlink" title="2. Spring 中的 IoC"></a>2. Spring 中的 IoC</h2><ul><li><p>IoC：(Inverse of Control )控制反转，容器主动将资源推送给它所管理的组件，组件所做的是选择一种合理的方式接受资源。</p><p>简单的理解：把创建对象和维护之间的关系的权利由程序中转移到Spring容器的配置文件中。</p></li><li><p>DI : (Dependency Injection) 依赖注入，IoC 的另一种表现方式，组件以一种预先定义好的方式来接受容器注入的资源。</p></li></ul><h2 id="3-IoC-例子"><a href="#3-IoC-例子" class="headerlink" title="3. IoC 例子"></a>3. IoC 例子</h2><h3 id="3-1-xml-配置文件方式"><a href="#3-1-xml-配置文件方式" class="headerlink" title="3.1 xml 配置文件方式"></a>3.1 xml 配置文件方式</h3><h4 id="1-准备-bean-对象"><a href="#1-准备-bean-对象" class="headerlink" title="1. 准备 bean 对象"></a>1. 准备 bean 对象</h4><p>先准备两个简单的实体类 Student 和 Book，需要提供Getter/Setter 和有参数无参构造方法等。</p><blockquote><p>Spring Bean是事物处理组件类和实体类（POJO）对象的总称，Spring Bean 被Spring IoC 容器初始化，装配和管理。 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusory</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/4/18 0018</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Book book;</span><br><span class="line">    <span class="comment">//省略Getter/Setter和构造方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusory</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/4/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="comment">//省略Getter/Setter和构造方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-将-Bean-类添加到-Spring-IoC-容器"><a href="#2-将-Bean-类添加到-Spring-IoC-容器" class="headerlink" title="2. 将 Bean 类添加到 Spring IoC 容器"></a>2. 将 Bean 类添加到 Spring IoC 容器</h4><p>将 Bean 类添加到 Spring IoC 容器有三种方式。</p><ul><li>一种方式是基于XML的配置文件；</li><li>一种方式是基于注解的配置；</li><li>一种方式是基于 Java 的配置。</li></ul><h5 id="1-Spring-Bean-类的配置项"><a href="#1-Spring-Bean-类的配置项" class="headerlink" title="1. Spring Bean 类的配置项"></a>1. Spring Bean 类的配置项</h5><p>Spring IoC 容器管理 Bean 时，需要了解 Bean 的类名、名称、依赖项、属性、生命周期及作用域等信息。为此，Spring IoC 提供了一系列配置项，用于 Bean 在 IoC 容器中的定义。</p><ul><li>① class</li></ul><p>该配置项是强制项，用于指定创建 Bean 实例的 Bean 类的路径。</p><ul><li>② name</li></ul><p>该配置项是强制项，用于指定 Bean 唯一的标识符，在基于 XML 的配置项中，可以使用 id和或 name 属性来指定 Bean 唯一标识符。</p><ul><li>③ scope</li></ul><p>该配置项是可选项，用于设定创建 Bean 对象的作用域。</p><ul><li>④ constructor-arg</li></ul><p>该配置项是可选项，用于指定通过构造函数注入依赖数据到 Bean。</p><ul><li>⑤ properties</li></ul><p>该配置项是可选项，用于指定通过 set 方法注入依赖数据到 Bean。</p><ul><li>⑥ autowiring mode</li></ul><p>该配置项是可选项，用于指定通过自动依赖方法注入依赖数据到 Bean。</p><ul><li>⑦ lazy-initialization mode</li></ul><p>该配置项是可选项，用于指定 IoC 容器延迟创建 Bean，在用户请求时创建 Bean，而不要在启动时就创建 Bean。</p><ul><li>⑧ initialization</li></ul><p>该配置项是可选项，用于指定 IoC 容器完成 Bean 必要的创建后，调用 Bean 类提供的回调方法对 Bean 实例进一步处理。</p><ul><li>⑨ destruction</li></ul><p>该配置项是可选项，用于指定 IoC 容器在销毁 Bean 时，调用 Bean 类提供的回调方法。</p><h5 id="2-Spring-xml-配置文件"><a href="#2-Spring-xml-配置文件" class="headerlink" title="2. Spring xml 配置文件"></a>2. Spring xml 配置文件</h5><p>下面主要介绍基于XML的配置方式，基于注解和基于Java的配置放在后面进行讨论，放在后面讨论的原因是一些其它重要的Spring概念还需要掌握。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- bean的配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"spring.Student"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"illusory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"23"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"book"</span> <span class="attr">ref</span>=<span class="string">"book"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"spring.Book"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"think in java"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"type"</span> <span class="attr">value</span>=<span class="string">"CS"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-注解方式"><a href="#3-2-注解方式" class="headerlink" title="3.2 注解方式"></a>3.2 注解方式</h3><p>使用注解需要在xml配置文件中开启组件扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"spring"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-定义-bean"><a href="#1-定义-bean" class="headerlink" title="1.定义 bean"></a>1.定义 bean</h4><p>定义一个 bean 实体类或组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(value = <span class="string">"book"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="comment">//省略Getter/Setter和构造方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-配置-bean"><a href="#2-配置-bean" class="headerlink" title="2. 配置 bean"></a>2. 配置 bean</h4><ul><li>基本配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(value = <span class="string">"book"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="comment">//省略Getter/Setter和构造方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>@Component(value = &quot;book&quot;)</code>相当于<code>&lt;bean id=&quot;book&quot; class=&quot;spring.Book&quot;&gt;</code><br><strong>Bean实例的名称默认是Bean类的首字母小写，其他部分不变</strong></p><ul><li>属性注入</li></ul><p><strong>普通类型注入</strong>:  <code>@Value(value = &quot;illusory&quot;)</code><br><strong>引用类型注入</strong>:  <code>@Autowired/@Resources(name=&quot;&quot;)</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(value = <span class="string">"student"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(value = <span class="string">"illusory"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value</span>(value = <span class="string">"23"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Book book;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(value = <span class="string">"book"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(value = <span class="string">"defaultType"</span>)</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="meta">@Value</span>(value = <span class="string">"defaultName"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-获取-bean"><a href="#3-获取-bean" class="headerlink" title="3. 获取 bean"></a>3. 获取 bean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 根据配置文件创建 IoC 容器</span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    <span class="comment">// 从容器中获取 bean 实例</span></span><br><span class="line">    Student student = (Student) ac.getBean(<span class="string">"student"</span>);</span><br><span class="line">    <span class="comment">// 使用bean</span></span><br><span class="line">    System.out.println(student.getName());</span><br><span class="line">    <span class="comment">//成功打印出 illusory</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-测试"><a href="#3-3-测试" class="headerlink" title="3.3 测试"></a>3.3 测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusory</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/4/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据配置文件创建 IoC 容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">// 从容器中获取 bean 实例 这里的名称就是配置文件中的id="student"</span></span><br><span class="line">        Student student = (Student) ac.getBean(<span class="string">"student"</span>);</span><br><span class="line">        <span class="comment">// 使用bean</span></span><br><span class="line">        System.out.println(student.getName());</span><br><span class="line">        <span class="comment">//成功打印出 illusory</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-简要分析"><a href="#4-简要分析" class="headerlink" title="4. 简要分析"></a>4. 简要分析</h2><h3 id="4-1-创建Spring-IoC-容器"><a href="#4-1-创建Spring-IoC-容器" class="headerlink" title="4.1 创建Spring IoC 容器"></a>4.1 创建Spring IoC 容器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext .xml"</span>)</span><br></pre></td></tr></table></figure><p>执行这句代码时 Spring 容器对象被创建，同时 <code>applicationContext .xml</code>中配置的 bean 就会被创建到内存中。</p><h3 id="4-2-Bean注入"><a href="#4-2-Bean注入" class="headerlink" title="4.2 Bean注入"></a>4.2 Bean注入</h3><p>Bean 注入的方式有两种；</p><ul><li>一种是<code>在XML中配置</code>，此时分别有<code>属性注入</code>、<code>构造函数注入</code>和<code>工厂方法注入</code>；</li><li>另一种则是使用<code>注解</code>的方式注入: <code>@Autowired</code>、<code>@Resource</code>、<code>@Required</code>。</li></ul><h4 id="1-在xml文件中配置依赖注入"><a href="#1-在xml文件中配置依赖注入" class="headerlink" title="1. 在xml文件中配置依赖注入"></a>1. 在xml文件中配置依赖注入</h4><ul><li>属性注入</li></ul><blockquote><p>属性注入即通过setXxx()方法注入Bean的属性值或依赖对象，属性注入要求Bean提供一个默认的构造函数，并为需要注入的属性提供对应的Setter方法。Spring先调用Bean的默认构造函数实例化Bean对象，然后通过反射的方式调用Setter方法注入属性值。</p></blockquote><p>由于属性注入方式具有可选择性和灵活性高的优点，因此属性注入是实际应用中最常采用的注入方式。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"spring.Book"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"think in java"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"type"</span> <span class="attr">value</span>=<span class="string">"CS"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>例子中的这个就是属性注入。</p><ul><li>构造方法注入</li></ul><blockquote><p> 使用构造函数注入的前提是 <strong>Bean必须提供带参数的构造函数</strong>。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"spring.Book"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"think in java"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"type"</span> <span class="attr">value</span>=<span class="string">"CS"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>工厂方法注入</li></ul><blockquote><p>有时候 bean 对象不能直接 new，只能通过工厂方法创建。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusory</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/4/18 0018</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//非静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">createBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Book book = <span class="keyword">new</span> Book();</span><br><span class="line">        book.setName(<span class="string">"图解HTTP"</span>);</span><br><span class="line">        book.setType(<span class="string">"HTTP"</span>);</span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Book <span class="title">createBookStatic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Book book = <span class="keyword">new</span> Book();</span><br><span class="line">        book.setName(<span class="string">"大话数据结构"</span>);</span><br><span class="line">        book.setType(<span class="string">"数据结构"</span>);</span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>非静态方法</strong>：必须实例化工厂类（factory-bean）后才能调用工厂方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bookFactory"</span> <span class="attr">class</span>=<span class="string">"spring.BookFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"spring.Book"</span> <span class="attr">factory-bean</span>=<span class="string">"bookFactory"</span> <span class="attr">factory-method</span>=<span class="string">"createBook"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>静态方法</strong>：不用实例化工厂类（factory-bean）后才能调用工厂方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"spring.Book"</span> <span class="attr">factory-method</span>=<span class="string">"createBookStatic"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-获取-bean-实例"><a href="#4-3-获取-bean-实例" class="headerlink" title="4.3 获取 bean 实例"></a>4.3 获取 bean 实例</h3><p>接着通过从 Spring 容器中根据名字获取对应的 bean 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student student = (Student) ac.getBean(<span class="string">"student"</span>);</span><br></pre></td></tr></table></figure><h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h2><h3 id="5-1-大致流程"><a href="#5-1-大致流程" class="headerlink" title="5.1 大致流程"></a>5.1 大致流程</h3><ul><li>1.<strong>定义bean</strong>：定义一个 bean 实体类或组件</li><li><p>2.<strong>配置 bean</strong> </p><ul><li><strong>基本配置</strong> xml 配置文件中注册这个 bean</li><li><strong>属性注入</strong> xml 配置文件中为这个 bean 注入属性 <ul><li><strong>XML中配置</strong> : <code>属性注入</code>、<code>构造方法注入</code>、<code>工厂方法注入</code></li><li><strong>注解方式</strong> : <code>@Autowired</code>、<code>@Resource</code>、<code>@Required</code></li></ul></li></ul></li><li><p>3.<strong>获取 bean 实例</strong>：根据 name(即配置文件中的 bean id) 从 Spring 容器中获取 bean 实例</p></li></ul><h3 id="5-2-具体代码"><a href="#5-2-具体代码" class="headerlink" title="5.2 具体代码"></a>5.2 具体代码</h3><h4 id="1-定义-bean-1"><a href="#1-定义-bean-1" class="headerlink" title="1. 定义 bean"></a>1. 定义 bean</h4><p>定义一个 bean 实体类或组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="comment">//省略Getter/Setter和构造方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-配置-bean-1"><a href="#2-配置-bean-1" class="headerlink" title="2. 配置 bean"></a>2. 配置 bean</h4><ul><li>基本配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"spring.Book"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>属性注入</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"spring.Book"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"think in java"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"type"</span> <span class="attr">value</span>=<span class="string">"CS"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-获取-bean-1"><a href="#3-获取-bean-1" class="headerlink" title="3. 获取 bean"></a>3. 获取 bean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据配置文件创建 IoC 容器</span></span><br><span class="line">       ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">       <span class="comment">// 从容器中获取 bean 实例</span></span><br><span class="line">       Student student = (Student) ac.getBean(<span class="string">"student"</span>);</span><br></pre></td></tr></table></figure><h2 id="6-参考"><a href="#6-参考" class="headerlink" title="6. 参考"></a>6. 参考</h2><p><code>https://blog.csdn.net/u010648555/article/details/76299467</code><br><code>https://www.cnblogs.com/_popc/p/3972212.html</code><br><code>https://www.cnblogs.com/wnlja/p/3907836.html</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了 Spring 框架，通过代码演示详细讲述了 Spring IoC 的具体流程。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="https://www.lixueduan.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://www.lixueduan.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC系列(一)---执行流程分析</title>
    <link href="https://www.lixueduan.com/posts/cf395c14.html"/>
    <id>https://www.lixueduan.com/posts/cf395c14.html</id>
    <published>2019-04-02T14:00:00.000Z</published>
    <updated>2019-04-17T14:01:40.677Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要通过源码详细分析了 SpringMVC 框架的执行流程，包括建立 url 和 controller 的关系，通过 url 找到具体的方法，通过反射执行 controller 中的方法等。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-Servlet-执行流程"><a href="#1-Servlet-执行流程" class="headerlink" title="1. Servlet 执行流程"></a>1. Servlet 执行流程</h2><p>传统servlet的执行过程分为如下几步：<br>1、浏览器向服务器发送请求<code>http://localhost:8080/demo/hello</code><br>2、服务器接受到请求，并从地址中得到项目名称<code>webproject</code><br>3、然后再从地址中找到名称<code>hello</code>，并与<code>webproject</code>下的<code>web.xml</code>文件进行匹配<br>4、在<code>web.xml</code>中找到一个<code>&lt;url-pattern&gt;hello&lt;/url-pattern&gt;</code>的标签，并且通过他找到<code>servlet-name</code>进而找到<code>&lt;servlet-class&gt;</code><br>5、再拿到<code>servlet-class</code>之后，这个服务器便知道了这个<code>servlet</code>的全类名，通过<code>反射</code>创建这个类的对象，并且调用<code>doGet/doPost</code>方法 </p><p>6、方法执行完毕，结果返回到浏览器。结束。</p><h2 id="2-SpringMVC-执行流程"><a href="#2-SpringMVC-执行流程" class="headerlink" title="2. SpringMVC 执行流程"></a>2. SpringMVC 执行流程</h2><p>SpringMVC 中也配置了一个 Servlet,配置的是 org.springframework.web.servlet.DispatcherServlet，所有的请求过来都会找这个 servlet  (前端控制器)，DispatcherServlet 继承了 HttpServlet。</p><h3 id="运行过程分析"><a href="#运行过程分析" class="headerlink" title="运行过程分析"></a>运行过程分析</h3><p>1、  用户发送请求至前端控制器<code>DispatcherServlet</code>。</p><p>2、  <code>DispatcherServlet</code>收到请求调用<code>HandlerMapping</code>处理器映射器。</p><p>3、  处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)<code>HandlerExcutorChain</code>并返回给 DispatcherServlet。</p><p>4、  <code>DispatcherServlet</code>调用<code>HandlerAdapter</code>处理器适配器。</p><p>5、  <code>HandlerAdapter</code>经过适配调用具体的处理器(就是我们写的 Controller )。</p><p>6、 <code>Controller</code>执行完成返回<code>ModelAndView</code>。</p><p>7、  <code>HandlerAdapter</code>将 Controller 执行结果<code>ModelAndView</code>返回给<code>DispatcherServlet</code>。</p><p>8、  <code>DispatcherServlet</code>将 ModelAndView 传给<code>ViewReslover</code>视图解析器。</p><p>9、  <code>ViewReslover</code>解析后返回具体<code>View</code>(这就是为什么<code>reurn &quot;index&quot;</code>会自动找到 index.html)</p><p>10、<code>DispatcherServle</code>t根据<code>View</code>进行渲染视图（即将模型数据填充至视图中）。</p><p>11、 DispatcherServlet响应用户。</p><h2 id="3-具体过程分析"><a href="#3-具体过程分析" class="headerlink" title="3. 具体过程分析"></a>3. 具体过程分析</h2><h3 id="1-建立-Map-lt-urls-Controller-gt-的关系"><a href="#1-建立-Map-lt-urls-Controller-gt-的关系" class="headerlink" title="1. 建立 Map&lt;urls,Controller&gt; 的关系"></a>1. 建立 Map&lt;urls,Controller&gt; 的关系</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>在容器初始化时会建立所有<code>url</code> 和 <code>controller</code>的对应关系,保存到<code>Map&lt;url,controller&gt;</code>中。</p><p><code>DispatcherServlet--&gt;initApplicationContext</code>初始化容器 建立<code>Map&lt;url,controller&gt;</code>关系的部分 </p><p>Tomcat启动时会通知 Spring 初始化容器(加载 bean 的定义信息和初始化所有单例 bean ),然后 SpringMVC 会遍历容器中的bean,获取每一个 Controller 中的所有方法访问的 url,然后将 url和 Controller 保存到一个 Map 中;</p><h3 id="2-根据访问url-找到对应-Controller-中处理请求的方法"><a href="#2-根据访问url-找到对应-Controller-中处理请求的方法" class="headerlink" title="2.根据访问url 找到对应 Controller 中处理请求的方法"></a>2.根据访问url 找到对应 Controller 中处理请求的方法</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p><code>DispatcherServlet--&gt;doDispatch()</code></p><p>有了前面的 Map 就可以根据 Request快速定位到 Controller,因为最终处理 Request 的是 Controller 中的方法,Map 中只保留了 url 和 Controller 中的对应关系,所以要根据 Request 的 url 进一步确认 Controller 中的 Method.</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>这一步工作的原理就是拼接 Controller 的 url(controller上@RequestMapping的值) 和方法的 url(method 上@RequestMapping的值),与 Request 的 url 进行匹配,找到匹配的那个方法;　　</p><h3 id="3-参数绑定"><a href="#3-参数绑定" class="headerlink" title="3. 参数绑定"></a>3. 参数绑定</h3><p>确定处理请求的 Method 后,接下来的任务就是参数绑定,把 Request 中参数绑定到方法的形式参数上,这一步是整个请求处理过程中最复杂的一个步骤。SpringMVC 提供了两种 Request 参数与方法形参的绑定方法:</p><h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><p>使用注解进行绑定,我们只要在方法参数前面声明 <code>@RequestParam(&quot;a&quot;)</code>,就可以将 <code>Request</code> 中参数 <code>a</code> 的值绑定到方法的该参数上。</p><h4 id="参数名称"><a href="#参数名称" class="headerlink" title="参数名称"></a>参数名称</h4><p>使用参数名称进行绑定的前提是必须要获取方法中参数的名称,Java 反射只提供了获取方法的参数的类型,并没有提供获取参数名称的方法。SpringMVC 解决这个问题的方法是用 asm 框架读取字节码文件,来获取方法的参数名称。asm 框架是一个字节码操作框架,关于a sm 更多介绍可以参考它的官网。</p><p>个人建议,使用注解来完成参数绑定,这样就可以省去 asm 框架的读取字节码的操作。</p><h2 id="4-源码分析"><a href="#4-源码分析" class="headerlink" title="4. 源码分析"></a>4. 源码分析</h2><h3 id="1-建立Map-lt-url-controller-gt-的关系"><a href="#1-建立Map-lt-url-controller-gt-的关系" class="headerlink" title="1. 建立Map&lt;url,controller&gt;的关系"></a>1. 建立Map&lt;url,controller&gt;的关系</h3><p>我们首先看第一个步骤,也就是建立<code>Map&lt;url,controller&gt;</code>关系的部分.第一部分的入口类<code>ApplicationObjectSupport</code>的<code>setApplicationContext</code>方法.<code>setApplicationContext</code>方法中核心部分就是初始化容器<code>initApplicationContext(context)</code>,子类<code>AbstractDetectingUrlHandlerMapping</code>实现了该方法,所以我们直接看子类中的初始化容器方法.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ApplicationObjectSupport类</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(@Nullable ApplicationContext context)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (context == <span class="keyword">null</span> &amp;&amp; !isContextRequired()) &#123;</span><br><span class="line"><span class="comment">// Reset internal context state.</span></span><br><span class="line"><span class="keyword">this</span>.applicationContext = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">this</span>.messageSourceAccessor = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.applicationContext == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// Initialize with passed-in context.</span></span><br><span class="line"><span class="keyword">if</span> (!requiredContextClass().isInstance(context)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(</span><br><span class="line"><span class="string">"Invalid application context: needs to be of type ["</span> + requiredContextClass().getName() + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.applicationContext = context;</span><br><span class="line"><span class="keyword">this</span>.messageSourceAccessor = <span class="keyword">new</span> MessageSourceAccessor(context);</span><br><span class="line">initApplicationContext(context);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Ignore reinitialization if same context passed in.</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.applicationContext != context) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(</span><br><span class="line"><span class="string">"Cannot reinitialize with different application context: current one is ["</span> +</span><br><span class="line"><span class="keyword">this</span>.applicationContext + <span class="string">"], passed-in one is ["</span> + context + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>initApplicationContext(context)</code>由子类<code>AbstractDetectingUrlHandlerMapping</code>实现,具体如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Calls the &#123;<span class="doctag">@link</span> #detectHandlers()&#125; method in addition to the</span></span><br><span class="line"><span class="comment"> * superclass's initialization.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initApplicationContext</span><span class="params">()</span> <span class="keyword">throws</span> ApplicationContextException </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.initApplicationContext();</span><br><span class="line">detectHandlers();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 建立当前ApplicationContext中的所有controller和url的对应关系</span></span><br><span class="line"><span class="comment"> * Register all handlers found in the current ApplicationContext.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The actual URL determination for a handler is up to the concrete</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #determineUrlsForHandler(String)&#125; implementation. A bean for</span></span><br><span class="line"><span class="comment"> * which no such URLs could be determined is simply not considered a handler.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> org.springframework.beans.BeansException if the handler couldn't be registered</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #determineUrlsForHandler(String)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">detectHandlers</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">ApplicationContext applicationContext = obtainApplicationContext();</span><br><span class="line">String[] beanNames = (<span class="keyword">this</span>.detectHandlersInAncestorContexts ?</span><br><span class="line">BeanFactoryUtils.beanNamesForTypeIncludingAncestors(applicationContext, Object.class) :</span><br><span class="line">applicationContext.getBeanNamesForType(Object.class));</span><br><span class="line">        <span class="comment">// 获取ApplicationContext容器中所有bean的Name</span></span><br><span class="line"><span class="comment">// Take any bean name that we can determine URLs for.</span></span><br><span class="line"><span class="comment">// 遍历beanNames,并找到这些bean对应的url</span></span><br><span class="line"><span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">     <span class="comment">// 找bean上的所有url(controller上的url+方法上的url),该方法由对应的子类实现</span></span><br><span class="line">String[] urls = determineUrlsForHandler(beanName);</span><br><span class="line"><span class="keyword">if</span> (!ObjectUtils.isEmpty(urls)) &#123;</span><br><span class="line"><span class="comment">// URL paths found: Let's consider it a handler.</span></span><br><span class="line"><span class="comment">// 保存urls和beanName的对应关系,put it to Map&lt;urls,beanName&gt;,该方法在父类AbstractUrlHandlerMapping中实现</span></span><br><span class="line">registerHandler(urls, beanName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((logger.isDebugEnabled() &amp;&amp; !getHandlerMap().isEmpty()) || logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Detected "</span> + getHandlerMap().size() + <span class="string">" mappings in "</span> + formatMappingName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;       </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Determine the URLs for the given handler bean.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName the name of the candidate bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the URLs determined for the bean, or an empty array if none</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/** 获取controller中所有方法的url,由子类实现,典型的模板模式 **/</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> String[] determineUrlsForHandler(String beanName);</span><br></pre></td></tr></table></figure></p><p><code>determineUrlsForHandler(String beanName)</code>方法的作用是获取每个<code>Controller</code>中的<code>url</code>,不同的子类有不同的实现,这是一个典型的模板设计模式.因为开发中我们用的最多的就是用注解来配置<code>Controller`</code>中的url<code>,</code>BeanNameUrlHandlerMapping<code>是</code>AbstractDetectingUrlHandlerMapping<code>的子类,我们看</code>BeanNameUrlHandlerMapping<code>是如何查</code>beanName<code>上所有映射的</code>url`.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanNameUrlHandlerMapping</span> <span class="keyword">extends</span> <span class="title">AbstractDetectingUrlHandlerMapping</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Checks name and aliases of the given bean for URLs, starting with "/".</span></span><br><span class="line"><span class="comment"> * 找出名字或者别名是以 / 开头的bean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> String[] determineUrlsForHandler(String beanName) &#123;</span><br><span class="line">List&lt;String&gt; urls = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (beanName.startsWith(<span class="string">"/"</span>)) &#123;</span><br><span class="line">urls.add(beanName);</span><br><span class="line">&#125;</span><br><span class="line">String[] aliases = obtainApplicationContext().getAliases(beanName);</span><br><span class="line"><span class="keyword">for</span> (String alias : aliases) &#123;</span><br><span class="line"><span class="keyword">if</span> (alias.startsWith(<span class="string">"/"</span>)) &#123;</span><br><span class="line">urls.add(alias);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> StringUtils.toStringArray(urls);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-根据访问url找到对应controller中处理请求的方法"><a href="#2-根据访问url找到对应controller中处理请求的方法" class="headerlink" title="2. 根据访问url找到对应controller中处理请求的方法"></a>2. 根据访问url找到对应controller中处理请求的方法</h3><p>下面我们开始分析第二个步骤,第二个步骤是由请求触发的,所以入口为<code>DispatcherServlet.DispatcherServlet</code>的核心方法为<code>doService()</code>,<code>doService()</code>中的核心逻辑由<code>doDispatch()</code>实现,我们查看<code>doDispatch()</code>的源代码.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Process the actual dispatching to the handler.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The handler will be obtained by applying the servlet's HandlerMappings in order.</span></span><br><span class="line"><span class="comment"> * The HandlerAdapter will be obtained by querying the servlet's installed HandlerAdapters</span></span><br><span class="line"><span class="comment"> * to find the first that supports the handler class.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;All HTTP methods are handled by this method. It's up to HandlerAdapters or handlers</span></span><br><span class="line"><span class="comment"> * themselves to decide which methods are acceptable.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request current HTTP request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response current HTTP response</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception in case of any kind of processing failure</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/** 中央控制器,控制请求的转发 **/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   HttpServletRequest processedRequest = request;</span><br><span class="line">   HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">   WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line">      Exception dispatchException = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 1.检查是否是文件上传的请求</span></span><br><span class="line">         processedRequest = checkMultipart(request);</span><br><span class="line">         multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Determine handler for the current request.</span></span><br><span class="line">         <span class="comment">// 2.取得处理当前请求的controller,这里也称为hanlder,处理器</span></span><br><span class="line">         <span class="comment">// 第一个步骤的意义就在这里体现了.这里并不是直接返回controller,</span></span><br><span class="line">         <span class="comment">// 而是返回的HandlerExecutionChain请求处理器链对象,</span></span><br><span class="line">         <span class="comment">// 该对象封装了handler和interceptors.</span></span><br><span class="line">         mappedHandler = getHandler(processedRequest);</span><br><span class="line">         <span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">            noHandlerFound(processedRequest, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Determine handler adapter for the current request.</span></span><br><span class="line">         <span class="comment">//3. 获取处理request的处理器适配器handler adapter </span></span><br><span class="line">         HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Process last-modified header, if supported by the handler.</span></span><br><span class="line">         <span class="comment">// 处理 last-modified 请求头</span></span><br><span class="line">         String method = request.getMethod();</span><br><span class="line">         <span class="keyword">boolean</span> isGet = <span class="string">"GET"</span>.equals(method);</span><br><span class="line">         <span class="keyword">if</span> (isGet || <span class="string">"HEAD"</span>.equals(method)) &#123;</span><br><span class="line">            <span class="keyword">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line"> <span class="comment">// 4.拦截器的预处理方法</span></span><br><span class="line">         <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Actually invoke the handler.</span></span><br><span class="line">          <span class="comment">// 5.实际的处理器处理请求,返回结果视图对象</span></span><br><span class="line">         mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line"> <span class="comment">// 结果视图对象的处理</span></span><br><span class="line">         applyDefaultViewName(processedRequest, mv);</span><br><span class="line">         <span class="comment">// 6.拦截器的后处理方法</span></span><br><span class="line">         mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">         dispatchException = ex;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">         <span class="comment">// As of 4.3, we're processing Errors thrown from handler methods as well,</span></span><br><span class="line">         <span class="comment">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class="line">         dispatchException = <span class="keyword">new</span> NestedServletException(<span class="string">"Handler dispatch failed"</span>, err);</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="comment">//将结果解析为ModelAndView</span></span><br><span class="line">      processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">      <span class="comment">// 请求成功响应之后的方法</span></span><br><span class="line">      triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">      triggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class="line">            <span class="keyword">new</span> NestedServletException(<span class="string">"Handler processing failed"</span>, err));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">         <span class="comment">// Instead of postHandle and afterCompletion</span></span><br><span class="line">         <span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">// Clean up any resources used by a multipart request.</span></span><br><span class="line">         <span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">            cleanupMultipart(processedRequest);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第2步:<code>getHandler(processedRequest)</code>方法实际上就是从<code>HandlerMapping</code>中找到<code>url</code>和<code>Controller</code>的对应关系.这也就是第一个步骤:建立<code>Map&lt;url,Controller&gt;</code>的意义.我们知道,最终处理<code>Request</code>的是<code>Controller</code>中的方法,我们现在只是知道了<code>Controller</code>,还要进一步确认<code>Controller</code>中处理<code>Request</code>的方法.由于下面的步骤和第三个步骤关系更加紧密,直接转到第三个步骤.</p><h3 id="3-反射调用处理请求的方法-返回结果视图"><a href="#3-反射调用处理请求的方法-返回结果视图" class="headerlink" title="3. 反射调用处理请求的方法,返回结果视图"></a>3. 反射调用处理请求的方法,返回结果视图</h3><p>上面的方法中,第2步其实就是从第一个步骤中的<code>Map&lt;urls,beanName&gt;</code>中取得<code>Controller</code>,然后经过拦截器的预处理方法,到最核心的部分–第5步调用<code>Controller</code>的方法处理请求.在第2步中我们可以知道处理<code>Request</code>的<code>Controller</code>,第5步就是要根据<code>url</code>确定<code>Controller</code>中处理请求的方法,然后通过反射获取该方法上的注解和参数,解析方法和参数上的注解,最后反射调用方法获取<code>ModelAndView</code>结果视图。</p><p>第5步调用的就是<code>RequestMappingHandlerAdapter</code>的<code>handle().handle()</code>中的核心逻辑由<code>invokeHandlerMethod(request, response, handler)</code>实现。</p><blockquote><p>handle().handle()–&gt;handleInternal(request, response, (HandlerMethod) handler)–&gt;invokeHandlerMethod(request, response, handlerMethod)</p></blockquote><p><code>RequestMappingHandlerAdapter类</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Invoke the &#123;<span class="doctag">@link</span> RequestMapping&#125; handler method preparing a &#123;<span class="doctag">@link</span> ModelAndView&#125;</span></span><br><span class="line"><span class="comment"> * if view resolution is required.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 4.2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #createInvocableHandlerMethod(HandlerMethod)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">invokeHandlerMethod</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">ServletWebRequest webRequest = <span class="keyword">new</span> ServletWebRequest(request, response);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);</span><br><span class="line">ModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);</span><br><span class="line"><span class="comment">//创建invocableMetho</span></span><br><span class="line">ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.argumentResolvers != <span class="keyword">null</span>) &#123;</span><br><span class="line">invocableMethod.setHandlerMethodArgumentResolvers(<span class="keyword">this</span>.argumentResolvers);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.returnValueHandlers != <span class="keyword">null</span>) &#123;</span><br><span class="line">invocableMethod.setHandlerMethodReturnValueHandlers(<span class="keyword">this</span>.returnValueHandlers);</span><br><span class="line">&#125;</span><br><span class="line">invocableMethod.setDataBinderFactory(binderFactory);</span><br><span class="line">invocableMethod.setParameterNameDiscoverer(<span class="keyword">this</span>.parameterNameDiscoverer);</span><br><span class="line"></span><br><span class="line">ModelAndViewContainer mavContainer = <span class="keyword">new</span> ModelAndViewContainer();</span><br><span class="line">mavContainer.addAllAttributes(RequestContextUtils.getInputFlashMap(request));</span><br><span class="line">modelFactory.initModel(webRequest, mavContainer, invocableMethod);</span><br><span class="line">mavContainer.setIgnoreDefaultModelOnRedirect(<span class="keyword">this</span>.ignoreDefaultModelOnRedirect);</span><br><span class="line"></span><br><span class="line">AsyncWebRequest asyncWebRequest = WebAsyncUtils.createAsyncWebRequest(request, response);</span><br><span class="line">asyncWebRequest.setTimeout(<span class="keyword">this</span>.asyncRequestTimeout);</span><br><span class="line"></span><br><span class="line">WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">asyncManager.setTaskExecutor(<span class="keyword">this</span>.taskExecutor);</span><br><span class="line">asyncManager.setAsyncWebRequest(asyncWebRequest);</span><br><span class="line">asyncManager.registerCallableInterceptors(<span class="keyword">this</span>.callableInterceptors);</span><br><span class="line">asyncManager.registerDeferredResultInterceptors(<span class="keyword">this</span>.deferredResultInterceptors);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (asyncManager.hasConcurrentResult()) &#123;</span><br><span class="line">Object result = asyncManager.getConcurrentResult();</span><br><span class="line">mavContainer = (ModelAndViewContainer) asyncManager.getConcurrentResultContext()[<span class="number">0</span>];</span><br><span class="line">asyncManager.clearConcurrentResult();</span><br><span class="line">LogFormatUtils.traceDebug(logger, traceOn -&gt; &#123;</span><br><span class="line">String formatted = LogFormatUtils.formatValue(result, !traceOn);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Resume with async result ["</span> + formatted + <span class="string">"]"</span>;</span><br><span class="line">&#125;);</span><br><span class="line">invocableMethod = invocableMethod.wrapConcurrentResult(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行ServletInvocableHandlerMethod的invokeAndHandle方法</span></span><br><span class="line">invocableMethod.invokeAndHandle(webRequest, mavContainer);</span><br><span class="line"><span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 封装结果视图</span></span><br><span class="line"><span class="keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">webRequest.requestCompleted();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>invocableMethod.setHandlerMethodArgumentResolvers(this.argumentResolvers);</code>为参数绑定，后面说</p><p>其中<code>invokeAndHandle</code>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Invoke the method and handle the return value through one of the</span></span><br><span class="line"><span class="comment"> * configured &#123;<span class="doctag">@link</span> HandlerMethodReturnValueHandler HandlerMethodReturnValueHandlers&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> webRequest the current request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mavContainer the ModelAndViewContainer for this request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> providedArgs "given" arguments matched by type (not resolved)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invokeAndHandle</span><span class="params">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">Object... providedArgs)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//执行请求对应的方法，并获得返回值</span></span><br><span class="line">Object returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);</span><br><span class="line">setResponseStatus(webRequest);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (returnValue == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (isRequestNotModified(webRequest) || getResponseStatus() != <span class="keyword">null</span> || mavContainer.isRequestHandled()) &#123;</span><br><span class="line">mavContainer.setRequestHandled(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (StringUtils.hasText(getResponseStatusReason())) &#123;</span><br><span class="line">mavContainer.setRequestHandled(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mavContainer.setRequestHandled(<span class="keyword">false</span>);</span><br><span class="line">Assert.state(<span class="keyword">this</span>.returnValueHandlers != <span class="keyword">null</span>, <span class="string">"No return value handlers"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.returnValueHandlers.handleReturnValue(</span><br><span class="line">returnValue, getReturnValueType(returnValue), mavContainer, webRequest);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(formatErrorForReturnValue(returnValue), ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>invokeForRequest</code>中的操作也是比较简单的，首先获取<code>request</code>中的参数，然后调用<code>doInvoke(args)</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invokeForRequest</span><span class="params">(NativeWebRequest request, @Nullable ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">Object... providedArgs)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//首先会获取请求的参数，其实就是Controller方法中的参数</span></span><br><span class="line">Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Arguments: "</span> + Arrays.toString(args));</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//调用Controller中的方法</span></span><br><span class="line"><span class="keyword">return</span> doInvoke(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>doInvoke</code>方法是在<code>InvocableHandlerMethod`</code>类中，最重要的是调用getBridgedMethod().invoke(getBean(),args)<code>，通过反射机制完成对</code>Controller`中的函数的调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//InvocableHandlerMethod类</span></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Invoke the handler method with the given argument values.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">doInvoke</span><span class="params">(Object... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//反射之前 取消Java的权限控制检查</span></span><br><span class="line">ReflectionUtils.makeAccessible(getBridgedMethod());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//通过执行controller中的方法</span></span><br><span class="line"><span class="keyword">return</span> getBridgedMethod().invoke(getBean(), args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class="line">assertTargetBean(getBridgedMethod(), getBean(), args);</span><br><span class="line">String text = (ex.getMessage() != <span class="keyword">null</span> ? ex.getMessage() : <span class="string">"Illegal argument"</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(formatInvokeError(text, args), ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line"><span class="comment">// Unwrap for HandlerExceptionResolvers ...</span></span><br><span class="line">Throwable targetException = ex.getTargetException();</span><br><span class="line"><span class="keyword">if</span> (targetException <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line"><span class="keyword">throw</span> (RuntimeException) targetException;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (targetException <span class="keyword">instanceof</span> Error) &#123;</span><br><span class="line"><span class="keyword">throw</span> (Error) targetException;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (targetException <span class="keyword">instanceof</span> Exception) &#123;</span><br><span class="line"><span class="keyword">throw</span> (Exception) targetException;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(formatInvokeError(<span class="string">"Invocation failure"</span>, args), targetException);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <strong>注</strong>：桥接方法是 JDK 1.5 引入泛型后，为了使Java的泛型方法生成的字节码和 1.5 版本前的字节码相兼容，由编译器自动生成的方法。</p><p>反正最终就是通过反射来调用<code>Controller</code>中的方法。</p><h3 id="4-参数绑定"><a href="#4-参数绑定" class="headerlink" title="4. 参数绑定"></a>4. 参数绑定</h3><p>resolveHandlerArguments方法实现代码比较长,它最终要实现的目的就是:完成request中的参数和方法参数上数据的绑定.</p><p>springmvc中提供两种request参数到方法中参数的绑定方式:</p><h4 id="注解-1"><a href="#注解-1" class="headerlink" title="注解"></a>注解</h4><p>使用注解进行绑定,我们只要在方法参数前面声明 <code>@RequestParam(&quot;a&quot;)</code>,就可以将 <code>Request</code> 中参数 <code>a</code> 的值绑定到方法的该参数上。</p><h4 id="参数名称-1"><a href="#参数名称-1" class="headerlink" title="参数名称"></a>参数名称</h4><p>使用参数名称进行绑定的前提是必须要获取方法中参数的名称,Java 反射只提供了获取方法的参数的类型,并没有提供获取参数名称的方法。SpringMVC 解决这个问题的方法是用 asm 框架读取字节码文件,来获取方法的参数名称。asm 框架是一个字节码操作框架,关于a sm 更多介绍可以参考它的官网。</p><p>个人建议,使用注解来完成参数绑定,这样就可以省去 asm 框架的读取字节码的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Object[] resolveHandlerArguments(Method handlerMethod, Object handler,</span><br><span class="line">            NativeWebRequest webRequest, ExtendedModelMap implicitModel) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">　　　　 <span class="comment">// 1.获取方法参数类型的数组</span></span><br><span class="line">        Class[] paramTypes = handlerMethod.getParameterTypes();</span><br><span class="line">　　　　<span class="comment">// 声明数组,存参数的值</span></span><br><span class="line">        Object[] args = <span class="keyword">new</span> Object[paramTypes.length];</span><br><span class="line">　　　　<span class="comment">//2.遍历参数数组,获取每个参数的值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            MethodParameter methodParam = <span class="keyword">new</span> MethodParameter(handlerMethod, i);</span><br><span class="line">            methodParam.initParameterNameDiscovery(<span class="keyword">this</span>.parameterNameDiscoverer);</span><br><span class="line">            GenericTypeResolver.resolveParameterType(methodParam, handler.getClass());</span><br><span class="line">            String paramName = <span class="keyword">null</span>;</span><br><span class="line">            String headerName = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">boolean</span> requestBodyFound = <span class="keyword">false</span>;</span><br><span class="line">            String cookieName = <span class="keyword">null</span>;</span><br><span class="line">            String pathVarName = <span class="keyword">null</span>;</span><br><span class="line">            String attrName = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">boolean</span> required = <span class="keyword">false</span>;</span><br><span class="line">            String defaultValue = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">boolean</span> validate = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">int</span> annotationsFound = <span class="number">0</span>;</span><br><span class="line">            Annotation[] paramAnns = methodParam.getParameterAnnotations();</span><br><span class="line">　　　　　　 <span class="comment">// 处理参数上的注解</span></span><br><span class="line">            <span class="keyword">for</span> (Annotation paramAnn : paramAnns) &#123;</span><br><span class="line">                <span class="keyword">if</span> (RequestParam.class.isInstance(paramAnn)) &#123;</span><br><span class="line">                    RequestParam requestParam = (RequestParam) paramAnn;</span><br><span class="line">                    paramName = requestParam.value();</span><br><span class="line">                    required = requestParam.required();</span><br><span class="line">                    defaultValue = parseDefaultValueAttribute(requestParam.defaultValue());</span><br><span class="line">                    annotationsFound++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (RequestHeader.class.isInstance(paramAnn)) &#123;</span><br><span class="line">                    RequestHeader requestHeader = (RequestHeader) paramAnn;</span><br><span class="line">                    headerName = requestHeader.value();</span><br><span class="line">                    required = requestHeader.required();</span><br><span class="line">                    defaultValue = parseDefaultValueAttribute(requestHeader.defaultValue());</span><br><span class="line">                    annotationsFound++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (RequestBody.class.isInstance(paramAnn)) &#123;</span><br><span class="line">                    requestBodyFound = <span class="keyword">true</span>;</span><br><span class="line">                    annotationsFound++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (CookieValue.class.isInstance(paramAnn)) &#123;</span><br><span class="line">                    CookieValue cookieValue = (CookieValue) paramAnn;</span><br><span class="line">                    cookieName = cookieValue.value();</span><br><span class="line">                    required = cookieValue.required();</span><br><span class="line">                    defaultValue = parseDefaultValueAttribute(cookieValue.defaultValue());</span><br><span class="line">                    annotationsFound++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (PathVariable.class.isInstance(paramAnn)) &#123;</span><br><span class="line">                    PathVariable pathVar = (PathVariable) paramAnn;</span><br><span class="line">                    pathVarName = pathVar.value();</span><br><span class="line">                    annotationsFound++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ModelAttribute.class.isInstance(paramAnn)) &#123;</span><br><span class="line">                    ModelAttribute attr = (ModelAttribute) paramAnn;</span><br><span class="line">                    attrName = attr.value();</span><br><span class="line">                    annotationsFound++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (Value.class.isInstance(paramAnn)) &#123;</span><br><span class="line">                    defaultValue = ((Value) paramAnn).value();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"Valid"</span>.equals(paramAnn.annotationType().getSimpleName())) &#123;</span><br><span class="line">                    validate = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">　　</span><br><span class="line">            <span class="keyword">if</span> (annotationsFound &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Handler parameter annotations are exclusive choices - "</span> +</span><br><span class="line">                        <span class="string">"do not specify more than one such annotation on the same parameter: "</span> + handlerMethod);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (annotationsFound == <span class="number">0</span>) &#123;<span class="comment">// 如果没有注解</span></span><br><span class="line">                Object argValue = resolveCommonArgument(methodParam, webRequest);</span><br><span class="line">                <span class="keyword">if</span> (argValue != WebArgumentResolver.UNRESOLVED) &#123;</span><br><span class="line">                    args[i] = argValue;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (defaultValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    args[i] = resolveDefaultValue(defaultValue);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    Class paramType = methodParam.getParameterType();</span><br><span class="line">　　　　　　　　　　  <span class="comment">// 将方法声明中的Map和Model参数,放到request中,用于将数据放到request中带回页面</span></span><br><span class="line">                    <span class="keyword">if</span> (Model.class.isAssignableFrom(paramType) || Map.class.isAssignableFrom(paramType)) &#123;</span><br><span class="line">                        args[i] = implicitModel;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (SessionStatus.class.isAssignableFrom(paramType)) &#123;</span><br><span class="line">                        args[i] = <span class="keyword">this</span>.sessionStatus;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (HttpEntity.class.isAssignableFrom(paramType)) &#123;</span><br><span class="line">                        args[i] = resolveHttpEntityRequest(methodParam, webRequest);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (Errors.class.isAssignableFrom(paramType)) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Errors/BindingResult argument declared "</span> +</span><br><span class="line">                                <span class="string">"without preceding model attribute. Check your handler method signature!"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (BeanUtils.isSimpleProperty(paramType)) &#123;</span><br><span class="line">                        paramName = <span class="string">""</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        attrName = <span class="string">""</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">　　　　　　　<span class="comment">// 从request中取值,并进行赋值操作</span></span><br><span class="line">            <span class="keyword">if</span> (paramName != <span class="keyword">null</span>) &#123;</span><br><span class="line">　　　　　　　　　<span class="comment">// 根据paramName从request中取值,如果没有通过RequestParam注解指定paramName,则使用asm读取class文件来获取paramName</span></span><br><span class="line">                args[i] = resolveRequestParam(paramName, required, defaultValue, methodParam, webRequest, handler);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (headerName != <span class="keyword">null</span>) &#123;</span><br><span class="line">                args[i] = resolveRequestHeader(headerName, required, defaultValue, methodParam, webRequest, handler);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (requestBodyFound) &#123;</span><br><span class="line">                args[i] = resolveRequestBody(methodParam, webRequest, handler);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cookieName != <span class="keyword">null</span>) &#123;</span><br><span class="line">                args[i] = resolveCookieValue(cookieName, required, defaultValue, methodParam, webRequest, handler);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (pathVarName != <span class="keyword">null</span>) &#123;</span><br><span class="line">                args[i] = resolvePathVariable(pathVarName, methodParam, webRequest, handler);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (attrName != <span class="keyword">null</span>) &#123;</span><br><span class="line">                WebDataBinder binder =</span><br><span class="line">                        resolveModelAttribute(attrName, methodParam, implicitModel, webRequest, handler);</span><br><span class="line">                <span class="keyword">boolean</span> assignBindingResult = (args.length &gt; i + <span class="number">1</span> &amp;&amp; Errors.class.isAssignableFrom(paramTypes[i + <span class="number">1</span>]));</span><br><span class="line">                <span class="keyword">if</span> (binder.getTarget() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    doBind(binder, webRequest, validate, !assignBindingResult);</span><br><span class="line">                &#125;</span><br><span class="line">                args[i] = binder.getTarget();</span><br><span class="line">                <span class="keyword">if</span> (assignBindingResult) &#123;</span><br><span class="line">                    args[i + <span class="number">1</span>] = binder.getBindingResult();</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                implicitModel.putAll(binder.getBindingResult().getModel());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">　　　　 <span class="comment">// 返回参数值数组</span></span><br><span class="line">        <span class="keyword">return</span> args;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="5-反射源码分析"><a href="#5-反射源码分析" class="headerlink" title="5. 反射源码分析"></a>5. 反射源码分析</h3><p>反射相关分析来源于：<code>http://www.sczyh30.com/posts/Java/java-reflection-2/</code></p><p>第三步中的<code>invoke</code>方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object obj, Object... args)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IllegalAccessException, IllegalArgumentException,</span></span><br><span class="line"><span class="function">       InvocationTargetException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!override) &#123;</span><br><span class="line">    <span class="comment">//quickCheckMemberAccess 检查方法是否为public 如果是的话跳出本步</span></span><br><span class="line">        <span class="keyword">if</span> (!Reflection.quickCheckMemberAccess(clazz, modifiers)) &#123;</span><br><span class="line">        <span class="comment">//如果不是public方法，那么用Reflection.getCallerClass()方法获取调用这个方法的Class对象，这是一个native方法:</span></span><br><span class="line">            Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">            checkAccess(caller, clazz, obj, modifiers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    MethodAccessor ma = methodAccessor;             <span class="comment">// read volatile</span></span><br><span class="line">    <span class="keyword">if</span> (ma == <span class="keyword">null</span>) &#123;</span><br><span class="line">        ma = acquireMethodAccessor();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ma.invoke(obj, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getCallerClass()是一个native方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> Class&lt;?&gt; getCallerClass();</span><br></pre></td></tr></table></figure><p>在OpenJDK的源码中找到此方法的JNI入口(Reflection.c):</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JNIEXPORT jclass JNICALL Java_sun_reflect_Reflection_getCallerClass__</span><br><span class="line">(JNIEnv *env, jclass unused)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> JVM_GetCallerClass(env, JVM_CALLER_DEPTH);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取了这个Class对象caller后用checkAccess方法做一次快速的权限校验，其实现为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> Object securityCheckCache;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">checkAccess</span><span class="params">(Class&lt;?&gt; caller, Class&lt;?&gt; clazz, Object obj, <span class="keyword">int</span> modifiers)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IllegalAccessException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (caller == clazz) &#123;  <span class="comment">// 快速校验</span></span><br><span class="line">            <span class="keyword">return</span>;             <span class="comment">// 权限通过校验</span></span><br><span class="line">        &#125;</span><br><span class="line">        Object cache = securityCheckCache;  <span class="comment">// read volatile</span></span><br><span class="line">        Class&lt;?&gt; targetClass = clazz;</span><br><span class="line">        <span class="keyword">if</span> (obj != <span class="keyword">null</span></span><br><span class="line">            &amp;&amp; Modifier.isProtected(modifiers)</span><br><span class="line">            &amp;&amp; ((targetClass = obj.getClass()) != clazz)) &#123;</span><br><span class="line">            <span class="comment">// Must match a 2-list of &#123; caller, targetClass &#125;.</span></span><br><span class="line">            <span class="keyword">if</span> (cache <span class="keyword">instanceof</span> Class[]) &#123;</span><br><span class="line">                Class&lt;?&gt;[] cache2 = (Class&lt;?&gt;[]) cache;</span><br><span class="line">                <span class="keyword">if</span> (cache2[<span class="number">1</span>] == targetClass &amp;&amp;</span><br><span class="line">                    cache2[<span class="number">0</span>] == caller) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;     <span class="comment">// ACCESS IS OK</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// (Test cache[1] first since range check for [1]</span></span><br><span class="line">                <span class="comment">// subsumes range check for [0].)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cache == caller) &#123;</span><br><span class="line">            <span class="comment">// Non-protected case (or obj.class == this.clazz).</span></span><br><span class="line">            <span class="keyword">return</span>;             <span class="comment">// ACCESS IS OK</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If no return, fall through to the slow path.</span></span><br><span class="line">        slowCheckMemberAccess(caller, clazz, obj, modifiers, targetClass);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>首先先执行一次快速校验，一旦调用方法的Class正确则权限检查通过。<br>若未通过，则创建一个缓存，中间再进行一堆检查（比如检验是否为protected属性）。<br>如果上面的所有权限检查都未通过，那么将执行更详细的检查，其实现为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Keep all this slow stuff out of line:</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slowCheckMemberAccess</span><span class="params">(Class&lt;?&gt; caller, Class&lt;?&gt; clazz, Object obj, <span class="keyword">int</span> modifiers,</span></span></span><br><span class="line"><span class="function"><span class="params">                           Class&lt;?&gt; targetClass)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IllegalAccessException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Reflection.ensureMemberAccess(caller, clazz, obj, modifiers);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Success: Update the cache.</span></span><br><span class="line">    Object cache = ((targetClass == clazz)</span><br><span class="line">                    ? caller</span><br><span class="line">                    : <span class="keyword">new</span> Class&lt;?&gt;[] &#123; caller, targetClass &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Note:  The two cache elements are not volatile,</span></span><br><span class="line">    <span class="comment">// but they are effectively final.  The Java memory model</span></span><br><span class="line">    <span class="comment">// guarantees that the initializing stores for the cache</span></span><br><span class="line">    <span class="comment">// elements will occur before the volatile write.</span></span><br><span class="line">    securityCheckCache = cache;         <span class="comment">// write volatile</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大体意思就是，用Reflection.ensureMemberAccess方法继续检查权限，若检查通过就更新缓存，这样下一次同一个类调用同一个方法时就不用执行权限检查了，这是一种简单的缓存机制。由于JMM的happens-before规则能够保证缓存初始化能够在写缓存之前发生，因此两个cache不需要声明为volatile。<br>到这里，前期的权限检查工作就结束了。如果没有通过检查则会抛出异常，如果通过了检查则会到下一步。</p><h4 id="调用MethodAccessor的invoke方法"><a href="#调用MethodAccessor的invoke方法" class="headerlink" title="调用MethodAccessor的invoke方法"></a>调用MethodAccessor的invoke方法</h4><p>Method.invoke()实际上并不是自己实现的反射调用逻辑，而是委托给sun.reflect.MethodAccessor来处理。<br>首先要了解Method对象的基本构成，每个Java方法有且只有一个Method对象作为root，它相当于根对象，对用户不可见。当我们创建Method对象时，我们代码中获得的Method对象都相当于它的副本（或引用）。root对象持有一个MethodAccessor对象，所以所有获取到的Method对象都共享这一个MethodAccessor对象，因此必须保证它在内存中的可见性。root对象其声明及注释为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> MethodAccessor methodAccessor;</span><br><span class="line"><span class="comment">// For sharing of MethodAccessors. This branching structure is</span></span><br><span class="line"><span class="comment">// currently only two levels deep (i.e., one root Method and</span></span><br><span class="line"><span class="comment">// potentially many Method objects pointing to it.)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// If this branching structure would ever contain cycles, deadlocks can</span></span><br><span class="line"><span class="comment">// occur in annotation code.</span></span><br><span class="line"><span class="keyword">private</span> Method  root;</span><br></pre></td></tr></table></figure><p>那么MethodAccessor到底是个啥玩意呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** This interface provides the declaration for</span></span><br><span class="line"><span class="comment">    java.lang.reflect.Method.invoke(). Each Method object is</span></span><br><span class="line"><span class="comment">    configured with a (possibly dynamically-generated) class which</span></span><br><span class="line"><span class="comment">    implements this interface.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MethodAccessor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** Matches specification in &#123;<span class="doctag">@link</span> java.lang.reflect.Method&#125; */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object obj, Object[] args)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IllegalArgumentException, InvocationTargetException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到MethodAccessor是一个接口，定义了invoke方法。分析其Usage可得它的具体实现类有:</p><ul><li>sun.reflect.DelegatingMethodAccessorImpl</li><li>sun.reflect.MethodAccessorImpl</li><li>sun.reflect.NativeMethodAccessorImpl</li></ul><p>第一次调用一个Java方法对应的Method对象的invoke()方法之前，实现调用逻辑的MethodAccessor对象还没有创建；等第一次调用时才新创建MethodAccessor并更新给root，然后调用MethodAccessor.invoke()完成反射调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NOTE that there is no synchronization used here. It is correct</span></span><br><span class="line"><span class="comment">// (though not efficient) to generate more than one MethodAccessor</span></span><br><span class="line"><span class="comment">// for a given Method. However, avoiding synchronization will</span></span><br><span class="line"><span class="comment">// probably make the implementation more scalable.</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> MethodAccessor <span class="title">acquireMethodAccessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// First check to see if one has been created yet, and take it</span></span><br><span class="line">    <span class="comment">// if so</span></span><br><span class="line">    MethodAccessor tmp = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="keyword">null</span>) tmp = root.getMethodAccessor();</span><br><span class="line">    <span class="keyword">if</span> (tmp != <span class="keyword">null</span>) &#123;</span><br><span class="line">        methodAccessor = tmp;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Otherwise fabricate one and propagate it up to the root</span></span><br><span class="line">        tmp = reflectionFactory.newMethodAccessor(<span class="keyword">this</span>);</span><br><span class="line">        setMethodAccessor(tmp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到methodAccessor实例由reflectionFactory对象操控生成，它在AccessibleObject下的声明如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reflection factory used by subclasses for creating field,</span></span><br><span class="line"><span class="comment">// method, and constructor accessors. Note that this is called</span></span><br><span class="line"><span class="comment">// very early in the bootstrapping process.</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> ReflectionFactory reflectionFactory =</span><br><span class="line">    AccessController.doPrivileged(</span><br><span class="line">        <span class="keyword">new</span> sun.reflect.ReflectionFactory.GetReflectionFactoryAction());</span><br></pre></td></tr></table></figure><p>再研究一下sun.reflect.ReflectionFactory类的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> initted = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Permission reflectionFactoryAccessPerm</span><br><span class="line">        = <span class="keyword">new</span> RuntimePermission(<span class="string">"reflectionFactoryAccess"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ReflectionFactory soleInstance = <span class="keyword">new</span> ReflectionFactory();</span><br><span class="line">    <span class="comment">// Provides access to package-private mechanisms in java.lang.reflect</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> LangReflectAccess langReflectAccess;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里设计得非常巧妙</span></span><br><span class="line">    <span class="comment">// "Inflation" mechanism. Loading bytecodes to implement</span></span><br><span class="line">    <span class="comment">// Method.invoke() and Constructor.newInstance() currently costs</span></span><br><span class="line">    <span class="comment">// 3-4x more than an invocation via native code for the first</span></span><br><span class="line">    <span class="comment">// invocation (though subsequent invocations have been benchmarked</span></span><br><span class="line">    <span class="comment">// to be over 20x faster). Unfortunately this cost increases</span></span><br><span class="line">    <span class="comment">// startup time for certain applications that use reflection</span></span><br><span class="line">    <span class="comment">// intensively (but only once per class) to bootstrap themselves.</span></span><br><span class="line">    <span class="comment">// To avoid this penalty we reuse the existing JVM entry points</span></span><br><span class="line">    <span class="comment">// for the first few invocations of Methods and Constructors and</span></span><br><span class="line">    <span class="comment">// then switch to the bytecode-based implementations.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Package-private to be accessible to NativeMethodAccessorImpl</span></span><br><span class="line">    <span class="comment">// and NativeConstructorAccessorImpl</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> noInflation        = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>     inflationThreshold = <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这是生成MethodAccessor的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MethodAccessor <span class="title">newMethodAccessor</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">        checkInitted();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (noInflation &amp;&amp; !ReflectUtil.isVMAnonymousClass(method.getDeclaringClass())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MethodAccessorGenerator().</span><br><span class="line">                generateMethod(method.getDeclaringClass(),</span><br><span class="line">                               method.getName(),</span><br><span class="line">                               method.getParameterTypes(),</span><br><span class="line">                               method.getReturnType(),</span><br><span class="line">                               method.getExceptionTypes(),</span><br><span class="line">                               method.getModifiers());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            NativeMethodAccessorImpl acc =</span><br><span class="line">                <span class="keyword">new</span> NativeMethodAccessorImpl(method);</span><br><span class="line">            DelegatingMethodAccessorImpl res =</span><br><span class="line">                <span class="keyword">new</span> DelegatingMethodAccessorImpl(acc);</span><br><span class="line">            acc.setParent(res);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** We have to defer full initialization of this class until after</span></span><br><span class="line"><span class="comment">    the static initializer is run since java.lang.reflect.Method's</span></span><br><span class="line"><span class="comment">    static initializer (more properly, that for</span></span><br><span class="line"><span class="comment">    java.lang.reflect.AccessibleObject) causes this class's to be</span></span><br><span class="line"><span class="comment">    run, before the system properties are set up. */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkInitted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initted) <span class="keyword">return</span>;</span><br><span class="line">        AccessController.doPrivileged(</span><br><span class="line">            <span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="comment">// Tests to ensure the system properties table is fully</span></span><br><span class="line">                    <span class="comment">// initialized. This is needed because reflection code is</span></span><br><span class="line">                    <span class="comment">// called very early in the initialization process (before</span></span><br><span class="line">                    <span class="comment">// command-line arguments have been parsed and therefore</span></span><br><span class="line">                    <span class="comment">// these user-settable properties installed.) We assume that</span></span><br><span class="line">                    <span class="comment">// if System.out is non-null then the System class has been</span></span><br><span class="line">                    <span class="comment">// fully initialized and that the bulk of the startup code</span></span><br><span class="line">                    <span class="comment">// has been run.</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (System.out == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// java.lang.System not yet fully initialized</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    String val = System.getProperty(<span class="string">"sun.reflect.noInflation"</span>);</span><br><span class="line">                    <span class="keyword">if</span> (val != <span class="keyword">null</span> &amp;&amp; val.equals(<span class="string">"true"</span>)) &#123;</span><br><span class="line">                        noInflation = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    val = System.getProperty(<span class="string">"sun.reflect.inflationThreshold"</span>);</span><br><span class="line">                    <span class="keyword">if</span> (val != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            inflationThreshold = Integer.parseInt(val);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Unable to parse property sun.reflect.inflationThreshold"</span>, e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    initted = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察前面的声明部分的注释，我们可以发现一些有趣的东西。就像注释里说的，实际的MethodAccessor实现有两个版本，一个是Java版本，一个是native版本，两者各有特点。初次启动时Method.invoke()和Constructor.newInstance()方法采用native方法要比Java方法快3-4倍，而启动后native方法又要消耗额外的性能而慢于Java方法。也就是说，Java实现的版本在初始化时需要较多时间，但长久来说性能较好；native版本正好相反，启动时相对较快，但运行时间长了之后速度就比不过Java版了。这是HotSpot的优化方式带来的性能特性，同时也是许多虚拟机的共同点：跨越native边界会对优化有阻碍作用，它就像个黑箱一样让虚拟机难以分析也将其内联，于是运行时间长了之后反而是托管版本的代码更快些。</p><p>为了尽可能地减少性能损耗，HotSpot JDK采用“inflation”的技巧：让Java方法在被反射调用时，开头若干次使用native版，等反射调用次数超过阈值时则生成一个专用的MethodAccessor实现类，生成其中的invoke()方法的字节码，以后对该Java方法的反射调用就会使用Java版本。 这项优化是从JDK 1.4开始的。</p><p>研究ReflectionFactory.newMethodAccessor()生产MethodAccessor对象的逻辑，一开始(native版)会生产NativeMethodAccessorImpl和DelegatingMethodAccessorImpl两个对象。<br>DelegatingMethodAccessorImpl的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Delegates its invocation to another MethodAccessorImpl and can</span></span><br><span class="line"><span class="comment">    change its delegate at run time. */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DelegatingMethodAccessorImpl</span> <span class="keyword">extends</span> <span class="title">MethodAccessorImpl</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MethodAccessorImpl delegate;</span><br><span class="line"></span><br><span class="line">    DelegatingMethodAccessorImpl(MethodAccessorImpl delegate) &#123;</span><br><span class="line">        setDelegate(delegate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object obj, Object[] args)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IllegalArgumentException, InvocationTargetException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.invoke(obj, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDelegate</span><span class="params">(MethodAccessorImpl delegate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.delegate = delegate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它其实是一个中间层，方便在native版与Java版的MethodAccessor之间进行切换。<br>然后下面就是native版MethodAccessor的Java方面的声明：<br>sun.reflect.NativeMethodAccessorImpl：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Used only for the first few invocations of a Method; afterward,</span></span><br><span class="line"><span class="comment">    switches to bytecode-based implementation */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NativeMethodAccessorImpl</span> <span class="keyword">extends</span> <span class="title">MethodAccessorImpl</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Method method;</span><br><span class="line">    <span class="keyword">private</span> DelegatingMethodAccessorImpl parent;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> numInvocations;</span><br><span class="line"></span><br><span class="line">    NativeMethodAccessorImpl(Method method) &#123;</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object obj, Object[] args)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IllegalArgumentException, InvocationTargetException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// We can't inflate methods belonging to vm-anonymous classes because</span></span><br><span class="line">        <span class="comment">// that kind of class can't be referred to by name, hence can't be</span></span><br><span class="line">        <span class="comment">// found from the generated bytecode.</span></span><br><span class="line">        <span class="keyword">if</span> (++numInvocations &gt; ReflectionFactory.inflationThreshold()</span><br><span class="line">                &amp;&amp; !ReflectUtil.isVMAnonymousClass(method.getDeclaringClass())) &#123;</span><br><span class="line">            MethodAccessorImpl acc = (MethodAccessorImpl)</span><br><span class="line">                <span class="keyword">new</span> MethodAccessorGenerator().</span><br><span class="line">                    generateMethod(method.getDeclaringClass(),</span><br><span class="line">                                   method.getName(),</span><br><span class="line">                                   method.getParameterTypes(),</span><br><span class="line">                                   method.getReturnType(),</span><br><span class="line">                                   method.getExceptionTypes(),</span><br><span class="line">                                   method.getModifiers());</span><br><span class="line">            parent.setDelegate(acc);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> invoke0(method, obj, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setParent</span><span class="params">(DelegatingMethodAccessorImpl parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parent = parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> Object <span class="title">invoke0</span><span class="params">(Method m, Object obj, Object[] args)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次NativeMethodAccessorImpl.invoke()方法被调用时，程序调用计数器都会增加1，看看是否超过阈值；一旦超过，则调用MethodAccessorGenerator.generateMethod()来生成Java版的MethodAccessor的实现类，并且改变DelegatingMethodAccessorImpl所引用的MethodAccessor为Java版。后续经由DelegatingMethodAccessorImpl.invoke()调用到的就是Java版的实现了。<br>到这里，我们已经追寻到native版的invoke方法在Java一侧声明的最底层 - invoke0了，下面我们将深入到HotSpot JVM中去研究其具体实现。</p><h4 id="寻根溯源-在JVM层面探究invoke0方法"><a href="#寻根溯源-在JVM层面探究invoke0方法" class="headerlink" title="寻根溯源 - 在JVM层面探究invoke0方法"></a>寻根溯源 - 在JVM层面探究invoke0方法</h4><p>invoke0方法是一个native方法,它在HotSpot JVM里调用JVM_InvokeMethod函数:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JNIEXPORT jobject JNICALL Java_sun_reflect_NativeMethodAccessorImpl_invoke0</span><br><span class="line">(JNIEnv *env, jclass unused, jobject m, jobject obj, jobjectArray args)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> JVM_InvokeMethod(env, m, obj, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>openjdk/hotspot/src/share/vm/prims/jvm.cpp</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">JVM_ENTRY(jobject, JVM_InvokeMethod(JNIEnv *env, jobject method, jobject obj, jobjectArray args0))</span><br><span class="line">  JVMWrapper(<span class="string">"JVM_InvokeMethod"</span>);</span><br><span class="line">  Handle method_handle;</span><br><span class="line">  <span class="keyword">if</span> (thread-&gt;stack_available((address) &amp;method_handle) &gt;= JVMInvokeMethodSlack) &#123;</span><br><span class="line">    method_handle = Handle(THREAD, JNIHandles::resolve(method));</span><br><span class="line">    <span class="function">Handle <span class="title">receiver</span><span class="params">(THREAD, JNIHandles::resolve(obj))</span></span>;</span><br><span class="line">    <span class="function">objArrayHandle <span class="title">args</span><span class="params">(THREAD, objArrayOop(JNIHandles::resolve(args0)))</span></span>;</span><br><span class="line">    oop result = Reflection::invoke_method(method_handle(), receiver, args, CHECK_NULL);</span><br><span class="line">    jobject res = JNIHandles::make_local(env, result);</span><br><span class="line">    <span class="keyword">if</span> (JvmtiExport::should_post_vm_object_alloc()) &#123;</span><br><span class="line">      oop ret_type = java_lang_reflect_Method::return_type(method_handle());</span><br><span class="line">      assert(ret_type != <span class="literal">NULL</span>, <span class="string">"sanity check: ret_type oop must not be NULL!"</span>);</span><br><span class="line">      <span class="keyword">if</span> (java_lang_Class::is_primitive(ret_type)) &#123;</span><br><span class="line">        <span class="comment">// Only for primitive type vm allocates memory for java object.</span></span><br><span class="line">        <span class="comment">// See box() method.</span></span><br><span class="line">        JvmtiExport::post_vm_object_alloc(JavaThread::current(), result);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    THROW_0(vmSymbols::java_lang_StackOverflowError());</span><br><span class="line">  &#125;</span><br><span class="line">JVM_END</span><br></pre></td></tr></table></figure><p>其关键部分为Reflection::invoke_method:</p><ul><li>openjdk/hotspot/src/share/vm/runtime/reflection.cpp</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">oop Reflection::invoke_method(oop method_mirror, Handle receiver, objArrayHandle args, TRAPS) &#123;</span><br><span class="line">  oop mirror             = java_lang_reflect_Method::clazz(method_mirror);</span><br><span class="line">  <span class="keyword">int</span> slot               = java_lang_reflect_Method::slot(method_mirror);</span><br><span class="line">  <span class="keyword">bool</span> override          = java_lang_reflect_Method::override(method_mirror) != <span class="number">0</span>;</span><br><span class="line">  <span class="function">objArrayHandle <span class="title">ptypes</span><span class="params">(THREAD, objArrayOop(java_lang_reflect_Method::parameter_types(method_mirror)))</span></span>;</span><br><span class="line"></span><br><span class="line">  oop return_type_mirror = java_lang_reflect_Method::return_type(method_mirror);</span><br><span class="line">  BasicType rtype;</span><br><span class="line">  <span class="keyword">if</span> (java_lang_Class::is_primitive(return_type_mirror)) &#123;</span><br><span class="line">    rtype = basic_type_mirror_to_basic_type(return_type_mirror, CHECK_NULL);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    rtype = T_OBJECT;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">instanceKlassHandle <span class="title">klass</span><span class="params">(THREAD, java_lang_Class::as_Klass(mirror))</span></span>;</span><br><span class="line">  Method* m = klass-&gt;method_with_idnum(slot);</span><br><span class="line">  <span class="keyword">if</span> (m == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    THROW_MSG_0(vmSymbols::java_lang_InternalError(), <span class="string">"invoke"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">methodHandle <span class="title">method</span><span class="params">(THREAD, m)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> invoke(klass, method, receiver, override, ptypes, rtype, args, <span class="literal">true</span>, THREAD);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面又会涉及到Java的对象模型(klass和oop)，以后继续补充。笑容逐渐消失。</p><h4 id="寻根溯源-Java版的实现"><a href="#寻根溯源-Java版的实现" class="headerlink" title="寻根溯源 - Java版的实现"></a>寻根溯源 - Java版的实现</h4><p>Java版MethodAccessor的生成使用MethodAccessorGenerator实现，由于代码太长，这里就不贴代码了，只贴一下开头的注释：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Generator for sun.reflect.MethodAccessor and</span></span><br><span class="line"><span class="comment">    sun.reflect.ConstructorAccessor objects using bytecodes to</span></span><br><span class="line"><span class="comment">    implement reflection. A java.lang.reflect.Method or</span></span><br><span class="line"><span class="comment">    java.lang.reflect.Constructor object can delegate its invoke or</span></span><br><span class="line"><span class="comment">    newInstance method to an accessor using native code or to one</span></span><br><span class="line"><span class="comment">    generated by this class. (Methods and Constructors were merged</span></span><br><span class="line"><span class="comment">    together in this class to ensure maximum code sharing.) */</span></span><br></pre></td></tr></table></figure><p>这里又运用了asm动态生成字节码技术（sun.reflect.ClassFileAssembler)。</p><h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h2><p>大致流程如下：</p><ul><li>1.建立 Map&lt;url,comtroller&gt; 的关系</li><li>2.根据 url 找到具体的处理方法</li><li>3.通过反射调用 controller 中的方法</li><li>4.通过<code>注解</code>或<code>参数名称</code>实现参数绑定</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><code>https://www.cnblogs.com/heavenyes/p/3905844.html#t1</code></p><p><code>sczyh30: http://www.sczyh30.com/posts/Java/java-reflection-2/</code>　</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要通过源码详细分析了 SpringMVC 框架的执行流程，包括建立 url 和 controller 的关系，通过 url 找到具体的方法，通过反射执行 controller 中的方法等。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringMVC" scheme="https://www.lixueduan.com/categories/SpringMVC/"/>
    
    
      <category term="SpringMVC" scheme="https://www.lixueduan.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis系列(一)---SQL 执行流程分析</title>
    <link href="https://www.lixueduan.com/posts/aada1167.html"/>
    <id>https://www.lixueduan.com/posts/aada1167.html</id>
    <published>2019-03-30T14:00:00.000Z</published>
    <updated>2019-04-16T12:19:57.573Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要通过源码详细分析了 Mybatis 框架中 SQL 语句的执行流程，包括加载解析核心配置文件，创建SqlSessionFactory对象，创建SqlSession对象，执行 SQL 操作。</p><a id="more"></a><blockquote><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-Mybatis工作流程"><a href="#1-Mybatis工作流程" class="headerlink" title="1. Mybatis工作流程"></a>1. Mybatis工作流程</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h3><blockquote><p>1.读取mybatis全局配置文件：将定义好的mybatis全局配置文件进行读取，并包装成为一个InputStream对象<br>2.解析配置文件：由SqlSessionFactoryBuilder类的bulid方法驱动，对包装好的XML文件进行解析。很容易看到，其具体的解析任务是交给XMLConfigBuilder对象完成.<br>3.创建SqlSessionFactory对象<br>4.创建SqlSession的对象<br>5.执行SQL操作</p></blockquote><p>Mybatis底层自定义了Executor执行器接口操作数据库，Executor接口有两个实现，一个是基本执行器<code>BaseExecutor</code>、一个是缓存执行器<code>CachingExecutor</code>。<br>Mybatis底层封装了 Mapped Statement对象，它包装了mybatis配置信息及sql映射信息等。mapper.xml文件中一个sql对应一个Mapped Statement对象，sql的id即是Mapped statement的id。</p><p>Mapped Statement对sql执行输入参数进行定义，包括HashMap、基本类型、pojo，Executor通过 Mapped Statement在执行sql前将输入的java对象映射至sql中，<br>输入参数映射就是jdbc编程中对preparedStatement设置参数。<br>Mapped Statement对sql执行输出结果进行定义，包括HashMap、基本类型、pojo，Executor通过 Mapped Statement在执行sql后将输出结果映射至java对象中，<br>输出结果映射过程相当于jdbc编程中对结果的解析处理过程。</p><h3 id="1-2-实例代码"><a href="#1-2-实例代码" class="headerlink" title="1.2 实例代码"></a>1.2 实例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMybaits</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1. mybatis核心配置文件 以流的形式加载进来</span></span><br><span class="line">    String resources = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">    InputStream resourceAsStream = Resources.getResourceAsStream(resources);</span><br><span class="line">    <span class="comment">// 2. 解析配置文件 根据配置文件创建SqlSessionFactory</span></span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">    <span class="comment">// 3. 用SqlSessionFactory创建SqlSession</span></span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">     <span class="comment">// 直接执行SQL操作或者获取mapper对象都在操作</span></span><br><span class="line">     User user = sqlSession.selectOne(<span class="string">"com.illusory.i.shiro.mapper.UserMapper.findUserByName"</span>, <span class="string">"张三"</span>);</span><br><span class="line">     System.out.println(user);</span><br><span class="line">    <span class="comment">// 4. SqlSession获取mapper</span></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">// 5. 执行CRUD操作</span></span><br><span class="line">      User userByName = mapper.findUserByName(<span class="string">"username"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-原理分析"><a href="#2-原理分析" class="headerlink" title="2.原理分析"></a>2.原理分析</h2><h3 id="2-1-读取mybatis全局配置文件"><a href="#2-1-读取mybatis全局配置文件" class="headerlink" title="2.1 读取mybatis全局配置文件"></a>2.1 读取mybatis全局配置文件</h3><blockquote><p>将定义好的mybatis全局配置文件进行读取，并包装称为一个InputStream对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. mybatis核心配置文件 以流的形式加载进来</span></span><br><span class="line">String resources = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">InputStream resourceAsStream = Resources.getResourceAsStream(resources);</span><br></pre></td></tr></table></figure><p><code>Resources.class</code>是 Mybatis 提供的一个加载资源文件的工具类。</p><ul><li>getResourceAsStream(String resource)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Resources类</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   * Returns a resource on the classpath as a Stream object</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @param resource The resource to find</span></span><br><span class="line"><span class="comment">   * @return The resource</span></span><br><span class="line"><span class="comment">   * @throws java.io.IOException If the resource cannot be found or read</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InputStream <span class="title">getResourceAsStream</span><span class="params">(String resource)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getResourceAsStream(<span class="keyword">null</span>, resource);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>getResourceAsStream()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Returns a resource on the classpath as a Stream object</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param loader   The classloader used to fetch the resource</span></span><br><span class="line"><span class="comment"> * @param resource The resource to find</span></span><br><span class="line"><span class="comment"> * @return The resource</span></span><br><span class="line"><span class="comment"> * @throws java.io.IOException If the resource cannot be found or read</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InputStream <span class="title">getResourceAsStream</span><span class="params">(ClassLoader loader, String resource)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  InputStream in = classLoaderWrapper.getResourceAsStream(resource, loader);</span><br><span class="line">  <span class="keyword">if</span> (in == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Could not find resource "</span> + resource);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 获取到自身的 ClassLoader 对象，然后交给 ClassLoade r(lang包下的)来加载:</p></blockquote><ul><li>getResourceAsStream()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ClassLoaderWrapper </span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   * Get a resource from the classpath, starting with a specific class loader</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @param resource    - the resource to find</span></span><br><span class="line"><span class="comment">   * @param classLoader - the first class loader to try</span></span><br><span class="line"><span class="comment">   * @return the stream or null</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> InputStream <span class="title">getResourceAsStream</span><span class="params">(String resource, ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getResourceAsStream(resource, getClassLoaders(classLoader));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Try to get a resource from a group of classloaders</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param resource    - the resource to get</span></span><br><span class="line"><span class="comment">     * @param classLoader - the classloaders to examine</span></span><br><span class="line"><span class="comment">     * @return the resource or null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">InputStream <span class="title">getResourceAsStream</span><span class="params">(String resource, ClassLoader[] classLoader)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (ClassLoader cl : classLoader) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != cl) &#123;</span><br><span class="line">  </span><br><span class="line">          <span class="comment">// try to find the resource as passed</span></span><br><span class="line">          InputStream returnValue = cl.getResourceAsStream(resource);</span><br><span class="line">  </span><br><span class="line">          <span class="comment">// now, some class loaders want this leading "/", so we'll add it and try again if we didn't find the resource</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">null</span> == returnValue) &#123;</span><br><span class="line">            returnValue = cl.getResourceAsStream(<span class="string">"/"</span> + resource);</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">null</span> != returnValue) &#123;</span><br><span class="line">            <span class="keyword">return</span> returnValue;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>值的注意的是，它返回了一个InputStream对象。</p></blockquote><h3 id="2-2-解析配置文件"><a href="#2-2-解析配置文件" class="headerlink" title="2.2 解析配置文件"></a>2.2 解析配置文件</h3><blockquote><p>由SqlSessionFactoryBuilder类的bulid方法驱动，对包装好的XML文件进行解析。很容易看到，其具体的解析任务是交给XMLConfigBuilder对象完成.</p></blockquote><ul><li>SqlSessionFactory.build()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(InputStream inputStream)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> build(inputStream, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SqlSessionFactoryBuilder.build()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(InputStream inputStream, String environment, Properties properties)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    XMLConfigBuilder parser = <span class="keyword">new</span> XMLConfigBuilder(inputStream, environment, properties);</span><br><span class="line">    <span class="keyword">return</span> build(parser.parse());</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">"Error building SqlSession."</span>, e);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    ErrorContext.instance().reset();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      inputStream.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      <span class="comment">// Intentionally ignore. Prefer previous error.</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先通过 Document 对象来解析，然后返回 InputStream 对象，然后交给 XMLConfigBuilder 构造成org.apache.ibatis.session.Configuration 对象，</p><h3 id="2-3-创建方法构造成SqlSessionFactory对象"><a href="#2-3-创建方法构造成SqlSessionFactory对象" class="headerlink" title="2.3 创建方法构造成SqlSessionFactory对象"></a>2.3 创建方法构造成SqlSessionFactory对象</h3><p>将前面解析配置文件构造出来的Configuration对象交给SqlSessionFactoryBuilder.build()方法构造成SqlSessionFactory。</p><ul><li>build方法如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(Configuration config)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> DefaultSqlSessionFactory(config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终返回的是DefaultSqlSessionFactory对象</p><h3 id="2-4-创建SqlSession"><a href="#2-4-创建SqlSession" class="headerlink" title="2.4 创建SqlSession"></a>2.4 创建SqlSession</h3><p>SqlSession 完全包含了面向数据库执行 SQL 命令所需的所有方法。你可以通过 SqlSession 实例来直接执行已映射的 SQL 语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. 用SqlSessionFactory创建SqlSession</span></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br></pre></td></tr></table></figure><ul><li>DefaultSqlSessionFactory.openSession()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SqlSession <span class="title">openSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> openSessionFromDataSource(configuration.getDefaultExecutorType(), <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终也是返回的一个DefaultSqlSession对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> SqlSession <span class="title">openSessionFromDataSource</span><span class="params">(ExecutorType execType, TransactionIsolationLevel level, <span class="keyword">boolean</span> autoCommit)</span> </span>&#123;</span><br><span class="line">  Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//根据Configuration的Environment属性来创建事务工厂</span></span><br><span class="line">    <span class="keyword">final</span> Environment environment = configuration.getEnvironment();</span><br><span class="line">    <span class="keyword">final</span> TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);</span><br><span class="line">    <span class="comment">//通过事务工厂创建事务，默认level=null autoCommit=false</span></span><br><span class="line">    tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);</span><br><span class="line">    <span class="comment">//创建执行器 真正执行sql语句的对象</span></span><br><span class="line">    <span class="keyword">final</span> Executor executor = configuration.newExecutor(tx, execType);</span><br><span class="line">    <span class="comment">//根据执行器返回对象 SqlSess</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DefaultSqlSession(configuration, executor, autoCommit);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    closeTransaction(tx); <span class="comment">// may have fetched a connection so lets call close()</span></span><br><span class="line">    <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">"Error opening session.  Cause: "</span> + e, e);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    ErrorContext.instance().reset();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>构建步骤：</p><blockquote><p> Environment–&gt;TransactionFactory+autoCommit+tx-level–&gt;Transaction+ExecType–&gt;Executor+Configuration+autoCommit–&gt;SqlSession</p></blockquote><p>其中，Environment是Configuration中的属性。</p><h3 id="2-5-执行SQL操作"><a href="#2-5-执行SQL操作" class="headerlink" title="2.5 执行SQL操作"></a>2.5 执行SQL操作</h3><p>SQL语句的执行才是MyBatis的重要职责，该过程就是通过封装JDBC进行操作，然后使用Java反射技术完成JavaBean对象到数据库参数之间的相互转换，<br>这种映射关系就是有TypeHandler对象来完成的，在获取数据表对应的元数据时，会保存该表所有列的数据库类型，大致逻辑如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User user = sqlSession.selectOne(<span class="string">"com.illusory.i.shiro.mapper.UserMapper.findUserByName"</span>, <span class="string">"张三"</span>);</span><br><span class="line">      System.out.println(user);</span><br></pre></td></tr></table></figure><p>调用selectOne方法进行SQL查询，selectOne方法最后调用的是selectList，在selectList中，会查询<br>configuration中存储的MappedStatement对象，mapper文件中一个sql语句的配置对应一个MappedStatement对象，然后调用执行器进行查询操作。</p><ul><li>DefaultSqlSession.selectOne();</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">selectOne</span><span class="params">(String statement, Object parameter)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Popular vote was to return null on 0 results and throw exception on too many.</span></span><br><span class="line">  List&lt;T&gt; list = <span class="keyword">this</span>.&lt;T&gt;selectList(statement, parameter);</span><br><span class="line">  <span class="keyword">if</span> (list.size() == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (list.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> TooManyResultsException(<span class="string">"Expected one result (or null) to be returned by selectOne(), but found: "</span> + list.size());</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>DefaultSqlSession.selectList();</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement, Object parameter)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.selectList(statement, parameter, RowBounds.DEFAULT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement, Object parameter, RowBounds rowBounds)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    MappedStatement ms = configuration.getMappedStatement(statement);</span><br><span class="line">    <span class="keyword">return</span> executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">"Error querying database.  Cause: "</span> + e, e);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    ErrorContext.instance().reset();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行器在query操作中，优先会查询缓存是否命中，命中则直接返回，否则从数据库中查询。</p><ul><li>CachingExecutor.query()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  BoundSql boundSql = ms.getBoundSql(parameterObject);</span><br><span class="line">  CacheKey key = createCacheKey(ms, parameterObject, rowBounds, boundSql);</span><br><span class="line">  <span class="keyword">return</span> query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span></span></span><br><span class="line"><span class="function">     <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">   Cache cache = ms.getCache();</span><br><span class="line">   <span class="keyword">if</span> (cache != <span class="keyword">null</span>) &#123;</span><br><span class="line">     flushCacheIfRequired(ms);</span><br><span class="line">     <span class="keyword">if</span> (ms.isUseCache() &amp;&amp; resultHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">       ensureNoOutParams(ms, boundSql);</span><br><span class="line">       <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">       List&lt;E&gt; list = (List&lt;E&gt;) tcm.getObject(cache, key);</span><br><span class="line">       <span class="keyword">if</span> (list == <span class="keyword">null</span>) &#123;</span><br><span class="line">         list = delegate.&lt;E&gt; query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">         tcm.putObject(cache, key, list); <span class="comment">// issue #578 and #116</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> list;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//BaseExecutor.query()</span></span><br><span class="line">   <span class="keyword">return</span> delegate.&lt;E&gt; query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>BaseExecutor.query()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">   ErrorContext.instance().resource(ms.getResource()).activity(<span class="string">"executing a query"</span>).object(ms.getId());</span><br><span class="line">   <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> ExecutorException(<span class="string">"Executor was closed."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (queryStack == <span class="number">0</span> &amp;&amp; ms.isFlushCacheRequired()) &#123;</span><br><span class="line">     clearLocalCache();</span><br><span class="line">   &#125;</span><br><span class="line">   List&lt;E&gt; list;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">     queryStack++;</span><br><span class="line">     list = resultHandler == <span class="keyword">null</span> ? (List&lt;E&gt;) localCache.getObject(key) : <span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">if</span> (list != <span class="keyword">null</span>) &#123;</span><br><span class="line">       handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">     queryStack--;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (queryStack == <span class="number">0</span>) &#123;</span><br><span class="line">     <span class="keyword">for</span> (DeferredLoad deferredLoad : deferredLoads) &#123;</span><br><span class="line">       deferredLoad.load();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// issue #601</span></span><br><span class="line">     deferredLoads.clear();</span><br><span class="line">     <span class="keyword">if</span> (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) &#123;</span><br><span class="line">       <span class="comment">// issue #482</span></span><br><span class="line">       clearLocalCache();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> list;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>BaseExecutor.queryFromDatabase()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">queryFromDatabase</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  List&lt;E&gt; list;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 先往localCache中插入一个占位对象，这个地方</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">  localCache.putObject(key, EXECUTION_PLACEHOLDER);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    localCache.removeObject(key);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* 往缓存中写入数据，也就是缓存查询结果 */</span></span><br><span class="line">  localCache.putObject(key, list);</span><br><span class="line">  <span class="keyword">if</span> (ms.getStatementType() == StatementType.CALLABLE) &#123;</span><br><span class="line">    localOutputParameterCache.putObject(key, parameter);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Connection <span class="title">getConnection</span><span class="params">(Log statementLog)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  Connection connection = transaction.getConnection();</span><br><span class="line">  <span class="keyword">if</span> (statementLog.isDebugEnabled()) &#123;</span><br><span class="line">    <span class="keyword">return</span> ConnectionLogger.newInstance(connection, statementLog, queryStack);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> connection;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的doQuery由SimpleExecutor代理来完成，该方法中有2个子流程，一个是SQL参数的设置，另一个是SQL查询操作和结果集的封装。</p><ul><li>SimpleExecutor.doQuery()方法如下:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">doQuery</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Configuration configuration = ms.getConfiguration();</span><br><span class="line">    StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">     <span class="comment">/* 子流程1: SQL查询参数的设置 */</span></span><br><span class="line">    stmt = prepareStatement(handler, ms.getStatementLog());</span><br><span class="line">       <span class="comment">/* 子流程2: SQL查询操作和结果集封装 */</span></span><br><span class="line">    <span class="keyword">return</span> handler.&lt;E&gt;query(stmt, resultHandler);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    closeStatement(stmt);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="子流程1-SQL查询参数的设置"><a href="#子流程1-SQL查询参数的设置" class="headerlink" title="子流程1 SQL查询参数的设置"></a>子流程1 SQL查询参数的设置</h4><p>首先获取数据库connection连接，然后准备statement，然后就设置SQL查询中的参数值。打开一个connection连接，在使用完后不会close，<br>而是存储下来，当下次需要打开连接时就直接返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SimpleExecutor类</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Statement <span class="title">prepareStatement</span><span class="params">(StatementHandler handler, Log statementLog)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    Statement stmt;</span><br><span class="line">    <span class="comment">/* 获取Connection连接 */</span></span><br><span class="line">    Connection connection = getConnection(statementLog);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 准备Statement */</span></span><br><span class="line">    stmt = handler.prepare(connection, transaction.getTimeout());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置SQL查询中的参数值 */</span></span><br><span class="line">    handler.parameterize(stmt);</span><br><span class="line">    <span class="keyword">return</span> stmt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="子流程2-SQL查询结果集的封装"><a href="#子流程2-SQL查询结果集的封装" class="headerlink" title="子流程2 SQL查询结果集的封装"></a>子流程2 SQL查询结果集的封装</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SimpleExecutor类</span></span><br><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(Statement statement, ResultHandler resultHandler)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    PreparedStatement ps = (PreparedStatement) statement;</span><br><span class="line">    <span class="comment">// 执行查询操作</span></span><br><span class="line">    ps.execute();</span><br><span class="line">    <span class="comment">// 执行结果集封装</span></span><br><span class="line">    <span class="keyword">return</span> resultSetHandler.&lt;E&gt; handleResultSets(ps);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DefaultReseltSetHandler类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">handleResultSets</span><span class="params">(Statement stmt)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    ErrorContext.instance().activity(<span class="string">"handling results"</span>).object(mappedStatement.getId());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> List&lt;Object&gt; multipleResults = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> resultSetCount = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取第一个ResultSet，同时获取数据库的MetaData数据，包括数据表列名、列的类型、类序号等。</span></span><br><span class="line"><span class="comment">     * 这些信息都存储在了ResultSetWrapper中了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ResultSetWrapper rsw = getFirstResultSet(stmt);</span><br><span class="line"></span><br><span class="line">    List&lt;ResultMap&gt; resultMaps = mappedStatement.getResultMaps();</span><br><span class="line">    <span class="keyword">int</span> resultMapCount = resultMaps.size();</span><br><span class="line">    validateResultMapsCount(rsw, resultMapCount);</span><br><span class="line">    <span class="keyword">while</span> (rsw != <span class="keyword">null</span> &amp;&amp; resultMapCount &gt; resultSetCount) &#123;</span><br><span class="line">      ResultMap resultMap = resultMaps.get(resultSetCount);</span><br><span class="line">      handleResultSet(rsw, resultMap, multipleResults, <span class="keyword">null</span>);</span><br><span class="line">      rsw = getNextResultSet(stmt);</span><br><span class="line">      cleanUpAfterHandlingResultSet();</span><br><span class="line">      resultSetCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String[] resultSets = mappedStatement.getResultSets();</span><br><span class="line">    <span class="keyword">if</span> (resultSets != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">while</span> (rsw != <span class="keyword">null</span> &amp;&amp; resultSetCount &lt; resultSets.length) &#123;</span><br><span class="line">        ResultMapping parentMapping = nextResultMaps.get(resultSets[resultSetCount]);</span><br><span class="line">        <span class="keyword">if</span> (parentMapping != <span class="keyword">null</span>) &#123;</span><br><span class="line">          String nestedResultMapId = parentMapping.getNestedResultMapId();</span><br><span class="line">          ResultMap resultMap = configuration.getResultMap(nestedResultMapId);</span><br><span class="line">          handleResultSet(rsw, resultMap, <span class="keyword">null</span>, parentMapping);</span><br><span class="line">        &#125;</span><br><span class="line">        rsw = getNextResultSet(stmt);</span><br><span class="line">        cleanUpAfterHandlingResultSet();</span><br><span class="line">        resultSetCount++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> collapseSingleResultList(multipleResults);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>ResultSetWrapper 是 ResultSet 的包装类，调用 getFirstResultSet 方法获取第一个 ResultSet，同时获取数据库的 MetaData 数据，<br>包括数据表列名、列的类型、类序号等，这些信息都存储在 ResultSetWrapper 类中了。然后调用handleResultSet 方法来来进行结果集的封装。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DefaultResultSetHandler类</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleResultSet</span><span class="params">(ResultSetWrapper rsw, ResultMap resultMap, List&lt;Object&gt; multipleResults, ResultMapping parentMapping)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (parentMapping != <span class="keyword">null</span>) &#123;</span><br><span class="line">            handleRowValues(rsw, resultMap, <span class="keyword">null</span>, RowBounds.DEFAULT, parentMapping);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (resultHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">                DefaultResultHandler defaultResultHandler = <span class="keyword">new</span> DefaultResultHandler(objectFactory);</span><br><span class="line">                handleRowValues(rsw, resultMap, defaultResultHandler, rowBounds, <span class="keyword">null</span>);</span><br><span class="line">                multipleResults.add(defaultResultHandler.getResultList());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                handleRowValues(rsw, resultMap, resultHandler, rowBounds, <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// issue #228 (close resultsets)</span></span><br><span class="line">        closeResultSet(rsw.getResultSet());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里调用handleRowValues方法进行结果值的设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DefaultResultSetHandler类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRowValues</span><span class="params">(ResultSetWrapper rsw, ResultMap resultMap, ResultHandler&lt;?&gt; resultHandler, RowBounds rowBounds, ResultMapping parentMapping)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (resultMap.hasNestedResultMaps()) &#123;</span><br><span class="line">        ensureNoRowBounds();</span><br><span class="line">        checkResultHandler();</span><br><span class="line">        handleRowValuesForNestedResultMap(rsw, resultMap, resultHandler, rowBounds, parentMapping);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 封装数据</span></span><br><span class="line">        handleRowValuesForSimpleResultMap(rsw, resultMap, resultHandler, rowBounds, parentMapping);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleRowValuesForSimpleResultMap</span><span class="params">(ResultSetWrapper rsw, ResultMap resultMap, ResultHandler&lt;?&gt; resultHandler, RowBounds rowBounds, ResultMapping parentMapping)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    DefaultResultContext&lt;Object&gt; resultContext = <span class="keyword">new</span> DefaultResultContext&lt;Object&gt;();</span><br><span class="line">    skipRows(rsw.getResultSet(), rowBounds);</span><br><span class="line">    <span class="keyword">while</span> (shouldProcessMoreRows(resultContext, rowBounds) &amp;&amp; rsw.getResultSet().next()) &#123;</span><br><span class="line">        ResultMap discriminatedResultMap = resolveDiscriminatedResultMap(rsw.getResultSet(), resultMap, <span class="keyword">null</span>);</span><br><span class="line">        Object rowValue = getRowValue(rsw, discriminatedResultMap);</span><br><span class="line">        storeObject(resultHandler, resultContext, rowValue, parentMapping, rsw.getResultSet());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">getRowValue</span><span class="params">(ResultSetWrapper rsw, ResultMap resultMap)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ResultLoaderMap lazyLoader = <span class="keyword">new</span> ResultLoaderMap();</span><br><span class="line">    <span class="comment">// createResultObject为新创建的对象，数据表对应的类</span></span><br><span class="line">    Object rowValue = createResultObject(rsw, resultMap, lazyLoader, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">if</span> (rowValue != <span class="keyword">null</span> &amp;&amp; !hasTypeHandlerForResultObject(rsw, resultMap.getType())) &#123;</span><br><span class="line">        <span class="keyword">final</span> MetaObject metaObject = configuration.newMetaObject(rowValue);</span><br><span class="line">        <span class="keyword">boolean</span> foundValues = <span class="keyword">this</span>.useConstructorMappings;</span><br><span class="line">        <span class="keyword">if</span> (shouldApplyAutomaticMappings(resultMap, <span class="keyword">false</span>)) &#123;</span><br><span class="line">            <span class="comment">// 这里把数据填充进去，metaObject中包含了resultObject信息</span></span><br><span class="line">            foundValues = applyAutomaticMappings(rsw, resultMap, metaObject, <span class="keyword">null</span>) || foundValues;</span><br><span class="line">        &#125;</span><br><span class="line">        foundValues = applyPropertyMappings(rsw, resultMap, metaObject, lazyLoader, <span class="keyword">null</span>) || foundValues;</span><br><span class="line">        foundValues = lazyLoader.size() &gt; <span class="number">0</span> || foundValues;</span><br><span class="line">        rowValue = (foundValues || configuration.isReturnInstanceForEmptyRow()) ? rowValue : <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rowValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">applyAutomaticMappings</span><span class="params">(ResultSetWrapper rsw, ResultMap resultMap, MetaObject metaObject, String columnPrefix)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    List&lt;UnMappedColumnAutoMapping&gt; autoMapping = createAutomaticMappings(rsw, resultMap, metaObject, columnPrefix);</span><br><span class="line">    <span class="keyword">boolean</span> foundValues = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (autoMapping.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 这里进行for循环调用，因为user表中总共有7列，所以也就调用7次</span></span><br><span class="line">        <span class="keyword">for</span> (UnMappedColumnAutoMapping mapping : autoMapping) &#123;</span><br><span class="line">            <span class="comment">// 这里将esultSet中查询结果转换为对应的实际类型</span></span><br><span class="line">            <span class="keyword">final</span> Object value = mapping.typeHandler.getResult(rsw.getResultSet(), mapping.column);</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">                foundValues = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="keyword">null</span> || (configuration.isCallSettersOnNulls() &amp;&amp; !mapping.primitive)) &#123;</span><br><span class="line">                <span class="comment">// gcode issue #377, call setter on nulls (value is not 'found')</span></span><br><span class="line">                metaObject.setValue(mapping.property, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> foundValues;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapping.typeHandler.getResult会获取查询结果值的实际类型，比如我们user表中id字段为int类型，那么它就对应Java中的Integer类型，<br>然后通过调用statement.getInt(“id”)来获取其int值，其类型为Integer。metaObject.setValue方法会把获取到的Integer值设置到Java类中的对应字段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MetaObject类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String name, Object value)</span> </span>&#123;</span><br><span class="line">    PropertyTokenizer prop = <span class="keyword">new</span> PropertyTokenizer(name);</span><br><span class="line">    <span class="keyword">if</span> (prop.hasNext()) &#123;</span><br><span class="line">        MetaObject metaValue = metaObjectForProperty(prop.getIndexedName());</span><br><span class="line">        <span class="keyword">if</span> (metaValue == SystemMetaObject.NULL_META_OBJECT) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span> &amp;&amp; prop.getChildren() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// don't instantiate child path if value is null</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                metaValue = objectWrapper.instantiatePropertyValue(name, prop, objectFactory);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        metaValue.setValue(prop.getChildren(), value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        objectWrapper.set(prop, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>metaValue.setValue方法最后会调用到Java类中对应数据域的set方法，这样也就完成了SQL查询结果集的Java类封装过程</p><h2 id="3-MyBatis缓存"><a href="#3-MyBatis缓存" class="headerlink" title="3. MyBatis缓存"></a>3. MyBatis缓存</h2><p>   MyBatis提供查询缓存，用于减轻数据库压力，提高性能。MyBatis提供了一级缓存和二级缓存。</p><h3 id="3-1-一级缓存"><a href="#3-1-一级缓存" class="headerlink" title="3.1 一级缓存"></a>3.1 一级缓存</h3><p>   一级缓存是 <code>SqlSession</code> 级别的缓存，每个 SqlSession 对象都有一个哈希表用于缓存数据，不同 SqlSession 对象之间缓存不共享。<br>   同一个 SqlSession 对象对象执行2遍相同的 SQL 查询，在第一次查询执行完毕后将结果缓存起来，这样第二遍查询就不用向数据库查询了，<br>   直接返回缓存结果即可。MyBatis<code>默认</code>是<code>开启</code>一级缓存的。<br>   简单说就是SQL语句作为key，查询结果作为value，根据key去查找value，如果查询语句相同就能直接返回value。</p><h3 id="3-2-二级缓存"><a href="#3-2-二级缓存" class="headerlink" title="3.2 二级缓存"></a>3.2 二级缓存</h3><p>   二级缓存是<code>mapper</code> 级别的缓存，二级缓存是跨 SqlSession 的，多个 SqlSession 对象可以<code>共享</code>同一个二级缓存。不同的 SqlSession 对象执行两次相同的 SQL 语句，<br>   第一次会将查询结果进行缓存，第二次查询直接返回二级缓存中的结果即可。MyBatis <code>默认</code>是<code>不开启</code>二级缓存的，可以在配置文件中使用如下配置来开启二级缓存：</p>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    当SQL语句进行<code>更新操作(删除/添加/更新)</code>时，会清空对应的缓存，保证缓存中存储的都是最新的数据。</p><h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h2><p><code>https://www.cnblogs.com/dongying/p/4142476.html</code></p><p><code>http://www.mybatis.org/mybatis-3/zh/getting-started.html</code>  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要通过源码详细分析了 Mybatis 框架中 SQL 语句的执行流程，包括加载解析核心配置文件，创建SqlSessionFactory对象，创建SqlSession对象，执行 SQL 操作。&lt;/p&gt;
    
    </summary>
    
      <category term="Mybatis" scheme="https://www.lixueduan.com/categories/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="https://www.lixueduan.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Shiro安全框架(三)---Shiro组件详解</title>
    <link href="https://www.lixueduan.com/posts/f8844037.html"/>
    <id>https://www.lixueduan.com/posts/f8844037.html</id>
    <published>2019-03-28T14:00:00.000Z</published>
    <updated>2019-04-15T13:47:55.511Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要讲述了Shiro安全框架的各大组件及其作用，同时使用实例代码做出简单演示。</p><a id="more"></a><blockquote><p><strong><a href="https://www.lixueduan.com/categories/Shiro/">Shiro安全框架系列文章目录</a></strong></p><p><a href="https://www.lixueduan.com/posts/7dd8d38.html">Shiro安全框架(一)—什么是Shiro</a></p><p><a href="https://www.lixueduan.com/posts/fd462737.html">Shiro安全框架(二)—SpringBoot整合Shiro</a></p><p> <a href="https://www.lixueduan.com/posts/f8844037.html">Shiro安全框架(三)—Shiro组件详解</a></p><p>源码下载：<a href="https://github.com/illusorycloud/springboot-learning" target="_blank" rel="noopener">GItHub</a></p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-Authentication-用户认证"><a href="#1-Authentication-用户认证" class="headerlink" title="1. Authentication 用户认证"></a>1. Authentication 用户认证</h2><h3 id="1-1-身份和凭"><a href="#1-1-身份和凭" class="headerlink" title="1.1 身份和凭"></a>1.1 身份和凭</h3><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/shiro/ShiroFeatures_Authentication.png" alt=""></p><p>需要提供身份和凭证给 Shiro。</p><p><code>Princirpals</code> ：用户身份信息，是 Subject 标识信息，能够标识唯一 subject 。如电话、邮箱、身份证号码等。</p><p><code>Credentials</code> : 凭证，就是密码，是只被subject知道的秘密值，可以是密码也可以是数字证书等。</p><p>Princirpals/Credentials的常见组合：账号+密码。在 Shiro 中使用<code>UsernamePasswordToken</code>来指定身份信息和凭证。</p><h3 id="1-2-认证流程"><a href="#1-2-认证流程" class="headerlink" title="1.2 认证流程"></a>1.2 认证流程</h3><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/shiro/ShiroAuthenticationSequence.png" alt=""></p><ul><li>1.把用户输入的账号密码封装成 Token 给 Subject</li><li>2.Subject 把 Token 给 SecurityManager</li><li>3.SecurityManager 调用 Authenticator 认证器</li><li>4.Authenticator 根据配置的策略去调用 对应Realms 获取相对应的数据</li><li>5.最后返回认证结果</li></ul><h3 id="1-3-实例代码"><a href="#1-3-实例代码" class="headerlink" title="1.3 实例代码"></a>1.3 实例代码</h3><h4 id="1-Controller"><a href="#1-Controller" class="headerlink" title="1. Controller"></a>1. Controller</h4><p>获取用户输入的账号密码 然后交给Subject去登录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(HttpServletRequest request,User inuser,String uname,String upwd)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"用户名和密码是"</span> + uname + upwd + <span class="string">" User--&gt;"</span> + inuser.toString());</span><br><span class="line">    UsernamePasswordToken usernamePasswordToken = <span class="keyword">new</span> UsernamePasswordToken(uname,upwd);</span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//登录</span></span><br><span class="line">        subject.login(usernamePasswordToken);</span><br><span class="line">        User user = (User) subject.getPrincipal();</span><br><span class="line">        request.getSession().setAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据前面的步骤，Subject 获取到 Token 后会交给SecurityManager，最后 Authenticator 去 Realms 中获取数据并进行登录认证。</p><h4 id="2-Realm"><a href="#2-Realm" class="headerlink" title="2. Realm"></a>2. Realm</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthRealmTest</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> principalCollection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取session中的用户</span></span><br><span class="line">        User user = (User) principalCollection.fromRealm(<span class="keyword">this</span>.getClass().getName()).iterator().next();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.去数据库查询当前user的权限</span></span><br><span class="line">        List&lt;String&gt; strings = userService.selectPermissionByUserId(user.getUid());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.将权限放入shiro中.</span></span><br><span class="line">        SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        simpleAuthorizationInfo.addStringPermissions(strings);</span><br><span class="line">        <span class="comment">//4.返回授权信息AuthorizationInfo</span></span><br><span class="line">        <span class="keyword">return</span> simpleAuthorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录认证</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authenticationToken</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException ex</span></span><br><span class="line"><span class="comment">     *                                 密码校验在&#123;<span class="doctag">@link</span> CredentialsMatcherTest#doCredentialsMatch(AuthenticationToken, AuthenticationInfo)&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">//1.将用户输入的token 就是authenticationToken强转为UsernamePasswordToken</span></span><br><span class="line">        UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        <span class="comment">//2.获取用户名</span></span><br><span class="line">        String username = usernamePasswordToken.getUsername();</span><br><span class="line">        <span class="comment">//3.数据库中查询出user对象</span></span><br><span class="line">        User user = userService.findUserByName(username);</span><br><span class="line">        <span class="comment">//4.查询出这个user的权限</span></span><br><span class="line">        Set&lt;Role&gt; roles = user.getRoles();</span><br><span class="line">        <span class="keyword">for</span> (Role r : roles) &#123;</span><br><span class="line">            Set&lt;Permission&gt; permissions = r.getPermissions();</span><br><span class="line">            <span class="keyword">for</span> (Permission p : permissions) &#123;</span><br><span class="line">                String permission = p.getPermission();</span><br><span class="line">                System.out.println(<span class="string">"权限--》"</span> + permission);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.返回认证信息AuthenticationInfo 这里是没进行密码校验的 密码校验在CredentialsMatcherTest类中</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user, user.getUpwd(), <span class="keyword">this</span>.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>doGetAuthenticationInfo</code>方法中的Token就是用户前面输入的账号密码，我们还需要些一个类用来校验密码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 密码校验类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CredentialsMatcherTest</span> <span class="keyword">extends</span> <span class="title">SimpleCredentialsMatcher</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验密码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> info</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 密码校验结果</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> AuthRealmTest#doGetAuthenticationInfo(AuthenticationToken)&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doCredentialsMatch</span><span class="params">(AuthenticationToken token, AuthenticationInfo info)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.强转</span></span><br><span class="line">        UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) token;</span><br><span class="line">        <span class="comment">//2.获取用户输入的密码</span></span><br><span class="line">        <span class="keyword">char</span>[] password = usernamePasswordToken.getPassword();</span><br><span class="line">        String pwd = <span class="keyword">new</span> String(password);</span><br><span class="line">        <span class="comment">//3.获取数据库中的真实密码</span></span><br><span class="line">        <span class="comment">//这个info就是前面AuthRealmTest类中的doGetAuthenticationInfo返回的info</span></span><br><span class="line">        String relPwd = (String) info.getCredentials();</span><br><span class="line">        <span class="comment">//4.返回校验结果</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.equals(pwd, relPwd);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里就算是认证成功了，但是还没有授权。</p><h3 id="1-4-小结"><a href="#1-4-小结" class="headerlink" title="1.4 小结"></a>1.4 小结</h3><p>认证流程：</p><p>1.用户输入账号密码，<code>Controller</code>中调<code>subject.login</code>去认证</p><p>2.认证方法就是自定义<code>realm</code>中的<code>doGetAuthenticationInfo</code></p><p>3.认证过程中需要校验密码，就是自定义的<code>CredentialsMatcherTest</code></p><h2 id="2-Realm-1"><a href="#2-Realm-1" class="headerlink" title="2. Realm"></a>2. Realm</h2><p>Realm 是一个接口，在接口中定义了 Token 获得认证信息的方法，Shiro 内实现了一系列的 Realm，这些不同的Realm 提供了不同的功能，<code>AuthenticatingRealm</code>实现了获取身份信息的功能，<code>AuthorizingRealm</code>实现了获取权限信息的功能且继承了<code>AuthenticatingRealm</code>,自定义realm时要继承<code>AuthorizingRealm</code>,这样既可以提供身份认证的自定义方法，也可以实现授权的自定义方法。<br><strong>shiro只实现了功能，并不维护数据</strong>，所以自定义realm中也只是从数据库中查询数据然后和用户输入进行对比，其中密码校验是单独的</p><h3 id="2-1-实例代码"><a href="#2-1-实例代码" class="headerlink" title="2.1 实例代码"></a>2.1 实例代码</h3><p>自定义Realm，继承<code>AuthorizingRealm</code>并实现授权方法<code>doGetAuthorizationInfo</code>和身份认证方法<code>doGetAuthenticationInfo</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserServiceImpl userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> principalCollection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取session中的用户</span></span><br><span class="line">        User user = (User) principalCollection.fromRealm(<span class="keyword">this</span>.getClass().getName()).iterator().next();</span><br><span class="line">        <span class="comment">//查询权限</span></span><br><span class="line">        List&lt;String&gt; strings = userService.selectPermissionByUserId(user.getUid());</span><br><span class="line">        SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        <span class="comment">//将权限放入shiro中.</span></span><br><span class="line">        simpleAuthorizationInfo.addStringPermissions(strings);</span><br><span class="line"><span class="comment">//        System.out.println("添加时的权限" + permission.toString());</span></span><br><span class="line">        System.out.println(<span class="string">"-------------授权-------------"</span>);</span><br><span class="line">        <span class="keyword">return</span> simpleAuthorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成身份认证并返回认证信息</span></span><br><span class="line"><span class="comment">     * 认证失败则返回空</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authenticationToken</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">//用户输入的token</span></span><br><span class="line">        UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        String username = usernamePasswordToken.getUsername();</span><br><span class="line">        User user = userService.findUserByName(username);</span><br><span class="line">        <span class="comment">//放入shiro.调用CredentialsMatcher检验密码</span></span><br><span class="line">        System.out.println(<span class="string">"获取到的密码"</span> + user.getUpwd());</span><br><span class="line"><span class="comment">//        ByteSource salt = ByteSource.Util.bytes(user.getSalt());</span></span><br><span class="line"><span class="comment">//        System.out.println(salt);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user, user.getUpwd(),<span class="keyword">this</span>.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Authentication-Strategy-认证策略"><a href="#3-Authentication-Strategy-认证策略" class="headerlink" title="3. Authentication Strategy 认证策略"></a>3. Authentication Strategy 认证策略</h2><p>在 Shiro 中有三种认证策略：</p><ul><li><p><strong>AtLeatOneSuccessfulStrategy(默认策略)</strong> <code>:只要有一个Realm验证成功即可</code>，和<code>FirstSuccessfulStrategy</code>不同，将<code>返回所有</code>Realm身份校验成功的认证信息。</p></li><li><p><strong>FirstSuccessfulStrategy</strong> :<code>只要有一个Realm验证成功即可</code>，<code>只返回第一个</code>Realm身份验证成功的认证<br>信息，其他的忽略。</p></li><li><p><strong>AllSuccessfulStrategy</strong> :所有Realm验证成功才算成功，且返回所有Realm身份认证成功的认证信息，如</p><p>果<code>有一个失败就失败</code>了。</p></li></ul><p>具体配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 认证策略配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> modularRealmAuthenticator</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModularRealmAuthenticator <span class="title">modularRealmAuthenticator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ModularRealmAuthenticator modularRealmAuthenticator = <span class="keyword">new</span> ModularRealmAuthenticator();</span><br><span class="line">    AuthenticationStrategy atLeastOneSuccessfulStrategy = <span class="keyword">new</span> AtLeastOneSuccessfulStrategy();</span><br><span class="line">    modularRealmAuthenticator.setAuthenticationStrategy(atLeastOneSuccessfulStrategy);</span><br><span class="line">    <span class="keyword">return</span> modularRealmAuthenticator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-CredentialsMatcher-凭证匹配器"><a href="#4-CredentialsMatcher-凭证匹配器" class="headerlink" title="4. CredentialsMatcher 凭证匹配器"></a>4. CredentialsMatcher 凭证匹配器</h2><h3 id="1-CredentialsMatcherHash"><a href="#1-CredentialsMatcherHash" class="headerlink" title="1. CredentialsMatcherHash"></a>1. CredentialsMatcherHash</h3><p>自定义凭证匹配器,用来校验密码，其中数据库保存的密码是Hash后的，匹配是也需要Hash后进行对比。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CredentialsMatcher</span> <span class="keyword">extends</span> <span class="title">SimpleCredentialsMatcher</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doCredentialsMatch</span><span class="params">(AuthenticationToken token, AuthenticationInfo info)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//强转 获取token</span></span><br><span class="line">        UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) token;</span><br><span class="line">        <span class="comment">//获取用户输入的密码</span></span><br><span class="line">        <span class="keyword">char</span>[] password = usernamePasswordToken.getPassword();</span><br><span class="line">        String inputPassword = <span class="keyword">new</span> String(password);</span><br><span class="line">        Md5Hash md5Hash = <span class="keyword">new</span> Md5Hash(inputPassword);</span><br><span class="line">        <span class="comment">//获取数据库中的密码</span></span><br><span class="line">        String realPassword = (String) info.getCredentials();</span><br><span class="line">        System.out.println(<span class="string">"输入的密码"</span>+md5Hash);</span><br><span class="line">        System.out.println(<span class="string">"数据库中的密码"</span>+realPassword);</span><br><span class="line">        <span class="comment">//对比</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.equals(md5Hash, realPassword);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-CredentialsMatcherLimit"><a href="#2-CredentialsMatcherLimit" class="headerlink" title="2. CredentialsMatcherLimit"></a>2. CredentialsMatcherLimit</h3><p>同时可以在凭证匹配器中设定登录次数，多次登录失败后限制一段时间内不让登录。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CredentialsMatcherLimit</span> <span class="keyword">extends</span> <span class="title">SimpleCredentialsMatcher</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前登录次数 放在缓存中10分钟后清空 即连续登录失败后要等一段时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger tryTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 短时间内最大登录次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_TIMES = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doCredentialsMatch</span><span class="params">(AuthenticationToken token, AuthenticationInfo info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tryTime.get() &lt; MAX_TIMES) &#123;</span><br><span class="line">            <span class="keyword">int</span> currentTime = tryTime.getAndIncrement();</span><br><span class="line">            System.out.println(<span class="string">"登录次数："</span> + currentTime);</span><br><span class="line">            <span class="comment">//强转 获取token</span></span><br><span class="line">            UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) token;</span><br><span class="line">            <span class="comment">//获取用户输入的密码</span></span><br><span class="line">            <span class="keyword">char</span>[] password = usernamePasswordToken.getPassword();</span><br><span class="line">            String inputPassword = <span class="keyword">new</span> String(password);</span><br><span class="line">             Md5Hash md5Hash = <span class="keyword">new</span> Md5Hash(inputPassword);</span><br><span class="line">            <span class="comment">//获取数据库中的密码</span></span><br><span class="line">            String realPassword = (String) info.getCredentials();</span><br><span class="line">            System.out.println(<span class="string">"输入的密码"</span> + md5Hash);</span><br><span class="line">            System.out.println(<span class="string">"数据库中的密码"</span> + realPassword);</span><br><span class="line">            <span class="comment">//对比</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.equals(md5Hash, realPassword);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"登录次数过多，请稍后重试"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-Authorization-授权"><a href="#5-Authorization-授权" class="headerlink" title="5. Authorization 授权"></a>5. Authorization 授权</h2><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/shiro/ShiroFeatures_Authorization.png" alt=""></p><h3 id="5-1-简介"><a href="#5-1-简介" class="headerlink" title="5.1 简介"></a>5.1 简介</h3><ul><li><code>授权</code> ：给身份认证通过的人，授予某些权限。</li><li><code>权限粒度</code> ：分为粗粒度和细粒度，<ul><li>粗粒度 ：对某张表的操作，如对user表的crud。</li><li>细粒度 ：对表中某条记录的操作，如：只能对user表中ID为1的记录进行curd，shiro一般管理的是粗粒度的权限，比如：菜单、URL，细粒度的权限控制通过业务来实现。</li></ul></li><li><code>角色</code> ：权限的集合</li><li><code>权限表现规则</code>：格式:  <code>资源:操作:实例</code>(可以用通配符表示)<ul><li>user:add   对user有add权限</li><li>user:*        对user有所有操作</li><li>user:add:1   对ID为1的user有add操作</li></ul></li></ul><h3 id="5-2-流程"><a href="#5-2-流程" class="headerlink" title="5.2 流程"></a>5.2 流程</h3><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/shiro/ShiroAuthorizationSequence.png" alt=""></p><p>Shiro中权限检测方式有三种：</p><ul><li>1.编程式 业务代码前手动检测 <ul><li><code>subject.checkPermission(&quot;delete&quot;);/subject.hasRole(&quot;admin&quot;);</code></li></ul></li><li>2.注解式 方法上添加注解<ul><li><code>@RequiresPermissions(value = &quot;add&quot;)/@RequiresRoles(&quot;admin&quot;)</code></li></ul></li><li>3.标签式 写在html中<ul><li><code>&lt;p shiro:hasPermission=&quot;add&quot;&gt;添加用户&lt;/p&gt;</code> 需要在html页面中引入 <code>xmlns:shiro=&quot;http://www.pollix.at/thymeleaf/shiro&quot;</code></li></ul></li></ul><h4 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h4><ul><li>1.获取 Subject 主体</li><li>2.判断 Subject 主体是否通过认证</li><li>2.Subject 调用 isPermitted()/hasRole() 方法开始授权</li><li>3.SecurityManager执行授权，通过 ModularRealmAuthorizer 执行授权 </li><li>4.调用自定义 Realm 的授权方法：doGetAuthorizationInfo</li><li>5.返回授权结果</li></ul><h4 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> principalCollection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取principalCollection中的用户</span></span><br><span class="line">        User user = (User) principalCollection.fromRealm(<span class="keyword">this</span>.getClass().getName()).iterator().next();</span><br><span class="line">        <span class="comment">//2.通过数据库查询当前userde权限</span></span><br><span class="line">        List&lt;String&gt; permissions = userService.selectPermissionByUserId(user.getUid());</span><br><span class="line">        SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        <span class="comment">//3.将权限放入shiro中.</span></span><br><span class="line">        simpleAuthorizationInfo.addStringPermissions(permissions);</span><br><span class="line"><span class="comment">//        System.out.println("添加时的权限" + permission.toString());</span></span><br><span class="line">        System.out.println(<span class="string">"-------------授权-------------"</span>);</span><br><span class="line">        <span class="comment">//4.返回</span></span><br><span class="line">        <span class="keyword">return</span> simpleAuthorizationInfo;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="6-散列算法-加密"><a href="#6-散列算法-加密" class="headerlink" title="6. 散列算法(加密)"></a>6. 散列算法(加密)</h2><h3 id="6-1-简介"><a href="#6-1-简介" class="headerlink" title="6.1 简介"></a>6.1 简介</h3><p>为了提高应用系统的安全性，在身份认证过程中往往会涉及加密，这里主要关注shiro提供的密码服务模块；通过shiro进行散列算法操作，常见的有两个MD5，SHA-1等。</p><p>如<code>1111</code>的MD5为<code>b59c67bf196a4758191e42f76670ceba</code>,但是这个<code>b59c67bf196a4758191e42f76670ceba</code>很容易就会被破解，轻松就能获取到加密前的数据。</p><h3 id="6-2-加盐"><a href="#6-2-加盐" class="headerlink" title="6.2 加盐"></a>6.2 加盐</h3><p>但是<code>1111+userName</code>进行加密，这样就不容易被破解了，破解难度增加。</p><p>例如:</p><p><code>qwer</code>的MD5为<code>962012d09b8170d912f0669f6d7d9d07</code><br><code>qwer</code>加盐<code>illusory</code>后的MD5为<code>6aee9c0e35ad7a12e59ff67b663a32ca</code></p><p>用户在注册的时候就把加密后的密码和盐值存到数据库，用户登录时就先根据用户名查询盐值，然后把用户输入的密码加密后在和数据库中的密码做对比。</p><p>代码如下：<br>自定义密码校验,shiro也提供了一下内置的加密密码校验器</p><blockquote><p>1.根据name查询user 然后获取到盐值<br>2.然后把输入的密码加密<br>3.最后在于数据库中的密码对比</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CredentialsMatcherHash</span> <span class="keyword">extends</span> <span class="title">SimpleCredentialsMatcher</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doCredentialsMatch</span><span class="params">(AuthenticationToken token, AuthenticationInfo info)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//强转 获取token</span></span><br><span class="line">        UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) token;</span><br><span class="line">        <span class="comment">//获取用户输入的密码</span></span><br><span class="line">        <span class="keyword">char</span>[] password = usernamePasswordToken.getPassword();</span><br><span class="line">        String inputPassword = <span class="keyword">new</span> String(password);</span><br><span class="line">        String username = usernamePasswordToken.getUsername();</span><br><span class="line">        User userByName = service.findUserJustByName(username);</span><br><span class="line">        String salt = userByName.getSalt();</span><br><span class="line">        <span class="comment">//这个盐值是从数据库查出来的</span></span><br><span class="line">        Md5Hash md5Hash = <span class="keyword">new</span> Md5Hash(inputPassword, salt);</span><br><span class="line">        String inputMD5Hash = <span class="keyword">new</span> String(String.valueOf(md5Hash));</span><br><span class="line">        <span class="comment">//获取数据库中的密码</span></span><br><span class="line">        String realPassword = (String) info.getCredentials();</span><br><span class="line">        System.out.println(<span class="string">"输入的密码"</span> + inputPassword);</span><br><span class="line">        System.out.println(<span class="string">"输入的密码加密"</span> + md5Hash);</span><br><span class="line">        System.out.println(<span class="string">"数据库中的密码"</span> + realPassword);</span><br><span class="line">        <span class="comment">//对比</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.equals(inputMD5Hash, realPassword);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-缓存"><a href="#7-缓存" class="headerlink" title="7. 缓存"></a>7. 缓存</h2><p>每次检查都会去数据库中获取权限，这样效率很低，可以通过设置缓存来解决问题。如<code>Ehcache</code> 或者 <code>Redis</code>。</p><p>这里使用<code>Redis</code>。</p><h3 id="7-1-引入依赖"><a href="#7-1-引入依赖" class="headerlink" title="7.1 引入依赖"></a>7.1 引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-2-重写方法"><a href="#7-2-重写方法" class="headerlink" title="7.2 重写方法"></a>7.2 重写方法</h3><p>使用 Redis 作为缓存需要 Shiro重写 Cache、cacheManager</p><h4 id="CacheManager"><a href="#CacheManager" class="headerlink" title="CacheManager"></a>CacheManager</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Cachemanager</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusoryCloud</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroRedisCacheManager</span> <span class="keyword">extends</span> <span class="title">AbstractCacheManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShiroRedisCacheManager</span><span class="params">(RedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为了个性化配置redis存储时的key，我们选择了加前缀的方式，所以写了一个带名字及redis操作的构造函数的Cache类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Cache <span class="title">createCache</span><span class="params">(String name)</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ShiroRedisCache(redisTemplate, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RedisCache"><a href="#RedisCache" class="headerlink" title="RedisCache"></a>RedisCache</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Shiro缓存</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusoryCloud</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroRedisCache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Cache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis操作对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * key 前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String prefix = <span class="string">"shiro_redis"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prefix + <span class="string">":"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrefix</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prefix = prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShiroRedisCache</span><span class="params">(RedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShiroRedisCache</span><span class="params">(RedisTemplate redisTemplate, String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(redisTemplate);</span><br><span class="line">        <span class="keyword">this</span>.prefix = prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k redis中的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> redis中的value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> CacheException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K k)</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = getBytesKey(k);</span><br><span class="line">        <span class="keyword">return</span> (V) redisTemplate.opsForValue().get(bytes);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * put方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> CacheException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K k, V v)</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span> || v == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = getBytesKey(k);</span><br><span class="line">        redisTemplate.opsForValue().set(bytes, v);</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * delete方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> CacheException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(K k)</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = getBytesKey(k);</span><br><span class="line">        V v = (V) redisTemplate.opsForValue().get(bytes);</span><br><span class="line">        redisTemplate.delete(bytes);</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除数据库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> CacheException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">        redisTemplate.getConnectionFactory().getConnection().flushDb();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getConnectionFactory().getConnection().dbSize().intValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有的key</span></span><br><span class="line"><span class="comment">     * key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = (getPrefix() + <span class="string">"*"</span>).getBytes();</span><br><span class="line">        Set&lt;<span class="keyword">byte</span>[]&gt; keys = redisTemplate.keys(bytes);</span><br><span class="line">        Set&lt;K&gt; sets = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">byte</span>[] key : keys) &#123;</span><br><span class="line">            sets.add((K) key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sets;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有的value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;V&gt; <span class="title">values</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Set&lt;K&gt; keys = keys();</span><br><span class="line">        List&lt;V&gt; values = <span class="keyword">new</span> ArrayList&lt;&gt;(keys.size());</span><br><span class="line">        <span class="keyword">for</span> (K k : keys) &#123;</span><br><span class="line">            values.add(get(k));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> values;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] getBytesKey(K key) &#123;</span><br><span class="line">        String prekey = <span class="keyword">this</span>.getPrefix() + key;</span><br><span class="line">        <span class="keyword">return</span> prekey.getBytes();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-Shiro配置缓存管理器"><a href="#7-3-Shiro配置缓存管理器" class="headerlink" title="7.3 Shiro配置缓存管理器"></a>7.3 Shiro配置缓存管理器</h3><p>在 ShiroConfiguration 中配置 ShiroRedisCacheManager。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroRedisCacheManager <span class="title">cacheManager</span><span class="params">(RedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ShiroRedisCacheManager(redisTemplate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置核心安全事务管理器</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"securityManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">(@Qualifier(<span class="string">"authRealm"</span>)</span> AuthRealm authRealm,</span></span><br><span class="line"><span class="function">                                           @<span class="title">Qualifier</span><span class="params">(<span class="string">"authRealm2"</span>)</span> AuthRealm authRealm2,</span></span><br><span class="line"><span class="function">                                           @<span class="title">Qualifier</span><span class="params">(<span class="string">"authRealm3"</span>)</span> AuthRealm authRealm3</span></span><br><span class="line"><span class="function">            , RedisTemplate&lt;Object, Object&gt; template) </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"----------------------------shiro已经加载---------------------------"</span>);</span><br><span class="line">        DefaultWebSecurityManager manager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        <span class="comment">//配置缓存 必须放在realm前面</span></span><br><span class="line">        manager.setCacheManager(cacheManager(template));</span><br><span class="line">        <span class="comment">//配置两个测试一下认证策略AllSuccessfulStrategy</span></span><br><span class="line"><span class="comment">//        manager.setRealm(authRealm);</span></span><br><span class="line"><span class="comment">//        manager.setRealm(authRealm2);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试一下密码加密</span></span><br><span class="line">        manager.setRealm(authRealm3);</span><br><span class="line"></span><br><span class="line">        manager.setSessionManager(sessionManager());</span><br><span class="line"><span class="comment">//        manager.setCacheManager(ehCacheManager);</span></span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>到这里就ok了</p><p>Shiro 在认证时会首先去 Redis 缓存中查询，缓存中没有才会去去查询数据库。</p><h2 id="8-Session"><a href="#8-Session" class="headerlink" title="8. Session"></a>8. Session</h2><h3 id="Shiro-中的-Session-特性"><a href="#Shiro-中的-Session-特性" class="headerlink" title="Shiro 中的 Session 特性"></a>Shiro 中的 Session 特性</h3><ul><li>基于POJO/J2SE：shiro中session相关的类都是基于接口实现的简单的java对象（POJO），兼容所有java对象的配置方式，扩展也更方便，完全可以定制自己的会话管理功能 。</li><li>简单灵活的会话存储/持久化：因为shiro中的session对象是基于简单的java对象的，所以你可以将session存储在任何地方，例如，文件，各种数据库，内存中等。</li><li>容器无关的集群功能：shiro中的session可以很容易的集成第三方的缓存产品完成集群的功能。例如，Ehcache + Terracotta, Coherence, GigaSpaces等。你可以很容易的实现会话集群而无需关注底层的容器实现。</li><li>异构客户端的访问：可以实现web中的session和非web项目中的session共享。</li><li>会话事件监听：提供对对session整个生命周期的监听。</li><li>保存主机地址：在会话开始session会存用户的ip地址和主机名，以此可以判断用户的位置。</li><li>会话失效/过期的支持：用户长时间处于不活跃状态可以使会话过期，调用touch()方法，可以主动更新最后访问时间，让会话处于活跃状态。</li><li>透明的Web支持：shiro全面支持Servlet 2.5中的session规范。这意味着你可以将你现有的web程序改为shiro会话，而无需修改代码。</li></ul><p>单点登录的支持：shiro session基于普通java对象，使得它更容易存储和共享，可以实现跨应用程序共享。可以根据共享的会话，来保证认证状态到另一个程序。从而实现单点登录。</p><h3 id="8-2-SessionListener"><a href="#8-2-SessionListener" class="headerlink" title="8.2 SessionListener"></a>8.2 SessionListener</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监听session变化</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusoryCloud</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroSessionListener</span> <span class="keyword">implements</span> <span class="title">SessionListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计在线人数</span></span><br><span class="line"><span class="comment">     * juc包下线程安全自增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger sessionCount = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 会话创建时触发</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//会话创建，在线人数加一</span></span><br><span class="line">        sessionCount.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退出会话时触发</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//会话退出,在线人数减一</span></span><br><span class="line">        sessionCount.decrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 会话过期时触发</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onExpiration</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//会话过期,在线人数减一</span></span><br><span class="line">        sessionCount.decrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取在线人数使用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AtomicInteger <span class="title">getSessionCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sessionCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3-ShiroConfiguration-配置"><a href="#8-3-ShiroConfiguration-配置" class="headerlink" title="8.3 ShiroConfiguration 配置"></a>8.3 ShiroConfiguration 配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 配置session监听</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Bean</span>(<span class="string">"sessionListener"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> ShiroSessionListener <span class="title">sessionListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       ShiroSessionListener sessionListener = <span class="keyword">new</span> ShiroSessionListener();</span><br><span class="line">       <span class="keyword">return</span> sessionListener;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 配置会话ID生成器</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> SessionIdGenerator <span class="title">sessionIdGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> JavaUuidSessionIdGenerator();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * SessionDAO的作用是为Session提供CRUD并进行持久化的一个shiro组件</span></span><br><span class="line"><span class="comment">    * MemorySessionDAO 直接在内存中进行会话维护</span></span><br><span class="line"><span class="comment">    * EnterpriseCacheSessionDAO  提供了缓存功能的会话维护，默认情况下使用MapCache实现，内部使用ConcurrentHashMap保存缓存的会话。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> SessionDAO <span class="title">sessionDAO</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       EnterpriseCacheSessionDAO enterpriseCacheSessionDAO = <span class="keyword">new</span> EnterpriseCacheSessionDAO();</span><br><span class="line">       <span class="comment">//使用ehCacheManager</span></span><br><span class="line">       enterpriseCacheSessionDAO.setCacheManager(cacheManager(<span class="keyword">new</span> RedisTemplate()));</span><br><span class="line">       <span class="comment">//设置session缓存的名字 默认为 shiro-activeSessionCache</span></span><br><span class="line">       enterpriseCacheSessionDAO.setActiveSessionsCacheName(<span class="string">"shiro-activeSessionCache"</span>);</span><br><span class="line">       <span class="comment">//sessionId生成器</span></span><br><span class="line">       enterpriseCacheSessionDAO.setSessionIdGenerator(sessionIdGenerator());</span><br><span class="line">       <span class="keyword">return</span> enterpriseCacheSessionDAO;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span>(<span class="string">"sessionManager"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> SessionManager <span class="title">sessionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       DefaultWebSessionManager sessionManager = <span class="keyword">new</span> DefaultWebSessionManager();</span><br><span class="line">       Collection&lt;SessionListener&gt; listeners = <span class="keyword">new</span> ArrayList&lt;SessionListener&gt;();</span><br><span class="line">       <span class="comment">//配置监听</span></span><br><span class="line">       listeners.add(sessionListener());</span><br><span class="line">       sessionManager.setSessionListeners(listeners);</span><br><span class="line">       sessionManager.setSessionIdCookie(sessionIdCookie());</span><br><span class="line">       sessionManager.setSessionDAO(sessionDAO());</span><br><span class="line">       <span class="comment">//全局会话超时时间（单位毫秒），默认30分钟  暂时设置为10秒钟 用来测试</span></span><br><span class="line">       sessionManager.setGlobalSessionTimeout(<span class="number">1800000</span>);</span><br><span class="line">       <span class="comment">//是否开启删除无效的session对象  默认为true</span></span><br><span class="line">       sessionManager.setDeleteInvalidSessions(<span class="keyword">true</span>);</span><br><span class="line">       <span class="comment">//是否开启定时调度器进行检测过期session 默认为true</span></span><br><span class="line">       sessionManager.setSessionValidationSchedulerEnabled(<span class="keyword">true</span>);</span><br><span class="line">       <span class="comment">//设置session失效的扫描时间, 清理用户直接关闭浏览器造成的孤立会话 默认为 1个小时</span></span><br><span class="line">       <span class="comment">//设置该属性 就不需要设置 ExecutorServiceSessionValidationScheduler 底层也是默认自动调用ExecutorServiceSessionValidationScheduler</span></span><br><span class="line">       <span class="comment">//暂时设置为 5秒 用来测试</span></span><br><span class="line">       sessionManager.setSessionValidationInterval(<span class="number">3600000</span>);</span><br><span class="line">       <span class="keyword">return</span> sessionManager;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 配置保存sessionId的cookie</span></span><br><span class="line"><span class="comment">    * 注意：这里的cookie 不是上面的记住我 cookie 记住我需要一个cookie session管理 也需要自己的cookie</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Bean</span>(<span class="string">"sessionIdCookie"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> SimpleCookie <span class="title">sessionIdCookie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">//这个参数是cookie的名称</span></span><br><span class="line">       SimpleCookie simpleCookie = <span class="keyword">new</span> SimpleCookie(<span class="string">"sid"</span>);</span><br><span class="line">       <span class="comment">//setcookie的httponly属性如果设为true的话，会增加对xss防护的安全系数。它有以下特点：</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//setcookie()的第七个参数</span></span><br><span class="line">       <span class="comment">//设为true后，只能通过http访问，javascript无法访问</span></span><br><span class="line">       <span class="comment">//防止xss读取cookie</span></span><br><span class="line">       simpleCookie.setHttpOnly(<span class="keyword">true</span>);</span><br><span class="line">       simpleCookie.setPath(<span class="string">"/"</span>);</span><br><span class="line">       <span class="comment">//maxAge=-1表示浏览器关闭时失效此Cookie</span></span><br><span class="line">       simpleCookie.setMaxAge(-<span class="number">1</span>);</span><br><span class="line">       <span class="keyword">return</span> simpleCookie;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="9-RememberMe"><a href="#9-RememberMe" class="headerlink" title="9. RememberMe"></a>9. RememberMe</h2><h3 id="ShiroConfiguration-配置"><a href="#ShiroConfiguration-配置" class="headerlink" title="ShiroConfiguration 配置"></a>ShiroConfiguration 配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RememberMeManager <span class="title">rememberMeManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CookieRememberMeManager cookieRememberMeManager = <span class="keyword">new</span> CookieRememberMeManager();</span><br><span class="line">    cookieRememberMeManager.setCookie(rememberMeCookie());</span><br><span class="line">    <span class="comment">//rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度(128 256 512 位)</span></span><br><span class="line">    cookieRememberMeManager.setCipherKey(Base64.decode(<span class="string">"2AvVhdsgUs0FSA3SDFAdag=="</span>));</span><br><span class="line">    <span class="keyword">return</span> cookieRememberMeManager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SimpleCookie <span class="title">rememberMeCookie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SimpleCookie simpleCookie = <span class="keyword">new</span> SimpleCookie(<span class="string">"rememberMe"</span>);</span><br><span class="line">    simpleCookie.setMaxAge(<span class="number">259200</span>);</span><br><span class="line">    <span class="keyword">return</span> simpleCookie;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Controller"><a href="#2-Controller" class="headerlink" title="2. Controller"></a>2. Controller</h3><p>前端页面传过来一个Boolean变量，然后存放在<code>UsernamePasswordToken</code>中就可以了,不过User对象因为要序列化所以要实现<code>Serializable</code>接口，同样的还有User对象引用的permission和role对象都要实现这个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(HttpServletRequest request, User inuser, String uname, String upwd,Boolean rememberMe)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"用户名和密码是"</span> + uname + upwd + <span class="string">" User--&gt;"</span> + inuser.toString());</span><br><span class="line">    UsernamePasswordToken usernamePasswordToken = <span class="keyword">new</span> UsernamePasswordToken(uname, upwd, rememberMe);</span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//登录</span></span><br><span class="line">        subject.login(usernamePasswordToken);</span><br><span class="line">        User user = (User) subject.getPrincipal();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">        usernamePasswordToken.clear();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-参考"><a href="#10-参考" class="headerlink" title="10. 参考"></a>10. 参考</h2><p><code>https://blog.csdn.net/yangwenxue_admin/article/details/73936803</code></p><p><code>官方文档：http://shiro.apache.org/documentation.html</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要讲述了Shiro安全框架的各大组件及其作用，同时使用实例代码做出简单演示。&lt;/p&gt;
    
    </summary>
    
      <category term="Shiro" scheme="https://www.lixueduan.com/categories/Shiro/"/>
    
    
      <category term="Shiro" scheme="https://www.lixueduan.com/tags/Shiro/"/>
    
  </entry>
  
  <entry>
    <title>Shiro安全框架(二)---SpringBoot整合Shiro</title>
    <link href="https://www.lixueduan.com/posts/fd462737.html"/>
    <id>https://www.lixueduan.com/posts/fd462737.html</id>
    <published>2019-03-27T14:00:00.000Z</published>
    <updated>2019-04-15T13:47:37.022Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了如何在SpringBoot项目中整合Shiro安全框架，包括详细步骤和具体实例代码。</p><a id="more"></a><blockquote><p><strong><a href="https://www.lixueduan.com/categories/Shiro/">Shiro安全框架系列文章目录</a></strong></p><p><a href="https://www.lixueduan.com/posts/7dd8d38.html">Shiro安全框架(一)—什么是Shiro</a></p><p><a href="https://www.lixueduan.com/posts/fd462737.html">Shiro安全框架(二)—SpringBoot整合Shiro</a></p><p> <a href="https://www.lixueduan.com/posts/f8844037.html">Shiro安全框架(三)—Shiro组件详解</a></p><p>源码下载：<a href="https://github.com/illusorycloud/springboot-learning" target="_blank" rel="noopener">GItHub</a></p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h2><p>普通项目引入方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--shiro--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SpringBoot引入方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-数据准备"><a href="#2-数据准备" class="headerlink" title="2. 数据准备"></a>2. 数据准备</h2><h3 id="2-1-Entity"><a href="#2-1-Entity" class="headerlink" title="2.1 Entity"></a>2.1 Entity</h3><p>一共有三个对象，User用户，Role角色，Permission权限。 将权限分配给角色，不同的角色拥有不同的权限，<br>然后给用户分配不同的角色，这样就达到了权限管理的效果。</p><blockquote><p>这里用了lombok插件 编译时自动生成getter/setter等方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusory</span></span><br><span class="line"><span class="comment"> * 权限实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Permission</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer pid;</span><br><span class="line">    <span class="keyword">private</span> String permission;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Role&gt; roles = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusory</span></span><br><span class="line"><span class="comment"> * 角色实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer rid;</span><br><span class="line">    <span class="keyword">private</span> String rname;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;User&gt; users = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Permission&gt; permissions = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusory</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> String uname;</span><br><span class="line">    <span class="keyword">private</span> String upwd;</span><br><span class="line">    <span class="keyword">private</span> String salt;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Role&gt; roles=<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-DataBase"><a href="#2-2-DataBase" class="headerlink" title="2.2 DataBase"></a>2.2 DataBase</h3><p>这里主要涉及到五张表:<code>用户表</code>,<code>角色表(用户所拥有的角色)</code>,<code>权限表(角色所涉及到的权限)</code>,<code>用户-角色表(用户和角色是多对多的)</code>,<code>角色-权限表(角色和权限是多对多的)</code>.<br>表结构建立的sql语句如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">-- 新建一个数据库</span><br><span class="line">CREATE DATABASE shiro;</span><br><span class="line">USE shiro;</span><br><span class="line"></span><br><span class="line">-- 用户表</span><br><span class="line">DROP TABLE IF EXISTS USER;</span><br><span class="line">CREATE TABLE USER(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">NAME VARCHAR(4),</span><br><span class="line">pwd VARCHAR(8) </span><br><span class="line">);</span><br><span class="line">INSERT INTO USER VALUES(NULL,&apos;张三&apos;,&apos;qwer&apos;),(NULL,&apos;李四&apos;,&apos;qwer&apos;);</span><br><span class="line"></span><br><span class="line">-- 权限表</span><br><span class="line">DROP TABLE IF EXISTS permission;</span><br><span class="line">CREATE TABLE permission(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">permission VARCHAR(10)</span><br><span class="line">);</span><br><span class="line">INSERT INTO permission VALUES(NULL,&apos;add&apos;),</span><br><span class="line">(NULL,&apos;delete&apos;),</span><br><span class="line">(NULL,&apos;update&apos;),</span><br><span class="line">(NULL,&apos;query&apos;);</span><br><span class="line"></span><br><span class="line">-- 角色表</span><br><span class="line">DROP TABLE IF EXISTS role;</span><br><span class="line">CREATE TABLE role(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">NAME VARCHAR(10));</span><br><span class="line">INSERT INTO role VALUES(NULL,&apos;admin&apos;),(NULL,&apos;customer&apos;);</span><br><span class="line"></span><br><span class="line">-- 权限-角色表</span><br><span class="line">DROP TABLE IF EXISTS permission_role;</span><br><span class="line">CREATE TABLE permission_role(</span><br><span class="line">pid INT(3),</span><br><span class="line">CONSTRAINT  fk_permission FOREIGN KEY(pid) REFERENCES permission(id),</span><br><span class="line">rid INT(3),</span><br><span class="line">CONSTRAINT  fk_role FOREIGN KEY(rid) REFERENCES role(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 管理员有4个权限 用户只有查询权限</span><br><span class="line">INSERT INTO permission_role VALUES(1,1),(2,1),(3,1),(4,1),(4,2);</span><br><span class="line"></span><br><span class="line">-- 用户-角色表</span><br><span class="line">DROP TABLE IF EXISTS user_role;</span><br><span class="line">CREATE TABLE user_role(</span><br><span class="line">uid INT(3),</span><br><span class="line">CONSTRAINT  fk_user FOREIGN KEY(uid) REFERENCES USER(id),</span><br><span class="line">rid INT(3),</span><br><span class="line">CONSTRAINT  fk_roles FOREIGN KEY(rid) REFERENCES role(id)</span><br><span class="line">);</span><br><span class="line">-- 张三为管理员 李四为用户</span><br><span class="line">INSERT INTO user_role VALUES(1,1),(2,2);</span><br></pre></td></tr></table></figure><h2 id="3-Mapper"><a href="#3-Mapper" class="headerlink" title="3 Mapper"></a>3 Mapper</h2><h3 id="3-1-UserMapper-java"><a href="#3-1-UserMapper-java" class="headerlink" title="3.1 UserMapper.java"></a>3.1 UserMapper.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">findUserByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">findUserJustByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;String&gt; <span class="title">selectPermissionByUserId</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-UserMapper-xml"><a href="#3-2-UserMapper-xml" class="headerlink" title="3.2 UserMapper.xml"></a>3.2 UserMapper.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.example.shiro.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"User"</span> <span class="attr">id</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"uid"</span> <span class="attr">column</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"uname"</span> <span class="attr">column</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"upwd"</span> <span class="attr">column</span>=<span class="string">"pwd"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"roles"</span> <span class="attr">ofType</span>=<span class="string">"Role"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"rid"</span> <span class="attr">column</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"rname"</span> <span class="attr">column</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"permissions"</span> <span class="attr">ofType</span>=<span class="string">"Permission"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"pid"</span> <span class="attr">column</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"permission"</span> <span class="attr">column</span>=<span class="string">"permission"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByName"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">        SELECT u.*,r.*,p.*</span><br><span class="line">        FROM USER u</span><br><span class="line">                 INNER JOIN user_role ur ON ur.uid = u.id</span><br><span class="line">                 INNER JOIN role r ON r.id = ur.rid</span><br><span class="line">                 INNER JOIN permission_role pr ON pr.rid = r.id</span><br><span class="line">                 INNER JOIN permission p ON pr.pid = p.id</span><br><span class="line">        WHERE u.name = #&#123;name&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectPermissionByUserId"</span> <span class="attr">parameterType</span>=<span class="string">"integer"</span> <span class="attr">resultType</span>=<span class="string">"string"</span>&gt;</span></span><br><span class="line">SELECT permission FROM permission p INNER JOIN permission_role pr ON p.id=pr.pid</span><br><span class="line">INNER JOIN user_role ur ON ur.rid=pr.rid</span><br><span class="line">WHERE ur.uid=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-Service"><a href="#4-Service" class="headerlink" title="4. Service"></a>4. Service</h2><h3 id="4-1-UserService"><a href="#4-1-UserService" class="headerlink" title="4.1 UserService"></a>4.1 UserService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">findUserByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">findUserJustByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;String&gt; <span class="title">selectPermissionByUserId</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-UserServiceImpl"><a href="#4-2-UserServiceImpl" class="headerlink" title="4.2 UserServiceImpl"></a>4.2 UserServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.findUserByName(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserJustByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.findUserJustByName(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">selectPermissionByUserId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectPermissionByUserId(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-Shiro配置-重点"><a href="#5-Shiro配置-重点" class="headerlink" title="5. Shiro配置(重点)"></a>5. Shiro配置(重点)</h2><p>Shiro中唯一需要配置的就是<code>Realm</code>,完成根据用户名去数据库的查询,并且将用户信息放入<code>Shiro</code>中。</p><h3 id="5-1-Realm"><a href="#5-1-Realm" class="headerlink" title="5.1 Realm"></a>5.1 Realm</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> illusory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserServiceImpl userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> principalCollection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取principalCollection中的用户</span></span><br><span class="line">        User user = (User) principalCollection.fromRealm(<span class="keyword">this</span>.getClass().getName()).iterator().next();</span><br><span class="line">        <span class="comment">// 2.通过数据库查询当前userde权限</span></span><br><span class="line">        List&lt;String&gt; permissions = userService.selectPermissionByUserId(user.getUid());</span><br><span class="line">        SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        <span class="comment">// 3.将权限放入shiro中.</span></span><br><span class="line">        simpleAuthorizationInfo.addStringPermissions(permissions);</span><br><span class="line">        System.out.println(<span class="string">"-------------授权-------------"</span>);</span><br><span class="line">        <span class="comment">// 4.返回</span></span><br><span class="line">        <span class="keyword">return</span> simpleAuthorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成身份认证并返回认证信息</span></span><br><span class="line"><span class="comment">     * 认证失败则返回空</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authenticationToken</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.用户输入的token</span></span><br><span class="line">        UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        String username = usernamePasswordToken.getUsername();</span><br><span class="line">        User user = userService.findUserByName(username);</span><br><span class="line">        System.out.println(<span class="string">"获取到的密码"</span> + user.getUpwd());</span><br><span class="line">        <span class="comment">// 2.返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user, user.getUpwd(), <span class="keyword">this</span>.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-Bean注册"><a href="#5-2-Bean注册" class="headerlink" title="5.2 Bean注册"></a>5.2 Bean注册</h3><h4 id="1-ShiroRealm"><a href="#1-ShiroRealm" class="headerlink" title="1. ShiroRealm"></a>1. ShiroRealm</h4><p>将实现好的 ShiroRealm 注册为Bean，并初始化 <code>WebSecurityManager</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Realm <span class="title">realm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AuthRealm();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">securityManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        securityManager.setRealm(realm());</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-URL配置"><a href="#2-URL配置" class="headerlink" title="2. URL配置"></a>2. URL配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"shiroFilterFactoryBean "</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilterFactoryBean</span><span class="params">(@Qualifier(<span class="string">"securityManager"</span>)</span> SecurityManager manager) </span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean bean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        bean.setSecurityManager(manager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.定义URL拦截链</span></span><br><span class="line">        LinkedHashMap&lt;String, String&gt; filterChainDefinitionMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// authc:所有url都必须认证通过才可以访问; anon:所有url都都可以匿名访问</span></span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/login.*"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/logout*"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/hello"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/defaultKaptcha"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/index.*"</span>, <span class="string">"authc"</span>);</span><br><span class="line">        bean.setFilterChainDefinitionMap(filterChainDefinitionMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.配置用于登录的url和登录成功的url</span></span><br><span class="line">        bean.setLoginUrl(<span class="string">"/login"</span>);</span><br><span class="line">        bean.setSuccessUrl(<span class="string">"/index"</span>);</span><br><span class="line">        bean.setUnauthorizedUrl(<span class="string">"/403"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//url配置</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterChainDefinition <span class="title">shiroFilterChainDefinition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultShiroFilterChainDefinition chainDefinition = <span class="keyword">new</span> DefaultShiroFilterChainDefinition();</span><br><span class="line">        <span class="comment">// logged in users with the 'admin' role</span></span><br><span class="line">        chainDefinition.addPathDefinition(<span class="string">"/admin/**"</span>, <span class="string">"authc, roles[admin]"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// logged in users with the 'document:read' permission</span></span><br><span class="line">        chainDefinition.addPathDefinition(<span class="string">"/docs/**"</span>, <span class="string">"authc, perms[document:read]"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// all other paths require a logged in user</span></span><br><span class="line">        chainDefinition.addPathDefinition(<span class="string">"/**"</span>, <span class="string">"authc"</span>);</span><br><span class="line">        <span class="keyword">return</span> chainDefinition;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-404问题"><a href="#3-404问题" class="headerlink" title="3. 404问题"></a>3. 404问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfiguration</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解决spring aop和注解配置一起使用的bug。如果您在使用shiro注解配置的同时，引入了spring aop的starter，</span></span><br><span class="line"><span class="comment">     * 会有一个奇怪的问题，导致shiro注解的请求，不能被映射，需加入这个配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DefaultAdvisorAutoProxyCreator <span class="title">getDefaultAdvisorAutoProxyCreator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator = <span class="keyword">new</span> DefaultAdvisorAutoProxyCreator();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * setUsePrefix(false)用于解决一个奇怪的bug。在引入spring aop的情况下。</span></span><br><span class="line"><span class="comment">         * 在<span class="doctag">@Controller</span>注解的类的方法中加入<span class="doctag">@RequiresRole</span>等shiro注解，会导致该方法无法映射请求，导致返回404。</span></span><br><span class="line"><span class="comment">         * 加入这项配置能解决这个bug</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        defaultAdvisorAutoProxyCreator.setUsePrefix(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> defaultAdvisorAutoProxyCreator;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-页面"><a href="#6-页面" class="headerlink" title="6. 页面"></a>6. 页面</h2><h3 id="6-1-login-html"><a href="#6-1-login-html" class="headerlink" title="6.1 login.html"></a>6.1 login.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户登陆<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"uname"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"upwd"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登陆"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-2-index-html"><a href="#6-2-index-html" class="headerlink" title="6.2 index.html"></a>6.2 index.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:shiro</span>=<span class="string">"http://www.pollix.at/thymeleaf/shiro"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">欢迎您，<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.uname&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasPermission</span>=<span class="string">"add"</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasPermission</span>=<span class="string">"delete"</span>&gt;</span>删除用户<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasPermission</span>=<span class="string">"update"</span>&gt;</span>更新用户<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasPermission</span>=<span class="string">"query"</span>&gt;</span>查询用户<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;logout&#125;"</span>&gt;</span>点我注销<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-Controller"><a href="#7-Controller" class="headerlink" title="7. Controller"></a>7. Controller</h2><h3 id="1-UserController"><a href="#1-UserController" class="headerlink" title="1. UserController"></a>1. UserController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(HttpServletRequest request, User inuser, String uname, String upwd)</span> </span>&#123;</span><br><span class="line">        UsernamePasswordToken usernamePasswordToken = <span class="keyword">new</span> UsernamePasswordToken(uname, upwd);</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//登录</span></span><br><span class="line">            subject.login(usernamePasswordToken);</span><br><span class="line">            User user = (User) subject.getPrincipal();</span><br><span class="line">            request.getSession().setAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/logout"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">logout</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">// 执行注销</span></span><br><span class="line">        <span class="keyword">if</span> (subject.isAuthenticated()) &#123;</span><br><span class="line">            subject.logout();</span><br><span class="line">        &#125;</span><br><span class="line">        request.getSession().removeAttribute(<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-异常处理"><a href="#2-异常处理" class="headerlink" title="2. 异常处理"></a>2. 异常处理</h3><p>些常见的<strong>登录异常</strong>如下表，可按业务需要使用：</p><table><thead><tr><th>异常</th><th>描述</th></tr></thead><tbody><tr><td>UnknownAccountException</td><td>找不到用户</td></tr><tr><td>IncorrectCredentialsException</td><td>用户名密码不正确</td></tr><tr><td>LockedAccountException</td><td>用户被锁定</td></tr><tr><td>ExcessiveAttemptsException</td><td>密码重试超过次数</td></tr><tr><td>ExpiredCredentialsException</td><td>密钥已经过期</td></tr></tbody></table><p><strong>注意</strong> ：需要模糊处理账户或密码错误等情况。</p><h2 id="8-Thymeleaf引入Shiro标签"><a href="#8-Thymeleaf引入Shiro标签" class="headerlink" title="8. Thymeleaf引入Shiro标签"></a>8. Thymeleaf引入Shiro标签</h2><h3 id="8-1-引入thymeleaf-extras-shiro"><a href="#8-1-引入thymeleaf-extras-shiro" class="headerlink" title="8.1 引入thymeleaf-extras-shiro"></a>8.1 引入thymeleaf-extras-shiro</h3><p>在<code>pom.xml</code>中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-2-Shiro配置文件修改"><a href="#8-2-Shiro配置文件修改" class="headerlink" title="8.2 Shiro配置文件修改"></a>8.2 Shiro配置文件修改</h3><p>引入依赖后，需要在ShiroConfig中配置该方言标签：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thymeleaf中使用shiro标签</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroDialect <span class="title">shiroDialect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ShiroDialect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3-使用"><a href="#8-3-使用" class="headerlink" title="8.3 使用"></a>8.3 使用</h3><h4 id="1-html中引入"><a href="#1-html中引入" class="headerlink" title="1. html中引入"></a>1. html中引入</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:shiro</span>=<span class="string">"http://www.pollix.at/thymeleaf/shiro"</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasPermission</span>=<span class="string">"add"</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有<code>add</code>权限时才会显示<code>添加用户</code></p><h4 id="3-例子"><a href="#3-例子" class="headerlink" title="3. 例子"></a>3. 例子</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:shiro</span>=<span class="string">"http://www.pollix.at/thymeleaf/shiro"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">欢迎您，<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.uname&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasPermission</span>=<span class="string">"add"</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasPermission</span>=<span class="string">"delete"</span>&gt;</span>删除用户<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasPermission</span>=<span class="string">"update"</span>&gt;</span>更新用户<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasPermission</span>=<span class="string">"query"</span>&gt;</span>查询用户<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;logout&#125;"</span>&gt;</span>点我注销<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-测试"><a href="#9-测试" class="headerlink" title="9. 测试"></a>9. 测试</h2><p>运行程序后进入登录页面，登录用户<code>张三</code>可以看到</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">添加用户</span><br><span class="line">删除用户</span><br><span class="line">更新用户</span><br><span class="line">查询用户</span><br></pre></td></tr></table></figure><p>所有的四个操作。</p><p>登录用户<code>李四</code>只能看到</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查询用户</span><br></pre></td></tr></table></figure><p>说明Shiro权限控制配置成功了。</p><h2 id="10-参考"><a href="#10-参考" class="headerlink" title="10. 参考"></a>10. 参考</h2><p><code>官方文档：http://shiro.apache.org/documentation.html</code></p><p><code>https://mrbird.cc/Spring-Boot-Themeleaf%20Shiro%20tag.html</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了如何在SpringBoot项目中整合Shiro安全框架，包括详细步骤和具体实例代码。&lt;/p&gt;
    
    </summary>
    
      <category term="Shiro" scheme="https://www.lixueduan.com/categories/Shiro/"/>
    
    
      <category term="Shiro" scheme="https://www.lixueduan.com/tags/Shiro/"/>
    
  </entry>
  
  <entry>
    <title>Shiro安全框架(一)---什么是Shiro</title>
    <link href="https://www.lixueduan.com/posts/7dd8d38.html"/>
    <id>https://www.lixueduan.com/posts/7dd8d38.html</id>
    <published>2019-03-25T14:00:00.000Z</published>
    <updated>2019-04-15T13:47:18.683Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要讲述了什么是RBAC权限控制，同时对Shiro安全框架做了简单介绍。</p><a id="more"></a><blockquote><p><strong><a href="https://www.lixueduan.com/categories/Shiro/">Shiro安全框架系列文章目录</a></strong></p><p><a href="https://www.lixueduan.com/posts/7dd8d38.html">Shiro安全框架(一)—什么是Shiro</a></p><p><a href="https://www.lixueduan.com/posts/fd462737.html">Shiro安全框架(二)—SpringBoot整合Shiro</a></p><p> <a href="https://www.lixueduan.com/posts/f8844037.html">Shiro安全框架(三)—Shiro组件详解</a></p><p>源码下载：<a href="https://github.com/illusorycloud/springboot-learning" target="_blank" rel="noopener">GItHub</a></p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p></blockquote><h2 id="1-RBAC权限控制"><a href="#1-RBAC权限控制" class="headerlink" title="1. RBAC权限控制"></a>1. RBAC权限控制</h2><p>RBAC：<code>Role-Based Access Control</code>基于角色的访问控制</p><h3 id="1-1-RBAC1-0"><a href="#1-1-RBAC1-0" class="headerlink" title="1.1 RBAC1.0"></a>1.1 RBAC1.0</h3><p>用户表 角色表 菜单表(权限表)  和两个中间表 用户-角色表 角色-菜单表。</p><p>菜单表中存放所有的功能，角色表中设置多种角色(职位)，权限赋给角色，然后在将角色关联到用户上，这样就不用给每个用户都赋值权限了。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/shiro/rbac-base.png" alt="rbac1.0"></p><h3 id="1-2-RBAC2-0"><a href="#1-2-RBAC2-0" class="headerlink" title="1.2 RBAC2.0"></a>1.2 RBAC2.0</h3><p>随着项目的扩大，人数特别特别多了，给每个用户赋角色都很麻烦，然后又添加了一个<code>用户组表</code>,对用户进行分组，如果角色也特别特别多，那么在加一个<code>角色组表</code>，用户组与用户管理，角色组与角色关联，最后用户组再与角色组关联。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/shiro/rbac-usergroup.png" alt=""></p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/shiro/rbac-permission.png" alt=""></p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/shiro/rbac-all.png" alt="rbac2.0"></p><h2 id="2-Shiro"><a href="#2-Shiro" class="headerlink" title="2. Shiro"></a>2. Shiro</h2><h3 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h3><p>Java中安全管理框架有<code>spring security</code>和<code>shiro</code>，其中<code>spring security</code>依赖于<code>spring</code>，且比较复杂，学习曲线比较该，<code>shiro</code>比较简单且独立，java se单机环境都可以使用。</p><h3 id="2-2-名词解释"><a href="#2-2-名词解释" class="headerlink" title="2.2 名词解释"></a>2.2 名词解释</h3><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/shiro/ShiroFeatures_Authentication.png" alt=""></p><p><strong>Shiro是一个强大易用的Java安全框架,提供了认证、授权、加密和会话管理等功能</strong>。</p><ul><li><strong>Authentication</strong>：身份认证/登录，验证用户是不是拥有相应的身份；</li><li><strong>Authorization</strong>：授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情，常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限；</li><li><strong>Session Manager</strong>：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通JavaSE环境的，也可以是如Web环境的；</li><li><strong>Cryptography</strong>：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；</li><li><strong>Web Support</strong>：Web支持，可以非常容易的集成到Web环境；</li><li><strong>Caching</strong>：缓存，比如用户登录后，其用户信息、拥有的角色/权限不必每次去查，这样可以提高效率；</li><li><strong>Concurrency</strong>：shiro支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；</li><li><strong>Testing</strong>：提供测试支持；</li><li><strong>Run As</strong>：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；</li><li><strong>Remember Me</strong>：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了。</li></ul><p><strong>记住一点，Shiro不会去维护用户、维护权限；这些需要我们自己去设计提供；然后通过相应的接口注入给Shiro即可</strong>。</p><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/shiro/shiro-seq.png" alt=""></p><p>可以看到：应用代码直接交互的对象是Subject，也就是说Shiro的对外API核心就是Subject；其每个API的含义：</p><ul><li><strong>Subject</strong>：主体，代表了当前“用户”，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是Subject，如网络爬虫，机器人等；即一个抽象概念；所有Subject都绑定到SecurityManager，与Subject的所有交互都会委托给SecurityManager；可以把Subject认为是一个门面；SecurityManager才是实际的执行者；</li><li><strong>SecurityManager</strong>：安全管理器；即所有与安全有关的操作都会与SecurityManager交互；且它管理着所有Subject；可以看出它是Shiro的核心，它负责与后边介绍的其他组件进行交互，如果学习过SpringMVC，你可以把它看成DispatcherServlet前端控制器；</li><li><strong>Realm</strong>：域，Shiro从从Realm获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么它需要从Realm获取相应的用户进行比较以确定用户身份是否合法；也需要从Realm得到用户相应的角色/权限进行验证用户是否能进行操作；可以把Realm看成DataSource，即安全数据源。</li></ul><h3 id="2-3-具体架构"><a href="#2-3-具体架构" class="headerlink" title="2.3 具体架构"></a>2.3 具体架构</h3><p><img src="https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/shiro/shiro-crchitecture.png" alt=""></p><ul><li><strong>Subject</strong>：主体，可以看到主体可以是任何可以与应用交互的“用户”；</li><li><strong>SecurityManager</strong>：相当于SpringMVC中的DispatcherServlet或者Struts2中的FilterDispatcher；是Shiro的心脏；所有具体的交互都通过SecurityManager进行控制；它管理着所有Subject、且负责进行认证和授权、及会话、缓存的管理。</li><li><strong>Authenticator</strong>：认证器，负责主体认证的，这是一个扩展点，如果用户觉得Shiro默认的不好，可以自定义实现；其需要认证策略（Authentication Strategy），即什么情况下算用户认证通过了；</li><li><strong>Authrizer</strong>：授权器，或者访问控制器，用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能；</li><li><strong>Realm</strong>：可以有1个或多个Realm，可以认为是安全实体数据源，即用于获取安全实体的；可以是JDBC实现，也可以是LDAP实现，或者内存实现等等；由用户提供；注意：Shiro不知道你的用户/权限存储在哪及以何种格式存储；所以我们一般在应用中都需要实现自己的Realm；</li><li><strong>SessionManager</strong>：如果写过Servlet就应该知道Session的概念，Session呢需要有人去管理它的生命周期，这个组件就是SessionManager；而Shiro并不仅仅可以用在Web环境，也可以用在如普通的JavaSE环境、EJB等环境；所有呢，Shiro就抽象了一个自己的Session来管理主体与应用之间交互的数据；这样的话，比如我们在Web环境用，刚开始是一台Web服务器；接着又上了台EJB服务器；这时想把两台服务器的会话数据放到一个地方，这个时候就可以实现自己的分布式会话（如把数据放到Memcached服务器）；</li><li><strong>SessionDAO</strong>：DAO大家都用过，数据访问对象，用于会话的CRUD，比如我们想把Session保存到数据库，那么可以实现自己的SessionDAO，通过如JDBC写到数据库；比如想把Session放到Memcached中，可以实现自己的Memcached SessionDAO；另外SessionDAO中可以使用Cache进行缓存，以提高性能；</li><li><strong>CacheManager</strong>：缓存控制器，来管理如用户、角色、权限等的缓存的；因为这些数据基本上很少去改变，放到缓存中后可以提高访问的性能</li><li><strong>Cryptography</strong>：密码模块，Shiro提高了一些常见的加密组件用于如密码加密/解密的。</li></ul><h2 id="3-参考"><a href="#3-参考" class="headerlink" title="3. 参考"></a>3. 参考</h2><p><code>https://blog.csdn.net/yangwenxue_admin/article/details/73936803</code></p><p><code>官方文档：http://shiro.apache.org/documentation.html</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要讲述了什么是RBAC权限控制，同时对Shiro安全框架做了简单介绍。&lt;/p&gt;
    
    </summary>
    
      <category term="Shiro" scheme="https://www.lixueduan.com/categories/Shiro/"/>
    
    
      <category term="Shiro" scheme="https://www.lixueduan.com/tags/Shiro/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud入门系列(九)---服务监控  Spring Boot Admin</title>
    <link href="https://www.lixueduan.com/posts/14927f8f.html"/>
    <id>https://www.lixueduan.com/posts/14927f8f.html</id>
    <published>2019-03-23T14:00:00.000Z</published>
    <updated>2019-04-11T14:09:15.754Z</updated>
    
    <content type="html"><![CDATA[<p>随着开发周期的推移，项目会不断变大，切分出的服务也会越来越多，这时一个个的微服务构成了错综复杂的系统，各个服务的信息收集与监控变得十分艰难。</p><a id="more"></a><blockquote><p><strong><a href="https://www.lixueduan.com/categories/SpringCloud/">SpringCloud入门系列文章目录</a></strong></p><p> <a href="https://www.lixueduan.com/posts/c41e9ac1.html">SpringCloud入门系列(一)—统一依赖管理 Dependencies</a></p><p> <a href="https://www.lixueduan.com/posts/8735f06d.html">SpringCloud入门系列(二)—服务注册与发现</a></p><p> <a href="https://www.lixueduan.com/posts/cc38b97d.html">SpringCloud入门系列(三)—服务提供者 Provider</a></p><p> <a href="https://www.lixueduan.com/posts/bf9c3958.html">SpringCloud入门系列(四)—服务消费者 Consumer</a></p><p> <a href="https://www.lixueduan.com/posts/3cc75bae.html">SpringCloud入门系列(五)—服务熔断 Hystrix</a></p><p> <a href="https://www.lixueduan.com/posts/abd301c1.html">SpringCloud入门系列(六)—路由网关 Zuul</a></p><p> <a href="https://www.lixueduan.com/posts/68aa18ee.html">SpringCloud入门系列(七)—分布式配置中心 Spring Cloud Config</a></p><p> <a href="https://www.lixueduan.com/posts/c9420366.html">SpringCloud入门系列(八)—服务链路追踪 ZipKin</a></p><p><a href="https://www.lixueduan.com/posts/14927f8f.html">SpringCloud入门系列(九)—服务监控 Spring Boot Admin</a></p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p><p>Demo下载：<a href="https://github.com/illusorycloud/springboot-learning" target="_blank" rel="noopener">GItHub</a></p></blockquote><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>对于各个微服务系统的健康状态、会话数量、并发数、服务资源、延迟等度量信息的收集就成为了一个挑战。<code>Spring Boot Admin</code> 应运而生，它正式基于这些需求开发出的一套功能强大的监控管理系统。</p><p><code>Spring Boot Admin</code> 有两个角色组成，一个是 <code>Spring Boot Admin Serve</code>r，一个是 <code>Spring Boot Admin Client</code>。</p><h2 id="2-Spring-Boot-Admin-服务端"><a href="#2-Spring-Boot-Admin-服务端" class="headerlink" title="2. Spring Boot Admin 服务端"></a>2. Spring Boot Admin 服务端</h2><p>创建一个工程名为 <code>hello-spring-cloud-admin</code> 的项目作为服务端。</p><h3 id="2-1-pom-xml"><a href="#2-1-pom-xml" class="headerlink" title="2.1 pom.xml"></a>2.1 pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lixueduan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../hello-spring-cloud-dependencies/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-admin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-spring-cloud-admin<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.lixueduan.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inceptionYear</span>&gt;</span>2019-Now<span class="tag">&lt;/<span class="name">inceptionYear</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jolokia<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jolokia-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot End --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud End --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.illusory.hello.spring.cloud.admin.AdminApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要增加了 2 个依赖，<code>org.jolokia:jolokia-core</code>、<code>de.codecentric:spring-boot-admin-starter-server</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jolokia<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jolokia-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中 <code>spring-boot-admin-starter-server</code> 的版本号为：<code>2.0.0</code>，这里没写版本号是因为我已将版本号托管到 <code>dependencies</code> 项目中</p><h3 id="2-2-Application"><a href="#2-2-Application" class="headerlink" title="2.2 Application"></a>2.2 Application</h3><p>通过 <code>@EnableAdminServer</code> 注解开启 Admin 功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.admin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.codecentric.boot.admin.server.config.EnableAdminServer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableAdminServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(AdminApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-application-yml"><a href="#2-3-application-yml" class="headerlink" title="2.3 application.yml"></a>2.3 application.yml</h3><p>设置端口号为：<code>8084</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">hello-spring-cloud-admin</span></span><br><span class="line"><span class="attr">  zipkin:</span></span><br><span class="line"><span class="attr">    base-url:</span> <span class="attr">http://localhost:9411</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8084</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoint:</span></span><br><span class="line"><span class="attr">    health:</span></span><br><span class="line"><span class="attr">      show-details:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">health,info</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><p>主要增加了 Spring Boot Admin Server 的相关配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoint:</span></span><br><span class="line"><span class="attr">    health:</span></span><br><span class="line"><span class="attr">      show-details:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">health,info</span></span><br></pre></td></tr></table></figure><h3 id="2-4-测试访问监控中心"><a href="#2-4-测试访问监控中心" class="headerlink" title="2.4. 测试访问监控中心"></a>2.4. 测试访问监控中心</h3><p>打开浏览器访问：<code>http://localhost:8084</code></p><h2 id="3-Spring-Boot-Admin-客户端"><a href="#3-Spring-Boot-Admin-客户端" class="headerlink" title="3. Spring Boot Admin 客户端"></a>3. Spring Boot Admin 客户端</h2><p>创建一个工程名为 <code>hello-spring-cloud-admin-client</code> 的项目作为客户端。</p><h3 id="3-1-pom-xml"><a href="#3-1-pom-xml" class="headerlink" title="3.1 pom.xml"></a>3.1 pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lixueduan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../hello-spring-cloud-dependencies/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-admin-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-spring-cloud-admin-client<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.lixueduan.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inceptionYear</span>&gt;</span>2019-Now<span class="tag">&lt;/<span class="name">inceptionYear</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jolokia<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jolokia-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot End --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud End --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.illusory.hello.spring.cloud.admin.client.AdminClientApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要增加了 2 个依赖，<code>org.jolokia:jolokia-core</code>、<code>de.codecentric:spring-boot-admin-starter-client</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jolokia<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jolokia-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中 <code>spring-boot-admin-starter-client</code> 的版本号为：<code>2.0.0</code>，这里没写版本号是因为我已将版本号托管到 <code>dependencies</code> 项目中</p><h3 id="3-2-application-yml"><a href="#3-2-application-yml" class="headerlink" title="3.2 application.yml"></a>3.2 application.yml</h3><p>设置端口号为：<code>8085</code>，并设置 Spring Boot Admin 的服务端地址</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">hello-spring-cloud-admin-client</span></span><br><span class="line"><span class="attr">  boot:</span></span><br><span class="line"><span class="attr">    admin:</span></span><br><span class="line"><span class="attr">      client:</span></span><br><span class="line"><span class="attr">        url:</span> <span class="attr">http://localhost:8084</span></span><br><span class="line"><span class="attr">  zipkin:</span></span><br><span class="line"><span class="attr">    base-url:</span> <span class="attr">http://localhost:9411</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8085</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><p>主要增加了 Spring Boot Admin Client 相关配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  boot:</span></span><br><span class="line"><span class="attr">    admin:</span></span><br><span class="line"><span class="attr">      client:</span></span><br><span class="line"><span class="attr">        url:</span> <span class="attr">http://localhost:8084</span></span><br></pre></td></tr></table></figure><h3 id="3-3-测试"><a href="#3-3-测试" class="headerlink" title="3.3 测试"></a>3.3 测试</h3><p>重启服务后再次去访问服务端，若能看到新增的服务则说明成功.</p><h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h2><p>本章节我们主要搭建了<code>Spring-Boot-Admin</code>项目的服务端和客户端，实现了对服务的动态监控。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着开发周期的推移，项目会不断变大，切分出的服务也会越来越多，这时一个个的微服务构成了错综复杂的系统，各个服务的信息收集与监控变得十分艰难。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud入门系列(八)---服务链路追踪 ZipKin</title>
    <link href="https://www.lixueduan.com/posts/c9420366.html"/>
    <id>https://www.lixueduan.com/posts/c9420366.html</id>
    <published>2019-03-22T14:00:00.000Z</published>
    <updated>2019-04-11T14:09:30.563Z</updated>
    
    <content type="html"><![CDATA[<p>微服务架构是通过业务来划分服务的，使用 REST 调用。对外暴露的一个接口，可能需要很多个服务协同才能完成这个接口功能，如果链路上任何一个服务出现问题或者网络超时，都会形成导致接口调用失败。随着业务的不断扩张，服务之间互相调用会越来越复杂。</p><a id="more"></a><blockquote><p><strong><a href="https://www.lixueduan.com/categories/SpringCloud/">SpringCloud入门系列文章目录</a></strong></p><p><a href="https://www.lixueduan.com/posts/c41e9ac1.html">SpringCloud入门系列(一)—统一依赖管理 Dependencies</a></p><p><a href="https://www.lixueduan.com/posts/8735f06d.html">SpringCloud入门系列(二)—服务注册与发现</a></p><p><a href="https://www.lixueduan.com/posts/cc38b97d.html">SpringCloud入门系列(三)—服务提供者 Provider</a></p><p><a href="https://www.lixueduan.com/posts/bf9c3958.html">SpringCloud入门系列(四)—服务消费者 Consumer</a></p><p><a href="https://www.lixueduan.com/posts/3cc75bae.html">SpringCloud入门系列(五)—服务熔断 Hystrix</a></p><p><a href="https://www.lixueduan.com/posts/abd301c1.html">SpringCloud入门系列(六)—路由网关 Zuul</a></p><p><a href="https://www.lixueduan.com/posts/68aa18ee.html">SpringCloud入门系列(七)—分布式配置中心 Spring Cloud Config</a></p><p><a href="https://www.lixueduan.com/posts/c9420366.html">SpringCloud入门系列(八)—服务链路追踪 ZipKin</a></p><p><a href="https://www.lixueduan.com/posts/14927f8f.html">SpringCloud入门系列(九)—服务监控 Spring Boot Admin</a></p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p><p>Demo下载：<a href="https://github.com/illusorycloud/springboot-learning" target="_blank" rel="noopener">GItHub</a></p><p><strong><a href="https://www.lixueduan.com/categories/SpringCloud/">SpringCloud入门系列文章目录</a></strong></p></blockquote><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>ZipKin 是一个开放源代码的分布式跟踪系统，由 Twitter 公司开源，它致力于收集服务的定时数据，以解决微服务架构中的延迟问题，包括数据的收集、存储、查找和展现。它的理论模型来自于 Google Dapper 论文。</p><p>每个服务向 ZipKin 报告计时数据，ZipKin 会根据调用关系通过 ZipKin UI 生成依赖关系图，显示了多少跟踪请求通过每个服务，该系统让开发者可通过一个 Web 前端轻松的收集和分析数据，例如用户每次请求服务的处理时间等，可方便的监测系统中存在的瓶颈。</p><h2 id="2-创建-ZipKin-服务端"><a href="#2-创建-ZipKin-服务端" class="headerlink" title="2. 创建 ZipKin 服务端"></a>2. 创建 ZipKin 服务端</h2><p>创建一个工程名为 <code>hello-spring-cloud-zipkin</code> 的项目</p><h3 id="2-1-pom-xml"><a href="#2-1-pom-xml" class="headerlink" title="2.1 pom.xml"></a>2.1 pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lixueduan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../hello-spring-cloud-dependencies/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-spring-cloud-zipkin<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.lixueduan.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inceptionYear</span>&gt;</span>2019-Now<span class="tag">&lt;/<span class="name">inceptionYear</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot End --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-autoconfigure-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud End --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.illusory.hello.spring.cloud.zipkin.ZipKinApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要增加了 3 个依赖，<code>io.zipkin.java:zipkin</code>、<code>io.zipkin.java:zipkin-server</code>、<code>io.zipkin.java:zipkin-autoconfigure-ui</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-autoconfigure-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意版本号为：<code>2.10.1</code>，这里没写版本号是因为我已将版本号托管到 <code>dependencies</code> 项目中</p><h3 id="2-2-Application"><a href="#2-2-Application" class="headerlink" title="2.2 Application"></a>2.2 Application</h3><p>通过 <code>@EnableZipkinServer</code> 注解开启 Zipkin Server 功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.zipkin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"><span class="keyword">import</span> zipkin.server.internal.EnableZipkinServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableZipkinServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZipKinApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZipKinApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-application-yml"><a href="#2-3-application-yml" class="headerlink" title="2.3 application.yml"></a>2.3 application.yml</h3><p>设置端口号为：<code>9411</code>，该端口号为 Zipkin Server 的默认端口号</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">hello-spring-cloud-zipkin</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9411</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br><span class="line">      </span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  metrics:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        auto-time-requests:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="3-追踪服务"><a href="#3-追踪服务" class="headerlink" title="3. 追踪服务"></a>3. 追踪服务</h2><p>在 <strong>所有需要被追踪的项目（大部分需要被追踪，包括 Eureka Server）</strong> 中增加 <code>spring-cloud-starter-zipkin</code> 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这些项目的 <code>application.yml</code> 配置文件中增加 Zipkin Server 的地址即可</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  zipkin:</span></span><br><span class="line"><span class="attr">    base-url:</span> <span class="attr">http://localhost:9411</span></span><br></pre></td></tr></table></figure><h2 id="4-测试追踪"><a href="#4-测试追踪" class="headerlink" title="4. 测试追踪"></a>4. 测试追踪</h2><p>启动全部项目，打开浏览器访问：<code>http://localhost:9411/</code>能看到各个服务的具体调用流程。</p><h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h2><p>本章我们主要使用<code>ZipKin</code>组件实现了服务的链路追踪，方便的统计服务之间的调用情况等信息。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微服务架构是通过业务来划分服务的，使用 REST 调用。对外暴露的一个接口，可能需要很多个服务协同才能完成这个接口功能，如果链路上任何一个服务出现问题或者网络超时，都会形成导致接口调用失败。随着业务的不断扩张，服务之间互相调用会越来越复杂。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud入门系列(七)---分布式配置中心 Spring Cloud Config</title>
    <link href="https://www.lixueduan.com/posts/68aa18ee.html"/>
    <id>https://www.lixueduan.com/posts/68aa18ee.html</id>
    <published>2019-03-21T14:00:00.000Z</published>
    <updated>2019-04-11T14:09:46.802Z</updated>
    
    <content type="html"><![CDATA[<p>在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件。</p><a id="more"></a><blockquote><p><strong><a href="https://www.lixueduan.com/categories/SpringCloud/">SpringCloud入门系列文章目录</a></strong></p><p><a href="https://www.lixueduan.com/posts/c41e9ac1.html">SpringCloud入门系列(一)—统一依赖管理 Dependencies</a></p><p><a href="https://www.lixueduan.com/posts/8735f06d.html">SpringCloud入门系列(二)—服务注册与发现</a></p><p><a href="https://www.lixueduan.com/posts/cc38b97d.html">SpringCloud入门系列(三)—服务提供者 Provider</a></p><p><a href="https://www.lixueduan.com/posts/bf9c3958.html">SpringCloud入门系列(四)—服务消费者 Consumer</a></p><p><a href="https://www.lixueduan.com/posts/3cc75bae.html">SpringCloud入门系列(五)—服务熔断 Hystrix</a></p><p><a href="https://www.lixueduan.com/posts/abd301c1.html">SpringCloud入门系列(六)—路由网关 Zuul</a></p><p><a href="https://www.lixueduan.com/posts/68aa18ee.html">SpringCloud入门系列(七)—分布式配置中心 Spring Cloud Config</a></p><p><a href="https://www.lixueduan.com/posts/c9420366.html">SpringCloud入门系列(八)—服务链路追踪 ZipKin</a></p><p><a href="https://www.lixueduan.com/posts/14927f8f.html">SpringCloud入门系列(九)—服务监控 Spring Boot Admin</a></p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p><p>Demo下载：<a href="https://github.com/illusorycloud/springboot-learning" target="_blank" rel="noopener">GItHub</a></p></blockquote><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>在 Spring Cloud 中，有分布式配置中心组件 Spring Cloud Config ，它支持配置服务放在配置服务的内存中（即本地），也支持放在远程 Git 仓库中。在 Spring Cloud Config 组件中，分两个角色，一是 Config Server，二是 Config Client。</p><h2 id="2-搭建分布式配置中心服务端"><a href="#2-搭建分布式配置中心服务端" class="headerlink" title="2. 搭建分布式配置中心服务端"></a>2. 搭建分布式配置中心服务端</h2><p>创建一个工程名为 <code>hello-spring-cloud-config</code> 的项目</p><h3 id="2-1-pom-xml"><a href="#2-1-pom-xml" class="headerlink" title="2.1 pom.xml"></a>2.1 pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lixueduan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../hello-spring-cloud-dependencies/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-spring-cloud-config<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.lixueduan.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inceptionYear</span>&gt;</span>2019-Now<span class="tag">&lt;/<span class="name">inceptionYear</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot End --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud End --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.illusory.hello.spring.cloud.config.ConfigApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要增加了 <code>spring-cloud-config-server</code> 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-Application"><a href="#2-2-Application" class="headerlink" title="2.2 Application"></a>2.2 Application</h3><p>通过 <code>@EnableConfigServer</code> 注解，开启配置服务器功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-application-yml"><a href="#2-3-application-yml" class="headerlink" title="2.3 application.yml"></a>2.3 application.yml</h3><p>增加 Config 相关配置，并设置端口号为：<code>8888</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">hello-spring-cloud-config</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      label:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        git:</span></span><br><span class="line"><span class="attr">          uri:</span> <span class="attr">https://github.com/topsale/spring-cloud-config</span></span><br><span class="line"><span class="attr">          search-paths:</span> <span class="string">respo</span></span><br><span class="line"><span class="attr">          username:</span></span><br><span class="line"><span class="attr">          password:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8888</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><p>相关配置说明，如下：</p><ul><li><code>spring.cloud.config.label</code>：配置仓库的分支</li><li><code>spring.cloud.config.server.git.uri</code>：配置 Git 仓库地址（GitHub、GitLab、码云 …）</li><li><code>spring.cloud.config.server.git.search-paths</code>：配置仓库路径（存放配置文件的目录）</li><li><code>spring.cloud.config.server.git.username</code>：访问 Git 仓库的账号</li><li><code>spring.cloud.config.server.git.password</code>：访问 Git 仓库的密码</li></ul><p>注意事项：</p><ul><li>如果使用 GitLab 作为仓库的话，<code>git.uri</code> 需要在结尾加上 <code>.git</code>，GitHub 则不用</li></ul><h3 id="附：HTTP-请求地址和资源文件映射"><a href="#附：HTTP-请求地址和资源文件映射" class="headerlink" title="附：HTTP 请求地址和资源文件映射"></a>附：HTTP 请求地址和资源文件映射</h3><ul><li><code>http://ip:port/{application}/{profile}[/{label}]</code></li><li><code>http://ip:port/{application}-{profile}.yml</code></li><li><code>http://ip:port/{label}/{application}-{profile}.yml</code></li><li><code>http://ip:port/{application}-{profile}.properties</code></li><li><code>http://ip:port/{label}/{application}-{profile}.properties</code></li></ul><h2 id="2-4-测试"><a href="#2-4-测试" class="headerlink" title="2.4 测试"></a>2.4 测试</h2><p>浏览器端访问：<code>http://localhost:8888/config-client/dev/master</code>显示如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Environment</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>config-client<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">profiles</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>master<span class="tag">&lt;/<span class="name">label</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>9646007f931753d7e96a6dcc9ae34838897a91df<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">state</span>/&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">propertySources</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">propertySources</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>https://github.com/test/spring-cloud-config/respo/config-client-dev.yml<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">source</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">foo</span>&gt;</span>foo version 1<span class="tag">&lt;/<span class="name">foo</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">demo.message</span>&gt;</span>Hello Spring Config<span class="tag">&lt;/<span class="name">demo.message</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">source</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">propertySources</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">propertySources</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">Environment</span>&gt;</span></span><br></pre></td></tr></table></figure><p>证明配置服务中心可以从远程程序获取配置信息</p><h2 id="3-搭建分布式配置中心客户端"><a href="#3-搭建分布式配置中心客户端" class="headerlink" title="3. 搭建分布式配置中心客户端"></a>3. 搭建分布式配置中心客户端</h2><h3 id="3-1-pom-xml"><a href="#3-1-pom-xml" class="headerlink" title="3.1 pom.xml"></a>3.1 pom.xml</h3><p>其他项目就可以作为客户端，在pom.xml中增加 <code>spring-cloud-starter-config</code> 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-application-yml"><a href="#3-2-application-yml" class="headerlink" title="3.2 application.yml"></a>3.2 application.yml</h3><p>增加 Config Client 相关配置，并设置端口号为：<code>8889</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">hello-spring-cloud-config-client</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      uri:</span> <span class="attr">http://localhost:8888</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">config-client</span></span><br><span class="line"><span class="attr">      label:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      profile:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8889</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><p>相关配置说明，如下：</p><ul><li><p><code>spring.cloud.config.uri</code>：配置服务中心的网址</p></li><li><p><code>spring.cloud.config.name</code>：配置文件名称的前缀</p></li><li><p><code>spring.cloud.config.label</code>：配置仓库的分支</p></li><li><p><code>spring.cloud.config.profile</code></p><p>：配置文件的环境标识</p><ul><li>dev：表示开发环境</li><li>test：表示测试环境</li><li>prod：表示生产环境</li></ul></li></ul><p>注意事项：</p><ul><li>配置服务器的默认端口为 <code>8888</code>，如果修改了默认端口，则客户端项目就不能在 <code>application.yml</code> 或 <code>application.properties</code> 中配置 <code>spring.cloud.config.uri</code>，必须在 <code>bootstrap.yml</code> 或是 <code>bootstrap.properties</code> 中配置，原因是 <code>bootstrap</code> 开头的配置文件会被优先加载和配置，切记。</li></ul><h3 id="附：开启-Spring-Boot-Profile"><a href="#附：开启-Spring-Boot-Profile" class="headerlink" title="附：开启 Spring Boot Profile"></a>附：开启 Spring Boot Profile</h3><p>我们在做项目开发的时候，生产环境和测试环境的一些配置可能会不一样，有时候一些功能也可能会不一样，所以我们可能会在上线的时候手工修改这些配置信息。但是 Spring 中为我们提供了 Profile 这个功能。我们只需要在启动的时候添加一个虚拟机参数，激活自己环境所要用的 Profile 就可以了。</p><p>操作起来很简单，只需要为不同的环境编写专门的配置文件，如：<code>application-dev.yml</code>、<code>application-prod.yml</code>， 启动项目时只需要增加一个命令参数 <code>--spring.profiles.active=环境配置</code> 即可，启动命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar hello-spring-cloud-web-admin-feign-1.0.0-SNAPSHOT.jar --spring.profiles.active=pro</span><br></pre></td></tr></table></figure><h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h2><p>本章记录了<code>SpringCloudConfig</code>分布式配置中心的搭建及其具体使用过程与<code>Spring Boot Profile</code>多环境配置。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud入门系列(六)---路由网关 Zuul</title>
    <link href="https://www.lixueduan.com/posts/abd301c1.html"/>
    <id>https://www.lixueduan.com/posts/abd301c1.html</id>
    <published>2019-03-20T14:00:00.000Z</published>
    <updated>2019-04-11T14:10:15.885Z</updated>
    
    <content type="html"><![CDATA[<p>在微服务架构中，需要几个基础的服务治理组件，包括服务注册与发现、服务消费、负载均衡、熔断器、智能路由、配置管理等，由这几个基础组件相互协作，共同组建了一个简单的微服务系统。<code>SpringCloud</code>中路由网关使用的是<code>Zuul</code>。</p><a id="more"></a><blockquote><p><strong><a href="https://www.lixueduan.com/categories/SpringCloud/">SpringCloud入门系列文章目录</a></strong></p><p><a href="https://www.lixueduan.com/posts/c41e9ac1.html">SpringCloud入门系列(一)—统一依赖管理 Dependencies</a></p><p><a href="https://www.lixueduan.com/posts/8735f06d.html">SpringCloud入门系列(二)—服务注册与发现</a></p><p><a href="https://www.lixueduan.com/posts/cc38b97d.html">SpringCloud入门系列(三)—服务提供者 Provider</a></p><p><a href="https://www.lixueduan.com/posts/bf9c3958.html">SpringCloud入门系列(四)—服务消费者 Consumer</a></p><p><a href="https://www.lixueduan.com/posts/3cc75bae.html">SpringCloud入门系列(五)—服务熔断 Hystrix</a></p><p><a href="https://www.lixueduan.com/posts/abd301c1.html">SpringCloud入门系列(六)—路由网关 Zuul</a></p><p><a href="https://www.lixueduan.com/posts/68aa18ee.html">SpringCloud入门系列(七)—分布式配置中心 Spring Cloud Config</a></p><p><a href="https://www.lixueduan.com/posts/c9420366.html">SpringCloud入门系列(八)—服务链路追踪 ZipKin</a></p><p><a href="https://www.lixueduan.com/posts/14927f8f.html">SpringCloud入门系列(九)—服务监控 Spring Boot Admin</a></p><p>更多文章欢迎访问我的个人博客–&gt;<a href="https://www.lixueduan.com/">幻境云图</a></p><p>Demo下载：<a href="https://github.com/illusorycloud/springboot-learning" target="_blank" rel="noopener">GItHub</a></p></blockquote><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>在 Spring Cloud 微服务系统中，一种常见的负载均衡方式是，客户端的请求首先经过负载均衡（Zuul、Ngnix），再到达服务网关（Zuul 集群），然后再到具体的服。服务统一注册到高可用的服务注册中心集群，服务的所有的配置文件由配置服务管理，配置服务的配置文件放在 GIT 仓库，方便开发人员随时改配置。</p><p>Zuul 的主要功能是路由转发和过滤器。路由功能是微服务的一部分，比如 <code>/api/user</code> 转发到到 User 服务，<code>/api/shop</code> 转发到到 Shop 服务。<code>Zuul</code>默认和 <code>Ribbon</code> 结合实现了负载均衡的功能。</p><h2 id="2-使用路由网关统一访问接口"><a href="#2-使用路由网关统一访问接口" class="headerlink" title="2. 使用路由网关统一访问接口"></a>2. 使用路由网关统一访问接口</h2><h3 id="2-1-创建路由网关项目"><a href="#2-1-创建路由网关项目" class="headerlink" title="2.1 创建路由网关项目"></a>2.1 创建路由网关项目</h3><h4 id="1-pom-xml-文件如下："><a href="#1-pom-xml-文件如下：" class="headerlink" title="1. pom.xml 文件如下："></a>1. pom.xml 文件如下：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lixueduan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../hello-spring-cloud-dependencies/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-cloud-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-spring-cloud-zuul<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.lixueduan.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inceptionYear</span>&gt;</span>2019-Now<span class="tag">&lt;/<span class="name">inceptionYear</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot End --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud End --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--指向启动类 用于jar包方式运行--&gt;</span>  <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.illusory.hello.spring.cloud.zuul.ZuulApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要是增加了 Zuul 的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-Application"><a href="#2-Application" class="headerlink" title="2. Application"></a>2. Application</h4><p>增加 <code>@EnableZuulProxy</code> 注解开启 Zuul 功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.zuul;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.EnableZuulProxy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-application-yml"><a href="#3-application-yml" class="headerlink" title="3. application.yml"></a>3. application.yml</h4><ul><li>设置端口号为：<code>8769</code></li><li>增加 Zuul 配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">hello-spring-cloud-zuul</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8769</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line">  <span class="comment">#api-a api-b是自定义的名字</span></span><br><span class="line"><span class="attr">    api-a:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/api/a/**</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">hello-spring-cloud-web-admin-ribbon</span></span><br><span class="line"><span class="attr">    api-b:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/api/b/**</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">hello-spring-cloud-web-admin-feign</span></span><br></pre></td></tr></table></figure><p>路由说明：</p><ul><li>以 <code>/api/a</code> 开头的请求都转发给 <code>hello-spring-cloud-web-admin-ribbon</code> 服务</li><li>以 <code>/api/b</code> 开头的请求都转发给 <code>hello-spring-cloud-web-admin-feign</code> 服务</li></ul><h3 id="2-2-测试访问"><a href="#2-2-测试访问" class="headerlink" title="2.2 测试访问"></a>2.2 测试访问</h3><p>依次运行<code>Eureka</code>、<code>Provider</code>、<code>Consumer</code>、<code>Zuul</code></p><p>打开浏览器访问：<code>http://localhost:8769/api/a/hi?message=HelloZuul</code> 浏览器显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi，your message is :&quot;HelloZuul&quot; i am from port：8763</span><br></pre></td></tr></table></figure><p>打开浏览器访问：<code>http://localhost:8769/api/b/hi?message=HelloZuul</code>浏览器显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi，your message is :&quot;HelloZuul&quot; i am from port：8763</span><br></pre></td></tr></table></figure><p>至此说明 Zuul 的路由功能配置成功</p><h3 id="2-3-配置网关路由失败时的回调"><a href="#2-3-配置网关路由失败时的回调" class="headerlink" title="2.3 配置网关路由失败时的回调"></a>2.3 配置网关路由失败时的回调</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.zuul.fallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.filters.route.FallbackProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.ClientHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 路由 hello-spring-cloud-web-admin-feign 失败时的回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAdminFeignFallbackProvider</span> <span class="keyword">implements</span> <span class="title">FallbackProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ServiceId，如果需要所有调用都支持回退，则 return "*" 或 return null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello-spring-cloud-web-admin-feign"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果请求服务失败，则返回指定的信息给调用者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> route</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientHttpResponse <span class="title">fallbackResponse</span><span class="params">(String route, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ClientHttpResponse() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 网关向 api 服务请求失败了，但是消费者客户端向网关发起的请求是成功的，</span></span><br><span class="line"><span class="comment">             * 不应该把 api 的 404,500 等问题抛给客户端</span></span><br><span class="line"><span class="comment">             * 网关和 api 服务集群对于客户端来说是黑盒</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> HttpStatus <span class="title">getStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> HttpStatus.OK;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRawStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> HttpStatus.OK.value();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getStatusText</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> HttpStatus.OK.getReasonPhrase();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> InputStream <span class="title">getBody</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">                Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                map.put(<span class="string">"status"</span>, <span class="number">200</span>);</span><br><span class="line">                map.put(<span class="string">"message"</span>, <span class="string">"无法连接，请检查您的网络"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ByteArrayInputStream(objectMapper.writeValueAsString(map).getBytes(<span class="string">"UTF-8"</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> HttpHeaders <span class="title">getHeaders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">                <span class="comment">// 和 getBody 中的内容编码一致</span></span><br><span class="line">                headers.setContentType(MediaType.APPLICATION_JSON_UTF8);</span><br><span class="line">                <span class="keyword">return</span> headers;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-使用路由网关的服务过滤功能"><a href="#3-使用路由网关的服务过滤功能" class="headerlink" title="3. 使用路由网关的服务过滤功能"></a>3. 使用路由网关的服务过滤功能</h2><p>Zuul 不仅仅只是路由，还有很多强大的功能，例如它的服务过滤功能，比如用在安全验证方面。</p><h3 id="3-1-创建服务过滤器"><a href="#3-1-创建服务过滤器" class="headerlink" title="3.1 创建服务过滤器"></a>3.1 创建服务过滤器</h3><p>继承 <code>ZuulFilter</code> 类并在类上增加 <code>@Component</code> 注解就可以使用服务过滤功能了，非常简单方便</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.illusory.hello.spring.cloud.zuul.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.ZuulFilter;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.context.RequestContext;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.exception.ZuulException;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(LoginFilter.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置过滤类型，有四种不同生命周期的过滤器类型</span></span><br><span class="line"><span class="comment">     * 1. pre：路由之前</span></span><br><span class="line"><span class="comment">     * 2. routing：路由之时</span></span><br><span class="line"><span class="comment">     * 3. post：路由之后</span></span><br><span class="line"><span class="comment">     * 4. error：发送错误调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置过滤的顺序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置是否需要过滤：true/需要，false/不需要</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤器的具体业务代码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ZuulException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = context.getRequest();</span><br><span class="line">        logger.info(<span class="string">"&#123;&#125; &gt;&gt;&gt; &#123;&#125;"</span>, request.getMethod(), request.getRequestURL().toString());</span><br><span class="line">        String token = request.getParameter(<span class="string">"token"</span>);</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="keyword">null</span>) &#123;</span><br><span class="line">            logger.warn(<span class="string">"Token is empty"</span>);</span><br><span class="line">            context.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            context.setResponseStatusCode(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                context.getResponse().getWriter().write(<span class="string">"Token is empty"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.info(<span class="string">"OK"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-名词解释"><a href="#3-2-名词解释" class="headerlink" title="3.2 名词解释"></a>3.2 名词解释</h3><h4 id="1-filterType"><a href="#1-filterType" class="headerlink" title="1. filterType"></a>1. filterType</h4><p>返回一个字符串代表过滤器的类型，在 Zuul 中定义了四种不同生命周期的过滤器类型</p><ul><li>pre：路由之前</li><li>routing：路由之时</li><li>post： 路由之后</li><li>error：发送错误调用</li></ul><h4 id="2-filterOrder"><a href="#2-filterOrder" class="headerlink" title="2. filterOrder"></a>2. filterOrder</h4><p>过滤的顺序</p><h4 id="3-shouldFilter"><a href="#3-shouldFilter" class="headerlink" title="3. shouldFilter"></a>3. shouldFilter</h4><p>是否需要过滤，这里是 <code>true</code>，需要过滤</p><h4 id="4-run"><a href="#4-run" class="headerlink" title="4. run"></a>4. run</h4><p>过滤器的具体业务代码</p><h3 id="3-3-测试过滤器"><a href="#3-3-测试过滤器" class="headerlink" title="3.3 测试过滤器"></a>3.3 测试过滤器</h3><p>浏览器访问：<code>http://localhost:8769/api/a/hi?message=HelloZuul</code> 网页显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Token is empty</span><br></pre></td></tr></table></figure><p>浏览器访问：<code>http://localhost:8769/api/b/hi?message=HelloZuul&amp;token=123</code> 网页显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi，your message is :&quot;HelloZuul&quot; i am from port：8763</span><br></pre></td></tr></table></figure><h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h2><p>到此为止我们使用<code>Zuul</code>路由网关成功实现了统一访问接口和服务过滤功能。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在微服务架构中，需要几个基础的服务治理组件，包括服务注册与发现、服务消费、负载均衡、熔断器、智能路由、配置管理等，由这几个基础组件相互协作，共同组建了一个简单的微服务系统。&lt;code&gt;SpringCloud&lt;/code&gt;中路由网关使用的是&lt;code&gt;Zuul&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.lixueduan.com/tags/SpringCloud/"/>
    
  </entry>
  
</feed>
