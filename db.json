{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/README.md","path":"README.md","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/myfavicon-32x32-me.png","path":"images/myfavicon-32x32-me.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/myfavicon-16x16-me.png","path":"images/myfavicon-16x16-me.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest-nomobile.min.js","path":"lib/canvas-nest/canvas-nest-nomobile.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/LICENSE","path":"lib/canvas-nest/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/README.md","path":"lib/canvas-nest/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"98fa9175b1bb7507f8f248bca30c048323c9daf3","modified":1545546846464},{"_id":"source/README.md","hash":"ec30dd4bbbdbb67701f32990c612ba508bc08a50","modified":1545930372180},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1545660806590},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1545660806591},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1545660806593},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1545660806594},{"_id":"themes/next/.gitignore","hash":"0378adb9c2dc4855b3198184df4863cb30e4059c","modified":1545660806604},{"_id":"themes/next/.all-contributorsrc","hash":"0ca0200bb5cba4cd157f2cb74703c4cb4c29cda5","modified":1545660806588},{"_id":"themes/next/README.md","hash":"943f9fd6ed1781350cdd05a26a1cfad24d035c8b","modified":1545660806609},{"_id":"themes/next/_config.yml","hash":"f050f74fb97102debc76b9855e720808ca57bbcf","modified":1546355820590},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1545660806605},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1545660806606},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1545660806607},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1545660806613},{"_id":"themes/next/bower.json","hash":"edbe7db4e39af86bb3163df5f0ab87cc0b420479","modified":1545660806612},{"_id":"themes/next/gulpfile.coffee","hash":"67eaf2515100971f6195b60eeebbfe5e8de895ab","modified":1545660806645},{"_id":"themes/next/package.json","hash":"0a6b9a8d9ccf52a5941ce4ec28d5b490adbd9970","modified":1545660806807},{"_id":"source/robots.txt","hash":"568766644b349febd5329cab2b3453820c5e7799","modified":1546178145551},{"_id":"source/_posts/template.md","hash":"ab5b35bb59627024afc428bfc81fdd25c222a8d1","modified":1546515149554},{"_id":"source/about/index.md","hash":"0b522241fd89df1d5df0fa99d84c42e182992ec2","modified":1546444648485},{"_id":"source/categories/index.md","hash":"3aecf4cd1924b43f557bb92ea0d2ea47422f5c21","modified":1546100710510},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1545660806649},{"_id":"themes/next/languages/de.yml","hash":"641e49587d41bb87e4d5932dc3d975754ded7953","modified":1545660806648},{"_id":"themes/next/languages/fr.yml","hash":"ebcd1f188af8c3f5ef1f0923e794c839fbfae2d4","modified":1545660806651},{"_id":"themes/next/languages/id.yml","hash":"9709a4dbacc56a1571a96b139b872128d6959e90","modified":1545660806652},{"_id":"themes/next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1545660806650},{"_id":"themes/next/languages/it.yml","hash":"4e3adeb10c0fa627935d69ae1783ce0894f5dee5","modified":1545660806653},{"_id":"themes/next/languages/ko.yml","hash":"33e065ceb21590b8eb32430a69e76c2f057eb758","modified":1545660806656},{"_id":"themes/next/languages/ja.yml","hash":"82afb0a5637ad67065fa5b2624fa56c7c240c3c6","modified":1545660806655},{"_id":"themes/next/languages/nl.yml","hash":"060efc260c1c529469d739d97dcee79683e8f411","modified":1545660806657},{"_id":"themes/next/languages/pt-BR.yml","hash":"dc09e290e908744ca28e093dbdd859ca2a20290e","modified":1545660806658},{"_id":"themes/next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1545660806661},{"_id":"themes/next/languages/pt.yml","hash":"53e2a52b9d5dc20c04080acd4f5b954e8699780f","modified":1545660806660},{"_id":"themes/next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1545660806662},{"_id":"themes/next/languages/zh-CN.yml","hash":"b973f99ba7c3fa4051fe1bff81ba5b79bf4aff5d","modified":1546259792746},{"_id":"themes/next/languages/uk.yml","hash":"6320439c6e9ff81e5b8f8129ca16e9a744b37032","modified":1545660806663},{"_id":"themes/next/layout/_layout.swig","hash":"472b064cf85b5a70d8fe75fb3273c8a81784fe35","modified":1545740694224},{"_id":"themes/next/languages/vi.yml","hash":"e2b3b18359ab41d58c64b2002acfedd60a7505a4","modified":1545660806664},{"_id":"themes/next/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1545660806666},{"_id":"themes/next/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1545660806668},{"_id":"themes/next/layout/archive.swig","hash":"4b53070008775ecfd03953bd1b4adfcb0fabcaac","modified":1545660806799},{"_id":"themes/next/layout/category.swig","hash":"f0e3338bfa5efb205d2c28e635e9611f1fff3b55","modified":1545660806800},{"_id":"themes/next/layout/index.swig","hash":"8d201e288261f4fcbcdf254c3dfc5771c9c65ad1","modified":1546510933577},{"_id":"themes/next/layout/page.swig","hash":"75ff753543bcbf992e346eb471f4097819971465","modified":1545660806802},{"_id":"themes/next/layout/post.swig","hash":"0554f42f90f4a524666c2b520be30b689c1d6a87","modified":1545660806803},{"_id":"themes/next/layout/schedule.swig","hash":"e79f43df0e9a6cf48bbf00882de48c5a58080247","modified":1545660806805},{"_id":"themes/next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1545660806817},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1545660806818},{"_id":"source/tags/index.md","hash":"142bff234d864dc5e4129c050dd031c675ee7b10","modified":1546100688364},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1545660807076},{"_id":"themes/next/layout/tag.swig","hash":"7cda2822e50b9fee9848a6b81e6c2d1aca830aeb","modified":1545660806806},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1545660807078},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"1e212fe229bd659726b4a3bcf4b5b14e0310ba3a","modified":1545660806599},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"36201119490a04107c8179b10202548a9d0e5e60","modified":1545660806601},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1545660807079},{"_id":"themes/next/.github/stale.yml","hash":"2d184d1ac19aee16134f562d5bce4d9efda24847","modified":1545660806603},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"22f2ccc5522563b67c8663849fc1d6cbae93a8ff","modified":1545660806596},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"40b0fd9fdb8586fab98e23f713940e7a2f80e2f9","modified":1545660806598},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1545660806602},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1545660806615},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"1dada3c3404445a00367882b8f97cdf092b7943d","modified":1545660806616},{"_id":"themes/next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1545660806618},{"_id":"themes/next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1545660806619},{"_id":"themes/next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1545660806620},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"f2fd611a84dd6f9ed5395b63e187e29e9effbcd3","modified":1545660806621},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1545660806623},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1545660806625},{"_id":"themes/next/docs/MATH.md","hash":"0540cd9c961b07931af9f38a83bc9a0f90cd5291","modified":1545660806624},{"_id":"source/_posts/design-pattern/template.md","hash":"1c3ceee77a14c63b3f2021767b3dd3ddd1c3922a","modified":1546444453297},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545660806996},{"_id":"source/_posts/design-pattern/one-java-singleton-pattern.md","hash":"8b17c7f8fefb2be284d1768552a8022a5b79bb74","modified":1546523353907},{"_id":"source/_posts/git/git-ssh-key-set.md","hash":"4d88188dd72bef484f1e41f6f80669df170dcc2c","modified":1546511356247},{"_id":"source/_posts/design-pattern/three-java-builder-pattern.md","hash":"90b4a56d05759f284e8e3656af243ce5ed5b9519","modified":1546511356243},{"_id":"source/_posts/design-pattern/two-java-factory-pattern.md","hash":"8ff040d20a1828ffb4c7d6fc70a4dee042e5c0c3","modified":1546511356246},{"_id":"source/_posts/computer-network/four-http-https.md","hash":"4a2aad2c33f79290461d3386dee3258b5e58e54d","modified":1546511356255},{"_id":"source/_posts/computer-network/five-connection-process.md","hash":"27b5c89f8fd443810266ae3673617f7e6fb2de41","modified":1546511356253},{"_id":"source/_posts/computer-network/one-network-model.md","hash":"e2155f6fed1a1da78248221a8f1d9c2c40f6bcc8","modified":1546511356240},{"_id":"source/_posts/computer-network/template.md","hash":"38a9626cb1bd098dd93ee3c061b79863cd0f0d40","modified":1546353346611},{"_id":"source/_posts/computer-network/two-tcp-connection.md","hash":"5760e6578338c51b5b511d22020fec0988cfa891","modified":1546511356260},{"_id":"themes/next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1545660806671},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1545660806672},{"_id":"themes/next/layout/_macro/page-end-tag.swig","hash":"9f945e389b0cb89afd8dcd9cb1366a151dc236c1","modified":1545667688039},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1545660806673},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"43b281f7fc6c9554e5328cd4bb91f3e60f09ee72","modified":1546597982868},{"_id":"source/_posts/computer-network/three-tcp-reliability.md","hash":"af6748a90ec3c2ac5eae5e6a7b1a610304a34d4c","modified":1546511356257},{"_id":"themes/next/layout/_macro/post.swig","hash":"4f66ed71e857bc56d936098170fda6c72f0c9a00","modified":1545741222409},{"_id":"source/_posts/hexo/hexo-blog-deploy-three.md","hash":"2236be9faaa6edcbff788a22fb2e8157c18606b3","modified":1546515339596},{"_id":"source/_posts/hexo/hexo-blog-config-two.md","hash":"742d614ecdaba4f062d4376ff12e5ba49a6d6954","modified":1546515128985},{"_id":"themes/next/layout/_partials/comments.swig","hash":"f1e25d53d76f898d280d0422d037e646d11f342b","modified":1545660806685},{"_id":"source/_posts/hexo/hexo-blog-setup-one.md","hash":"99c9247e95c5e6d351da8b0e8012b9f23cf62d4f","modified":1546516997080},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"6f3b4fa9390b93454ea69c407c58d4dfcc507f65","modified":1545660806680},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1545660806703},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"dee345054d564dd56f74bb143942d3edd1cb8150","modified":1545660806704},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"6337747816219616916e73bdfd6961a164f872cf","modified":1545660806723},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"c31d54154eed347f603009d2d65f7bf8d9a6885a","modified":1545660806724},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"dcefdf14856f0c94fa687463fa7411b262cc0d58","modified":1545660806725},{"_id":"source/_posts/hexo/hexo-blog-tranfer-four.md","hash":"1535d2712c103123d1161fe6842f7e1a02a890dd","modified":1546523327084},{"_id":"themes/next/layout/_partials/footer.swig","hash":"6d56acdcdc12ebca9c1d90f8a2b52ad17aafca6e","modified":1545746334518},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"20704846a29d72b24f6e446a6c22b10cf50a624b","modified":1545660806688},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"f67ec79cd949c10eb280014f839530d610758b64","modified":1545660806758},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"9e00cb9b3fdfe2e2c4877a874d0d3ecb7fd0f3ee","modified":1545660806771},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"5c75a183c3ca6e62a63ad1931fc5a0a178649e70","modified":1545660806770},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"579a39a8005d957e5b0cf4eea42f68063a3d10f0","modified":1545660806735},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"a4931a5c2f7f477d65cd76b5724f4ae3a509ae7a","modified":1545660806778},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"debba9b7110f635204a15df148194d4c2fd2668b","modified":1545660806777},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"2b6c626f68f20d83023c749b62fffd54af42fc9a","modified":1545660806779},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"f58463133bf8cfef5ff07f686b834ff8cbbe492f","modified":1545660806783},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1545660806781},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cdb6152582313268d970ffeef99b4a8a7850f034","modified":1545660806814},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"4142df872d10f98c255ed726a38c26e3ff46f16a","modified":1545660806780},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"3db90c52bc8af57c6fa4a9dbdc524e1ecdc8b7b1","modified":1545660806815},{"_id":"themes/next/scripts/tags/button.js","hash":"510f3711a9c9d3e2a844250647d90e8359e7d130","modified":1545660806820},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1545660806822},{"_id":"themes/next/scripts/tags/exturl.js","hash":"e9dab948e6327b22b4fc0c66cf97f6600a444dd5","modified":1545660806823},{"_id":"themes/next/scripts/tags/full-image.js","hash":"ef2c2985a3edb9f69740740c5bc42d4b692c86fd","modified":1545660806824},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"ab4a82a7246265717556c7a42f897430340b88cf","modified":1545660806832},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"aface11629970a5c4ee38aaa15550d2caee59560","modified":1545660806830},{"_id":"themes/next/scripts/tags/note.js","hash":"bd3310a5890bded1bda9ba3ad6f98ee44ecb101a","modified":1545660806834},{"_id":"themes/next/scripts/tags/tabs.js","hash":"2d257e26718d4011509fd6f530d2ea37e50e3e66","modified":1545660806835},{"_id":"themes/next/scripts/tags/label.js","hash":"bb502616bfabe85de5de903074ec6afe627f8413","modified":1545660806833},{"_id":"themes/next/source/css/main.styl","hash":"2a62e2a11e9cdcc69e538d856d6f9ce228a07c93","modified":1545660806994},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1545660806999},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1545660806998},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1545660807002},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1545660807003},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1545660807004},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1545660807005},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1545660807011},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1545660807007},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1545660807009},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1545660807013},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1545660807008},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1545660807012},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1545660807014},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1545660807015},{"_id":"themes/next/source/images/myfavicon-32x32-me.png","hash":"be0fd3464ec8f359ea628a9dee3b971595ef5f6f","modified":1545745247123},{"_id":"themes/next/source/images/myfavicon-16x16-me.png","hash":"46efb3015e67a0c374008887d75b6d48a41d7bbb","modified":1545745233087},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1545660807016},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1545660807018},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1545660807019},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1545660806632},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1545660806627},{"_id":"themes/next/docs/ru/README.md","hash":"0b69e831b4617f801d9b49e8ce810daacbbee6c1","modified":1545660806630},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1545660806629},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"e771c5b745608c6fb5ae2fa1c06c61b3699627ec","modified":1545660806634},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"9b512cb820627fcc45c9f77c7a122aa99e021bd5","modified":1545660806635},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1545660806638},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"6ea741f380dc3e90661d12db7e115a94b77643a4","modified":1545660806636},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"7214fcd1b5830e62b3ac0836ad2d1b0fa391ae12","modified":1545660806641},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1545660806639},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"69d73e86d8f7d2deafc436df84713a1425704d8a","modified":1545660806642},{"_id":"themes/next/docs/zh-CN/README.md","hash":"7fb215a0a633384948ac9228ac14617b4a974dbd","modified":1545660806643},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"2095d1214a4e519a1d31b67b41c89080fa3285d3","modified":1545660806644},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545660806731},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545660806732},{"_id":"themes/next/source/images/avatar.gif","hash":"9399d8157424db89e0197402ac135d6512666adc","modified":1545551583553},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545660806944},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545660806945},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545660806949},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545660806989},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545660806993},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1545660806678},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1545660806690},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"d8dceb53599acad99bab0a62895bfab75635a893","modified":1545660806691},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"f46699a9daa5fef599733cbab35cb75cf7a05444","modified":1545660806702},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1545660806718},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"daa6e5b7dbc409d6bf8a031d5413d8229e9c0995","modified":1545660806700},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1545660806719},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1545660806720},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"e0f0a753d4920ffb37ddbc8270515654a0b9b92a","modified":1545660806728},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1545660806696},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"2177da1d3c64abb6b3398f90885cf543ae6fe6da","modified":1545660806695},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"f3ae3168801304af3d80ec3b84264e1d4201cb89","modified":1545660806697},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1545660806713},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f6454c452b2e90a8c760321bce7e3dc6119b71fa","modified":1545660806712},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"e015c7d9b84062b60b15b36be3ef11929dd10943","modified":1545660806698},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"3f590e78141c45baeeea2892e898df9f846c09a7","modified":1545660806715},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1545660806716},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"e8dfb86eb62b9c2bc1435d6d1afa95d3b4c7b931","modified":1545660806708},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"7a9b687087793bf5e218cbc345214f927fa5601a","modified":1545660806710},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"55de88525c05af6053524c78ef4b42b46c3bfb6d","modified":1545660806706},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"23c6d15aa2a305f9d29caee1b60cfae84d32fa09","modified":1545660806730},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"b6e7d0af24b4d52d168a4eb0fb29bffa69621395","modified":1545660806709},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"23c6d15aa2a305f9d29caee1b60cfae84d32fa09","modified":1545660806734},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1545660806739},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"73576c9683d9ad9b124916dc6c660607fe7cc1fa","modified":1545660806742},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"2584127f6a88cbfa85ce91fec865ceaa4faee3d6","modified":1545740468111},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1545660806744},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"e40fcb1803aaa1e60bb348fcfd1a90df5dbba7a2","modified":1545660806679},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"8920693489109dec316f1bd188fc8f478f0d93d9","modified":1545660806740},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"1ce5fa218a44cf6e620583e9013e0b674dd6a989","modified":1545745070268},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"cfc932c5db04fef64cc56d3ba0b8ddf3a15a63bd","modified":1545660806748},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"d461dfe853e5317f62e8551f9d8338c66a9935e7","modified":1545660806750},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"39928f358dd13d9fc1a4641800e57be157ecd815","modified":1545660806752},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"d18c87d7839e7407e39acd2998bcc9e0b34611b0","modified":1545660806754},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1545660806746},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"8ab040fccba41675bc835973515530af8a51f8bd","modified":1545660806747},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1545660806756},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"bd8382d4f12df207ed52f75f6e5fb06527970167","modified":1545660806753},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"276726e782b7c9108552c2fc7f3733980eb9385b","modified":1545660806757},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"978c1e889f55cdf164707498f6b4e0460c2588df","modified":1545660806760},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1dd918b4a97b3e30a333ecc6451a4c2e31dc2cab","modified":1545660806762},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"40d17077d1bac4ef858c017f1e2be6c91660929a","modified":1545660806763},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"509cd7cd520f15d8bde51e587dbe08e0255d5d3f","modified":1545660806767},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"b98e8acb635beeaa929dab41c8cc5e519b9609b0","modified":1545660806766},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"860de4ce6fccc516d2f779a4b600a4214d8c18e2","modified":1545660806774},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"b7f3144cf2e8f55ddf05bd0be5db32c7d5daff3a","modified":1545660806765},{"_id":"themes/next/scripts/filters/after_post_render/exturl.js","hash":"899b5a5e80e2bf441b7c40f24123f26a5097b8de","modified":1545660806812},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1545660806793},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1545660806789},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"30e9e55d9af2ced6e6b156a042026a8b480f0ab0","modified":1545660806773},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"9fe4369cf1a0886b4fbae1346db72ae92ab48157","modified":1545660806768},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ee4552977092a0c4623c128293c9044cbc131504","modified":1545660806775},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"0bc1c629d071433ee5eb7fc5522e9400cdcbc221","modified":1545660806790},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1545660806791},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84906eeae57bd06744dd20160b93eacf658f97e2","modified":1545660807024},{"_id":"themes/next/source/js/src/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1545660807022},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"c7e2a588b679d46379124141bb2f30bc2f3210e2","modified":1545660807025},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1545660807028},{"_id":"themes/next/source/js/src/exturl.js","hash":"c48aa4b3c0e578a807fd3661e6cd4f3890777437","modified":1545660807026},{"_id":"themes/next/source/js/src/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1545664602732},{"_id":"themes/next/source/js/src/post-details.js","hash":"7d309b771e86c7e22ce11cc25625481ef7d5985c","modified":1545660807031},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1545660807034},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"68d3690152c89e7adb08bb35ec28dbda2bd93686","modified":1545660807035},{"_id":"themes/next/source/js/src/utils.js","hash":"9987086ccd4dd9b0e0e50d99f2e200dbbf78c813","modified":1545660807036},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"a48b6f0ce06589bd8af90609c49d0645e913d192","modified":1545741041818},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1545660806943},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"8aa98ae349908736ba43196c42498fd5bdeb780a","modified":1545660806947},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1545660806988},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e27a1034b0cd9821bab094565e9aa9bb80c6fa3e","modified":1545660806992},{"_id":"themes/next/source/js/src/motion.js","hash":"b74d3c6c3b289b00c8e376543d5ad7fe8e7948ec","modified":1545660807029},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"d1deb849e697cfb6258b8ab7bfb47e219210ccd9","modified":1545660806948},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"8d6cf29f63c90364f4d3c336f7c9bb794b4c46cc","modified":1545660806987},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"72927abd51d3a607a6ba32cf882390792b34e834","modified":1545660806991},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest-nomobile.min.js","hash":"6b4437a9cd8aa04329cc6220a595acfe1fb9b598","modified":1546165437732},{"_id":"themes/next/source/lib/canvas-nest/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1546165437719},{"_id":"themes/next/source/lib/canvas-nest/README.md","hash":"28bc2250a16e22c705cba7b3c17fcc15081e50f2","modified":1546165437725},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1545660807042},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1545660807043},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1545660807041},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1545660807044},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1546165437739},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1545660807072},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1545660807039},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1545660807073},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1545660807074},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6e076b5e183eedf425a445e99851f938789c3194","modified":1545660806786},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1545660806787},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1545660807061},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"1fd0650a8e5bff2c7146c810b04b3b88ee1f670e","modified":1545660806840},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1545660806842},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1545660806844},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1545660806843},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1545660806846},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"2fdf36f8a53ff8775aa9fddda15981b00f822649","modified":1545660807033},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"75b8209da432952cb3ead5b2121b72b46312a2fc","modified":1545660806952},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"fbb6be577529c750ef7c872fe7abdc7ab0faf0f8","modified":1545660806931},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1545660806871},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1545660806906},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1545660806938},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"c142c8216c2a50e2fa5f3ce127e46e2a44fd88a8","modified":1545660806933},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1545660806934},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"60179df0e5c9f7c2e9fda046040536c5d8b02f65","modified":1545660806939},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1545660806954},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"ab775f23ad475efb25376b5aad752ae8b56cfd8c","modified":1545660806936},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1545660806957},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"a80782a6eb3b40da2e14251da49069aff3115d8a","modified":1545660806958},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1545660806956},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1545660806960},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa6c00fdaf8f0ca3b690a5a556671745fb67e2c9","modified":1545660806959},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"2ccb9bdc309b7c1ef183a3dbb0a4621bec54a328","modified":1545660806961},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1545660806968},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"157e6915dcf5990566e463acffa71043b2651c07","modified":1545660806970},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1545660806972},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"b26f8a3394d8357a5bfd24d9f8bf62d7b4063ebb","modified":1545660806973},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"30d61fa31e405fcfe3d2ff6174ccad60be1745f9","modified":1545660806978},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4ed12bf17eeb7cd4f22dd01fdd486cda68d169a8","modified":1545660806971},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b154333408d2c55f4dcf6034ea0df8d952261c3","modified":1545660806979},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1545660806981},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"11fcaaf7524445a194801e1048ea2fb84b316414","modified":1545660806980},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"a558803ca81cceae2bdc22c18ef638fcc023681b","modified":1545660806985},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"8bea9123be2d8ea4c84ed70d2c7e5d6a42545beb","modified":1545660806983},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0d6f0df798449b710e1e5dbd43d470089b2a3c95","modified":1545660806984},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1545660806937},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1545660807065},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1545660807066},{"_id":"themes/next/source/lib/canvas-nest/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1546165437714},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1545660807047},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1545660807049},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1545660807050},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1545660806859},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"e5a5f8747fdf2ca960e4e73c081b8952afd62224","modified":1545660806864},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"630be616447a982413030e561bbd3a80ac14b120","modified":1545660806865},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1545660806866},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"ad4cae23c8e383f4fabc9a2a95bca6055020d22e","modified":1545660806867},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1545660806869},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7dd247c8869fdefb5a007045d00f3ef8ceecf300","modified":1545660806848},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"3f3d2a43d1a326bad25b633c8ec9ddd87867224c","modified":1545660806850},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"34f5ac3c1ed2dd31e9297cc4c0733e71bc2e252f","modified":1545660806851},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1545660806852},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"b8647d6140141b0a160607f6353e4d4594cca92e","modified":1545660806855},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1ec3102ee8f5b8cc0877da1fd109d37470401e7b","modified":1545660806854},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1545660806856},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"75855e18fd83a8affe0aa8c78e8d87bcac3f82ea","modified":1545660806860},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1545660806861},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"ef588bc56eaa5b84296e28f4c2c36d9ea8b3b8c3","modified":1545660806870},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"41858f2dfd34a57d0a2016b1bce08efb61943b7a","modified":1545660806896},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1545660806897},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1545660806899},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"fa57ec9a6f1943c0558856dfba2d6b8faca0cd4d","modified":1545660806893},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"00a504620c454287111dc0ace64c989e1ff97f54","modified":1545660806895},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1545660806900},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1545660806902},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"9e05a2232faabb41bcebb51d545d897a76f077da","modified":1545660806901},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1545660806873},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"94d76e6da600a36d80e2470326ebb6b3be447ccb","modified":1545660806904},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"fc94dd09b4245143b452d6cf2fc4c12134d99d6d","modified":1545660806876},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1545660806877},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1545660806905},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1545660806879},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"3241c9ae85ca11b6c4e125ac471aa4342ba1ce9c","modified":1545660806875},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"82bc7fa5d38d98e98cc25f9a73189024fda25e63","modified":1545660806883},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"317c9ceda655e9dc373ce8e7b71d20b794fce9a4","modified":1545660806878},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"330c8884efb5612e7eb03986d87d29e8b0651974","modified":1545660806881},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1545660806885},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1545660806886},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"7b69c1ad392f8a386854e318d4c8ddeb9ba8d793","modified":1545660806882},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"c7ca3b90c81eb6b91dd1d336328226471738de54","modified":1545660806884},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1545660806889},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"539fc0880b2e035e8316d5d4b423703195c1b7ba","modified":1545660806888},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"d32d2c4a0b65742e3ab1581798ff0ac07d2214fa","modified":1545740716194},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1545746324822},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5c3141d58970a0614896b6a62fd7a8a8caf4e401","modified":1545660806890},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1545660806923},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"a01484e350ad5fc9b1fdfbfafb2ddd9687ad4d20","modified":1545660806922},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"7fc0a470d2e859de775094c485fee75ce67b3550","modified":1545660806924},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"f4d8144c22544bdb89787c14ab9d39578dae4b7c","modified":1545660806919},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeb4b94c9468f7ca797665a91ce7c07e2a104367","modified":1545660806929},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1545660806926},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"acfdd76b1c90d2e384affb3d0006a39b524609d2","modified":1545660806928},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1545660806925},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"2d58ad90f148e845bc7023751a7a13260600f8d6","modified":1545660806909},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1545660806912},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1545660806908},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"f1640253cbbf71d0c04c34c25bd61045894f98bc","modified":1545660806917},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1545660806911},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1545660806914},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1545660806916},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1545660806966},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1545660806963},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1545660806976},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1545660806913},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1545660807056},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1545660807058},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1545660807070},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1545660807054},{"_id":"public/baidusitemap.xml","hash":"469bbd3c977c04d9ac5fed5829af4d596b29a6f1","modified":1546597501734},{"_id":"public/atom.xml","hash":"c8c61fccba3e6fae220d3c198a7d3afaff93a40f","modified":1546597504344},{"_id":"public/search.xml","hash":"9a0a587056e81c1e65bbfda431fc0e472008be51","modified":1546597504346},{"_id":"public/sitemap.xml","hash":"f9f045af92485bb34bfbeda3d0e1dce111a348ef","modified":1546597504360},{"_id":"public/categories/index.html","hash":"591c9cb3521320bb279996ce3339c981b13962c0","modified":1546603228220},{"_id":"public/about/index.html","hash":"b7dc9ba0da3d2dce63231d23e770cc79d0ab164f","modified":1546603228221},{"_id":"public/tags/index.html","hash":"60c0199ff87fdd6de6d834f79c6f7e251918a508","modified":1546603228223},{"_id":"public/posts/33469.html","hash":"bd70b56712496e8370c7394eb311f7646a1e5bd4","modified":1546603228225},{"_id":"public/posts/41257.html","hash":"22abfbadf22fc8130d3a78c1b90d9d5a8da69d02","modified":1546603228231},{"_id":"public/posts/58273.html","hash":"accd86f669ad403ac2be5096959d830384abcf77","modified":1546603228231},{"_id":"public/posts/18973.html","hash":"7f7ca322340f6af1da123b4aac95021ac97c880a","modified":1546603228232},{"_id":"public/posts/5863.html","hash":"52d875edae58b27ccad749ef28e6171285c3dc33","modified":1546603228233},{"_id":"public/posts/21307.html","hash":"e9f81dc6f4f5328afb1249d71d82240e5805c06e","modified":1546603228234},{"_id":"public/posts/18422.html","hash":"162ce257f7111a4c4278dabb4d3f44b74b489ac5","modified":1546603228235},{"_id":"public/posts/25338.html","hash":"553256097469cb6ab1a927318ded4a48f6324aa4","modified":1546603228235},{"_id":"public/posts/25470.html","hash":"776f34c32493359a1f6bb9090ad1364fe1633fbd","modified":1546603228235},{"_id":"public/posts/52453.html","hash":"bf795ef01c35364b5b4cc444dd5f1e98bca2612d","modified":1546603228236},{"_id":"public/posts/34710.html","hash":"563354fbb7385564c77f8910cb647c13a3f38f82","modified":1546603228236},{"_id":"public/posts/53093.html","hash":"198519f03cc8dfa972e0d292c4f061ef981bea24","modified":1546603228236},{"_id":"public/posts/49894.html","hash":"732e3c47e843982c37c8c1846a34b984d9fa5943","modified":1546603228236},{"_id":"public/archives/index.html","hash":"55580a45c56f60cd77af8b477a507a451a58f18c","modified":1546603228237},{"_id":"public/archives/page/2/index.html","hash":"f0c5d32a87ca2432cc861ef7bdba99e7137dcd39","modified":1546603228237},{"_id":"public/archives/2017/index.html","hash":"9335538af2b7013af15b8097e4256f73bb6dff81","modified":1546603228238},{"_id":"public/archives/2017/07/index.html","hash":"be3ef1993fc773eab38b40e543762050f693252a","modified":1546603228238},{"_id":"public/archives/2018/index.html","hash":"fe1a2b4ea1201da4383508fd3a79783f2f79ae8b","modified":1546603228239},{"_id":"public/archives/2018/page/2/index.html","hash":"700e5bf7d8b5481cf391dbb7be872f225e279dba","modified":1546603228239},{"_id":"public/archives/2018/10/index.html","hash":"839d9f9bdd84de5e77708a614178e30c9670483a","modified":1546603228240},{"_id":"public/archives/2018/11/index.html","hash":"5746ad62c4e339d1b9c69d974b56119c2efee367","modified":1546603228240},{"_id":"public/archives/2018/12/index.html","hash":"17405755f6335708fe41f08925670f2fdb778086","modified":1546603228240},{"_id":"public/categories/Git/index.html","hash":"85003b2bf7ed5b9af26ada50e43a6fd66d1ccfb4","modified":1546603228241},{"_id":"public/categories/设计模式/index.html","hash":"81e8d8e010d9e8c1839abb3e3b35590f480db466","modified":1546603228241},{"_id":"public/categories/计算机网络/index.html","hash":"9c6912d572d44cc655dcce12ffeedaadfb654e58","modified":1546603228242},{"_id":"public/categories/Hexo/index.html","hash":"d0b39274ae5e71a369d5de0d8b292cbbb5dcfaf9","modified":1546603228242},{"_id":"public/index.html","hash":"637d5378dc48a005fbf067ccb2c41da9837f0cc6","modified":1546603228243},{"_id":"public/page/2/index.html","hash":"a7972bf4210e6bc914b9c10a4d68b1939a85da55","modified":1546603228243},{"_id":"public/tags/Git/index.html","hash":"a5b886222438b0ddabe6cfa39b5db0b897a43e60","modified":1546603228243},{"_id":"public/tags/设计模式/index.html","hash":"6436e82726d1c2e5edbc8dfdeb0298f02347159f","modified":1546603228244},{"_id":"public/tags/计算机网络/index.html","hash":"c2bcfb50e8af7e872ae95a50747536af11450900","modified":1546603228245},{"_id":"public/tags/TCP-IP/index.html","hash":"e7606ad24cb8b3d02ab8bf2d5dd534fab96985b9","modified":1546603228245},{"_id":"public/tags/Hexo/index.html","hash":"88a7e2d8d3075e8b37099680e137ca2857e4959b","modified":1546603228246},{"_id":"public/tags/Java/index.html","hash":"b52c7b2f4efcafb5a9f29de0a84f6a9078e220ff","modified":1546603228246},{"_id":"public/tags/HTTP/index.html","hash":"758821442a6d2ecb995f188ad56be8d931506962","modified":1546603228246},{"_id":"public/CNAME","hash":"98fa9175b1bb7507f8f248bca30c048323c9daf3","modified":1546597504385},{"_id":"public/README.md","hash":"ec30dd4bbbdbb67701f32990c612ba508bc08a50","modified":1546597504385},{"_id":"public/robots.txt","hash":"568766644b349febd5329cab2b3453820c5e7799","modified":1546597504385},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1546597504386},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1546597504386},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1546597504386},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1546597504386},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1546597504386},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1546597504386},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1546597504386},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1546597504386},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1546597504387},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1546597504387},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1546597504387},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1546597504387},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1546597504387},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1546597504387},{"_id":"public/images/myfavicon-32x32-me.png","hash":"be0fd3464ec8f359ea628a9dee3b971595ef5f6f","modified":1546597504387},{"_id":"public/images/myfavicon-16x16-me.png","hash":"46efb3015e67a0c374008887d75b6d48a41d7bbb","modified":1546597504387},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1546597504387},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1546597504388},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1546597504388},{"_id":"public/lib/canvas-nest/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1546597504388},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1546597504388},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1546597504388},{"_id":"public/images/avatar.gif","hash":"9399d8157424db89e0197402ac135d6512666adc","modified":1546597505863},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1546597506030},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1546597506030},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1546597506307},{"_id":"public/js/src/algolia-search.js","hash":"dce34032927e144682eaad565cb8957a2fbc1226","modified":1546597506425},{"_id":"public/js/src/affix.js","hash":"73ed4ed2e7ebffe32c304ff4adced1adb977d91a","modified":1546597506425},{"_id":"public/js/src/js.cookie.js","hash":"3bd4ddc2de41fc136c6b2c0a703fd298d59c6a33","modified":1546597506426},{"_id":"public/js/src/bootstrap.js","hash":"2e68c6da0865d9b97e069c9fe1b0a75042e56a02","modified":1546597506426},{"_id":"public/js/src/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1546597506427},{"_id":"public/js/src/exturl.js","hash":"91eadf37393e60f365853b54cf93abacc20bad9c","modified":1546597506427},{"_id":"public/js/src/post-details.js","hash":"31a2254a5e3e8563fe41caadca645776b7177b52","modified":1546597506427},{"_id":"public/js/src/scroll-cookie.js","hash":"9e112c8168fbcfa80aca9d722148147552742257","modified":1546597506427},{"_id":"public/js/src/scrollspy.js","hash":"867d19aa40a007a36afb99e38f1cb6115f3b340e","modified":1546597506427},{"_id":"public/lib/canvas-nest/canvas-nest-nomobile.min.js","hash":"956eada198babd00f028e8908767cb158926c3f3","modified":1546597506428},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1546597506428},{"_id":"public/js/src/schemes/pisces.js","hash":"5b5fdb7be7a125bacb79370aa918a370d0fbb586","modified":1546597506428},{"_id":"public/lib/canvas-nest/README.html","hash":"c5de19630942649fb53d730b5809897a9b631997","modified":1546597506428},{"_id":"public/js/src/utils.js","hash":"4b2b58b688c7a27326ad5abb1ad9635db43c9605","modified":1546597506438},{"_id":"public/js/src/motion.js","hash":"5e9db3e52695f392f252fcc4d6867dca4ad4b55c","modified":1546597506438},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1546597506440},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1546597506440},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"cfdac4978f67d8dc1e9dfb80a8d9e2a6ebc82f06","modified":1546597506441},{"_id":"public/css/main.css","hash":"c142a74d462dd0c4b99424e78dbb01328da28978","modified":1546597506441},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1546597506441},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1546597506460},{"_id":"public/lib/velocity/velocity.ui.js","hash":"b99e521b95a0e266bf5a200670a5a230bf1beb30","modified":1546597506736},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1546597506736},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"299c33bce2838c6d070c4cb4574e02fd61d08126","modified":1546597506743},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1546597506755},{"_id":"public/lib/velocity/velocity.js","hash":"97425489dbb6e59c54ab92f6633e2077cda0d97f","modified":1546597506992}],"Category":[{"name":"Git","_id":"cjqhw7t4k0005wkw4tr6i4fv8"},{"name":"设计模式","_id":"cjqhw7t4t0008wkw4oehkjd84"},{"name":"计算机网络","_id":"cjqhw7t7j000kwkw48v1bm05h"},{"name":"Hexo","_id":"cjqhw7t7w000rwkw47zdqikau"}],"Data":[],"Page":[{"title":"分类","type":"categories","date":"2017-12-27T15:58:10.000Z","_content":"\n","source":"categories/index.md","raw":"---\ntitle: 分类\ntype: categories\ndate: 2017-12-27 23:58:10\n---\n\n","updated":"2018-12-29T16:25:10.510Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjqhw7ssn0000wkw4btie6j1r","content":"<!-- build time:Fri Jan 04 2019 18:24:57 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Fri Jan 04 2019 18:24:57 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->"},{"title":"关于","date":"2019-01-01T15:17:50.000Z","type":"about","_content":"\n1.关于我\n\n18年毕业的小菜鸟一只。\n\n喜欢写一些博客记录自己的成长过程，学完某个东西后喜欢做个总结。当然也希望可以帮助到一些人。\n\n\n\n2.博客记录\n\n​\t2017年开始写博客。\n\n​\t2018年将博客迁移到`GithubPages`。\n\n​\t2018年末对博客进行了改造，添加了一些有意思的新功能。\n\n\n\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2019-01-01 23:17:50\ntype: about\n---\n\n1.关于我\n\n18年毕业的小菜鸟一只。\n\n喜欢写一些博客记录自己的成长过程，学完某个东西后喜欢做个总结。当然也希望可以帮助到一些人。\n\n\n\n2.博客记录\n\n​\t2017年开始写博客。\n\n​\t2018年将博客迁移到`GithubPages`。\n\n​\t2018年末对博客进行了改造，添加了一些有意思的新功能。\n\n\n\n","updated":"2019-01-02T15:57:28.485Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjqhw7ssx0001wkw4hbex6mk4","content":"<!-- build time:Fri Jan 04 2019 18:24:57 GMT+0800 (GMT+08:00) --><p>1.关于我</p><p>18年毕业的小菜鸟一只。</p><p>喜欢写一些博客记录自己的成长过程，学完某个东西后喜欢做个总结。当然也希望可以帮助到一些人。</p><p>2.博客记录</p><p>​ 2017年开始写博客。</p><p>​ 2018年将博客迁移到<code>GithubPages</code>。</p><p>​ 2018年末对博客进行了改造，添加了一些有意思的新功能。</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Fri Jan 04 2019 18:24:57 GMT+0800 (GMT+08:00) --><p>1.关于我</p><p>18年毕业的小菜鸟一只。</p><p>喜欢写一些博客记录自己的成长过程，学完某个东西后喜欢做个总结。当然也希望可以帮助到一些人。</p><p>2.博客记录</p><p>​ 2017年开始写博客。</p><p>​ 2018年将博客迁移到<code>GithubPages</code>。</p><p>​ 2018年末对博客进行了改造，添加了一些有意思的新功能。</p><!-- rebuild by neat -->"},{"title":"标签","type":"tags","date":"2017-12-27T15:57:45.000Z","_content":"\n","source":"tags/index.md","raw":"---\ntitle: 标签\ntype: tags\ndate: 2017-12-27 23:57:45\n---\n\n","updated":"2018-12-29T16:24:48.364Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjqhw7t280002wkw4sderfjan","content":"<!-- build time:Fri Jan 04 2019 18:24:57 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Fri Jan 04 2019 18:24:57 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->"}],"Post":[{"title":"Git 配置及SSH key及使用","abbrlink":49894,"date":"2017-07-01T04:00:00.000Z","_content":"\n​\t本地 Git 仓库和 GitHub 仓库之间的传输是通过 SSH 加密的，所以配置SSH key之后，上传代码到`Github`远程仓库时就不用输入密码了。一般是在C盘用户目录下有一个 `something` 和 `something.pub` 来命名的一对文件，这个 `something` 通常就是 `id_dsa` 或 `id_rsa`。有 `.pub` 后缀的文件就是公钥，另一个文件则是密钥。连接时必须提供一个公钥用于授权，没有的话就要生成一个。\n\n<!--more-->\n\n## 1. Git 配置\n\n配置全局用户名和密码，git提交代码时用来显示你身份和联系方式，并不是github用户名和邮箱\n\n```java\ngit config --global user.name \"lillusory\" //改成自己的\ngit config --global user.email \"xueduanli@163.com\"  //改成自己的\n```\n\n## 2. 生成SSH key\n\n### 2.1 生成秘钥\n\n- 执行`ssh-keygen -t rsa -C \"你的邮箱地址\" ` 命令 生成ssh key\n- 然后会叫你输入保存路径，直接按回车即可，保存在C盘用户目录下\n- 然后会提示输入密码和确认密码，不用输入直接按两下回车即可\n\n到这里SSH key就生成好了，接下来就是配置到github上。\n\n### 2.2 配置SSH key\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/2018-12-27-git-ssh-key-set1.png)\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/2018-12-27-git-ssh-key-set2.png)\n\n\n\n登陆Github-->点击头像-->Settings-->SSH and GPG keys-->选择SSh keys上的New SSH keys-->name 随便写，key就是刚才生成的文件中的所有内容。\n\n文件默认是在C盘用户目录下，我的是`C:\\Users\\13452\\.ssh`\n\n文件夹中应该会有两个文件 ：`id_rsa`和`id_rsa.pub` \n\n`id_rsa.pub`就是我们要的key, 一般以`ssh-rsa`开头，以你刚才输的邮箱结尾。\n\n### 2.3 测试\n\n执行`ssh -T git@github.com`命令验证一下。\n\n可能会提示，`无法验证主机的真实性`是否要建立连接，输入`yes`就行了。\n\n如果，看到：\n\n> Hi xxx! You've successfully authenticated, but GitHub does not # provide shell access.\n\n恭喜你，你的设置已经成功了。\n\n## 3. 参考\n\n[Git Book](https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5)","source":"_posts/git/git-ssh-key-set.md","raw":"---\ntitle: Git 配置及SSH key及使用\ntags:\n  - Git\ncategories:\n  - Git\nabbrlink: 49894\ndate: 2017-07-01 12:00:00\n---\n\n​\t本地 Git 仓库和 GitHub 仓库之间的传输是通过 SSH 加密的，所以配置SSH key之后，上传代码到`Github`远程仓库时就不用输入密码了。一般是在C盘用户目录下有一个 `something` 和 `something.pub` 来命名的一对文件，这个 `something` 通常就是 `id_dsa` 或 `id_rsa`。有 `.pub` 后缀的文件就是公钥，另一个文件则是密钥。连接时必须提供一个公钥用于授权，没有的话就要生成一个。\n\n<!--more-->\n\n## 1. Git 配置\n\n配置全局用户名和密码，git提交代码时用来显示你身份和联系方式，并不是github用户名和邮箱\n\n```java\ngit config --global user.name \"lillusory\" //改成自己的\ngit config --global user.email \"xueduanli@163.com\"  //改成自己的\n```\n\n## 2. 生成SSH key\n\n### 2.1 生成秘钥\n\n- 执行`ssh-keygen -t rsa -C \"你的邮箱地址\" ` 命令 生成ssh key\n- 然后会叫你输入保存路径，直接按回车即可，保存在C盘用户目录下\n- 然后会提示输入密码和确认密码，不用输入直接按两下回车即可\n\n到这里SSH key就生成好了，接下来就是配置到github上。\n\n### 2.2 配置SSH key\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/2018-12-27-git-ssh-key-set1.png)\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/2018-12-27-git-ssh-key-set2.png)\n\n\n\n登陆Github-->点击头像-->Settings-->SSH and GPG keys-->选择SSh keys上的New SSH keys-->name 随便写，key就是刚才生成的文件中的所有内容。\n\n文件默认是在C盘用户目录下，我的是`C:\\Users\\13452\\.ssh`\n\n文件夹中应该会有两个文件 ：`id_rsa`和`id_rsa.pub` \n\n`id_rsa.pub`就是我们要的key, 一般以`ssh-rsa`开头，以你刚才输的邮箱结尾。\n\n### 2.3 测试\n\n执行`ssh -T git@github.com`命令验证一下。\n\n可能会提示，`无法验证主机的真实性`是否要建立连接，输入`yes`就行了。\n\n如果，看到：\n\n> Hi xxx! You've successfully authenticated, but GitHub does not # provide shell access.\n\n恭喜你，你的设置已经成功了。\n\n## 3. 参考\n\n[Git Book](https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5)","slug":"git/git-ssh-key-set","published":1,"updated":"2019-01-03T10:29:16.247Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqhw7t3d0003wkw41z6frann","content":"<!-- build time:Fri Jan 04 2019 18:24:57 GMT+0800 (GMT+08:00) --><p>​ 本地 Git 仓库和 GitHub 仓库之间的传输是通过 SSH 加密的，所以配置SSH key之后，上传代码到<code>Github</code>远程仓库时就不用输入密码了。一般是在C盘用户目录下有一个 <code>something</code> 和 <code>something.pub</code> 来命名的一对文件，这个 <code>something</code> 通常就是 <code>id_dsa</code> 或 <code>id_rsa</code>。有 <code>.pub</code> 后缀的文件就是公钥，另一个文件则是密钥。连接时必须提供一个公钥用于授权，没有的话就要生成一个。</p><a id=\"more\"></a><h2 id=\"1-Git-配置\"><a href=\"#1-Git-配置\" class=\"headerlink\" title=\"1. Git 配置\"></a>1. Git 配置</h2><p>配置全局用户名和密码，git提交代码时用来显示你身份和联系方式，并不是github用户名和邮箱</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">\"lillusory\"</span> <span class=\"comment\">//改成自己的</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">\"xueduanli@163.com\"</span>  <span class=\"comment\">//改成自己的</span></span><br></pre></td></tr></table></figure><h2 id=\"2-生成SSH-key\"><a href=\"#2-生成SSH-key\" class=\"headerlink\" title=\"2. 生成SSH key\"></a>2. 生成SSH key</h2><h3 id=\"2-1-生成秘钥\"><a href=\"#2-1-生成秘钥\" class=\"headerlink\" title=\"2.1 生成秘钥\"></a>2.1 生成秘钥</h3><ul><li>执行<code>ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;</code> 命令 生成ssh key</li><li>然后会叫你输入保存路径，直接按回车即可，保存在C盘用户目录下</li><li>然后会提示输入密码和确认密码，不用输入直接按两下回车即可</li></ul><p>到这里SSH key就生成好了，接下来就是配置到github上。</p><h3 id=\"2-2-配置SSH-key\"><a href=\"#2-2-配置SSH-key\" class=\"headerlink\" title=\"2.2 配置SSH key\"></a>2.2 配置SSH key</h3><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/2018-12-27-git-ssh-key-set1.png\" alt=\"\"></p><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/2018-12-27-git-ssh-key-set2.png\" alt=\"\"></p><p>登陆Github–&gt;点击头像–&gt;Settings–&gt;SSH and GPG keys–&gt;选择SSh keys上的New SSH keys–&gt;name 随便写，key就是刚才生成的文件中的所有内容。</p><p>文件默认是在C盘用户目录下，我的是<code>C:\\Users\\13452\\.ssh</code></p><p>文件夹中应该会有两个文件 ：<code>id_rsa</code>和<code>id_rsa.pub</code></p><p><code>id_rsa.pub</code>就是我们要的key, 一般以<code>ssh-rsa</code>开头，以你刚才输的邮箱结尾。</p><h3 id=\"2-3-测试\"><a href=\"#2-3-测试\" class=\"headerlink\" title=\"2.3 测试\"></a>2.3 测试</h3><p>执行<code>ssh -T git@github.com</code>命令验证一下。</p><p>可能会提示，<code>无法验证主机的真实性</code>是否要建立连接，输入<code>yes</code>就行了。</p><p>如果，看到：</p><blockquote><p>Hi xxx! You’ve successfully authenticated, but GitHub does not # provide shell access.</p></blockquote><p>恭喜你，你的设置已经成功了。</p><h2 id=\"3-参考\"><a href=\"#3-参考\" class=\"headerlink\" title=\"3. 参考\"></a>3. 参考</h2><p><a href=\"https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5\" target=\"_blank\" rel=\"noopener\">Git Book</a></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Fri Jan 04 2019 18:24:57 GMT+0800 (GMT+08:00) --><p>​ 本地 Git 仓库和 GitHub 仓库之间的传输是通过 SSH 加密的，所以配置SSH key之后，上传代码到<code>Github</code>远程仓库时就不用输入密码了。一般是在C盘用户目录下有一个 <code>something</code> 和 <code>something.pub</code> 来命名的一对文件，这个 <code>something</code> 通常就是 <code>id_dsa</code> 或 <code>id_rsa</code>。有 <code>.pub</code> 后缀的文件就是公钥，另一个文件则是密钥。连接时必须提供一个公钥用于授权，没有的话就要生成一个。</p>","more":"<h2 id=\"1-Git-配置\"><a href=\"#1-Git-配置\" class=\"headerlink\" title=\"1. Git 配置\"></a>1. Git 配置</h2><p>配置全局用户名和密码，git提交代码时用来显示你身份和联系方式，并不是github用户名和邮箱</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">\"lillusory\"</span> <span class=\"comment\">//改成自己的</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">\"xueduanli@163.com\"</span>  <span class=\"comment\">//改成自己的</span></span><br></pre></td></tr></table></figure><h2 id=\"2-生成SSH-key\"><a href=\"#2-生成SSH-key\" class=\"headerlink\" title=\"2. 生成SSH key\"></a>2. 生成SSH key</h2><h3 id=\"2-1-生成秘钥\"><a href=\"#2-1-生成秘钥\" class=\"headerlink\" title=\"2.1 生成秘钥\"></a>2.1 生成秘钥</h3><ul><li>执行<code>ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;</code> 命令 生成ssh key</li><li>然后会叫你输入保存路径，直接按回车即可，保存在C盘用户目录下</li><li>然后会提示输入密码和确认密码，不用输入直接按两下回车即可</li></ul><p>到这里SSH key就生成好了，接下来就是配置到github上。</p><h3 id=\"2-2-配置SSH-key\"><a href=\"#2-2-配置SSH-key\" class=\"headerlink\" title=\"2.2 配置SSH key\"></a>2.2 配置SSH key</h3><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/2018-12-27-git-ssh-key-set1.png\" alt=\"\"></p><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/2018-12-27-git-ssh-key-set2.png\" alt=\"\"></p><p>登陆Github–&gt;点击头像–&gt;Settings–&gt;SSH and GPG keys–&gt;选择SSh keys上的New SSH keys–&gt;name 随便写，key就是刚才生成的文件中的所有内容。</p><p>文件默认是在C盘用户目录下，我的是<code>C:\\Users\\13452\\.ssh</code></p><p>文件夹中应该会有两个文件 ：<code>id_rsa</code>和<code>id_rsa.pub</code></p><p><code>id_rsa.pub</code>就是我们要的key, 一般以<code>ssh-rsa</code>开头，以你刚才输的邮箱结尾。</p><h3 id=\"2-3-测试\"><a href=\"#2-3-测试\" class=\"headerlink\" title=\"2.3 测试\"></a>2.3 测试</h3><p>执行<code>ssh -T git@github.com</code>命令验证一下。</p><p>可能会提示，<code>无法验证主机的真实性</code>是否要建立连接，输入<code>yes</code>就行了。</p><p>如果，看到：</p><blockquote><p>Hi xxx! You’ve successfully authenticated, but GitHub does not # provide shell access.</p></blockquote><p>恭喜你，你的设置已经成功了。</p><h2 id=\"3-参考\"><a href=\"#3-参考\" class=\"headerlink\" title=\"3. 参考\"></a>3. 参考</h2><p><a href=\"https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5\" target=\"_blank\" rel=\"noopener\">Git Book</a></p><!-- rebuild by neat -->"},{"title":"Java设计模式（三）--建造者模式","abbrlink":52453,"date":"2018-10-12T14:00:00.000Z","_content":"\n本文主要介绍了Java23种设计模式中的`建造者模式`，并结合实例描述了建造者模式的具体实现和优缺点及建造者模式和工厂模式的差别分析等。\n\n<!--more-->\n\n> 设计模式系列文章\n>\n> [Java23种设计模式](https://www.lixueduan.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/)\n\n## 1. 建造者模式介绍\n\n> 建造者模式是将一个复杂的对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。。\n\n建造者模式通常包括下面几个角色：\n\n（1） `Builder`：给出一个抽象接口，以规范产品对象的各个组成成分的建造。这个接口规定要实现复杂对象的哪些部分的创建，并不涉及具体的对象部件的创建。\n\n（2） `ConcreteBuilder`：实现Builder接口，针对不同的商业逻辑，具体化复杂对象的各部分的创建。 在建造过程完成后，提供产品的实例。\n\n（3）`Director`：调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建或按某种顺序创建。\n\n（4）`Product`：要创建的复杂对象\n\n## 2. 建造者模式实例\n\n以创建一个Person为例：\n\nProduct（要创建的对象）：\n\n```java\n//首先创建一个Person对象，简单的一些属性和get，set方法\npublic class Person {\n    private String name;\n    private String address;\n    private int age;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getAddress() {\n        return address;\n    }\n\n    public void setAddress(String address) {\n        this.address = address;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n}\n```\n\nBuilder（给出一个抽象接口，以规范产品对象的各个组成成分的建造 ）\n\n```java\n//然后创建一个接口 建造对象的标准\npublic interface Builder {\n    void builderName();\n\n    void builderAddress();\n\n    void builderAge();\n\n    Person builderPerson();\n}\n```\n\nConcreteBuilder（实现Builder接口，针对不同的商业逻辑，具体化复杂对象的各部分的创建）\n\n```java\n//接着创建一个构造具体对象的类，实现前面的标准（接口）\npublic class BuildMe implements Builder {\n    Person person;\n\n    //构造方法创建一个对象\n    public BuildMe() {\n        person = new Person();\n    }\n\n    //然后为对象添加各种属性\n    @Override\n    public void builderName() {\n        person.setName(\"lillusory\");\n    }\n\n    @Override\n    public void builderAddress() {\n        person.setAddress(\"重庆\");\n    }\n\n    @Override\n    public void builderAge() {\n        person.setAge(22);\n    }\n\n    //最后返回该对象\n    @Override\n    public Person builderPerson() {\n        return person;\n    }\n}\n\n//这里可以根据不同的逻辑或需求，实现不同的（产品）\npublic class BuildZhangSan implements Builder {\n    Person person;\n\n    public BuildZhangSan() {\n        person = new Person();\n    }\n\n    @Override\n    public void builderName() {\n        person.setName(\"张三\");\n    }\n\n    @Override\n    public void builderAddress() {\n        person.setAddress(\"北京\");\n    }\n\n    @Override\n    public void builderAge() {\n        person.setAge(20);\n    }\n\n    @Override\n    public Person builderPerson() {\n        return person;\n    }\n}\n```\n\nDirector（调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建 ）\n\n```java\n//最后创建一个Director指导者？类来创建对象\n//只负责保证对象各部分完整创建 不知道具体细节\npublic class Director {\n    public Person construcPerson(Builder builder) {\n        builder.builderName();\n        builder.builderAddress();\n        builder.builderAge();\n        return builder.builderPerson();\n    }\n}\n```\n\n测试\n\n```java\npublic class FactoryTest {\n    public static void main(String[] args) {\n        Director director = new Director();\n        Person person = director.construcPerson(new BuildMe());\n        System.out.println(person.getName());\n        System.out.println(person.getAddress());\n        System.out.println(person.getAge());\n\n        cPerson zhangSan = director.construcPerson(new BuildZhangSan());\n        System.out.println(zhangSan.getName());\n        System.out.println(zhangSan.getAddress());\n        System.out.println(zhangSan.getAge());\n    }\n}\n//输出\n        lillusory\n        重庆\n        22\n        张三\n        北京\n        20\n```\n\n## 3. 总结\n\n**建造者模式优点：**\n\n1.将对象本身与对象的创建过程解耦，使得相同的创建过程可以创建不同的对象。\n\n2.可以更加精细地控制产品的创建过程\n\n3.增加新的具体建造者无须修改原有类库的代码，符合开闭原则 \n\n**与工厂模式的区别：**\n\n工厂模式注重的是整体对象的创建方法，只为了获取对象，关注整体\n\n建造者模式注重的是部件构建的过程，旨在通过一步一步地精确构造创建出一个复杂的对象，关注细节。","source":"_posts/design-pattern/three-java-builder-pattern.md","raw":"---\ntitle: Java设计模式（三）--建造者模式\ntags:\n  - 设计模式\ncategories:\n  - 设计模式\nabbrlink: 52453\ndate: 2018-10-12 22:00:00\n---\n\n本文主要介绍了Java23种设计模式中的`建造者模式`，并结合实例描述了建造者模式的具体实现和优缺点及建造者模式和工厂模式的差别分析等。\n\n<!--more-->\n\n> 设计模式系列文章\n>\n> [Java23种设计模式](https://www.lixueduan.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/)\n\n## 1. 建造者模式介绍\n\n> 建造者模式是将一个复杂的对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。。\n\n建造者模式通常包括下面几个角色：\n\n（1） `Builder`：给出一个抽象接口，以规范产品对象的各个组成成分的建造。这个接口规定要实现复杂对象的哪些部分的创建，并不涉及具体的对象部件的创建。\n\n（2） `ConcreteBuilder`：实现Builder接口，针对不同的商业逻辑，具体化复杂对象的各部分的创建。 在建造过程完成后，提供产品的实例。\n\n（3）`Director`：调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建或按某种顺序创建。\n\n（4）`Product`：要创建的复杂对象\n\n## 2. 建造者模式实例\n\n以创建一个Person为例：\n\nProduct（要创建的对象）：\n\n```java\n//首先创建一个Person对象，简单的一些属性和get，set方法\npublic class Person {\n    private String name;\n    private String address;\n    private int age;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getAddress() {\n        return address;\n    }\n\n    public void setAddress(String address) {\n        this.address = address;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n}\n```\n\nBuilder（给出一个抽象接口，以规范产品对象的各个组成成分的建造 ）\n\n```java\n//然后创建一个接口 建造对象的标准\npublic interface Builder {\n    void builderName();\n\n    void builderAddress();\n\n    void builderAge();\n\n    Person builderPerson();\n}\n```\n\nConcreteBuilder（实现Builder接口，针对不同的商业逻辑，具体化复杂对象的各部分的创建）\n\n```java\n//接着创建一个构造具体对象的类，实现前面的标准（接口）\npublic class BuildMe implements Builder {\n    Person person;\n\n    //构造方法创建一个对象\n    public BuildMe() {\n        person = new Person();\n    }\n\n    //然后为对象添加各种属性\n    @Override\n    public void builderName() {\n        person.setName(\"lillusory\");\n    }\n\n    @Override\n    public void builderAddress() {\n        person.setAddress(\"重庆\");\n    }\n\n    @Override\n    public void builderAge() {\n        person.setAge(22);\n    }\n\n    //最后返回该对象\n    @Override\n    public Person builderPerson() {\n        return person;\n    }\n}\n\n//这里可以根据不同的逻辑或需求，实现不同的（产品）\npublic class BuildZhangSan implements Builder {\n    Person person;\n\n    public BuildZhangSan() {\n        person = new Person();\n    }\n\n    @Override\n    public void builderName() {\n        person.setName(\"张三\");\n    }\n\n    @Override\n    public void builderAddress() {\n        person.setAddress(\"北京\");\n    }\n\n    @Override\n    public void builderAge() {\n        person.setAge(20);\n    }\n\n    @Override\n    public Person builderPerson() {\n        return person;\n    }\n}\n```\n\nDirector（调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建 ）\n\n```java\n//最后创建一个Director指导者？类来创建对象\n//只负责保证对象各部分完整创建 不知道具体细节\npublic class Director {\n    public Person construcPerson(Builder builder) {\n        builder.builderName();\n        builder.builderAddress();\n        builder.builderAge();\n        return builder.builderPerson();\n    }\n}\n```\n\n测试\n\n```java\npublic class FactoryTest {\n    public static void main(String[] args) {\n        Director director = new Director();\n        Person person = director.construcPerson(new BuildMe());\n        System.out.println(person.getName());\n        System.out.println(person.getAddress());\n        System.out.println(person.getAge());\n\n        cPerson zhangSan = director.construcPerson(new BuildZhangSan());\n        System.out.println(zhangSan.getName());\n        System.out.println(zhangSan.getAddress());\n        System.out.println(zhangSan.getAge());\n    }\n}\n//输出\n        lillusory\n        重庆\n        22\n        张三\n        北京\n        20\n```\n\n## 3. 总结\n\n**建造者模式优点：**\n\n1.将对象本身与对象的创建过程解耦，使得相同的创建过程可以创建不同的对象。\n\n2.可以更加精细地控制产品的创建过程\n\n3.增加新的具体建造者无须修改原有类库的代码，符合开闭原则 \n\n**与工厂模式的区别：**\n\n工厂模式注重的是整体对象的创建方法，只为了获取对象，关注整体\n\n建造者模式注重的是部件构建的过程，旨在通过一步一步地精确构造创建出一个复杂的对象，关注细节。","slug":"design-pattern/three-java-builder-pattern","published":1,"updated":"2019-01-03T10:29:16.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqhw7t450004wkw41pk2dz1h","content":"<!-- build time:Fri Jan 04 2019 18:24:57 GMT+0800 (GMT+08:00) --><p>本文主要介绍了Java23种设计模式中的<code>建造者模式</code>，并结合实例描述了建造者模式的具体实现和优缺点及建造者模式和工厂模式的差别分析等。</p><a id=\"more\"></a><blockquote><p>设计模式系列文章</p><p><a href=\"https://www.lixueduan.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/\">Java23种设计模式</a></p></blockquote><h2 id=\"1-建造者模式介绍\"><a href=\"#1-建造者模式介绍\" class=\"headerlink\" title=\"1. 建造者模式介绍\"></a>1. 建造者模式介绍</h2><blockquote><p>建造者模式是将一个复杂的对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。。</p></blockquote><p>建造者模式通常包括下面几个角色：</p><p>（1） <code>Builder</code>：给出一个抽象接口，以规范产品对象的各个组成成分的建造。这个接口规定要实现复杂对象的哪些部分的创建，并不涉及具体的对象部件的创建。</p><p>（2） <code>ConcreteBuilder</code>：实现Builder接口，针对不同的商业逻辑，具体化复杂对象的各部分的创建。 在建造过程完成后，提供产品的实例。</p><p>（3）<code>Director</code>：调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建或按某种顺序创建。</p><p>（4）<code>Product</code>：要创建的复杂对象</p><h2 id=\"2-建造者模式实例\"><a href=\"#2-建造者模式实例\" class=\"headerlink\" title=\"2. 建造者模式实例\"></a>2. 建造者模式实例</h2><p>以创建一个Person为例：</p><p>Product（要创建的对象）：</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//首先创建一个Person对象，简单的一些属性和get，set方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String address;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAddress</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAddress</span><span class=\"params\">(String address)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.address = address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Builder（给出一个抽象接口，以规范产品对象的各个组成成分的建造 ）</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//然后创建一个接口 建造对象的标准</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">builderName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">builderAddress</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">builderAge</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">builderPerson</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>ConcreteBuilder（实现Builder接口，针对不同的商业逻辑，具体化复杂对象的各部分的创建）</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//接着创建一个构造具体对象的类，实现前面的标准（接口）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BuildMe</span> <span class=\"keyword\">implements</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\">    Person person;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造方法创建一个对象</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BuildMe</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//然后为对象添加各种属性</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">builderName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        person.setName(<span class=\"string\">\"lillusory\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">builderAddress</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        person.setAddress(<span class=\"string\">\"重庆\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">builderAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        person.setAge(<span class=\"number\">22</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//最后返回该对象</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">builderPerson</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这里可以根据不同的逻辑或需求，实现不同的（产品）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BuildZhangSan</span> <span class=\"keyword\">implements</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\">    Person person;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BuildZhangSan</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">builderName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        person.setName(<span class=\"string\">\"张三\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">builderAddress</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        person.setAddress(<span class=\"string\">\"北京\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">builderAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        person.setAge(<span class=\"number\">20</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">builderPerson</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Director（调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建 ）</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//最后创建一个Director指导者？类来创建对象</span></span><br><span class=\"line\"><span class=\"comment\">//只负责保证对象各部分完整创建 不知道具体细节</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Director</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">construcPerson</span><span class=\"params\">(Builder builder)</span> </span>&#123;</span><br><span class=\"line\">        builder.builderName();</span><br><span class=\"line\">        builder.builderAddress();</span><br><span class=\"line\">        builder.builderAge();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.builderPerson();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactoryTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Director director = <span class=\"keyword\">new</span> Director();</span><br><span class=\"line\">        Person person = director.construcPerson(<span class=\"keyword\">new</span> BuildMe());</span><br><span class=\"line\">        System.out.println(person.getName());</span><br><span class=\"line\">        System.out.println(person.getAddress());</span><br><span class=\"line\">        System.out.println(person.getAge());</span><br><span class=\"line\"></span><br><span class=\"line\">        cPerson zhangSan = director.construcPerson(<span class=\"keyword\">new</span> BuildZhangSan());</span><br><span class=\"line\">        System.out.println(zhangSan.getName());</span><br><span class=\"line\">        System.out.println(zhangSan.getAddress());</span><br><span class=\"line\">        System.out.println(zhangSan.getAge());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\">        lillusory</span><br><span class=\"line\">        重庆</span><br><span class=\"line\">        <span class=\"number\">22</span></span><br><span class=\"line\">        张三</span><br><span class=\"line\">        北京</span><br><span class=\"line\">        <span class=\"number\">20</span></span><br></pre></td></tr></table></figure><h2 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h2><p><strong>建造者模式优点：</strong></p><p>1.将对象本身与对象的创建过程解耦，使得相同的创建过程可以创建不同的对象。</p><p>2.可以更加精细地控制产品的创建过程</p><p>3.增加新的具体建造者无须修改原有类库的代码，符合开闭原则</p><p><strong>与工厂模式的区别：</strong></p><p>工厂模式注重的是整体对象的创建方法，只为了获取对象，关注整体</p><p>建造者模式注重的是部件构建的过程，旨在通过一步一步地精确构造创建出一个复杂的对象，关注细节。</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Fri Jan 04 2019 18:24:57 GMT+0800 (GMT+08:00) --><p>本文主要介绍了Java23种设计模式中的<code>建造者模式</code>，并结合实例描述了建造者模式的具体实现和优缺点及建造者模式和工厂模式的差别分析等。</p>","more":"<blockquote><p>设计模式系列文章</p><p><a href=\"https://www.lixueduan.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/\">Java23种设计模式</a></p></blockquote><h2 id=\"1-建造者模式介绍\"><a href=\"#1-建造者模式介绍\" class=\"headerlink\" title=\"1. 建造者模式介绍\"></a>1. 建造者模式介绍</h2><blockquote><p>建造者模式是将一个复杂的对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。。</p></blockquote><p>建造者模式通常包括下面几个角色：</p><p>（1） <code>Builder</code>：给出一个抽象接口，以规范产品对象的各个组成成分的建造。这个接口规定要实现复杂对象的哪些部分的创建，并不涉及具体的对象部件的创建。</p><p>（2） <code>ConcreteBuilder</code>：实现Builder接口，针对不同的商业逻辑，具体化复杂对象的各部分的创建。 在建造过程完成后，提供产品的实例。</p><p>（3）<code>Director</code>：调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建或按某种顺序创建。</p><p>（4）<code>Product</code>：要创建的复杂对象</p><h2 id=\"2-建造者模式实例\"><a href=\"#2-建造者模式实例\" class=\"headerlink\" title=\"2. 建造者模式实例\"></a>2. 建造者模式实例</h2><p>以创建一个Person为例：</p><p>Product（要创建的对象）：</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//首先创建一个Person对象，简单的一些属性和get，set方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String address;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAddress</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAddress</span><span class=\"params\">(String address)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.address = address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Builder（给出一个抽象接口，以规范产品对象的各个组成成分的建造 ）</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//然后创建一个接口 建造对象的标准</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">builderName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">builderAddress</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">builderAge</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">builderPerson</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>ConcreteBuilder（实现Builder接口，针对不同的商业逻辑，具体化复杂对象的各部分的创建）</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//接着创建一个构造具体对象的类，实现前面的标准（接口）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BuildMe</span> <span class=\"keyword\">implements</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\">    Person person;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造方法创建一个对象</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BuildMe</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//然后为对象添加各种属性</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">builderName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        person.setName(<span class=\"string\">\"lillusory\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">builderAddress</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        person.setAddress(<span class=\"string\">\"重庆\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">builderAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        person.setAge(<span class=\"number\">22</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//最后返回该对象</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">builderPerson</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这里可以根据不同的逻辑或需求，实现不同的（产品）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BuildZhangSan</span> <span class=\"keyword\">implements</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\">    Person person;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BuildZhangSan</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">builderName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        person.setName(<span class=\"string\">\"张三\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">builderAddress</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        person.setAddress(<span class=\"string\">\"北京\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">builderAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        person.setAge(<span class=\"number\">20</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">builderPerson</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Director（调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建 ）</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//最后创建一个Director指导者？类来创建对象</span></span><br><span class=\"line\"><span class=\"comment\">//只负责保证对象各部分完整创建 不知道具体细节</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Director</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">construcPerson</span><span class=\"params\">(Builder builder)</span> </span>&#123;</span><br><span class=\"line\">        builder.builderName();</span><br><span class=\"line\">        builder.builderAddress();</span><br><span class=\"line\">        builder.builderAge();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.builderPerson();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactoryTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Director director = <span class=\"keyword\">new</span> Director();</span><br><span class=\"line\">        Person person = director.construcPerson(<span class=\"keyword\">new</span> BuildMe());</span><br><span class=\"line\">        System.out.println(person.getName());</span><br><span class=\"line\">        System.out.println(person.getAddress());</span><br><span class=\"line\">        System.out.println(person.getAge());</span><br><span class=\"line\"></span><br><span class=\"line\">        cPerson zhangSan = director.construcPerson(<span class=\"keyword\">new</span> BuildZhangSan());</span><br><span class=\"line\">        System.out.println(zhangSan.getName());</span><br><span class=\"line\">        System.out.println(zhangSan.getAddress());</span><br><span class=\"line\">        System.out.println(zhangSan.getAge());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\">        lillusory</span><br><span class=\"line\">        重庆</span><br><span class=\"line\">        <span class=\"number\">22</span></span><br><span class=\"line\">        张三</span><br><span class=\"line\">        北京</span><br><span class=\"line\">        <span class=\"number\">20</span></span><br></pre></td></tr></table></figure><h2 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h2><p><strong>建造者模式优点：</strong></p><p>1.将对象本身与对象的创建过程解耦，使得相同的创建过程可以创建不同的对象。</p><p>2.可以更加精细地控制产品的创建过程</p><p>3.增加新的具体建造者无须修改原有类库的代码，符合开闭原则</p><p><strong>与工厂模式的区别：</strong></p><p>工厂模式注重的是整体对象的创建方法，只为了获取对象，关注整体</p><p>建造者模式注重的是部件构建的过程，旨在通过一步一步地精确构造创建出一个复杂的对象，关注细节。</p><!-- rebuild by neat -->"},{"title":"Java设计模式（二）--工厂模式","abbrlink":34710,"date":"2018-10-10T14:00:00.000Z","_content":"\n本章主要介绍了设计模式中的工厂模式，并结合实例描述了工厂模式的具体实现和使用场景。包括：`普通工厂模式`、`工厂方法模式`、`抽象工厂模式`等。\n\n<!--more-->\n\n> 设计模式系列文章\n>\n> [Java23种设计模式](https://www.lixueduan.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/)\n\n## 1. 工厂模式介绍\n\n工厂模式可以分为普通工厂模、工厂方法模式和抽象工厂模式。\n\n**简单工厂模式：**建立一个工厂类，根据传入的参数对实现了同一接口的一些类进行实例的创建。\n\n**工厂方法模式：**是对普通工厂方法模式的改进，提供多个工厂方法，分别创建对象。\n\n**抽象工厂模式：**创建多个工厂类，这样一旦需要增加新的功能，直接增加新的工厂类就可以了，不需要修改之前的代码。\n\n**工厂模式优点：**\n\n(1) `解耦 `：把对象的创建和使用的过程分开\n\n(2)`减少重复代码`: 若创建对象的过程很复杂，有一定的代码量，且很多地方都要用到，那么就会有很多重复代码。\n\n(3) `降低维护成本` ：创建过程都由工厂统一管理，发生业务逻辑变化，只需要在工厂里修改即可。\n\n**适用场景**\n\n（1）需要创建的对象较少。\n\n（2）客户端不关心对象的创建过程。\n\n## 2. 简单工厂模式\n\n```java\npublic interface Fruit {\n    void eat();\n}\n\npublic class Apple implements Fruit {\n    @Override\n    public void eat() {\n        System.out.println(\"Apple\");\n    }\n}\npublic class Orange implements Fruit {\n    @Override\n    public void eat() {\n        System.out.println(\"Orange\");\n    }\n}\n//水果工厂 根据不同参数创建不同的水果对象\npublic class FruitFactory {\n public static Fruit creatFruit(String fruit){\n     if (fruit.equals(\"Apple\")) {\n         return new Apple();\n     } else if (fruit.equals(\"Orange\")) {\n         return new Orange();\n     } else {\n         System.out.println(\"error unknow fruit ~\");\n         return null;\n     }\n }\n}\n\n\npublic class FactoryTest {\n    @Test\n    public void testFactory() {\n        Fruit apple = FruitFactory.creatFruit(\"Apple\");\n        apple.eat();\n    }\n}\n```\n\n## 3. 工厂方法模式\n\n```java\n//抽象水果工厂\npublic interface FruitFactory {\n    Fruit creatFruit();\n}\n//苹果工厂\npublic class AppleFactory implements FruitFactory{\n\n    @Override\n    public Fruit creatFruit() {\n        return new Apple();\n    }\n}\n//橘子工厂\npublic class OrangeFactory implements FrutiFactory {\n\n    @Override\n    public Fruit creatFruit() {\n        return new Orange();\n    }\n}\n//测试\npublic class FactoryTest {\n    @Test\n    public void testFactory() {\n        AppleFactory appleFactory = new AppleFactory();\n        Fruit apple = appleFactory.creatFruit();\n        apple.eat();\n        OrangeFactory orangeFactory = new OrangeFactory();\n        Fruit orange = orangeFactory.creatFruit();\n        orange.eat();\n    }\n}\n```\n\n## 4. 抽象工厂模式\n\n> 工厂方法模式有一个问题就是，类的创建依赖工厂类，也就是说，如果想要拓展程序，必须对工厂类进行修改，这违背了闭包原则，所以，从设计角度考虑，有一定的问题，如何解决？就用到抽象工厂模式，创建多个工厂类，这样一旦需要增加新的功能，直接增加新的工厂类就可以了，不需要修改之前的代码。\n\n```java\n//两个接口 Fruit Juice\npublic interface Fruit {\n    void eat();\n}\npublic interface Juice {\n    void drink();\n}\n//四个对象 苹果 橘子 苹果汁 橘子汁\npublic class Apple implements Fruit {\n    @Override\n    public void eat() {\n        System.out.println(\"Apple\");\n    }\n}\n\npublic class Orange implements Fruit {\n    @Override\n    public void eat() {\n        System.out.println(\"Orange\");\n    }\n}\n\npublic class AppleJuice implements Juice {\n    @Override\n    public void drink() {\n        System.out.println(\"AppleJuice\");\n    }\n}\n\npublic class OrangeJuice implements Juice {\n    @Override\n    public void drink() {\n        System.out.println(\"OrangeJuice\");\n    }\n}\n\n//抽象工厂 生产水果和果汁\npublic interface AbstractFactory {\n     Fruit creatFruit();\n\n     Juice creatJuice();\n}\n//具体工厂 生产苹果相关产品\npublic class AppleFactory implements AbstractFactory {\n    @Override\n    public Fruit creatFruit() {\n        return new Apple();\n    }\n\n    @Override\n    public Juice creatJuice() {\n        return new AppleJuice();\n    }\n}\n//具体工厂 生产橘子相关产品\npublic class OrangeFactory implements AbstractFactory {\n    @Override\n    public Fruit creatFruit() {\n        return new Orange();\n    }\n\n    @Override\n    public Juice creatJuice() {\n        return new OrangeJuice();\n    }\n}\n\n//测试\n    @Test\n    public void testFactory(){\n        AppleFactory appleFactory=new AppleFactory();\n        Fruit apple =  appleFactory.creatFruit();\n        Juice appleJuice=  appleFactory.creatJuice();\n        apple.eat();\n        appleJuice.drink();\n        OrangeFactory orangeFactory=new OrangeFactory();\n        Fruit orange=  orangeFactory.creatFruit();\n        Juice orangeJuice=  orangeFactory.creatJuice();\n        orange.eat();\n        orangeJuice.drink();\n    }\n```\n\n## 5. 总结\n\n**工厂模式的优点？为什么要使用工厂模式**\n\n- 工厂都是用来封装对象的具体创建过程，减少重复代码，降低对象变化时的维护成本，将对象创建过程和使用相解耦。 \n- 工厂方法模式使用继承，抽象工厂使用对象组合；两者利用抽象的原则，将具体的实例化过程延迟到子类。 \n- 工厂利用的最重要和基本的原则——依赖抽象，不要依赖具体类。\n\n**应用场景**\n\n简单工厂：适合创建同一级别的不同对象。\n\n工厂方法：为每种产品提供一个工厂类，通过不同的工厂实例来创建不同的产品。\n\n抽象工厂模式：一个对象族（或是一组没有任何关系的对象）都有相同的约束，则可以使用抽象工厂模式。\n\n## 6. 参考\n\n`https://blog.csdn.net/d1562901685/article/details/77623237`\n\n","source":"_posts/design-pattern/two-java-factory-pattern.md","raw":"---\ntitle: Java设计模式（二）--工厂模式\ntags:\n  - 设计模式\ncategories:\n  - 设计模式\nabbrlink: 34710\ndate: 2018-10-10 22:00:00\n---\n\n本章主要介绍了设计模式中的工厂模式，并结合实例描述了工厂模式的具体实现和使用场景。包括：`普通工厂模式`、`工厂方法模式`、`抽象工厂模式`等。\n\n<!--more-->\n\n> 设计模式系列文章\n>\n> [Java23种设计模式](https://www.lixueduan.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/)\n\n## 1. 工厂模式介绍\n\n工厂模式可以分为普通工厂模、工厂方法模式和抽象工厂模式。\n\n**简单工厂模式：**建立一个工厂类，根据传入的参数对实现了同一接口的一些类进行实例的创建。\n\n**工厂方法模式：**是对普通工厂方法模式的改进，提供多个工厂方法，分别创建对象。\n\n**抽象工厂模式：**创建多个工厂类，这样一旦需要增加新的功能，直接增加新的工厂类就可以了，不需要修改之前的代码。\n\n**工厂模式优点：**\n\n(1) `解耦 `：把对象的创建和使用的过程分开\n\n(2)`减少重复代码`: 若创建对象的过程很复杂，有一定的代码量，且很多地方都要用到，那么就会有很多重复代码。\n\n(3) `降低维护成本` ：创建过程都由工厂统一管理，发生业务逻辑变化，只需要在工厂里修改即可。\n\n**适用场景**\n\n（1）需要创建的对象较少。\n\n（2）客户端不关心对象的创建过程。\n\n## 2. 简单工厂模式\n\n```java\npublic interface Fruit {\n    void eat();\n}\n\npublic class Apple implements Fruit {\n    @Override\n    public void eat() {\n        System.out.println(\"Apple\");\n    }\n}\npublic class Orange implements Fruit {\n    @Override\n    public void eat() {\n        System.out.println(\"Orange\");\n    }\n}\n//水果工厂 根据不同参数创建不同的水果对象\npublic class FruitFactory {\n public static Fruit creatFruit(String fruit){\n     if (fruit.equals(\"Apple\")) {\n         return new Apple();\n     } else if (fruit.equals(\"Orange\")) {\n         return new Orange();\n     } else {\n         System.out.println(\"error unknow fruit ~\");\n         return null;\n     }\n }\n}\n\n\npublic class FactoryTest {\n    @Test\n    public void testFactory() {\n        Fruit apple = FruitFactory.creatFruit(\"Apple\");\n        apple.eat();\n    }\n}\n```\n\n## 3. 工厂方法模式\n\n```java\n//抽象水果工厂\npublic interface FruitFactory {\n    Fruit creatFruit();\n}\n//苹果工厂\npublic class AppleFactory implements FruitFactory{\n\n    @Override\n    public Fruit creatFruit() {\n        return new Apple();\n    }\n}\n//橘子工厂\npublic class OrangeFactory implements FrutiFactory {\n\n    @Override\n    public Fruit creatFruit() {\n        return new Orange();\n    }\n}\n//测试\npublic class FactoryTest {\n    @Test\n    public void testFactory() {\n        AppleFactory appleFactory = new AppleFactory();\n        Fruit apple = appleFactory.creatFruit();\n        apple.eat();\n        OrangeFactory orangeFactory = new OrangeFactory();\n        Fruit orange = orangeFactory.creatFruit();\n        orange.eat();\n    }\n}\n```\n\n## 4. 抽象工厂模式\n\n> 工厂方法模式有一个问题就是，类的创建依赖工厂类，也就是说，如果想要拓展程序，必须对工厂类进行修改，这违背了闭包原则，所以，从设计角度考虑，有一定的问题，如何解决？就用到抽象工厂模式，创建多个工厂类，这样一旦需要增加新的功能，直接增加新的工厂类就可以了，不需要修改之前的代码。\n\n```java\n//两个接口 Fruit Juice\npublic interface Fruit {\n    void eat();\n}\npublic interface Juice {\n    void drink();\n}\n//四个对象 苹果 橘子 苹果汁 橘子汁\npublic class Apple implements Fruit {\n    @Override\n    public void eat() {\n        System.out.println(\"Apple\");\n    }\n}\n\npublic class Orange implements Fruit {\n    @Override\n    public void eat() {\n        System.out.println(\"Orange\");\n    }\n}\n\npublic class AppleJuice implements Juice {\n    @Override\n    public void drink() {\n        System.out.println(\"AppleJuice\");\n    }\n}\n\npublic class OrangeJuice implements Juice {\n    @Override\n    public void drink() {\n        System.out.println(\"OrangeJuice\");\n    }\n}\n\n//抽象工厂 生产水果和果汁\npublic interface AbstractFactory {\n     Fruit creatFruit();\n\n     Juice creatJuice();\n}\n//具体工厂 生产苹果相关产品\npublic class AppleFactory implements AbstractFactory {\n    @Override\n    public Fruit creatFruit() {\n        return new Apple();\n    }\n\n    @Override\n    public Juice creatJuice() {\n        return new AppleJuice();\n    }\n}\n//具体工厂 生产橘子相关产品\npublic class OrangeFactory implements AbstractFactory {\n    @Override\n    public Fruit creatFruit() {\n        return new Orange();\n    }\n\n    @Override\n    public Juice creatJuice() {\n        return new OrangeJuice();\n    }\n}\n\n//测试\n    @Test\n    public void testFactory(){\n        AppleFactory appleFactory=new AppleFactory();\n        Fruit apple =  appleFactory.creatFruit();\n        Juice appleJuice=  appleFactory.creatJuice();\n        apple.eat();\n        appleJuice.drink();\n        OrangeFactory orangeFactory=new OrangeFactory();\n        Fruit orange=  orangeFactory.creatFruit();\n        Juice orangeJuice=  orangeFactory.creatJuice();\n        orange.eat();\n        orangeJuice.drink();\n    }\n```\n\n## 5. 总结\n\n**工厂模式的优点？为什么要使用工厂模式**\n\n- 工厂都是用来封装对象的具体创建过程，减少重复代码，降低对象变化时的维护成本，将对象创建过程和使用相解耦。 \n- 工厂方法模式使用继承，抽象工厂使用对象组合；两者利用抽象的原则，将具体的实例化过程延迟到子类。 \n- 工厂利用的最重要和基本的原则——依赖抽象，不要依赖具体类。\n\n**应用场景**\n\n简单工厂：适合创建同一级别的不同对象。\n\n工厂方法：为每种产品提供一个工厂类，通过不同的工厂实例来创建不同的产品。\n\n抽象工厂模式：一个对象族（或是一组没有任何关系的对象）都有相同的约束，则可以使用抽象工厂模式。\n\n## 6. 参考\n\n`https://blog.csdn.net/d1562901685/article/details/77623237`\n\n","slug":"design-pattern/two-java-factory-pattern","published":1,"updated":"2019-01-03T10:29:16.246Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqhw7t4r0007wkw4h7fud607","content":"<!-- build time:Fri Jan 04 2019 18:24:57 GMT+0800 (GMT+08:00) --><p>本章主要介绍了设计模式中的工厂模式，并结合实例描述了工厂模式的具体实现和使用场景。包括：<code>普通工厂模式</code>、<code>工厂方法模式</code>、<code>抽象工厂模式</code>等。</p><a id=\"more\"></a><blockquote><p>设计模式系列文章</p><p><a href=\"https://www.lixueduan.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/\">Java23种设计模式</a></p></blockquote><h2 id=\"1-工厂模式介绍\"><a href=\"#1-工厂模式介绍\" class=\"headerlink\" title=\"1. 工厂模式介绍\"></a>1. 工厂模式介绍</h2><p>工厂模式可以分为普通工厂模、工厂方法模式和抽象工厂模式。</p><p><strong>简单工厂模式：</strong>建立一个工厂类，根据传入的参数对实现了同一接口的一些类进行实例的创建。</p><p><strong>工厂方法模式：</strong>是对普通工厂方法模式的改进，提供多个工厂方法，分别创建对象。</p><p><strong>抽象工厂模式：</strong>创建多个工厂类，这样一旦需要增加新的功能，直接增加新的工厂类就可以了，不需要修改之前的代码。</p><p><strong>工厂模式优点：</strong></p><p>(1) <code>解耦</code>：把对象的创建和使用的过程分开</p><p>(2)<code>减少重复代码</code>: 若创建对象的过程很复杂，有一定的代码量，且很多地方都要用到，那么就会有很多重复代码。</p><p>(3) <code>降低维护成本</code> ：创建过程都由工厂统一管理，发生业务逻辑变化，只需要在工厂里修改即可。</p><p><strong>适用场景</strong></p><p>（1）需要创建的对象较少。</p><p>（2）客户端不关心对象的创建过程。</p><h2 id=\"2-简单工厂模式\"><a href=\"#2-简单工厂模式\" class=\"headerlink\" title=\"2. 简单工厂模式\"></a>2. 简单工厂模式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span> <span class=\"keyword\">implements</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Apple\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Orange</span> <span class=\"keyword\">implements</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Orange\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//水果工厂 根据不同参数创建不同的水果对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FruitFactory</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Fruit <span class=\"title\">creatFruit</span><span class=\"params\">(String fruit)</span></span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (fruit.equals(<span class=\"string\">\"Apple\"</span>)) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Apple();</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fruit.equals(<span class=\"string\">\"Orange\"</span>)) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Orange();</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">\"error unknow fruit ~\"</span>);</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactoryTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Fruit apple = FruitFactory.creatFruit(<span class=\"string\">\"Apple\"</span>);</span><br><span class=\"line\">        apple.eat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"3-工厂方法模式\"><a href=\"#3-工厂方法模式\" class=\"headerlink\" title=\"3. 工厂方法模式\"></a>3. 工厂方法模式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//抽象水果工厂</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FruitFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Fruit <span class=\"title\">creatFruit</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//苹果工厂</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppleFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">FruitFactory</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Fruit <span class=\"title\">creatFruit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Apple();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//橘子工厂</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrangeFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">FrutiFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Fruit <span class=\"title\">creatFruit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Orange();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//测试</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactoryTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        AppleFactory appleFactory = <span class=\"keyword\">new</span> AppleFactory();</span><br><span class=\"line\">        Fruit apple = appleFactory.creatFruit();</span><br><span class=\"line\">        apple.eat();</span><br><span class=\"line\">        OrangeFactory orangeFactory = <span class=\"keyword\">new</span> OrangeFactory();</span><br><span class=\"line\">        Fruit orange = orangeFactory.creatFruit();</span><br><span class=\"line\">        orange.eat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"4-抽象工厂模式\"><a href=\"#4-抽象工厂模式\" class=\"headerlink\" title=\"4. 抽象工厂模式\"></a>4. 抽象工厂模式</h2><blockquote><p>工厂方法模式有一个问题就是，类的创建依赖工厂类，也就是说，如果想要拓展程序，必须对工厂类进行修改，这违背了闭包原则，所以，从设计角度考虑，有一定的问题，如何解决？就用到抽象工厂模式，创建多个工厂类，这样一旦需要增加新的功能，直接增加新的工厂类就可以了，不需要修改之前的代码。</p></blockquote><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//两个接口 Fruit Juice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Juice</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">drink</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//四个对象 苹果 橘子 苹果汁 橘子汁</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span> <span class=\"keyword\">implements</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Apple\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Orange</span> <span class=\"keyword\">implements</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Orange\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppleJuice</span> <span class=\"keyword\">implements</span> <span class=\"title\">Juice</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drink</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"AppleJuice\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrangeJuice</span> <span class=\"keyword\">implements</span> <span class=\"title\">Juice</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drink</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"OrangeJuice\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//抽象工厂 生产水果和果汁</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"function\">Fruit <span class=\"title\">creatFruit</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"function\">Juice <span class=\"title\">creatJuice</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//具体工厂 生产苹果相关产品</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppleFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Fruit <span class=\"title\">creatFruit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Apple();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Juice <span class=\"title\">creatJuice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AppleJuice();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//具体工厂 生产橘子相关产品</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrangeFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Fruit <span class=\"title\">creatFruit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Orange();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Juice <span class=\"title\">creatJuice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> OrangeJuice();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testFactory</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        AppleFactory appleFactory=<span class=\"keyword\">new</span> AppleFactory();</span><br><span class=\"line\">        Fruit apple =  appleFactory.creatFruit();</span><br><span class=\"line\">        Juice appleJuice=  appleFactory.creatJuice();</span><br><span class=\"line\">        apple.eat();</span><br><span class=\"line\">        appleJuice.drink();</span><br><span class=\"line\">        OrangeFactory orangeFactory=<span class=\"keyword\">new</span> OrangeFactory();</span><br><span class=\"line\">        Fruit orange=  orangeFactory.creatFruit();</span><br><span class=\"line\">        Juice orangeJuice=  orangeFactory.creatJuice();</span><br><span class=\"line\">        orange.eat();</span><br><span class=\"line\">        orangeJuice.drink();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure><h2 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h2><p><strong>工厂模式的优点？为什么要使用工厂模式</strong></p><ul><li>工厂都是用来封装对象的具体创建过程，减少重复代码，降低对象变化时的维护成本，将对象创建过程和使用相解耦。</li><li>工厂方法模式使用继承，抽象工厂使用对象组合；两者利用抽象的原则，将具体的实例化过程延迟到子类。</li><li>工厂利用的最重要和基本的原则——依赖抽象，不要依赖具体类。</li></ul><p><strong>应用场景</strong></p><p>简单工厂：适合创建同一级别的不同对象。</p><p>工厂方法：为每种产品提供一个工厂类，通过不同的工厂实例来创建不同的产品。</p><p>抽象工厂模式：一个对象族（或是一组没有任何关系的对象）都有相同的约束，则可以使用抽象工厂模式。</p><h2 id=\"6-参考\"><a href=\"#6-参考\" class=\"headerlink\" title=\"6. 参考\"></a>6. 参考</h2><p><code>https://blog.csdn.net/d1562901685/article/details/77623237</code></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Fri Jan 04 2019 18:24:57 GMT+0800 (GMT+08:00) --><p>本章主要介绍了设计模式中的工厂模式，并结合实例描述了工厂模式的具体实现和使用场景。包括：<code>普通工厂模式</code>、<code>工厂方法模式</code>、<code>抽象工厂模式</code>等。</p>","more":"<blockquote><p>设计模式系列文章</p><p><a href=\"https://www.lixueduan.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/\">Java23种设计模式</a></p></blockquote><h2 id=\"1-工厂模式介绍\"><a href=\"#1-工厂模式介绍\" class=\"headerlink\" title=\"1. 工厂模式介绍\"></a>1. 工厂模式介绍</h2><p>工厂模式可以分为普通工厂模、工厂方法模式和抽象工厂模式。</p><p><strong>简单工厂模式：</strong>建立一个工厂类，根据传入的参数对实现了同一接口的一些类进行实例的创建。</p><p><strong>工厂方法模式：</strong>是对普通工厂方法模式的改进，提供多个工厂方法，分别创建对象。</p><p><strong>抽象工厂模式：</strong>创建多个工厂类，这样一旦需要增加新的功能，直接增加新的工厂类就可以了，不需要修改之前的代码。</p><p><strong>工厂模式优点：</strong></p><p>(1) <code>解耦</code>：把对象的创建和使用的过程分开</p><p>(2)<code>减少重复代码</code>: 若创建对象的过程很复杂，有一定的代码量，且很多地方都要用到，那么就会有很多重复代码。</p><p>(3) <code>降低维护成本</code> ：创建过程都由工厂统一管理，发生业务逻辑变化，只需要在工厂里修改即可。</p><p><strong>适用场景</strong></p><p>（1）需要创建的对象较少。</p><p>（2）客户端不关心对象的创建过程。</p><h2 id=\"2-简单工厂模式\"><a href=\"#2-简单工厂模式\" class=\"headerlink\" title=\"2. 简单工厂模式\"></a>2. 简单工厂模式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span> <span class=\"keyword\">implements</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Apple\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Orange</span> <span class=\"keyword\">implements</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Orange\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//水果工厂 根据不同参数创建不同的水果对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FruitFactory</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Fruit <span class=\"title\">creatFruit</span><span class=\"params\">(String fruit)</span></span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (fruit.equals(<span class=\"string\">\"Apple\"</span>)) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Apple();</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fruit.equals(<span class=\"string\">\"Orange\"</span>)) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Orange();</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">\"error unknow fruit ~\"</span>);</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactoryTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Fruit apple = FruitFactory.creatFruit(<span class=\"string\">\"Apple\"</span>);</span><br><span class=\"line\">        apple.eat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"3-工厂方法模式\"><a href=\"#3-工厂方法模式\" class=\"headerlink\" title=\"3. 工厂方法模式\"></a>3. 工厂方法模式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//抽象水果工厂</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FruitFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Fruit <span class=\"title\">creatFruit</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//苹果工厂</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppleFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">FruitFactory</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Fruit <span class=\"title\">creatFruit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Apple();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//橘子工厂</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrangeFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">FrutiFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Fruit <span class=\"title\">creatFruit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Orange();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//测试</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactoryTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        AppleFactory appleFactory = <span class=\"keyword\">new</span> AppleFactory();</span><br><span class=\"line\">        Fruit apple = appleFactory.creatFruit();</span><br><span class=\"line\">        apple.eat();</span><br><span class=\"line\">        OrangeFactory orangeFactory = <span class=\"keyword\">new</span> OrangeFactory();</span><br><span class=\"line\">        Fruit orange = orangeFactory.creatFruit();</span><br><span class=\"line\">        orange.eat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"4-抽象工厂模式\"><a href=\"#4-抽象工厂模式\" class=\"headerlink\" title=\"4. 抽象工厂模式\"></a>4. 抽象工厂模式</h2><blockquote><p>工厂方法模式有一个问题就是，类的创建依赖工厂类，也就是说，如果想要拓展程序，必须对工厂类进行修改，这违背了闭包原则，所以，从设计角度考虑，有一定的问题，如何解决？就用到抽象工厂模式，创建多个工厂类，这样一旦需要增加新的功能，直接增加新的工厂类就可以了，不需要修改之前的代码。</p></blockquote><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//两个接口 Fruit Juice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Juice</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">drink</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//四个对象 苹果 橘子 苹果汁 橘子汁</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span> <span class=\"keyword\">implements</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Apple\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Orange</span> <span class=\"keyword\">implements</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Orange\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppleJuice</span> <span class=\"keyword\">implements</span> <span class=\"title\">Juice</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drink</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"AppleJuice\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrangeJuice</span> <span class=\"keyword\">implements</span> <span class=\"title\">Juice</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drink</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"OrangeJuice\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//抽象工厂 生产水果和果汁</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"function\">Fruit <span class=\"title\">creatFruit</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"function\">Juice <span class=\"title\">creatJuice</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//具体工厂 生产苹果相关产品</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppleFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Fruit <span class=\"title\">creatFruit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Apple();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Juice <span class=\"title\">creatJuice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AppleJuice();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//具体工厂 生产橘子相关产品</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrangeFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Fruit <span class=\"title\">creatFruit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Orange();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Juice <span class=\"title\">creatJuice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> OrangeJuice();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testFactory</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        AppleFactory appleFactory=<span class=\"keyword\">new</span> AppleFactory();</span><br><span class=\"line\">        Fruit apple =  appleFactory.creatFruit();</span><br><span class=\"line\">        Juice appleJuice=  appleFactory.creatJuice();</span><br><span class=\"line\">        apple.eat();</span><br><span class=\"line\">        appleJuice.drink();</span><br><span class=\"line\">        OrangeFactory orangeFactory=<span class=\"keyword\">new</span> OrangeFactory();</span><br><span class=\"line\">        Fruit orange=  orangeFactory.creatFruit();</span><br><span class=\"line\">        Juice orangeJuice=  orangeFactory.creatJuice();</span><br><span class=\"line\">        orange.eat();</span><br><span class=\"line\">        orangeJuice.drink();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure><h2 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h2><p><strong>工厂模式的优点？为什么要使用工厂模式</strong></p><ul><li>工厂都是用来封装对象的具体创建过程，减少重复代码，降低对象变化时的维护成本，将对象创建过程和使用相解耦。</li><li>工厂方法模式使用继承，抽象工厂使用对象组合；两者利用抽象的原则，将具体的实例化过程延迟到子类。</li><li>工厂利用的最重要和基本的原则——依赖抽象，不要依赖具体类。</li></ul><p><strong>应用场景</strong></p><p>简单工厂：适合创建同一级别的不同对象。</p><p>工厂方法：为每种产品提供一个工厂类，通过不同的工厂实例来创建不同的产品。</p><p>抽象工厂模式：一个对象族（或是一组没有任何关系的对象）都有相同的约束，则可以使用抽象工厂模式。</p><h2 id=\"6-参考\"><a href=\"#6-参考\" class=\"headerlink\" title=\"6. 参考\"></a>6. 参考</h2><p><code>https://blog.csdn.net/d1562901685/article/details/77623237</code></p><!-- rebuild by neat -->"},{"title":"计算机网络(一)--OSI七层模型","abbrlink":25470,"date":"2018-11-03T14:00:00.000Z","_content":"\n本文主要通过OSI七层模型与常用TCP/IP5层模型介绍了各层的主要作用，包括`应用层`，`运输层`，`网络层`，`数据链路层`，`物理层`等。\n\n<!--more-->\n\n> 计算机网络系列文章\n>\n> * [计算机网络(一)--OSI七层模型](https://www.lixueduan.com/computer-network/one-network-model/)\n> * [计算机网络(二)--TCP三次握手四次挥手](https://www.lixueduan.com/computer-network/two-tcp-connection/)\n> * [计算机网络(三)--TCP如何保证传输可靠性](https://www.lixueduan.com/computer-network/three-tcp-reliability/)\n> * [计算机网络(四)--HTTP与HTTPS](https://www.lixueduan.com/computer-network/four-http-https/)\n> * [计算机网络(五)--从输入URL到页面加载的过程中发生了什么](计算机网络(五)--从输入URL到页面加载的过程中发生了什么)\n\n\n\n## OSI与TCP/IP模型\n\n![Model](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/osi-tcp-ip-model.png)\n\n**`应用层:`通过应用进程间的交互来完成特定网络应用。**\n\n**`运输层：`向用户提供可靠的、端到端的差错和流量控制，保证报文的正确传输。**\n\n**`网络层：`通过路由算法，为报文或分组通过通信子网选择最适当的路径。**\n\n**`数据链路层：`其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。** \n\n**`物理层：`利用传输介质为数据链路层提供屋里连接，实现比特流的透明传输。**\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-ip-model.gif)\n\n### 1. 应用层\n\n**主要作用:通过应用进程间的交互来完成特定网络应用。**\n\n**应用层协议定义的是应用进程（进程：主机中正在运行的程序）间的通信和交互的规则。对于不同的网络应用需要不同的应用层协议。在互联网中应用层协议很多，如域名系统DNS**，支持万维网应用的 **HTTP协议**，支持电子邮件的 **SMTP协议**等等。我们把应用层交互的数据单元称为报文。\n\n### 2. 运输层\n\n　**主要任务：向用户提供可靠的、端到端的差错和流量控制，保证报文的正确传输。**\n\n　**主要作用**：向高层屏蔽下层数据通信的具体细节，即向用户透明的传送报文。\n\n主要用到的协议：\n\n1. **传输控制协议 TCP**（Transmisson Control Protocol）--提供**面向连接**的，**可靠的**数据传输服务。\n2. **用户数据协议 UDP**（User Datagram Protocol）--提供**无连接**的，尽最大努力的数据传输服务（**不保证数据传输的可靠性**）。\n\n#### 2.1 UDP\n\n1. UDP 是无连接的；\n2. UDP 使用尽最大努力交付，即不保证可靠交付，因此主机不需要维持复杂的链接状态（这里面有许多参数）；\n3. UDP 是面向报文的；\n4. UDP 没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如 直播，实时视频会议等）；\n5. UDP 支持一对一、一对多、多对一和多对多的交互通信；\n6. UDP 的首部开销小，只有8个字节，比TCP的20个字节的首部要短。\n\n#### 2.2 TCP \n\n1. TCP 是面向连接的。（就好像打电话一样，通话前需要先拨号建立连接，通话结束后要挂机释放连接）；\n2. 每一条 TCP 连接只能有两个端点，每一条TCP连接只能是点对点的（一对一）；\n3. TCP 提供可靠交付的服务。通过TCP连接传送的数据，无差错、不丢失、不重复、并且按序到达；\n4. TCP 提供全双工通信。TCP 允许通信双方的应用进程在任何时候都能发送数据。TCP 连接的两端都设有发送缓存和接收缓存，用来临时存放双方通信的数据；\n5. 面向字节流。TCP 中的“流”（Stream）指的是流入进程或从进程流出的字节序列。“面向字节流”的含义是：虽然应用程序和 TCP 的交互是一次一个数据块（大小不等），但 TCP 把应用程序交下来的数据仅仅看成是一连串的无结构的字节流。\n\n### 3. 网络层\n\n**主要任务：通过路由算法，为报文或分组通过通信子网选择最适当的路径。**该层控制数据链路层与物理层之间的信息转发，建立、维持与终止网络的连接。具体的说，数据链路层的数据在这一层被转换为数据包，然后通过路径选择、分段组合、顺序、进/出路由等控制，将信息从一个网络设备传送到另一个网络设备。\n\n**一般的，数据链路层是解决统一网络内节点之间的通信，而网络层主要解决不同子网之间的通信。例如路由选择问题。**\n\n在实现网络层功能时，需要解决的主要问题如下：\n\n**寻址**：数据链路层中使用的物理地址（如MAC地址）仅解决网络内部的寻址问题。在不同子网之间通信时，为了识别和找到网络中的设备，每一子网中的设备都会被分配一 个唯一的地址。由于各个子网使用的物理技术可能不同，因此这个地址应当是逻辑地址（如IP地址）\n\n**交换：**规定不同的交换方式。常见的交换技术有：线路交换技术和存储转发技术，后者包括报文转发技术和分组转发技术。\n**路由算法：**当源节点和路由节点之间存在多条路径时，本层可以根据路由算法，通过网络为数据分组选择最佳路径，并将信息从最合适的路径，由发送端传送的接受端。\n**连接服务：**与数据链路层的流量控制不同的是，前者控制的是网络相邻节点间的流量，后者控制的是从源节点到目的节点间的流量。其目的在于防止阻塞，并进行差错检测\n\n### 4. 数据链路层\n\n**其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。** \n\n**主要功能**：通过各种控制协议，将有差错的物理信道变为无差错的、能可靠传输数据帧的数据链路。\n\n**具体工作**：接受来自物理层的位流形式的数据，并封装成帧，传送到上一层；同样，也将来自上一层的数据帧，拆装为位流形式的数据转发到物理层；并且还负责处理接受端发回的确认帧的信息，以便提供可靠的数据传输。\n\n该层通常又被分为 介质访问控制(MAC)和逻辑链路控制(LLC)两个子层：\n **MAC子层**的主要任务是**解决共享型网络中多用户对信道竞争的问题，完成网络介质的访问控制。**\n**LLC子层**的主要任务是**建立和维护网络连接，执行差错校验、流量控制和链路控制。**\n\n### 5. 物理层\n\n**主要功能：利用传输介质为数据链路层提供屋里连接，实现比特流的透明传输。**\n\n**作用**：实现相邻计算机节点之间比特流的透明传输，尽可能屏蔽掉具体传输介质与物理设备的差异。使其上面的数据链路层不必考虑网络的具体传输介质是什么。\n\n**透明传输的意义就是：不管传的是什么，所采用的设备只是起一个通道作用，把要传输的内容完好的传到对方！**\n\n在互联网使用的各种协中最重要和最著名的就是 TCP/IP 两个协议。现在人们经常提到的TCP/IP并不一定单指TCP和IP这两个具体的协议，而往往表示互联网所使用的整个TCP/IP协议族。\n\n### 6. 参考\n\n`https://blog.csdn.net/yaopeng_2005/article/details/7064869`","source":"_posts/computer-network/one-network-model.md","raw":"---\ntitle: 计算机网络(一)--OSI七层模型\ntags:\n  - 计算机网络\n  - TCP/IP\ncategories:\n  - 计算机网络\nabbrlink: 25470\ndate: 2018-11-03 22:00:00\n---\n\n本文主要通过OSI七层模型与常用TCP/IP5层模型介绍了各层的主要作用，包括`应用层`，`运输层`，`网络层`，`数据链路层`，`物理层`等。\n\n<!--more-->\n\n> 计算机网络系列文章\n>\n> * [计算机网络(一)--OSI七层模型](https://www.lixueduan.com/computer-network/one-network-model/)\n> * [计算机网络(二)--TCP三次握手四次挥手](https://www.lixueduan.com/computer-network/two-tcp-connection/)\n> * [计算机网络(三)--TCP如何保证传输可靠性](https://www.lixueduan.com/computer-network/three-tcp-reliability/)\n> * [计算机网络(四)--HTTP与HTTPS](https://www.lixueduan.com/computer-network/four-http-https/)\n> * [计算机网络(五)--从输入URL到页面加载的过程中发生了什么](计算机网络(五)--从输入URL到页面加载的过程中发生了什么)\n\n\n\n## OSI与TCP/IP模型\n\n![Model](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/osi-tcp-ip-model.png)\n\n**`应用层:`通过应用进程间的交互来完成特定网络应用。**\n\n**`运输层：`向用户提供可靠的、端到端的差错和流量控制，保证报文的正确传输。**\n\n**`网络层：`通过路由算法，为报文或分组通过通信子网选择最适当的路径。**\n\n**`数据链路层：`其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。** \n\n**`物理层：`利用传输介质为数据链路层提供屋里连接，实现比特流的透明传输。**\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-ip-model.gif)\n\n### 1. 应用层\n\n**主要作用:通过应用进程间的交互来完成特定网络应用。**\n\n**应用层协议定义的是应用进程（进程：主机中正在运行的程序）间的通信和交互的规则。对于不同的网络应用需要不同的应用层协议。在互联网中应用层协议很多，如域名系统DNS**，支持万维网应用的 **HTTP协议**，支持电子邮件的 **SMTP协议**等等。我们把应用层交互的数据单元称为报文。\n\n### 2. 运输层\n\n　**主要任务：向用户提供可靠的、端到端的差错和流量控制，保证报文的正确传输。**\n\n　**主要作用**：向高层屏蔽下层数据通信的具体细节，即向用户透明的传送报文。\n\n主要用到的协议：\n\n1. **传输控制协议 TCP**（Transmisson Control Protocol）--提供**面向连接**的，**可靠的**数据传输服务。\n2. **用户数据协议 UDP**（User Datagram Protocol）--提供**无连接**的，尽最大努力的数据传输服务（**不保证数据传输的可靠性**）。\n\n#### 2.1 UDP\n\n1. UDP 是无连接的；\n2. UDP 使用尽最大努力交付，即不保证可靠交付，因此主机不需要维持复杂的链接状态（这里面有许多参数）；\n3. UDP 是面向报文的；\n4. UDP 没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如 直播，实时视频会议等）；\n5. UDP 支持一对一、一对多、多对一和多对多的交互通信；\n6. UDP 的首部开销小，只有8个字节，比TCP的20个字节的首部要短。\n\n#### 2.2 TCP \n\n1. TCP 是面向连接的。（就好像打电话一样，通话前需要先拨号建立连接，通话结束后要挂机释放连接）；\n2. 每一条 TCP 连接只能有两个端点，每一条TCP连接只能是点对点的（一对一）；\n3. TCP 提供可靠交付的服务。通过TCP连接传送的数据，无差错、不丢失、不重复、并且按序到达；\n4. TCP 提供全双工通信。TCP 允许通信双方的应用进程在任何时候都能发送数据。TCP 连接的两端都设有发送缓存和接收缓存，用来临时存放双方通信的数据；\n5. 面向字节流。TCP 中的“流”（Stream）指的是流入进程或从进程流出的字节序列。“面向字节流”的含义是：虽然应用程序和 TCP 的交互是一次一个数据块（大小不等），但 TCP 把应用程序交下来的数据仅仅看成是一连串的无结构的字节流。\n\n### 3. 网络层\n\n**主要任务：通过路由算法，为报文或分组通过通信子网选择最适当的路径。**该层控制数据链路层与物理层之间的信息转发，建立、维持与终止网络的连接。具体的说，数据链路层的数据在这一层被转换为数据包，然后通过路径选择、分段组合、顺序、进/出路由等控制，将信息从一个网络设备传送到另一个网络设备。\n\n**一般的，数据链路层是解决统一网络内节点之间的通信，而网络层主要解决不同子网之间的通信。例如路由选择问题。**\n\n在实现网络层功能时，需要解决的主要问题如下：\n\n**寻址**：数据链路层中使用的物理地址（如MAC地址）仅解决网络内部的寻址问题。在不同子网之间通信时，为了识别和找到网络中的设备，每一子网中的设备都会被分配一 个唯一的地址。由于各个子网使用的物理技术可能不同，因此这个地址应当是逻辑地址（如IP地址）\n\n**交换：**规定不同的交换方式。常见的交换技术有：线路交换技术和存储转发技术，后者包括报文转发技术和分组转发技术。\n**路由算法：**当源节点和路由节点之间存在多条路径时，本层可以根据路由算法，通过网络为数据分组选择最佳路径，并将信息从最合适的路径，由发送端传送的接受端。\n**连接服务：**与数据链路层的流量控制不同的是，前者控制的是网络相邻节点间的流量，后者控制的是从源节点到目的节点间的流量。其目的在于防止阻塞，并进行差错检测\n\n### 4. 数据链路层\n\n**其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。** \n\n**主要功能**：通过各种控制协议，将有差错的物理信道变为无差错的、能可靠传输数据帧的数据链路。\n\n**具体工作**：接受来自物理层的位流形式的数据，并封装成帧，传送到上一层；同样，也将来自上一层的数据帧，拆装为位流形式的数据转发到物理层；并且还负责处理接受端发回的确认帧的信息，以便提供可靠的数据传输。\n\n该层通常又被分为 介质访问控制(MAC)和逻辑链路控制(LLC)两个子层：\n **MAC子层**的主要任务是**解决共享型网络中多用户对信道竞争的问题，完成网络介质的访问控制。**\n**LLC子层**的主要任务是**建立和维护网络连接，执行差错校验、流量控制和链路控制。**\n\n### 5. 物理层\n\n**主要功能：利用传输介质为数据链路层提供屋里连接，实现比特流的透明传输。**\n\n**作用**：实现相邻计算机节点之间比特流的透明传输，尽可能屏蔽掉具体传输介质与物理设备的差异。使其上面的数据链路层不必考虑网络的具体传输介质是什么。\n\n**透明传输的意义就是：不管传的是什么，所采用的设备只是起一个通道作用，把要传输的内容完好的传到对方！**\n\n在互联网使用的各种协中最重要和最著名的就是 TCP/IP 两个协议。现在人们经常提到的TCP/IP并不一定单指TCP和IP这两个具体的协议，而往往表示互联网所使用的整个TCP/IP协议族。\n\n### 6. 参考\n\n`https://blog.csdn.net/yaopeng_2005/article/details/7064869`","slug":"computer-network/one-network-model","published":1,"updated":"2019-01-03T10:29:16.240Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqhw7t7e000iwkw45oaoaaqb","content":"<!-- build time:Fri Jan 04 2019 18:24:57 GMT+0800 (GMT+08:00) --><p>本文主要通过OSI七层模型与常用TCP/IP5层模型介绍了各层的主要作用，包括<code>应用层</code>，<code>运输层</code>，<code>网络层</code>，<code>数据链路层</code>，<code>物理层</code>等。</p><a id=\"more\"></a><blockquote><p>计算机网络系列文章</p><ul><li><a href=\"https://www.lixueduan.com/computer-network/one-network-model/\">计算机网络(一)–OSI七层模型</a></li><li><a href=\"https://www.lixueduan.com/computer-network/two-tcp-connection/\">计算机网络(二)–TCP三次握手四次挥手</a></li><li><a href=\"https://www.lixueduan.com/computer-network/three-tcp-reliability/\">计算机网络(三)–TCP如何保证传输可靠性</a></li><li><a href=\"https://www.lixueduan.com/computer-network/four-http-https/\">计算机网络(四)–HTTP与HTTPS</a></li><li><a href=\"计算机网络(五\">计算机网络(五)–从输入URL到页面加载的过程中发生了什么</a>–从输入URL到页面加载的过程中发生了什么)</li></ul></blockquote><h2 id=\"OSI与TCP-IP模型\"><a href=\"#OSI与TCP-IP模型\" class=\"headerlink\" title=\"OSI与TCP/IP模型\"></a>OSI与TCP/IP模型</h2><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/osi-tcp-ip-model.png\" alt=\"Model\"></p><p><strong><code>应用层:</code>通过应用进程间的交互来完成特定网络应用。</strong></p><p><strong><code>运输层：</code>向用户提供可靠的、端到端的差错和流量控制，保证报文的正确传输。</strong></p><p><strong><code>网络层：</code>通过路由算法，为报文或分组通过通信子网选择最适当的路径。</strong></p><p><strong><code>数据链路层：</code>其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。</strong></p><p><strong><code>物理层：</code>利用传输介质为数据链路层提供屋里连接，实现比特流的透明传输。</strong></p><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-ip-model.gif\" alt=\"\"></p><h3 id=\"1-应用层\"><a href=\"#1-应用层\" class=\"headerlink\" title=\"1. 应用层\"></a>1. 应用层</h3><p><strong>主要作用:通过应用进程间的交互来完成特定网络应用。</strong></p><p><strong>应用层协议定义的是应用进程（进程：主机中正在运行的程序）间的通信和交互的规则。对于不同的网络应用需要不同的应用层协议。在互联网中应用层协议很多，如域名系统DNS</strong>，支持万维网应用的 <strong>HTTP协议</strong>，支持电子邮件的 <strong>SMTP协议</strong>等等。我们把应用层交互的数据单元称为报文。</p><h3 id=\"2-运输层\"><a href=\"#2-运输层\" class=\"headerlink\" title=\"2. 运输层\"></a>2. 运输层</h3><p><strong>主要任务：向用户提供可靠的、端到端的差错和流量控制，保证报文的正确传输。</strong></p><p><strong>主要作用</strong>：向高层屏蔽下层数据通信的具体细节，即向用户透明的传送报文。</p><p>主要用到的协议：</p><ol><li><strong>传输控制协议 TCP</strong>（Transmisson Control Protocol）–提供<strong>面向连接</strong>的，<strong>可靠的</strong>数据传输服务。</li><li><strong>用户数据协议 UDP</strong>（User Datagram Protocol）–提供<strong>无连接</strong>的，尽最大努力的数据传输服务（<strong>不保证数据传输的可靠性</strong>）。</li></ol><h4 id=\"2-1-UDP\"><a href=\"#2-1-UDP\" class=\"headerlink\" title=\"2.1 UDP\"></a>2.1 UDP</h4><ol><li>UDP 是无连接的；</li><li>UDP 使用尽最大努力交付，即不保证可靠交付，因此主机不需要维持复杂的链接状态（这里面有许多参数）；</li><li>UDP 是面向报文的；</li><li>UDP 没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如 直播，实时视频会议等）；</li><li>UDP 支持一对一、一对多、多对一和多对多的交互通信；</li><li>UDP 的首部开销小，只有8个字节，比TCP的20个字节的首部要短。</li></ol><h4 id=\"2-2-TCP\"><a href=\"#2-2-TCP\" class=\"headerlink\" title=\"2.2 TCP\"></a>2.2 TCP</h4><ol><li>TCP 是面向连接的。（就好像打电话一样，通话前需要先拨号建立连接，通话结束后要挂机释放连接）；</li><li>每一条 TCP 连接只能有两个端点，每一条TCP连接只能是点对点的（一对一）；</li><li>TCP 提供可靠交付的服务。通过TCP连接传送的数据，无差错、不丢失、不重复、并且按序到达；</li><li>TCP 提供全双工通信。TCP 允许通信双方的应用进程在任何时候都能发送数据。TCP 连接的两端都设有发送缓存和接收缓存，用来临时存放双方通信的数据；</li><li>面向字节流。TCP 中的“流”（Stream）指的是流入进程或从进程流出的字节序列。“面向字节流”的含义是：虽然应用程序和 TCP 的交互是一次一个数据块（大小不等），但 TCP 把应用程序交下来的数据仅仅看成是一连串的无结构的字节流。</li></ol><h3 id=\"3-网络层\"><a href=\"#3-网络层\" class=\"headerlink\" title=\"3. 网络层\"></a>3. 网络层</h3><p><strong>主要任务：通过路由算法，为报文或分组通过通信子网选择最适当的路径。</strong>该层控制数据链路层与物理层之间的信息转发，建立、维持与终止网络的连接。具体的说，数据链路层的数据在这一层被转换为数据包，然后通过路径选择、分段组合、顺序、进/出路由等控制，将信息从一个网络设备传送到另一个网络设备。</p><p><strong>一般的，数据链路层是解决统一网络内节点之间的通信，而网络层主要解决不同子网之间的通信。例如路由选择问题。</strong></p><p>在实现网络层功能时，需要解决的主要问题如下：</p><p><strong>寻址</strong>：数据链路层中使用的物理地址（如MAC地址）仅解决网络内部的寻址问题。在不同子网之间通信时，为了识别和找到网络中的设备，每一子网中的设备都会被分配一 个唯一的地址。由于各个子网使用的物理技术可能不同，因此这个地址应当是逻辑地址（如IP地址）</p><p><strong>交换：</strong>规定不同的交换方式。常见的交换技术有：线路交换技术和存储转发技术，后者包括报文转发技术和分组转发技术。<br><strong>路由算法：</strong>当源节点和路由节点之间存在多条路径时，本层可以根据路由算法，通过网络为数据分组选择最佳路径，并将信息从最合适的路径，由发送端传送的接受端。<br><strong>连接服务：</strong>与数据链路层的流量控制不同的是，前者控制的是网络相邻节点间的流量，后者控制的是从源节点到目的节点间的流量。其目的在于防止阻塞，并进行差错检测</p><h3 id=\"4-数据链路层\"><a href=\"#4-数据链路层\" class=\"headerlink\" title=\"4. 数据链路层\"></a>4. 数据链路层</h3><p><strong>其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。</strong></p><p><strong>主要功能</strong>：通过各种控制协议，将有差错的物理信道变为无差错的、能可靠传输数据帧的数据链路。</p><p><strong>具体工作</strong>：接受来自物理层的位流形式的数据，并封装成帧，传送到上一层；同样，也将来自上一层的数据帧，拆装为位流形式的数据转发到物理层；并且还负责处理接受端发回的确认帧的信息，以便提供可靠的数据传输。</p><p>该层通常又被分为 介质访问控制(MAC)和逻辑链路控制(LLC)两个子层：<br><strong>MAC子层</strong>的主要任务是<strong>解决共享型网络中多用户对信道竞争的问题，完成网络介质的访问控制。</strong><br><strong>LLC子层</strong>的主要任务是<strong>建立和维护网络连接，执行差错校验、流量控制和链路控制。</strong></p><h3 id=\"5-物理层\"><a href=\"#5-物理层\" class=\"headerlink\" title=\"5. 物理层\"></a>5. 物理层</h3><p><strong>主要功能：利用传输介质为数据链路层提供屋里连接，实现比特流的透明传输。</strong></p><p><strong>作用</strong>：实现相邻计算机节点之间比特流的透明传输，尽可能屏蔽掉具体传输介质与物理设备的差异。使其上面的数据链路层不必考虑网络的具体传输介质是什么。</p><p><strong>透明传输的意义就是：不管传的是什么，所采用的设备只是起一个通道作用，把要传输的内容完好的传到对方！</strong></p><p>在互联网使用的各种协中最重要和最著名的就是 TCP/IP 两个协议。现在人们经常提到的TCP/IP并不一定单指TCP和IP这两个具体的协议，而往往表示互联网所使用的整个TCP/IP协议族。</p><h3 id=\"6-参考\"><a href=\"#6-参考\" class=\"headerlink\" title=\"6. 参考\"></a>6. 参考</h3><p><code>https://blog.csdn.net/yaopeng_2005/article/details/7064869</code></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Fri Jan 04 2019 18:24:57 GMT+0800 (GMT+08:00) --><p>本文主要通过OSI七层模型与常用TCP/IP5层模型介绍了各层的主要作用，包括<code>应用层</code>，<code>运输层</code>，<code>网络层</code>，<code>数据链路层</code>，<code>物理层</code>等。</p>","more":"<blockquote><p>计算机网络系列文章</p><ul><li><a href=\"https://www.lixueduan.com/computer-network/one-network-model/\">计算机网络(一)–OSI七层模型</a></li><li><a href=\"https://www.lixueduan.com/computer-network/two-tcp-connection/\">计算机网络(二)–TCP三次握手四次挥手</a></li><li><a href=\"https://www.lixueduan.com/computer-network/three-tcp-reliability/\">计算机网络(三)–TCP如何保证传输可靠性</a></li><li><a href=\"https://www.lixueduan.com/computer-network/four-http-https/\">计算机网络(四)–HTTP与HTTPS</a></li><li><a href=\"计算机网络(五\">计算机网络(五)–从输入URL到页面加载的过程中发生了什么</a>–从输入URL到页面加载的过程中发生了什么)</li></ul></blockquote><h2 id=\"OSI与TCP-IP模型\"><a href=\"#OSI与TCP-IP模型\" class=\"headerlink\" title=\"OSI与TCP/IP模型\"></a>OSI与TCP/IP模型</h2><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/osi-tcp-ip-model.png\" alt=\"Model\"></p><p><strong><code>应用层:</code>通过应用进程间的交互来完成特定网络应用。</strong></p><p><strong><code>运输层：</code>向用户提供可靠的、端到端的差错和流量控制，保证报文的正确传输。</strong></p><p><strong><code>网络层：</code>通过路由算法，为报文或分组通过通信子网选择最适当的路径。</strong></p><p><strong><code>数据链路层：</code>其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。</strong></p><p><strong><code>物理层：</code>利用传输介质为数据链路层提供屋里连接，实现比特流的透明传输。</strong></p><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-ip-model.gif\" alt=\"\"></p><h3 id=\"1-应用层\"><a href=\"#1-应用层\" class=\"headerlink\" title=\"1. 应用层\"></a>1. 应用层</h3><p><strong>主要作用:通过应用进程间的交互来完成特定网络应用。</strong></p><p><strong>应用层协议定义的是应用进程（进程：主机中正在运行的程序）间的通信和交互的规则。对于不同的网络应用需要不同的应用层协议。在互联网中应用层协议很多，如域名系统DNS</strong>，支持万维网应用的 <strong>HTTP协议</strong>，支持电子邮件的 <strong>SMTP协议</strong>等等。我们把应用层交互的数据单元称为报文。</p><h3 id=\"2-运输层\"><a href=\"#2-运输层\" class=\"headerlink\" title=\"2. 运输层\"></a>2. 运输层</h3><p><strong>主要任务：向用户提供可靠的、端到端的差错和流量控制，保证报文的正确传输。</strong></p><p><strong>主要作用</strong>：向高层屏蔽下层数据通信的具体细节，即向用户透明的传送报文。</p><p>主要用到的协议：</p><ol><li><strong>传输控制协议 TCP</strong>（Transmisson Control Protocol）–提供<strong>面向连接</strong>的，<strong>可靠的</strong>数据传输服务。</li><li><strong>用户数据协议 UDP</strong>（User Datagram Protocol）–提供<strong>无连接</strong>的，尽最大努力的数据传输服务（<strong>不保证数据传输的可靠性</strong>）。</li></ol><h4 id=\"2-1-UDP\"><a href=\"#2-1-UDP\" class=\"headerlink\" title=\"2.1 UDP\"></a>2.1 UDP</h4><ol><li>UDP 是无连接的；</li><li>UDP 使用尽最大努力交付，即不保证可靠交付，因此主机不需要维持复杂的链接状态（这里面有许多参数）；</li><li>UDP 是面向报文的；</li><li>UDP 没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如 直播，实时视频会议等）；</li><li>UDP 支持一对一、一对多、多对一和多对多的交互通信；</li><li>UDP 的首部开销小，只有8个字节，比TCP的20个字节的首部要短。</li></ol><h4 id=\"2-2-TCP\"><a href=\"#2-2-TCP\" class=\"headerlink\" title=\"2.2 TCP\"></a>2.2 TCP</h4><ol><li>TCP 是面向连接的。（就好像打电话一样，通话前需要先拨号建立连接，通话结束后要挂机释放连接）；</li><li>每一条 TCP 连接只能有两个端点，每一条TCP连接只能是点对点的（一对一）；</li><li>TCP 提供可靠交付的服务。通过TCP连接传送的数据，无差错、不丢失、不重复、并且按序到达；</li><li>TCP 提供全双工通信。TCP 允许通信双方的应用进程在任何时候都能发送数据。TCP 连接的两端都设有发送缓存和接收缓存，用来临时存放双方通信的数据；</li><li>面向字节流。TCP 中的“流”（Stream）指的是流入进程或从进程流出的字节序列。“面向字节流”的含义是：虽然应用程序和 TCP 的交互是一次一个数据块（大小不等），但 TCP 把应用程序交下来的数据仅仅看成是一连串的无结构的字节流。</li></ol><h3 id=\"3-网络层\"><a href=\"#3-网络层\" class=\"headerlink\" title=\"3. 网络层\"></a>3. 网络层</h3><p><strong>主要任务：通过路由算法，为报文或分组通过通信子网选择最适当的路径。</strong>该层控制数据链路层与物理层之间的信息转发，建立、维持与终止网络的连接。具体的说，数据链路层的数据在这一层被转换为数据包，然后通过路径选择、分段组合、顺序、进/出路由等控制，将信息从一个网络设备传送到另一个网络设备。</p><p><strong>一般的，数据链路层是解决统一网络内节点之间的通信，而网络层主要解决不同子网之间的通信。例如路由选择问题。</strong></p><p>在实现网络层功能时，需要解决的主要问题如下：</p><p><strong>寻址</strong>：数据链路层中使用的物理地址（如MAC地址）仅解决网络内部的寻址问题。在不同子网之间通信时，为了识别和找到网络中的设备，每一子网中的设备都会被分配一 个唯一的地址。由于各个子网使用的物理技术可能不同，因此这个地址应当是逻辑地址（如IP地址）</p><p><strong>交换：</strong>规定不同的交换方式。常见的交换技术有：线路交换技术和存储转发技术，后者包括报文转发技术和分组转发技术。<br><strong>路由算法：</strong>当源节点和路由节点之间存在多条路径时，本层可以根据路由算法，通过网络为数据分组选择最佳路径，并将信息从最合适的路径，由发送端传送的接受端。<br><strong>连接服务：</strong>与数据链路层的流量控制不同的是，前者控制的是网络相邻节点间的流量，后者控制的是从源节点到目的节点间的流量。其目的在于防止阻塞，并进行差错检测</p><h3 id=\"4-数据链路层\"><a href=\"#4-数据链路层\" class=\"headerlink\" title=\"4. 数据链路层\"></a>4. 数据链路层</h3><p><strong>其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。</strong></p><p><strong>主要功能</strong>：通过各种控制协议，将有差错的物理信道变为无差错的、能可靠传输数据帧的数据链路。</p><p><strong>具体工作</strong>：接受来自物理层的位流形式的数据，并封装成帧，传送到上一层；同样，也将来自上一层的数据帧，拆装为位流形式的数据转发到物理层；并且还负责处理接受端发回的确认帧的信息，以便提供可靠的数据传输。</p><p>该层通常又被分为 介质访问控制(MAC)和逻辑链路控制(LLC)两个子层：<br><strong>MAC子层</strong>的主要任务是<strong>解决共享型网络中多用户对信道竞争的问题，完成网络介质的访问控制。</strong><br><strong>LLC子层</strong>的主要任务是<strong>建立和维护网络连接，执行差错校验、流量控制和链路控制。</strong></p><h3 id=\"5-物理层\"><a href=\"#5-物理层\" class=\"headerlink\" title=\"5. 物理层\"></a>5. 物理层</h3><p><strong>主要功能：利用传输介质为数据链路层提供屋里连接，实现比特流的透明传输。</strong></p><p><strong>作用</strong>：实现相邻计算机节点之间比特流的透明传输，尽可能屏蔽掉具体传输介质与物理设备的差异。使其上面的数据链路层不必考虑网络的具体传输介质是什么。</p><p><strong>透明传输的意义就是：不管传的是什么，所采用的设备只是起一个通道作用，把要传输的内容完好的传到对方！</strong></p><p>在互联网使用的各种协中最重要和最著名的就是 TCP/IP 两个协议。现在人们经常提到的TCP/IP并不一定单指TCP和IP这两个具体的协议，而往往表示互联网所使用的整个TCP/IP协议族。</p><h3 id=\"6-参考\"><a href=\"#6-参考\" class=\"headerlink\" title=\"6. 参考\"></a>6. 参考</h3><p><code>https://blog.csdn.net/yaopeng_2005/article/details/7064869</code></p><!-- rebuild by neat -->"},{"title":"计算机网络(二)--TCP三次握手四次挥手","abbrlink":25338,"date":"2018-11-05T14:00:00.000Z","_content":"\n本文主要介绍了`TCP/IP`的三次握手和四次挥手具体步骤及其原因分析。\n\n<!--more-->\n\n> 计算机网络系列文章\n>\n> - [计算机网络(一)--OSI七层模型](https://www.lixueduan.com/computer-network/one-network-model/)\n> - [计算机网络(二)--TCP三次握手四次挥手](https://www.lixueduan.com/computer-network/two-tcp-connection/)\n> - [计算机网络(三)--TCP如何保证传输可靠性](https://www.lixueduan.com/computer-network/three-tcp-reliability/)\n> - [计算机网络(四)--HTTP与HTTPS](https://www.lixueduan.com/computer-network/four-http-https/)\n> - [计算机网络(五)--从输入URL到页面加载的过程中发生了什么](计算机网络(五)--从输入URL到页面加载的过程中发生了什么)\n\n### 1. 三次握手\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-connection-three.jpg)\n\n`step1:第一次握手`\n建立连接时，客户端发送SYN包到服务器，其中包含客户端的初始序号seq=x，并进入**SYN_SENT**状态，等待服务器确认。（其中，SYN=1，ACK=0，表示这是一个TCP连接请求数据报文；序号seq=x，表明传输数据时的第一个数据字节的序号是x）。\n\n`step2:第二次握手`\n服务器收到请求后，必须确认客户的数据包。同时自己也发送一个SYN包，即SYN+ACK包，此时服务器进入**SYN_RCVD**状态。（其中确认报文段中，标识位SYN=1，ACK=1，表示这是一个TCP连接响应数据报文，并含服务端的初始序号seq(服务器)=y，以及服务器对客户端初始序号的确认号ack(服务器)=seq(客户端)+1=x+1）。\n\n`step3:第三次握手`\n\n客户端收到服务器的SYN+ACK包，向服务器发送一个序列号(seq=x+1)，确认号为ack(客户端)=y+1，此包发送完毕，客户端和服务器进入**ESTABLISHED **(TCP连接成功)**状态，完成三次握手。\n\n```\n建立连接前要确认客户端和服务端的接收和发送功能是否正常。\n第一次客户端发送SYN时 什么也确认不了\n第二次服务端发送SYN+ACK 可以确认服务端发送功能正常\n第三次 客户端收到服务端发送的YSN+ACK 可以确认客户端发送接收功能正常\n最后客户端发送ACK 服务端接收到后 可以确认服务端发送功能正常\n到此就确认完毕了。\n```\n\n### 2. 四次挥手\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-close-connection-four.jpg)\n\n`step1：第一次挥手`\n首先，客户端发送一个FIN，用来关闭客户端到服务器的数据传送，然后等待服务器的确认。其中终止标志位FIN=1，序列号seq=u。 **客户端**进入**FIN_WAIT1**状态\n\n```\n我（Client端）没有数据要发给你（Server端）了\"，但是如果你（Server端）还有数据没有发送完成，则不必急着关闭Socket，可以继续发送数据。所以你先发送ACK\n```\n\n`step2：第二次挥手`\n**服务器**收到这个FIN进入**CLOSE_WAIT**状态，然后它给客户端发送一个ACK，确认ack为收到的序号加一。\n\n**客户端**收到ACK应答后进入**FIN_WAIT2**状态\n\n```\n告诉Client端，你的请求我收到了，但是我（Server端）还没准备好，请继续你等我的消息\"\n```\n\n`step3：第三次挥手`\n服务端关闭服务器到客户端的连接，发送一个FIN给客户端。**服务端**进入**LAST_ACK**状态\n\n```\n告诉Client端，好了，我（Server端）这边数据发完了，准备好关闭连接了\n```\n\n`step4：第四次挥手`\n\n**客户端**收到FIN后，进入**TIME_WAIT**状态\t并发回一个ACK报文确认，并将确认序号seq设置为收到序号加一。\n\n服务端收到客户端回复的ACK后立即关闭，服务端进入**CLOASED**状态\n\n而客户端要等待2MSL后关闭 进入**CLOASED**状态\n\n```\nClient端收到FIN报文后，\"就知道可以关闭连接了，所以发送ACK。但是他还是不相信网络，怕Server端不知道要关闭，所以发送ACK后没有立即，而是进入TIME_WAIT状态，如果Server端没有收到ACK那么自己还可以重传。Server端收到ACK后，\"就知道可以断开连接了\"。Client端等待了2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，我Client端也可以关闭连接了。Ok，TCP连接就这样关闭了！\n```\n\n### 3. TIME-WAIT状态详解\n\n为什么Client端要先进入TIME-WAIT状态，等待2MSL时间后才进入CLOSED状态？\n\n**保证TCP协议的全双工连接能够可靠关闭，保证这次连接的重复数据段从网络中消失**\n\n假设由于IP协议的不可靠性或者是其它网络原因，导致Server没有收到Client最后回复的ACK。那么Server就会在超时之后继续发送FIN，Client端在等待2MSL时间后都没收到信息，说明Server端已经收到自己发送的ACK并且成功关闭了。\n**假设CLient端直接关闭了：**\n\n```java\n1.由于IP协议的不可靠性或者是其它网络原因，导致Server没有收到Client最后回复的ACK。那么Server就会在超时之后继续发送FIN，此时由于Client已经CLOSED了，就找不到与重发的FIN对应的连接，最后Server就会收到RST而不是ACK，Server就会以为是连接错误把问题报告给高层。这样的情况虽然不会造成数据丢失，但是却导致TCP协议不符合可靠连接的要求。所以，Client不是直接进入CLOSED，而是要保持TIME_WAIT，当再次收到FIN的时候，能够保证对方收到ACK，最后正确的关闭连接。\n\n2.如果Client直接CLOSED，然后又再向Server发起一个新连接，我们不能保证这个新连接与刚关闭的连接的端口号是不同的。也就是说有可能新连接和老连接的端口号是相同的。一般来说不会发生什么问题，但是还是有特殊情况出现：假设新连接和已经关闭的老连接端口号是一样的，如果前一次连接的某些数据仍然滞留在网络中，这些延迟数据在建立新连接之后才到达Server，由于新连接和老连接的端口号是一样的，又因为TCP协议判断不同连接的依据是socket pair，于是，TCP协议就认为那个延迟的数据是属于新连接的，这样就和真正的新连接的数据包发生混淆了。所以TCP连接还要在TIME_WAIT状态等待2倍MSL，这样可以保证本次连接的所有数据都从网络中消失。\n\n```\n\n**2MSL:Maximum Segment Lifetime 即数据在网络中保存的最大时间。**\n\n*简单易懂的说法:*\n\n```\n假设Client端发起中断连接请求，也就是发送FIN报文。Server端接到FIN报文后，意思是说\"我Client端没有数据要发给你了\"，但是如果你还有数据没有发送完成，则不必急着关闭Socket，可以继续发送数据。所以你先发送ACK，\"告诉Client端，你的请求我收到了，但是我还没准备好，请继续你等我的消息\"。这个时候Client端就进入FIN_WAIT状态，继续等待Server端的FIN报文。当Server端确定数据已发送完成，则向Client端发送FIN报文，\"告诉Client端，好了，我这边数据发完了，准备好关闭连接了\"。Client端收到FIN报文后，\"就知道可以关闭连接了，但是他还是不相信网络，怕Server端不知道要关闭，所以发送ACK后进入TIME_WAIT状态，如果Server端没有收到ACK则可以重传。“，Server端收到ACK后，\"就知道可以断开连接了\"。Client端等待了2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，我Client端也可以关闭连接了。Ok，TCP连接就这样关闭了！\n```\n\n### 4. TCP 的有限状态机\n\n红色为客户端 蓝色为服务端 细箭头为异常变化\n\n![TCP](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-status-map.png)\n\n### 5. 参考\n\n`https://www.baidu.com/link?url=_mlor11BLttd1jmMU4k9OP0gqcjNKhZQ9fJuvbMOhkuH9-lVeB-y3VIVK1neZURi_tmR3rg1lj2lfgvvGhTV-q&wd=&eqid=d0144c250007b69c000000035bfdfafc`","source":"_posts/computer-network/two-tcp-connection.md","raw":"---\ntitle: 计算机网络(二)--TCP三次握手四次挥手\ntags:\n  - 计算机网络\n  - TCP/IP\ncategories:\n  - 计算机网络\nabbrlink: 25338\ndate: 2018-11-05 22:00:00\n---\n\n本文主要介绍了`TCP/IP`的三次握手和四次挥手具体步骤及其原因分析。\n\n<!--more-->\n\n> 计算机网络系列文章\n>\n> - [计算机网络(一)--OSI七层模型](https://www.lixueduan.com/computer-network/one-network-model/)\n> - [计算机网络(二)--TCP三次握手四次挥手](https://www.lixueduan.com/computer-network/two-tcp-connection/)\n> - [计算机网络(三)--TCP如何保证传输可靠性](https://www.lixueduan.com/computer-network/three-tcp-reliability/)\n> - [计算机网络(四)--HTTP与HTTPS](https://www.lixueduan.com/computer-network/four-http-https/)\n> - [计算机网络(五)--从输入URL到页面加载的过程中发生了什么](计算机网络(五)--从输入URL到页面加载的过程中发生了什么)\n\n### 1. 三次握手\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-connection-three.jpg)\n\n`step1:第一次握手`\n建立连接时，客户端发送SYN包到服务器，其中包含客户端的初始序号seq=x，并进入**SYN_SENT**状态，等待服务器确认。（其中，SYN=1，ACK=0，表示这是一个TCP连接请求数据报文；序号seq=x，表明传输数据时的第一个数据字节的序号是x）。\n\n`step2:第二次握手`\n服务器收到请求后，必须确认客户的数据包。同时自己也发送一个SYN包，即SYN+ACK包，此时服务器进入**SYN_RCVD**状态。（其中确认报文段中，标识位SYN=1，ACK=1，表示这是一个TCP连接响应数据报文，并含服务端的初始序号seq(服务器)=y，以及服务器对客户端初始序号的确认号ack(服务器)=seq(客户端)+1=x+1）。\n\n`step3:第三次握手`\n\n客户端收到服务器的SYN+ACK包，向服务器发送一个序列号(seq=x+1)，确认号为ack(客户端)=y+1，此包发送完毕，客户端和服务器进入**ESTABLISHED **(TCP连接成功)**状态，完成三次握手。\n\n```\n建立连接前要确认客户端和服务端的接收和发送功能是否正常。\n第一次客户端发送SYN时 什么也确认不了\n第二次服务端发送SYN+ACK 可以确认服务端发送功能正常\n第三次 客户端收到服务端发送的YSN+ACK 可以确认客户端发送接收功能正常\n最后客户端发送ACK 服务端接收到后 可以确认服务端发送功能正常\n到此就确认完毕了。\n```\n\n### 2. 四次挥手\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-close-connection-four.jpg)\n\n`step1：第一次挥手`\n首先，客户端发送一个FIN，用来关闭客户端到服务器的数据传送，然后等待服务器的确认。其中终止标志位FIN=1，序列号seq=u。 **客户端**进入**FIN_WAIT1**状态\n\n```\n我（Client端）没有数据要发给你（Server端）了\"，但是如果你（Server端）还有数据没有发送完成，则不必急着关闭Socket，可以继续发送数据。所以你先发送ACK\n```\n\n`step2：第二次挥手`\n**服务器**收到这个FIN进入**CLOSE_WAIT**状态，然后它给客户端发送一个ACK，确认ack为收到的序号加一。\n\n**客户端**收到ACK应答后进入**FIN_WAIT2**状态\n\n```\n告诉Client端，你的请求我收到了，但是我（Server端）还没准备好，请继续你等我的消息\"\n```\n\n`step3：第三次挥手`\n服务端关闭服务器到客户端的连接，发送一个FIN给客户端。**服务端**进入**LAST_ACK**状态\n\n```\n告诉Client端，好了，我（Server端）这边数据发完了，准备好关闭连接了\n```\n\n`step4：第四次挥手`\n\n**客户端**收到FIN后，进入**TIME_WAIT**状态\t并发回一个ACK报文确认，并将确认序号seq设置为收到序号加一。\n\n服务端收到客户端回复的ACK后立即关闭，服务端进入**CLOASED**状态\n\n而客户端要等待2MSL后关闭 进入**CLOASED**状态\n\n```\nClient端收到FIN报文后，\"就知道可以关闭连接了，所以发送ACK。但是他还是不相信网络，怕Server端不知道要关闭，所以发送ACK后没有立即，而是进入TIME_WAIT状态，如果Server端没有收到ACK那么自己还可以重传。Server端收到ACK后，\"就知道可以断开连接了\"。Client端等待了2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，我Client端也可以关闭连接了。Ok，TCP连接就这样关闭了！\n```\n\n### 3. TIME-WAIT状态详解\n\n为什么Client端要先进入TIME-WAIT状态，等待2MSL时间后才进入CLOSED状态？\n\n**保证TCP协议的全双工连接能够可靠关闭，保证这次连接的重复数据段从网络中消失**\n\n假设由于IP协议的不可靠性或者是其它网络原因，导致Server没有收到Client最后回复的ACK。那么Server就会在超时之后继续发送FIN，Client端在等待2MSL时间后都没收到信息，说明Server端已经收到自己发送的ACK并且成功关闭了。\n**假设CLient端直接关闭了：**\n\n```java\n1.由于IP协议的不可靠性或者是其它网络原因，导致Server没有收到Client最后回复的ACK。那么Server就会在超时之后继续发送FIN，此时由于Client已经CLOSED了，就找不到与重发的FIN对应的连接，最后Server就会收到RST而不是ACK，Server就会以为是连接错误把问题报告给高层。这样的情况虽然不会造成数据丢失，但是却导致TCP协议不符合可靠连接的要求。所以，Client不是直接进入CLOSED，而是要保持TIME_WAIT，当再次收到FIN的时候，能够保证对方收到ACK，最后正确的关闭连接。\n\n2.如果Client直接CLOSED，然后又再向Server发起一个新连接，我们不能保证这个新连接与刚关闭的连接的端口号是不同的。也就是说有可能新连接和老连接的端口号是相同的。一般来说不会发生什么问题，但是还是有特殊情况出现：假设新连接和已经关闭的老连接端口号是一样的，如果前一次连接的某些数据仍然滞留在网络中，这些延迟数据在建立新连接之后才到达Server，由于新连接和老连接的端口号是一样的，又因为TCP协议判断不同连接的依据是socket pair，于是，TCP协议就认为那个延迟的数据是属于新连接的，这样就和真正的新连接的数据包发生混淆了。所以TCP连接还要在TIME_WAIT状态等待2倍MSL，这样可以保证本次连接的所有数据都从网络中消失。\n\n```\n\n**2MSL:Maximum Segment Lifetime 即数据在网络中保存的最大时间。**\n\n*简单易懂的说法:*\n\n```\n假设Client端发起中断连接请求，也就是发送FIN报文。Server端接到FIN报文后，意思是说\"我Client端没有数据要发给你了\"，但是如果你还有数据没有发送完成，则不必急着关闭Socket，可以继续发送数据。所以你先发送ACK，\"告诉Client端，你的请求我收到了，但是我还没准备好，请继续你等我的消息\"。这个时候Client端就进入FIN_WAIT状态，继续等待Server端的FIN报文。当Server端确定数据已发送完成，则向Client端发送FIN报文，\"告诉Client端，好了，我这边数据发完了，准备好关闭连接了\"。Client端收到FIN报文后，\"就知道可以关闭连接了，但是他还是不相信网络，怕Server端不知道要关闭，所以发送ACK后进入TIME_WAIT状态，如果Server端没有收到ACK则可以重传。“，Server端收到ACK后，\"就知道可以断开连接了\"。Client端等待了2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，我Client端也可以关闭连接了。Ok，TCP连接就这样关闭了！\n```\n\n### 4. TCP 的有限状态机\n\n红色为客户端 蓝色为服务端 细箭头为异常变化\n\n![TCP](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-status-map.png)\n\n### 5. 参考\n\n`https://www.baidu.com/link?url=_mlor11BLttd1jmMU4k9OP0gqcjNKhZQ9fJuvbMOhkuH9-lVeB-y3VIVK1neZURi_tmR3rg1lj2lfgvvGhTV-q&wd=&eqid=d0144c250007b69c000000035bfdfafc`","slug":"computer-network/two-tcp-connection","published":1,"updated":"2019-01-03T10:29:16.260Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqhw7t7g000jwkw43983ga8w","content":"<!-- build time:Fri Jan 04 2019 18:24:57 GMT+0800 (GMT+08:00) --><p>本文主要介绍了<code>TCP/IP</code>的三次握手和四次挥手具体步骤及其原因分析。</p><a id=\"more\"></a><blockquote><p>计算机网络系列文章</p><ul><li><a href=\"https://www.lixueduan.com/computer-network/one-network-model/\">计算机网络(一)–OSI七层模型</a></li><li><a href=\"https://www.lixueduan.com/computer-network/two-tcp-connection/\">计算机网络(二)–TCP三次握手四次挥手</a></li><li><a href=\"https://www.lixueduan.com/computer-network/three-tcp-reliability/\">计算机网络(三)–TCP如何保证传输可靠性</a></li><li><a href=\"https://www.lixueduan.com/computer-network/four-http-https/\">计算机网络(四)–HTTP与HTTPS</a></li><li><a href=\"计算机网络(五\">计算机网络(五)–从输入URL到页面加载的过程中发生了什么</a>–从输入URL到页面加载的过程中发生了什么)</li></ul></blockquote><h3 id=\"1-三次握手\"><a href=\"#1-三次握手\" class=\"headerlink\" title=\"1. 三次握手\"></a>1. 三次握手</h3><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-connection-three.jpg\" alt=\"\"></p><p><code>step1:第一次握手</code><br>建立连接时，客户端发送SYN包到服务器，其中包含客户端的初始序号seq=x，并进入<strong>SYN_SENT</strong>状态，等待服务器确认。（其中，SYN=1，ACK=0，表示这是一个TCP连接请求数据报文；序号seq=x，表明传输数据时的第一个数据字节的序号是x）。</p><p><code>step2:第二次握手</code><br>服务器收到请求后，必须确认客户的数据包。同时自己也发送一个SYN包，即SYN+ACK包，此时服务器进入<strong>SYN_RCVD</strong>状态。（其中确认报文段中，标识位SYN=1，ACK=1，表示这是一个TCP连接响应数据报文，并含服务端的初始序号seq(服务器)=y，以及服务器对客户端初始序号的确认号ack(服务器)=seq(客户端)+1=x+1）。</p><p><code>step3:第三次握手</code></p><p>客户端收到服务器的SYN+ACK包，向服务器发送一个序列号(seq=x+1)，确认号为ack(客户端)=y+1，此包发送完毕，客户端和服务器进入<strong>ESTABLISHED </strong>(TCP连接成功)**状态，完成三次握手。</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">建立连接前要确认客户端和服务端的接收和发送功能是否正常。</span><br><span class=\"line\">第一次客户端发送SYN时 什么也确认不了</span><br><span class=\"line\">第二次服务端发送SYN+ACK 可以确认服务端发送功能正常</span><br><span class=\"line\">第三次 客户端收到服务端发送的YSN+ACK 可以确认客户端发送接收功能正常</span><br><span class=\"line\">最后客户端发送ACK 服务端接收到后 可以确认服务端发送功能正常</span><br><span class=\"line\">到此就确认完毕了。</span><br></pre></td></tr></table></figure><h3 id=\"2-四次挥手\"><a href=\"#2-四次挥手\" class=\"headerlink\" title=\"2. 四次挥手\"></a>2. 四次挥手</h3><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-close-connection-four.jpg\" alt=\"\"></p><p><code>step1：第一次挥手</code><br>首先，客户端发送一个FIN，用来关闭客户端到服务器的数据传送，然后等待服务器的确认。其中终止标志位FIN=1，序列号seq=u。 <strong>客户端</strong>进入<strong>FIN_WAIT1</strong>状态</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我（Client端）没有数据要发给你（Server端）了&quot;，但是如果你（Server端）还有数据没有发送完成，则不必急着关闭Socket，可以继续发送数据。所以你先发送ACK</span><br></pre></td></tr></table></figure><p><code>step2：第二次挥手</code><br><strong>服务器</strong>收到这个FIN进入<strong>CLOSE_WAIT</strong>状态，然后它给客户端发送一个ACK，确认ack为收到的序号加一。</p><p><strong>客户端</strong>收到ACK应答后进入<strong>FIN_WAIT2</strong>状态</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">告诉Client端，你的请求我收到了，但是我（Server端）还没准备好，请继续你等我的消息&quot;</span><br></pre></td></tr></table></figure><p><code>step3：第三次挥手</code><br>服务端关闭服务器到客户端的连接，发送一个FIN给客户端。<strong>服务端</strong>进入<strong>LAST_ACK</strong>状态</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">告诉Client端，好了，我（Server端）这边数据发完了，准备好关闭连接了</span><br></pre></td></tr></table></figure><p><code>step4：第四次挥手</code></p><p><strong>客户端</strong>收到FIN后，进入<strong>TIME_WAIT</strong>状态 并发回一个ACK报文确认，并将确认序号seq设置为收到序号加一。</p><p>服务端收到客户端回复的ACK后立即关闭，服务端进入<strong>CLOASED</strong>状态</p><p>而客户端要等待2MSL后关闭 进入<strong>CLOASED</strong>状态</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Client端收到FIN报文后，&quot;就知道可以关闭连接了，所以发送ACK。但是他还是不相信网络，怕Server端不知道要关闭，所以发送ACK后没有立即，而是进入TIME_WAIT状态，如果Server端没有收到ACK那么自己还可以重传。Server端收到ACK后，&quot;就知道可以断开连接了&quot;。Client端等待了2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，我Client端也可以关闭连接了。Ok，TCP连接就这样关闭了！</span><br></pre></td></tr></table></figure><h3 id=\"3-TIME-WAIT状态详解\"><a href=\"#3-TIME-WAIT状态详解\" class=\"headerlink\" title=\"3. TIME-WAIT状态详解\"></a>3. TIME-WAIT状态详解</h3><p>为什么Client端要先进入TIME-WAIT状态，等待2MSL时间后才进入CLOSED状态？</p><p><strong>保证TCP协议的全双工连接能够可靠关闭，保证这次连接的重复数据段从网络中消失</strong></p><p>假设由于IP协议的不可靠性或者是其它网络原因，导致Server没有收到Client最后回复的ACK。那么Server就会在超时之后继续发送FIN，Client端在等待2MSL时间后都没收到信息，说明Server端已经收到自己发送的ACK并且成功关闭了。<br><strong>假设CLient端直接关闭了：</strong></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>.由于IP协议的不可靠性或者是其它网络原因，导致Server没有收到Client最后回复的ACK。那么Server就会在超时之后继续发送FIN，此时由于Client已经CLOSED了，就找不到与重发的FIN对应的连接，最后Server就会收到RST而不是ACK，Server就会以为是连接错误把问题报告给高层。这样的情况虽然不会造成数据丢失，但是却导致TCP协议不符合可靠连接的要求。所以，Client不是直接进入CLOSED，而是要保持TIME_WAIT，当再次收到FIN的时候，能够保证对方收到ACK，最后正确的关闭连接。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>.如果Client直接CLOSED，然后又再向Server发起一个新连接，我们不能保证这个新连接与刚关闭的连接的端口号是不同的。也就是说有可能新连接和老连接的端口号是相同的。一般来说不会发生什么问题，但是还是有特殊情况出现：假设新连接和已经关闭的老连接端口号是一样的，如果前一次连接的某些数据仍然滞留在网络中，这些延迟数据在建立新连接之后才到达Server，由于新连接和老连接的端口号是一样的，又因为TCP协议判断不同连接的依据是socket pair，于是，TCP协议就认为那个延迟的数据是属于新连接的，这样就和真正的新连接的数据包发生混淆了。所以TCP连接还要在TIME_WAIT状态等待<span class=\"number\">2</span>倍MSL，这样可以保证本次连接的所有数据都从网络中消失。</span><br></pre></td></tr></table></figure><p><strong>2MSL:Maximum Segment Lifetime 即数据在网络中保存的最大时间。</strong></p><p><em>简单易懂的说法:</em></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">假设Client端发起中断连接请求，也就是发送FIN报文。Server端接到FIN报文后，意思是说&quot;我Client端没有数据要发给你了&quot;，但是如果你还有数据没有发送完成，则不必急着关闭Socket，可以继续发送数据。所以你先发送ACK，&quot;告诉Client端，你的请求我收到了，但是我还没准备好，请继续你等我的消息&quot;。这个时候Client端就进入FIN_WAIT状态，继续等待Server端的FIN报文。当Server端确定数据已发送完成，则向Client端发送FIN报文，&quot;告诉Client端，好了，我这边数据发完了，准备好关闭连接了&quot;。Client端收到FIN报文后，&quot;就知道可以关闭连接了，但是他还是不相信网络，怕Server端不知道要关闭，所以发送ACK后进入TIME_WAIT状态，如果Server端没有收到ACK则可以重传。“，Server端收到ACK后，&quot;就知道可以断开连接了&quot;。Client端等待了2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，我Client端也可以关闭连接了。Ok，TCP连接就这样关闭了！</span><br></pre></td></tr></table></figure><h3 id=\"4-TCP-的有限状态机\"><a href=\"#4-TCP-的有限状态机\" class=\"headerlink\" title=\"4. TCP 的有限状态机\"></a>4. TCP 的有限状态机</h3><p>红色为客户端 蓝色为服务端 细箭头为异常变化</p><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-status-map.png\" alt=\"TCP\"></p><h3 id=\"5-参考\"><a href=\"#5-参考\" class=\"headerlink\" title=\"5. 参考\"></a>5. 参考</h3><p><code>https://www.baidu.com/link?url=_mlor11BLttd1jmMU4k9OP0gqcjNKhZQ9fJuvbMOhkuH9-lVeB-y3VIVK1neZURi_tmR3rg1lj2lfgvvGhTV-q&amp;wd=&amp;eqid=d0144c250007b69c000000035bfdfafc</code></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Fri Jan 04 2019 18:24:57 GMT+0800 (GMT+08:00) --><p>本文主要介绍了<code>TCP/IP</code>的三次握手和四次挥手具体步骤及其原因分析。</p>","more":"<blockquote><p>计算机网络系列文章</p><ul><li><a href=\"https://www.lixueduan.com/computer-network/one-network-model/\">计算机网络(一)–OSI七层模型</a></li><li><a href=\"https://www.lixueduan.com/computer-network/two-tcp-connection/\">计算机网络(二)–TCP三次握手四次挥手</a></li><li><a href=\"https://www.lixueduan.com/computer-network/three-tcp-reliability/\">计算机网络(三)–TCP如何保证传输可靠性</a></li><li><a href=\"https://www.lixueduan.com/computer-network/four-http-https/\">计算机网络(四)–HTTP与HTTPS</a></li><li><a href=\"计算机网络(五\">计算机网络(五)–从输入URL到页面加载的过程中发生了什么</a>–从输入URL到页面加载的过程中发生了什么)</li></ul></blockquote><h3 id=\"1-三次握手\"><a href=\"#1-三次握手\" class=\"headerlink\" title=\"1. 三次握手\"></a>1. 三次握手</h3><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-connection-three.jpg\" alt=\"\"></p><p><code>step1:第一次握手</code><br>建立连接时，客户端发送SYN包到服务器，其中包含客户端的初始序号seq=x，并进入<strong>SYN_SENT</strong>状态，等待服务器确认。（其中，SYN=1，ACK=0，表示这是一个TCP连接请求数据报文；序号seq=x，表明传输数据时的第一个数据字节的序号是x）。</p><p><code>step2:第二次握手</code><br>服务器收到请求后，必须确认客户的数据包。同时自己也发送一个SYN包，即SYN+ACK包，此时服务器进入<strong>SYN_RCVD</strong>状态。（其中确认报文段中，标识位SYN=1，ACK=1，表示这是一个TCP连接响应数据报文，并含服务端的初始序号seq(服务器)=y，以及服务器对客户端初始序号的确认号ack(服务器)=seq(客户端)+1=x+1）。</p><p><code>step3:第三次握手</code></p><p>客户端收到服务器的SYN+ACK包，向服务器发送一个序列号(seq=x+1)，确认号为ack(客户端)=y+1，此包发送完毕，客户端和服务器进入<strong>ESTABLISHED </strong>(TCP连接成功)**状态，完成三次握手。</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">建立连接前要确认客户端和服务端的接收和发送功能是否正常。</span><br><span class=\"line\">第一次客户端发送SYN时 什么也确认不了</span><br><span class=\"line\">第二次服务端发送SYN+ACK 可以确认服务端发送功能正常</span><br><span class=\"line\">第三次 客户端收到服务端发送的YSN+ACK 可以确认客户端发送接收功能正常</span><br><span class=\"line\">最后客户端发送ACK 服务端接收到后 可以确认服务端发送功能正常</span><br><span class=\"line\">到此就确认完毕了。</span><br></pre></td></tr></table></figure><h3 id=\"2-四次挥手\"><a href=\"#2-四次挥手\" class=\"headerlink\" title=\"2. 四次挥手\"></a>2. 四次挥手</h3><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-close-connection-four.jpg\" alt=\"\"></p><p><code>step1：第一次挥手</code><br>首先，客户端发送一个FIN，用来关闭客户端到服务器的数据传送，然后等待服务器的确认。其中终止标志位FIN=1，序列号seq=u。 <strong>客户端</strong>进入<strong>FIN_WAIT1</strong>状态</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我（Client端）没有数据要发给你（Server端）了&quot;，但是如果你（Server端）还有数据没有发送完成，则不必急着关闭Socket，可以继续发送数据。所以你先发送ACK</span><br></pre></td></tr></table></figure><p><code>step2：第二次挥手</code><br><strong>服务器</strong>收到这个FIN进入<strong>CLOSE_WAIT</strong>状态，然后它给客户端发送一个ACK，确认ack为收到的序号加一。</p><p><strong>客户端</strong>收到ACK应答后进入<strong>FIN_WAIT2</strong>状态</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">告诉Client端，你的请求我收到了，但是我（Server端）还没准备好，请继续你等我的消息&quot;</span><br></pre></td></tr></table></figure><p><code>step3：第三次挥手</code><br>服务端关闭服务器到客户端的连接，发送一个FIN给客户端。<strong>服务端</strong>进入<strong>LAST_ACK</strong>状态</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">告诉Client端，好了，我（Server端）这边数据发完了，准备好关闭连接了</span><br></pre></td></tr></table></figure><p><code>step4：第四次挥手</code></p><p><strong>客户端</strong>收到FIN后，进入<strong>TIME_WAIT</strong>状态 并发回一个ACK报文确认，并将确认序号seq设置为收到序号加一。</p><p>服务端收到客户端回复的ACK后立即关闭，服务端进入<strong>CLOASED</strong>状态</p><p>而客户端要等待2MSL后关闭 进入<strong>CLOASED</strong>状态</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Client端收到FIN报文后，&quot;就知道可以关闭连接了，所以发送ACK。但是他还是不相信网络，怕Server端不知道要关闭，所以发送ACK后没有立即，而是进入TIME_WAIT状态，如果Server端没有收到ACK那么自己还可以重传。Server端收到ACK后，&quot;就知道可以断开连接了&quot;。Client端等待了2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，我Client端也可以关闭连接了。Ok，TCP连接就这样关闭了！</span><br></pre></td></tr></table></figure><h3 id=\"3-TIME-WAIT状态详解\"><a href=\"#3-TIME-WAIT状态详解\" class=\"headerlink\" title=\"3. TIME-WAIT状态详解\"></a>3. TIME-WAIT状态详解</h3><p>为什么Client端要先进入TIME-WAIT状态，等待2MSL时间后才进入CLOSED状态？</p><p><strong>保证TCP协议的全双工连接能够可靠关闭，保证这次连接的重复数据段从网络中消失</strong></p><p>假设由于IP协议的不可靠性或者是其它网络原因，导致Server没有收到Client最后回复的ACK。那么Server就会在超时之后继续发送FIN，Client端在等待2MSL时间后都没收到信息，说明Server端已经收到自己发送的ACK并且成功关闭了。<br><strong>假设CLient端直接关闭了：</strong></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>.由于IP协议的不可靠性或者是其它网络原因，导致Server没有收到Client最后回复的ACK。那么Server就会在超时之后继续发送FIN，此时由于Client已经CLOSED了，就找不到与重发的FIN对应的连接，最后Server就会收到RST而不是ACK，Server就会以为是连接错误把问题报告给高层。这样的情况虽然不会造成数据丢失，但是却导致TCP协议不符合可靠连接的要求。所以，Client不是直接进入CLOSED，而是要保持TIME_WAIT，当再次收到FIN的时候，能够保证对方收到ACK，最后正确的关闭连接。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>.如果Client直接CLOSED，然后又再向Server发起一个新连接，我们不能保证这个新连接与刚关闭的连接的端口号是不同的。也就是说有可能新连接和老连接的端口号是相同的。一般来说不会发生什么问题，但是还是有特殊情况出现：假设新连接和已经关闭的老连接端口号是一样的，如果前一次连接的某些数据仍然滞留在网络中，这些延迟数据在建立新连接之后才到达Server，由于新连接和老连接的端口号是一样的，又因为TCP协议判断不同连接的依据是socket pair，于是，TCP协议就认为那个延迟的数据是属于新连接的，这样就和真正的新连接的数据包发生混淆了。所以TCP连接还要在TIME_WAIT状态等待<span class=\"number\">2</span>倍MSL，这样可以保证本次连接的所有数据都从网络中消失。</span><br></pre></td></tr></table></figure><p><strong>2MSL:Maximum Segment Lifetime 即数据在网络中保存的最大时间。</strong></p><p><em>简单易懂的说法:</em></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">假设Client端发起中断连接请求，也就是发送FIN报文。Server端接到FIN报文后，意思是说&quot;我Client端没有数据要发给你了&quot;，但是如果你还有数据没有发送完成，则不必急着关闭Socket，可以继续发送数据。所以你先发送ACK，&quot;告诉Client端，你的请求我收到了，但是我还没准备好，请继续你等我的消息&quot;。这个时候Client端就进入FIN_WAIT状态，继续等待Server端的FIN报文。当Server端确定数据已发送完成，则向Client端发送FIN报文，&quot;告诉Client端，好了，我这边数据发完了，准备好关闭连接了&quot;。Client端收到FIN报文后，&quot;就知道可以关闭连接了，但是他还是不相信网络，怕Server端不知道要关闭，所以发送ACK后进入TIME_WAIT状态，如果Server端没有收到ACK则可以重传。“，Server端收到ACK后，&quot;就知道可以断开连接了&quot;。Client端等待了2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，我Client端也可以关闭连接了。Ok，TCP连接就这样关闭了！</span><br></pre></td></tr></table></figure><h3 id=\"4-TCP-的有限状态机\"><a href=\"#4-TCP-的有限状态机\" class=\"headerlink\" title=\"4. TCP 的有限状态机\"></a>4. TCP 的有限状态机</h3><p>红色为客户端 蓝色为服务端 细箭头为异常变化</p><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-status-map.png\" alt=\"TCP\"></p><h3 id=\"5-参考\"><a href=\"#5-参考\" class=\"headerlink\" title=\"5. 参考\"></a>5. 参考</h3><p><code>https://www.baidu.com/link?url=_mlor11BLttd1jmMU4k9OP0gqcjNKhZQ9fJuvbMOhkuH9-lVeB-y3VIVK1neZURi_tmR3rg1lj2lfgvvGhTV-q&amp;wd=&amp;eqid=d0144c250007b69c000000035bfdfafc</code></p><!-- rebuild by neat -->"},{"title":"Hexo个人博客之搭建（一）","abbrlink":18973,"date":"2018-12-20T14:00:00.000Z","_content":"\n本文主要记录了如何搭建自己的博客。基于Hexo框架在本地搭建自己博客的全过程，包括了环境准备到Hexo初始化，再到服务的开启等。\n\n<!--more-->\n\n> 这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。\n>\n> [点击阅读更多系列文章](https://www.lixueduan.com/tags/Hexo/)\n\n## 1. 环境准备\n\n- Git  [Git下载地址](https://git-scm.com/downloads)\n- Node.js  [Node.js下载地址](https://nodejs.org/en/)\n\n小白式安装，一直下一步就ok了。\n\n都安装好后就可以开始安装Hexo啦.\n\n## 2. 安装Hexo\n\n- 1.新建一个文件夹,用于安装Hexo,以后这个就是放博客文件的.\n- 2.在此文件夹右键,`Git Bash Here`,打开Git\n- 3.安装Hexo  命令`npm install -g hexo`\n- 4.初始化Hexo  命令`hexo init`\n- 5.安装组件  命令`npm install`\n\n到此为止,Hexo就算是安装完成了。\n\n## 3. 开启服务\n\n- 1.`hexo generate`或者简写`hexo g`  编译,生成静态文件,就是生成一个个html文件.\n\n- 2.开启服务`hexo server`或者`hexo s`   成功开启后就可以在本地访问了。 http://localhost:4000\n  - 假如页面一直无法跳转，那么可能端口被占用了。此时我们ctrl+c停止服务器，`hexo server -p 端口号`来改变端口号  \n  - 如`hexo server -p 5000`  将端口号换为`5000`,默认是`4000`\n- 3.常用命令 \n  - `hexo clean`  清除缓存文件  \n  - `hexo deploy`或者`hexo d`  部署网站到云端,这个后面再讲。\n\n## 参考\n\n[Hexo官方文档](https://hexo.io/zh-cn/docs/)","source":"_posts/hexo/hexo-blog-setup-one.md","raw":"---\ntitle: Hexo个人博客之搭建（一）\ntags:\n  - Hexo\ncategories:\n  - Hexo\nabbrlink: 18973\ndate: 2018-12-20 22:00:00\n---\n\n本文主要记录了如何搭建自己的博客。基于Hexo框架在本地搭建自己博客的全过程，包括了环境准备到Hexo初始化，再到服务的开启等。\n\n<!--more-->\n\n> 这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。\n>\n> [点击阅读更多系列文章](https://www.lixueduan.com/tags/Hexo/)\n\n## 1. 环境准备\n\n- Git  [Git下载地址](https://git-scm.com/downloads)\n- Node.js  [Node.js下载地址](https://nodejs.org/en/)\n\n小白式安装，一直下一步就ok了。\n\n都安装好后就可以开始安装Hexo啦.\n\n## 2. 安装Hexo\n\n- 1.新建一个文件夹,用于安装Hexo,以后这个就是放博客文件的.\n- 2.在此文件夹右键,`Git Bash Here`,打开Git\n- 3.安装Hexo  命令`npm install -g hexo`\n- 4.初始化Hexo  命令`hexo init`\n- 5.安装组件  命令`npm install`\n\n到此为止,Hexo就算是安装完成了。\n\n## 3. 开启服务\n\n- 1.`hexo generate`或者简写`hexo g`  编译,生成静态文件,就是生成一个个html文件.\n\n- 2.开启服务`hexo server`或者`hexo s`   成功开启后就可以在本地访问了。 http://localhost:4000\n  - 假如页面一直无法跳转，那么可能端口被占用了。此时我们ctrl+c停止服务器，`hexo server -p 端口号`来改变端口号  \n  - 如`hexo server -p 5000`  将端口号换为`5000`,默认是`4000`\n- 3.常用命令 \n  - `hexo clean`  清除缓存文件  \n  - `hexo deploy`或者`hexo d`  部署网站到云端,这个后面再讲。\n\n## 参考\n\n[Hexo官方文档](https://hexo.io/zh-cn/docs/)","slug":"hexo/hexo-blog-setup-one","published":1,"updated":"2019-01-03T12:03:17.080Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqhw7t7k000mwkw46ejz6c7n","content":"<!-- build time:Fri Jan 04 2019 18:24:57 GMT+0800 (GMT+08:00) --><p>本文主要记录了如何搭建自己的博客。基于Hexo框架在本地搭建自己博客的全过程，包括了环境准备到Hexo初始化，再到服务的开启等。</p><a id=\"more\"></a><blockquote><p>这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。</p><p><a href=\"https://www.lixueduan.com/tags/Hexo/\">点击阅读更多系列文章</a></p></blockquote><h2 id=\"1-环境准备\"><a href=\"#1-环境准备\" class=\"headerlink\" title=\"1. 环境准备\"></a>1. 环境准备</h2><ul><li>Git <a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">Git下载地址</a></li><li>Node.js <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js下载地址</a></li></ul><p>小白式安装，一直下一步就ok了。</p><p>都安装好后就可以开始安装Hexo啦.</p><h2 id=\"2-安装Hexo\"><a href=\"#2-安装Hexo\" class=\"headerlink\" title=\"2. 安装Hexo\"></a>2. 安装Hexo</h2><ul><li>1.新建一个文件夹,用于安装Hexo,以后这个就是放博客文件的.</li><li>2.在此文件夹右键,<code>Git Bash Here</code>,打开Git</li><li>3.安装Hexo 命令<code>npm install -g hexo</code></li><li>4.初始化Hexo 命令<code>hexo init</code></li><li>5.安装组件 命令<code>npm install</code></li></ul><p>到此为止,Hexo就算是安装完成了。</p><h2 id=\"3-开启服务\"><a href=\"#3-开启服务\" class=\"headerlink\" title=\"3. 开启服务\"></a>3. 开启服务</h2><ul><li><p>1.<code>hexo generate</code>或者简写<code>hexo g</code> 编译,生成静态文件,就是生成一个个html文件.</p></li><li><p>2.开启服务<code>hexo server</code>或者<code>hexo s</code> 成功开启后就可以在本地访问了。 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a></p><ul><li>假如页面一直无法跳转，那么可能端口被占用了。此时我们ctrl+c停止服务器，<code>hexo server -p 端口号</code>来改变端口号</li><li>如<code>hexo server -p 5000</code> 将端口号换为<code>5000</code>,默认是<code>4000</code></li></ul></li><li>3.常用命令<ul><li><code>hexo clean</code> 清除缓存文件</li><li><code>hexo deploy</code>或者<code>hexo d</code> 部署网站到云端,这个后面再讲。</li></ul></li></ul><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo官方文档</a></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Fri Jan 04 2019 18:24:57 GMT+0800 (GMT+08:00) --><p>本文主要记录了如何搭建自己的博客。基于Hexo框架在本地搭建自己博客的全过程，包括了环境准备到Hexo初始化，再到服务的开启等。</p>","more":"<blockquote><p>这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。</p><p><a href=\"https://www.lixueduan.com/tags/Hexo/\">点击阅读更多系列文章</a></p></blockquote><h2 id=\"1-环境准备\"><a href=\"#1-环境准备\" class=\"headerlink\" title=\"1. 环境准备\"></a>1. 环境准备</h2><ul><li>Git <a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">Git下载地址</a></li><li>Node.js <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js下载地址</a></li></ul><p>小白式安装，一直下一步就ok了。</p><p>都安装好后就可以开始安装Hexo啦.</p><h2 id=\"2-安装Hexo\"><a href=\"#2-安装Hexo\" class=\"headerlink\" title=\"2. 安装Hexo\"></a>2. 安装Hexo</h2><ul><li>1.新建一个文件夹,用于安装Hexo,以后这个就是放博客文件的.</li><li>2.在此文件夹右键,<code>Git Bash Here</code>,打开Git</li><li>3.安装Hexo 命令<code>npm install -g hexo</code></li><li>4.初始化Hexo 命令<code>hexo init</code></li><li>5.安装组件 命令<code>npm install</code></li></ul><p>到此为止,Hexo就算是安装完成了。</p><h2 id=\"3-开启服务\"><a href=\"#3-开启服务\" class=\"headerlink\" title=\"3. 开启服务\"></a>3. 开启服务</h2><ul><li><p>1.<code>hexo generate</code>或者简写<code>hexo g</code> 编译,生成静态文件,就是生成一个个html文件.</p></li><li><p>2.开启服务<code>hexo server</code>或者<code>hexo s</code> 成功开启后就可以在本地访问了。 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a></p><ul><li>假如页面一直无法跳转，那么可能端口被占用了。此时我们ctrl+c停止服务器，<code>hexo server -p 端口号</code>来改变端口号</li><li>如<code>hexo server -p 5000</code> 将端口号换为<code>5000</code>,默认是<code>4000</code></li></ul></li><li>3.常用命令<ul><li><code>hexo clean</code> 清除缓存文件</li><li><code>hexo deploy</code>或者<code>hexo d</code> 部署网站到云端,这个后面再讲。</li></ul></li></ul><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo官方文档</a></p><!-- rebuild by neat -->"},{"title":"Hexo个人博客之迁移（四）","abbrlink":33469,"date":"2018-12-27T14:00:00.000Z","_content":"\n本章主要记录了如何通过使用`Github`的`分支功能`解决更换电脑后博客更新不方便的问题，让你的博客能在各个电脑上灵活切换。在也不用担心换电脑后博客配置丢失等问题了。\n\n<!--more-->\n\n> 这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。\n>\n> [点击阅读更多系列文章](https://www.lixueduan.com/tags/Hexo/)\n\n到此为止，我们已经完成了差不多所有的步骤。\n\n* 1.搭建博客\n* 2.优化主题\n* 3.部署收录\n\n**新问题：**\n\n​\t现在博客只能在自己的电脑上更新，如果换电脑了就很麻烦。配置文件主题什么的都要重新弄。所以网上找了找多台电脑同时操作的办法，我们可以利用Github的分支功能。\n\n​\t将博客文件夹下所有文件全`push`到`Github`。这样换电脑后直接`pull`就可以了。\n\n## 1. 新建分支\n\n* 1.在`Github`的`lillusory.github.io`（hexo仓库）上新建一个分支，例如`Hexo`，并切换到该分支.\n\n* 2.并在该仓库`Settings->Branches->Default branch`中将默认分支设为`Hexo`.`Hexo`分支是博客的开发环境，用来写博客，保存原始文件,`master`分支用于显示，保存生产的静态文件。\n\n* 3.新建分支后将博客目录下的所有文件上传到该分支，注意由于一个`git仓库`中不能包含其他仓库，所以需要删除掉主题文件夹中的`.git`目录。\n\n* 4.如果按照前面的博文添加了背景，则需要删掉`站点目录\\themes\\next\\source\\lib\\canvas-nest`文件夹中的`.git`目录。以后需要更新主题时，可以先克隆到本地在复制到相应目录.\n\n## 2. 写博客\n\n在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理。\n\n* 依次执行`git add .`、`git commit -m \"这里写备注\"`、`git push origin 这里写分支名字`指令将改动推送到GitHub（此时当前分支应为hexo）。\n* 然后才执行`hexo g -d`发布网站到master分支上。\n\n## 3. 博客迁移\n\n当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：\n\n* 克隆仓库\n  * 使用`git clone git@github.com:illusorycloud/illusorycloud.github.io.git`拷贝仓库（默认分支为hexo）；//修改成自己的\n* 安装插件 在前面克隆下的项目中安装插件\n  * 执行命令`npm install hexo、npm install`、`npm install hexo-deployer-git`\n\n## 4. 参考\n\n[如何在多台电脑上更新博客](https://blog.csdn.net/qq_25560423/article/details/53785707)\n\n\n\n","source":"_posts/hexo/hexo-blog-tranfer-four.md","raw":"---\ntitle: Hexo个人博客之迁移（四）\ntags:\n  - Hexo\ncategories:\n  - Hexo\nabbrlink: 33469\ndate: 2018-12-27 22:00:00\n---\n\n本章主要记录了如何通过使用`Github`的`分支功能`解决更换电脑后博客更新不方便的问题，让你的博客能在各个电脑上灵活切换。在也不用担心换电脑后博客配置丢失等问题了。\n\n<!--more-->\n\n> 这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。\n>\n> [点击阅读更多系列文章](https://www.lixueduan.com/tags/Hexo/)\n\n到此为止，我们已经完成了差不多所有的步骤。\n\n* 1.搭建博客\n* 2.优化主题\n* 3.部署收录\n\n**新问题：**\n\n​\t现在博客只能在自己的电脑上更新，如果换电脑了就很麻烦。配置文件主题什么的都要重新弄。所以网上找了找多台电脑同时操作的办法，我们可以利用Github的分支功能。\n\n​\t将博客文件夹下所有文件全`push`到`Github`。这样换电脑后直接`pull`就可以了。\n\n## 1. 新建分支\n\n* 1.在`Github`的`lillusory.github.io`（hexo仓库）上新建一个分支，例如`Hexo`，并切换到该分支.\n\n* 2.并在该仓库`Settings->Branches->Default branch`中将默认分支设为`Hexo`.`Hexo`分支是博客的开发环境，用来写博客，保存原始文件,`master`分支用于显示，保存生产的静态文件。\n\n* 3.新建分支后将博客目录下的所有文件上传到该分支，注意由于一个`git仓库`中不能包含其他仓库，所以需要删除掉主题文件夹中的`.git`目录。\n\n* 4.如果按照前面的博文添加了背景，则需要删掉`站点目录\\themes\\next\\source\\lib\\canvas-nest`文件夹中的`.git`目录。以后需要更新主题时，可以先克隆到本地在复制到相应目录.\n\n## 2. 写博客\n\n在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理。\n\n* 依次执行`git add .`、`git commit -m \"这里写备注\"`、`git push origin 这里写分支名字`指令将改动推送到GitHub（此时当前分支应为hexo）。\n* 然后才执行`hexo g -d`发布网站到master分支上。\n\n## 3. 博客迁移\n\n当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：\n\n* 克隆仓库\n  * 使用`git clone git@github.com:illusorycloud/illusorycloud.github.io.git`拷贝仓库（默认分支为hexo）；//修改成自己的\n* 安装插件 在前面克隆下的项目中安装插件\n  * 执行命令`npm install hexo、npm install`、`npm install hexo-deployer-git`\n\n## 4. 参考\n\n[如何在多台电脑上更新博客](https://blog.csdn.net/qq_25560423/article/details/53785707)\n\n\n\n","slug":"hexo/hexo-blog-tranfer-four","published":1,"updated":"2019-01-03T13:48:47.084Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqhw7t7m000nwkw4rv8aqa7g","content":"<!-- build time:Fri Jan 04 2019 18:24:57 GMT+0800 (GMT+08:00) --><p>本章主要记录了如何通过使用<code>Github</code>的<code>分支功能</code>解决更换电脑后博客更新不方便的问题，让你的博客能在各个电脑上灵活切换。在也不用担心换电脑后博客配置丢失等问题了。</p><a id=\"more\"></a><blockquote><p>这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。</p><p><a href=\"https://www.lixueduan.com/tags/Hexo/\">点击阅读更多系列文章</a></p></blockquote><p>到此为止，我们已经完成了差不多所有的步骤。</p><ul><li>1.搭建博客</li><li>2.优化主题</li><li>3.部署收录</li></ul><p><strong>新问题：</strong></p><p>​ 现在博客只能在自己的电脑上更新，如果换电脑了就很麻烦。配置文件主题什么的都要重新弄。所以网上找了找多台电脑同时操作的办法，我们可以利用Github的分支功能。</p><p>​ 将博客文件夹下所有文件全<code>push</code>到<code>Github</code>。这样换电脑后直接<code>pull</code>就可以了。</p><h2 id=\"1-新建分支\"><a href=\"#1-新建分支\" class=\"headerlink\" title=\"1. 新建分支\"></a>1. 新建分支</h2><ul><li><p>1.在<code>Github</code>的<code>lillusory.github.io</code>（hexo仓库）上新建一个分支，例如<code>Hexo</code>，并切换到该分支.</p></li><li><p>2.并在该仓库<code>Settings-&gt;Branches-&gt;Default branch</code>中将默认分支设为<code>Hexo</code>.<code>Hexo</code>分支是博客的开发环境，用来写博客，保存原始文件,<code>master</code>分支用于显示，保存生产的静态文件。</p></li><li><p>3.新建分支后将博客目录下的所有文件上传到该分支，注意由于一个<code>git仓库</code>中不能包含其他仓库，所以需要删除掉主题文件夹中的<code>.git</code>目录。</p></li><li><p>4.如果按照前面的博文添加了背景，则需要删掉<code>站点目录\\themes\\next\\source\\lib\\canvas-nest</code>文件夹中的<code>.git</code>目录。以后需要更新主题时，可以先克隆到本地在复制到相应目录.</p></li></ul><h2 id=\"2-写博客\"><a href=\"#2-写博客\" class=\"headerlink\" title=\"2. 写博客\"></a>2. 写博客</h2><p>在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理。</p><ul><li>依次执行<code>git add .</code>、<code>git commit -m &quot;这里写备注&quot;</code>、<code>git push origin 这里写分支名字</code>指令将改动推送到GitHub（此时当前分支应为hexo）。</li><li>然后才执行<code>hexo g -d</code>发布网站到master分支上。</li></ul><h2 id=\"3-博客迁移\"><a href=\"#3-博客迁移\" class=\"headerlink\" title=\"3. 博客迁移\"></a>3. 博客迁移</h2><p>当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：</p><ul><li>克隆仓库<ul><li>使用<code>git clone git@github.com:illusorycloud/illusorycloud.github.io.git</code>拷贝仓库（默认分支为hexo）；//修改成自己的</li></ul></li><li>安装插件 在前面克隆下的项目中安装插件<ul><li>执行命令<code>npm install hexo、npm install</code>、<code>npm install hexo-deployer-git</code></li></ul></li></ul><h2 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4. 参考\"></a>4. 参考</h2><p><a href=\"https://blog.csdn.net/qq_25560423/article/details/53785707\" target=\"_blank\" rel=\"noopener\">如何在多台电脑上更新博客</a></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Fri Jan 04 2019 18:24:57 GMT+0800 (GMT+08:00) --><p>本章主要记录了如何通过使用<code>Github</code>的<code>分支功能</code>解决更换电脑后博客更新不方便的问题，让你的博客能在各个电脑上灵活切换。在也不用担心换电脑后博客配置丢失等问题了。</p>","more":"<blockquote><p>这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。</p><p><a href=\"https://www.lixueduan.com/tags/Hexo/\">点击阅读更多系列文章</a></p></blockquote><p>到此为止，我们已经完成了差不多所有的步骤。</p><ul><li>1.搭建博客</li><li>2.优化主题</li><li>3.部署收录</li></ul><p><strong>新问题：</strong></p><p>​ 现在博客只能在自己的电脑上更新，如果换电脑了就很麻烦。配置文件主题什么的都要重新弄。所以网上找了找多台电脑同时操作的办法，我们可以利用Github的分支功能。</p><p>​ 将博客文件夹下所有文件全<code>push</code>到<code>Github</code>。这样换电脑后直接<code>pull</code>就可以了。</p><h2 id=\"1-新建分支\"><a href=\"#1-新建分支\" class=\"headerlink\" title=\"1. 新建分支\"></a>1. 新建分支</h2><ul><li><p>1.在<code>Github</code>的<code>lillusory.github.io</code>（hexo仓库）上新建一个分支，例如<code>Hexo</code>，并切换到该分支.</p></li><li><p>2.并在该仓库<code>Settings-&gt;Branches-&gt;Default branch</code>中将默认分支设为<code>Hexo</code>.<code>Hexo</code>分支是博客的开发环境，用来写博客，保存原始文件,<code>master</code>分支用于显示，保存生产的静态文件。</p></li><li><p>3.新建分支后将博客目录下的所有文件上传到该分支，注意由于一个<code>git仓库</code>中不能包含其他仓库，所以需要删除掉主题文件夹中的<code>.git</code>目录。</p></li><li><p>4.如果按照前面的博文添加了背景，则需要删掉<code>站点目录\\themes\\next\\source\\lib\\canvas-nest</code>文件夹中的<code>.git</code>目录。以后需要更新主题时，可以先克隆到本地在复制到相应目录.</p></li></ul><h2 id=\"2-写博客\"><a href=\"#2-写博客\" class=\"headerlink\" title=\"2. 写博客\"></a>2. 写博客</h2><p>在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理。</p><ul><li>依次执行<code>git add .</code>、<code>git commit -m &quot;这里写备注&quot;</code>、<code>git push origin 这里写分支名字</code>指令将改动推送到GitHub（此时当前分支应为hexo）。</li><li>然后才执行<code>hexo g -d</code>发布网站到master分支上。</li></ul><h2 id=\"3-博客迁移\"><a href=\"#3-博客迁移\" class=\"headerlink\" title=\"3. 博客迁移\"></a>3. 博客迁移</h2><p>当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：</p><ul><li>克隆仓库<ul><li>使用<code>git clone git@github.com:illusorycloud/illusorycloud.github.io.git</code>拷贝仓库（默认分支为hexo）；//修改成自己的</li></ul></li><li>安装插件 在前面克隆下的项目中安装插件<ul><li>执行命令<code>npm install hexo、npm install</code>、<code>npm install hexo-deployer-git</code></li></ul></li></ul><h2 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4. 参考\"></a>4. 参考</h2><p><a href=\"https://blog.csdn.net/qq_25560423/article/details/53785707\" target=\"_blank\" rel=\"noopener\">如何在多台电脑上更新博客</a></p><!-- rebuild by neat -->"},{"title":"Java设计模式（一）--单例模式","abbrlink":53093,"date":"2018-10-08T14:00:00.000Z","_content":"\n本文主要介绍了设计模式的六大原则，并结合实例描述了各种单例模式的具体实现和性能分析测试。包括：`饿汉式`、`静态内部类`、`懒汉式`、`双重校验锁`、`枚举`等。\n\n<!--more-->\n\n> 设计模式系列文章\n>\n> [Java23种设计模式](https://www.lixueduan.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/)\n\n## 1. 设计模式的六大原则\n\n**1、开闭原则（Open Close Principle）**\n\n> 开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。\n\n**2、里氏代换原则（Liskov Substitution Principle）**\n\n> 其官方描述比较抽象，可自行百度。实际上可以这样理解：\n>\n> （1）子类的能力必须大于等于父类，即父类可以使用的方法，子类都可以使用。\n>\n> （2）返回值也是同样的道理。假设一个父类方法返回一个List，子类返回一个ArrayList，这当然可以。如果父类方法返回一个ArrayList，子类返回一个List，就说不通了。这里子类返回值的能力是比父类小的。\n>\n> （3）还有抛出异常的情况。任何子类方法可以声明抛出父类方法声明异常的子类。而不能声明抛出父类没有声明的异常。\n\n**3、依赖倒转原则（Dependence Inversion Principle）**\n\n> 这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。\n\n**4、接口隔离原则（Interface Segregation Principle）**\n\n> 这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。\n\n**5、迪米特法则（最少知道原则）（Demeter Principle）**\n\n> 为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。\n\n**6、合成复用原则（Composite Reuse Principle）**\n\n> 原则是尽量使用合成/聚合的方式，而不是使用继承。\n\nJava 中一般认为有 23 种设计模式，总体来说设计模式分为三大类：\n\n`创建型模式`，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。\n\n`结构型模式`，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。\n\n`行为型模式`，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录\n\n模式、状态模式、访问者模式、中介者模式、解释器模式。\n\n比较常用的有：工厂方法模式、抽象工厂模式、单例模式、建造者模式、适配器模式、代理模式、享元模式、策略模式、观察者模式。\n\n## 2. 单例模式\n\n### 2.1 单利模式介绍\n\n**作用：**保证一个类仅有一个实例，并提供一个访问它的全局访问点。\n\n**主要解决：**一个全局使用的类频繁地创建与销毁。\n\n**优点：** 1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例。 2、避免对资源的多重占用（比如写文件操作）。\n\n**缺点：**没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。\n\n**应用场景：** 1.配置文件访问类，不用每次使用时都new一个 2.数据库连接池 保证项目中只有一个连接池存在。\n\n### 2.2 单利模式实现\n\n#### 1. 饿汉式\n\n```java\npublic class Singleton {  \n    //类变量在类准备阶段就初始化了然后放在<clinit>构造方法中\n    //一旦外部调用了静态方法，那么就会初始化完成。\n    //一个类的<clinit>只会执行一次\n    private static Singleton instance = new Singleton();  \n\n    private Singleton (){}  \n\n    public static Singleton getInstance() {  \n   　　 return instance;  \n    }  \n\n}\n```\n\n这种方式实现的单例：类加载时就创建实例。由`classloder`保证了线程安全。\n\n#### 2. 静态内部类\n\n```java\npublic class Singleton {  \n    private static class SingletonHolder {  \n\n    private static final Singleton INSTANCE = new Singleton();  \n\n    }  \n\n    private Singleton (){}  \n\n    public static final Singleton getInstance() {  \n    　　return SingletonHolder.INSTANCE;  \n    }  \n\n}\n```\n\n这种方式实现的单例：实现了`lazy loading` 使用时才创建实例，由`classloder`保证了线程安全。\n\n**饿汉式/静态内部类是如何保证线程安全的：**\n\n在《深入理解JAVA虚拟机》中，有这么一句话:\n\n>  虚拟机会保证一个类的`<clinit>()`方法在多线程环境中被正确地加锁、同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的`<clinit>()`方法，其他线程都需要阻塞等待，直到活动线程执行`<clinit>()`方法完毕。\n\n#### 3. 懒汉式\n\n```java\npublic class Singleton {  \n    private static Singleton instance;  \n\n    private Singleton (){}  \n\n    public static synchronized Singleton getInstance() {  \n    if (instance == null) {  \n        instance = new Singleton();  \n    }  \n   　　 return instance;  \n    }  \n\n}\n```\n\n这种方式实现的单例：实现了`lazy loading` 使用时才创建实例。`synchronized`保证了线程安全，但效率低。\n\n#### 4. 双重校验锁\n\n```java\npublic class Singleton {\n    private static volatile Singleton singleton;\n\n    private Singleton() {\n    }\n\n    public static Singleton singleton() {\n        if (singleton == null) {\n            synchronized (Singleton.class) {\n                if (singleton == null) {\n                    singleton = new Singleton();//非原子操作\n                }\n            }\n        }\n        return singleton;\n    }\n}\n//singleton = new Singleton(); 非原子操作 分为三步\n// 1.给singleton分配内存\n// 2.调用 Singleton 的构造函数来初始化成员变量\n// 3.将给singleton对象指向分配的内存空间（此时singleton才不为null）\n// 指令重排序-->执行命令时虚拟机可能会对以上3个步骤交换位置 最后可能是132这种 分配内存并修改指针后未初始化 多线程获取时可能会出现问题。\n//volatile关键字会禁止指令重排序 即可避免这种问题。\n```\n\n这种方式实现的单例：实现了`lazy loading` 使用时才创建实例。`synchronized`保证了线程安全，`volatile`禁止指令重排序保证了多线程获取时不为空。但要JDK1.5以上才行。\n\n#### 5. 枚举\n\n```java\npublic enum Singleton {\n\t //定义一个枚举的元素，它就是 Singleton 的一个实例\n    INSTANCE;  \n    \n    public void doSomeThing() {  \n\t     System.out.println(\"枚举方法实现单例\");\n    }  \n}\npublic class Test {\n\n\tpublic static void main(String[] args) {\n\t\tSingleton singleton = Singleton.INSTANCE;\n\t\tsingleton.doSomeThing();//output:枚举方法实现单例\n\n\t}\n}\n```\n\n这种方式也是《Effective Java 》以及《Java与模式》的作者推荐的方式，不过工作中却很少看到用。\n\n## 3. 性能测试\n\n五种单例实现方式，在100个线程下，每个线程访问1千万次实例的用时.\n\n| Tables | 实现方式   | 用时(毫秒) |\n| ------ | ---------- | ---------- |\n| 1      | 饿汉式     | 13         |\n| 2      | 懒汉式     | 10778      |\n| 3      | 双重检查   | 15         |\n| 4      | 静态内部类 | 14         |\n| 5      | 枚举       | 12         |\n\n(*注意:由于不同电脑之间的性能差异，测试的结果可能不同)\n\n根据不同场合选择具体的实现方式，一般情况下我是使用的**静态内部类**或者**DCL双重校验锁**方式。\n\n## 4. 总结\n\n**为什么要使用单例模式？什么场景适合使用单例模式?单例模式有什么好处**\n\n* 1.单例模式能够保证一个类仅有唯一的实例，避免创建多个实例。并提供一个全局访问点，优化和共享资源访问。\n* 2.当一个对象需要频繁创建和销毁时使用单例模式能节省系统资源。\n\n**应用场景：**\n\n* 1.配置文件访问类，不用每次使用时都new一个\n\n*  2.数据库连接池 保证项目中只有一个连接池存在。\n\n**单例模式的缺点：**\n\n* 单例模式一般没有接口，扩展很困难，若要扩展只能修改代码。\n\n## 5. 参考\n\n[单例模式性能分析](https://blog.csdn.net/qq_22706515/article/details/74202814)","source":"_posts/design-pattern/one-java-singleton-pattern.md","raw":"---\ntitle: Java设计模式（一）--单例模式\ntags:\n  - Java\n  - 设计模式\ncategories:\n  - 设计模式\nabbrlink: 53093\ndate: 2018-10-08 22:00:00\n---\n\n本文主要介绍了设计模式的六大原则，并结合实例描述了各种单例模式的具体实现和性能分析测试。包括：`饿汉式`、`静态内部类`、`懒汉式`、`双重校验锁`、`枚举`等。\n\n<!--more-->\n\n> 设计模式系列文章\n>\n> [Java23种设计模式](https://www.lixueduan.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/)\n\n## 1. 设计模式的六大原则\n\n**1、开闭原则（Open Close Principle）**\n\n> 开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。\n\n**2、里氏代换原则（Liskov Substitution Principle）**\n\n> 其官方描述比较抽象，可自行百度。实际上可以这样理解：\n>\n> （1）子类的能力必须大于等于父类，即父类可以使用的方法，子类都可以使用。\n>\n> （2）返回值也是同样的道理。假设一个父类方法返回一个List，子类返回一个ArrayList，这当然可以。如果父类方法返回一个ArrayList，子类返回一个List，就说不通了。这里子类返回值的能力是比父类小的。\n>\n> （3）还有抛出异常的情况。任何子类方法可以声明抛出父类方法声明异常的子类。而不能声明抛出父类没有声明的异常。\n\n**3、依赖倒转原则（Dependence Inversion Principle）**\n\n> 这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。\n\n**4、接口隔离原则（Interface Segregation Principle）**\n\n> 这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。\n\n**5、迪米特法则（最少知道原则）（Demeter Principle）**\n\n> 为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。\n\n**6、合成复用原则（Composite Reuse Principle）**\n\n> 原则是尽量使用合成/聚合的方式，而不是使用继承。\n\nJava 中一般认为有 23 种设计模式，总体来说设计模式分为三大类：\n\n`创建型模式`，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。\n\n`结构型模式`，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。\n\n`行为型模式`，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录\n\n模式、状态模式、访问者模式、中介者模式、解释器模式。\n\n比较常用的有：工厂方法模式、抽象工厂模式、单例模式、建造者模式、适配器模式、代理模式、享元模式、策略模式、观察者模式。\n\n## 2. 单例模式\n\n### 2.1 单利模式介绍\n\n**作用：**保证一个类仅有一个实例，并提供一个访问它的全局访问点。\n\n**主要解决：**一个全局使用的类频繁地创建与销毁。\n\n**优点：** 1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例。 2、避免对资源的多重占用（比如写文件操作）。\n\n**缺点：**没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。\n\n**应用场景：** 1.配置文件访问类，不用每次使用时都new一个 2.数据库连接池 保证项目中只有一个连接池存在。\n\n### 2.2 单利模式实现\n\n#### 1. 饿汉式\n\n```java\npublic class Singleton {  \n    //类变量在类准备阶段就初始化了然后放在<clinit>构造方法中\n    //一旦外部调用了静态方法，那么就会初始化完成。\n    //一个类的<clinit>只会执行一次\n    private static Singleton instance = new Singleton();  \n\n    private Singleton (){}  \n\n    public static Singleton getInstance() {  \n   　　 return instance;  \n    }  \n\n}\n```\n\n这种方式实现的单例：类加载时就创建实例。由`classloder`保证了线程安全。\n\n#### 2. 静态内部类\n\n```java\npublic class Singleton {  \n    private static class SingletonHolder {  \n\n    private static final Singleton INSTANCE = new Singleton();  \n\n    }  \n\n    private Singleton (){}  \n\n    public static final Singleton getInstance() {  \n    　　return SingletonHolder.INSTANCE;  \n    }  \n\n}\n```\n\n这种方式实现的单例：实现了`lazy loading` 使用时才创建实例，由`classloder`保证了线程安全。\n\n**饿汉式/静态内部类是如何保证线程安全的：**\n\n在《深入理解JAVA虚拟机》中，有这么一句话:\n\n>  虚拟机会保证一个类的`<clinit>()`方法在多线程环境中被正确地加锁、同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的`<clinit>()`方法，其他线程都需要阻塞等待，直到活动线程执行`<clinit>()`方法完毕。\n\n#### 3. 懒汉式\n\n```java\npublic class Singleton {  \n    private static Singleton instance;  \n\n    private Singleton (){}  \n\n    public static synchronized Singleton getInstance() {  \n    if (instance == null) {  \n        instance = new Singleton();  \n    }  \n   　　 return instance;  \n    }  \n\n}\n```\n\n这种方式实现的单例：实现了`lazy loading` 使用时才创建实例。`synchronized`保证了线程安全，但效率低。\n\n#### 4. 双重校验锁\n\n```java\npublic class Singleton {\n    private static volatile Singleton singleton;\n\n    private Singleton() {\n    }\n\n    public static Singleton singleton() {\n        if (singleton == null) {\n            synchronized (Singleton.class) {\n                if (singleton == null) {\n                    singleton = new Singleton();//非原子操作\n                }\n            }\n        }\n        return singleton;\n    }\n}\n//singleton = new Singleton(); 非原子操作 分为三步\n// 1.给singleton分配内存\n// 2.调用 Singleton 的构造函数来初始化成员变量\n// 3.将给singleton对象指向分配的内存空间（此时singleton才不为null）\n// 指令重排序-->执行命令时虚拟机可能会对以上3个步骤交换位置 最后可能是132这种 分配内存并修改指针后未初始化 多线程获取时可能会出现问题。\n//volatile关键字会禁止指令重排序 即可避免这种问题。\n```\n\n这种方式实现的单例：实现了`lazy loading` 使用时才创建实例。`synchronized`保证了线程安全，`volatile`禁止指令重排序保证了多线程获取时不为空。但要JDK1.5以上才行。\n\n#### 5. 枚举\n\n```java\npublic enum Singleton {\n\t //定义一个枚举的元素，它就是 Singleton 的一个实例\n    INSTANCE;  \n    \n    public void doSomeThing() {  \n\t     System.out.println(\"枚举方法实现单例\");\n    }  \n}\npublic class Test {\n\n\tpublic static void main(String[] args) {\n\t\tSingleton singleton = Singleton.INSTANCE;\n\t\tsingleton.doSomeThing();//output:枚举方法实现单例\n\n\t}\n}\n```\n\n这种方式也是《Effective Java 》以及《Java与模式》的作者推荐的方式，不过工作中却很少看到用。\n\n## 3. 性能测试\n\n五种单例实现方式，在100个线程下，每个线程访问1千万次实例的用时.\n\n| Tables | 实现方式   | 用时(毫秒) |\n| ------ | ---------- | ---------- |\n| 1      | 饿汉式     | 13         |\n| 2      | 懒汉式     | 10778      |\n| 3      | 双重检查   | 15         |\n| 4      | 静态内部类 | 14         |\n| 5      | 枚举       | 12         |\n\n(*注意:由于不同电脑之间的性能差异，测试的结果可能不同)\n\n根据不同场合选择具体的实现方式，一般情况下我是使用的**静态内部类**或者**DCL双重校验锁**方式。\n\n## 4. 总结\n\n**为什么要使用单例模式？什么场景适合使用单例模式?单例模式有什么好处**\n\n* 1.单例模式能够保证一个类仅有唯一的实例，避免创建多个实例。并提供一个全局访问点，优化和共享资源访问。\n* 2.当一个对象需要频繁创建和销毁时使用单例模式能节省系统资源。\n\n**应用场景：**\n\n* 1.配置文件访问类，不用每次使用时都new一个\n\n*  2.数据库连接池 保证项目中只有一个连接池存在。\n\n**单例模式的缺点：**\n\n* 单例模式一般没有接口，扩展很困难，若要扩展只能修改代码。\n\n## 5. 参考\n\n[单例模式性能分析](https://blog.csdn.net/qq_22706515/article/details/74202814)","slug":"design-pattern/one-java-singleton-pattern","published":1,"updated":"2019-01-03T13:49:13.907Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqhw7t7r000owkw4vqucxxj3","content":"<!-- build time:Fri Jan 04 2019 18:24:57 GMT+0800 (GMT+08:00) --><p>本文主要介绍了设计模式的六大原则，并结合实例描述了各种单例模式的具体实现和性能分析测试。包括：<code>饿汉式</code>、<code>静态内部类</code>、<code>懒汉式</code>、<code>双重校验锁</code>、<code>枚举</code>等。</p><a id=\"more\"></a><blockquote><p>设计模式系列文章</p><p><a href=\"https://www.lixueduan.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/\">Java23种设计模式</a></p></blockquote><h2 id=\"1-设计模式的六大原则\"><a href=\"#1-设计模式的六大原则\" class=\"headerlink\" title=\"1. 设计模式的六大原则\"></a>1. 设计模式的六大原则</h2><p><strong>1、开闭原则（Open Close Principle）</strong></p><blockquote><p>开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。</p></blockquote><p><strong>2、里氏代换原则（Liskov Substitution Principle）</strong></p><blockquote><p>其官方描述比较抽象，可自行百度。实际上可以这样理解：</p><p>（1）子类的能力必须大于等于父类，即父类可以使用的方法，子类都可以使用。</p><p>（2）返回值也是同样的道理。假设一个父类方法返回一个List，子类返回一个ArrayList，这当然可以。如果父类方法返回一个ArrayList，子类返回一个List，就说不通了。这里子类返回值的能力是比父类小的。</p><p>（3）还有抛出异常的情况。任何子类方法可以声明抛出父类方法声明异常的子类。而不能声明抛出父类没有声明的异常。</p></blockquote><p><strong>3、依赖倒转原则（Dependence Inversion Principle）</strong></p><blockquote><p>这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。</p></blockquote><p><strong>4、接口隔离原则（Interface Segregation Principle）</strong></p><blockquote><p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。</p></blockquote><p><strong>5、迪米特法则（最少知道原则）（Demeter Principle）</strong></p><blockquote><p>为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。</p></blockquote><p><strong>6、合成复用原则（Composite Reuse Principle）</strong></p><blockquote><p>原则是尽量使用合成/聚合的方式，而不是使用继承。</p></blockquote><p>Java 中一般认为有 23 种设计模式，总体来说设计模式分为三大类：</p><p><code>创建型模式</code>，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</p><p><code>结构型模式</code>，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</p><p><code>行为型模式</code>，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录</p><p>模式、状态模式、访问者模式、中介者模式、解释器模式。</p><p>比较常用的有：工厂方法模式、抽象工厂模式、单例模式、建造者模式、适配器模式、代理模式、享元模式、策略模式、观察者模式。</p><h2 id=\"2-单例模式\"><a href=\"#2-单例模式\" class=\"headerlink\" title=\"2. 单例模式\"></a>2. 单例模式</h2><h3 id=\"2-1-单利模式介绍\"><a href=\"#2-1-单利模式介绍\" class=\"headerlink\" title=\"2.1 单利模式介绍\"></a>2.1 单利模式介绍</h3><p><strong>作用：</strong>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><p><strong>主要解决：</strong>一个全局使用的类频繁地创建与销毁。</p><p><strong>优点：</strong> 1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例。 2、避免对资源的多重占用（比如写文件操作）。</p><p><strong>缺点：</strong>没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</p><p><strong>应用场景：</strong> 1.配置文件访问类，不用每次使用时都new一个 2.数据库连接池 保证项目中只有一个连接池存在。</p><h3 id=\"2-2-单利模式实现\"><a href=\"#2-2-单利模式实现\" class=\"headerlink\" title=\"2.2 单利模式实现\"></a>2.2 单利模式实现</h3><h4 id=\"1-饿汉式\"><a href=\"#1-饿汉式\" class=\"headerlink\" title=\"1. 饿汉式\"></a>1. 饿汉式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"comment\">//类变量在类准备阶段就初始化了然后放在&lt;clinit&gt;构造方法中</span></span><br><span class=\"line\">    <span class=\"comment\">//一旦外部调用了静态方法，那么就会初始化完成。</span></span><br><span class=\"line\">    <span class=\"comment\">//一个类的&lt;clinit&gt;只会执行一次</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span> <span class=\"params\">()</span></span>&#123;&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">   　　 <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>这种方式实现的单例：类加载时就创建实例。由<code>classloder</code>保证了线程安全。</p><h4 id=\"2-静态内部类\"><a href=\"#2-静态内部类\" class=\"headerlink\" title=\"2. 静态内部类\"></a>2. 静态内部类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton INSTANCE = <span class=\"keyword\">new</span> Singleton();  </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span> <span class=\"params\">()</span></span>&#123;&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    　　<span class=\"keyword\">return</span> SingletonHolder.INSTANCE;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>这种方式实现的单例：实现了<code>lazy loading</code> 使用时才创建实例，由<code>classloder</code>保证了线程安全。</p><p><strong>饿汉式/静态内部类是如何保证线程安全的：</strong></p><p>在《深入理解JAVA虚拟机》中，有这么一句话:</p><blockquote><p>虚拟机会保证一个类的<code>&lt;clinit&gt;()</code>方法在多线程环境中被正确地加锁、同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的<code>&lt;clinit&gt;()</code>方法，其他线程都需要阻塞等待，直到活动线程执行<code>&lt;clinit&gt;()</code>方法完毕。</p></blockquote><h4 id=\"3-懒汉式\"><a href=\"#3-懒汉式\" class=\"headerlink\" title=\"3. 懒汉式\"></a>3. 懒汉式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span> <span class=\"params\">()</span></span>&#123;&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">        instance = <span class=\"keyword\">new</span> Singleton();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">   　　 <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>这种方式实现的单例：实现了<code>lazy loading</code> 使用时才创建实例。<code>synchronized</code>保证了线程安全，但效率低。</p><h4 id=\"4-双重校验锁\"><a href=\"#4-双重校验锁\" class=\"headerlink\" title=\"4. 双重校验锁\"></a>4. 双重校验锁</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> Singleton singleton;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">singleton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (singleton == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (Singleton.class) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (singleton == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    singleton = <span class=\"keyword\">new</span> Singleton();<span class=\"comment\">//非原子操作</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//singleton = new Singleton(); 非原子操作 分为三步</span></span><br><span class=\"line\"><span class=\"comment\">// 1.给singleton分配内存</span></span><br><span class=\"line\"><span class=\"comment\">// 2.调用 Singleton 的构造函数来初始化成员变量</span></span><br><span class=\"line\"><span class=\"comment\">// 3.将给singleton对象指向分配的内存空间（此时singleton才不为null）</span></span><br><span class=\"line\"><span class=\"comment\">// 指令重排序--&gt;执行命令时虚拟机可能会对以上3个步骤交换位置 最后可能是132这种 分配内存并修改指针后未初始化 多线程获取时可能会出现问题。</span></span><br><span class=\"line\"><span class=\"comment\">//volatile关键字会禁止指令重排序 即可避免这种问题。</span></span><br></pre></td></tr></table></figure><p>这种方式实现的单例：实现了<code>lazy loading</code> 使用时才创建实例。<code>synchronized</code>保证了线程安全，<code>volatile</code>禁止指令重排序保证了多线程获取时不为空。但要JDK1.5以上才行。</p><h4 id=\"5-枚举\"><a href=\"#5-枚举\" class=\"headerlink\" title=\"5. 枚举\"></a>5. 枚举</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Singleton &#123;</span><br><span class=\"line\">\t <span class=\"comment\">//定义一个枚举的元素，它就是 Singleton 的一个实例</span></span><br><span class=\"line\">    INSTANCE;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomeThing</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">\t     System.out.println(<span class=\"string\">\"枚举方法实现单例\"</span>);</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSingleton singleton = Singleton.INSTANCE;</span><br><span class=\"line\">\t\tsingleton.doSomeThing();<span class=\"comment\">//output:枚举方法实现单例</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>这种方式也是《Effective Java 》以及《Java与模式》的作者推荐的方式，不过工作中却很少看到用。</p><h2 id=\"3-性能测试\"><a href=\"#3-性能测试\" class=\"headerlink\" title=\"3. 性能测试\"></a>3. 性能测试</h2><p>五种单例实现方式，在100个线程下，每个线程访问1千万次实例的用时.</p><table><thead><tr><th>Tables</th><th>实现方式</th><th>用时(毫秒)</th></tr></thead><tbody><tr><td>1</td><td>饿汉式</td><td>13</td></tr><tr><td>2</td><td>懒汉式</td><td>10778</td></tr><tr><td>3</td><td>双重检查</td><td>15</td></tr><tr><td>4</td><td>静态内部类</td><td>14</td></tr><tr><td>5</td><td>枚举</td><td>12</td></tr></tbody></table><p>(*注意:由于不同电脑之间的性能差异，测试的结果可能不同)</p><p>根据不同场合选择具体的实现方式，一般情况下我是使用的<strong>静态内部类</strong>或者<strong>DCL双重校验锁</strong>方式。</p><h2 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h2><p><strong>为什么要使用单例模式？什么场景适合使用单例模式?单例模式有什么好处</strong></p><ul><li>1.单例模式能够保证一个类仅有唯一的实例，避免创建多个实例。并提供一个全局访问点，优化和共享资源访问。</li><li>2.当一个对象需要频繁创建和销毁时使用单例模式能节省系统资源。</li></ul><p><strong>应用场景：</strong></p><ul><li><p>1.配置文件访问类，不用每次使用时都new一个</p></li><li><p>2.数据库连接池 保证项目中只有一个连接池存在。</p></li></ul><p><strong>单例模式的缺点：</strong></p><ul><li>单例模式一般没有接口，扩展很困难，若要扩展只能修改代码。</li></ul><h2 id=\"5-参考\"><a href=\"#5-参考\" class=\"headerlink\" title=\"5. 参考\"></a>5. 参考</h2><p><a href=\"https://blog.csdn.net/qq_22706515/article/details/74202814\" target=\"_blank\" rel=\"noopener\">单例模式性能分析</a></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Fri Jan 04 2019 18:24:57 GMT+0800 (GMT+08:00) --><p>本文主要介绍了设计模式的六大原则，并结合实例描述了各种单例模式的具体实现和性能分析测试。包括：<code>饿汉式</code>、<code>静态内部类</code>、<code>懒汉式</code>、<code>双重校验锁</code>、<code>枚举</code>等。</p>","more":"<blockquote><p>设计模式系列文章</p><p><a href=\"https://www.lixueduan.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/\">Java23种设计模式</a></p></blockquote><h2 id=\"1-设计模式的六大原则\"><a href=\"#1-设计模式的六大原则\" class=\"headerlink\" title=\"1. 设计模式的六大原则\"></a>1. 设计模式的六大原则</h2><p><strong>1、开闭原则（Open Close Principle）</strong></p><blockquote><p>开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。</p></blockquote><p><strong>2、里氏代换原则（Liskov Substitution Principle）</strong></p><blockquote><p>其官方描述比较抽象，可自行百度。实际上可以这样理解：</p><p>（1）子类的能力必须大于等于父类，即父类可以使用的方法，子类都可以使用。</p><p>（2）返回值也是同样的道理。假设一个父类方法返回一个List，子类返回一个ArrayList，这当然可以。如果父类方法返回一个ArrayList，子类返回一个List，就说不通了。这里子类返回值的能力是比父类小的。</p><p>（3）还有抛出异常的情况。任何子类方法可以声明抛出父类方法声明异常的子类。而不能声明抛出父类没有声明的异常。</p></blockquote><p><strong>3、依赖倒转原则（Dependence Inversion Principle）</strong></p><blockquote><p>这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。</p></blockquote><p><strong>4、接口隔离原则（Interface Segregation Principle）</strong></p><blockquote><p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。</p></blockquote><p><strong>5、迪米特法则（最少知道原则）（Demeter Principle）</strong></p><blockquote><p>为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。</p></blockquote><p><strong>6、合成复用原则（Composite Reuse Principle）</strong></p><blockquote><p>原则是尽量使用合成/聚合的方式，而不是使用继承。</p></blockquote><p>Java 中一般认为有 23 种设计模式，总体来说设计模式分为三大类：</p><p><code>创建型模式</code>，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</p><p><code>结构型模式</code>，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</p><p><code>行为型模式</code>，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录</p><p>模式、状态模式、访问者模式、中介者模式、解释器模式。</p><p>比较常用的有：工厂方法模式、抽象工厂模式、单例模式、建造者模式、适配器模式、代理模式、享元模式、策略模式、观察者模式。</p><h2 id=\"2-单例模式\"><a href=\"#2-单例模式\" class=\"headerlink\" title=\"2. 单例模式\"></a>2. 单例模式</h2><h3 id=\"2-1-单利模式介绍\"><a href=\"#2-1-单利模式介绍\" class=\"headerlink\" title=\"2.1 单利模式介绍\"></a>2.1 单利模式介绍</h3><p><strong>作用：</strong>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><p><strong>主要解决：</strong>一个全局使用的类频繁地创建与销毁。</p><p><strong>优点：</strong> 1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例。 2、避免对资源的多重占用（比如写文件操作）。</p><p><strong>缺点：</strong>没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</p><p><strong>应用场景：</strong> 1.配置文件访问类，不用每次使用时都new一个 2.数据库连接池 保证项目中只有一个连接池存在。</p><h3 id=\"2-2-单利模式实现\"><a href=\"#2-2-单利模式实现\" class=\"headerlink\" title=\"2.2 单利模式实现\"></a>2.2 单利模式实现</h3><h4 id=\"1-饿汉式\"><a href=\"#1-饿汉式\" class=\"headerlink\" title=\"1. 饿汉式\"></a>1. 饿汉式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"comment\">//类变量在类准备阶段就初始化了然后放在&lt;clinit&gt;构造方法中</span></span><br><span class=\"line\">    <span class=\"comment\">//一旦外部调用了静态方法，那么就会初始化完成。</span></span><br><span class=\"line\">    <span class=\"comment\">//一个类的&lt;clinit&gt;只会执行一次</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span> <span class=\"params\">()</span></span>&#123;&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">   　　 <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>这种方式实现的单例：类加载时就创建实例。由<code>classloder</code>保证了线程安全。</p><h4 id=\"2-静态内部类\"><a href=\"#2-静态内部类\" class=\"headerlink\" title=\"2. 静态内部类\"></a>2. 静态内部类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton INSTANCE = <span class=\"keyword\">new</span> Singleton();  </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span> <span class=\"params\">()</span></span>&#123;&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    　　<span class=\"keyword\">return</span> SingletonHolder.INSTANCE;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>这种方式实现的单例：实现了<code>lazy loading</code> 使用时才创建实例，由<code>classloder</code>保证了线程安全。</p><p><strong>饿汉式/静态内部类是如何保证线程安全的：</strong></p><p>在《深入理解JAVA虚拟机》中，有这么一句话:</p><blockquote><p>虚拟机会保证一个类的<code>&lt;clinit&gt;()</code>方法在多线程环境中被正确地加锁、同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的<code>&lt;clinit&gt;()</code>方法，其他线程都需要阻塞等待，直到活动线程执行<code>&lt;clinit&gt;()</code>方法完毕。</p></blockquote><h4 id=\"3-懒汉式\"><a href=\"#3-懒汉式\" class=\"headerlink\" title=\"3. 懒汉式\"></a>3. 懒汉式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span> <span class=\"params\">()</span></span>&#123;&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">        instance = <span class=\"keyword\">new</span> Singleton();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">   　　 <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>这种方式实现的单例：实现了<code>lazy loading</code> 使用时才创建实例。<code>synchronized</code>保证了线程安全，但效率低。</p><h4 id=\"4-双重校验锁\"><a href=\"#4-双重校验锁\" class=\"headerlink\" title=\"4. 双重校验锁\"></a>4. 双重校验锁</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> Singleton singleton;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">singleton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (singleton == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (Singleton.class) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (singleton == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    singleton = <span class=\"keyword\">new</span> Singleton();<span class=\"comment\">//非原子操作</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//singleton = new Singleton(); 非原子操作 分为三步</span></span><br><span class=\"line\"><span class=\"comment\">// 1.给singleton分配内存</span></span><br><span class=\"line\"><span class=\"comment\">// 2.调用 Singleton 的构造函数来初始化成员变量</span></span><br><span class=\"line\"><span class=\"comment\">// 3.将给singleton对象指向分配的内存空间（此时singleton才不为null）</span></span><br><span class=\"line\"><span class=\"comment\">// 指令重排序--&gt;执行命令时虚拟机可能会对以上3个步骤交换位置 最后可能是132这种 分配内存并修改指针后未初始化 多线程获取时可能会出现问题。</span></span><br><span class=\"line\"><span class=\"comment\">//volatile关键字会禁止指令重排序 即可避免这种问题。</span></span><br></pre></td></tr></table></figure><p>这种方式实现的单例：实现了<code>lazy loading</code> 使用时才创建实例。<code>synchronized</code>保证了线程安全，<code>volatile</code>禁止指令重排序保证了多线程获取时不为空。但要JDK1.5以上才行。</p><h4 id=\"5-枚举\"><a href=\"#5-枚举\" class=\"headerlink\" title=\"5. 枚举\"></a>5. 枚举</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Singleton &#123;</span><br><span class=\"line\">\t <span class=\"comment\">//定义一个枚举的元素，它就是 Singleton 的一个实例</span></span><br><span class=\"line\">    INSTANCE;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomeThing</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">\t     System.out.println(<span class=\"string\">\"枚举方法实现单例\"</span>);</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSingleton singleton = Singleton.INSTANCE;</span><br><span class=\"line\">\t\tsingleton.doSomeThing();<span class=\"comment\">//output:枚举方法实现单例</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>这种方式也是《Effective Java 》以及《Java与模式》的作者推荐的方式，不过工作中却很少看到用。</p><h2 id=\"3-性能测试\"><a href=\"#3-性能测试\" class=\"headerlink\" title=\"3. 性能测试\"></a>3. 性能测试</h2><p>五种单例实现方式，在100个线程下，每个线程访问1千万次实例的用时.</p><table><thead><tr><th>Tables</th><th>实现方式</th><th>用时(毫秒)</th></tr></thead><tbody><tr><td>1</td><td>饿汉式</td><td>13</td></tr><tr><td>2</td><td>懒汉式</td><td>10778</td></tr><tr><td>3</td><td>双重检查</td><td>15</td></tr><tr><td>4</td><td>静态内部类</td><td>14</td></tr><tr><td>5</td><td>枚举</td><td>12</td></tr></tbody></table><p>(*注意:由于不同电脑之间的性能差异，测试的结果可能不同)</p><p>根据不同场合选择具体的实现方式，一般情况下我是使用的<strong>静态内部类</strong>或者<strong>DCL双重校验锁</strong>方式。</p><h2 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h2><p><strong>为什么要使用单例模式？什么场景适合使用单例模式?单例模式有什么好处</strong></p><ul><li>1.单例模式能够保证一个类仅有唯一的实例，避免创建多个实例。并提供一个全局访问点，优化和共享资源访问。</li><li>2.当一个对象需要频繁创建和销毁时使用单例模式能节省系统资源。</li></ul><p><strong>应用场景：</strong></p><ul><li><p>1.配置文件访问类，不用每次使用时都new一个</p></li><li><p>2.数据库连接池 保证项目中只有一个连接池存在。</p></li></ul><p><strong>单例模式的缺点：</strong></p><ul><li>单例模式一般没有接口，扩展很困难，若要扩展只能修改代码。</li></ul><h2 id=\"5-参考\"><a href=\"#5-参考\" class=\"headerlink\" title=\"5. 参考\"></a>5. 参考</h2><p><a href=\"https://blog.csdn.net/qq_22706515/article/details/74202814\" target=\"_blank\" rel=\"noopener\">单例模式性能分析</a></p><!-- rebuild by neat -->"},{"title":"计算机网络(四)--HTTP与HTTPS","abbrlink":21307,"date":"2018-11-12T14:00:00.000Z","_content":"\n本文主要介绍了`HTTP`、`HTTPS`的基本概念及两者的区别，`HTTPS`的工作原理及优缺点，最后介绍了HTTP的响应状态码。\n\n<!--more-->\n\n> 计算机网络系列文章\n>\n> - [计算机网络(一)--OSI七层模型](https://www.lixueduan.com/computer-network/one-network-model/)\n> - [计算机网络(二)--TCP三次握手四次挥手](https://www.lixueduan.com/computer-network/two-tcp-connection/)\n> - [计算机网络(三)--TCP如何保证传输可靠性](https://www.lixueduan.com/computer-network/three-tcp-reliability/)\n> - [计算机网络(四)--HTTP与HTTPS](https://www.lixueduan.com/computer-network/four-http-https/)\n> - [计算机网络(五)--从输入URL到页面加载的过程中发生了什么](计算机网络(五)--从输入URL到页面加载的过程中发生了什么)\n\n## 1. HTTP和HTTPS基本概念\n\n　　HTTP：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。\n\n　　HTTPS：是以**安全**为目标的HTTP通道，简单讲是**HTTP的安全版**，即HTTP下加入**SSL层**，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。\n\n```java\nHTTP--> HTTP-->TCP-->IP\nHTTPS-> HTTP-->SSL-->TCP-->IP\n```\n\n　　HTTPS协议的**主要作用**：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。\n\n## 2. HTTP与HTTPS的区别\n\n　　HTTP协议传输的数据都是未加密的，也就是明文的，因此使用**HTTP协议传输隐私信息非常不安全**，为了保证这些隐私数据能加密传输，于是网景公司设计了SSL（Secure Sockets Layer）协议用于对HTTP协议传输的数据进行加密，从而就诞生了HTTPS。简单来说，**HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比HTTP协议安全**。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/https-key-lvalue.jpg)\n\n　　**HTTPS和HTTP的区别:**\n\n　　1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。\n\n　　2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。\n\n　　3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。\n\n　　4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。\n\n## 3. HTTPS工作原理\n\n　　我们都知道HTTPS能够加密信息，以免敏感信息被第三方获取，所以很多银行网站或电子邮箱等等安全级别较高的服务都会采用HTTPS协议。\n\n**SSL协议的握手过程**\n\n分为五个步骤:\n\n第一步，客户端给出SSL协议版本号、一个客户端生成的随机数1（Client random），以及客户端支持的加密方法。\n\n第二步，服务端根据客服端支持的加密方法选出双方使用的加密方法，并给出数字证书、以及一个服务器生成的随机数2（Server random）。\n\n第三步，客户端确认数字证书有效，然后生成一个新的随机数3（Premaster secret），并使用数字证书中的公钥，加密这个随机数，发给服务端。\n\n第四步，服务端使用自己的私钥，获取客户端发来的随机数3（即Premaster secret）。到这里双方都拥有三个随机数了，为什么要使用三个随机数呢？这是因为 SSL/TLS 握手过程的数据都是明文传输的，并且多个随机数种子来生成秘钥不容易被暴力破解出来。 \n\n第五步，客户端和服务端根据约定的加密方法，使用前面的三个随机数，生成\"对话密钥\"（session key），用来加密接下来的整个对话过程。\n\n第六步，客户端将前面的握手消息生成摘要再用协商好的秘钥加密，这是客户端发出的第一条加密消息。服务端接收后会用秘钥解密，能解出来说明前面协商出来的秘钥是一致的。 \n\n第七步，服务端也会将握手过程的消息生成摘要再用秘钥加密，这是服务端发出的第一条加密消息。客户端接收后会用秘钥解密，能解出来说明协商的秘钥是一致的。 \n\n到这里，双方已安全地协商出了同一份秘钥，所有的应用层数据都会用这个秘钥加密后再通过 TCP 进行可靠传输。 \n\n  ![https握手过程](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/https-ssl-connection.png)\n\n## 4. HTTPS的优缺点\n\n　　**优点:**\n\n　　（1）使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；\n\n　　（2）HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。\n\n　　（3）HTTPS是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。\n\n　　（4）谷歌曾在2014年8月份调整搜索引擎算法，并称“比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中的排名将会更高”\n\n　　**缺点:**\n\n　　（1）HTTPS协议握手阶段比较费时，会使页面的加载时间延长近50%，增加10%到20%的耗电；\n\n　　（2）HTTPS连接缓存不如HTTP高效，会增加数据开销和功耗，甚至已有的安全措施也会因此而受到影响；\n\n　　（3）SSL证书需要钱，功能越强大的证书费用越高，个人网站、小网站没有必要一般不会用。\n\n　   （4）SSL证书通常需要绑定IP，不能在同一IP上绑定多个域名，IPv4资源不可能支撑这个消耗。\n\n　　（5）HTTPS协议的加密范围也比较有限，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用。最关键的，SSL证书的信用链体系并不安全，特别是在某些国家可以控制CA根证书的情况下，中间人攻击一样可行。\n\n## 5. HTTP响应状态码\n\n状态码以3位数字和原因短语组成，例如 200 OK 。\n\n数字的第一位指定了响应类型，后两位无分类。响应类别一共有5种：\n\n- 1XX Informational(信息性状态码)\n- 2XX Success(成功状态码)\n- 3XX Redirection(重定向状态码)\n- 4XX Client Error(客户端错误状态码)\n- 5XX Server Error(服务器错误状态码)\n\n```java\n200：请求成功      处理方式：获得响应的内容，进行处理 \n\n201：请求完成，结果是创建了新资源。新创建资源的URI可在响应的实体中得到    处理方式：爬虫中不会遇到 \n\n202：请求被接受，但处理尚未完成    处理方式：阻塞等待 \n\n204：服务器端已经实现了请求，但是没有返回新的信 息。如果客户是用户代理，则无须为此更新自身的文档视图。    处理方式：丢弃\n\n300：该状态码不被HTTP/1.0的应用程序直接使用， 只是作为3XX类型回应的默认解释。存在多个可用的被请求资源。    处理方式：若程序中能够处理，则进行进一步处理，如果程序中不能处理，则丢弃\n301：请求到的资源都会分配一个永久的URL，这样就可以在将来通过该URL来访问此资源    处理方式：重定向到分配的URL\n302：请求到的资源在一个不同的URL处临时保存     处理方式：重定向到临时的URL \n\n304 请求的资源未更新     处理方式：丢弃 \n\n400 非法请求     处理方式：丢弃 \n\n401 未授权     处理方式：丢弃 \n\n403 禁止     处理方式：丢弃 \n\n404 没有找到     处理方式：丢弃 \n\n5XX 回应代码以“5”开头的状态码表示服务器端发现自己出现错误，不能继续执行请求    处理方式：丢弃\n```\n\n## 6. HTTP长连接、短连接\n\n在HTTP/1.0中默认使用短连接。也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个HTML或其他类型的Web页中包含有其他的Web资源（如JavaScript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话。\n\n而从HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入这行代码：\n\n```\nConnection:keep-alive\n```\n\n在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。\n\n**HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。**\n\n**https加密是在传输层** \n\nhttps报文在被包装成tcp报文的时候完成加密的过程，无论是https的**header域**也好，body域也罢都是会被加密的。\n\n当使用**tcpdump或者wireshark**之类的tcp层工具抓包，获取是加密的内容，而如果用应用层抓包，使用**Charels(Mac)、Fildder(Windows)**抓包工具，那当然看到是明文的。\n\n## 7. 参考\n\n`https://www.cnblogs.com/qiangxia/p/5261813.html`\n\n`https://www.cnblogs.com/wqhwe/p/5407468.html`\n\n`http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html`","source":"_posts/computer-network/four-http-https.md","raw":"---\ntitle: 计算机网络(四)--HTTP与HTTPS\ntags:\n  - 计算机网络\n  - HTTP\ncategories:\n  - 计算机网络\nabbrlink: 21307\ndate: 2018-11-12 22:00:00\n---\n\n本文主要介绍了`HTTP`、`HTTPS`的基本概念及两者的区别，`HTTPS`的工作原理及优缺点，最后介绍了HTTP的响应状态码。\n\n<!--more-->\n\n> 计算机网络系列文章\n>\n> - [计算机网络(一)--OSI七层模型](https://www.lixueduan.com/computer-network/one-network-model/)\n> - [计算机网络(二)--TCP三次握手四次挥手](https://www.lixueduan.com/computer-network/two-tcp-connection/)\n> - [计算机网络(三)--TCP如何保证传输可靠性](https://www.lixueduan.com/computer-network/three-tcp-reliability/)\n> - [计算机网络(四)--HTTP与HTTPS](https://www.lixueduan.com/computer-network/four-http-https/)\n> - [计算机网络(五)--从输入URL到页面加载的过程中发生了什么](计算机网络(五)--从输入URL到页面加载的过程中发生了什么)\n\n## 1. HTTP和HTTPS基本概念\n\n　　HTTP：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。\n\n　　HTTPS：是以**安全**为目标的HTTP通道，简单讲是**HTTP的安全版**，即HTTP下加入**SSL层**，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。\n\n```java\nHTTP--> HTTP-->TCP-->IP\nHTTPS-> HTTP-->SSL-->TCP-->IP\n```\n\n　　HTTPS协议的**主要作用**：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。\n\n## 2. HTTP与HTTPS的区别\n\n　　HTTP协议传输的数据都是未加密的，也就是明文的，因此使用**HTTP协议传输隐私信息非常不安全**，为了保证这些隐私数据能加密传输，于是网景公司设计了SSL（Secure Sockets Layer）协议用于对HTTP协议传输的数据进行加密，从而就诞生了HTTPS。简单来说，**HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比HTTP协议安全**。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/https-key-lvalue.jpg)\n\n　　**HTTPS和HTTP的区别:**\n\n　　1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。\n\n　　2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。\n\n　　3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。\n\n　　4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。\n\n## 3. HTTPS工作原理\n\n　　我们都知道HTTPS能够加密信息，以免敏感信息被第三方获取，所以很多银行网站或电子邮箱等等安全级别较高的服务都会采用HTTPS协议。\n\n**SSL协议的握手过程**\n\n分为五个步骤:\n\n第一步，客户端给出SSL协议版本号、一个客户端生成的随机数1（Client random），以及客户端支持的加密方法。\n\n第二步，服务端根据客服端支持的加密方法选出双方使用的加密方法，并给出数字证书、以及一个服务器生成的随机数2（Server random）。\n\n第三步，客户端确认数字证书有效，然后生成一个新的随机数3（Premaster secret），并使用数字证书中的公钥，加密这个随机数，发给服务端。\n\n第四步，服务端使用自己的私钥，获取客户端发来的随机数3（即Premaster secret）。到这里双方都拥有三个随机数了，为什么要使用三个随机数呢？这是因为 SSL/TLS 握手过程的数据都是明文传输的，并且多个随机数种子来生成秘钥不容易被暴力破解出来。 \n\n第五步，客户端和服务端根据约定的加密方法，使用前面的三个随机数，生成\"对话密钥\"（session key），用来加密接下来的整个对话过程。\n\n第六步，客户端将前面的握手消息生成摘要再用协商好的秘钥加密，这是客户端发出的第一条加密消息。服务端接收后会用秘钥解密，能解出来说明前面协商出来的秘钥是一致的。 \n\n第七步，服务端也会将握手过程的消息生成摘要再用秘钥加密，这是服务端发出的第一条加密消息。客户端接收后会用秘钥解密，能解出来说明协商的秘钥是一致的。 \n\n到这里，双方已安全地协商出了同一份秘钥，所有的应用层数据都会用这个秘钥加密后再通过 TCP 进行可靠传输。 \n\n  ![https握手过程](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/https-ssl-connection.png)\n\n## 4. HTTPS的优缺点\n\n　　**优点:**\n\n　　（1）使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；\n\n　　（2）HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。\n\n　　（3）HTTPS是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。\n\n　　（4）谷歌曾在2014年8月份调整搜索引擎算法，并称“比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中的排名将会更高”\n\n　　**缺点:**\n\n　　（1）HTTPS协议握手阶段比较费时，会使页面的加载时间延长近50%，增加10%到20%的耗电；\n\n　　（2）HTTPS连接缓存不如HTTP高效，会增加数据开销和功耗，甚至已有的安全措施也会因此而受到影响；\n\n　　（3）SSL证书需要钱，功能越强大的证书费用越高，个人网站、小网站没有必要一般不会用。\n\n　   （4）SSL证书通常需要绑定IP，不能在同一IP上绑定多个域名，IPv4资源不可能支撑这个消耗。\n\n　　（5）HTTPS协议的加密范围也比较有限，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用。最关键的，SSL证书的信用链体系并不安全，特别是在某些国家可以控制CA根证书的情况下，中间人攻击一样可行。\n\n## 5. HTTP响应状态码\n\n状态码以3位数字和原因短语组成，例如 200 OK 。\n\n数字的第一位指定了响应类型，后两位无分类。响应类别一共有5种：\n\n- 1XX Informational(信息性状态码)\n- 2XX Success(成功状态码)\n- 3XX Redirection(重定向状态码)\n- 4XX Client Error(客户端错误状态码)\n- 5XX Server Error(服务器错误状态码)\n\n```java\n200：请求成功      处理方式：获得响应的内容，进行处理 \n\n201：请求完成，结果是创建了新资源。新创建资源的URI可在响应的实体中得到    处理方式：爬虫中不会遇到 \n\n202：请求被接受，但处理尚未完成    处理方式：阻塞等待 \n\n204：服务器端已经实现了请求，但是没有返回新的信 息。如果客户是用户代理，则无须为此更新自身的文档视图。    处理方式：丢弃\n\n300：该状态码不被HTTP/1.0的应用程序直接使用， 只是作为3XX类型回应的默认解释。存在多个可用的被请求资源。    处理方式：若程序中能够处理，则进行进一步处理，如果程序中不能处理，则丢弃\n301：请求到的资源都会分配一个永久的URL，这样就可以在将来通过该URL来访问此资源    处理方式：重定向到分配的URL\n302：请求到的资源在一个不同的URL处临时保存     处理方式：重定向到临时的URL \n\n304 请求的资源未更新     处理方式：丢弃 \n\n400 非法请求     处理方式：丢弃 \n\n401 未授权     处理方式：丢弃 \n\n403 禁止     处理方式：丢弃 \n\n404 没有找到     处理方式：丢弃 \n\n5XX 回应代码以“5”开头的状态码表示服务器端发现自己出现错误，不能继续执行请求    处理方式：丢弃\n```\n\n## 6. HTTP长连接、短连接\n\n在HTTP/1.0中默认使用短连接。也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个HTML或其他类型的Web页中包含有其他的Web资源（如JavaScript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话。\n\n而从HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入这行代码：\n\n```\nConnection:keep-alive\n```\n\n在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。\n\n**HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。**\n\n**https加密是在传输层** \n\nhttps报文在被包装成tcp报文的时候完成加密的过程，无论是https的**header域**也好，body域也罢都是会被加密的。\n\n当使用**tcpdump或者wireshark**之类的tcp层工具抓包，获取是加密的内容，而如果用应用层抓包，使用**Charels(Mac)、Fildder(Windows)**抓包工具，那当然看到是明文的。\n\n## 7. 参考\n\n`https://www.cnblogs.com/qiangxia/p/5261813.html`\n\n`https://www.cnblogs.com/wqhwe/p/5407468.html`\n\n`http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html`","slug":"computer-network/four-http-https","published":1,"updated":"2019-01-03T10:29:16.255Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqhw7t8z001bwkw4ah3qnnyo","content":"<!-- build time:Fri Jan 04 2019 18:24:57 GMT+0800 (GMT+08:00) --><p>本文主要介绍了<code>HTTP</code>、<code>HTTPS</code>的基本概念及两者的区别，<code>HTTPS</code>的工作原理及优缺点，最后介绍了HTTP的响应状态码。</p><a id=\"more\"></a><blockquote><p>计算机网络系列文章</p><ul><li><a href=\"https://www.lixueduan.com/computer-network/one-network-model/\">计算机网络(一)–OSI七层模型</a></li><li><a href=\"https://www.lixueduan.com/computer-network/two-tcp-connection/\">计算机网络(二)–TCP三次握手四次挥手</a></li><li><a href=\"https://www.lixueduan.com/computer-network/three-tcp-reliability/\">计算机网络(三)–TCP如何保证传输可靠性</a></li><li><a href=\"https://www.lixueduan.com/computer-network/four-http-https/\">计算机网络(四)–HTTP与HTTPS</a></li><li><a href=\"计算机网络(五\">计算机网络(五)–从输入URL到页面加载的过程中发生了什么</a>–从输入URL到页面加载的过程中发生了什么)</li></ul></blockquote><h2 id=\"1-HTTP和HTTPS基本概念\"><a href=\"#1-HTTP和HTTPS基本概念\" class=\"headerlink\" title=\"1. HTTP和HTTPS基本概念\"></a>1. HTTP和HTTPS基本概念</h2><p>HTTP：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。</p><p>HTTPS：是以<strong>安全</strong>为目标的HTTP通道，简单讲是<strong>HTTP的安全版</strong>，即HTTP下加入<strong>SSL层</strong>，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP--&gt; HTTP--&gt;TCP--&gt;IP</span><br><span class=\"line\">HTTPS-&gt; HTTP--&gt;SSL--&gt;TCP--&gt;IP</span><br></pre></td></tr></table></figure><p>HTTPS协议的<strong>主要作用</strong>：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。</p><h2 id=\"2-HTTP与HTTPS的区别\"><a href=\"#2-HTTP与HTTPS的区别\" class=\"headerlink\" title=\"2. HTTP与HTTPS的区别\"></a>2. HTTP与HTTPS的区别</h2><p>HTTP协议传输的数据都是未加密的，也就是明文的，因此使用<strong>HTTP协议传输隐私信息非常不安全</strong>，为了保证这些隐私数据能加密传输，于是网景公司设计了SSL（Secure Sockets Layer）协议用于对HTTP协议传输的数据进行加密，从而就诞生了HTTPS。简单来说，<strong>HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比HTTP协议安全</strong>。</p><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/https-key-lvalue.jpg\" alt=\"\"></p><p><strong>HTTPS和HTTP的区别:</strong></p><p>1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。</p><p>2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</p><p>3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</p><p>4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p><h2 id=\"3-HTTPS工作原理\"><a href=\"#3-HTTPS工作原理\" class=\"headerlink\" title=\"3. HTTPS工作原理\"></a>3. HTTPS工作原理</h2><p>我们都知道HTTPS能够加密信息，以免敏感信息被第三方获取，所以很多银行网站或电子邮箱等等安全级别较高的服务都会采用HTTPS协议。</p><p><strong>SSL协议的握手过程</strong></p><p>分为五个步骤:</p><p>第一步，客户端给出SSL协议版本号、一个客户端生成的随机数1（Client random），以及客户端支持的加密方法。</p><p>第二步，服务端根据客服端支持的加密方法选出双方使用的加密方法，并给出数字证书、以及一个服务器生成的随机数2（Server random）。</p><p>第三步，客户端确认数字证书有效，然后生成一个新的随机数3（Premaster secret），并使用数字证书中的公钥，加密这个随机数，发给服务端。</p><p>第四步，服务端使用自己的私钥，获取客户端发来的随机数3（即Premaster secret）。到这里双方都拥有三个随机数了，为什么要使用三个随机数呢？这是因为 SSL/TLS 握手过程的数据都是明文传输的，并且多个随机数种子来生成秘钥不容易被暴力破解出来。</p><p>第五步，客户端和服务端根据约定的加密方法，使用前面的三个随机数，生成”对话密钥”（session key），用来加密接下来的整个对话过程。</p><p>第六步，客户端将前面的握手消息生成摘要再用协商好的秘钥加密，这是客户端发出的第一条加密消息。服务端接收后会用秘钥解密，能解出来说明前面协商出来的秘钥是一致的。</p><p>第七步，服务端也会将握手过程的消息生成摘要再用秘钥加密，这是服务端发出的第一条加密消息。客户端接收后会用秘钥解密，能解出来说明协商的秘钥是一致的。</p><p>到这里，双方已安全地协商出了同一份秘钥，所有的应用层数据都会用这个秘钥加密后再通过 TCP 进行可靠传输。</p><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/https-ssl-connection.png\" alt=\"https握手过程\"></p><h2 id=\"4-HTTPS的优缺点\"><a href=\"#4-HTTPS的优缺点\" class=\"headerlink\" title=\"4. HTTPS的优缺点\"></a>4. HTTPS的优缺点</h2><p><strong>优点:</strong></p><p>（1）使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；</p><p>（2）HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。</p><p>（3）HTTPS是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。</p><p>（4）谷歌曾在2014年8月份调整搜索引擎算法，并称“比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中的排名将会更高”</p><p><strong>缺点:</strong></p><p>（1）HTTPS协议握手阶段比较费时，会使页面的加载时间延长近50%，增加10%到20%的耗电；</p><p>（2）HTTPS连接缓存不如HTTP高效，会增加数据开销和功耗，甚至已有的安全措施也会因此而受到影响；</p><p>（3）SSL证书需要钱，功能越强大的证书费用越高，个人网站、小网站没有必要一般不会用。</p><p>（4）SSL证书通常需要绑定IP，不能在同一IP上绑定多个域名，IPv4资源不可能支撑这个消耗。</p><p>（5）HTTPS协议的加密范围也比较有限，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用。最关键的，SSL证书的信用链体系并不安全，特别是在某些国家可以控制CA根证书的情况下，中间人攻击一样可行。</p><h2 id=\"5-HTTP响应状态码\"><a href=\"#5-HTTP响应状态码\" class=\"headerlink\" title=\"5. HTTP响应状态码\"></a>5. HTTP响应状态码</h2><p>状态码以3位数字和原因短语组成，例如 200 OK 。</p><p>数字的第一位指定了响应类型，后两位无分类。响应类别一共有5种：</p><ul><li>1XX Informational(信息性状态码)</li><li>2XX Success(成功状态码)</li><li>3XX Redirection(重定向状态码)</li><li>4XX Client Error(客户端错误状态码)</li><li>5XX Server Error(服务器错误状态码)</li></ul><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">200</span>：请求成功      处理方式：获得响应的内容，进行处理 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">201</span>：请求完成，结果是创建了新资源。新创建资源的URI可在响应的实体中得到    处理方式：爬虫中不会遇到 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">202</span>：请求被接受，但处理尚未完成    处理方式：阻塞等待 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">204</span>：服务器端已经实现了请求，但是没有返回新的信 息。如果客户是用户代理，则无须为此更新自身的文档视图。    处理方式：丢弃</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">300</span>：该状态码不被HTTP/<span class=\"number\">1.0</span>的应用程序直接使用， 只是作为<span class=\"number\">3</span>XX类型回应的默认解释。存在多个可用的被请求资源。    处理方式：若程序中能够处理，则进行进一步处理，如果程序中不能处理，则丢弃</span><br><span class=\"line\"><span class=\"number\">301</span>：请求到的资源都会分配一个永久的URL，这样就可以在将来通过该URL来访问此资源    处理方式：重定向到分配的URL</span><br><span class=\"line\"><span class=\"number\">302</span>：请求到的资源在一个不同的URL处临时保存     处理方式：重定向到临时的URL </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">304</span> 请求的资源未更新     处理方式：丢弃 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">400</span> 非法请求     处理方式：丢弃 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">401</span> 未授权     处理方式：丢弃 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">403</span> 禁止     处理方式：丢弃 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">404</span> 没有找到     处理方式：丢弃 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5</span>XX 回应代码以“<span class=\"number\">5</span>”开头的状态码表示服务器端发现自己出现错误，不能继续执行请求    处理方式：丢弃</span><br></pre></td></tr></table></figure><h2 id=\"6-HTTP长连接、短连接\"><a href=\"#6-HTTP长连接、短连接\" class=\"headerlink\" title=\"6. HTTP长连接、短连接\"></a>6. HTTP长连接、短连接</h2><p>在HTTP/1.0中默认使用短连接。也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个HTML或其他类型的Web页中包含有其他的Web资源（如JavaScript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话。</p><p>而从HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入这行代码：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connection:keep-alive</span><br></pre></td></tr></table></figure><p>在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。</p><p><strong>HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。</strong></p><p><strong>https加密是在传输层</strong></p><p>https报文在被包装成tcp报文的时候完成加密的过程，无论是https的<strong>header域</strong>也好，body域也罢都是会被加密的。</p><p>当使用<strong>tcpdump或者wireshark</strong>之类的tcp层工具抓包，获取是加密的内容，而如果用应用层抓包，使用<strong>Charels(Mac)、Fildder(Windows)</strong>抓包工具，那当然看到是明文的。</p><h2 id=\"7-参考\"><a href=\"#7-参考\" class=\"headerlink\" title=\"7. 参考\"></a>7. 参考</h2><p><code>https://www.cnblogs.com/qiangxia/p/5261813.html</code></p><p><code>https://www.cnblogs.com/wqhwe/p/5407468.html</code></p><p><code>http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html</code></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Fri Jan 04 2019 18:24:57 GMT+0800 (GMT+08:00) --><p>本文主要介绍了<code>HTTP</code>、<code>HTTPS</code>的基本概念及两者的区别，<code>HTTPS</code>的工作原理及优缺点，最后介绍了HTTP的响应状态码。</p>","more":"<blockquote><p>计算机网络系列文章</p><ul><li><a href=\"https://www.lixueduan.com/computer-network/one-network-model/\">计算机网络(一)–OSI七层模型</a></li><li><a href=\"https://www.lixueduan.com/computer-network/two-tcp-connection/\">计算机网络(二)–TCP三次握手四次挥手</a></li><li><a href=\"https://www.lixueduan.com/computer-network/three-tcp-reliability/\">计算机网络(三)–TCP如何保证传输可靠性</a></li><li><a href=\"https://www.lixueduan.com/computer-network/four-http-https/\">计算机网络(四)–HTTP与HTTPS</a></li><li><a href=\"计算机网络(五\">计算机网络(五)–从输入URL到页面加载的过程中发生了什么</a>–从输入URL到页面加载的过程中发生了什么)</li></ul></blockquote><h2 id=\"1-HTTP和HTTPS基本概念\"><a href=\"#1-HTTP和HTTPS基本概念\" class=\"headerlink\" title=\"1. HTTP和HTTPS基本概念\"></a>1. HTTP和HTTPS基本概念</h2><p>HTTP：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。</p><p>HTTPS：是以<strong>安全</strong>为目标的HTTP通道，简单讲是<strong>HTTP的安全版</strong>，即HTTP下加入<strong>SSL层</strong>，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP--&gt; HTTP--&gt;TCP--&gt;IP</span><br><span class=\"line\">HTTPS-&gt; HTTP--&gt;SSL--&gt;TCP--&gt;IP</span><br></pre></td></tr></table></figure><p>HTTPS协议的<strong>主要作用</strong>：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。</p><h2 id=\"2-HTTP与HTTPS的区别\"><a href=\"#2-HTTP与HTTPS的区别\" class=\"headerlink\" title=\"2. HTTP与HTTPS的区别\"></a>2. HTTP与HTTPS的区别</h2><p>HTTP协议传输的数据都是未加密的，也就是明文的，因此使用<strong>HTTP协议传输隐私信息非常不安全</strong>，为了保证这些隐私数据能加密传输，于是网景公司设计了SSL（Secure Sockets Layer）协议用于对HTTP协议传输的数据进行加密，从而就诞生了HTTPS。简单来说，<strong>HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比HTTP协议安全</strong>。</p><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/https-key-lvalue.jpg\" alt=\"\"></p><p><strong>HTTPS和HTTP的区别:</strong></p><p>1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。</p><p>2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</p><p>3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</p><p>4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p><h2 id=\"3-HTTPS工作原理\"><a href=\"#3-HTTPS工作原理\" class=\"headerlink\" title=\"3. HTTPS工作原理\"></a>3. HTTPS工作原理</h2><p>我们都知道HTTPS能够加密信息，以免敏感信息被第三方获取，所以很多银行网站或电子邮箱等等安全级别较高的服务都会采用HTTPS协议。</p><p><strong>SSL协议的握手过程</strong></p><p>分为五个步骤:</p><p>第一步，客户端给出SSL协议版本号、一个客户端生成的随机数1（Client random），以及客户端支持的加密方法。</p><p>第二步，服务端根据客服端支持的加密方法选出双方使用的加密方法，并给出数字证书、以及一个服务器生成的随机数2（Server random）。</p><p>第三步，客户端确认数字证书有效，然后生成一个新的随机数3（Premaster secret），并使用数字证书中的公钥，加密这个随机数，发给服务端。</p><p>第四步，服务端使用自己的私钥，获取客户端发来的随机数3（即Premaster secret）。到这里双方都拥有三个随机数了，为什么要使用三个随机数呢？这是因为 SSL/TLS 握手过程的数据都是明文传输的，并且多个随机数种子来生成秘钥不容易被暴力破解出来。</p><p>第五步，客户端和服务端根据约定的加密方法，使用前面的三个随机数，生成”对话密钥”（session key），用来加密接下来的整个对话过程。</p><p>第六步，客户端将前面的握手消息生成摘要再用协商好的秘钥加密，这是客户端发出的第一条加密消息。服务端接收后会用秘钥解密，能解出来说明前面协商出来的秘钥是一致的。</p><p>第七步，服务端也会将握手过程的消息生成摘要再用秘钥加密，这是服务端发出的第一条加密消息。客户端接收后会用秘钥解密，能解出来说明协商的秘钥是一致的。</p><p>到这里，双方已安全地协商出了同一份秘钥，所有的应用层数据都会用这个秘钥加密后再通过 TCP 进行可靠传输。</p><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/https-ssl-connection.png\" alt=\"https握手过程\"></p><h2 id=\"4-HTTPS的优缺点\"><a href=\"#4-HTTPS的优缺点\" class=\"headerlink\" title=\"4. HTTPS的优缺点\"></a>4. HTTPS的优缺点</h2><p><strong>优点:</strong></p><p>（1）使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；</p><p>（2）HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。</p><p>（3）HTTPS是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。</p><p>（4）谷歌曾在2014年8月份调整搜索引擎算法，并称“比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中的排名将会更高”</p><p><strong>缺点:</strong></p><p>（1）HTTPS协议握手阶段比较费时，会使页面的加载时间延长近50%，增加10%到20%的耗电；</p><p>（2）HTTPS连接缓存不如HTTP高效，会增加数据开销和功耗，甚至已有的安全措施也会因此而受到影响；</p><p>（3）SSL证书需要钱，功能越强大的证书费用越高，个人网站、小网站没有必要一般不会用。</p><p>（4）SSL证书通常需要绑定IP，不能在同一IP上绑定多个域名，IPv4资源不可能支撑这个消耗。</p><p>（5）HTTPS协议的加密范围也比较有限，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用。最关键的，SSL证书的信用链体系并不安全，特别是在某些国家可以控制CA根证书的情况下，中间人攻击一样可行。</p><h2 id=\"5-HTTP响应状态码\"><a href=\"#5-HTTP响应状态码\" class=\"headerlink\" title=\"5. HTTP响应状态码\"></a>5. HTTP响应状态码</h2><p>状态码以3位数字和原因短语组成，例如 200 OK 。</p><p>数字的第一位指定了响应类型，后两位无分类。响应类别一共有5种：</p><ul><li>1XX Informational(信息性状态码)</li><li>2XX Success(成功状态码)</li><li>3XX Redirection(重定向状态码)</li><li>4XX Client Error(客户端错误状态码)</li><li>5XX Server Error(服务器错误状态码)</li></ul><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">200</span>：请求成功      处理方式：获得响应的内容，进行处理 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">201</span>：请求完成，结果是创建了新资源。新创建资源的URI可在响应的实体中得到    处理方式：爬虫中不会遇到 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">202</span>：请求被接受，但处理尚未完成    处理方式：阻塞等待 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">204</span>：服务器端已经实现了请求，但是没有返回新的信 息。如果客户是用户代理，则无须为此更新自身的文档视图。    处理方式：丢弃</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">300</span>：该状态码不被HTTP/<span class=\"number\">1.0</span>的应用程序直接使用， 只是作为<span class=\"number\">3</span>XX类型回应的默认解释。存在多个可用的被请求资源。    处理方式：若程序中能够处理，则进行进一步处理，如果程序中不能处理，则丢弃</span><br><span class=\"line\"><span class=\"number\">301</span>：请求到的资源都会分配一个永久的URL，这样就可以在将来通过该URL来访问此资源    处理方式：重定向到分配的URL</span><br><span class=\"line\"><span class=\"number\">302</span>：请求到的资源在一个不同的URL处临时保存     处理方式：重定向到临时的URL </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">304</span> 请求的资源未更新     处理方式：丢弃 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">400</span> 非法请求     处理方式：丢弃 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">401</span> 未授权     处理方式：丢弃 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">403</span> 禁止     处理方式：丢弃 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">404</span> 没有找到     处理方式：丢弃 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5</span>XX 回应代码以“<span class=\"number\">5</span>”开头的状态码表示服务器端发现自己出现错误，不能继续执行请求    处理方式：丢弃</span><br></pre></td></tr></table></figure><h2 id=\"6-HTTP长连接、短连接\"><a href=\"#6-HTTP长连接、短连接\" class=\"headerlink\" title=\"6. HTTP长连接、短连接\"></a>6. HTTP长连接、短连接</h2><p>在HTTP/1.0中默认使用短连接。也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个HTML或其他类型的Web页中包含有其他的Web资源（如JavaScript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话。</p><p>而从HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入这行代码：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connection:keep-alive</span><br></pre></td></tr></table></figure><p>在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。</p><p><strong>HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。</strong></p><p><strong>https加密是在传输层</strong></p><p>https报文在被包装成tcp报文的时候完成加密的过程，无论是https的<strong>header域</strong>也好，body域也罢都是会被加密的。</p><p>当使用<strong>tcpdump或者wireshark</strong>之类的tcp层工具抓包，获取是加密的内容，而如果用应用层抓包，使用<strong>Charels(Mac)、Fildder(Windows)</strong>抓包工具，那当然看到是明文的。</p><h2 id=\"7-参考\"><a href=\"#7-参考\" class=\"headerlink\" title=\"7. 参考\"></a>7. 参考</h2><p><code>https://www.cnblogs.com/qiangxia/p/5261813.html</code></p><p><code>https://www.cnblogs.com/wqhwe/p/5407468.html</code></p><p><code>http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html</code></p><!-- rebuild by neat -->"},{"title":"计算机网络(五)--从输入URL到页面加载的过程中发生了什么","abbrlink":5863,"date":"2018-11-15T14:00:00.000Z","_content":"\n本文主要对用户从浏览器输入URL到页面加载的这一过程进行了具体分析与叙述。包括：`DNS解析`、`发送HTTP请求`、`TCP连接`、`服务器响应`、`浏览器解析渲染页面`等。\n\n<!--more-->\n\n> 计算机网络系列文章\n>\n> - [计算机网络(一)--OSI七层模型](https://www.lixueduan.com/computer-network/one-network-model/)\n> - [计算机网络(二)--TCP三次握手四次挥手](https://www.lixueduan.com/computer-network/two-tcp-connection/)\n> - [计算机网络(三)--TCP如何保证传输可靠性](https://www.lixueduan.com/computer-network/three-tcp-reliability/)\n> - [计算机网络(四)--HTTP与HTTPS](https://www.lixueduan.com/computer-network/four-http-https/)\n> - [计算机网络(五)--从输入URL到页面加载的过程中发生了什么](计算机网络(五)--从输入URL到页面加载的过程中发生了什么)\n\n总体来说分为以下几个过程:\n\n* 1.DNS解析\n* 2.TCP连接\n* 3.发送HTTP请求\n* 4.服务器处理请求并返回HTTP报文\n* 5.浏览器解析渲染页面\n* 6.连接结束\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcpip-http-relation-about.jpg)\n\n## 1. DNS解析\n\n解析域名，找到主机IP。如百度对应的IP为`180.97.33.108` ,浏览器输入IP也可以访问到百度。\n\n（1）浏览器会缓存DNS一段时间，一般2-30分钟不等。如果有缓存，直接返回IP，否则下一步。\n\n（2）缓存中无法找到IP，浏览器会进行一个系统调用，查询hosts文件。如果找到，直接返回IP，否则下一步。（在计算机本地目录etc下有一个hosts文件，hosts文件中保存有域名与IP的对应解析，通常也可以修改hosts科学上网或破解软件。）\n\n（3）进行了（1）（2）本地查询无果，只能借助于网络。路由器一般都会有自己的DNS缓存，ISP服务商DNS缓存，这时一般都能够得到相应的IP。如果还是无果，只能借助于DNS递归解析了。\n\n（4）这时，ISP的DNS服务器就会开始从根域名服务器开始递归搜索，从.com顶级域名服务器，到baidu的域名服务器。\n\n到这里，浏览器就获得了IP。在DNS解析过程中，常常会解析出不同的IP。比如，电信的是一个IP，网通的是另一个IP。这是采取了智能DNS的结果，降低运营商间访问延时，在多个运营商设置主机房，就近访问主机。电信用户返回电信主机IP，网通用户返回网通主机IP。当然，劫持DNS，也可以屏蔽掉一部分网点的访问，某防火长城也加入了这一特性。\n\n## 2. TCP连接\n\n浏览器与网站建立TCP连接\n\n浏览器利用IP直接与网站主机通信。浏览器发出TCP（SYN标志位为1）连接请求，主机返回TCP（SYN，ACK标志位均为1）应答报文，浏览器收到应答报文发现ACK标志位为1，表示连接请求确认。浏览器返回TCP（）确认报文，主机收到确认报文，三次握手，TCP链接建立完成。\n\n## 3. 发送HTTP请求\n\n浏览器发起HTTP请求\n\n其实这部分又可以称为前端工程师眼中的HTTP，它主要发生在客户端。发送HTTP请求的过程就是构建HTTP请求报文并通过TCP协议中发送到服务器指定端口(HTTP协议80/8080, HTTPS协议443)。HTTP请求报文是由三部分组成: **请求行**, **请求报头**和**请求正文**。 \n\n**请求行**\n\n请求行包括：请求方法，URL  ， 协议版本\n\n```java\n请求行：请求方法    URL    协议版本\n    eg:\tGET   index.html HTTP/1.1\n```\n\n**请求报头**\n\n请求报头允许客户端向服务器传递请求的附加信息和客户端自身的信息。\nPS: 客户端不一定特指浏览器，有时候也可使用Linux下的CURL命令以及HTTP客户端测试工具等。\n常见的请求报头有: `Accept`,` Accept-Charset`,` Accept-Encoding`,` Accept-Language,` `Content-Type`, `Authorization`, `Cookie`, `User-Agent`等。\n\n**请求正文**\n\n当使用`POST`, `PUT`等方法时，通常需要客户端向服务器传递数据。这些数据就储存在请求正文中。在请求包头中有一些与请求正文相关的信息，例如: 现在的Web应用通常采用Rest架构，请求的数据格式一般为json。这时就需要设置`Content-Type: application/json`\n\n浏览器向主机发起一个HTTP请求。请求中包含访问的URL，也就是http://www.baidu.com/ ，还有User-Agent用户浏览器操作系统信息，编码等。值得一提的是Accep-Encoding和Cookies项。Accept-Encoding一般采用gzip，压缩之后传输html文件。Cookies如果是首次访问，会提示服务器建立用户缓存信息，如果不是，可以利用Cookies对应键值，找到相应缓存，缓存里面存放着用户名，密码和一些用户设置项。\n\n## 4. 服务器响应\n\n服务器对请求做出响应并返回HTTP响应报文。自然而然这部分对应的就是后端工程师眼中的HTTP。后端从在固定的端口接收到TCP报文开始，这一部分对应于编程语言中的socket。它会对TCP连接进行处理，对HTTP协议进行解析，并按照报文格式进一步封装成HTTP Request对象，供上层使用。这一部分工作一般是由Web服务器去进行，例如Tomcat。\n\nHTTP响应报文也是由三部分组成: **响应行**, **响应报头**和**响应报文**。\n\n**响应行**\n\n响应行包括：协议版本 状态码 状态码描述\n\n```java\n响应行包括：协议版本   状态码 状态码描述\n    eg:  \tHTTP/1.1  200    OK\n```\n\n**响应报头**\n\n常见的响应报头字段有: Server, Connection...。\n\n**响应报文**\n\n服务器返回给浏览器的文本信息，通常HTML, CSS, JS, 图片等文件就放在这一部分。\n\n## 5. 浏览器解析渲染页面\n\n返回状态码200 OK，表示服务器可以相应请求，返回报文，由于在报头中`Content-type:“text/html”`，浏览器以HTML形式呈现，而不是下载文件。\n\n浏览器在收到HTML,CSS,JS文件后，它是如何把页面呈现到屏幕上的?\n\n浏览器是一个边解析边渲染的过程。首先浏览器解析HTML文件构建DOM树，然后解析CSS文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。这个过程比较复杂，涉及到两个概念: reflow(回流)和repain(重绘)。DOM节点中的各个元素都是以盒模型的形式存在，这些都需要浏览器去计算其位置和大小等，这个过程称为relow;当盒模型的位置,大小以及其他属性，如颜色,字体,等确定下来之后，浏览器便开始绘制内容，这个过程称为repain。页面在首次加载时必然会经历reflow和repain。reflow和repain过程是非常消耗性能的，尤其是在移动设备上，它会破坏用户体验，有时会造成页面卡顿。所以我们应该尽可能少的减少reflow和repain。\n\n**重定向 负载均衡**\n\n但是，对于大型网站存在多个主机站点，往往不会直接返回请求页面，而是重定向。返回的状态码就不是200 OK，而是301,302以3开头的重定向码，浏览器在获取了重定向响应后，在响应报文中Location项找到重定向地址，浏览器重新第一步访问即可。\n\n补充一点的就是，重定向是为了负载均衡或者导入流量，提高SEO排名。利用一个前端服务器接受请求，然后负载到不同的主机上，可以大大提高站点的业务并发处理能力；重定向也可将多个域名的访问，集中到一个站点；由于[lixueduan.com](lixueduan.com)，[www.lixueduan.com](www.lixueduan.com)会被搜索引擎认为是两个网站，照成每个的链接数都会减少从而降低排名，永久重定向会将两个地址关联起来，搜索引擎会认为是同一个网站，从而提高排名。\n\n## 6. 连接结束\n\n在HTTP/1.0中默认使用短连接。也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个HTML或其他类型的Web页中包含有其他的Web资源（如JavaScript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话。\n\n而从HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入这行代码：\n\n```\nConnection:keep-alive\n```\n\n在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。\n\n## 7. 计算机网络常见问题\n\n看完系列文章，下面这些问题应该也不是问题了。\n\n- 1.TCP三次握手和四次挥手\n- 2.在浏览器中输入url地址->>显示主页的过程\n- 3.HTTP和HTTPS的区别\n- 4.TCP、UDP协议的区别\n- 5.常见的状态码。\n\n## 8. 参考\n\n`https://segmentfault.com/a/1190000006879700`","source":"_posts/computer-network/five-connection-process.md","raw":"---\ntitle: 计算机网络(五)--从输入URL到页面加载的过程中发生了什么\ntags:\n  - 计算机网络\ncategories:\n  - 计算机网络\nabbrlink: 5863\ndate: 2018-11-15 22:00:00\n---\n\n本文主要对用户从浏览器输入URL到页面加载的这一过程进行了具体分析与叙述。包括：`DNS解析`、`发送HTTP请求`、`TCP连接`、`服务器响应`、`浏览器解析渲染页面`等。\n\n<!--more-->\n\n> 计算机网络系列文章\n>\n> - [计算机网络(一)--OSI七层模型](https://www.lixueduan.com/computer-network/one-network-model/)\n> - [计算机网络(二)--TCP三次握手四次挥手](https://www.lixueduan.com/computer-network/two-tcp-connection/)\n> - [计算机网络(三)--TCP如何保证传输可靠性](https://www.lixueduan.com/computer-network/three-tcp-reliability/)\n> - [计算机网络(四)--HTTP与HTTPS](https://www.lixueduan.com/computer-network/four-http-https/)\n> - [计算机网络(五)--从输入URL到页面加载的过程中发生了什么](计算机网络(五)--从输入URL到页面加载的过程中发生了什么)\n\n总体来说分为以下几个过程:\n\n* 1.DNS解析\n* 2.TCP连接\n* 3.发送HTTP请求\n* 4.服务器处理请求并返回HTTP报文\n* 5.浏览器解析渲染页面\n* 6.连接结束\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcpip-http-relation-about.jpg)\n\n## 1. DNS解析\n\n解析域名，找到主机IP。如百度对应的IP为`180.97.33.108` ,浏览器输入IP也可以访问到百度。\n\n（1）浏览器会缓存DNS一段时间，一般2-30分钟不等。如果有缓存，直接返回IP，否则下一步。\n\n（2）缓存中无法找到IP，浏览器会进行一个系统调用，查询hosts文件。如果找到，直接返回IP，否则下一步。（在计算机本地目录etc下有一个hosts文件，hosts文件中保存有域名与IP的对应解析，通常也可以修改hosts科学上网或破解软件。）\n\n（3）进行了（1）（2）本地查询无果，只能借助于网络。路由器一般都会有自己的DNS缓存，ISP服务商DNS缓存，这时一般都能够得到相应的IP。如果还是无果，只能借助于DNS递归解析了。\n\n（4）这时，ISP的DNS服务器就会开始从根域名服务器开始递归搜索，从.com顶级域名服务器，到baidu的域名服务器。\n\n到这里，浏览器就获得了IP。在DNS解析过程中，常常会解析出不同的IP。比如，电信的是一个IP，网通的是另一个IP。这是采取了智能DNS的结果，降低运营商间访问延时，在多个运营商设置主机房，就近访问主机。电信用户返回电信主机IP，网通用户返回网通主机IP。当然，劫持DNS，也可以屏蔽掉一部分网点的访问，某防火长城也加入了这一特性。\n\n## 2. TCP连接\n\n浏览器与网站建立TCP连接\n\n浏览器利用IP直接与网站主机通信。浏览器发出TCP（SYN标志位为1）连接请求，主机返回TCP（SYN，ACK标志位均为1）应答报文，浏览器收到应答报文发现ACK标志位为1，表示连接请求确认。浏览器返回TCP（）确认报文，主机收到确认报文，三次握手，TCP链接建立完成。\n\n## 3. 发送HTTP请求\n\n浏览器发起HTTP请求\n\n其实这部分又可以称为前端工程师眼中的HTTP，它主要发生在客户端。发送HTTP请求的过程就是构建HTTP请求报文并通过TCP协议中发送到服务器指定端口(HTTP协议80/8080, HTTPS协议443)。HTTP请求报文是由三部分组成: **请求行**, **请求报头**和**请求正文**。 \n\n**请求行**\n\n请求行包括：请求方法，URL  ， 协议版本\n\n```java\n请求行：请求方法    URL    协议版本\n    eg:\tGET   index.html HTTP/1.1\n```\n\n**请求报头**\n\n请求报头允许客户端向服务器传递请求的附加信息和客户端自身的信息。\nPS: 客户端不一定特指浏览器，有时候也可使用Linux下的CURL命令以及HTTP客户端测试工具等。\n常见的请求报头有: `Accept`,` Accept-Charset`,` Accept-Encoding`,` Accept-Language,` `Content-Type`, `Authorization`, `Cookie`, `User-Agent`等。\n\n**请求正文**\n\n当使用`POST`, `PUT`等方法时，通常需要客户端向服务器传递数据。这些数据就储存在请求正文中。在请求包头中有一些与请求正文相关的信息，例如: 现在的Web应用通常采用Rest架构，请求的数据格式一般为json。这时就需要设置`Content-Type: application/json`\n\n浏览器向主机发起一个HTTP请求。请求中包含访问的URL，也就是http://www.baidu.com/ ，还有User-Agent用户浏览器操作系统信息，编码等。值得一提的是Accep-Encoding和Cookies项。Accept-Encoding一般采用gzip，压缩之后传输html文件。Cookies如果是首次访问，会提示服务器建立用户缓存信息，如果不是，可以利用Cookies对应键值，找到相应缓存，缓存里面存放着用户名，密码和一些用户设置项。\n\n## 4. 服务器响应\n\n服务器对请求做出响应并返回HTTP响应报文。自然而然这部分对应的就是后端工程师眼中的HTTP。后端从在固定的端口接收到TCP报文开始，这一部分对应于编程语言中的socket。它会对TCP连接进行处理，对HTTP协议进行解析，并按照报文格式进一步封装成HTTP Request对象，供上层使用。这一部分工作一般是由Web服务器去进行，例如Tomcat。\n\nHTTP响应报文也是由三部分组成: **响应行**, **响应报头**和**响应报文**。\n\n**响应行**\n\n响应行包括：协议版本 状态码 状态码描述\n\n```java\n响应行包括：协议版本   状态码 状态码描述\n    eg:  \tHTTP/1.1  200    OK\n```\n\n**响应报头**\n\n常见的响应报头字段有: Server, Connection...。\n\n**响应报文**\n\n服务器返回给浏览器的文本信息，通常HTML, CSS, JS, 图片等文件就放在这一部分。\n\n## 5. 浏览器解析渲染页面\n\n返回状态码200 OK，表示服务器可以相应请求，返回报文，由于在报头中`Content-type:“text/html”`，浏览器以HTML形式呈现，而不是下载文件。\n\n浏览器在收到HTML,CSS,JS文件后，它是如何把页面呈现到屏幕上的?\n\n浏览器是一个边解析边渲染的过程。首先浏览器解析HTML文件构建DOM树，然后解析CSS文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。这个过程比较复杂，涉及到两个概念: reflow(回流)和repain(重绘)。DOM节点中的各个元素都是以盒模型的形式存在，这些都需要浏览器去计算其位置和大小等，这个过程称为relow;当盒模型的位置,大小以及其他属性，如颜色,字体,等确定下来之后，浏览器便开始绘制内容，这个过程称为repain。页面在首次加载时必然会经历reflow和repain。reflow和repain过程是非常消耗性能的，尤其是在移动设备上，它会破坏用户体验，有时会造成页面卡顿。所以我们应该尽可能少的减少reflow和repain。\n\n**重定向 负载均衡**\n\n但是，对于大型网站存在多个主机站点，往往不会直接返回请求页面，而是重定向。返回的状态码就不是200 OK，而是301,302以3开头的重定向码，浏览器在获取了重定向响应后，在响应报文中Location项找到重定向地址，浏览器重新第一步访问即可。\n\n补充一点的就是，重定向是为了负载均衡或者导入流量，提高SEO排名。利用一个前端服务器接受请求，然后负载到不同的主机上，可以大大提高站点的业务并发处理能力；重定向也可将多个域名的访问，集中到一个站点；由于[lixueduan.com](lixueduan.com)，[www.lixueduan.com](www.lixueduan.com)会被搜索引擎认为是两个网站，照成每个的链接数都会减少从而降低排名，永久重定向会将两个地址关联起来，搜索引擎会认为是同一个网站，从而提高排名。\n\n## 6. 连接结束\n\n在HTTP/1.0中默认使用短连接。也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个HTML或其他类型的Web页中包含有其他的Web资源（如JavaScript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话。\n\n而从HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入这行代码：\n\n```\nConnection:keep-alive\n```\n\n在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。\n\n## 7. 计算机网络常见问题\n\n看完系列文章，下面这些问题应该也不是问题了。\n\n- 1.TCP三次握手和四次挥手\n- 2.在浏览器中输入url地址->>显示主页的过程\n- 3.HTTP和HTTPS的区别\n- 4.TCP、UDP协议的区别\n- 5.常见的状态码。\n\n## 8. 参考\n\n`https://segmentfault.com/a/1190000006879700`","slug":"computer-network/five-connection-process","published":1,"updated":"2019-01-03T10:29:16.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqhw7t90001cwkw49er1ato4","content":"<!-- build time:Fri Jan 04 2019 18:24:57 GMT+0800 (GMT+08:00) --><p>本文主要对用户从浏览器输入URL到页面加载的这一过程进行了具体分析与叙述。包括：<code>DNS解析</code>、<code>发送HTTP请求</code>、<code>TCP连接</code>、<code>服务器响应</code>、<code>浏览器解析渲染页面</code>等。</p><a id=\"more\"></a><blockquote><p>计算机网络系列文章</p><ul><li><a href=\"https://www.lixueduan.com/computer-network/one-network-model/\">计算机网络(一)–OSI七层模型</a></li><li><a href=\"https://www.lixueduan.com/computer-network/two-tcp-connection/\">计算机网络(二)–TCP三次握手四次挥手</a></li><li><a href=\"https://www.lixueduan.com/computer-network/three-tcp-reliability/\">计算机网络(三)–TCP如何保证传输可靠性</a></li><li><a href=\"https://www.lixueduan.com/computer-network/four-http-https/\">计算机网络(四)–HTTP与HTTPS</a></li><li><a href=\"计算机网络(五\">计算机网络(五)–从输入URL到页面加载的过程中发生了什么</a>–从输入URL到页面加载的过程中发生了什么)</li></ul></blockquote><p>总体来说分为以下几个过程:</p><ul><li>1.DNS解析</li><li>2.TCP连接</li><li>3.发送HTTP请求</li><li>4.服务器处理请求并返回HTTP报文</li><li>5.浏览器解析渲染页面</li><li>6.连接结束</li></ul><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcpip-http-relation-about.jpg\" alt=\"\"></p><h2 id=\"1-DNS解析\"><a href=\"#1-DNS解析\" class=\"headerlink\" title=\"1. DNS解析\"></a>1. DNS解析</h2><p>解析域名，找到主机IP。如百度对应的IP为<code>180.97.33.108</code> ,浏览器输入IP也可以访问到百度。</p><p>（1）浏览器会缓存DNS一段时间，一般2-30分钟不等。如果有缓存，直接返回IP，否则下一步。</p><p>（2）缓存中无法找到IP，浏览器会进行一个系统调用，查询hosts文件。如果找到，直接返回IP，否则下一步。（在计算机本地目录etc下有一个hosts文件，hosts文件中保存有域名与IP的对应解析，通常也可以修改hosts科学上网或破解软件。）</p><p>（3）进行了（1）（2）本地查询无果，只能借助于网络。路由器一般都会有自己的DNS缓存，ISP服务商DNS缓存，这时一般都能够得到相应的IP。如果还是无果，只能借助于DNS递归解析了。</p><p>（4）这时，ISP的DNS服务器就会开始从根域名服务器开始递归搜索，从.com顶级域名服务器，到baidu的域名服务器。</p><p>到这里，浏览器就获得了IP。在DNS解析过程中，常常会解析出不同的IP。比如，电信的是一个IP，网通的是另一个IP。这是采取了智能DNS的结果，降低运营商间访问延时，在多个运营商设置主机房，就近访问主机。电信用户返回电信主机IP，网通用户返回网通主机IP。当然，劫持DNS，也可以屏蔽掉一部分网点的访问，某防火长城也加入了这一特性。</p><h2 id=\"2-TCP连接\"><a href=\"#2-TCP连接\" class=\"headerlink\" title=\"2. TCP连接\"></a>2. TCP连接</h2><p>浏览器与网站建立TCP连接</p><p>浏览器利用IP直接与网站主机通信。浏览器发出TCP（SYN标志位为1）连接请求，主机返回TCP（SYN，ACK标志位均为1）应答报文，浏览器收到应答报文发现ACK标志位为1，表示连接请求确认。浏览器返回TCP（）确认报文，主机收到确认报文，三次握手，TCP链接建立完成。</p><h2 id=\"3-发送HTTP请求\"><a href=\"#3-发送HTTP请求\" class=\"headerlink\" title=\"3. 发送HTTP请求\"></a>3. 发送HTTP请求</h2><p>浏览器发起HTTP请求</p><p>其实这部分又可以称为前端工程师眼中的HTTP，它主要发生在客户端。发送HTTP请求的过程就是构建HTTP请求报文并通过TCP协议中发送到服务器指定端口(HTTP协议80/8080, HTTPS协议443)。HTTP请求报文是由三部分组成: <strong>请求行</strong>, <strong>请求报头</strong>和<strong>请求正文</strong>。</p><p><strong>请求行</strong></p><p>请求行包括：请求方法，URL ， 协议版本</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请求行：请求方法    URL    协议版本</span><br><span class=\"line\">    eg:\tGET   index.html HTTP/<span class=\"number\">1.1</span></span><br></pre></td></tr></table></figure><p><strong>请求报头</strong></p><p>请求报头允许客户端向服务器传递请求的附加信息和客户端自身的信息。<br>PS: 客户端不一定特指浏览器，有时候也可使用Linux下的CURL命令以及HTTP客户端测试工具等。<br>常见的请求报头有: <code>Accept</code>,<code>Accept-Charset</code>,<code>Accept-Encoding</code>,<code>Accept-Language,</code> <code>Content-Type</code>, <code>Authorization</code>, <code>Cookie</code>, <code>User-Agent</code>等。</p><p><strong>请求正文</strong></p><p>当使用<code>POST</code>, <code>PUT</code>等方法时，通常需要客户端向服务器传递数据。这些数据就储存在请求正文中。在请求包头中有一些与请求正文相关的信息，例如: 现在的Web应用通常采用Rest架构，请求的数据格式一般为json。这时就需要设置<code>Content-Type: application/json</code></p><p>浏览器向主机发起一个HTTP请求。请求中包含访问的URL，也就是<a href=\"http://www.baidu.com/\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com/</a> ，还有User-Agent用户浏览器操作系统信息，编码等。值得一提的是Accep-Encoding和Cookies项。Accept-Encoding一般采用gzip，压缩之后传输html文件。Cookies如果是首次访问，会提示服务器建立用户缓存信息，如果不是，可以利用Cookies对应键值，找到相应缓存，缓存里面存放着用户名，密码和一些用户设置项。</p><h2 id=\"4-服务器响应\"><a href=\"#4-服务器响应\" class=\"headerlink\" title=\"4. 服务器响应\"></a>4. 服务器响应</h2><p>服务器对请求做出响应并返回HTTP响应报文。自然而然这部分对应的就是后端工程师眼中的HTTP。后端从在固定的端口接收到TCP报文开始，这一部分对应于编程语言中的socket。它会对TCP连接进行处理，对HTTP协议进行解析，并按照报文格式进一步封装成HTTP Request对象，供上层使用。这一部分工作一般是由Web服务器去进行，例如Tomcat。</p><p>HTTP响应报文也是由三部分组成: <strong>响应行</strong>, <strong>响应报头</strong>和<strong>响应报文</strong>。</p><p><strong>响应行</strong></p><p>响应行包括：协议版本 状态码 状态码描述</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">响应行包括：协议版本   状态码 状态码描述</span><br><span class=\"line\">    eg:  \tHTTP/<span class=\"number\">1.1</span>  <span class=\"number\">200</span>    OK</span><br></pre></td></tr></table></figure><p><strong>响应报头</strong></p><p>常见的响应报头字段有: Server, Connection…。</p><p><strong>响应报文</strong></p><p>服务器返回给浏览器的文本信息，通常HTML, CSS, JS, 图片等文件就放在这一部分。</p><h2 id=\"5-浏览器解析渲染页面\"><a href=\"#5-浏览器解析渲染页面\" class=\"headerlink\" title=\"5. 浏览器解析渲染页面\"></a>5. 浏览器解析渲染页面</h2><p>返回状态码200 OK，表示服务器可以相应请求，返回报文，由于在报头中<code>Content-type:“text/html”</code>，浏览器以HTML形式呈现，而不是下载文件。</p><p>浏览器在收到HTML,CSS,JS文件后，它是如何把页面呈现到屏幕上的?</p><p>浏览器是一个边解析边渲染的过程。首先浏览器解析HTML文件构建DOM树，然后解析CSS文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。这个过程比较复杂，涉及到两个概念: reflow(回流)和repain(重绘)。DOM节点中的各个元素都是以盒模型的形式存在，这些都需要浏览器去计算其位置和大小等，这个过程称为relow;当盒模型的位置,大小以及其他属性，如颜色,字体,等确定下来之后，浏览器便开始绘制内容，这个过程称为repain。页面在首次加载时必然会经历reflow和repain。reflow和repain过程是非常消耗性能的，尤其是在移动设备上，它会破坏用户体验，有时会造成页面卡顿。所以我们应该尽可能少的减少reflow和repain。</p><p><strong>重定向 负载均衡</strong></p><p>但是，对于大型网站存在多个主机站点，往往不会直接返回请求页面，而是重定向。返回的状态码就不是200 OK，而是301,302以3开头的重定向码，浏览器在获取了重定向响应后，在响应报文中Location项找到重定向地址，浏览器重新第一步访问即可。</p><p>补充一点的就是，重定向是为了负载均衡或者导入流量，提高SEO排名。利用一个前端服务器接受请求，然后负载到不同的主机上，可以大大提高站点的业务并发处理能力；重定向也可将多个域名的访问，集中到一个站点；由于<a href=\"lixueduan.com\">lixueduan.com</a>，<a href=\"www.lixueduan.com\">www.lixueduan.com</a>会被搜索引擎认为是两个网站，照成每个的链接数都会减少从而降低排名，永久重定向会将两个地址关联起来，搜索引擎会认为是同一个网站，从而提高排名。</p><h2 id=\"6-连接结束\"><a href=\"#6-连接结束\" class=\"headerlink\" title=\"6. 连接结束\"></a>6. 连接结束</h2><p>在HTTP/1.0中默认使用短连接。也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个HTML或其他类型的Web页中包含有其他的Web资源（如JavaScript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话。</p><p>而从HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入这行代码：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connection:keep-alive</span><br></pre></td></tr></table></figure><p>在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。</p><h2 id=\"7-计算机网络常见问题\"><a href=\"#7-计算机网络常见问题\" class=\"headerlink\" title=\"7. 计算机网络常见问题\"></a>7. 计算机网络常见问题</h2><p>看完系列文章，下面这些问题应该也不是问题了。</p><ul><li>1.TCP三次握手和四次挥手</li><li>2.在浏览器中输入url地址-&gt;&gt;显示主页的过程</li><li>3.HTTP和HTTPS的区别</li><li>4.TCP、UDP协议的区别</li><li>5.常见的状态码。</li></ul><h2 id=\"8-参考\"><a href=\"#8-参考\" class=\"headerlink\" title=\"8. 参考\"></a>8. 参考</h2><p><code>https://segmentfault.com/a/1190000006879700</code></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Fri Jan 04 2019 18:24:57 GMT+0800 (GMT+08:00) --><p>本文主要对用户从浏览器输入URL到页面加载的这一过程进行了具体分析与叙述。包括：<code>DNS解析</code>、<code>发送HTTP请求</code>、<code>TCP连接</code>、<code>服务器响应</code>、<code>浏览器解析渲染页面</code>等。</p>","more":"<blockquote><p>计算机网络系列文章</p><ul><li><a href=\"https://www.lixueduan.com/computer-network/one-network-model/\">计算机网络(一)–OSI七层模型</a></li><li><a href=\"https://www.lixueduan.com/computer-network/two-tcp-connection/\">计算机网络(二)–TCP三次握手四次挥手</a></li><li><a href=\"https://www.lixueduan.com/computer-network/three-tcp-reliability/\">计算机网络(三)–TCP如何保证传输可靠性</a></li><li><a href=\"https://www.lixueduan.com/computer-network/four-http-https/\">计算机网络(四)–HTTP与HTTPS</a></li><li><a href=\"计算机网络(五\">计算机网络(五)–从输入URL到页面加载的过程中发生了什么</a>–从输入URL到页面加载的过程中发生了什么)</li></ul></blockquote><p>总体来说分为以下几个过程:</p><ul><li>1.DNS解析</li><li>2.TCP连接</li><li>3.发送HTTP请求</li><li>4.服务器处理请求并返回HTTP报文</li><li>5.浏览器解析渲染页面</li><li>6.连接结束</li></ul><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcpip-http-relation-about.jpg\" alt=\"\"></p><h2 id=\"1-DNS解析\"><a href=\"#1-DNS解析\" class=\"headerlink\" title=\"1. DNS解析\"></a>1. DNS解析</h2><p>解析域名，找到主机IP。如百度对应的IP为<code>180.97.33.108</code> ,浏览器输入IP也可以访问到百度。</p><p>（1）浏览器会缓存DNS一段时间，一般2-30分钟不等。如果有缓存，直接返回IP，否则下一步。</p><p>（2）缓存中无法找到IP，浏览器会进行一个系统调用，查询hosts文件。如果找到，直接返回IP，否则下一步。（在计算机本地目录etc下有一个hosts文件，hosts文件中保存有域名与IP的对应解析，通常也可以修改hosts科学上网或破解软件。）</p><p>（3）进行了（1）（2）本地查询无果，只能借助于网络。路由器一般都会有自己的DNS缓存，ISP服务商DNS缓存，这时一般都能够得到相应的IP。如果还是无果，只能借助于DNS递归解析了。</p><p>（4）这时，ISP的DNS服务器就会开始从根域名服务器开始递归搜索，从.com顶级域名服务器，到baidu的域名服务器。</p><p>到这里，浏览器就获得了IP。在DNS解析过程中，常常会解析出不同的IP。比如，电信的是一个IP，网通的是另一个IP。这是采取了智能DNS的结果，降低运营商间访问延时，在多个运营商设置主机房，就近访问主机。电信用户返回电信主机IP，网通用户返回网通主机IP。当然，劫持DNS，也可以屏蔽掉一部分网点的访问，某防火长城也加入了这一特性。</p><h2 id=\"2-TCP连接\"><a href=\"#2-TCP连接\" class=\"headerlink\" title=\"2. TCP连接\"></a>2. TCP连接</h2><p>浏览器与网站建立TCP连接</p><p>浏览器利用IP直接与网站主机通信。浏览器发出TCP（SYN标志位为1）连接请求，主机返回TCP（SYN，ACK标志位均为1）应答报文，浏览器收到应答报文发现ACK标志位为1，表示连接请求确认。浏览器返回TCP（）确认报文，主机收到确认报文，三次握手，TCP链接建立完成。</p><h2 id=\"3-发送HTTP请求\"><a href=\"#3-发送HTTP请求\" class=\"headerlink\" title=\"3. 发送HTTP请求\"></a>3. 发送HTTP请求</h2><p>浏览器发起HTTP请求</p><p>其实这部分又可以称为前端工程师眼中的HTTP，它主要发生在客户端。发送HTTP请求的过程就是构建HTTP请求报文并通过TCP协议中发送到服务器指定端口(HTTP协议80/8080, HTTPS协议443)。HTTP请求报文是由三部分组成: <strong>请求行</strong>, <strong>请求报头</strong>和<strong>请求正文</strong>。</p><p><strong>请求行</strong></p><p>请求行包括：请求方法，URL ， 协议版本</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请求行：请求方法    URL    协议版本</span><br><span class=\"line\">    eg:\tGET   index.html HTTP/<span class=\"number\">1.1</span></span><br></pre></td></tr></table></figure><p><strong>请求报头</strong></p><p>请求报头允许客户端向服务器传递请求的附加信息和客户端自身的信息。<br>PS: 客户端不一定特指浏览器，有时候也可使用Linux下的CURL命令以及HTTP客户端测试工具等。<br>常见的请求报头有: <code>Accept</code>,<code>Accept-Charset</code>,<code>Accept-Encoding</code>,<code>Accept-Language,</code> <code>Content-Type</code>, <code>Authorization</code>, <code>Cookie</code>, <code>User-Agent</code>等。</p><p><strong>请求正文</strong></p><p>当使用<code>POST</code>, <code>PUT</code>等方法时，通常需要客户端向服务器传递数据。这些数据就储存在请求正文中。在请求包头中有一些与请求正文相关的信息，例如: 现在的Web应用通常采用Rest架构，请求的数据格式一般为json。这时就需要设置<code>Content-Type: application/json</code></p><p>浏览器向主机发起一个HTTP请求。请求中包含访问的URL，也就是<a href=\"http://www.baidu.com/\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com/</a> ，还有User-Agent用户浏览器操作系统信息，编码等。值得一提的是Accep-Encoding和Cookies项。Accept-Encoding一般采用gzip，压缩之后传输html文件。Cookies如果是首次访问，会提示服务器建立用户缓存信息，如果不是，可以利用Cookies对应键值，找到相应缓存，缓存里面存放着用户名，密码和一些用户设置项。</p><h2 id=\"4-服务器响应\"><a href=\"#4-服务器响应\" class=\"headerlink\" title=\"4. 服务器响应\"></a>4. 服务器响应</h2><p>服务器对请求做出响应并返回HTTP响应报文。自然而然这部分对应的就是后端工程师眼中的HTTP。后端从在固定的端口接收到TCP报文开始，这一部分对应于编程语言中的socket。它会对TCP连接进行处理，对HTTP协议进行解析，并按照报文格式进一步封装成HTTP Request对象，供上层使用。这一部分工作一般是由Web服务器去进行，例如Tomcat。</p><p>HTTP响应报文也是由三部分组成: <strong>响应行</strong>, <strong>响应报头</strong>和<strong>响应报文</strong>。</p><p><strong>响应行</strong></p><p>响应行包括：协议版本 状态码 状态码描述</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">响应行包括：协议版本   状态码 状态码描述</span><br><span class=\"line\">    eg:  \tHTTP/<span class=\"number\">1.1</span>  <span class=\"number\">200</span>    OK</span><br></pre></td></tr></table></figure><p><strong>响应报头</strong></p><p>常见的响应报头字段有: Server, Connection…。</p><p><strong>响应报文</strong></p><p>服务器返回给浏览器的文本信息，通常HTML, CSS, JS, 图片等文件就放在这一部分。</p><h2 id=\"5-浏览器解析渲染页面\"><a href=\"#5-浏览器解析渲染页面\" class=\"headerlink\" title=\"5. 浏览器解析渲染页面\"></a>5. 浏览器解析渲染页面</h2><p>返回状态码200 OK，表示服务器可以相应请求，返回报文，由于在报头中<code>Content-type:“text/html”</code>，浏览器以HTML形式呈现，而不是下载文件。</p><p>浏览器在收到HTML,CSS,JS文件后，它是如何把页面呈现到屏幕上的?</p><p>浏览器是一个边解析边渲染的过程。首先浏览器解析HTML文件构建DOM树，然后解析CSS文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。这个过程比较复杂，涉及到两个概念: reflow(回流)和repain(重绘)。DOM节点中的各个元素都是以盒模型的形式存在，这些都需要浏览器去计算其位置和大小等，这个过程称为relow;当盒模型的位置,大小以及其他属性，如颜色,字体,等确定下来之后，浏览器便开始绘制内容，这个过程称为repain。页面在首次加载时必然会经历reflow和repain。reflow和repain过程是非常消耗性能的，尤其是在移动设备上，它会破坏用户体验，有时会造成页面卡顿。所以我们应该尽可能少的减少reflow和repain。</p><p><strong>重定向 负载均衡</strong></p><p>但是，对于大型网站存在多个主机站点，往往不会直接返回请求页面，而是重定向。返回的状态码就不是200 OK，而是301,302以3开头的重定向码，浏览器在获取了重定向响应后，在响应报文中Location项找到重定向地址，浏览器重新第一步访问即可。</p><p>补充一点的就是，重定向是为了负载均衡或者导入流量，提高SEO排名。利用一个前端服务器接受请求，然后负载到不同的主机上，可以大大提高站点的业务并发处理能力；重定向也可将多个域名的访问，集中到一个站点；由于<a href=\"lixueduan.com\">lixueduan.com</a>，<a href=\"www.lixueduan.com\">www.lixueduan.com</a>会被搜索引擎认为是两个网站，照成每个的链接数都会减少从而降低排名，永久重定向会将两个地址关联起来，搜索引擎会认为是同一个网站，从而提高排名。</p><h2 id=\"6-连接结束\"><a href=\"#6-连接结束\" class=\"headerlink\" title=\"6. 连接结束\"></a>6. 连接结束</h2><p>在HTTP/1.0中默认使用短连接。也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个HTML或其他类型的Web页中包含有其他的Web资源（如JavaScript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话。</p><p>而从HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入这行代码：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connection:keep-alive</span><br></pre></td></tr></table></figure><p>在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。</p><h2 id=\"7-计算机网络常见问题\"><a href=\"#7-计算机网络常见问题\" class=\"headerlink\" title=\"7. 计算机网络常见问题\"></a>7. 计算机网络常见问题</h2><p>看完系列文章，下面这些问题应该也不是问题了。</p><ul><li>1.TCP三次握手和四次挥手</li><li>2.在浏览器中输入url地址-&gt;&gt;显示主页的过程</li><li>3.HTTP和HTTPS的区别</li><li>4.TCP、UDP协议的区别</li><li>5.常见的状态码。</li></ul><h2 id=\"8-参考\"><a href=\"#8-参考\" class=\"headerlink\" title=\"8. 参考\"></a>8. 参考</h2><p><code>https://segmentfault.com/a/1190000006879700</code></p><!-- rebuild by neat -->"},{"title":"计算机网络(三)--TCP如何保证传输可靠性","abbrlink":18422,"date":"2018-11-08T14:00:00.000Z","_content":"\n本文主要叙述了TCP协议是如何保证传输的可靠性的，主要保证手段包括：`序列号`、`校验和`\n\n、`流量控制`、`拥塞控制`、`停止等待协议`、`超时重传`、`连接管理`等。\n\n<!--more-->\n\n> 计算机网络系列文章\n>\n> - [计算机网络(一)--OSI七层模型](https://www.lixueduan.com/computer-network/one-network-model/)\n> - [计算机网络(二)--TCP三次握手四次挥手](https://www.lixueduan.com/computer-network/two-tcp-connection/)\n> - [计算机网络(三)--TCP如何保证传输可靠性](https://www.lixueduan.com/computer-network/three-tcp-reliability/)\n> - [计算机网络(四)--HTTP与HTTPS](https://www.lixueduan.com/computer-network/four-http-https/)\n> - [计算机网络(五)--从输入URL到页面加载的过程中发生了什么](计算机网络(五)--从输入URL到页面加载的过程中发生了什么)\n\n## 1. 主要保证方式\n\n1. **序列号:**应用数据被分割成 TCP 认为最适合发送的数据块,同时给每一个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层。\n2. **校验和：** TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到端的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。\n3. **流量控制：** TCP 连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议。 （TCP 利用滑动窗口实现流量控制）\n4. **拥塞控制：** 当网络拥塞时，减少数据的发送。\n5. **停止等待协议(确认应答)** 也是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。\n6. **超时重传：** 当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。\n7. **连接管理:** 三次握手四次挥手,保证可靠的连接，是保证可靠性的前提。 \n\n## 2. 停止等待协议\n\n- 停止等待协议是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组；\n- 在停止等待协议中，若接收方收到重复分组，就丢弃该分组，但同时还要发送确认；\n\n**1) 无差错情况:**\n\n![normal](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-send-normal.jpg)\n\n发送方发送分组,接收方在规定时间内收到,并且回复确认.发送方再次发送。\n\n**2) 出现差错情况（超时重传）:** [![timeout](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-send-tiemout.jpg)\n\n停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重转时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为 **自动重传请求 ARQ** 。另外在停止等待协议中若收到重复分组，就丢弃该分组，但同时还要发送确认。**连续 ARQ 协议** 可提高信道利用率。发送维持一个发送窗口，凡位于发送窗口内的分组可连续发送出去，而不需要等待对方确认。接收方一般采用累积确认，对按序到达的最后一个分组发送确认，表明到这个分组位置的所有分组都已经正确收到了。\n\n**3) 确认丢失和确认迟到**\n\n- **确认丢失**：当确认消息在传输过程丢失 ![lost](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-send-lost.jpg)A发送M1消息，B收到后，B向A发送了一个M1确认消息，但却在传输过程中丢失。而A并不知道，在超时计时过后，A重传M1消息，B再次收到该消息后采取以下两点措施：\n  1. 丢弃这个重复的M1消息，不向上层交付。\n  2. 向A发送确认消息。（不会认为已经发送过了，就不再发送。A能重传，就证明B的确认消息丢失）。\n- **确认迟到** ：确认消息在传输过程中迟到 [![late](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-send-late.jpg)A发送M1消息，B收到并发送确认。在超时时间内没有收到确认消息，A重传M1消息，B仍然收到并继续发送确认消息（B收到了2份M1）。此时A收到了B第二次发送的确认消息。接着发送其他数据。过了一会，A收到了B第一次发送的对M1的确认消息（A也收到了2份确认消息）。处理如下：\n  1. A收到重复的确认后，直接丢弃。\n  2. B收到重复的M1后，也直接丢弃重复的M1。\n\n## 3. ARQ协议\n\n即自动重传请求 ARQ 协议(Automatic Repeat reQuest )，停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重转时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为自动重传请求ARQ。\n\n**优点：** 简单\n\n**缺点：** 信道利用率低\n\n## 4. 连续ARQ协议\n\n连续 ARQ 协议可提高信道利用率。发送方维持一个发送窗口，凡位于发送窗口内的分组可以连续发送出去，而不需要等待对方确认。接收方一般采用累计确认，对按序到达的最后一个分组发送确认，表明到这个分组为止的所有分组都已经正确收到了。\n\n**优点：** 信道利用率高，容易实现，即使确认丢失，也不必重传。\n\n**缺点：** 不能向发送方反映出接收方已经正确收到的所有分组的信息。 比如：发送方发送了 5条 消息，中间第三条丢失（3号），这时接收方只能对前两个发送确认。发送方无法知道后三个分组的下落，而只好把后三个全部重传一次。这也叫 Go-Back-N（回退 N），表示需要退回来重传已经发送过的 N 个消息。\n\n## 5. 流量控制\n\n- 滑动窗口（Sliding window）是一种流量控制技术。早期的网络通信中，通信双方不会考虑网络的拥挤情况直接发送数据。由于大家不知道网络拥塞状况，同时发送数据，导致中间节点阻塞掉包，谁也发不了数据，所以就有了滑动窗口机制来解决此问题。\n- TCP 中采用滑动窗口来进行传输控制，滑动窗口的大小意味着接收方还有多大的缓冲区可以用于接收数据。发送方可以通过滑动窗口的大小来确定应该发送多少字节的数据。当滑动窗口为 0 时，发送方一般不能再发送数据报，但有两种情况除外，一种情况是可以发送紧急数据，例如，允许用户终止在远端机上的运行进程。另一种情况是发送方可以发送一个 1 字节的数据报来通知接收方重新声明它希望接收的下一字节及发送方的滑动窗口大小。\n- **TCP 利用滑动窗口实现流量控制的机制。**\n- **流量控制是为了控制发送方发送速率，保证接收方来得及接收。**\n- 接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。\n\n## 6. 拥塞控制\n\n**防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。**\n\n 拥塞：即对资源的需求超过了可用的资源。若网络中许多资源同时供应不足，网络的性能就要明显变坏，整个网络的吞吐量随之负荷的增大而下降 \n\n拥塞控制所要做的都有一个**前提：网络能够承受现有的网络负荷。**拥塞控制是一个**全局性的过程**，涉及到所有的主机、路由器，以及与降低网络传输性能有关的所有因素。\n\n几种拥塞控制方法\n\n​    慢开始( slow-start )、拥塞避免( congestion avoidance )、快重传( fast retransmit )和快恢复( fast recovery )。\n\n**慢开始和拥塞避免**\n\n​    发送方维持一个拥塞窗口 cwnd ( congestion window )的状态变量。拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化。发送方让自己的发送窗口等于拥塞。\n\n​    发送方控制拥塞窗口的原则是：只要网络没有出现拥塞，拥塞窗口就再增大一些，以便把更多的分组发送出去。但只要网络出现拥塞，拥塞窗口就减小一些，以减少注入到网络中的分组数。\n\n **慢开始算法：**当主机开始发送数据时，如果立即所大量数据字节注入到网络，那么就有可能引起网络拥塞，因为现在并不清楚网络的负荷情况。因此，较好的方法是 先探测一下，即由小到大逐渐增大发送窗口，也就是说，由小到大逐渐增大拥塞窗口数值。 \n\n**拥塞避免算法：**让拥塞窗口cwnd缓慢地增大，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍。这样拥塞窗口cwnd按线性规律缓慢增长，比慢开始算法的拥塞窗口增长速率缓慢得多。 \n\n**快重传与快恢复**\n\n 在 TCP/IP 中，快速重传和恢复（fast retransmit and recovery，FRR）是一种拥塞控制算法，它能快速恢复丢失的数据包。没有 FRR，如果数据包丢失了，TCP 将会使用定时器来要求传输暂停。在暂停的这段时间内，没有新的或复制的数据包被发送。有了 FRR，如果接收机接收到一个不按顺序的数据段，它会立即给发送机发送一个重复确认。如果发送机接收到三个重复确认，它会假定确认件指出的数据段丢失了，并立即重传这些丢失的数据段。有了 FRR，就不会因为重传时要求的暂停被耽误。 　当有单独的数据包丢失时，快速重传和恢复（FRR）能最有效地工作。当有多个数据信息包在某一段很短的时间内丢失时，它则不能很有效地工作。  \n\n## 7.参考\n\n`https://blog.csdn.net/liuchenxia8/article/details/80428157`\n\n`https://blog.csdn.net/yangbodong22011/article/details/48473183`\n\n\n\n","source":"_posts/computer-network/three-tcp-reliability.md","raw":"---\ntitle: 计算机网络(三)--TCP如何保证传输可靠性\ntags:\n  - 计算机网络\n  - TCP/IP\ncategories:\n  - 计算机网络\nabbrlink: 18422\ndate: 2018-11-08 22:00:00\n---\n\n本文主要叙述了TCP协议是如何保证传输的可靠性的，主要保证手段包括：`序列号`、`校验和`\n\n、`流量控制`、`拥塞控制`、`停止等待协议`、`超时重传`、`连接管理`等。\n\n<!--more-->\n\n> 计算机网络系列文章\n>\n> - [计算机网络(一)--OSI七层模型](https://www.lixueduan.com/computer-network/one-network-model/)\n> - [计算机网络(二)--TCP三次握手四次挥手](https://www.lixueduan.com/computer-network/two-tcp-connection/)\n> - [计算机网络(三)--TCP如何保证传输可靠性](https://www.lixueduan.com/computer-network/three-tcp-reliability/)\n> - [计算机网络(四)--HTTP与HTTPS](https://www.lixueduan.com/computer-network/four-http-https/)\n> - [计算机网络(五)--从输入URL到页面加载的过程中发生了什么](计算机网络(五)--从输入URL到页面加载的过程中发生了什么)\n\n## 1. 主要保证方式\n\n1. **序列号:**应用数据被分割成 TCP 认为最适合发送的数据块,同时给每一个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层。\n2. **校验和：** TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到端的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。\n3. **流量控制：** TCP 连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议。 （TCP 利用滑动窗口实现流量控制）\n4. **拥塞控制：** 当网络拥塞时，减少数据的发送。\n5. **停止等待协议(确认应答)** 也是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。\n6. **超时重传：** 当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。\n7. **连接管理:** 三次握手四次挥手,保证可靠的连接，是保证可靠性的前提。 \n\n## 2. 停止等待协议\n\n- 停止等待协议是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组；\n- 在停止等待协议中，若接收方收到重复分组，就丢弃该分组，但同时还要发送确认；\n\n**1) 无差错情况:**\n\n![normal](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-send-normal.jpg)\n\n发送方发送分组,接收方在规定时间内收到,并且回复确认.发送方再次发送。\n\n**2) 出现差错情况（超时重传）:** [![timeout](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-send-tiemout.jpg)\n\n停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重转时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为 **自动重传请求 ARQ** 。另外在停止等待协议中若收到重复分组，就丢弃该分组，但同时还要发送确认。**连续 ARQ 协议** 可提高信道利用率。发送维持一个发送窗口，凡位于发送窗口内的分组可连续发送出去，而不需要等待对方确认。接收方一般采用累积确认，对按序到达的最后一个分组发送确认，表明到这个分组位置的所有分组都已经正确收到了。\n\n**3) 确认丢失和确认迟到**\n\n- **确认丢失**：当确认消息在传输过程丢失 ![lost](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-send-lost.jpg)A发送M1消息，B收到后，B向A发送了一个M1确认消息，但却在传输过程中丢失。而A并不知道，在超时计时过后，A重传M1消息，B再次收到该消息后采取以下两点措施：\n  1. 丢弃这个重复的M1消息，不向上层交付。\n  2. 向A发送确认消息。（不会认为已经发送过了，就不再发送。A能重传，就证明B的确认消息丢失）。\n- **确认迟到** ：确认消息在传输过程中迟到 [![late](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-send-late.jpg)A发送M1消息，B收到并发送确认。在超时时间内没有收到确认消息，A重传M1消息，B仍然收到并继续发送确认消息（B收到了2份M1）。此时A收到了B第二次发送的确认消息。接着发送其他数据。过了一会，A收到了B第一次发送的对M1的确认消息（A也收到了2份确认消息）。处理如下：\n  1. A收到重复的确认后，直接丢弃。\n  2. B收到重复的M1后，也直接丢弃重复的M1。\n\n## 3. ARQ协议\n\n即自动重传请求 ARQ 协议(Automatic Repeat reQuest )，停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重转时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为自动重传请求ARQ。\n\n**优点：** 简单\n\n**缺点：** 信道利用率低\n\n## 4. 连续ARQ协议\n\n连续 ARQ 协议可提高信道利用率。发送方维持一个发送窗口，凡位于发送窗口内的分组可以连续发送出去，而不需要等待对方确认。接收方一般采用累计确认，对按序到达的最后一个分组发送确认，表明到这个分组为止的所有分组都已经正确收到了。\n\n**优点：** 信道利用率高，容易实现，即使确认丢失，也不必重传。\n\n**缺点：** 不能向发送方反映出接收方已经正确收到的所有分组的信息。 比如：发送方发送了 5条 消息，中间第三条丢失（3号），这时接收方只能对前两个发送确认。发送方无法知道后三个分组的下落，而只好把后三个全部重传一次。这也叫 Go-Back-N（回退 N），表示需要退回来重传已经发送过的 N 个消息。\n\n## 5. 流量控制\n\n- 滑动窗口（Sliding window）是一种流量控制技术。早期的网络通信中，通信双方不会考虑网络的拥挤情况直接发送数据。由于大家不知道网络拥塞状况，同时发送数据，导致中间节点阻塞掉包，谁也发不了数据，所以就有了滑动窗口机制来解决此问题。\n- TCP 中采用滑动窗口来进行传输控制，滑动窗口的大小意味着接收方还有多大的缓冲区可以用于接收数据。发送方可以通过滑动窗口的大小来确定应该发送多少字节的数据。当滑动窗口为 0 时，发送方一般不能再发送数据报，但有两种情况除外，一种情况是可以发送紧急数据，例如，允许用户终止在远端机上的运行进程。另一种情况是发送方可以发送一个 1 字节的数据报来通知接收方重新声明它希望接收的下一字节及发送方的滑动窗口大小。\n- **TCP 利用滑动窗口实现流量控制的机制。**\n- **流量控制是为了控制发送方发送速率，保证接收方来得及接收。**\n- 接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。\n\n## 6. 拥塞控制\n\n**防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。**\n\n 拥塞：即对资源的需求超过了可用的资源。若网络中许多资源同时供应不足，网络的性能就要明显变坏，整个网络的吞吐量随之负荷的增大而下降 \n\n拥塞控制所要做的都有一个**前提：网络能够承受现有的网络负荷。**拥塞控制是一个**全局性的过程**，涉及到所有的主机、路由器，以及与降低网络传输性能有关的所有因素。\n\n几种拥塞控制方法\n\n​    慢开始( slow-start )、拥塞避免( congestion avoidance )、快重传( fast retransmit )和快恢复( fast recovery )。\n\n**慢开始和拥塞避免**\n\n​    发送方维持一个拥塞窗口 cwnd ( congestion window )的状态变量。拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化。发送方让自己的发送窗口等于拥塞。\n\n​    发送方控制拥塞窗口的原则是：只要网络没有出现拥塞，拥塞窗口就再增大一些，以便把更多的分组发送出去。但只要网络出现拥塞，拥塞窗口就减小一些，以减少注入到网络中的分组数。\n\n **慢开始算法：**当主机开始发送数据时，如果立即所大量数据字节注入到网络，那么就有可能引起网络拥塞，因为现在并不清楚网络的负荷情况。因此，较好的方法是 先探测一下，即由小到大逐渐增大发送窗口，也就是说，由小到大逐渐增大拥塞窗口数值。 \n\n**拥塞避免算法：**让拥塞窗口cwnd缓慢地增大，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍。这样拥塞窗口cwnd按线性规律缓慢增长，比慢开始算法的拥塞窗口增长速率缓慢得多。 \n\n**快重传与快恢复**\n\n 在 TCP/IP 中，快速重传和恢复（fast retransmit and recovery，FRR）是一种拥塞控制算法，它能快速恢复丢失的数据包。没有 FRR，如果数据包丢失了，TCP 将会使用定时器来要求传输暂停。在暂停的这段时间内，没有新的或复制的数据包被发送。有了 FRR，如果接收机接收到一个不按顺序的数据段，它会立即给发送机发送一个重复确认。如果发送机接收到三个重复确认，它会假定确认件指出的数据段丢失了，并立即重传这些丢失的数据段。有了 FRR，就不会因为重传时要求的暂停被耽误。 　当有单独的数据包丢失时，快速重传和恢复（FRR）能最有效地工作。当有多个数据信息包在某一段很短的时间内丢失时，它则不能很有效地工作。  \n\n## 7.参考\n\n`https://blog.csdn.net/liuchenxia8/article/details/80428157`\n\n`https://blog.csdn.net/yangbodong22011/article/details/48473183`\n\n\n\n","slug":"computer-network/three-tcp-reliability","published":1,"updated":"2019-01-03T10:29:16.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqhw7t92001ewkw4fquuw4ur","content":"<!-- build time:Fri Jan 04 2019 18:24:57 GMT+0800 (GMT+08:00) --><p>本文主要叙述了TCP协议是如何保证传输的可靠性的，主要保证手段包括：<code>序列号</code>、<code>校验和</code></p><p>、<code>流量控制</code>、<code>拥塞控制</code>、<code>停止等待协议</code>、<code>超时重传</code>、<code>连接管理</code>等。</p><a id=\"more\"></a><blockquote><p>计算机网络系列文章</p><ul><li><a href=\"https://www.lixueduan.com/computer-network/one-network-model/\">计算机网络(一)–OSI七层模型</a></li><li><a href=\"https://www.lixueduan.com/computer-network/two-tcp-connection/\">计算机网络(二)–TCP三次握手四次挥手</a></li><li><a href=\"https://www.lixueduan.com/computer-network/three-tcp-reliability/\">计算机网络(三)–TCP如何保证传输可靠性</a></li><li><a href=\"https://www.lixueduan.com/computer-network/four-http-https/\">计算机网络(四)–HTTP与HTTPS</a></li><li><a href=\"计算机网络(五\">计算机网络(五)–从输入URL到页面加载的过程中发生了什么</a>–从输入URL到页面加载的过程中发生了什么)</li></ul></blockquote><h2 id=\"1-主要保证方式\"><a href=\"#1-主要保证方式\" class=\"headerlink\" title=\"1. 主要保证方式\"></a>1. 主要保证方式</h2><ol><li><strong>序列号:</strong>应用数据被分割成 TCP 认为最适合发送的数据块,同时给每一个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层。</li><li><strong>校验和：</strong> TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到端的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。</li><li><strong>流量控制：</strong> TCP 连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议。 （TCP 利用滑动窗口实现流量控制）</li><li><strong>拥塞控制：</strong> 当网络拥塞时，减少数据的发送。</li><li><strong>停止等待协议(确认应答)</strong> 也是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。</li><li><strong>超时重传：</strong> 当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。</li><li><strong>连接管理:</strong> 三次握手四次挥手,保证可靠的连接，是保证可靠性的前提。</li></ol><h2 id=\"2-停止等待协议\"><a href=\"#2-停止等待协议\" class=\"headerlink\" title=\"2. 停止等待协议\"></a>2. 停止等待协议</h2><ul><li>停止等待协议是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组；</li><li>在停止等待协议中，若接收方收到重复分组，就丢弃该分组，但同时还要发送确认；</li></ul><p><strong>1) 无差错情况:</strong></p><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-send-normal.jpg\" alt=\"normal\"></p><p>发送方发送分组,接收方在规定时间内收到,并且回复确认.发送方再次发送。</p><p><strong>2) 出现差错情况（超时重传）:</strong> [<img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-send-tiemout.jpg\" alt=\"timeout\"></p><p>停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重转时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为 <strong>自动重传请求 ARQ</strong> 。另外在停止等待协议中若收到重复分组，就丢弃该分组，但同时还要发送确认。<strong>连续 ARQ 协议</strong> 可提高信道利用率。发送维持一个发送窗口，凡位于发送窗口内的分组可连续发送出去，而不需要等待对方确认。接收方一般采用累积确认，对按序到达的最后一个分组发送确认，表明到这个分组位置的所有分组都已经正确收到了。</p><p><strong>3) 确认丢失和确认迟到</strong></p><ul><li><strong>确认丢失</strong>：当确认消息在传输过程丢失 <img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-send-lost.jpg\" alt=\"lost\">A发送M1消息，B收到后，B向A发送了一个M1确认消息，但却在传输过程中丢失。而A并不知道，在超时计时过后，A重传M1消息，B再次收到该消息后采取以下两点措施：<ol><li>丢弃这个重复的M1消息，不向上层交付。</li><li>向A发送确认消息。（不会认为已经发送过了，就不再发送。A能重传，就证明B的确认消息丢失）。</li></ol></li><li><strong>确认迟到</strong> ：确认消息在传输过程中迟到 [<img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-send-late.jpg\" alt=\"late\">A发送M1消息，B收到并发送确认。在超时时间内没有收到确认消息，A重传M1消息，B仍然收到并继续发送确认消息（B收到了2份M1）。此时A收到了B第二次发送的确认消息。接着发送其他数据。过了一会，A收到了B第一次发送的对M1的确认消息（A也收到了2份确认消息）。处理如下：<ol><li>A收到重复的确认后，直接丢弃。</li><li>B收到重复的M1后，也直接丢弃重复的M1。</li></ol></li></ul><h2 id=\"3-ARQ协议\"><a href=\"#3-ARQ协议\" class=\"headerlink\" title=\"3. ARQ协议\"></a>3. ARQ协议</h2><p>即自动重传请求 ARQ 协议(Automatic Repeat reQuest )，停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重转时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为自动重传请求ARQ。</p><p><strong>优点：</strong> 简单</p><p><strong>缺点：</strong> 信道利用率低</p><h2 id=\"4-连续ARQ协议\"><a href=\"#4-连续ARQ协议\" class=\"headerlink\" title=\"4. 连续ARQ协议\"></a>4. 连续ARQ协议</h2><p>连续 ARQ 协议可提高信道利用率。发送方维持一个发送窗口，凡位于发送窗口内的分组可以连续发送出去，而不需要等待对方确认。接收方一般采用累计确认，对按序到达的最后一个分组发送确认，表明到这个分组为止的所有分组都已经正确收到了。</p><p><strong>优点：</strong> 信道利用率高，容易实现，即使确认丢失，也不必重传。</p><p><strong>缺点：</strong> 不能向发送方反映出接收方已经正确收到的所有分组的信息。 比如：发送方发送了 5条 消息，中间第三条丢失（3号），这时接收方只能对前两个发送确认。发送方无法知道后三个分组的下落，而只好把后三个全部重传一次。这也叫 Go-Back-N（回退 N），表示需要退回来重传已经发送过的 N 个消息。</p><h2 id=\"5-流量控制\"><a href=\"#5-流量控制\" class=\"headerlink\" title=\"5. 流量控制\"></a>5. 流量控制</h2><ul><li>滑动窗口（Sliding window）是一种流量控制技术。早期的网络通信中，通信双方不会考虑网络的拥挤情况直接发送数据。由于大家不知道网络拥塞状况，同时发送数据，导致中间节点阻塞掉包，谁也发不了数据，所以就有了滑动窗口机制来解决此问题。</li><li>TCP 中采用滑动窗口来进行传输控制，滑动窗口的大小意味着接收方还有多大的缓冲区可以用于接收数据。发送方可以通过滑动窗口的大小来确定应该发送多少字节的数据。当滑动窗口为 0 时，发送方一般不能再发送数据报，但有两种情况除外，一种情况是可以发送紧急数据，例如，允许用户终止在远端机上的运行进程。另一种情况是发送方可以发送一个 1 字节的数据报来通知接收方重新声明它希望接收的下一字节及发送方的滑动窗口大小。</li><li><strong>TCP 利用滑动窗口实现流量控制的机制。</strong></li><li><strong>流量控制是为了控制发送方发送速率，保证接收方来得及接收。</strong></li><li>接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。</li></ul><h2 id=\"6-拥塞控制\"><a href=\"#6-拥塞控制\" class=\"headerlink\" title=\"6. 拥塞控制\"></a>6. 拥塞控制</h2><p><strong>防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。</strong></p><p>拥塞：即对资源的需求超过了可用的资源。若网络中许多资源同时供应不足，网络的性能就要明显变坏，整个网络的吞吐量随之负荷的增大而下降</p><p>拥塞控制所要做的都有一个<strong>前提：网络能够承受现有的网络负荷。</strong>拥塞控制是一个<strong>全局性的过程</strong>，涉及到所有的主机、路由器，以及与降低网络传输性能有关的所有因素。</p><p>几种拥塞控制方法</p><p>​ 慢开始( slow-start )、拥塞避免( congestion avoidance )、快重传( fast retransmit )和快恢复( fast recovery )。</p><p><strong>慢开始和拥塞避免</strong></p><p>​ 发送方维持一个拥塞窗口 cwnd ( congestion window )的状态变量。拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化。发送方让自己的发送窗口等于拥塞。</p><p>​ 发送方控制拥塞窗口的原则是：只要网络没有出现拥塞，拥塞窗口就再增大一些，以便把更多的分组发送出去。但只要网络出现拥塞，拥塞窗口就减小一些，以减少注入到网络中的分组数。</p><p><strong>慢开始算法：</strong>当主机开始发送数据时，如果立即所大量数据字节注入到网络，那么就有可能引起网络拥塞，因为现在并不清楚网络的负荷情况。因此，较好的方法是 先探测一下，即由小到大逐渐增大发送窗口，也就是说，由小到大逐渐增大拥塞窗口数值。</p><p><strong>拥塞避免算法：</strong>让拥塞窗口cwnd缓慢地增大，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍。这样拥塞窗口cwnd按线性规律缓慢增长，比慢开始算法的拥塞窗口增长速率缓慢得多。</p><p><strong>快重传与快恢复</strong></p><p>在 TCP/IP 中，快速重传和恢复（fast retransmit and recovery，FRR）是一种拥塞控制算法，它能快速恢复丢失的数据包。没有 FRR，如果数据包丢失了，TCP 将会使用定时器来要求传输暂停。在暂停的这段时间内，没有新的或复制的数据包被发送。有了 FRR，如果接收机接收到一个不按顺序的数据段，它会立即给发送机发送一个重复确认。如果发送机接收到三个重复确认，它会假定确认件指出的数据段丢失了，并立即重传这些丢失的数据段。有了 FRR，就不会因为重传时要求的暂停被耽误。 　当有单独的数据包丢失时，快速重传和恢复（FRR）能最有效地工作。当有多个数据信息包在某一段很短的时间内丢失时，它则不能很有效地工作。</p><h2 id=\"7-参考\"><a href=\"#7-参考\" class=\"headerlink\" title=\"7.参考\"></a>7.参考</h2><p><code>https://blog.csdn.net/liuchenxia8/article/details/80428157</code></p><p><code>https://blog.csdn.net/yangbodong22011/article/details/48473183</code></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Fri Jan 04 2019 18:24:57 GMT+0800 (GMT+08:00) --><p>本文主要叙述了TCP协议是如何保证传输的可靠性的，主要保证手段包括：<code>序列号</code>、<code>校验和</code></p><p>、<code>流量控制</code>、<code>拥塞控制</code>、<code>停止等待协议</code>、<code>超时重传</code>、<code>连接管理</code>等。</p>","more":"<blockquote><p>计算机网络系列文章</p><ul><li><a href=\"https://www.lixueduan.com/computer-network/one-network-model/\">计算机网络(一)–OSI七层模型</a></li><li><a href=\"https://www.lixueduan.com/computer-network/two-tcp-connection/\">计算机网络(二)–TCP三次握手四次挥手</a></li><li><a href=\"https://www.lixueduan.com/computer-network/three-tcp-reliability/\">计算机网络(三)–TCP如何保证传输可靠性</a></li><li><a href=\"https://www.lixueduan.com/computer-network/four-http-https/\">计算机网络(四)–HTTP与HTTPS</a></li><li><a href=\"计算机网络(五\">计算机网络(五)–从输入URL到页面加载的过程中发生了什么</a>–从输入URL到页面加载的过程中发生了什么)</li></ul></blockquote><h2 id=\"1-主要保证方式\"><a href=\"#1-主要保证方式\" class=\"headerlink\" title=\"1. 主要保证方式\"></a>1. 主要保证方式</h2><ol><li><strong>序列号:</strong>应用数据被分割成 TCP 认为最适合发送的数据块,同时给每一个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层。</li><li><strong>校验和：</strong> TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到端的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。</li><li><strong>流量控制：</strong> TCP 连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议。 （TCP 利用滑动窗口实现流量控制）</li><li><strong>拥塞控制：</strong> 当网络拥塞时，减少数据的发送。</li><li><strong>停止等待协议(确认应答)</strong> 也是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。</li><li><strong>超时重传：</strong> 当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。</li><li><strong>连接管理:</strong> 三次握手四次挥手,保证可靠的连接，是保证可靠性的前提。</li></ol><h2 id=\"2-停止等待协议\"><a href=\"#2-停止等待协议\" class=\"headerlink\" title=\"2. 停止等待协议\"></a>2. 停止等待协议</h2><ul><li>停止等待协议是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组；</li><li>在停止等待协议中，若接收方收到重复分组，就丢弃该分组，但同时还要发送确认；</li></ul><p><strong>1) 无差错情况:</strong></p><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-send-normal.jpg\" alt=\"normal\"></p><p>发送方发送分组,接收方在规定时间内收到,并且回复确认.发送方再次发送。</p><p><strong>2) 出现差错情况（超时重传）:</strong> [<img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-send-tiemout.jpg\" alt=\"timeout\"></p><p>停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重转时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为 <strong>自动重传请求 ARQ</strong> 。另外在停止等待协议中若收到重复分组，就丢弃该分组，但同时还要发送确认。<strong>连续 ARQ 协议</strong> 可提高信道利用率。发送维持一个发送窗口，凡位于发送窗口内的分组可连续发送出去，而不需要等待对方确认。接收方一般采用累积确认，对按序到达的最后一个分组发送确认，表明到这个分组位置的所有分组都已经正确收到了。</p><p><strong>3) 确认丢失和确认迟到</strong></p><ul><li><strong>确认丢失</strong>：当确认消息在传输过程丢失 <img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-send-lost.jpg\" alt=\"lost\">A发送M1消息，B收到后，B向A发送了一个M1确认消息，但却在传输过程中丢失。而A并不知道，在超时计时过后，A重传M1消息，B再次收到该消息后采取以下两点措施：<ol><li>丢弃这个重复的M1消息，不向上层交付。</li><li>向A发送确认消息。（不会认为已经发送过了，就不再发送。A能重传，就证明B的确认消息丢失）。</li></ol></li><li><strong>确认迟到</strong> ：确认消息在传输过程中迟到 [<img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-send-late.jpg\" alt=\"late\">A发送M1消息，B收到并发送确认。在超时时间内没有收到确认消息，A重传M1消息，B仍然收到并继续发送确认消息（B收到了2份M1）。此时A收到了B第二次发送的确认消息。接着发送其他数据。过了一会，A收到了B第一次发送的对M1的确认消息（A也收到了2份确认消息）。处理如下：<ol><li>A收到重复的确认后，直接丢弃。</li><li>B收到重复的M1后，也直接丢弃重复的M1。</li></ol></li></ul><h2 id=\"3-ARQ协议\"><a href=\"#3-ARQ协议\" class=\"headerlink\" title=\"3. ARQ协议\"></a>3. ARQ协议</h2><p>即自动重传请求 ARQ 协议(Automatic Repeat reQuest )，停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重转时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为自动重传请求ARQ。</p><p><strong>优点：</strong> 简单</p><p><strong>缺点：</strong> 信道利用率低</p><h2 id=\"4-连续ARQ协议\"><a href=\"#4-连续ARQ协议\" class=\"headerlink\" title=\"4. 连续ARQ协议\"></a>4. 连续ARQ协议</h2><p>连续 ARQ 协议可提高信道利用率。发送方维持一个发送窗口，凡位于发送窗口内的分组可以连续发送出去，而不需要等待对方确认。接收方一般采用累计确认，对按序到达的最后一个分组发送确认，表明到这个分组为止的所有分组都已经正确收到了。</p><p><strong>优点：</strong> 信道利用率高，容易实现，即使确认丢失，也不必重传。</p><p><strong>缺点：</strong> 不能向发送方反映出接收方已经正确收到的所有分组的信息。 比如：发送方发送了 5条 消息，中间第三条丢失（3号），这时接收方只能对前两个发送确认。发送方无法知道后三个分组的下落，而只好把后三个全部重传一次。这也叫 Go-Back-N（回退 N），表示需要退回来重传已经发送过的 N 个消息。</p><h2 id=\"5-流量控制\"><a href=\"#5-流量控制\" class=\"headerlink\" title=\"5. 流量控制\"></a>5. 流量控制</h2><ul><li>滑动窗口（Sliding window）是一种流量控制技术。早期的网络通信中，通信双方不会考虑网络的拥挤情况直接发送数据。由于大家不知道网络拥塞状况，同时发送数据，导致中间节点阻塞掉包，谁也发不了数据，所以就有了滑动窗口机制来解决此问题。</li><li>TCP 中采用滑动窗口来进行传输控制，滑动窗口的大小意味着接收方还有多大的缓冲区可以用于接收数据。发送方可以通过滑动窗口的大小来确定应该发送多少字节的数据。当滑动窗口为 0 时，发送方一般不能再发送数据报，但有两种情况除外，一种情况是可以发送紧急数据，例如，允许用户终止在远端机上的运行进程。另一种情况是发送方可以发送一个 1 字节的数据报来通知接收方重新声明它希望接收的下一字节及发送方的滑动窗口大小。</li><li><strong>TCP 利用滑动窗口实现流量控制的机制。</strong></li><li><strong>流量控制是为了控制发送方发送速率，保证接收方来得及接收。</strong></li><li>接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。</li></ul><h2 id=\"6-拥塞控制\"><a href=\"#6-拥塞控制\" class=\"headerlink\" title=\"6. 拥塞控制\"></a>6. 拥塞控制</h2><p><strong>防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。</strong></p><p>拥塞：即对资源的需求超过了可用的资源。若网络中许多资源同时供应不足，网络的性能就要明显变坏，整个网络的吞吐量随之负荷的增大而下降</p><p>拥塞控制所要做的都有一个<strong>前提：网络能够承受现有的网络负荷。</strong>拥塞控制是一个<strong>全局性的过程</strong>，涉及到所有的主机、路由器，以及与降低网络传输性能有关的所有因素。</p><p>几种拥塞控制方法</p><p>​ 慢开始( slow-start )、拥塞避免( congestion avoidance )、快重传( fast retransmit )和快恢复( fast recovery )。</p><p><strong>慢开始和拥塞避免</strong></p><p>​ 发送方维持一个拥塞窗口 cwnd ( congestion window )的状态变量。拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化。发送方让自己的发送窗口等于拥塞。</p><p>​ 发送方控制拥塞窗口的原则是：只要网络没有出现拥塞，拥塞窗口就再增大一些，以便把更多的分组发送出去。但只要网络出现拥塞，拥塞窗口就减小一些，以减少注入到网络中的分组数。</p><p><strong>慢开始算法：</strong>当主机开始发送数据时，如果立即所大量数据字节注入到网络，那么就有可能引起网络拥塞，因为现在并不清楚网络的负荷情况。因此，较好的方法是 先探测一下，即由小到大逐渐增大发送窗口，也就是说，由小到大逐渐增大拥塞窗口数值。</p><p><strong>拥塞避免算法：</strong>让拥塞窗口cwnd缓慢地增大，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍。这样拥塞窗口cwnd按线性规律缓慢增长，比慢开始算法的拥塞窗口增长速率缓慢得多。</p><p><strong>快重传与快恢复</strong></p><p>在 TCP/IP 中，快速重传和恢复（fast retransmit and recovery，FRR）是一种拥塞控制算法，它能快速恢复丢失的数据包。没有 FRR，如果数据包丢失了，TCP 将会使用定时器来要求传输暂停。在暂停的这段时间内，没有新的或复制的数据包被发送。有了 FRR，如果接收机接收到一个不按顺序的数据段，它会立即给发送机发送一个重复确认。如果发送机接收到三个重复确认，它会假定确认件指出的数据段丢失了，并立即重传这些丢失的数据段。有了 FRR，就不会因为重传时要求的暂停被耽误。 　当有单独的数据包丢失时，快速重传和恢复（FRR）能最有效地工作。当有多个数据信息包在某一段很短的时间内丢失时，它则不能很有效地工作。</p><h2 id=\"7-参考\"><a href=\"#7-参考\" class=\"headerlink\" title=\"7.参考\"></a>7.参考</h2><p><code>https://blog.csdn.net/liuchenxia8/article/details/80428157</code></p><p><code>https://blog.csdn.net/yangbodong22011/article/details/48473183</code></p><!-- rebuild by neat -->"},{"title":"Hexo个人博客之部署（三）","abbrlink":41257,"date":"2018-12-25T04:00:00.000Z","_content":"\n本章主要记录了如何将博客部署至云端，怎么设置个性域名，怎么将自己的网站提交到百度Google。让自己的网站能够出现在各大搜索引擎的具体方法和过程，希望能对大家有帮助。  \n\n<!--more-->\n\n> 这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。\n>\n> [点击阅读更多系列文章](https://www.lixueduan.com/tags/Hexo/)\n\n## 1. 购买个性域名\n\n估计大家折腾了这么久也就是为 了拥有一个自己的个性站点,所以强烈建议大家为自己的博客站点配置一个独一无二的个性域名.我这里选择阿里旗下的[万网](https://wanwang.aliyun.com/?spm=5176.8142029.735711.62.f0586d3eFXYcmo)。我的域名是[www.lixueduan.com](https://www.lixueduan.com)\n\n大家可以选择一个自己喜欢的域名。等部署完毕就可以通过域名访问自己的博客了。\n\n**问题：**\n\n- **GithubPages/CodingPages**\n\n  - Github Pages是[Github](https://github.com/)免费提供给开发者的一款托管个人网站的产品。\n  - Coding Pages也是[Coding](https://coding.net/)免费提供给开发者的一款托管个人网站的产品。\n\n- **关于为什么要部署两次**\n\n  > 虽然可以根据自定义域名来访问自己的博客了，但是百度谷歌上都搜索不到，那岂不是很难受`╮(╯▽╰)╭`。\n  >\n  > 所以接下来为了让自己的博客能够被搜索出来，就需要让百度谷歌收录我们的网站。在部署收录过程中发现，**`Github`屏蔽了百度的爬虫**，所以搭建上`GithubPages`的话无法提交至百度，只有Google可以收录。\n  >\n  > 所以为了让百度收录我们网站，就得在Coding上也搭建一个。\n  >\n  > 同时在搭建的过程中发现如果先搭建在Github上，然后再搭建Coding时会出现`DNS解析`冲突。所以需要：**先搭建Coding上的，再搭建Github上的，国外的访问则走`Github`，国内的访问会走`Coding`，完美**\n\n## 2. 部署到CodingPages\n\n### 2.1 注册coding账户 \n\n 点击这里注册Coding](https://coding.net/)\n\n### 2.2 创建新项目\n\n- 注册好后创建一个项目用来部署个人博客，项目路径和项目名称最好和用户名一致\n- ![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-deploy-coding1.png)\n\n### 2.3 开启CodingPages\n\n- ![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-deploy-coding2.png)\n\n 点击Pages服务，然后一键开启。\n\n部署master分支\n\n自定义域名 可以填两个 `www.xxx.com` 和`xxx.com`\n\n绑定自定义域名的时候需要在买域名的地方(我这里是阿里的万网)配置DNS解析\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-coding-dns.png)\n\n```java\n添加两条CNAME解析\n主机记录\n\t一个@，一个www//@就是无前缀，xxx.com, www就是www.xxx.com\n解析路线\n\t默认就行\n记录值\n\tlillusory.coding.me //这里改成自己的\n```\n\n 然后可以开启Https访问。\n\n到这里就可以通过个性域名访问啦。不过现在博客代码还没有`push`到项目里。\n\n### 2.4 Push代码到Coding\n\n**配置SSH key**\n\n首先需要配置一个`SSHkey`，`Git`有`Http`协议和`Git`协议两种。我们这里使用`Git`协议就需要配置一个`SSH key`,等会部署到`Github`上也需要配置这个。\n\n具体配置方法如下：\n\n[Git 配置及SSH key](https://www.lixueduan.com/categories/Git/)\n\n**修改站点配置文件**\n\n这里只配置了Coding，可以先把Github的注释掉\n\n```java\n# Deployment 部署到云端相关配置\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: \n   github: git@github.com:illusorycloud/illusorycloud.github.io.git\n   coding: git@git.coding.net:illusorycloud/illusorycloud.git\n  branch: master\n```\n\n**地址在这里：**\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-deploy-coding3.png)\n\n配置好后，运行`hexo g时就可以把博客部署到Coding上了，也可以通过个性域名访问了。`\n\n## 3. 收录到百度\n\n### 3.1 网站添加\n\n直接百度搜索你的域名,比如我的`www.lixueduan.com` ，如果没有收录就会提示暂未收录，点击`提交网址`。\n\n点击这个链接进入百度站长平台，登录成功后选择`用户中心-->站点管理-->添加网站 \n\n输入自己的网站，如`www.lixueduan.com` 协议头如果开启了`https`就选`https`\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-baidu1-add.png)\n\n### 3.2 网站验证\n\n然后会验证这个网站是不是你的，选CNAME验证\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-baidu2-verfication.png)\n\n然后去域名哪里添加一条解析即可。\n\n记录类型-->`CNAME`\n\n主机记录--->前面那一串`l3rUDBLOMX`\n\n记录值-->后面那个`ziyuan.baidu.com`\n\n其他的都按默认的就行了，添加后别删除，需要一直留着。\n\n### 3.3 站点地图\n\n接下来我们需要生成网站地图`sitemap`,使用sitemap方式向百度提交我们的网址\n\n站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。\n\n- 先安装一下，打开你的hexo博客根目录，分别用下面两个命令来安装针对谷歌和百度的插件\n\n```xml\nnpm install hexo-generator-sitemap --save  #sitemap.xml适合提交给谷歌搜素引擎\nnpm install hexo-generator-baidu-sitemap --save  #baidusitemap.xml适合提交百度搜索引擎\n```\n\n- 在`站点配置文件`中添加如下代码\n\n```xml\nPlugins:\n- hexo-generator-baidu-sitemap\n- hexo-generator-sitemap\n\nbaidusitemap:\n    path: baidusitemap.xml\nsitemap:\n    path: sitemap.xml\n```\n\n在你的博客根目录的public下面发现生成了sitemap.xml以及baidusitemap.xml就表示成功了.\n\n然后将博客重新部署后就可以直接访问站点地图了。如`https://www.lixueduan.com/baidusitemap.xml`\n\n然后将这个`站点地图`提交到百度\n\n`站点管理-->站点属性-->链接提交-->自动提交-->sitemap`\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-baidu3-sitemap.png)\n\n完成后就算是提交成功了，百度比较慢，要好几天才能收录。\n\n## 4. 部署到GitHub\n\n步骤和Coding差不多的。\n\n### 4.1 注册Github账号\n\n[点这里注册Github账号](https://github.com/)\n\n### 4.2 创建新仓库\n\n也是名字必须和用户名一样，必须按照这个格式`username.github.io`，例如`lillusorycloud.github.io`\n\n创建好仓库后找到`Setings`  往下拉，找到`Github Pages`  设置`Custom domain`填下自定义域名，如`www.lixueduan.com`.如果有`Enforce HTTPS `选项也可以勾上。\n\n### 4.3 Push代码到Github\n\n**配置SSH key**\n\n首先需要配置一个`SSHkey`，`Git`有`Http`协议和`Git`协议两种。我们这里使用`Git`协议就需要配置一个`SSH key`,等会部署到`Github`上也需要配置这个。\n\n具体配置方法：\n\n[Git 配置及SSH key](https://www.lixueduan.com/categories/Git/)\n\n**修改站点配置文件**\n\n`repository`中添加一个`github`\n\n```java\n# Deployment 部署到云端相关配置\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: \n    github: git@github.com:illusorycloud/illusorycloud.github.io.git\n    coding: git@git.coding.net:illusorycloud/illusorycloud.git\n  branch: master\n```\n\n配置好后，运行`hexo g时就可以把博客同时部署到Coding和Github上了，也可以通过个性域名访问了。`\n\n## 5. 收录到Google\n\n和百度差不多。\n\n### 5.1 网站添加\n\n首先进入[Google站点平台](https://www.google.com/webmasters/#?modal_active=none)\n\n然后添加资源，注意`http`和`https`\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-add.png)\n\n### 5.2 验证所有权\n\n然后验证所有权,选择DNS供应商\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-verfication1.png)\n\n\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-verfication2.png)\n\n供应商选择其他，然后选择添加CNAME记录，在域名解析中添加一条记录。也是添加后不要删除。\n\n### 5.3 站点地图\n\n验证后就可以添加站点地图了\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-sitemap.png)\n\n提交成功后,我们的站点就已经被Google收录了.大概一天就能收录成功，比百度块一些。\n\n## 6. 总结\n\n本文主要讲了怎么将博客部署到`Coding`和`Github`和怎么让`百度`,`Google`收录我们的网站。\n\n## 7.参考\n\n[Hexo官方文档](https://hexo.io/zh-cn/docs/)\n\n[基于Hexo的个人博客](https://www.jianshu.com/p/cc902b54d493)\n\n[Hex博客搭建](https://blog.csdn.net/qq_35561857/article/details/81590953)\n\n","source":"_posts/hexo/hexo-blog-deploy-three.md","raw":"---\ntitle: Hexo个人博客之部署（三）\ntags:\n  - Hexo\ncategories:\n  - Hexo\nabbrlink: 41257\ndate: 2018-12-25 12:00:00\n---\n\n本章主要记录了如何将博客部署至云端，怎么设置个性域名，怎么将自己的网站提交到百度Google。让自己的网站能够出现在各大搜索引擎的具体方法和过程，希望能对大家有帮助。  \n\n<!--more-->\n\n> 这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。\n>\n> [点击阅读更多系列文章](https://www.lixueduan.com/tags/Hexo/)\n\n## 1. 购买个性域名\n\n估计大家折腾了这么久也就是为 了拥有一个自己的个性站点,所以强烈建议大家为自己的博客站点配置一个独一无二的个性域名.我这里选择阿里旗下的[万网](https://wanwang.aliyun.com/?spm=5176.8142029.735711.62.f0586d3eFXYcmo)。我的域名是[www.lixueduan.com](https://www.lixueduan.com)\n\n大家可以选择一个自己喜欢的域名。等部署完毕就可以通过域名访问自己的博客了。\n\n**问题：**\n\n- **GithubPages/CodingPages**\n\n  - Github Pages是[Github](https://github.com/)免费提供给开发者的一款托管个人网站的产品。\n  - Coding Pages也是[Coding](https://coding.net/)免费提供给开发者的一款托管个人网站的产品。\n\n- **关于为什么要部署两次**\n\n  > 虽然可以根据自定义域名来访问自己的博客了，但是百度谷歌上都搜索不到，那岂不是很难受`╮(╯▽╰)╭`。\n  >\n  > 所以接下来为了让自己的博客能够被搜索出来，就需要让百度谷歌收录我们的网站。在部署收录过程中发现，**`Github`屏蔽了百度的爬虫**，所以搭建上`GithubPages`的话无法提交至百度，只有Google可以收录。\n  >\n  > 所以为了让百度收录我们网站，就得在Coding上也搭建一个。\n  >\n  > 同时在搭建的过程中发现如果先搭建在Github上，然后再搭建Coding时会出现`DNS解析`冲突。所以需要：**先搭建Coding上的，再搭建Github上的，国外的访问则走`Github`，国内的访问会走`Coding`，完美**\n\n## 2. 部署到CodingPages\n\n### 2.1 注册coding账户 \n\n 点击这里注册Coding](https://coding.net/)\n\n### 2.2 创建新项目\n\n- 注册好后创建一个项目用来部署个人博客，项目路径和项目名称最好和用户名一致\n- ![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-deploy-coding1.png)\n\n### 2.3 开启CodingPages\n\n- ![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-deploy-coding2.png)\n\n 点击Pages服务，然后一键开启。\n\n部署master分支\n\n自定义域名 可以填两个 `www.xxx.com` 和`xxx.com`\n\n绑定自定义域名的时候需要在买域名的地方(我这里是阿里的万网)配置DNS解析\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-coding-dns.png)\n\n```java\n添加两条CNAME解析\n主机记录\n\t一个@，一个www//@就是无前缀，xxx.com, www就是www.xxx.com\n解析路线\n\t默认就行\n记录值\n\tlillusory.coding.me //这里改成自己的\n```\n\n 然后可以开启Https访问。\n\n到这里就可以通过个性域名访问啦。不过现在博客代码还没有`push`到项目里。\n\n### 2.4 Push代码到Coding\n\n**配置SSH key**\n\n首先需要配置一个`SSHkey`，`Git`有`Http`协议和`Git`协议两种。我们这里使用`Git`协议就需要配置一个`SSH key`,等会部署到`Github`上也需要配置这个。\n\n具体配置方法如下：\n\n[Git 配置及SSH key](https://www.lixueduan.com/categories/Git/)\n\n**修改站点配置文件**\n\n这里只配置了Coding，可以先把Github的注释掉\n\n```java\n# Deployment 部署到云端相关配置\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: \n   github: git@github.com:illusorycloud/illusorycloud.github.io.git\n   coding: git@git.coding.net:illusorycloud/illusorycloud.git\n  branch: master\n```\n\n**地址在这里：**\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-deploy-coding3.png)\n\n配置好后，运行`hexo g时就可以把博客部署到Coding上了，也可以通过个性域名访问了。`\n\n## 3. 收录到百度\n\n### 3.1 网站添加\n\n直接百度搜索你的域名,比如我的`www.lixueduan.com` ，如果没有收录就会提示暂未收录，点击`提交网址`。\n\n点击这个链接进入百度站长平台，登录成功后选择`用户中心-->站点管理-->添加网站 \n\n输入自己的网站，如`www.lixueduan.com` 协议头如果开启了`https`就选`https`\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-baidu1-add.png)\n\n### 3.2 网站验证\n\n然后会验证这个网站是不是你的，选CNAME验证\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-baidu2-verfication.png)\n\n然后去域名哪里添加一条解析即可。\n\n记录类型-->`CNAME`\n\n主机记录--->前面那一串`l3rUDBLOMX`\n\n记录值-->后面那个`ziyuan.baidu.com`\n\n其他的都按默认的就行了，添加后别删除，需要一直留着。\n\n### 3.3 站点地图\n\n接下来我们需要生成网站地图`sitemap`,使用sitemap方式向百度提交我们的网址\n\n站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。\n\n- 先安装一下，打开你的hexo博客根目录，分别用下面两个命令来安装针对谷歌和百度的插件\n\n```xml\nnpm install hexo-generator-sitemap --save  #sitemap.xml适合提交给谷歌搜素引擎\nnpm install hexo-generator-baidu-sitemap --save  #baidusitemap.xml适合提交百度搜索引擎\n```\n\n- 在`站点配置文件`中添加如下代码\n\n```xml\nPlugins:\n- hexo-generator-baidu-sitemap\n- hexo-generator-sitemap\n\nbaidusitemap:\n    path: baidusitemap.xml\nsitemap:\n    path: sitemap.xml\n```\n\n在你的博客根目录的public下面发现生成了sitemap.xml以及baidusitemap.xml就表示成功了.\n\n然后将博客重新部署后就可以直接访问站点地图了。如`https://www.lixueduan.com/baidusitemap.xml`\n\n然后将这个`站点地图`提交到百度\n\n`站点管理-->站点属性-->链接提交-->自动提交-->sitemap`\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-baidu3-sitemap.png)\n\n完成后就算是提交成功了，百度比较慢，要好几天才能收录。\n\n## 4. 部署到GitHub\n\n步骤和Coding差不多的。\n\n### 4.1 注册Github账号\n\n[点这里注册Github账号](https://github.com/)\n\n### 4.2 创建新仓库\n\n也是名字必须和用户名一样，必须按照这个格式`username.github.io`，例如`lillusorycloud.github.io`\n\n创建好仓库后找到`Setings`  往下拉，找到`Github Pages`  设置`Custom domain`填下自定义域名，如`www.lixueduan.com`.如果有`Enforce HTTPS `选项也可以勾上。\n\n### 4.3 Push代码到Github\n\n**配置SSH key**\n\n首先需要配置一个`SSHkey`，`Git`有`Http`协议和`Git`协议两种。我们这里使用`Git`协议就需要配置一个`SSH key`,等会部署到`Github`上也需要配置这个。\n\n具体配置方法：\n\n[Git 配置及SSH key](https://www.lixueduan.com/categories/Git/)\n\n**修改站点配置文件**\n\n`repository`中添加一个`github`\n\n```java\n# Deployment 部署到云端相关配置\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: \n    github: git@github.com:illusorycloud/illusorycloud.github.io.git\n    coding: git@git.coding.net:illusorycloud/illusorycloud.git\n  branch: master\n```\n\n配置好后，运行`hexo g时就可以把博客同时部署到Coding和Github上了，也可以通过个性域名访问了。`\n\n## 5. 收录到Google\n\n和百度差不多。\n\n### 5.1 网站添加\n\n首先进入[Google站点平台](https://www.google.com/webmasters/#?modal_active=none)\n\n然后添加资源，注意`http`和`https`\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-add.png)\n\n### 5.2 验证所有权\n\n然后验证所有权,选择DNS供应商\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-verfication1.png)\n\n\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-verfication2.png)\n\n供应商选择其他，然后选择添加CNAME记录，在域名解析中添加一条记录。也是添加后不要删除。\n\n### 5.3 站点地图\n\n验证后就可以添加站点地图了\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-sitemap.png)\n\n提交成功后,我们的站点就已经被Google收录了.大概一天就能收录成功，比百度块一些。\n\n## 6. 总结\n\n本文主要讲了怎么将博客部署到`Coding`和`Github`和怎么让`百度`,`Google`收录我们的网站。\n\n## 7.参考\n\n[Hexo官方文档](https://hexo.io/zh-cn/docs/)\n\n[基于Hexo的个人博客](https://www.jianshu.com/p/cc902b54d493)\n\n[Hex博客搭建](https://blog.csdn.net/qq_35561857/article/details/81590953)\n\n","slug":"hexo/hexo-blog-deploy-three","published":1,"updated":"2019-01-03T11:35:39.596Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqhw7t94001gwkw4tztjmnp5","content":"<!-- build time:Fri Jan 04 2019 18:24:57 GMT+0800 (GMT+08:00) --><p>本章主要记录了如何将博客部署至云端，怎么设置个性域名，怎么将自己的网站提交到百度Google。让自己的网站能够出现在各大搜索引擎的具体方法和过程，希望能对大家有帮助。</p><a id=\"more\"></a><blockquote><p>这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。</p><p><a href=\"https://www.lixueduan.com/tags/Hexo/\">点击阅读更多系列文章</a></p></blockquote><h2 id=\"1-购买个性域名\"><a href=\"#1-购买个性域名\" class=\"headerlink\" title=\"1. 购买个性域名\"></a>1. 购买个性域名</h2><p>估计大家折腾了这么久也就是为 了拥有一个自己的个性站点,所以强烈建议大家为自己的博客站点配置一个独一无二的个性域名.我这里选择阿里旗下的<a href=\"https://wanwang.aliyun.com/?spm=5176.8142029.735711.62.f0586d3eFXYcmo\" target=\"_blank\" rel=\"noopener\">万网</a>。我的域名是<a href=\"https://www.lixueduan.com\">www.lixueduan.com</a></p><p>大家可以选择一个自己喜欢的域名。等部署完毕就可以通过域名访问自己的博客了。</p><p><strong>问题：</strong></p><ul><li><p><strong>GithubPages/CodingPages</strong></p><ul><li>Github Pages是<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">Github</a>免费提供给开发者的一款托管个人网站的产品。</li><li>Coding Pages也是<a href=\"https://coding.net/\" target=\"_blank\" rel=\"noopener\">Coding</a>免费提供给开发者的一款托管个人网站的产品。</li></ul></li><li><p><strong>关于为什么要部署两次</strong></p><blockquote><p>虽然可以根据自定义域名来访问自己的博客了，但是百度谷歌上都搜索不到，那岂不是很难受<code>╮(╯▽╰)╭</code>。</p><p>所以接下来为了让自己的博客能够被搜索出来，就需要让百度谷歌收录我们的网站。在部署收录过程中发现，<strong><code>Github</code>屏蔽了百度的爬虫</strong>，所以搭建上<code>GithubPages</code>的话无法提交至百度，只有Google可以收录。</p><p>所以为了让百度收录我们网站，就得在Coding上也搭建一个。</p><p>同时在搭建的过程中发现如果先搭建在Github上，然后再搭建Coding时会出现<code>DNS解析</code>冲突。所以需要：<strong>先搭建Coding上的，再搭建Github上的，国外的访问则走<code>Github</code>，国内的访问会走<code>Coding</code>，完美</strong></p></blockquote></li></ul><h2 id=\"2-部署到CodingPages\"><a href=\"#2-部署到CodingPages\" class=\"headerlink\" title=\"2. 部署到CodingPages\"></a>2. 部署到CodingPages</h2><h3 id=\"2-1-注册coding账户\"><a href=\"#2-1-注册coding账户\" class=\"headerlink\" title=\"2.1 注册coding账户\"></a>2.1 注册coding账户</h3><p>点击这里注册Coding](<a href=\"https://coding.net/\" target=\"_blank\" rel=\"noopener\">https://coding.net/</a>)</p><h3 id=\"2-2-创建新项目\"><a href=\"#2-2-创建新项目\" class=\"headerlink\" title=\"2.2 创建新项目\"></a>2.2 创建新项目</h3><ul><li>注册好后创建一个项目用来部署个人博客，项目路径和项目名称最好和用户名一致</li><li><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-deploy-coding1.png\" alt=\"\"></li></ul><h3 id=\"2-3-开启CodingPages\"><a href=\"#2-3-开启CodingPages\" class=\"headerlink\" title=\"2.3 开启CodingPages\"></a>2.3 开启CodingPages</h3><ul><li><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-deploy-coding2.png\" alt=\"\"></p><p>点击Pages服务，然后一键开启。</p></li></ul><p>部署master分支</p><p>自定义域名 可以填两个 <code>www.xxx.com</code> 和<code>xxx.com</code></p><p>绑定自定义域名的时候需要在买域名的地方(我这里是阿里的万网)配置DNS解析</p><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-coding-dns.png\" alt=\"\"></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">添加两条CNAME解析</span><br><span class=\"line\">主机记录</span><br><span class=\"line\">\t一个@，一个www<span class=\"comment\">//@就是无前缀，xxx.com, www就是www.xxx.com</span></span><br><span class=\"line\">解析路线</span><br><span class=\"line\">\t默认就行</span><br><span class=\"line\">记录值</span><br><span class=\"line\">\tlillusory.coding.me <span class=\"comment\">//这里改成自己的</span></span><br></pre></td></tr></table></figure><p>然后可以开启Https访问。</p><p>到这里就可以通过个性域名访问啦。不过现在博客代码还没有<code>push</code>到项目里。</p><h3 id=\"2-4-Push代码到Coding\"><a href=\"#2-4-Push代码到Coding\" class=\"headerlink\" title=\"2.4 Push代码到Coding\"></a>2.4 Push代码到Coding</h3><p><strong>配置SSH key</strong></p><p>首先需要配置一个<code>SSHkey</code>，<code>Git</code>有<code>Http</code>协议和<code>Git</code>协议两种。我们这里使用<code>Git</code>协议就需要配置一个<code>SSH key</code>,等会部署到<code>Github</code>上也需要配置这个。</p><p>具体配置方法如下：</p><p><a href=\"https://www.lixueduan.com/categories/Git/\">Git 配置及SSH key</a></p><p><strong>修改站点配置文件</strong></p><p>这里只配置了Coding，可以先把Github的注释掉</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment 部署到云端相关配置</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: </span><br><span class=\"line\">   github: git<span class=\"meta\">@github</span>.com:illusorycloud/illusorycloud.github.io.git</span><br><span class=\"line\">   coding: git<span class=\"meta\">@git</span>.coding.net:illusorycloud/illusorycloud.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure><p><strong>地址在这里：</strong></p><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-deploy-coding3.png\" alt=\"\"></p><p>配置好后，运行<code>hexo g时就可以把博客部署到Coding上了，也可以通过个性域名访问了。</code></p><h2 id=\"3-收录到百度\"><a href=\"#3-收录到百度\" class=\"headerlink\" title=\"3. 收录到百度\"></a>3. 收录到百度</h2><h3 id=\"3-1-网站添加\"><a href=\"#3-1-网站添加\" class=\"headerlink\" title=\"3.1 网站添加\"></a>3.1 网站添加</h3><p>直接百度搜索你的域名,比如我的<code>www.lixueduan.com</code> ，如果没有收录就会提示暂未收录，点击<code>提交网址</code>。</p><p>点击这个链接进入百度站长平台，登录成功后选择`用户中心–&gt;站点管理–&gt;添加网站</p><p>输入自己的网站，如<code>www.lixueduan.com</code> 协议头如果开启了<code>https</code>就选<code>https</code></p><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-baidu1-add.png\" alt=\"\"></p><h3 id=\"3-2-网站验证\"><a href=\"#3-2-网站验证\" class=\"headerlink\" title=\"3.2 网站验证\"></a>3.2 网站验证</h3><p>然后会验证这个网站是不是你的，选CNAME验证</p><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-baidu2-verfication.png\" alt=\"\"></p><p>然后去域名哪里添加一条解析即可。</p><p>记录类型–&gt;<code>CNAME</code></p><p>主机记录—&gt;前面那一串<code>l3rUDBLOMX</code></p><p>记录值–&gt;后面那个<code>ziyuan.baidu.com</code></p><p>其他的都按默认的就行了，添加后别删除，需要一直留着。</p><h3 id=\"3-3-站点地图\"><a href=\"#3-3-站点地图\" class=\"headerlink\" title=\"3.3 站点地图\"></a>3.3 站点地图</h3><p>接下来我们需要生成网站地图<code>sitemap</code>,使用sitemap方式向百度提交我们的网址</p><p>站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。</p><ul><li>先安装一下，打开你的hexo博客根目录，分别用下面两个命令来安装针对谷歌和百度的插件</li></ul><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap --save  #sitemap.xml适合提交给谷歌搜素引擎</span><br><span class=\"line\">npm install hexo-generator-baidu-sitemap --save  #baidusitemap.xml适合提交百度搜索引擎</span><br></pre></td></tr></table></figure><ul><li>在<code>站点配置文件</code>中添加如下代码</li></ul><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Plugins:</span><br><span class=\"line\">- hexo-generator-baidu-sitemap</span><br><span class=\"line\">- hexo-generator-sitemap</span><br><span class=\"line\"></span><br><span class=\"line\">baidusitemap:</span><br><span class=\"line\">    path: baidusitemap.xml</span><br><span class=\"line\">sitemap:</span><br><span class=\"line\">    path: sitemap.xml</span><br></pre></td></tr></table></figure><p>在你的博客根目录的public下面发现生成了sitemap.xml以及baidusitemap.xml就表示成功了.</p><p>然后将博客重新部署后就可以直接访问站点地图了。如<code>https://www.lixueduan.com/baidusitemap.xml</code></p><p>然后将这个<code>站点地图</code>提交到百度</p><p><code>站点管理--&gt;站点属性--&gt;链接提交--&gt;自动提交--&gt;sitemap</code></p><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-baidu3-sitemap.png\" alt=\"\"></p><p>完成后就算是提交成功了，百度比较慢，要好几天才能收录。</p><h2 id=\"4-部署到GitHub\"><a href=\"#4-部署到GitHub\" class=\"headerlink\" title=\"4. 部署到GitHub\"></a>4. 部署到GitHub</h2><p>步骤和Coding差不多的。</p><h3 id=\"4-1-注册Github账号\"><a href=\"#4-1-注册Github账号\" class=\"headerlink\" title=\"4.1 注册Github账号\"></a>4.1 注册Github账号</h3><p><a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">点这里注册Github账号</a></p><h3 id=\"4-2-创建新仓库\"><a href=\"#4-2-创建新仓库\" class=\"headerlink\" title=\"4.2 创建新仓库\"></a>4.2 创建新仓库</h3><p>也是名字必须和用户名一样，必须按照这个格式<code>username.github.io</code>，例如<code>lillusorycloud.github.io</code></p><p>创建好仓库后找到<code>Setings</code> 往下拉，找到<code>Github Pages</code> 设置<code>Custom domain</code>填下自定义域名，如<code>www.lixueduan.com</code>.如果有<code>Enforce HTTPS</code>选项也可以勾上。</p><h3 id=\"4-3-Push代码到Github\"><a href=\"#4-3-Push代码到Github\" class=\"headerlink\" title=\"4.3 Push代码到Github\"></a>4.3 Push代码到Github</h3><p><strong>配置SSH key</strong></p><p>首先需要配置一个<code>SSHkey</code>，<code>Git</code>有<code>Http</code>协议和<code>Git</code>协议两种。我们这里使用<code>Git</code>协议就需要配置一个<code>SSH key</code>,等会部署到<code>Github</code>上也需要配置这个。</p><p>具体配置方法：</p><p><a href=\"https://www.lixueduan.com/categories/Git/\">Git 配置及SSH key</a></p><p><strong>修改站点配置文件</strong></p><p><code>repository</code>中添加一个<code>github</code></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment 部署到云端相关配置</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: </span><br><span class=\"line\">    github: git<span class=\"meta\">@github</span>.com:illusorycloud/illusorycloud.github.io.git</span><br><span class=\"line\">    coding: git<span class=\"meta\">@git</span>.coding.net:illusorycloud/illusorycloud.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure><p>配置好后，运行<code>hexo g时就可以把博客同时部署到Coding和Github上了，也可以通过个性域名访问了。</code></p><h2 id=\"5-收录到Google\"><a href=\"#5-收录到Google\" class=\"headerlink\" title=\"5. 收录到Google\"></a>5. 收录到Google</h2><p>和百度差不多。</p><h3 id=\"5-1-网站添加\"><a href=\"#5-1-网站添加\" class=\"headerlink\" title=\"5.1 网站添加\"></a>5.1 网站添加</h3><p>首先进入<a href=\"https://www.google.com/webmasters/#?modal_active=none\" target=\"_blank\" rel=\"noopener\">Google站点平台</a></p><p>然后添加资源，注意<code>http</code>和<code>https</code></p><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-add.png\" alt=\"\"></p><h3 id=\"5-2-验证所有权\"><a href=\"#5-2-验证所有权\" class=\"headerlink\" title=\"5.2 验证所有权\"></a>5.2 验证所有权</h3><p>然后验证所有权,选择DNS供应商</p><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-verfication1.png\" alt=\"\"></p><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-verfication2.png\" alt=\"\"></p><p>供应商选择其他，然后选择添加CNAME记录，在域名解析中添加一条记录。也是添加后不要删除。</p><h3 id=\"5-3-站点地图\"><a href=\"#5-3-站点地图\" class=\"headerlink\" title=\"5.3 站点地图\"></a>5.3 站点地图</h3><p>验证后就可以添加站点地图了</p><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-sitemap.png\" alt=\"\"></p><p>提交成功后,我们的站点就已经被Google收录了.大概一天就能收录成功，比百度块一些。</p><h2 id=\"6-总结\"><a href=\"#6-总结\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h2><p>本文主要讲了怎么将博客部署到<code>Coding</code>和<code>Github</code>和怎么让<code>百度</code>,<code>Google</code>收录我们的网站。</p><h2 id=\"7-参考\"><a href=\"#7-参考\" class=\"headerlink\" title=\"7.参考\"></a>7.参考</h2><p><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo官方文档</a></p><p><a href=\"https://www.jianshu.com/p/cc902b54d493\" target=\"_blank\" rel=\"noopener\">基于Hexo的个人博客</a></p><p><a href=\"https://blog.csdn.net/qq_35561857/article/details/81590953\" target=\"_blank\" rel=\"noopener\">Hex博客搭建</a></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Fri Jan 04 2019 18:24:57 GMT+0800 (GMT+08:00) --><p>本章主要记录了如何将博客部署至云端，怎么设置个性域名，怎么将自己的网站提交到百度Google。让自己的网站能够出现在各大搜索引擎的具体方法和过程，希望能对大家有帮助。</p>","more":"<blockquote><p>这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。</p><p><a href=\"https://www.lixueduan.com/tags/Hexo/\">点击阅读更多系列文章</a></p></blockquote><h2 id=\"1-购买个性域名\"><a href=\"#1-购买个性域名\" class=\"headerlink\" title=\"1. 购买个性域名\"></a>1. 购买个性域名</h2><p>估计大家折腾了这么久也就是为 了拥有一个自己的个性站点,所以强烈建议大家为自己的博客站点配置一个独一无二的个性域名.我这里选择阿里旗下的<a href=\"https://wanwang.aliyun.com/?spm=5176.8142029.735711.62.f0586d3eFXYcmo\" target=\"_blank\" rel=\"noopener\">万网</a>。我的域名是<a href=\"https://www.lixueduan.com\">www.lixueduan.com</a></p><p>大家可以选择一个自己喜欢的域名。等部署完毕就可以通过域名访问自己的博客了。</p><p><strong>问题：</strong></p><ul><li><p><strong>GithubPages/CodingPages</strong></p><ul><li>Github Pages是<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">Github</a>免费提供给开发者的一款托管个人网站的产品。</li><li>Coding Pages也是<a href=\"https://coding.net/\" target=\"_blank\" rel=\"noopener\">Coding</a>免费提供给开发者的一款托管个人网站的产品。</li></ul></li><li><p><strong>关于为什么要部署两次</strong></p><blockquote><p>虽然可以根据自定义域名来访问自己的博客了，但是百度谷歌上都搜索不到，那岂不是很难受<code>╮(╯▽╰)╭</code>。</p><p>所以接下来为了让自己的博客能够被搜索出来，就需要让百度谷歌收录我们的网站。在部署收录过程中发现，<strong><code>Github</code>屏蔽了百度的爬虫</strong>，所以搭建上<code>GithubPages</code>的话无法提交至百度，只有Google可以收录。</p><p>所以为了让百度收录我们网站，就得在Coding上也搭建一个。</p><p>同时在搭建的过程中发现如果先搭建在Github上，然后再搭建Coding时会出现<code>DNS解析</code>冲突。所以需要：<strong>先搭建Coding上的，再搭建Github上的，国外的访问则走<code>Github</code>，国内的访问会走<code>Coding</code>，完美</strong></p></blockquote></li></ul><h2 id=\"2-部署到CodingPages\"><a href=\"#2-部署到CodingPages\" class=\"headerlink\" title=\"2. 部署到CodingPages\"></a>2. 部署到CodingPages</h2><h3 id=\"2-1-注册coding账户\"><a href=\"#2-1-注册coding账户\" class=\"headerlink\" title=\"2.1 注册coding账户\"></a>2.1 注册coding账户</h3><p>点击这里注册Coding](<a href=\"https://coding.net/\" target=\"_blank\" rel=\"noopener\">https://coding.net/</a>)</p><h3 id=\"2-2-创建新项目\"><a href=\"#2-2-创建新项目\" class=\"headerlink\" title=\"2.2 创建新项目\"></a>2.2 创建新项目</h3><ul><li>注册好后创建一个项目用来部署个人博客，项目路径和项目名称最好和用户名一致</li><li><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-deploy-coding1.png\" alt=\"\"></li></ul><h3 id=\"2-3-开启CodingPages\"><a href=\"#2-3-开启CodingPages\" class=\"headerlink\" title=\"2.3 开启CodingPages\"></a>2.3 开启CodingPages</h3><ul><li><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-deploy-coding2.png\" alt=\"\"></p><p>点击Pages服务，然后一键开启。</p></li></ul><p>部署master分支</p><p>自定义域名 可以填两个 <code>www.xxx.com</code> 和<code>xxx.com</code></p><p>绑定自定义域名的时候需要在买域名的地方(我这里是阿里的万网)配置DNS解析</p><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-coding-dns.png\" alt=\"\"></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">添加两条CNAME解析</span><br><span class=\"line\">主机记录</span><br><span class=\"line\">\t一个@，一个www<span class=\"comment\">//@就是无前缀，xxx.com, www就是www.xxx.com</span></span><br><span class=\"line\">解析路线</span><br><span class=\"line\">\t默认就行</span><br><span class=\"line\">记录值</span><br><span class=\"line\">\tlillusory.coding.me <span class=\"comment\">//这里改成自己的</span></span><br></pre></td></tr></table></figure><p>然后可以开启Https访问。</p><p>到这里就可以通过个性域名访问啦。不过现在博客代码还没有<code>push</code>到项目里。</p><h3 id=\"2-4-Push代码到Coding\"><a href=\"#2-4-Push代码到Coding\" class=\"headerlink\" title=\"2.4 Push代码到Coding\"></a>2.4 Push代码到Coding</h3><p><strong>配置SSH key</strong></p><p>首先需要配置一个<code>SSHkey</code>，<code>Git</code>有<code>Http</code>协议和<code>Git</code>协议两种。我们这里使用<code>Git</code>协议就需要配置一个<code>SSH key</code>,等会部署到<code>Github</code>上也需要配置这个。</p><p>具体配置方法如下：</p><p><a href=\"https://www.lixueduan.com/categories/Git/\">Git 配置及SSH key</a></p><p><strong>修改站点配置文件</strong></p><p>这里只配置了Coding，可以先把Github的注释掉</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment 部署到云端相关配置</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: </span><br><span class=\"line\">   github: git<span class=\"meta\">@github</span>.com:illusorycloud/illusorycloud.github.io.git</span><br><span class=\"line\">   coding: git<span class=\"meta\">@git</span>.coding.net:illusorycloud/illusorycloud.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure><p><strong>地址在这里：</strong></p><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-deploy-coding3.png\" alt=\"\"></p><p>配置好后，运行<code>hexo g时就可以把博客部署到Coding上了，也可以通过个性域名访问了。</code></p><h2 id=\"3-收录到百度\"><a href=\"#3-收录到百度\" class=\"headerlink\" title=\"3. 收录到百度\"></a>3. 收录到百度</h2><h3 id=\"3-1-网站添加\"><a href=\"#3-1-网站添加\" class=\"headerlink\" title=\"3.1 网站添加\"></a>3.1 网站添加</h3><p>直接百度搜索你的域名,比如我的<code>www.lixueduan.com</code> ，如果没有收录就会提示暂未收录，点击<code>提交网址</code>。</p><p>点击这个链接进入百度站长平台，登录成功后选择`用户中心–&gt;站点管理–&gt;添加网站</p><p>输入自己的网站，如<code>www.lixueduan.com</code> 协议头如果开启了<code>https</code>就选<code>https</code></p><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-baidu1-add.png\" alt=\"\"></p><h3 id=\"3-2-网站验证\"><a href=\"#3-2-网站验证\" class=\"headerlink\" title=\"3.2 网站验证\"></a>3.2 网站验证</h3><p>然后会验证这个网站是不是你的，选CNAME验证</p><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-baidu2-verfication.png\" alt=\"\"></p><p>然后去域名哪里添加一条解析即可。</p><p>记录类型–&gt;<code>CNAME</code></p><p>主机记录—&gt;前面那一串<code>l3rUDBLOMX</code></p><p>记录值–&gt;后面那个<code>ziyuan.baidu.com</code></p><p>其他的都按默认的就行了，添加后别删除，需要一直留着。</p><h3 id=\"3-3-站点地图\"><a href=\"#3-3-站点地图\" class=\"headerlink\" title=\"3.3 站点地图\"></a>3.3 站点地图</h3><p>接下来我们需要生成网站地图<code>sitemap</code>,使用sitemap方式向百度提交我们的网址</p><p>站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。</p><ul><li>先安装一下，打开你的hexo博客根目录，分别用下面两个命令来安装针对谷歌和百度的插件</li></ul><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap --save  #sitemap.xml适合提交给谷歌搜素引擎</span><br><span class=\"line\">npm install hexo-generator-baidu-sitemap --save  #baidusitemap.xml适合提交百度搜索引擎</span><br></pre></td></tr></table></figure><ul><li>在<code>站点配置文件</code>中添加如下代码</li></ul><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Plugins:</span><br><span class=\"line\">- hexo-generator-baidu-sitemap</span><br><span class=\"line\">- hexo-generator-sitemap</span><br><span class=\"line\"></span><br><span class=\"line\">baidusitemap:</span><br><span class=\"line\">    path: baidusitemap.xml</span><br><span class=\"line\">sitemap:</span><br><span class=\"line\">    path: sitemap.xml</span><br></pre></td></tr></table></figure><p>在你的博客根目录的public下面发现生成了sitemap.xml以及baidusitemap.xml就表示成功了.</p><p>然后将博客重新部署后就可以直接访问站点地图了。如<code>https://www.lixueduan.com/baidusitemap.xml</code></p><p>然后将这个<code>站点地图</code>提交到百度</p><p><code>站点管理--&gt;站点属性--&gt;链接提交--&gt;自动提交--&gt;sitemap</code></p><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-baidu3-sitemap.png\" alt=\"\"></p><p>完成后就算是提交成功了，百度比较慢，要好几天才能收录。</p><h2 id=\"4-部署到GitHub\"><a href=\"#4-部署到GitHub\" class=\"headerlink\" title=\"4. 部署到GitHub\"></a>4. 部署到GitHub</h2><p>步骤和Coding差不多的。</p><h3 id=\"4-1-注册Github账号\"><a href=\"#4-1-注册Github账号\" class=\"headerlink\" title=\"4.1 注册Github账号\"></a>4.1 注册Github账号</h3><p><a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">点这里注册Github账号</a></p><h3 id=\"4-2-创建新仓库\"><a href=\"#4-2-创建新仓库\" class=\"headerlink\" title=\"4.2 创建新仓库\"></a>4.2 创建新仓库</h3><p>也是名字必须和用户名一样，必须按照这个格式<code>username.github.io</code>，例如<code>lillusorycloud.github.io</code></p><p>创建好仓库后找到<code>Setings</code> 往下拉，找到<code>Github Pages</code> 设置<code>Custom domain</code>填下自定义域名，如<code>www.lixueduan.com</code>.如果有<code>Enforce HTTPS</code>选项也可以勾上。</p><h3 id=\"4-3-Push代码到Github\"><a href=\"#4-3-Push代码到Github\" class=\"headerlink\" title=\"4.3 Push代码到Github\"></a>4.3 Push代码到Github</h3><p><strong>配置SSH key</strong></p><p>首先需要配置一个<code>SSHkey</code>，<code>Git</code>有<code>Http</code>协议和<code>Git</code>协议两种。我们这里使用<code>Git</code>协议就需要配置一个<code>SSH key</code>,等会部署到<code>Github</code>上也需要配置这个。</p><p>具体配置方法：</p><p><a href=\"https://www.lixueduan.com/categories/Git/\">Git 配置及SSH key</a></p><p><strong>修改站点配置文件</strong></p><p><code>repository</code>中添加一个<code>github</code></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment 部署到云端相关配置</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: </span><br><span class=\"line\">    github: git<span class=\"meta\">@github</span>.com:illusorycloud/illusorycloud.github.io.git</span><br><span class=\"line\">    coding: git<span class=\"meta\">@git</span>.coding.net:illusorycloud/illusorycloud.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure><p>配置好后，运行<code>hexo g时就可以把博客同时部署到Coding和Github上了，也可以通过个性域名访问了。</code></p><h2 id=\"5-收录到Google\"><a href=\"#5-收录到Google\" class=\"headerlink\" title=\"5. 收录到Google\"></a>5. 收录到Google</h2><p>和百度差不多。</p><h3 id=\"5-1-网站添加\"><a href=\"#5-1-网站添加\" class=\"headerlink\" title=\"5.1 网站添加\"></a>5.1 网站添加</h3><p>首先进入<a href=\"https://www.google.com/webmasters/#?modal_active=none\" target=\"_blank\" rel=\"noopener\">Google站点平台</a></p><p>然后添加资源，注意<code>http</code>和<code>https</code></p><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-add.png\" alt=\"\"></p><h3 id=\"5-2-验证所有权\"><a href=\"#5-2-验证所有权\" class=\"headerlink\" title=\"5.2 验证所有权\"></a>5.2 验证所有权</h3><p>然后验证所有权,选择DNS供应商</p><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-verfication1.png\" alt=\"\"></p><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-verfication2.png\" alt=\"\"></p><p>供应商选择其他，然后选择添加CNAME记录，在域名解析中添加一条记录。也是添加后不要删除。</p><h3 id=\"5-3-站点地图\"><a href=\"#5-3-站点地图\" class=\"headerlink\" title=\"5.3 站点地图\"></a>5.3 站点地图</h3><p>验证后就可以添加站点地图了</p><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-sitemap.png\" alt=\"\"></p><p>提交成功后,我们的站点就已经被Google收录了.大概一天就能收录成功，比百度块一些。</p><h2 id=\"6-总结\"><a href=\"#6-总结\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h2><p>本文主要讲了怎么将博客部署到<code>Coding</code>和<code>Github</code>和怎么让<code>百度</code>,<code>Google</code>收录我们的网站。</p><h2 id=\"7-参考\"><a href=\"#7-参考\" class=\"headerlink\" title=\"7.参考\"></a>7.参考</h2><p><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo官方文档</a></p><p><a href=\"https://www.jianshu.com/p/cc902b54d493\" target=\"_blank\" rel=\"noopener\">基于Hexo的个人博客</a></p><p><a href=\"https://blog.csdn.net/qq_35561857/article/details/81590953\" target=\"_blank\" rel=\"noopener\">Hex博客搭建</a></p><!-- rebuild by neat -->"},{"title":"Hexo个人博客之优化（二）","abbrlink":58273,"date":"2018-12-22T14:00:00.000Z","_content":"\n本章主要包含了博客主题优化相关内容，第三方服务和插件的配置与使用。如：炫酷头像动态背景、链接变色、鼠标点击效果、站点字数、访客数统计等。\n\n<!--more-->\n\n> 这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。\n>\n> [点击阅读更多系列文章](https://www.lixueduan.com/tags/Hexo/)\n>\n\n### 0. 选择主题\n\n你可以点击这里选择你喜欢的[Themes](https://hexo.io/themes/),里面有大量美观的主题 \n\n我这里用的是简约著称的`Next`主题.\n\n- 下载主题\n  - 使用`git`命令下载该主题到本地.\n  - `git clone https://github.com/theme-next/hexo-theme-next themes/next`  \n  - clone成功后,你的Themes文件夹下就会有next主题文件了.\n- Hexo配置文件:\n  - 都叫`_config.yml `\n  - 一份位于站点根目录下，主要包含 Hexo 本身的配置,称为 `站点配置文件`\n  - 另一份位于主题目录下主要用于配置主题相关的选项,称为`主题配置文件`\n- 开启主题\n  - `站点配置文件`进行修改: 将`theme: landscape`修改为 `theme: next` \n\n### 1. 侧边栏头像设置\n\n新版next注意引入了该功能,直接在`主题配置文件`修改即可,如下:\n\n```yml\n# Sidebar Avatar 头像\navatar:\n  url: /images/avatar.gif\n  # 圆形头像\n  rounded: true\n  # 透明度 0~1之间\n  opacity: 1\n  # 头像旋转\n  rotated: true\n```\n\n### 2. 设置个人社交图标链接\n\n直接在`主题配置文件`修改即可,如下:\n\n```yml\n# Social Links. 社交链接 前面为链接地址 后面是图标 \nsocial:\n  GitHub: https://github.com/illusorycloud || github\n  E-Mail: mailto:xueduan.li@gmail.com || envelope\n  #Weibo: https://weibo.com/yourname || weibo\n  #Google: https://plus.google.com/yourname || google\n  #Twitter: https://twitter.com/yourname || twitter\n  #FB Page: https://www.facebook.com/yourname || facebook\n  #VK Group: https://vk.com/yourname || vk\n  #StackOverflow: https://stackoverflow.com/yourname || stack-overflow\n  #YouTube: https://youtube.com/yourname || youtube\n  #Instagram: https://instagram.com/yourname || instagram\n  #Skype: skype:yourname?call|chat || skype\n# 图标配置 \nsocial_icons:\n  #是否显示图标\n  enable: true\n  #是否只显示图标\n  icons_only: false\n  #是否开启图标变化(就是刷新后会变颜色)\n  transition: false\n```\n\n### 3. 添加菜单项\n\n1.先在`主题配置文件`修改\n\n```yml\nmenu:\n  home: / || home\n  about: /about/ || user\n  tags: /tags/ || tags\n  categories: /categories/ || th\n  archives: /archives/ || archive\n  AAAAA: /BBBBB/ || CCC\n其中AAA 为菜单项的名字,BBB是路径,CCC是菜单项显示的图标 \n```\n\n `next` 使用的是 [Font Awesome](http://fontawesome.io/) 提供的图标 ,在这里可以选择自己喜欢的图标.\n\n2.生成上述路径的文件\n\n`git`命令行输入\n\n`hexo new page BBB` --其中BBB替换为具体的名字,会在`站点目录\\source`下新增一个BBB文件夹,文件夹中有一个`index.md`文件，需要在文件头中增加一句`type: XXX`,例如`type: categories`。这样就会在这个页面显示所有的分类了。\n\n3.修改主题文件下的对应语言的配置文件,这里是中文就修改`zh-CN.yml`\n\n```yml\nmenu:\n  home: 首页\n  archives: 归档\n  AAAA : XXXX\nAAA为上边的菜单项名字,XXX为中文的名字\n```\n\n### 4. 添加RSS\n\n- 1.安装插件\n\n  - 首先在Git中运行`npm install --save hexo-generator-feed`命令,安装插件,插件会放在\n\n    `node_modules`文件夹里面.\n\n- 2.修改`站点配置文件`\n\n  - 安装好插件后,打开站点配置文件_config.yml`,在末尾加入以下代码:\n\n```yml\n# Extensions\n## Plugins: http://hexo.io/plugins/\nplugins: hexo-generate-feed\n```\n\n- 3.修改`主题配置文件`\n  - 打开主题配置文件`_config.yml`,找到`rss` 添加配置:`rss: /atom.xml` \n\n### 5. 设置酷炫动态背景\n\nnext主题提供了两种背景可以选择.\n\n- 第一种背景（我是用的这种）\n\n新版本的next主题的话直接在主题配置文件中,找到`canvas-nest` 修改为`canvas-nest: true`,\n\n```yml\n# Canvas-nest\n# Dependencies: https://github.com/theme-next/theme-next-canvas-nest\ncanvas_nest:\n  enable: true\n  onmobile: true # display on mobile or not\n  color: '0,0,255' # RGB values, use ',' to separate\n  opacity: 0.5 # the opacity of line: 0~1\n  zIndex: -1 # z-index property of the background\n  count: 99 # the number of lines\n```\n\n进入theme/next目录\n\n 执行命令`git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest `\n\n- 第二种背景\n\n```yml\n# JavaScript 3D library.\n# Dependencies: https://github.com/theme-next/theme-next-three\n# three_waves\nthree_waves: false\n# canvas_lines\ncanvas_lines: false\n# canvas_sphere\ncanvas_sphere: false\n```\n\n也是需要下载依赖 \n\n1. 进入theme/next目录\n2. 执行命令：`git clone https://github.com/theme-next/theme-next-three source/lib/three`\n\n**4个背景中只能开启一种背景,不然会出错**\n\n### 6. 设置网站logo\n\n把你的图片放在`themes/next/source/images`里 \n\n打开`主题配置文件`_config.yml ,找到字段`favicon:`  都修改为对应路径\n\n```yml\nfavicon:\n  small: /images/favicon-16x16-next.png\n  medium: /images/favicon-32x32-next.png\n  apple_touch_icon: /images/apple-touch-icon-next.png\n  safari_pinned_tab: /images/logo.svg\n```\n\n### 7. 实现点击出现桃心效果\n\n`themes/next/source/js/src`里面 新建一个love.js,\n\n复制下面的代码进去\n\n```javascript\n!function(e,t,a){function n(){c(\".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}\"),o(),r()}function r(){for(var e=0;e<d.length;e++)d[e].alpha<=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=\"left:\"+d[e].x+\"px;top:\"+d[e].y+\"px;opacity:\"+d[e].alpha+\";transform:scale(\"+d[e].scale+\",\"+d[e].scale+\") rotate(45deg);background:\"+d[e].color+\";z-index:99999\");requestAnimationFrame(r)}function o(){var t=\"function\"==typeof e.onclick&&e.onclick;e.onclick=function(e){t&&t(),i(e)}}function i(e){var a=t.createElement(\"div\");a.className=\"heart\",d.push({el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()}),t.body.appendChild(a)}function c(e){var a=t.createElement(\"style\");a.type=\"text/css\";try{a.appendChild(t.createTextNode(e))}catch(t){a.styleSheet.cssText=e}t.getElementsByTagName(\"head\")[0].appendChild(a)}function s(){return\"rgb(\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\")\"}var d=[];e.requestAnimationFrame=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e){setTimeout(e,1e3/60)}}(),n()}(window,document);\n\n```\n\n然后打开`\\themes\\next\\layout\\_layout.swig`文件,在末尾 添加以下代码： \n\n```html\n<!-- 页面点击小红心 -->\n<script type=\"text/javascript\" src=\"/js/src/love.js\"></script>\n```\n\n### 8. 修改文章内链接文本样式\n\n鼠标移动到连接上变颜色\n\n修改文件 `themes\\next\\source\\css\\_common\\components\\post\\post.styl`，在末尾添加如下css样式，：\n\n```css\n// 文章内链接文本样式\n.post-body p a{\n  color: #0593d3;\n  border-bottom: none;\n  border-bottom: 1px solid #0593d3;\n  &:hover {\n    color: #fc6423;\n    border-bottom: none;\n    border-bottom: 1px solid #fc6423;\n  }\n}\n```\n\n### 9. 设置顶部滚动加载条\n\n打开`next\\layout\\_partials\\head`文件，在文件末尾添加以下代码: \n\n```html\n<script src=\"//cdn.bootcss.com/pace/1.0.2/pace.min.js\"></script>\n<link href=\"//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css\" rel=\"stylesheet\">\n<style>\n    .pace .pace-progress {\n        background: #1E92FB; /*进度条颜色*/\n        height: 3px;\n    }\n    .pace .pace-progress-inner {\n         box-shadow: 0 0 10px #1E92FB, 0 0 5px     #1E92FB; /*阴影颜色*/\n    }\n    .pace .pace-activity {\n        border-top-color: #1E92FB;    /*上边框颜色*/\n        border-left-color: #1E92FB;    /*左边框颜色*/\n    }\n</style>\n```\n\n### 10. 在每篇文章末尾统一添加“本文结束”标记\n\n在路径 `\\themes\\next\\layout\\_macro` 中新建 `page-end-tag.swig` 文件,并添加以下内容： \n\n```html\n<!--文字可以自己修改-->\n<div>\n    {% if not is_index %}\n        <div style=\"text-align:center;color: #A2CD5A;font-size:15px;\">------------------本文到此结束<i class=\"fa fa-paw\"></i>感谢您的阅读------------------</div>\n    {% endif %}\n</div>\n```\n\n接着打开`\\themes\\next\\layout\\_macro\\post.swig`文件，在`post-body` 之后， `post-footer` 之前添加下面的代码 \n\n```html\n<div>\n  {% if not is_index %}\n    {% include 'page-end-tag.swig' %}\n  {% endif %}\n</div>\n```\n\n然后打开主题配置文件（`_config.yml`),在末尾添加： \n\n```yml\n# 文章末尾添加“本文结束”标记\npage_end_tag:\n  enabled: true\n```\n\n### 11. 静态资源压缩\n\nHexo自动生成的html中有很多空白的地方,会影响加载速度,所以最好还是压缩一下.\n\n这里使用`hexo-neat`插件来压缩。\n\n- 安装插件\n\n  - `npm install hexo-neat --save`\n\n- 在`站点配置文件`添加配置\n\n  - ```yml\n    # hexo-neat\n    # 博文压缩\n    neat_enable: true\n    # 压缩html\n    neat_html:\n      enable: true\n      exclude:\n      \n    # 压缩css  跳过min.css\n    neat_css:\n      enable: true\n      exclude:\n        - '**/*.min.css'\n        \n    # 压缩js 跳过min.js\n    neat_js:\n      enable: true\n      mangle: true\n      output:\n      compress:\n      exclude:\n        - '**/*.min.js'\n        - '**/jquery.fancybox.pack.js'\n        - '**/index.js'  \n        - '**/love.js'\n    # 压缩博文配置结束\n    ```\n\n- 3.使用 \n\n  - 以后再执行`hexo g`命令时就会自动压缩了\n\n### 12. 主页文章添加阴影效果\n\n打开`\\themes\\next\\source\\css\\_custom\\custom.styl`,向里面加入： \n\n```js\n// 主页文章添加阴影效果\n .post {\n   margin-top: 60px;\n   margin-bottom: 60px;\n   padding: 25px;\n   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);\n   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);\n  }\n```\n\n### 13. 修改文章底部的的标签样式\n\n打开模板文件`/themes/next/layout/_macro/post.swig`，找到`rel=\"tag\">#`字段， 将`# 换成<i class=\"fa fa-tag\"></i>`,其中tag是你选择标签图标的名字,也是可以自定义的 \n\n```html\n<a href=\"{{ url_for(tag.path) }}\" rel=\"tag\"> <i class=\"fa fa-tag\"></i> {{ tag.name }}</a>\n```\n\n### 14. 实现文章字数统计和预计阅读时间 \n\n1.在站点根目录下使用`GitBash`命令安装 `hexo-wordcoun`t插件:\n\n```java\nnpm install hexo-symbols-count-time --save\n```\n\n2.在全局配置文件`_config.yml`中激活插件:\n\n```yml\nsymbols_count_time:\n    symbols: true\n    time: true\n    total_symbols: true\n    total_time: true\n```\n\n3.在主题的配置文件`_config.yml`中进行如下配置:\n\n```yml\n#字数统计\nsymbols_count_time:\n  separated_meta: true\n  item_text_post: true\n  item_text_total: true\n  awl: 4\n  wpm: 275\n```\n\n到此,我们就实现了文章字数统计和预估时间的显示功能\n\n### 15. 在文章底部增加版权信息\n\n修改`主题配置文件`,找到`creative_commons`字段\n\n```yml\n# Creative Commons 4.0 International License.\n# https://creativecommons.org/share-your-work/licensing-types-examples\n# Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero\ncreative_commons:\n  #选择一个License\n  license: by-nc-sa\n  #是否在侧边栏显示\n  sidebar: false  \n  #是否在文章末尾显示\n  post: true   \n```\n\n### 16. 文章置顶\n\n打开文件：`node_modules/hexo-generator-index/lib/generator.js`,将原来的代码用下面的代码替换掉\n\n```js\n'use strict';\nvar pagination = require('hexo-pagination');\nmodule.exports = function(locals){\n  var config = this.config;\n  var posts = locals.posts;\n    posts.data = posts.data.sort(function(a, b) {\n        if(a.top && b.top) { // 两篇文章top都有定义\n            if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排\n            else return b.top - a.top; // 否则按照top值降序排\n        }\n        else if(a.top && !b.top) { // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）\n            return -1;\n        }\n        else if(!a.top && b.top) {\n            return 1;\n        }\n        else return b.date - a.date; // 都没定义按照文章日期降序排\n    });\n  var paginationDir = config.pagination_dir || 'page';\n  return pagination('', posts, {\n    perPage: config.index_generator.per_page,\n    layout: ['index', 'archive'],\n    format: paginationDir + '/%d/',\n    data: {\n      __index: true\n    }\n  });\n};\n```\n\n写文章的时候,在标题加上top值,数值越大排在越前面.\n\n```md\ntag: hexo \ncopyright: true\npassword: xxx\ntop: 150\n```\n\n### 17. 在网站底部加上访问量\n\n**Next主题配置这个就比较方便了**\n\n打开`主题配置文件`，找到如下配置：\n\n```yml\nbusuanzi_count:\n  enable: true\n  total_visitors: true\n  total_visitors_icon: user\n  total_views: true\n  total_views_icon: eye\n  post_views: true\n  post_views_icon: eye\n```\n\n将`enable`的值由`false`改为`true`，便可以看到页脚出现访问量.\n\n另外本地预览时访客数异常是正常的,部署至云端后就不会出现这样的问题.\n\n### 18. 网站搜索功能\n\n1.安装插件\n\n​\t站点目录下执行命令`npm install hexo-generator-searchdb --save`\n\n2.修改`站点配置文件` \n\n```yml\nsearch:\n  path: search.xml\n  field: post\n  format: html\n  limit: 10000\n```\n\n3.修改`主题配置文件`\n\n```yml\n# Local search\n# Dependencies: https://github.com/theme-next/hexo-generator-searchdb\nlocal_search:\n  enable: enable\n  # if auto, trigger search by changing input\n  # if manual, trigger search by pressing enter key or search button\n  trigger: auto\n  # show top n results per article, show all results by setting to -1\n  top_n_per_article: 1\n  # unescape html strings to the readable one\n  unescape: false\n```\n\n重新开启服务后即可看到效果。\n\n### TODO开启留言评论功能\n\n//TODO 待更新\n\n### 参考\n\n[Hexo官方文档](https://hexo.io/zh-cn/docs/)\n\n[Next官方文档](http://theme-next.iissnan.com/)\n\n\n\n\n\n\n\n","source":"_posts/hexo/hexo-blog-config-two.md","raw":"---\ntitle: Hexo个人博客之优化（二）\ntags:\n  - Hexo\ncategories:\n  - Hexo\nabbrlink: 58273\ndate: 2018-12-22 22:00:00\n---\n\n本章主要包含了博客主题优化相关内容，第三方服务和插件的配置与使用。如：炫酷头像动态背景、链接变色、鼠标点击效果、站点字数、访客数统计等。\n\n<!--more-->\n\n> 这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。\n>\n> [点击阅读更多系列文章](https://www.lixueduan.com/tags/Hexo/)\n>\n\n### 0. 选择主题\n\n你可以点击这里选择你喜欢的[Themes](https://hexo.io/themes/),里面有大量美观的主题 \n\n我这里用的是简约著称的`Next`主题.\n\n- 下载主题\n  - 使用`git`命令下载该主题到本地.\n  - `git clone https://github.com/theme-next/hexo-theme-next themes/next`  \n  - clone成功后,你的Themes文件夹下就会有next主题文件了.\n- Hexo配置文件:\n  - 都叫`_config.yml `\n  - 一份位于站点根目录下，主要包含 Hexo 本身的配置,称为 `站点配置文件`\n  - 另一份位于主题目录下主要用于配置主题相关的选项,称为`主题配置文件`\n- 开启主题\n  - `站点配置文件`进行修改: 将`theme: landscape`修改为 `theme: next` \n\n### 1. 侧边栏头像设置\n\n新版next注意引入了该功能,直接在`主题配置文件`修改即可,如下:\n\n```yml\n# Sidebar Avatar 头像\navatar:\n  url: /images/avatar.gif\n  # 圆形头像\n  rounded: true\n  # 透明度 0~1之间\n  opacity: 1\n  # 头像旋转\n  rotated: true\n```\n\n### 2. 设置个人社交图标链接\n\n直接在`主题配置文件`修改即可,如下:\n\n```yml\n# Social Links. 社交链接 前面为链接地址 后面是图标 \nsocial:\n  GitHub: https://github.com/illusorycloud || github\n  E-Mail: mailto:xueduan.li@gmail.com || envelope\n  #Weibo: https://weibo.com/yourname || weibo\n  #Google: https://plus.google.com/yourname || google\n  #Twitter: https://twitter.com/yourname || twitter\n  #FB Page: https://www.facebook.com/yourname || facebook\n  #VK Group: https://vk.com/yourname || vk\n  #StackOverflow: https://stackoverflow.com/yourname || stack-overflow\n  #YouTube: https://youtube.com/yourname || youtube\n  #Instagram: https://instagram.com/yourname || instagram\n  #Skype: skype:yourname?call|chat || skype\n# 图标配置 \nsocial_icons:\n  #是否显示图标\n  enable: true\n  #是否只显示图标\n  icons_only: false\n  #是否开启图标变化(就是刷新后会变颜色)\n  transition: false\n```\n\n### 3. 添加菜单项\n\n1.先在`主题配置文件`修改\n\n```yml\nmenu:\n  home: / || home\n  about: /about/ || user\n  tags: /tags/ || tags\n  categories: /categories/ || th\n  archives: /archives/ || archive\n  AAAAA: /BBBBB/ || CCC\n其中AAA 为菜单项的名字,BBB是路径,CCC是菜单项显示的图标 \n```\n\n `next` 使用的是 [Font Awesome](http://fontawesome.io/) 提供的图标 ,在这里可以选择自己喜欢的图标.\n\n2.生成上述路径的文件\n\n`git`命令行输入\n\n`hexo new page BBB` --其中BBB替换为具体的名字,会在`站点目录\\source`下新增一个BBB文件夹,文件夹中有一个`index.md`文件，需要在文件头中增加一句`type: XXX`,例如`type: categories`。这样就会在这个页面显示所有的分类了。\n\n3.修改主题文件下的对应语言的配置文件,这里是中文就修改`zh-CN.yml`\n\n```yml\nmenu:\n  home: 首页\n  archives: 归档\n  AAAA : XXXX\nAAA为上边的菜单项名字,XXX为中文的名字\n```\n\n### 4. 添加RSS\n\n- 1.安装插件\n\n  - 首先在Git中运行`npm install --save hexo-generator-feed`命令,安装插件,插件会放在\n\n    `node_modules`文件夹里面.\n\n- 2.修改`站点配置文件`\n\n  - 安装好插件后,打开站点配置文件_config.yml`,在末尾加入以下代码:\n\n```yml\n# Extensions\n## Plugins: http://hexo.io/plugins/\nplugins: hexo-generate-feed\n```\n\n- 3.修改`主题配置文件`\n  - 打开主题配置文件`_config.yml`,找到`rss` 添加配置:`rss: /atom.xml` \n\n### 5. 设置酷炫动态背景\n\nnext主题提供了两种背景可以选择.\n\n- 第一种背景（我是用的这种）\n\n新版本的next主题的话直接在主题配置文件中,找到`canvas-nest` 修改为`canvas-nest: true`,\n\n```yml\n# Canvas-nest\n# Dependencies: https://github.com/theme-next/theme-next-canvas-nest\ncanvas_nest:\n  enable: true\n  onmobile: true # display on mobile or not\n  color: '0,0,255' # RGB values, use ',' to separate\n  opacity: 0.5 # the opacity of line: 0~1\n  zIndex: -1 # z-index property of the background\n  count: 99 # the number of lines\n```\n\n进入theme/next目录\n\n 执行命令`git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest `\n\n- 第二种背景\n\n```yml\n# JavaScript 3D library.\n# Dependencies: https://github.com/theme-next/theme-next-three\n# three_waves\nthree_waves: false\n# canvas_lines\ncanvas_lines: false\n# canvas_sphere\ncanvas_sphere: false\n```\n\n也是需要下载依赖 \n\n1. 进入theme/next目录\n2. 执行命令：`git clone https://github.com/theme-next/theme-next-three source/lib/three`\n\n**4个背景中只能开启一种背景,不然会出错**\n\n### 6. 设置网站logo\n\n把你的图片放在`themes/next/source/images`里 \n\n打开`主题配置文件`_config.yml ,找到字段`favicon:`  都修改为对应路径\n\n```yml\nfavicon:\n  small: /images/favicon-16x16-next.png\n  medium: /images/favicon-32x32-next.png\n  apple_touch_icon: /images/apple-touch-icon-next.png\n  safari_pinned_tab: /images/logo.svg\n```\n\n### 7. 实现点击出现桃心效果\n\n`themes/next/source/js/src`里面 新建一个love.js,\n\n复制下面的代码进去\n\n```javascript\n!function(e,t,a){function n(){c(\".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}\"),o(),r()}function r(){for(var e=0;e<d.length;e++)d[e].alpha<=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=\"left:\"+d[e].x+\"px;top:\"+d[e].y+\"px;opacity:\"+d[e].alpha+\";transform:scale(\"+d[e].scale+\",\"+d[e].scale+\") rotate(45deg);background:\"+d[e].color+\";z-index:99999\");requestAnimationFrame(r)}function o(){var t=\"function\"==typeof e.onclick&&e.onclick;e.onclick=function(e){t&&t(),i(e)}}function i(e){var a=t.createElement(\"div\");a.className=\"heart\",d.push({el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()}),t.body.appendChild(a)}function c(e){var a=t.createElement(\"style\");a.type=\"text/css\";try{a.appendChild(t.createTextNode(e))}catch(t){a.styleSheet.cssText=e}t.getElementsByTagName(\"head\")[0].appendChild(a)}function s(){return\"rgb(\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\")\"}var d=[];e.requestAnimationFrame=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e){setTimeout(e,1e3/60)}}(),n()}(window,document);\n\n```\n\n然后打开`\\themes\\next\\layout\\_layout.swig`文件,在末尾 添加以下代码： \n\n```html\n<!-- 页面点击小红心 -->\n<script type=\"text/javascript\" src=\"/js/src/love.js\"></script>\n```\n\n### 8. 修改文章内链接文本样式\n\n鼠标移动到连接上变颜色\n\n修改文件 `themes\\next\\source\\css\\_common\\components\\post\\post.styl`，在末尾添加如下css样式，：\n\n```css\n// 文章内链接文本样式\n.post-body p a{\n  color: #0593d3;\n  border-bottom: none;\n  border-bottom: 1px solid #0593d3;\n  &:hover {\n    color: #fc6423;\n    border-bottom: none;\n    border-bottom: 1px solid #fc6423;\n  }\n}\n```\n\n### 9. 设置顶部滚动加载条\n\n打开`next\\layout\\_partials\\head`文件，在文件末尾添加以下代码: \n\n```html\n<script src=\"//cdn.bootcss.com/pace/1.0.2/pace.min.js\"></script>\n<link href=\"//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css\" rel=\"stylesheet\">\n<style>\n    .pace .pace-progress {\n        background: #1E92FB; /*进度条颜色*/\n        height: 3px;\n    }\n    .pace .pace-progress-inner {\n         box-shadow: 0 0 10px #1E92FB, 0 0 5px     #1E92FB; /*阴影颜色*/\n    }\n    .pace .pace-activity {\n        border-top-color: #1E92FB;    /*上边框颜色*/\n        border-left-color: #1E92FB;    /*左边框颜色*/\n    }\n</style>\n```\n\n### 10. 在每篇文章末尾统一添加“本文结束”标记\n\n在路径 `\\themes\\next\\layout\\_macro` 中新建 `page-end-tag.swig` 文件,并添加以下内容： \n\n```html\n<!--文字可以自己修改-->\n<div>\n    {% if not is_index %}\n        <div style=\"text-align:center;color: #A2CD5A;font-size:15px;\">------------------本文到此结束<i class=\"fa fa-paw\"></i>感谢您的阅读------------------</div>\n    {% endif %}\n</div>\n```\n\n接着打开`\\themes\\next\\layout\\_macro\\post.swig`文件，在`post-body` 之后， `post-footer` 之前添加下面的代码 \n\n```html\n<div>\n  {% if not is_index %}\n    {% include 'page-end-tag.swig' %}\n  {% endif %}\n</div>\n```\n\n然后打开主题配置文件（`_config.yml`),在末尾添加： \n\n```yml\n# 文章末尾添加“本文结束”标记\npage_end_tag:\n  enabled: true\n```\n\n### 11. 静态资源压缩\n\nHexo自动生成的html中有很多空白的地方,会影响加载速度,所以最好还是压缩一下.\n\n这里使用`hexo-neat`插件来压缩。\n\n- 安装插件\n\n  - `npm install hexo-neat --save`\n\n- 在`站点配置文件`添加配置\n\n  - ```yml\n    # hexo-neat\n    # 博文压缩\n    neat_enable: true\n    # 压缩html\n    neat_html:\n      enable: true\n      exclude:\n      \n    # 压缩css  跳过min.css\n    neat_css:\n      enable: true\n      exclude:\n        - '**/*.min.css'\n        \n    # 压缩js 跳过min.js\n    neat_js:\n      enable: true\n      mangle: true\n      output:\n      compress:\n      exclude:\n        - '**/*.min.js'\n        - '**/jquery.fancybox.pack.js'\n        - '**/index.js'  \n        - '**/love.js'\n    # 压缩博文配置结束\n    ```\n\n- 3.使用 \n\n  - 以后再执行`hexo g`命令时就会自动压缩了\n\n### 12. 主页文章添加阴影效果\n\n打开`\\themes\\next\\source\\css\\_custom\\custom.styl`,向里面加入： \n\n```js\n// 主页文章添加阴影效果\n .post {\n   margin-top: 60px;\n   margin-bottom: 60px;\n   padding: 25px;\n   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);\n   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);\n  }\n```\n\n### 13. 修改文章底部的的标签样式\n\n打开模板文件`/themes/next/layout/_macro/post.swig`，找到`rel=\"tag\">#`字段， 将`# 换成<i class=\"fa fa-tag\"></i>`,其中tag是你选择标签图标的名字,也是可以自定义的 \n\n```html\n<a href=\"{{ url_for(tag.path) }}\" rel=\"tag\"> <i class=\"fa fa-tag\"></i> {{ tag.name }}</a>\n```\n\n### 14. 实现文章字数统计和预计阅读时间 \n\n1.在站点根目录下使用`GitBash`命令安装 `hexo-wordcoun`t插件:\n\n```java\nnpm install hexo-symbols-count-time --save\n```\n\n2.在全局配置文件`_config.yml`中激活插件:\n\n```yml\nsymbols_count_time:\n    symbols: true\n    time: true\n    total_symbols: true\n    total_time: true\n```\n\n3.在主题的配置文件`_config.yml`中进行如下配置:\n\n```yml\n#字数统计\nsymbols_count_time:\n  separated_meta: true\n  item_text_post: true\n  item_text_total: true\n  awl: 4\n  wpm: 275\n```\n\n到此,我们就实现了文章字数统计和预估时间的显示功能\n\n### 15. 在文章底部增加版权信息\n\n修改`主题配置文件`,找到`creative_commons`字段\n\n```yml\n# Creative Commons 4.0 International License.\n# https://creativecommons.org/share-your-work/licensing-types-examples\n# Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero\ncreative_commons:\n  #选择一个License\n  license: by-nc-sa\n  #是否在侧边栏显示\n  sidebar: false  \n  #是否在文章末尾显示\n  post: true   \n```\n\n### 16. 文章置顶\n\n打开文件：`node_modules/hexo-generator-index/lib/generator.js`,将原来的代码用下面的代码替换掉\n\n```js\n'use strict';\nvar pagination = require('hexo-pagination');\nmodule.exports = function(locals){\n  var config = this.config;\n  var posts = locals.posts;\n    posts.data = posts.data.sort(function(a, b) {\n        if(a.top && b.top) { // 两篇文章top都有定义\n            if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排\n            else return b.top - a.top; // 否则按照top值降序排\n        }\n        else if(a.top && !b.top) { // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）\n            return -1;\n        }\n        else if(!a.top && b.top) {\n            return 1;\n        }\n        else return b.date - a.date; // 都没定义按照文章日期降序排\n    });\n  var paginationDir = config.pagination_dir || 'page';\n  return pagination('', posts, {\n    perPage: config.index_generator.per_page,\n    layout: ['index', 'archive'],\n    format: paginationDir + '/%d/',\n    data: {\n      __index: true\n    }\n  });\n};\n```\n\n写文章的时候,在标题加上top值,数值越大排在越前面.\n\n```md\ntag: hexo \ncopyright: true\npassword: xxx\ntop: 150\n```\n\n### 17. 在网站底部加上访问量\n\n**Next主题配置这个就比较方便了**\n\n打开`主题配置文件`，找到如下配置：\n\n```yml\nbusuanzi_count:\n  enable: true\n  total_visitors: true\n  total_visitors_icon: user\n  total_views: true\n  total_views_icon: eye\n  post_views: true\n  post_views_icon: eye\n```\n\n将`enable`的值由`false`改为`true`，便可以看到页脚出现访问量.\n\n另外本地预览时访客数异常是正常的,部署至云端后就不会出现这样的问题.\n\n### 18. 网站搜索功能\n\n1.安装插件\n\n​\t站点目录下执行命令`npm install hexo-generator-searchdb --save`\n\n2.修改`站点配置文件` \n\n```yml\nsearch:\n  path: search.xml\n  field: post\n  format: html\n  limit: 10000\n```\n\n3.修改`主题配置文件`\n\n```yml\n# Local search\n# Dependencies: https://github.com/theme-next/hexo-generator-searchdb\nlocal_search:\n  enable: enable\n  # if auto, trigger search by changing input\n  # if manual, trigger search by pressing enter key or search button\n  trigger: auto\n  # show top n results per article, show all results by setting to -1\n  top_n_per_article: 1\n  # unescape html strings to the readable one\n  unescape: false\n```\n\n重新开启服务后即可看到效果。\n\n### TODO开启留言评论功能\n\n//TODO 待更新\n\n### 参考\n\n[Hexo官方文档](https://hexo.io/zh-cn/docs/)\n\n[Next官方文档](http://theme-next.iissnan.com/)\n\n\n\n\n\n\n\n","slug":"hexo/hexo-blog-config-two","published":1,"updated":"2019-01-03T11:32:08.985Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqhw7t96001jwkw4mcdnus2b","content":"<!-- build time:Fri Jan 04 2019 18:24:57 GMT+0800 (GMT+08:00) --><p>本章主要包含了博客主题优化相关内容，第三方服务和插件的配置与使用。如：炫酷头像动态背景、链接变色、鼠标点击效果、站点字数、访客数统计等。</p><a id=\"more\"></a><blockquote><p>这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。</p><p><a href=\"https://www.lixueduan.com/tags/Hexo/\">点击阅读更多系列文章</a></p></blockquote><h3 id=\"0-选择主题\"><a href=\"#0-选择主题\" class=\"headerlink\" title=\"0. 选择主题\"></a>0. 选择主题</h3><p>你可以点击这里选择你喜欢的<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">Themes</a>,里面有大量美观的主题</p><p>我这里用的是简约著称的<code>Next</code>主题.</p><ul><li>下载主题<ul><li>使用<code>git</code>命令下载该主题到本地.</li><li><code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code></li><li>clone成功后,你的Themes文件夹下就会有next主题文件了.</li></ul></li><li>Hexo配置文件:<ul><li>都叫<code>_config.yml</code></li><li>一份位于站点根目录下，主要包含 Hexo 本身的配置,称为 <code>站点配置文件</code></li><li>另一份位于主题目录下主要用于配置主题相关的选项,称为<code>主题配置文件</code></li></ul></li><li>开启主题<ul><li><code>站点配置文件</code>进行修改: 将<code>theme: landscape</code>修改为 <code>theme: next</code></li></ul></li></ul><h3 id=\"1-侧边栏头像设置\"><a href=\"#1-侧边栏头像设置\" class=\"headerlink\" title=\"1. 侧边栏头像设置\"></a>1. 侧边栏头像设置</h3><p>新版next注意引入了该功能,直接在<code>主题配置文件</code>修改即可,如下:</p><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Sidebar Avatar 头像</span></span><br><span class=\"line\"><span class=\"attr\">avatar:</span></span><br><span class=\"line\"><span class=\"attr\">  url:</span> <span class=\"string\">/images/avatar.gif</span></span><br><span class=\"line\">  <span class=\"comment\"># 圆形头像</span></span><br><span class=\"line\"><span class=\"attr\">  rounded:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># 透明度 0~1之间</span></span><br><span class=\"line\"><span class=\"attr\">  opacity:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\"># 头像旋转</span></span><br><span class=\"line\"><span class=\"attr\">  rotated:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure><h3 id=\"2-设置个人社交图标链接\"><a href=\"#2-设置个人社交图标链接\" class=\"headerlink\" title=\"2. 设置个人社交图标链接\"></a>2. 设置个人社交图标链接</h3><p>直接在<code>主题配置文件</code>修改即可,如下:</p><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Social Links. 社交链接 前面为链接地址 后面是图标 </span></span><br><span class=\"line\"><span class=\"attr\">social:</span></span><br><span class=\"line\"><span class=\"attr\">  GitHub:</span> <span class=\"attr\">https://github.com/illusorycloud</span> <span class=\"string\">||</span> <span class=\"string\">github</span></span><br><span class=\"line\"><span class=\"attr\">  E-Mail:</span> <span class=\"attr\">mailto:xueduan.li@gmail.com</span> <span class=\"string\">||</span> <span class=\"string\">envelope</span></span><br><span class=\"line\">  <span class=\"comment\">#Weibo: https://weibo.com/yourname || weibo</span></span><br><span class=\"line\">  <span class=\"comment\">#Google: https://plus.google.com/yourname || google</span></span><br><span class=\"line\">  <span class=\"comment\">#Twitter: https://twitter.com/yourname || twitter</span></span><br><span class=\"line\">  <span class=\"comment\">#FB Page: https://www.facebook.com/yourname || facebook</span></span><br><span class=\"line\">  <span class=\"comment\">#VK Group: https://vk.com/yourname || vk</span></span><br><span class=\"line\">  <span class=\"comment\">#StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span></span><br><span class=\"line\">  <span class=\"comment\">#YouTube: https://youtube.com/yourname || youtube</span></span><br><span class=\"line\">  <span class=\"comment\">#Instagram: https://instagram.com/yourname || instagram</span></span><br><span class=\"line\">  <span class=\"comment\">#Skype: skype:yourname?call|chat || skype</span></span><br><span class=\"line\"><span class=\"comment\"># 图标配置 </span></span><br><span class=\"line\"><span class=\"attr\">social_icons:</span></span><br><span class=\"line\">  <span class=\"comment\">#是否显示图标</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\">#是否只显示图标</span></span><br><span class=\"line\"><span class=\"attr\">  icons_only:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\">#是否开启图标变化(就是刷新后会变颜色)</span></span><br><span class=\"line\"><span class=\"attr\">  transition:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure><h3 id=\"3-添加菜单项\"><a href=\"#3-添加菜单项\" class=\"headerlink\" title=\"3. 添加菜单项\"></a>3. 添加菜单项</h3><p>1.先在<code>主题配置文件</code>修改</p><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\"><span class=\"attr\">  home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">home</span></span><br><span class=\"line\"><span class=\"attr\">  about:</span> <span class=\"string\">/about/</span> <span class=\"string\">||</span> <span class=\"string\">user</span></span><br><span class=\"line\"><span class=\"attr\">  tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">tags</span></span><br><span class=\"line\"><span class=\"attr\">  categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">th</span></span><br><span class=\"line\"><span class=\"attr\">  archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">archive</span></span><br><span class=\"line\"><span class=\"attr\">  AAAAA:</span> <span class=\"string\">/BBBBB/</span> <span class=\"string\">||</span> <span class=\"string\">CCC</span></span><br><span class=\"line\"><span class=\"string\">其中AAA</span> <span class=\"string\">为菜单项的名字,BBB是路径,CCC是菜单项显示的图标</span></span><br></pre></td></tr></table></figure><p><code>next</code> 使用的是 <a href=\"http://fontawesome.io/\" target=\"_blank\" rel=\"noopener\">Font Awesome</a> 提供的图标 ,在这里可以选择自己喜欢的图标.</p><p>2.生成上述路径的文件</p><p><code>git</code>命令行输入</p><p><code>hexo new page BBB</code> –其中BBB替换为具体的名字,会在<code>站点目录\\source</code>下新增一个BBB文件夹,文件夹中有一个<code>index.md</code>文件，需要在文件头中增加一句<code>type: XXX</code>,例如<code>type: categories</code>。这样就会在这个页面显示所有的分类了。</p><p>3.修改主题文件下的对应语言的配置文件,这里是中文就修改<code>zh-CN.yml</code></p><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\"><span class=\"attr\">  home:</span> <span class=\"string\">首页</span></span><br><span class=\"line\"><span class=\"attr\">  archives:</span> <span class=\"string\">归档</span></span><br><span class=\"line\">  <span class=\"string\">AAAA</span> <span class=\"string\">:</span> <span class=\"string\">XXXX</span></span><br><span class=\"line\"><span class=\"string\">AAA为上边的菜单项名字,XXX为中文的名字</span></span><br></pre></td></tr></table></figure><h3 id=\"4-添加RSS\"><a href=\"#4-添加RSS\" class=\"headerlink\" title=\"4. 添加RSS\"></a>4. 添加RSS</h3><ul><li><p>1.安装插件</p><ul><li><p>首先在Git中运行<code>npm install --save hexo-generator-feed</code>命令,安装插件,插件会放在</p><p><code>node_modules</code>文件夹里面.</p></li></ul></li><li><p>2.修改<code>站点配置文件</code></p><ul><li>安装好插件后,打开站点配置文件_config.yml`,在末尾加入以下代码:</li></ul></li></ul><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: http://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"attr\">plugins:</span> <span class=\"string\">hexo-generate-feed</span></span><br></pre></td></tr></table></figure><ul><li>3.修改<code>主题配置文件</code><ul><li>打开主题配置文件<code>_config.yml</code>,找到<code>rss</code> 添加配置:<code>rss: /atom.xml</code></li></ul></li></ul><h3 id=\"5-设置酷炫动态背景\"><a href=\"#5-设置酷炫动态背景\" class=\"headerlink\" title=\"5. 设置酷炫动态背景\"></a>5. 设置酷炫动态背景</h3><p>next主题提供了两种背景可以选择.</p><ul><li>第一种背景（我是用的这种）</li></ul><p>新版本的next主题的话直接在主题配置文件中,找到<code>canvas-nest</code> 修改为<code>canvas-nest: true</code>,</p><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Canvas-nest</span></span><br><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span></span><br><span class=\"line\"><span class=\"attr\">canvas_nest:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  onmobile:</span> <span class=\"literal\">true</span> <span class=\"comment\"># display on mobile or not</span></span><br><span class=\"line\"><span class=\"attr\">  color:</span> <span class=\"string\">'0,0,255'</span> <span class=\"comment\"># RGB values, use ',' to separate</span></span><br><span class=\"line\"><span class=\"attr\">  opacity:</span> <span class=\"number\">0.5</span> <span class=\"comment\"># the opacity of line: 0~1</span></span><br><span class=\"line\"><span class=\"attr\">  zIndex:</span> <span class=\"bullet\">-1</span> <span class=\"comment\"># z-index property of the background</span></span><br><span class=\"line\"><span class=\"attr\">  count:</span> <span class=\"number\">99</span> <span class=\"comment\"># the number of lines</span></span><br></pre></td></tr></table></figure><p>进入theme/next目录</p><p>执行命令<code>git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest</code></p><ul><li>第二种背景</li></ul><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># JavaScript 3D library.</span></span><br><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/theme-next/theme-next-three</span></span><br><span class=\"line\"><span class=\"comment\"># three_waves</span></span><br><span class=\"line\"><span class=\"attr\">three_waves:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># canvas_lines</span></span><br><span class=\"line\"><span class=\"attr\">canvas_lines:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># canvas_sphere</span></span><br><span class=\"line\"><span class=\"attr\">canvas_sphere:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure><p>也是需要下载依赖</p><ol><li>进入theme/next目录</li><li>执行命令：<code>git clone https://github.com/theme-next/theme-next-three source/lib/three</code></li></ol><p><strong>4个背景中只能开启一种背景,不然会出错</strong></p><h3 id=\"6-设置网站logo\"><a href=\"#6-设置网站logo\" class=\"headerlink\" title=\"6. 设置网站logo\"></a>6. 设置网站logo</h3><p>把你的图片放在<code>themes/next/source/images</code>里</p><p>打开<code>主题配置文件</code>_config.yml ,找到字段<code>favicon:</code> 都修改为对应路径</p><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">favicon:</span></span><br><span class=\"line\"><span class=\"attr\">  small:</span> <span class=\"string\">/images/favicon-16x16-next.png</span></span><br><span class=\"line\"><span class=\"attr\">  medium:</span> <span class=\"string\">/images/favicon-32x32-next.png</span></span><br><span class=\"line\"><span class=\"attr\">  apple_touch_icon:</span> <span class=\"string\">/images/apple-touch-icon-next.png</span></span><br><span class=\"line\"><span class=\"attr\">  safari_pinned_tab:</span> <span class=\"string\">/images/logo.svg</span></span><br></pre></td></tr></table></figure><h3 id=\"7-实现点击出现桃心效果\"><a href=\"#7-实现点击出现桃心效果\" class=\"headerlink\" title=\"7. 实现点击出现桃心效果\"></a>7. 实现点击出现桃心效果</h3><p><code>themes/next/source/js/src</code>里面 新建一个love.js,</p><p>复制下面的代码进去</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e,t,a</span>)</span>&#123;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">n</span>(<span class=\"params\"></span>)</span>&#123;c(<span class=\"string\">\".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;\"</span>),o(),r()&#125;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">r</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> e=<span class=\"number\">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class=\"number\">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class=\"number\">1</span>)):(d[e].y--,d[e].scale+=<span class=\"number\">.004</span>,d[e].alpha-=<span class=\"number\">.013</span>,d[e].el.style.cssText=<span class=\"string\">\"left:\"</span>+d[e].x+<span class=\"string\">\"px;top:\"</span>+d[e].y+<span class=\"string\">\"px;opacity:\"</span>+d[e].alpha+<span class=\"string\">\";transform:scale(\"</span>+d[e].scale+<span class=\"string\">\",\"</span>+d[e].scale+<span class=\"string\">\") rotate(45deg);background:\"</span>+d[e].color+<span class=\"string\">\";z-index:99999\"</span>);requestAnimationFrame(r)&#125;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">o</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">var</span> t=<span class=\"string\">\"function\"</span>==<span class=\"keyword\">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">i</span>(<span class=\"params\">e</span>)</span>&#123;<span class=\"keyword\">var</span> a=t.createElement(<span class=\"string\">\"div\"</span>);a.className=<span class=\"string\">\"heart\"</span>,d.push(&#123;<span class=\"attr\">el</span>:a,<span class=\"attr\">x</span>:e.clientX<span class=\"number\">-5</span>,<span class=\"attr\">y</span>:e.clientY<span class=\"number\">-5</span>,<span class=\"attr\">scale</span>:<span class=\"number\">1</span>,<span class=\"attr\">alpha</span>:<span class=\"number\">1</span>,<span class=\"attr\">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\">e</span>)</span>&#123;<span class=\"keyword\">var</span> a=t.createElement(<span class=\"string\">\"style\"</span>);a.type=<span class=\"string\">\"text/css\"</span>;<span class=\"keyword\">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class=\"keyword\">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class=\"string\">\"head\"</span>)[<span class=\"number\">0</span>].appendChild(a)&#125;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">s</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span><span class=\"string\">\"rgb(\"</span>+~~(<span class=\"number\">255</span>*<span class=\"built_in\">Math</span>.random())+<span class=\"string\">\",\"</span>+~~(<span class=\"number\">255</span>*<span class=\"built_in\">Math</span>.random())+<span class=\"string\">\",\"</span>+~~(<span class=\"number\">255</span>*<span class=\"built_in\">Math</span>.random())+<span class=\"string\">\")\"</span>&#125;<span class=\"keyword\">var</span> d=[];e.requestAnimationFrame=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;setTimeout(e,<span class=\"number\">1e3</span>/<span class=\"number\">60</span>)&#125;&#125;(),n()&#125;(<span class=\"built_in\">window</span>,<span class=\"built_in\">document</span>);</span><br></pre></td></tr></table></figure><p>然后打开<code>\\themes\\next\\layout\\_layout.swig</code>文件,在末尾 添加以下代码：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 页面点击小红心 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/js/src/love.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id=\"8-修改文章内链接文本样式\"><a href=\"#8-修改文章内链接文本样式\" class=\"headerlink\" title=\"8. 修改文章内链接文本样式\"></a>8. 修改文章内链接文本样式</h3><p>鼠标移动到连接上变颜色</p><p>修改文件 <code>themes\\next\\source\\css\\_common\\components\\post\\post.styl</code>，在末尾添加如下css样式，：</p><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 文章内链接文本样式</span><br><span class=\"line\"><span class=\"selector-class\">.post-body</span> <span class=\"selector-tag\">p</span> <span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#0593d3</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#0593d3</span>;</span><br><span class=\"line\">  &amp;:hover &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#fc6423</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">border-bottom</span>: <span class=\"selector-tag\">none</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">border-bottom</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#fc6423</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"9-设置顶部滚动加载条\"><a href=\"#9-设置顶部滚动加载条\" class=\"headerlink\" title=\"9. 设置顶部滚动加载条\"></a>9. 设置顶部滚动加载条</h3><p>打开<code>next\\layout\\_partials\\head</code>文件，在文件末尾添加以下代码:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//cdn.bootcss.com/pace/1.0.2/pace.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.pace</span> <span class=\"selector-class\">.pace-progress</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#1E92FB</span>; <span class=\"comment\">/*进度条颜色*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">        height: 3px;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.pace</span> <span class=\"selector-class\">.pace-progress-inner</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">         <span class=\"selector-tag\">box-shadow</span>: 0 0 10<span class=\"selector-tag\">px</span> <span class=\"selector-id\">#1E92FB</span>, 0 0 5<span class=\"selector-tag\">px</span>     <span class=\"selector-id\">#1E92FB</span>; <span class=\"comment\">/*阴影颜色*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.pace</span> <span class=\"selector-class\">.pace-activity</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">border-top-color</span>: <span class=\"selector-id\">#1E92FB</span>;    <span class=\"comment\">/*上边框颜色*/</span></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">border-left-color</span>: <span class=\"selector-id\">#1E92FB</span>;    <span class=\"comment\">/*左边框颜色*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id=\"10-在每篇文章末尾统一添加“本文结束”标记\"><a href=\"#10-在每篇文章末尾统一添加“本文结束”标记\" class=\"headerlink\" title=\"10. 在每篇文章末尾统一添加“本文结束”标记\"></a>10. 在每篇文章末尾统一添加“本文结束”标记</h3><p>在路径 <code>\\themes\\next\\layout\\_macro</code> 中新建 <code>page-end-tag.swig</code> 文件,并添加以下内容：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--文字可以自己修改--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    &#123;% if not is_index %&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"text-align:center;color: #A2CD5A;font-size:15px;\"</span>&gt;</span>------------------本文到此结束<span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-paw\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>感谢您的阅读------------------<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着打开<code>\\themes\\next\\layout\\_macro\\post.swig</code>文件，在<code>post-body</code> 之后， <code>post-footer</code> 之前添加下面的代码</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  &#123;% if not is_index %&#125;</span><br><span class=\"line\">    &#123;% include 'page-end-tag.swig' %&#125;</span><br><span class=\"line\">  &#123;% endif %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后打开主题配置文件（<code>_config.yml</code>),在末尾添加：</p><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 文章末尾添加“本文结束”标记</span></span><br><span class=\"line\"><span class=\"attr\">page_end_tag:</span></span><br><span class=\"line\"><span class=\"attr\">  enabled:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure><h3 id=\"11-静态资源压缩\"><a href=\"#11-静态资源压缩\" class=\"headerlink\" title=\"11. 静态资源压缩\"></a>11. 静态资源压缩</h3><p>Hexo自动生成的html中有很多空白的地方,会影响加载速度,所以最好还是压缩一下.</p><p>这里使用<code>hexo-neat</code>插件来压缩。</p><ul><li><p>安装插件</p><ul><li><code>npm install hexo-neat --save</code></li></ul></li><li><p>在<code>站点配置文件</code>添加配置</p><ul><li><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># hexo-neat</span></span><br><span class=\"line\"><span class=\"comment\"># 博文压缩</span></span><br><span class=\"line\"><span class=\"attr\">neat_enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 压缩html</span></span><br><span class=\"line\"><span class=\"attr\">neat_html:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  exclude:</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 压缩css  跳过min.css</span></span><br><span class=\"line\"><span class=\"attr\">neat_css:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  exclude:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">'**/*.min.css'</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 压缩js 跳过min.js</span></span><br><span class=\"line\"><span class=\"attr\">neat_js:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  mangle:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  output:</span></span><br><span class=\"line\"><span class=\"attr\">  compress:</span></span><br><span class=\"line\"><span class=\"attr\">  exclude:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">'**/*.min.js'</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">'**/jquery.fancybox.pack.js'</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">'**/index.js'</span>  </span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">'**/love.js'</span></span><br><span class=\"line\"><span class=\"comment\"># 压缩博文配置结束</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>3.使用</p><ul><li>以后再执行<code>hexo g</code>命令时就会自动压缩了</li></ul></li></ul><h3 id=\"12-主页文章添加阴影效果\"><a href=\"#12-主页文章添加阴影效果\" class=\"headerlink\" title=\"12. 主页文章添加阴影效果\"></a>12. 主页文章添加阴影效果</h3><p>打开<code>\\themes\\next\\source\\css\\_custom\\custom.styl</code>,向里面加入：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 主页文章添加阴影效果</span></span><br><span class=\"line\"> .post &#123;</span><br><span class=\"line\">   margin-top: <span class=\"number\">60</span>px;</span><br><span class=\"line\">   margin-bottom: <span class=\"number\">60</span>px;</span><br><span class=\"line\">   padding: <span class=\"number\">25</span>px;</span><br><span class=\"line\">   -webkit-box-shadow: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">5</span>px rgba(<span class=\"number\">202</span>, <span class=\"number\">203</span>, <span class=\"number\">203</span>, <span class=\"number\">.5</span>);</span><br><span class=\"line\">   -moz-box-shadow: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">5</span>px rgba(<span class=\"number\">202</span>, <span class=\"number\">203</span>, <span class=\"number\">204</span>, <span class=\"number\">.5</span>);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><h3 id=\"13-修改文章底部的的标签样式\"><a href=\"#13-修改文章底部的的标签样式\" class=\"headerlink\" title=\"13. 修改文章底部的的标签样式\"></a>13. 修改文章底部的的标签样式</h3><p>打开模板文件<code>/themes/next/layout/_macro/post.swig</code>，找到<code>rel=&quot;tag&quot;&gt;#</code>字段， 将<code># 换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code>,其中tag是你选择标签图标的名字,也是可以自定义的</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; url_for(tag.path) &#125;&#125;\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"tag\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-tag\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span> &#123;&#123; tag.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id=\"14-实现文章字数统计和预计阅读时间\"><a href=\"#14-实现文章字数统计和预计阅读时间\" class=\"headerlink\" title=\"14. 实现文章字数统计和预计阅读时间\"></a>14. 实现文章字数统计和预计阅读时间</h3><p>1.在站点根目录下使用<code>GitBash</code>命令安装 <code>hexo-wordcoun</code>t插件:</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure><p>2.在全局配置文件<code>_config.yml</code>中激活插件:</p><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">symbols_count_time:</span></span><br><span class=\"line\"><span class=\"attr\">    symbols:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    time:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    total_symbols:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    total_time:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure><p>3.在主题的配置文件<code>_config.yml</code>中进行如下配置:</p><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#字数统计</span></span><br><span class=\"line\"><span class=\"attr\">symbols_count_time:</span></span><br><span class=\"line\"><span class=\"attr\">  separated_meta:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  item_text_post:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  item_text_total:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  awl:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"attr\">  wpm:</span> <span class=\"number\">275</span></span><br></pre></td></tr></table></figure><p>到此,我们就实现了文章字数统计和预估时间的显示功能</p><h3 id=\"15-在文章底部增加版权信息\"><a href=\"#15-在文章底部增加版权信息\" class=\"headerlink\" title=\"15. 在文章底部增加版权信息\"></a>15. 在文章底部增加版权信息</h3><p>修改<code>主题配置文件</code>,找到<code>creative_commons</code>字段</p><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Creative Commons 4.0 International License.</span></span><br><span class=\"line\"><span class=\"comment\"># https://creativecommons.org/share-your-work/licensing-types-examples</span></span><br><span class=\"line\"><span class=\"comment\"># Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span></span><br><span class=\"line\"><span class=\"attr\">creative_commons:</span></span><br><span class=\"line\">  <span class=\"comment\">#选择一个License</span></span><br><span class=\"line\"><span class=\"attr\">  license:</span> <span class=\"string\">by-nc-sa</span></span><br><span class=\"line\">  <span class=\"comment\">#是否在侧边栏显示</span></span><br><span class=\"line\"><span class=\"attr\">  sidebar:</span> <span class=\"literal\">false</span>  </span><br><span class=\"line\">  <span class=\"comment\">#是否在文章末尾显示</span></span><br><span class=\"line\"><span class=\"attr\">  post:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure><h3 id=\"16-文章置顶\"><a href=\"#16-文章置顶\" class=\"headerlink\" title=\"16. 文章置顶\"></a>16. 文章置顶</h3><p>打开文件：<code>node_modules/hexo-generator-index/lib/generator.js</code>,将原来的代码用下面的代码替换掉</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> pagination = <span class=\"built_in\">require</span>(<span class=\"string\">'hexo-pagination'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">locals</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> config = <span class=\"keyword\">this</span>.config;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> posts = locals.posts;</span><br><span class=\"line\">    posts.data = posts.data.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a.top &amp;&amp; b.top) &#123; <span class=\"comment\">// 两篇文章top都有定义</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a.top == b.top) <span class=\"keyword\">return</span> b.date - a.date; <span class=\"comment\">// 若top值一样则按照文章日期降序排</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> b.top - a.top; <span class=\"comment\">// 否则按照top值降序排</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a.top &amp;&amp; !b.top) &#123; <span class=\"comment\">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> b.date - a.date; <span class=\"comment\">// 都没定义按照文章日期降序排</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> paginationDir = config.pagination_dir || <span class=\"string\">'page'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pagination(<span class=\"string\">''</span>, posts, &#123;</span><br><span class=\"line\">    perPage: config.index_generator.per_page,</span><br><span class=\"line\">    layout: [<span class=\"string\">'index'</span>, <span class=\"string\">'archive'</span>],</span><br><span class=\"line\">    format: paginationDir + <span class=\"string\">'/%d/'</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      __index: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><p>写文章的时候,在标题加上top值,数值越大排在越前面.</p><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tag: hexo </span><br><span class=\"line\">copyright: true</span><br><span class=\"line\">password: xxx</span><br><span class=\"line\">top: 150</span><br></pre></td></tr></table></figure><h3 id=\"17-在网站底部加上访问量\"><a href=\"#17-在网站底部加上访问量\" class=\"headerlink\" title=\"17. 在网站底部加上访问量\"></a>17. 在网站底部加上访问量</h3><p><strong>Next主题配置这个就比较方便了</strong></p><p>打开<code>主题配置文件</code>，找到如下配置：</p><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">busuanzi_count:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  total_visitors:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  total_visitors_icon:</span> <span class=\"string\">user</span></span><br><span class=\"line\"><span class=\"attr\">  total_views:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  total_views_icon:</span> <span class=\"string\">eye</span></span><br><span class=\"line\"><span class=\"attr\">  post_views:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  post_views_icon:</span> <span class=\"string\">eye</span></span><br></pre></td></tr></table></figure><p>将<code>enable</code>的值由<code>false</code>改为<code>true</code>，便可以看到页脚出现访问量.</p><p>另外本地预览时访客数异常是正常的,部署至云端后就不会出现这样的问题.</p><h3 id=\"18-网站搜索功能\"><a href=\"#18-网站搜索功能\" class=\"headerlink\" title=\"18. 网站搜索功能\"></a>18. 网站搜索功能</h3><p>1.安装插件</p><p>​ 站点目录下执行命令<code>npm install hexo-generator-searchdb --save</code></p><p>2.修改<code>站点配置文件</code></p><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">search.xml</span></span><br><span class=\"line\"><span class=\"attr\">  field:</span> <span class=\"string\">post</span></span><br><span class=\"line\"><span class=\"attr\">  format:</span> <span class=\"string\">html</span></span><br><span class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">10000</span></span><br></pre></td></tr></table></figure><p>3.修改<code>主题配置文件</code></p><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Local search</span></span><br><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class=\"line\"><span class=\"attr\">local_search:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"string\">enable</span></span><br><span class=\"line\">  <span class=\"comment\"># if auto, trigger search by changing input</span></span><br><span class=\"line\">  <span class=\"comment\"># if manual, trigger search by pressing enter key or search button</span></span><br><span class=\"line\"><span class=\"attr\">  trigger:</span> <span class=\"string\">auto</span></span><br><span class=\"line\">  <span class=\"comment\"># show top n results per article, show all results by setting to -1</span></span><br><span class=\"line\"><span class=\"attr\">  top_n_per_article:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\"># unescape html strings to the readable one</span></span><br><span class=\"line\"><span class=\"attr\">  unescape:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure><p>重新开启服务后即可看到效果。</p><h3 id=\"TODO开启留言评论功能\"><a href=\"#TODO开启留言评论功能\" class=\"headerlink\" title=\"TODO开启留言评论功能\"></a>TODO开启留言评论功能</h3><p>//TODO 待更新</p><h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo官方文档</a></p><p><a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">Next官方文档</a></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Fri Jan 04 2019 18:24:57 GMT+0800 (GMT+08:00) --><p>本章主要包含了博客主题优化相关内容，第三方服务和插件的配置与使用。如：炫酷头像动态背景、链接变色、鼠标点击效果、站点字数、访客数统计等。</p>","more":"<blockquote><p>这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。</p><p><a href=\"https://www.lixueduan.com/tags/Hexo/\">点击阅读更多系列文章</a></p></blockquote><h3 id=\"0-选择主题\"><a href=\"#0-选择主题\" class=\"headerlink\" title=\"0. 选择主题\"></a>0. 选择主题</h3><p>你可以点击这里选择你喜欢的<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">Themes</a>,里面有大量美观的主题</p><p>我这里用的是简约著称的<code>Next</code>主题.</p><ul><li>下载主题<ul><li>使用<code>git</code>命令下载该主题到本地.</li><li><code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code></li><li>clone成功后,你的Themes文件夹下就会有next主题文件了.</li></ul></li><li>Hexo配置文件:<ul><li>都叫<code>_config.yml</code></li><li>一份位于站点根目录下，主要包含 Hexo 本身的配置,称为 <code>站点配置文件</code></li><li>另一份位于主题目录下主要用于配置主题相关的选项,称为<code>主题配置文件</code></li></ul></li><li>开启主题<ul><li><code>站点配置文件</code>进行修改: 将<code>theme: landscape</code>修改为 <code>theme: next</code></li></ul></li></ul><h3 id=\"1-侧边栏头像设置\"><a href=\"#1-侧边栏头像设置\" class=\"headerlink\" title=\"1. 侧边栏头像设置\"></a>1. 侧边栏头像设置</h3><p>新版next注意引入了该功能,直接在<code>主题配置文件</code>修改即可,如下:</p><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Sidebar Avatar 头像</span></span><br><span class=\"line\"><span class=\"attr\">avatar:</span></span><br><span class=\"line\"><span class=\"attr\">  url:</span> <span class=\"string\">/images/avatar.gif</span></span><br><span class=\"line\">  <span class=\"comment\"># 圆形头像</span></span><br><span class=\"line\"><span class=\"attr\">  rounded:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># 透明度 0~1之间</span></span><br><span class=\"line\"><span class=\"attr\">  opacity:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\"># 头像旋转</span></span><br><span class=\"line\"><span class=\"attr\">  rotated:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure><h3 id=\"2-设置个人社交图标链接\"><a href=\"#2-设置个人社交图标链接\" class=\"headerlink\" title=\"2. 设置个人社交图标链接\"></a>2. 设置个人社交图标链接</h3><p>直接在<code>主题配置文件</code>修改即可,如下:</p><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Social Links. 社交链接 前面为链接地址 后面是图标 </span></span><br><span class=\"line\"><span class=\"attr\">social:</span></span><br><span class=\"line\"><span class=\"attr\">  GitHub:</span> <span class=\"attr\">https://github.com/illusorycloud</span> <span class=\"string\">||</span> <span class=\"string\">github</span></span><br><span class=\"line\"><span class=\"attr\">  E-Mail:</span> <span class=\"attr\">mailto:xueduan.li@gmail.com</span> <span class=\"string\">||</span> <span class=\"string\">envelope</span></span><br><span class=\"line\">  <span class=\"comment\">#Weibo: https://weibo.com/yourname || weibo</span></span><br><span class=\"line\">  <span class=\"comment\">#Google: https://plus.google.com/yourname || google</span></span><br><span class=\"line\">  <span class=\"comment\">#Twitter: https://twitter.com/yourname || twitter</span></span><br><span class=\"line\">  <span class=\"comment\">#FB Page: https://www.facebook.com/yourname || facebook</span></span><br><span class=\"line\">  <span class=\"comment\">#VK Group: https://vk.com/yourname || vk</span></span><br><span class=\"line\">  <span class=\"comment\">#StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span></span><br><span class=\"line\">  <span class=\"comment\">#YouTube: https://youtube.com/yourname || youtube</span></span><br><span class=\"line\">  <span class=\"comment\">#Instagram: https://instagram.com/yourname || instagram</span></span><br><span class=\"line\">  <span class=\"comment\">#Skype: skype:yourname?call|chat || skype</span></span><br><span class=\"line\"><span class=\"comment\"># 图标配置 </span></span><br><span class=\"line\"><span class=\"attr\">social_icons:</span></span><br><span class=\"line\">  <span class=\"comment\">#是否显示图标</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\">#是否只显示图标</span></span><br><span class=\"line\"><span class=\"attr\">  icons_only:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\">#是否开启图标变化(就是刷新后会变颜色)</span></span><br><span class=\"line\"><span class=\"attr\">  transition:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure><h3 id=\"3-添加菜单项\"><a href=\"#3-添加菜单项\" class=\"headerlink\" title=\"3. 添加菜单项\"></a>3. 添加菜单项</h3><p>1.先在<code>主题配置文件</code>修改</p><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\"><span class=\"attr\">  home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">home</span></span><br><span class=\"line\"><span class=\"attr\">  about:</span> <span class=\"string\">/about/</span> <span class=\"string\">||</span> <span class=\"string\">user</span></span><br><span class=\"line\"><span class=\"attr\">  tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">tags</span></span><br><span class=\"line\"><span class=\"attr\">  categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">th</span></span><br><span class=\"line\"><span class=\"attr\">  archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">archive</span></span><br><span class=\"line\"><span class=\"attr\">  AAAAA:</span> <span class=\"string\">/BBBBB/</span> <span class=\"string\">||</span> <span class=\"string\">CCC</span></span><br><span class=\"line\"><span class=\"string\">其中AAA</span> <span class=\"string\">为菜单项的名字,BBB是路径,CCC是菜单项显示的图标</span></span><br></pre></td></tr></table></figure><p><code>next</code> 使用的是 <a href=\"http://fontawesome.io/\" target=\"_blank\" rel=\"noopener\">Font Awesome</a> 提供的图标 ,在这里可以选择自己喜欢的图标.</p><p>2.生成上述路径的文件</p><p><code>git</code>命令行输入</p><p><code>hexo new page BBB</code> –其中BBB替换为具体的名字,会在<code>站点目录\\source</code>下新增一个BBB文件夹,文件夹中有一个<code>index.md</code>文件，需要在文件头中增加一句<code>type: XXX</code>,例如<code>type: categories</code>。这样就会在这个页面显示所有的分类了。</p><p>3.修改主题文件下的对应语言的配置文件,这里是中文就修改<code>zh-CN.yml</code></p><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\"><span class=\"attr\">  home:</span> <span class=\"string\">首页</span></span><br><span class=\"line\"><span class=\"attr\">  archives:</span> <span class=\"string\">归档</span></span><br><span class=\"line\">  <span class=\"string\">AAAA</span> <span class=\"string\">:</span> <span class=\"string\">XXXX</span></span><br><span class=\"line\"><span class=\"string\">AAA为上边的菜单项名字,XXX为中文的名字</span></span><br></pre></td></tr></table></figure><h3 id=\"4-添加RSS\"><a href=\"#4-添加RSS\" class=\"headerlink\" title=\"4. 添加RSS\"></a>4. 添加RSS</h3><ul><li><p>1.安装插件</p><ul><li><p>首先在Git中运行<code>npm install --save hexo-generator-feed</code>命令,安装插件,插件会放在</p><p><code>node_modules</code>文件夹里面.</p></li></ul></li><li><p>2.修改<code>站点配置文件</code></p><ul><li>安装好插件后,打开站点配置文件_config.yml`,在末尾加入以下代码:</li></ul></li></ul><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: http://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"attr\">plugins:</span> <span class=\"string\">hexo-generate-feed</span></span><br></pre></td></tr></table></figure><ul><li>3.修改<code>主题配置文件</code><ul><li>打开主题配置文件<code>_config.yml</code>,找到<code>rss</code> 添加配置:<code>rss: /atom.xml</code></li></ul></li></ul><h3 id=\"5-设置酷炫动态背景\"><a href=\"#5-设置酷炫动态背景\" class=\"headerlink\" title=\"5. 设置酷炫动态背景\"></a>5. 设置酷炫动态背景</h3><p>next主题提供了两种背景可以选择.</p><ul><li>第一种背景（我是用的这种）</li></ul><p>新版本的next主题的话直接在主题配置文件中,找到<code>canvas-nest</code> 修改为<code>canvas-nest: true</code>,</p><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Canvas-nest</span></span><br><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span></span><br><span class=\"line\"><span class=\"attr\">canvas_nest:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  onmobile:</span> <span class=\"literal\">true</span> <span class=\"comment\"># display on mobile or not</span></span><br><span class=\"line\"><span class=\"attr\">  color:</span> <span class=\"string\">'0,0,255'</span> <span class=\"comment\"># RGB values, use ',' to separate</span></span><br><span class=\"line\"><span class=\"attr\">  opacity:</span> <span class=\"number\">0.5</span> <span class=\"comment\"># the opacity of line: 0~1</span></span><br><span class=\"line\"><span class=\"attr\">  zIndex:</span> <span class=\"bullet\">-1</span> <span class=\"comment\"># z-index property of the background</span></span><br><span class=\"line\"><span class=\"attr\">  count:</span> <span class=\"number\">99</span> <span class=\"comment\"># the number of lines</span></span><br></pre></td></tr></table></figure><p>进入theme/next目录</p><p>执行命令<code>git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest</code></p><ul><li>第二种背景</li></ul><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># JavaScript 3D library.</span></span><br><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/theme-next/theme-next-three</span></span><br><span class=\"line\"><span class=\"comment\"># three_waves</span></span><br><span class=\"line\"><span class=\"attr\">three_waves:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># canvas_lines</span></span><br><span class=\"line\"><span class=\"attr\">canvas_lines:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># canvas_sphere</span></span><br><span class=\"line\"><span class=\"attr\">canvas_sphere:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure><p>也是需要下载依赖</p><ol><li>进入theme/next目录</li><li>执行命令：<code>git clone https://github.com/theme-next/theme-next-three source/lib/three</code></li></ol><p><strong>4个背景中只能开启一种背景,不然会出错</strong></p><h3 id=\"6-设置网站logo\"><a href=\"#6-设置网站logo\" class=\"headerlink\" title=\"6. 设置网站logo\"></a>6. 设置网站logo</h3><p>把你的图片放在<code>themes/next/source/images</code>里</p><p>打开<code>主题配置文件</code>_config.yml ,找到字段<code>favicon:</code> 都修改为对应路径</p><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">favicon:</span></span><br><span class=\"line\"><span class=\"attr\">  small:</span> <span class=\"string\">/images/favicon-16x16-next.png</span></span><br><span class=\"line\"><span class=\"attr\">  medium:</span> <span class=\"string\">/images/favicon-32x32-next.png</span></span><br><span class=\"line\"><span class=\"attr\">  apple_touch_icon:</span> <span class=\"string\">/images/apple-touch-icon-next.png</span></span><br><span class=\"line\"><span class=\"attr\">  safari_pinned_tab:</span> <span class=\"string\">/images/logo.svg</span></span><br></pre></td></tr></table></figure><h3 id=\"7-实现点击出现桃心效果\"><a href=\"#7-实现点击出现桃心效果\" class=\"headerlink\" title=\"7. 实现点击出现桃心效果\"></a>7. 实现点击出现桃心效果</h3><p><code>themes/next/source/js/src</code>里面 新建一个love.js,</p><p>复制下面的代码进去</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e,t,a</span>)</span>&#123;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">n</span>(<span class=\"params\"></span>)</span>&#123;c(<span class=\"string\">\".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;\"</span>),o(),r()&#125;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">r</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> e=<span class=\"number\">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class=\"number\">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class=\"number\">1</span>)):(d[e].y--,d[e].scale+=<span class=\"number\">.004</span>,d[e].alpha-=<span class=\"number\">.013</span>,d[e].el.style.cssText=<span class=\"string\">\"left:\"</span>+d[e].x+<span class=\"string\">\"px;top:\"</span>+d[e].y+<span class=\"string\">\"px;opacity:\"</span>+d[e].alpha+<span class=\"string\">\";transform:scale(\"</span>+d[e].scale+<span class=\"string\">\",\"</span>+d[e].scale+<span class=\"string\">\") rotate(45deg);background:\"</span>+d[e].color+<span class=\"string\">\";z-index:99999\"</span>);requestAnimationFrame(r)&#125;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">o</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">var</span> t=<span class=\"string\">\"function\"</span>==<span class=\"keyword\">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">i</span>(<span class=\"params\">e</span>)</span>&#123;<span class=\"keyword\">var</span> a=t.createElement(<span class=\"string\">\"div\"</span>);a.className=<span class=\"string\">\"heart\"</span>,d.push(&#123;<span class=\"attr\">el</span>:a,<span class=\"attr\">x</span>:e.clientX<span class=\"number\">-5</span>,<span class=\"attr\">y</span>:e.clientY<span class=\"number\">-5</span>,<span class=\"attr\">scale</span>:<span class=\"number\">1</span>,<span class=\"attr\">alpha</span>:<span class=\"number\">1</span>,<span class=\"attr\">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\">e</span>)</span>&#123;<span class=\"keyword\">var</span> a=t.createElement(<span class=\"string\">\"style\"</span>);a.type=<span class=\"string\">\"text/css\"</span>;<span class=\"keyword\">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class=\"keyword\">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class=\"string\">\"head\"</span>)[<span class=\"number\">0</span>].appendChild(a)&#125;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">s</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span><span class=\"string\">\"rgb(\"</span>+~~(<span class=\"number\">255</span>*<span class=\"built_in\">Math</span>.random())+<span class=\"string\">\",\"</span>+~~(<span class=\"number\">255</span>*<span class=\"built_in\">Math</span>.random())+<span class=\"string\">\",\"</span>+~~(<span class=\"number\">255</span>*<span class=\"built_in\">Math</span>.random())+<span class=\"string\">\")\"</span>&#125;<span class=\"keyword\">var</span> d=[];e.requestAnimationFrame=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;setTimeout(e,<span class=\"number\">1e3</span>/<span class=\"number\">60</span>)&#125;&#125;(),n()&#125;(<span class=\"built_in\">window</span>,<span class=\"built_in\">document</span>);</span><br></pre></td></tr></table></figure><p>然后打开<code>\\themes\\next\\layout\\_layout.swig</code>文件,在末尾 添加以下代码：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 页面点击小红心 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/js/src/love.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id=\"8-修改文章内链接文本样式\"><a href=\"#8-修改文章内链接文本样式\" class=\"headerlink\" title=\"8. 修改文章内链接文本样式\"></a>8. 修改文章内链接文本样式</h3><p>鼠标移动到连接上变颜色</p><p>修改文件 <code>themes\\next\\source\\css\\_common\\components\\post\\post.styl</code>，在末尾添加如下css样式，：</p><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 文章内链接文本样式</span><br><span class=\"line\"><span class=\"selector-class\">.post-body</span> <span class=\"selector-tag\">p</span> <span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#0593d3</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#0593d3</span>;</span><br><span class=\"line\">  &amp;:hover &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#fc6423</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">border-bottom</span>: <span class=\"selector-tag\">none</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">border-bottom</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#fc6423</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"9-设置顶部滚动加载条\"><a href=\"#9-设置顶部滚动加载条\" class=\"headerlink\" title=\"9. 设置顶部滚动加载条\"></a>9. 设置顶部滚动加载条</h3><p>打开<code>next\\layout\\_partials\\head</code>文件，在文件末尾添加以下代码:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//cdn.bootcss.com/pace/1.0.2/pace.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.pace</span> <span class=\"selector-class\">.pace-progress</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#1E92FB</span>; <span class=\"comment\">/*进度条颜色*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">        height: 3px;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.pace</span> <span class=\"selector-class\">.pace-progress-inner</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">         <span class=\"selector-tag\">box-shadow</span>: 0 0 10<span class=\"selector-tag\">px</span> <span class=\"selector-id\">#1E92FB</span>, 0 0 5<span class=\"selector-tag\">px</span>     <span class=\"selector-id\">#1E92FB</span>; <span class=\"comment\">/*阴影颜色*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.pace</span> <span class=\"selector-class\">.pace-activity</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">border-top-color</span>: <span class=\"selector-id\">#1E92FB</span>;    <span class=\"comment\">/*上边框颜色*/</span></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">border-left-color</span>: <span class=\"selector-id\">#1E92FB</span>;    <span class=\"comment\">/*左边框颜色*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id=\"10-在每篇文章末尾统一添加“本文结束”标记\"><a href=\"#10-在每篇文章末尾统一添加“本文结束”标记\" class=\"headerlink\" title=\"10. 在每篇文章末尾统一添加“本文结束”标记\"></a>10. 在每篇文章末尾统一添加“本文结束”标记</h3><p>在路径 <code>\\themes\\next\\layout\\_macro</code> 中新建 <code>page-end-tag.swig</code> 文件,并添加以下内容：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--文字可以自己修改--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    &#123;% if not is_index %&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"text-align:center;color: #A2CD5A;font-size:15px;\"</span>&gt;</span>------------------本文到此结束<span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-paw\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>感谢您的阅读------------------<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着打开<code>\\themes\\next\\layout\\_macro\\post.swig</code>文件，在<code>post-body</code> 之后， <code>post-footer</code> 之前添加下面的代码</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  &#123;% if not is_index %&#125;</span><br><span class=\"line\">    &#123;% include 'page-end-tag.swig' %&#125;</span><br><span class=\"line\">  &#123;% endif %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后打开主题配置文件（<code>_config.yml</code>),在末尾添加：</p><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 文章末尾添加“本文结束”标记</span></span><br><span class=\"line\"><span class=\"attr\">page_end_tag:</span></span><br><span class=\"line\"><span class=\"attr\">  enabled:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure><h3 id=\"11-静态资源压缩\"><a href=\"#11-静态资源压缩\" class=\"headerlink\" title=\"11. 静态资源压缩\"></a>11. 静态资源压缩</h3><p>Hexo自动生成的html中有很多空白的地方,会影响加载速度,所以最好还是压缩一下.</p><p>这里使用<code>hexo-neat</code>插件来压缩。</p><ul><li><p>安装插件</p><ul><li><code>npm install hexo-neat --save</code></li></ul></li><li><p>在<code>站点配置文件</code>添加配置</p><ul><li><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># hexo-neat</span></span><br><span class=\"line\"><span class=\"comment\"># 博文压缩</span></span><br><span class=\"line\"><span class=\"attr\">neat_enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 压缩html</span></span><br><span class=\"line\"><span class=\"attr\">neat_html:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  exclude:</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 压缩css  跳过min.css</span></span><br><span class=\"line\"><span class=\"attr\">neat_css:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  exclude:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">'**/*.min.css'</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 压缩js 跳过min.js</span></span><br><span class=\"line\"><span class=\"attr\">neat_js:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  mangle:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  output:</span></span><br><span class=\"line\"><span class=\"attr\">  compress:</span></span><br><span class=\"line\"><span class=\"attr\">  exclude:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">'**/*.min.js'</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">'**/jquery.fancybox.pack.js'</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">'**/index.js'</span>  </span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">'**/love.js'</span></span><br><span class=\"line\"><span class=\"comment\"># 压缩博文配置结束</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>3.使用</p><ul><li>以后再执行<code>hexo g</code>命令时就会自动压缩了</li></ul></li></ul><h3 id=\"12-主页文章添加阴影效果\"><a href=\"#12-主页文章添加阴影效果\" class=\"headerlink\" title=\"12. 主页文章添加阴影效果\"></a>12. 主页文章添加阴影效果</h3><p>打开<code>\\themes\\next\\source\\css\\_custom\\custom.styl</code>,向里面加入：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 主页文章添加阴影效果</span></span><br><span class=\"line\"> .post &#123;</span><br><span class=\"line\">   margin-top: <span class=\"number\">60</span>px;</span><br><span class=\"line\">   margin-bottom: <span class=\"number\">60</span>px;</span><br><span class=\"line\">   padding: <span class=\"number\">25</span>px;</span><br><span class=\"line\">   -webkit-box-shadow: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">5</span>px rgba(<span class=\"number\">202</span>, <span class=\"number\">203</span>, <span class=\"number\">203</span>, <span class=\"number\">.5</span>);</span><br><span class=\"line\">   -moz-box-shadow: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">5</span>px rgba(<span class=\"number\">202</span>, <span class=\"number\">203</span>, <span class=\"number\">204</span>, <span class=\"number\">.5</span>);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><h3 id=\"13-修改文章底部的的标签样式\"><a href=\"#13-修改文章底部的的标签样式\" class=\"headerlink\" title=\"13. 修改文章底部的的标签样式\"></a>13. 修改文章底部的的标签样式</h3><p>打开模板文件<code>/themes/next/layout/_macro/post.swig</code>，找到<code>rel=&quot;tag&quot;&gt;#</code>字段， 将<code># 换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code>,其中tag是你选择标签图标的名字,也是可以自定义的</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; url_for(tag.path) &#125;&#125;\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"tag\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-tag\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span> &#123;&#123; tag.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id=\"14-实现文章字数统计和预计阅读时间\"><a href=\"#14-实现文章字数统计和预计阅读时间\" class=\"headerlink\" title=\"14. 实现文章字数统计和预计阅读时间\"></a>14. 实现文章字数统计和预计阅读时间</h3><p>1.在站点根目录下使用<code>GitBash</code>命令安装 <code>hexo-wordcoun</code>t插件:</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure><p>2.在全局配置文件<code>_config.yml</code>中激活插件:</p><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">symbols_count_time:</span></span><br><span class=\"line\"><span class=\"attr\">    symbols:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    time:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    total_symbols:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    total_time:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure><p>3.在主题的配置文件<code>_config.yml</code>中进行如下配置:</p><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#字数统计</span></span><br><span class=\"line\"><span class=\"attr\">symbols_count_time:</span></span><br><span class=\"line\"><span class=\"attr\">  separated_meta:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  item_text_post:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  item_text_total:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  awl:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"attr\">  wpm:</span> <span class=\"number\">275</span></span><br></pre></td></tr></table></figure><p>到此,我们就实现了文章字数统计和预估时间的显示功能</p><h3 id=\"15-在文章底部增加版权信息\"><a href=\"#15-在文章底部增加版权信息\" class=\"headerlink\" title=\"15. 在文章底部增加版权信息\"></a>15. 在文章底部增加版权信息</h3><p>修改<code>主题配置文件</code>,找到<code>creative_commons</code>字段</p><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Creative Commons 4.0 International License.</span></span><br><span class=\"line\"><span class=\"comment\"># https://creativecommons.org/share-your-work/licensing-types-examples</span></span><br><span class=\"line\"><span class=\"comment\"># Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span></span><br><span class=\"line\"><span class=\"attr\">creative_commons:</span></span><br><span class=\"line\">  <span class=\"comment\">#选择一个License</span></span><br><span class=\"line\"><span class=\"attr\">  license:</span> <span class=\"string\">by-nc-sa</span></span><br><span class=\"line\">  <span class=\"comment\">#是否在侧边栏显示</span></span><br><span class=\"line\"><span class=\"attr\">  sidebar:</span> <span class=\"literal\">false</span>  </span><br><span class=\"line\">  <span class=\"comment\">#是否在文章末尾显示</span></span><br><span class=\"line\"><span class=\"attr\">  post:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure><h3 id=\"16-文章置顶\"><a href=\"#16-文章置顶\" class=\"headerlink\" title=\"16. 文章置顶\"></a>16. 文章置顶</h3><p>打开文件：<code>node_modules/hexo-generator-index/lib/generator.js</code>,将原来的代码用下面的代码替换掉</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> pagination = <span class=\"built_in\">require</span>(<span class=\"string\">'hexo-pagination'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">locals</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> config = <span class=\"keyword\">this</span>.config;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> posts = locals.posts;</span><br><span class=\"line\">    posts.data = posts.data.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a.top &amp;&amp; b.top) &#123; <span class=\"comment\">// 两篇文章top都有定义</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a.top == b.top) <span class=\"keyword\">return</span> b.date - a.date; <span class=\"comment\">// 若top值一样则按照文章日期降序排</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> b.top - a.top; <span class=\"comment\">// 否则按照top值降序排</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a.top &amp;&amp; !b.top) &#123; <span class=\"comment\">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> b.date - a.date; <span class=\"comment\">// 都没定义按照文章日期降序排</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> paginationDir = config.pagination_dir || <span class=\"string\">'page'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pagination(<span class=\"string\">''</span>, posts, &#123;</span><br><span class=\"line\">    perPage: config.index_generator.per_page,</span><br><span class=\"line\">    layout: [<span class=\"string\">'index'</span>, <span class=\"string\">'archive'</span>],</span><br><span class=\"line\">    format: paginationDir + <span class=\"string\">'/%d/'</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      __index: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><p>写文章的时候,在标题加上top值,数值越大排在越前面.</p><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tag: hexo </span><br><span class=\"line\">copyright: true</span><br><span class=\"line\">password: xxx</span><br><span class=\"line\">top: 150</span><br></pre></td></tr></table></figure><h3 id=\"17-在网站底部加上访问量\"><a href=\"#17-在网站底部加上访问量\" class=\"headerlink\" title=\"17. 在网站底部加上访问量\"></a>17. 在网站底部加上访问量</h3><p><strong>Next主题配置这个就比较方便了</strong></p><p>打开<code>主题配置文件</code>，找到如下配置：</p><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">busuanzi_count:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  total_visitors:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  total_visitors_icon:</span> <span class=\"string\">user</span></span><br><span class=\"line\"><span class=\"attr\">  total_views:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  total_views_icon:</span> <span class=\"string\">eye</span></span><br><span class=\"line\"><span class=\"attr\">  post_views:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  post_views_icon:</span> <span class=\"string\">eye</span></span><br></pre></td></tr></table></figure><p>将<code>enable</code>的值由<code>false</code>改为<code>true</code>，便可以看到页脚出现访问量.</p><p>另外本地预览时访客数异常是正常的,部署至云端后就不会出现这样的问题.</p><h3 id=\"18-网站搜索功能\"><a href=\"#18-网站搜索功能\" class=\"headerlink\" title=\"18. 网站搜索功能\"></a>18. 网站搜索功能</h3><p>1.安装插件</p><p>​ 站点目录下执行命令<code>npm install hexo-generator-searchdb --save</code></p><p>2.修改<code>站点配置文件</code></p><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">search.xml</span></span><br><span class=\"line\"><span class=\"attr\">  field:</span> <span class=\"string\">post</span></span><br><span class=\"line\"><span class=\"attr\">  format:</span> <span class=\"string\">html</span></span><br><span class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">10000</span></span><br></pre></td></tr></table></figure><p>3.修改<code>主题配置文件</code></p><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Local search</span></span><br><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class=\"line\"><span class=\"attr\">local_search:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"string\">enable</span></span><br><span class=\"line\">  <span class=\"comment\"># if auto, trigger search by changing input</span></span><br><span class=\"line\">  <span class=\"comment\"># if manual, trigger search by pressing enter key or search button</span></span><br><span class=\"line\"><span class=\"attr\">  trigger:</span> <span class=\"string\">auto</span></span><br><span class=\"line\">  <span class=\"comment\"># show top n results per article, show all results by setting to -1</span></span><br><span class=\"line\"><span class=\"attr\">  top_n_per_article:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\"># unescape html strings to the readable one</span></span><br><span class=\"line\"><span class=\"attr\">  unescape:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure><p>重新开启服务后即可看到效果。</p><h3 id=\"TODO开启留言评论功能\"><a href=\"#TODO开启留言评论功能\" class=\"headerlink\" title=\"TODO开启留言评论功能\"></a>TODO开启留言评论功能</h3><p>//TODO 待更新</p><h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo官方文档</a></p><p><a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">Next官方文档</a></p><!-- rebuild by neat -->"}],"PostAsset":[],"PostCategory":[{"post_id":"cjqhw7t3d0003wkw41z6frann","category_id":"cjqhw7t4k0005wkw4tr6i4fv8","_id":"cjqhw7t4v000bwkw4qou1gax8"},{"post_id":"cjqhw7t450004wkw41pk2dz1h","category_id":"cjqhw7t4t0008wkw4oehkjd84","_id":"cjqhw7t50000fwkw4se3abimt"},{"post_id":"cjqhw7t4r0007wkw4h7fud607","category_id":"cjqhw7t4t0008wkw4oehkjd84","_id":"cjqhw7t51000hwkw4dtqut7sf"},{"post_id":"cjqhw7t7e000iwkw45oaoaaqb","category_id":"cjqhw7t7j000kwkw48v1bm05h","_id":"cjqhw7t7y000swkw46234qahn"},{"post_id":"cjqhw7t7r000owkw4vqucxxj3","category_id":"cjqhw7t4t0008wkw4oehkjd84","_id":"cjqhw7t7z000uwkw4075grt5x"},{"post_id":"cjqhw7t7g000jwkw43983ga8w","category_id":"cjqhw7t7j000kwkw48v1bm05h","_id":"cjqhw7t80000wwkw4xpxwtqm7"},{"post_id":"cjqhw7t7k000mwkw46ejz6c7n","category_id":"cjqhw7t7w000rwkw47zdqikau","_id":"cjqhw7t830010wkw4vle8g0ec"},{"post_id":"cjqhw7t7m000nwkw4rv8aqa7g","category_id":"cjqhw7t7w000rwkw47zdqikau","_id":"cjqhw7t850014wkw445omw1b2"},{"post_id":"cjqhw7t8z001bwkw4ah3qnnyo","category_id":"cjqhw7t7j000kwkw48v1bm05h","_id":"cjqhw7t95001hwkw455p2qio4"},{"post_id":"cjqhw7t90001cwkw49er1ato4","category_id":"cjqhw7t7j000kwkw48v1bm05h","_id":"cjqhw7t97001kwkw4hm4331tj"},{"post_id":"cjqhw7t92001ewkw4fquuw4ur","category_id":"cjqhw7t7j000kwkw48v1bm05h","_id":"cjqhw7t99001mwkw4gsvadb4f"},{"post_id":"cjqhw7t94001gwkw4tztjmnp5","category_id":"cjqhw7t7w000rwkw47zdqikau","_id":"cjqhw7t9a001owkw4tu2xrakj"},{"post_id":"cjqhw7t96001jwkw4mcdnus2b","category_id":"cjqhw7t7w000rwkw47zdqikau","_id":"cjqhw7t9a001qwkw446nkg5t2"}],"PostTag":[{"post_id":"cjqhw7t3d0003wkw41z6frann","tag_id":"cjqhw7t4q0006wkw4pcxjcmko","_id":"cjqhw7t4u000awkw4qlpwa1nl"},{"post_id":"cjqhw7t450004wkw41pk2dz1h","tag_id":"cjqhw7t4t0009wkw4l7na81t7","_id":"cjqhw7t4z000ewkw4ujunez2l"},{"post_id":"cjqhw7t4r0007wkw4h7fud607","tag_id":"cjqhw7t4t0009wkw4l7na81t7","_id":"cjqhw7t51000gwkw4t6nnlj2o"},{"post_id":"cjqhw7t7e000iwkw45oaoaaqb","tag_id":"cjqhw7t7j000lwkw45caj84sz","_id":"cjqhw7t7z000vwkw4zfx22kop"},{"post_id":"cjqhw7t7e000iwkw45oaoaaqb","tag_id":"cjqhw7t7v000qwkw4n7h04m97","_id":"cjqhw7t80000xwkw4za6viy8z"},{"post_id":"cjqhw7t7g000jwkw43983ga8w","tag_id":"cjqhw7t7j000lwkw45caj84sz","_id":"cjqhw7t840012wkw4obndityv"},{"post_id":"cjqhw7t7g000jwkw43983ga8w","tag_id":"cjqhw7t7v000qwkw4n7h04m97","_id":"cjqhw7t840013wkw4w59gta5a"},{"post_id":"cjqhw7t7k000mwkw46ejz6c7n","tag_id":"cjqhw7t830011wkw4lw5p4tdc","_id":"cjqhw7t860016wkw4190uh1sn"},{"post_id":"cjqhw7t7m000nwkw4rv8aqa7g","tag_id":"cjqhw7t830011wkw4lw5p4tdc","_id":"cjqhw7t870018wkw41fmaddbi"},{"post_id":"cjqhw7t7r000owkw4vqucxxj3","tag_id":"cjqhw7t870017wkw4qbqhgbto","_id":"cjqhw7t880019wkw4d1s2xa1l"},{"post_id":"cjqhw7t7r000owkw4vqucxxj3","tag_id":"cjqhw7t4t0009wkw4l7na81t7","_id":"cjqhw7t89001awkw4st95jwfe"},{"post_id":"cjqhw7t90001cwkw49er1ato4","tag_id":"cjqhw7t7j000lwkw45caj84sz","_id":"cjqhw7t93001fwkw4absp395q"},{"post_id":"cjqhw7t92001ewkw4fquuw4ur","tag_id":"cjqhw7t7j000lwkw45caj84sz","_id":"cjqhw7t95001iwkw4rdjr1abc"},{"post_id":"cjqhw7t92001ewkw4fquuw4ur","tag_id":"cjqhw7t7v000qwkw4n7h04m97","_id":"cjqhw7t98001lwkw4uuwxpqw3"},{"post_id":"cjqhw7t94001gwkw4tztjmnp5","tag_id":"cjqhw7t830011wkw4lw5p4tdc","_id":"cjqhw7t99001nwkw4c3ks2gss"},{"post_id":"cjqhw7t8z001bwkw4ah3qnnyo","tag_id":"cjqhw7t7j000lwkw45caj84sz","_id":"cjqhw7t9a001pwkw420w09khf"},{"post_id":"cjqhw7t8z001bwkw4ah3qnnyo","tag_id":"cjqhw7t91001dwkw4fwgps7kh","_id":"cjqhw7t9b001rwkw40a44mqxf"},{"post_id":"cjqhw7t96001jwkw4mcdnus2b","tag_id":"cjqhw7t830011wkw4lw5p4tdc","_id":"cjqhw7t9b001swkw4xtk64vwl"}],"Tag":[{"name":"Git","_id":"cjqhw7t4q0006wkw4pcxjcmko"},{"name":"设计模式","_id":"cjqhw7t4t0009wkw4l7na81t7"},{"name":"计算机网络","_id":"cjqhw7t7j000lwkw45caj84sz"},{"name":"TCP/IP","_id":"cjqhw7t7v000qwkw4n7h04m97"},{"name":"Hexo","_id":"cjqhw7t830011wkw4lw5p4tdc"},{"name":"Java","_id":"cjqhw7t870017wkw4qbqhgbto"},{"name":"HTTP","_id":"cjqhw7t91001dwkw4fwgps7kh"}]}}