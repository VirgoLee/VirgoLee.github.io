{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/README.md","path":"README.md","modified":1,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/myfavicon-16x16-me.png","path":"images/myfavicon-16x16-me.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/myfavicon-32x32-me.png","path":"images/myfavicon-32x32-me.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/LICENSE","path":"lib/canvas-nest/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/README.md","path":"lib/canvas-nest/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest-nomobile.min.js","path":"lib/canvas-nest/canvas-nest-nomobile.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.all-contributorsrc","hash":"0ca0200bb5cba4cd157f2cb74703c4cb4c29cda5","modified":1545660806588},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1545660806590},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1545660806591},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1545660806593},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1545660806594},{"_id":"themes/next/.gitignore","hash":"0378adb9c2dc4855b3198184df4863cb30e4059c","modified":1545660806604},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1545660806605},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1545660806606},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1545660806607},{"_id":"themes/next/README.md","hash":"943f9fd6ed1781350cdd05a26a1cfad24d035c8b","modified":1545660806609},{"_id":"themes/next/_config.yml","hash":"3ab0f5077d4610a3a91b08ec0fa252dfabdc3bf0","modified":1550060524511},{"_id":"themes/next/bower.json","hash":"edbe7db4e39af86bb3163df5f0ab87cc0b420479","modified":1545660806612},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1545660806613},{"_id":"themes/next/gulpfile.coffee","hash":"67eaf2515100971f6195b60eeebbfe5e8de895ab","modified":1545660806645},{"_id":"themes/next/package.json","hash":"0a6b9a8d9ccf52a5941ce4ec28d5b490adbd9970","modified":1545660806807},{"_id":"source/CNAME","hash":"98fa9175b1bb7507f8f248bca30c048323c9daf3","modified":1545546846464},{"_id":"source/README.md","hash":"ec30dd4bbbdbb67701f32990c612ba508bc08a50","modified":1545930372180},{"_id":"source/robots.txt","hash":"568766644b349febd5329cab2b3453820c5e7799","modified":1546178145551},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"22f2ccc5522563b67c8663849fc1d6cbae93a8ff","modified":1545660806596},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"40b0fd9fdb8586fab98e23f713940e7a2f80e2f9","modified":1545660806598},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"1e212fe229bd659726b4a3bcf4b5b14e0310ba3a","modified":1545660806599},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"36201119490a04107c8179b10202548a9d0e5e60","modified":1545660806601},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1545660806602},{"_id":"themes/next/.github/stale.yml","hash":"2d184d1ac19aee16134f562d5bce4d9efda24847","modified":1545660806603},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1545660806615},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"1dada3c3404445a00367882b8f97cdf092b7943d","modified":1545660806616},{"_id":"themes/next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1545660806618},{"_id":"themes/next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1545660806619},{"_id":"themes/next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1545660806620},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"f2fd611a84dd6f9ed5395b63e187e29e9effbcd3","modified":1545660806621},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1545660806623},{"_id":"themes/next/docs/MATH.md","hash":"0540cd9c961b07931af9f38a83bc9a0f90cd5291","modified":1545660806624},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1545660806625},{"_id":"themes/next/languages/de.yml","hash":"641e49587d41bb87e4d5932dc3d975754ded7953","modified":1545660806648},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1545660806649},{"_id":"themes/next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1545660806650},{"_id":"themes/next/languages/fr.yml","hash":"ebcd1f188af8c3f5ef1f0923e794c839fbfae2d4","modified":1545660806651},{"_id":"themes/next/languages/id.yml","hash":"9709a4dbacc56a1571a96b139b872128d6959e90","modified":1545660806652},{"_id":"themes/next/languages/it.yml","hash":"4e3adeb10c0fa627935d69ae1783ce0894f5dee5","modified":1545660806653},{"_id":"themes/next/languages/ja.yml","hash":"82afb0a5637ad67065fa5b2624fa56c7c240c3c6","modified":1545660806655},{"_id":"themes/next/languages/ko.yml","hash":"33e065ceb21590b8eb32430a69e76c2f057eb758","modified":1545660806656},{"_id":"themes/next/languages/nl.yml","hash":"060efc260c1c529469d739d97dcee79683e8f411","modified":1545660806657},{"_id":"themes/next/languages/pt-BR.yml","hash":"dc09e290e908744ca28e093dbdd859ca2a20290e","modified":1545660806658},{"_id":"themes/next/languages/pt.yml","hash":"53e2a52b9d5dc20c04080acd4f5b954e8699780f","modified":1545660806660},{"_id":"themes/next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1545660806661},{"_id":"themes/next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1545660806662},{"_id":"themes/next/languages/uk.yml","hash":"6320439c6e9ff81e5b8f8129ca16e9a744b37032","modified":1545660806663},{"_id":"themes/next/languages/vi.yml","hash":"e2b3b18359ab41d58c64b2002acfedd60a7505a4","modified":1545660806664},{"_id":"themes/next/languages/zh-CN.yml","hash":"b973f99ba7c3fa4051fe1bff81ba5b79bf4aff5d","modified":1546259792746},{"_id":"themes/next/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1545660806666},{"_id":"themes/next/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1545660806668},{"_id":"themes/next/layout/_layout.swig","hash":"472b064cf85b5a70d8fe75fb3273c8a81784fe35","modified":1545740694224},{"_id":"themes/next/layout/archive.swig","hash":"4b53070008775ecfd03953bd1b4adfcb0fabcaac","modified":1545660806799},{"_id":"themes/next/layout/category.swig","hash":"f0e3338bfa5efb205d2c28e635e9611f1fff3b55","modified":1545660806800},{"_id":"themes/next/layout/index.swig","hash":"bf2294a87e77e3f54e155c2fd294095b514f7229","modified":1547557361156},{"_id":"themes/next/layout/page.swig","hash":"75ff753543bcbf992e346eb471f4097819971465","modified":1545660806802},{"_id":"themes/next/layout/post.swig","hash":"0554f42f90f4a524666c2b520be30b689c1d6a87","modified":1545660806803},{"_id":"themes/next/layout/schedule.swig","hash":"e79f43df0e9a6cf48bbf00882de48c5a58080247","modified":1545660806805},{"_id":"themes/next/layout/tag.swig","hash":"7cda2822e50b9fee9848a6b81e6c2d1aca830aeb","modified":1545660806806},{"_id":"themes/next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1545660806817},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1545660806818},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1545660807076},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1545660807078},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1545660807079},{"_id":"source/_posts/template.md","hash":"aac94de7ae25bcaf6f262f558dd1b124610888b0","modified":1549415424540},{"_id":"source/about/index.md","hash":"83555f5856d24afe8bb6177df1e0603d3376d9d6","modified":1550060492263},{"_id":"source/categories/index.md","hash":"3aecf4cd1924b43f557bb92ea0d2ea47422f5c21","modified":1546100710510},{"_id":"source/tags/index.md","hash":"142bff234d864dc5e4129c050dd031c675ee7b10","modified":1546100688364},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545660806996},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1545660806627},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1545660806629},{"_id":"themes/next/docs/ru/README.md","hash":"0b69e831b4617f801d9b49e8ce810daacbbee6c1","modified":1545660806630},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1545660806632},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"e771c5b745608c6fb5ae2fa1c06c61b3699627ec","modified":1545660806634},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"9b512cb820627fcc45c9f77c7a122aa99e021bd5","modified":1545660806635},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"6ea741f380dc3e90661d12db7e115a94b77643a4","modified":1545660806636},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1545660806638},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1545660806639},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"7214fcd1b5830e62b3ac0836ad2d1b0fa391ae12","modified":1545660806641},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"69d73e86d8f7d2deafc436df84713a1425704d8a","modified":1545660806642},{"_id":"themes/next/docs/zh-CN/README.md","hash":"7fb215a0a633384948ac9228ac14617b4a974dbd","modified":1545660806643},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"2095d1214a4e519a1d31b67b41c89080fa3285d3","modified":1545660806644},{"_id":"themes/next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1545660806671},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1545660806672},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1545660806673},{"_id":"themes/next/layout/_macro/page-end-tag.swig","hash":"9f945e389b0cb89afd8dcd9cb1366a151dc236c1","modified":1545667688039},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"6f3b4fa9390b93454ea69c407c58d4dfcc507f65","modified":1545660806680},{"_id":"themes/next/layout/_macro/post.swig","hash":"4f66ed71e857bc56d936098170fda6c72f0c9a00","modified":1545741222409},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"43b281f7fc6c9554e5328cd4bb91f3e60f09ee72","modified":1546597982868},{"_id":"themes/next/layout/_partials/comments.swig","hash":"f1e25d53d76f898d280d0422d037e646d11f342b","modified":1545660806685},{"_id":"themes/next/layout/_partials/footer.swig","hash":"6d56acdcdc12ebca9c1d90f8a2b52ad17aafca6e","modified":1545746334518},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"20704846a29d72b24f6e446a6c22b10cf50a624b","modified":1545660806688},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1545660806703},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"dee345054d564dd56f74bb143942d3edd1cb8150","modified":1545660806704},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"6337747816219616916e73bdfd6961a164f872cf","modified":1545660806723},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"c31d54154eed347f603009d2d65f7bf8d9a6885a","modified":1545660806724},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"dcefdf14856f0c94fa687463fa7411b262cc0d58","modified":1545660806725},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"579a39a8005d957e5b0cf4eea42f68063a3d10f0","modified":1545660806735},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"f67ec79cd949c10eb280014f839530d610758b64","modified":1545660806758},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"5c75a183c3ca6e62a63ad1931fc5a0a178649e70","modified":1545660806770},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"9e00cb9b3fdfe2e2c4877a874d0d3ecb7fd0f3ee","modified":1545660806771},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"debba9b7110f635204a15df148194d4c2fd2668b","modified":1545660806777},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"a4931a5c2f7f477d65cd76b5724f4ae3a509ae7a","modified":1545660806778},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"2b6c626f68f20d83023c749b62fffd54af42fc9a","modified":1545660806779},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"4142df872d10f98c255ed726a38c26e3ff46f16a","modified":1545660806780},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1545660806781},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"f58463133bf8cfef5ff07f686b834ff8cbbe492f","modified":1545660806783},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cdb6152582313268d970ffeef99b4a8a7850f034","modified":1545660806814},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"3db90c52bc8af57c6fa4a9dbdc524e1ecdc8b7b1","modified":1545660806815},{"_id":"themes/next/scripts/tags/button.js","hash":"510f3711a9c9d3e2a844250647d90e8359e7d130","modified":1545660806820},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1545660806822},{"_id":"themes/next/scripts/tags/exturl.js","hash":"e9dab948e6327b22b4fc0c66cf97f6600a444dd5","modified":1545660806823},{"_id":"themes/next/scripts/tags/full-image.js","hash":"ef2c2985a3edb9f69740740c5bc42d4b692c86fd","modified":1545660806824},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"aface11629970a5c4ee38aaa15550d2caee59560","modified":1545660806830},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"ab4a82a7246265717556c7a42f897430340b88cf","modified":1545660806832},{"_id":"themes/next/scripts/tags/label.js","hash":"bb502616bfabe85de5de903074ec6afe627f8413","modified":1545660806833},{"_id":"themes/next/scripts/tags/note.js","hash":"bd3310a5890bded1bda9ba3ad6f98ee44ecb101a","modified":1545660806834},{"_id":"themes/next/scripts/tags/tabs.js","hash":"2d257e26718d4011509fd6f530d2ea37e50e3e66","modified":1545660806835},{"_id":"themes/next/source/css/main.styl","hash":"2a62e2a11e9cdcc69e538d856d6f9ce228a07c93","modified":1545660806994},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1545660806998},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1545660806999},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1545660807002},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1545660807003},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1545660807004},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1545660807005},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1545660807007},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1545660807008},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1545660807009},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1545660807011},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1545660807012},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1545660807013},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1545660807014},{"_id":"themes/next/source/images/myfavicon-16x16-me.png","hash":"46efb3015e67a0c374008887d75b6d48a41d7bbb","modified":1545745233087},{"_id":"themes/next/source/images/myfavicon-32x32-me.png","hash":"be0fd3464ec8f359ea628a9dee3b971595ef5f6f","modified":1545745247123},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1545660807015},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1545660807016},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1545660807018},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1545660807019},{"_id":"source/_posts/android/email-sender.md","hash":"f00eb45f7113915d1e7dbea7326e0098b7a838cb","modified":1549415954821},{"_id":"source/_posts/android/template.md","hash":"cb8720dcf807d9de700004eb5b9c87c83fe5d3c4","modified":1549415966263},{"_id":"source/_posts/android/view-click-event.md","hash":"f2921d318b5d056c00b09d9ff30887da638bf711","modified":1549415976365},{"_id":"source/_posts/computer_network/five-connection-process.md","hash":"6394b4d671a2bec15a746b4691c7199943c3f37b","modified":1549415897937},{"_id":"source/_posts/computer_network/four-http-https.md","hash":"cf28617f00654d3e121618d249b1e1b0e5ae0246","modified":1549415906969},{"_id":"source/_posts/computer_network/one-network-model.md","hash":"0d19fac00de7518bec944831628ecbad43b4cab6","modified":1549415915913},{"_id":"source/_posts/computer_network/template.md","hash":"85e624cc4a80660e5cc6d018789c620a5f7b37bf","modified":1549415924773},{"_id":"source/_posts/computer_network/three-tcp-reliability.md","hash":"23cfe40bbbc7144e2c2792f4e9d807fc5e15cea7","modified":1549415934231},{"_id":"source/_posts/concurrent_art/template.md","hash":"8360d84c5ccc2db177fd361f6b733f54b5240e9d","modified":1549415886022},{"_id":"source/_posts/computer_network/two-tcp-connection.md","hash":"45179c49c180f9c3ec983866b4de03ef2dfea5c8","modified":1549415943240},{"_id":"source/_posts/concurrent_art/two-volatile-synchronized.md","hash":"2def74dad0b6228cefc73705269a388f1791f1da","modified":1549415873174},{"_id":"source/_posts/data_tructures_and_algorithms/template.md","hash":"aac94de7ae25bcaf6f262f558dd1b124610888b0","modified":1549415424540},{"_id":"source/_posts/database/mysql_存储过程.md","hash":"ccdfdc4f33a0a5a6ffffece3ee1c3f72a633224e","modified":1550152542344},{"_id":"source/_posts/database/template.md","hash":"aac94de7ae25bcaf6f262f558dd1b124610888b0","modified":1549415424540},{"_id":"source/_posts/design_pattern/eight-facade.md","hash":"2fd70bd76b58deb4f24385f6e44cf716a5dc3164","modified":1551713712353},{"_id":"source/_posts/design_pattern/eleven-template.md","hash":"73d66925338ede9d0481481c6afdd0aaba276986","modified":1551713754648},{"_id":"source/_posts/design_pattern/five-adapter.md","hash":"f884cf726fe555857e05731c6a1c7b0ba410a18e","modified":1551713674933},{"_id":"source/_posts/design_pattern/four-prototype.md","hash":"c91ab2a0a304dea4d9a1787b1cbfa6d7d2feee38","modified":1551713658355},{"_id":"source/_posts/design_pattern/nine-flyweight.md","hash":"9fc9e4992e508666e7d5d373c524ca0d337fbfa2","modified":1551713725343},{"_id":"source/_posts/design_pattern/one-singleton.md","hash":"369ef69722e730dd4048846e13baa47e196da2c2","modified":1551714183000},{"_id":"source/_posts/design_pattern/seven-proxy.md","hash":"dbed284c36e2fcf8e710d82f82f4c8babdc6f5d8","modified":1551713696557},{"_id":"source/_posts/design_pattern/six-decorator.md","hash":"c3dad9cf73639098cee487a004d79e126d7e4a5e","modified":1551713582301},{"_id":"source/_posts/design_pattern/template.md","hash":"60aa720607ab253a07758cc6ce3498848114b37e","modified":1549415820792},{"_id":"source/_posts/design_pattern/ten-strategy.md","hash":"9f1161f6939c277bf0f79a2def3dd92a0cf3d2f1","modified":1551713740935},{"_id":"source/_posts/design_pattern/thirteen-composite.md","hash":"6f84ece3005a5a3ae54b65c0f77ddcaf0c157d3c","modified":1551713779945},{"_id":"source/_posts/design_pattern/three-builder.md","hash":"f08894bcd3d58215fa6c0455f2b7ea31e25859d9","modified":1551714279535},{"_id":"source/_posts/design_pattern/twelve-observer.md","hash":"15889c36744813f98e7053335b5748af7e7efca2","modified":1551713768474},{"_id":"source/_posts/design_pattern/two-factory.md","hash":"d87aadb38d179ba7ef2c4bdb14ed060d526226c8","modified":1551714234081},{"_id":"source/_posts/git/git-ssh-key-set.md","hash":"63cf8ef5eac6dc0fc6beaad8b48e5f4db1b754d6","modified":1549415716209},{"_id":"source/_posts/git/git-use-guide.md","hash":"a254163cde34bc6456ebb42111a6d267ef8f48d5","modified":1550321408327},{"_id":"source/_posts/git/template.md","hash":"aac94de7ae25bcaf6f262f558dd1b124610888b0","modified":1549415424540},{"_id":"source/_posts/hexo/hexo-blog-compress-five.md","hash":"5ad62e9f6df2688e61efd522bb6a9b1cdb9215b2","modified":1549415653774},{"_id":"source/_posts/hexo/hexo-blog-config-two.md","hash":"d367616b647f4884962da27215852d43517ceb5a","modified":1549415667604},{"_id":"source/_posts/hexo/hexo-blog-deploy-three.md","hash":"8dcdec1298f7d6267504590b6d5d40215a7f5a33","modified":1549415677131},{"_id":"source/_posts/hexo/hexo-blog-setup-one.md","hash":"1d3adfff2098d2f3ca1e44bf24c6de2f58e1ed97","modified":1549415685995},{"_id":"source/_posts/hexo/hexo-blog-tranfer-four.md","hash":"9458b0ef873fe8fccb5c81d31127497320f02e6f","modified":1549415695264},{"_id":"source/_posts/java/java-enum-singleton.md","hash":"40dd61909df8b5d7acca58722077a959a1831cd1","modified":1551277453993},{"_id":"source/_posts/java/java-mvc.md","hash":"65bd86b1c8ab64ebc0a07f53e144626aeff05684","modified":1549415566629},{"_id":"source/_posts/java/java-sorts.md","hash":"ca72f37d311c8a29b5fbf636dada6e873a72d659","modified":1549985105178},{"_id":"source/_posts/java/java-volatile与双重校验锁.md","hash":"9e33c85e15c3b06c5419e2aea3ad43077750f546","modified":1550151876400},{"_id":"source/_posts/java/template.md","hash":"aac94de7ae25bcaf6f262f558dd1b124610888b0","modified":1549415577528},{"_id":"source/_posts/jvm/jvm-runtime-area.md","hash":"6403d7fecb631117cfe2706a4adf989867fa2471","modified":1549521690278},{"_id":"source/_posts/linux/conf-network.md","hash":"87dcf1bb775c84eef7ad8d08a86bbca2215b3ec0","modified":1549415492454},{"_id":"source/_posts/linux/install-centos.md","hash":"1da9d464fa26b906f265ebc4fddee55f3604cbc5","modified":1549415501842},{"_id":"source/_posts/linux/install-jdk-tomcat.md","hash":"fb5e4c205391b445c5ce5ca525b6d08ded9fb38d","modified":1549415512157},{"_id":"source/_posts/linux/install-rabbitmq.md","hash":"e60f23e5984c54d3fff4ff2535546facf76c787f","modified":1549415520986},{"_id":"source/_posts/linux/mysql-install.md","hash":"2a787e8af05b68bbce3289d8476976a98edab102","modified":1549415530263},{"_id":"source/_posts/linux/template.md","hash":"9770ea50294dc9911fa457a796f4c7af361a6453","modified":1549415539782},{"_id":"source/_posts/markdown/markdown-skills.md","hash":"9e93ad0f3e42b7b5aae09c589bbe97b5d6577bde","modified":1549415478948},{"_id":"source/_posts/nginx/four-proxy-upstream.md","hash":"08f4567b957cbce3644f419a8b45e4f973c9f7c2","modified":1551711252039},{"_id":"source/_posts/nginx/one-install.md","hash":"94e6cc75850a1dd1684e536075139545c50753c6","modified":1551708062641},{"_id":"source/_posts/nginx/template.md","hash":"78b0f25c7efc025bc099315fae39f5393f4330b6","modified":1551706486670},{"_id":"source/_posts/nginx/three-logs.md","hash":"32781f03566defe3cce30962257932ae6244a509","modified":1551711252044},{"_id":"source/_posts/nginx/two-conf.md","hash":"4408645beae14be0da79d3ded7a551db269f7697","modified":1551711252041},{"_id":"source/_posts/source_code/reentrantlock.md","hash":"89b38d7b0baf10549d1ac9fa63ecf0927527fac4","modified":1550996414810},{"_id":"source/_posts/source_code/template.md","hash":"c9b8aadfde1dd4d7dab5b7eaa1ac793bf5d74bf3","modified":1550994224879},{"_id":"source/_posts/springboot/package-deploy-jar-.md","hash":"427e6dea00a73903914e2ecfaa405f05068ad4ce","modified":1550847075076},{"_id":"source/_posts/springboot/template.md","hash":"d845d19456e7d19d16084c4bb5580177bcc499df","modified":1549415439463},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545660806731},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545660806732},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545660806944},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545660806945},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545660806949},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545660806989},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545660806993},{"_id":"themes/next/source/images/avatar.gif","hash":"9399d8157424db89e0197402ac135d6512666adc","modified":1545551583553},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1545660806678},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"e40fcb1803aaa1e60bb348fcfd1a90df5dbba7a2","modified":1545660806679},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1545660806690},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"d8dceb53599acad99bab0a62895bfab75635a893","modified":1545660806691},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"2584127f6a88cbfa85ce91fec865ceaa4faee3d6","modified":1545740468111},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"2177da1d3c64abb6b3398f90885cf543ae6fe6da","modified":1545660806695},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1545660806696},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"f3ae3168801304af3d80ec3b84264e1d4201cb89","modified":1545660806697},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"e015c7d9b84062b60b15b36be3ef11929dd10943","modified":1545660806698},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"daa6e5b7dbc409d6bf8a031d5413d8229e9c0995","modified":1545660806700},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"f46699a9daa5fef599733cbab35cb75cf7a05444","modified":1545660806702},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"55de88525c05af6053524c78ef4b42b46c3bfb6d","modified":1545660806706},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"e8dfb86eb62b9c2bc1435d6d1afa95d3b4c7b931","modified":1545660806708},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"b6e7d0af24b4d52d168a4eb0fb29bffa69621395","modified":1545660806709},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"7a9b687087793bf5e218cbc345214f927fa5601a","modified":1545660806710},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f6454c452b2e90a8c760321bce7e3dc6119b71fa","modified":1545660806712},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1545660806713},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"3f590e78141c45baeeea2892e898df9f846c09a7","modified":1545660806715},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1545660806716},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1545660806718},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1545660806719},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1545660806720},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"e0f0a753d4920ffb37ddbc8270515654a0b9b92a","modified":1545660806728},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"23c6d15aa2a305f9d29caee1b60cfae84d32fa09","modified":1545660806730},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"23c6d15aa2a305f9d29caee1b60cfae84d32fa09","modified":1545660806734},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1545660806739},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"8920693489109dec316f1bd188fc8f478f0d93d9","modified":1545660806740},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"73576c9683d9ad9b124916dc6c660607fe7cc1fa","modified":1545660806742},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"1ce5fa218a44cf6e620583e9013e0b674dd6a989","modified":1545745070268},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1545660806744},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1545660806746},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"8ab040fccba41675bc835973515530af8a51f8bd","modified":1545660806747},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"cfc932c5db04fef64cc56d3ba0b8ddf3a15a63bd","modified":1545660806748},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"d461dfe853e5317f62e8551f9d8338c66a9935e7","modified":1545660806750},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"39928f358dd13d9fc1a4641800e57be157ecd815","modified":1545660806752},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"bd8382d4f12df207ed52f75f6e5fb06527970167","modified":1545660806753},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"d18c87d7839e7407e39acd2998bcc9e0b34611b0","modified":1545660806754},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1545660806756},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"276726e782b7c9108552c2fc7f3733980eb9385b","modified":1545660806757},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"978c1e889f55cdf164707498f6b4e0460c2588df","modified":1545660806760},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1dd918b4a97b3e30a333ecc6451a4c2e31dc2cab","modified":1545660806762},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"40d17077d1bac4ef858c017f1e2be6c91660929a","modified":1545660806763},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"b7f3144cf2e8f55ddf05bd0be5db32c7d5daff3a","modified":1545660806765},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"b98e8acb635beeaa929dab41c8cc5e519b9609b0","modified":1545660806766},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"509cd7cd520f15d8bde51e587dbe08e0255d5d3f","modified":1545660806767},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"9fe4369cf1a0886b4fbae1346db72ae92ab48157","modified":1545660806768},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"30e9e55d9af2ced6e6b156a042026a8b480f0ab0","modified":1545660806773},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"860de4ce6fccc516d2f779a4b600a4214d8c18e2","modified":1545660806774},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ee4552977092a0c4623c128293c9044cbc131504","modified":1545660806775},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1545660806789},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"0bc1c629d071433ee5eb7fc5522e9400cdcbc221","modified":1545660806790},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1545660806791},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1545660806793},{"_id":"themes/next/scripts/filters/after_post_render/exturl.js","hash":"899b5a5e80e2bf441b7c40f24123f26a5097b8de","modified":1545660806812},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"a48b6f0ce06589bd8af90609c49d0645e913d192","modified":1545741041818},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1545660806943},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"8aa98ae349908736ba43196c42498fd5bdeb780a","modified":1545660806947},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"d1deb849e697cfb6258b8ab7bfb47e219210ccd9","modified":1545660806948},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"8d6cf29f63c90364f4d3c336f7c9bb794b4c46cc","modified":1545660806987},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1545660806988},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"72927abd51d3a607a6ba32cf882390792b34e834","modified":1545660806991},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e27a1034b0cd9821bab094565e9aa9bb80c6fa3e","modified":1545660806992},{"_id":"themes/next/source/js/src/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1545660807022},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84906eeae57bd06744dd20160b93eacf658f97e2","modified":1545660807024},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"c7e2a588b679d46379124141bb2f30bc2f3210e2","modified":1545660807025},{"_id":"themes/next/source/js/src/exturl.js","hash":"c48aa4b3c0e578a807fd3661e6cd4f3890777437","modified":1545660807026},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1545660807028},{"_id":"themes/next/source/js/src/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1545664602732},{"_id":"themes/next/source/js/src/motion.js","hash":"b74d3c6c3b289b00c8e376543d5ad7fe8e7948ec","modified":1545660807029},{"_id":"themes/next/source/js/src/post-details.js","hash":"7d309b771e86c7e22ce11cc25625481ef7d5985c","modified":1545660807031},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1545660807034},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"68d3690152c89e7adb08bb35ec28dbda2bd93686","modified":1545660807035},{"_id":"themes/next/source/js/src/utils.js","hash":"9987086ccd4dd9b0e0e50d99f2e200dbbf78c813","modified":1545660807036},{"_id":"themes/next/source/lib/canvas-nest/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1546165437719},{"_id":"themes/next/source/lib/canvas-nest/README.md","hash":"28bc2250a16e22c705cba7b3c17fcc15081e50f2","modified":1546165437725},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest-nomobile.min.js","hash":"6b4437a9cd8aa04329cc6220a595acfe1fb9b598","modified":1546165437732},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1546165437739},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1545660807039},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1545660807041},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1545660807042},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1545660807043},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1545660807044},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1545660807072},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1545660807073},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1545660807074},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1545660807061},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6e076b5e183eedf425a445e99851f938789c3194","modified":1545660806786},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1545660806787},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"1fd0650a8e5bff2c7146c810b04b3b88ee1f670e","modified":1545660806840},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1545660806842},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"fbb6be577529c750ef7c872fe7abdc7ab0faf0f8","modified":1545660806931},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1545660806843},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1545660806844},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1545660806846},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1545660806871},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1545660806906},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"c142c8216c2a50e2fa5f3ce127e46e2a44fd88a8","modified":1545660806933},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1545660806934},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"ab775f23ad475efb25376b5aad752ae8b56cfd8c","modified":1545660806936},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1545660806937},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1545660806938},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"60179df0e5c9f7c2e9fda046040536c5d8b02f65","modified":1545660806939},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"75b8209da432952cb3ead5b2121b72b46312a2fc","modified":1545660806952},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1545660806954},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1545660806956},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1545660806957},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"a80782a6eb3b40da2e14251da49069aff3115d8a","modified":1545660806958},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa6c00fdaf8f0ca3b690a5a556671745fb67e2c9","modified":1545660806959},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1545660806960},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"2ccb9bdc309b7c1ef183a3dbb0a4621bec54a328","modified":1545660806961},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1545660806968},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"157e6915dcf5990566e463acffa71043b2651c07","modified":1545660806970},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4ed12bf17eeb7cd4f22dd01fdd486cda68d169a8","modified":1545660806971},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1545660806972},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"b26f8a3394d8357a5bfd24d9f8bf62d7b4063ebb","modified":1545660806973},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"30d61fa31e405fcfe3d2ff6174ccad60be1745f9","modified":1545660806978},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b154333408d2c55f4dcf6034ea0df8d952261c3","modified":1545660806979},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"11fcaaf7524445a194801e1048ea2fb84b316414","modified":1545660806980},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1545660806981},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"8bea9123be2d8ea4c84ed70d2c7e5d6a42545beb","modified":1545660806983},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0d6f0df798449b710e1e5dbd43d470089b2a3c95","modified":1545660806984},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"a558803ca81cceae2bdc22c18ef638fcc023681b","modified":1545660806985},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"2fdf36f8a53ff8775aa9fddda15981b00f822649","modified":1545660807033},{"_id":"themes/next/source/lib/canvas-nest/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1546165437714},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1545660807047},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1545660807049},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1545660807050},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1545660807065},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1545660807066},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1545660807056},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7dd247c8869fdefb5a007045d00f3ef8ceecf300","modified":1545660806848},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"3f3d2a43d1a326bad25b633c8ec9ddd87867224c","modified":1545660806850},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"34f5ac3c1ed2dd31e9297cc4c0733e71bc2e252f","modified":1545660806851},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1545660806852},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1ec3102ee8f5b8cc0877da1fd109d37470401e7b","modified":1545660806854},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"b8647d6140141b0a160607f6353e4d4594cca92e","modified":1545660806855},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1545660806856},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1545660806859},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"75855e18fd83a8affe0aa8c78e8d87bcac3f82ea","modified":1545660806860},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1545660806861},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"e5a5f8747fdf2ca960e4e73c081b8952afd62224","modified":1545660806864},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"630be616447a982413030e561bbd3a80ac14b120","modified":1545660806865},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1545660806866},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"ad4cae23c8e383f4fabc9a2a95bca6055020d22e","modified":1545660806867},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1545660806869},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"ef588bc56eaa5b84296e28f4c2c36d9ea8b3b8c3","modified":1545660806870},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1545660806873},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"3241c9ae85ca11b6c4e125ac471aa4342ba1ce9c","modified":1545660806875},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"fc94dd09b4245143b452d6cf2fc4c12134d99d6d","modified":1545660806876},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1545660806877},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"317c9ceda655e9dc373ce8e7b71d20b794fce9a4","modified":1545660806878},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1545660806879},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"330c8884efb5612e7eb03986d87d29e8b0651974","modified":1545660806881},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"7b69c1ad392f8a386854e318d4c8ddeb9ba8d793","modified":1545660806882},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"82bc7fa5d38d98e98cc25f9a73189024fda25e63","modified":1545660806883},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"c7ca3b90c81eb6b91dd1d336328226471738de54","modified":1545660806884},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1545660806885},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1545660806886},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"539fc0880b2e035e8316d5d4b423703195c1b7ba","modified":1545660806888},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1545660806889},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"d32d2c4a0b65742e3ab1581798ff0ac07d2214fa","modified":1545740716194},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5c3141d58970a0614896b6a62fd7a8a8caf4e401","modified":1545660806890},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"fa57ec9a6f1943c0558856dfba2d6b8faca0cd4d","modified":1545660806893},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"00a504620c454287111dc0ace64c989e1ff97f54","modified":1545660806895},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"41858f2dfd34a57d0a2016b1bce08efb61943b7a","modified":1545660806896},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1545660806897},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1545660806899},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1545660806900},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"9e05a2232faabb41bcebb51d545d897a76f077da","modified":1545660806901},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1545660806902},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"94d76e6da600a36d80e2470326ebb6b3be447ccb","modified":1545660806904},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1545660806905},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1545660806908},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"2d58ad90f148e845bc7023751a7a13260600f8d6","modified":1545660806909},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1545660806911},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1545660806912},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1545660806913},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1545660806914},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1545660806916},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"f1640253cbbf71d0c04c34c25bd61045894f98bc","modified":1545660806917},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"f4d8144c22544bdb89787c14ab9d39578dae4b7c","modified":1545660806919},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"a01484e350ad5fc9b1fdfbfafb2ddd9687ad4d20","modified":1545660806922},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1545746324822},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1545660806923},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"7fc0a470d2e859de775094c485fee75ce67b3550","modified":1545660806924},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1545660806925},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1545660806926},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"acfdd76b1c90d2e384affb3d0006a39b524609d2","modified":1545660806928},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1545660806963},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1545660806966},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeb4b94c9468f7ca797665a91ce7c07e2a104367","modified":1545660806929},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1545660806976},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1545660807058},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1545660807070},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1545660807054}],"Category":[{"name":"计算机网络","_id":"cjsuiv42x00050ww4y6x91ch3"},{"name":"设计模式","_id":"cjsuiv43r000e0ww40dbl550k"},{"name":"Git","_id":"cjsuiv44s001c0ww4i8uq0010"},{"name":"Hexo","_id":"cjsuiv44y001j0ww4ikrp7xkr"},{"name":"Java","_id":"cjsuiv45j001z0ww4s7y92u36"},{"name":"Linux","_id":"cjsuiv45p00270ww4uc40rxfn"},{"name":"Markdown","_id":"cjsuiv463002r0ww4sajstp91"},{"name":"Nginx","_id":"cjsuiv466002w0ww4zw3yiwgj"},{"name":"Android","_id":"cjsuiv4a3003i0ww4ajwymirt"},{"name":"MySQL","_id":"cjsuiv4ai003w0ww4rzdmain0"},{"name":"JVM","_id":"cjsuiv4bl004y0ww4yqf1erzm"},{"name":"SpringBoot","_id":"cjsuiv4br00560ww4bcctjqn6"},{"name":"源码分析","_id":"cjsuiv4cc005j0ww42edwihq3"}],"Data":[],"Page":[{"title":"关于","date":"2019-01-01T15:17:50.000Z","type":"about","_content":"\n## 1.关于我\n\n18年毕业的小菜鸟一只。\n\n计算机相关专业（大概相关吧╮(╯▽╰)╭在电子信息类边缘徘徊），喜欢编程，单片机什么的。自学Java，从此踏上了编程的不归之路，目标架构师！梦想还是要有的，万一实现了呢。\n\n喜欢写一些博客记录自己的成长过程，学完某个东西后喜欢做个总结。当然也希望可以帮助到一些人。\n\n爱追新，喜欢尝试并使用新的技术；爱思考，试图找到问题的最佳解决方案；爱求知，想要知道所有不懂的东西。\n\n强迫症，不喜欢看到杂乱的代码。\n\n## 2.博客记录\n\n​\t2017年：开始写博客。\n\n​\t2018年：将博客迁移到`GithubPages`。\n\n​\t2018年末：对博客进行了改造，添加了一些有意思的新功能。\n\n​\t2019年初：现在终于能展现在搜索引擎第一页了。\n\n\n\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2019-01-01 23:17:50\ntype: about\n---\n\n## 1.关于我\n\n18年毕业的小菜鸟一只。\n\n计算机相关专业（大概相关吧╮(╯▽╰)╭在电子信息类边缘徘徊），喜欢编程，单片机什么的。自学Java，从此踏上了编程的不归之路，目标架构师！梦想还是要有的，万一实现了呢。\n\n喜欢写一些博客记录自己的成长过程，学完某个东西后喜欢做个总结。当然也希望可以帮助到一些人。\n\n爱追新，喜欢尝试并使用新的技术；爱思考，试图找到问题的最佳解决方案；爱求知，想要知道所有不懂的东西。\n\n强迫症，不喜欢看到杂乱的代码。\n\n## 2.博客记录\n\n​\t2017年：开始写博客。\n\n​\t2018年：将博客迁移到`GithubPages`。\n\n​\t2018年末：对博客进行了改造，添加了一些有意思的新功能。\n\n​\t2019年初：现在终于能展现在搜索引擎第一页了。\n\n\n\n","updated":"2019-02-13T12:21:32.263Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjsuiv3w700000ww4yc7tvj5n","content":"<h2 id=\"1-关于我\"><a href=\"#1-关于我\" class=\"headerlink\" title=\"1.关于我\"></a>1.关于我</h2><p>18年毕业的小菜鸟一只。</p>\n<p>计算机相关专业（大概相关吧╮(╯▽╰)╭在电子信息类边缘徘徊），喜欢编程，单片机什么的。自学Java，从此踏上了编程的不归之路，目标架构师！梦想还是要有的，万一实现了呢。</p>\n<p>喜欢写一些博客记录自己的成长过程，学完某个东西后喜欢做个总结。当然也希望可以帮助到一些人。</p>\n<p>爱追新，喜欢尝试并使用新的技术；爱思考，试图找到问题的最佳解决方案；爱求知，想要知道所有不懂的东西。</p>\n<p>强迫症，不喜欢看到杂乱的代码。</p>\n<h2 id=\"2-博客记录\"><a href=\"#2-博客记录\" class=\"headerlink\" title=\"2.博客记录\"></a>2.博客记录</h2><p>​    2017年：开始写博客。</p>\n<p>​    2018年：将博客迁移到<code>GithubPages</code>。</p>\n<p>​    2018年末：对博客进行了改造，添加了一些有意思的新功能。</p>\n<p>​    2019年初：现在终于能展现在搜索引擎第一页了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-关于我\"><a href=\"#1-关于我\" class=\"headerlink\" title=\"1.关于我\"></a>1.关于我</h2><p>18年毕业的小菜鸟一只。</p>\n<p>计算机相关专业（大概相关吧╮(╯▽╰)╭在电子信息类边缘徘徊），喜欢编程，单片机什么的。自学Java，从此踏上了编程的不归之路，目标架构师！梦想还是要有的，万一实现了呢。</p>\n<p>喜欢写一些博客记录自己的成长过程，学完某个东西后喜欢做个总结。当然也希望可以帮助到一些人。</p>\n<p>爱追新，喜欢尝试并使用新的技术；爱思考，试图找到问题的最佳解决方案；爱求知，想要知道所有不懂的东西。</p>\n<p>强迫症，不喜欢看到杂乱的代码。</p>\n<h2 id=\"2-博客记录\"><a href=\"#2-博客记录\" class=\"headerlink\" title=\"2.博客记录\"></a>2.博客记录</h2><p>​    2017年：开始写博客。</p>\n<p>​    2018年：将博客迁移到<code>GithubPages</code>。</p>\n<p>​    2018年末：对博客进行了改造，添加了一些有意思的新功能。</p>\n<p>​    2019年初：现在终于能展现在搜索引擎第一页了。</p>\n"},{"title":"分类","type":"categories","date":"2017-12-27T15:58:10.000Z","_content":"\n","source":"categories/index.md","raw":"---\ntitle: 分类\ntype: categories\ndate: 2017-12-27 23:58:10\n---\n\n","updated":"2018-12-29T16:25:10.510Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjsuiv3wd00010ww4uesj9xen","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","type":"tags","date":"2017-12-27T15:57:45.000Z","_content":"\n","source":"tags/index.md","raw":"---\ntitle: 标签\ntype: tags\ndate: 2017-12-27 23:57:45\n---\n\n","updated":"2018-12-29T16:24:48.364Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjsuiv41300020ww4ljqyb1vz","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"计算机网络(二)--TCP三次握手四次挥手","abbrlink":25338,"date":"2018-11-05T14:00:00.000Z","_content":"\n本文主要介绍了`TCP/IP`的三次握手和四次挥手具体步骤及其原因分析。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n>\n\n### 1. 三次握手\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-connection-three.jpg)\n\n`step1:第一次握手`\n建立连接时，客户端发送SYN包到服务器，其中包含客户端的初始序号seq=x，并进入**SYN_SENT**状态，等待服务器确认。（其中，SYN=1，ACK=0，表示这是一个TCP连接请求数据报文；序号seq=x，表明传输数据时的第一个数据字节的序号是x）。\n\n`step2:第二次握手`\n服务器收到请求后，必须确认客户的数据包。同时自己也发送一个SYN包，即SYN+ACK包，此时服务器进入**SYN_RCVD**状态。（其中确认报文段中，标识位SYN=1，ACK=1，表示这是一个TCP连接响应数据报文，并含服务端的初始序号seq(服务器)=y，以及服务器对客户端初始序号的确认号ack(服务器)=seq(客户端)+1=x+1）。\n\n`step3:第三次握手`\n\n客户端收到服务器的SYN+ACK包，向服务器发送一个序列号(seq=x+1)，确认号为ack(客户端)=y+1，此包发送完毕，客户端和服务器进入**ESTABLISHED **(TCP连接成功)**状态，完成三次握手。\n\n```\n建立连接前要确认客户端和服务端的接收和发送功能是否正常。\n第一次客户端发送SYN时 什么也确认不了\n第二次服务端发送SYN+ACK 可以确认服务端发送功能正常\n第三次 客户端收到服务端发送的YSN+ACK 可以确认客户端发送接收功能正常\n最后客户端发送ACK 服务端接收到后 可以确认服务端发送功能正常\n到此就确认完毕了。\n```\n\n### 2. 四次挥手\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-close-connection-four.jpg)\n\n`step1：第一次挥手`\n首先，客户端发送一个FIN，用来关闭客户端到服务器的数据传送，然后等待服务器的确认。其中终止标志位FIN=1，序列号seq=u。 **客户端**进入**FIN_WAIT1**状态\n\n```\n我（Client端）没有数据要发给你（Server端）了\"，但是如果你（Server端）还有数据没有发送完成，则不必急着关闭Socket，可以继续发送数据。所以你先发送ACK\n```\n\n`step2：第二次挥手`\n**服务器**收到这个FIN进入**CLOSE_WAIT**状态，然后它给客户端发送一个ACK，确认ack为收到的序号加一。\n\n**客户端**收到ACK应答后进入**FIN_WAIT2**状态\n\n```\n告诉Client端，你的请求我收到了，但是我（Server端）还没准备好，请继续你等我的消息\"\n```\n\n`step3：第三次挥手`\n服务端关闭服务器到客户端的连接，发送一个FIN给客户端。**服务端**进入**LAST_ACK**状态\n\n```\n告诉Client端，好了，我（Server端）这边数据发完了，准备好关闭连接了\n```\n\n`step4：第四次挥手`\n\n**客户端**收到FIN后，进入**TIME_WAIT**状态\t并发回一个ACK报文确认，并将确认序号seq设置为收到序号加一。\n\n服务端收到客户端回复的ACK后立即关闭，服务端进入**CLOASED**状态\n\n而客户端要等待2MSL后关闭 进入**CLOASED**状态\n\n```\nClient端收到FIN报文后，\"就知道可以关闭连接了，所以发送ACK。但是他还是不相信网络，怕Server端不知道要关闭，所以发送ACK后没有立即，而是进入TIME_WAIT状态，如果Server端没有收到ACK那么自己还可以重传。Server端收到ACK后，\"就知道可以断开连接了\"。Client端等待了2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，我Client端也可以关闭连接了。Ok，TCP连接就这样关闭了！\n```\n\n### 3. TIME-WAIT状态详解\n\n为什么Client端要先进入TIME-WAIT状态，等待2MSL时间后才进入CLOSED状态？\n\n**保证TCP协议的全双工连接能够可靠关闭，保证这次连接的重复数据段从网络中消失**\n\n假设由于IP协议的不可靠性或者是其它网络原因，导致Server没有收到Client最后回复的ACK。那么Server就会在超时之后继续发送FIN，Client端在等待2MSL时间后都没收到信息，说明Server端已经收到自己发送的ACK并且成功关闭了。\n**假设CLient端直接关闭了：**\n\n```java\n1.由于IP协议的不可靠性或者是其它网络原因，导致Server没有收到Client最后回复的ACK。那么Server就会在超时之后继续发送FIN，此时由于Client已经CLOSED了，就找不到与重发的FIN对应的连接，最后Server就会收到RST而不是ACK，Server就会以为是连接错误把问题报告给高层。这样的情况虽然不会造成数据丢失，但是却导致TCP协议不符合可靠连接的要求。所以，Client不是直接进入CLOSED，而是要保持TIME_WAIT，当再次收到FIN的时候，能够保证对方收到ACK，最后正确的关闭连接。\n\n2.如果Client直接CLOSED，然后又再向Server发起一个新连接，我们不能保证这个新连接与刚关闭的连接的端口号是不同的。也就是说有可能新连接和老连接的端口号是相同的。一般来说不会发生什么问题，但是还是有特殊情况出现：假设新连接和已经关闭的老连接端口号是一样的，如果前一次连接的某些数据仍然滞留在网络中，这些延迟数据在建立新连接之后才到达Server，由于新连接和老连接的端口号是一样的，又因为TCP协议判断不同连接的依据是socket pair，于是，TCP协议就认为那个延迟的数据是属于新连接的，这样就和真正的新连接的数据包发生混淆了。所以TCP连接还要在TIME_WAIT状态等待2倍MSL，这样可以保证本次连接的所有数据都从网络中消失。\n\n```\n\n**2MSL:Maximum Segment Lifetime 即数据在网络中保存的最大时间。**\n\n*简单易懂的说法:*\n\n```\n假设Client端发起中断连接请求，也就是发送FIN报文。Server端接到FIN报文后，意思是说\"我Client端没有数据要发给你了\"，但是如果你还有数据没有发送完成，则不必急着关闭Socket，可以继续发送数据。所以你先发送ACK，\"告诉Client端，你的请求我收到了，但是我还没准备好，请继续你等我的消息\"。这个时候Client端就进入FIN_WAIT状态，继续等待Server端的FIN报文。当Server端确定数据已发送完成，则向Client端发送FIN报文，\"告诉Client端，好了，我这边数据发完了，准备好关闭连接了\"。Client端收到FIN报文后，\"就知道可以关闭连接了，但是他还是不相信网络，怕Server端不知道要关闭，所以发送ACK后进入TIME_WAIT状态，如果Server端没有收到ACK则可以重传。“，Server端收到ACK后，\"就知道可以断开连接了\"。Client端等待了2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，我Client端也可以关闭连接了。Ok，TCP连接就这样关闭了！\n```\n\n### 4. TCP 的有限状态机\n\n红色为客户端 蓝色为服务端 细箭头为异常变化\n\n![TCP](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-status-map.png)\n\n### 5. 参考\n\n`https://www.baidu.com/link?url=_mlor11BLttd1jmMU4k9OP0gqcjNKhZQ9fJuvbMOhkuH9-lVeB-y3VIVK1neZURi_tmR3rg1lj2lfgvvGhTV-q&wd=&eqid=d0144c250007b69c000000035bfdfafc`","source":"_posts/computer_network/two-tcp-connection.md","raw":"---\ntitle: 计算机网络(二)--TCP三次握手四次挥手\ntags:\n  - 计算机网络\n  - TCP/IP\ncategories:\n  - 计算机网络\nabbrlink: 25338\ndate: 2018-11-05 22:00:00\n---\n\n本文主要介绍了`TCP/IP`的三次握手和四次挥手具体步骤及其原因分析。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n>\n\n### 1. 三次握手\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-connection-three.jpg)\n\n`step1:第一次握手`\n建立连接时，客户端发送SYN包到服务器，其中包含客户端的初始序号seq=x，并进入**SYN_SENT**状态，等待服务器确认。（其中，SYN=1，ACK=0，表示这是一个TCP连接请求数据报文；序号seq=x，表明传输数据时的第一个数据字节的序号是x）。\n\n`step2:第二次握手`\n服务器收到请求后，必须确认客户的数据包。同时自己也发送一个SYN包，即SYN+ACK包，此时服务器进入**SYN_RCVD**状态。（其中确认报文段中，标识位SYN=1，ACK=1，表示这是一个TCP连接响应数据报文，并含服务端的初始序号seq(服务器)=y，以及服务器对客户端初始序号的确认号ack(服务器)=seq(客户端)+1=x+1）。\n\n`step3:第三次握手`\n\n客户端收到服务器的SYN+ACK包，向服务器发送一个序列号(seq=x+1)，确认号为ack(客户端)=y+1，此包发送完毕，客户端和服务器进入**ESTABLISHED **(TCP连接成功)**状态，完成三次握手。\n\n```\n建立连接前要确认客户端和服务端的接收和发送功能是否正常。\n第一次客户端发送SYN时 什么也确认不了\n第二次服务端发送SYN+ACK 可以确认服务端发送功能正常\n第三次 客户端收到服务端发送的YSN+ACK 可以确认客户端发送接收功能正常\n最后客户端发送ACK 服务端接收到后 可以确认服务端发送功能正常\n到此就确认完毕了。\n```\n\n### 2. 四次挥手\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-close-connection-four.jpg)\n\n`step1：第一次挥手`\n首先，客户端发送一个FIN，用来关闭客户端到服务器的数据传送，然后等待服务器的确认。其中终止标志位FIN=1，序列号seq=u。 **客户端**进入**FIN_WAIT1**状态\n\n```\n我（Client端）没有数据要发给你（Server端）了\"，但是如果你（Server端）还有数据没有发送完成，则不必急着关闭Socket，可以继续发送数据。所以你先发送ACK\n```\n\n`step2：第二次挥手`\n**服务器**收到这个FIN进入**CLOSE_WAIT**状态，然后它给客户端发送一个ACK，确认ack为收到的序号加一。\n\n**客户端**收到ACK应答后进入**FIN_WAIT2**状态\n\n```\n告诉Client端，你的请求我收到了，但是我（Server端）还没准备好，请继续你等我的消息\"\n```\n\n`step3：第三次挥手`\n服务端关闭服务器到客户端的连接，发送一个FIN给客户端。**服务端**进入**LAST_ACK**状态\n\n```\n告诉Client端，好了，我（Server端）这边数据发完了，准备好关闭连接了\n```\n\n`step4：第四次挥手`\n\n**客户端**收到FIN后，进入**TIME_WAIT**状态\t并发回一个ACK报文确认，并将确认序号seq设置为收到序号加一。\n\n服务端收到客户端回复的ACK后立即关闭，服务端进入**CLOASED**状态\n\n而客户端要等待2MSL后关闭 进入**CLOASED**状态\n\n```\nClient端收到FIN报文后，\"就知道可以关闭连接了，所以发送ACK。但是他还是不相信网络，怕Server端不知道要关闭，所以发送ACK后没有立即，而是进入TIME_WAIT状态，如果Server端没有收到ACK那么自己还可以重传。Server端收到ACK后，\"就知道可以断开连接了\"。Client端等待了2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，我Client端也可以关闭连接了。Ok，TCP连接就这样关闭了！\n```\n\n### 3. TIME-WAIT状态详解\n\n为什么Client端要先进入TIME-WAIT状态，等待2MSL时间后才进入CLOSED状态？\n\n**保证TCP协议的全双工连接能够可靠关闭，保证这次连接的重复数据段从网络中消失**\n\n假设由于IP协议的不可靠性或者是其它网络原因，导致Server没有收到Client最后回复的ACK。那么Server就会在超时之后继续发送FIN，Client端在等待2MSL时间后都没收到信息，说明Server端已经收到自己发送的ACK并且成功关闭了。\n**假设CLient端直接关闭了：**\n\n```java\n1.由于IP协议的不可靠性或者是其它网络原因，导致Server没有收到Client最后回复的ACK。那么Server就会在超时之后继续发送FIN，此时由于Client已经CLOSED了，就找不到与重发的FIN对应的连接，最后Server就会收到RST而不是ACK，Server就会以为是连接错误把问题报告给高层。这样的情况虽然不会造成数据丢失，但是却导致TCP协议不符合可靠连接的要求。所以，Client不是直接进入CLOSED，而是要保持TIME_WAIT，当再次收到FIN的时候，能够保证对方收到ACK，最后正确的关闭连接。\n\n2.如果Client直接CLOSED，然后又再向Server发起一个新连接，我们不能保证这个新连接与刚关闭的连接的端口号是不同的。也就是说有可能新连接和老连接的端口号是相同的。一般来说不会发生什么问题，但是还是有特殊情况出现：假设新连接和已经关闭的老连接端口号是一样的，如果前一次连接的某些数据仍然滞留在网络中，这些延迟数据在建立新连接之后才到达Server，由于新连接和老连接的端口号是一样的，又因为TCP协议判断不同连接的依据是socket pair，于是，TCP协议就认为那个延迟的数据是属于新连接的，这样就和真正的新连接的数据包发生混淆了。所以TCP连接还要在TIME_WAIT状态等待2倍MSL，这样可以保证本次连接的所有数据都从网络中消失。\n\n```\n\n**2MSL:Maximum Segment Lifetime 即数据在网络中保存的最大时间。**\n\n*简单易懂的说法:*\n\n```\n假设Client端发起中断连接请求，也就是发送FIN报文。Server端接到FIN报文后，意思是说\"我Client端没有数据要发给你了\"，但是如果你还有数据没有发送完成，则不必急着关闭Socket，可以继续发送数据。所以你先发送ACK，\"告诉Client端，你的请求我收到了，但是我还没准备好，请继续你等我的消息\"。这个时候Client端就进入FIN_WAIT状态，继续等待Server端的FIN报文。当Server端确定数据已发送完成，则向Client端发送FIN报文，\"告诉Client端，好了，我这边数据发完了，准备好关闭连接了\"。Client端收到FIN报文后，\"就知道可以关闭连接了，但是他还是不相信网络，怕Server端不知道要关闭，所以发送ACK后进入TIME_WAIT状态，如果Server端没有收到ACK则可以重传。“，Server端收到ACK后，\"就知道可以断开连接了\"。Client端等待了2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，我Client端也可以关闭连接了。Ok，TCP连接就这样关闭了！\n```\n\n### 4. TCP 的有限状态机\n\n红色为客户端 蓝色为服务端 细箭头为异常变化\n\n![TCP](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-status-map.png)\n\n### 5. 参考\n\n`https://www.baidu.com/link?url=_mlor11BLttd1jmMU4k9OP0gqcjNKhZQ9fJuvbMOhkuH9-lVeB-y3VIVK1neZURi_tmR3rg1lj2lfgvvGhTV-q&wd=&eqid=d0144c250007b69c000000035bfdfafc`","slug":"computer_network/two-tcp-connection","published":1,"updated":"2019-02-06T01:19:03.240Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv42j00030ww45t0lr2mh","content":"<p>本文主要介绍了<code>TCP/IP</code>的三次握手和四次挥手具体步骤及其原因分析。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h3 id=\"1-三次握手\"><a href=\"#1-三次握手\" class=\"headerlink\" title=\"1. 三次握手\"></a>1. 三次握手</h3><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-connection-three.jpg\" alt=\"\"></p>\n<p><code>step1:第一次握手</code><br>建立连接时，客户端发送SYN包到服务器，其中包含客户端的初始序号seq=x，并进入<strong>SYN_SENT</strong>状态，等待服务器确认。（其中，SYN=1，ACK=0，表示这是一个TCP连接请求数据报文；序号seq=x，表明传输数据时的第一个数据字节的序号是x）。</p>\n<p><code>step2:第二次握手</code><br>服务器收到请求后，必须确认客户的数据包。同时自己也发送一个SYN包，即SYN+ACK包，此时服务器进入<strong>SYN_RCVD</strong>状态。（其中确认报文段中，标识位SYN=1，ACK=1，表示这是一个TCP连接响应数据报文，并含服务端的初始序号seq(服务器)=y，以及服务器对客户端初始序号的确认号ack(服务器)=seq(客户端)+1=x+1）。</p>\n<p><code>step3:第三次握手</code></p>\n<p>客户端收到服务器的SYN+ACK包，向服务器发送一个序列号(seq=x+1)，确认号为ack(客户端)=y+1，此包发送完毕，客户端和服务器进入<strong>ESTABLISHED </strong>(TCP连接成功)**状态，完成三次握手。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">建立连接前要确认客户端和服务端的接收和发送功能是否正常。</span><br><span class=\"line\">第一次客户端发送SYN时 什么也确认不了</span><br><span class=\"line\">第二次服务端发送SYN+ACK 可以确认服务端发送功能正常</span><br><span class=\"line\">第三次 客户端收到服务端发送的YSN+ACK 可以确认客户端发送接收功能正常</span><br><span class=\"line\">最后客户端发送ACK 服务端接收到后 可以确认服务端发送功能正常</span><br><span class=\"line\">到此就确认完毕了。</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-四次挥手\"><a href=\"#2-四次挥手\" class=\"headerlink\" title=\"2. 四次挥手\"></a>2. 四次挥手</h3><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-close-connection-four.jpg\" alt=\"\"></p>\n<p><code>step1：第一次挥手</code><br>首先，客户端发送一个FIN，用来关闭客户端到服务器的数据传送，然后等待服务器的确认。其中终止标志位FIN=1，序列号seq=u。 <strong>客户端</strong>进入<strong>FIN_WAIT1</strong>状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我（Client端）没有数据要发给你（Server端）了&quot;，但是如果你（Server端）还有数据没有发送完成，则不必急着关闭Socket，可以继续发送数据。所以你先发送ACK</span><br></pre></td></tr></table></figure>\n<p><code>step2：第二次挥手</code><br><strong>服务器</strong>收到这个FIN进入<strong>CLOSE_WAIT</strong>状态，然后它给客户端发送一个ACK，确认ack为收到的序号加一。</p>\n<p><strong>客户端</strong>收到ACK应答后进入<strong>FIN_WAIT2</strong>状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">告诉Client端，你的请求我收到了，但是我（Server端）还没准备好，请继续你等我的消息&quot;</span><br></pre></td></tr></table></figure>\n<p><code>step3：第三次挥手</code><br>服务端关闭服务器到客户端的连接，发送一个FIN给客户端。<strong>服务端</strong>进入<strong>LAST_ACK</strong>状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">告诉Client端，好了，我（Server端）这边数据发完了，准备好关闭连接了</span><br></pre></td></tr></table></figure>\n<p><code>step4：第四次挥手</code></p>\n<p><strong>客户端</strong>收到FIN后，进入<strong>TIME_WAIT</strong>状态    并发回一个ACK报文确认，并将确认序号seq设置为收到序号加一。</p>\n<p>服务端收到客户端回复的ACK后立即关闭，服务端进入<strong>CLOASED</strong>状态</p>\n<p>而客户端要等待2MSL后关闭 进入<strong>CLOASED</strong>状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Client端收到FIN报文后，&quot;就知道可以关闭连接了，所以发送ACK。但是他还是不相信网络，怕Server端不知道要关闭，所以发送ACK后没有立即，而是进入TIME_WAIT状态，如果Server端没有收到ACK那么自己还可以重传。Server端收到ACK后，&quot;就知道可以断开连接了&quot;。Client端等待了2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，我Client端也可以关闭连接了。Ok，TCP连接就这样关闭了！</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-TIME-WAIT状态详解\"><a href=\"#3-TIME-WAIT状态详解\" class=\"headerlink\" title=\"3. TIME-WAIT状态详解\"></a>3. TIME-WAIT状态详解</h3><p>为什么Client端要先进入TIME-WAIT状态，等待2MSL时间后才进入CLOSED状态？</p>\n<p><strong>保证TCP协议的全双工连接能够可靠关闭，保证这次连接的重复数据段从网络中消失</strong></p>\n<p>假设由于IP协议的不可靠性或者是其它网络原因，导致Server没有收到Client最后回复的ACK。那么Server就会在超时之后继续发送FIN，Client端在等待2MSL时间后都没收到信息，说明Server端已经收到自己发送的ACK并且成功关闭了。<br><strong>假设CLient端直接关闭了：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>.由于IP协议的不可靠性或者是其它网络原因，导致Server没有收到Client最后回复的ACK。那么Server就会在超时之后继续发送FIN，此时由于Client已经CLOSED了，就找不到与重发的FIN对应的连接，最后Server就会收到RST而不是ACK，Server就会以为是连接错误把问题报告给高层。这样的情况虽然不会造成数据丢失，但是却导致TCP协议不符合可靠连接的要求。所以，Client不是直接进入CLOSED，而是要保持TIME_WAIT，当再次收到FIN的时候，能够保证对方收到ACK，最后正确的关闭连接。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>.如果Client直接CLOSED，然后又再向Server发起一个新连接，我们不能保证这个新连接与刚关闭的连接的端口号是不同的。也就是说有可能新连接和老连接的端口号是相同的。一般来说不会发生什么问题，但是还是有特殊情况出现：假设新连接和已经关闭的老连接端口号是一样的，如果前一次连接的某些数据仍然滞留在网络中，这些延迟数据在建立新连接之后才到达Server，由于新连接和老连接的端口号是一样的，又因为TCP协议判断不同连接的依据是socket pair，于是，TCP协议就认为那个延迟的数据是属于新连接的，这样就和真正的新连接的数据包发生混淆了。所以TCP连接还要在TIME_WAIT状态等待<span class=\"number\">2</span>倍MSL，这样可以保证本次连接的所有数据都从网络中消失。</span><br></pre></td></tr></table></figure>\n<p><strong>2MSL:Maximum Segment Lifetime 即数据在网络中保存的最大时间。</strong></p>\n<p><em>简单易懂的说法:</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">假设Client端发起中断连接请求，也就是发送FIN报文。Server端接到FIN报文后，意思是说&quot;我Client端没有数据要发给你了&quot;，但是如果你还有数据没有发送完成，则不必急着关闭Socket，可以继续发送数据。所以你先发送ACK，&quot;告诉Client端，你的请求我收到了，但是我还没准备好，请继续你等我的消息&quot;。这个时候Client端就进入FIN_WAIT状态，继续等待Server端的FIN报文。当Server端确定数据已发送完成，则向Client端发送FIN报文，&quot;告诉Client端，好了，我这边数据发完了，准备好关闭连接了&quot;。Client端收到FIN报文后，&quot;就知道可以关闭连接了，但是他还是不相信网络，怕Server端不知道要关闭，所以发送ACK后进入TIME_WAIT状态，如果Server端没有收到ACK则可以重传。“，Server端收到ACK后，&quot;就知道可以断开连接了&quot;。Client端等待了2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，我Client端也可以关闭连接了。Ok，TCP连接就这样关闭了！</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-TCP-的有限状态机\"><a href=\"#4-TCP-的有限状态机\" class=\"headerlink\" title=\"4. TCP 的有限状态机\"></a>4. TCP 的有限状态机</h3><p>红色为客户端 蓝色为服务端 细箭头为异常变化</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-status-map.png\" alt=\"TCP\"></p>\n<h3 id=\"5-参考\"><a href=\"#5-参考\" class=\"headerlink\" title=\"5. 参考\"></a>5. 参考</h3><p><code>https://www.baidu.com/link?url=_mlor11BLttd1jmMU4k9OP0gqcjNKhZQ9fJuvbMOhkuH9-lVeB-y3VIVK1neZURi_tmR3rg1lj2lfgvvGhTV-q&amp;wd=&amp;eqid=d0144c250007b69c000000035bfdfafc</code></p>\n","site":{"data":{}},"excerpt":"<p>本文主要介绍了<code>TCP/IP</code>的三次握手和四次挥手具体步骤及其原因分析。</p>","more":"<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h3 id=\"1-三次握手\"><a href=\"#1-三次握手\" class=\"headerlink\" title=\"1. 三次握手\"></a>1. 三次握手</h3><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-connection-three.jpg\" alt=\"\"></p>\n<p><code>step1:第一次握手</code><br>建立连接时，客户端发送SYN包到服务器，其中包含客户端的初始序号seq=x，并进入<strong>SYN_SENT</strong>状态，等待服务器确认。（其中，SYN=1，ACK=0，表示这是一个TCP连接请求数据报文；序号seq=x，表明传输数据时的第一个数据字节的序号是x）。</p>\n<p><code>step2:第二次握手</code><br>服务器收到请求后，必须确认客户的数据包。同时自己也发送一个SYN包，即SYN+ACK包，此时服务器进入<strong>SYN_RCVD</strong>状态。（其中确认报文段中，标识位SYN=1，ACK=1，表示这是一个TCP连接响应数据报文，并含服务端的初始序号seq(服务器)=y，以及服务器对客户端初始序号的确认号ack(服务器)=seq(客户端)+1=x+1）。</p>\n<p><code>step3:第三次握手</code></p>\n<p>客户端收到服务器的SYN+ACK包，向服务器发送一个序列号(seq=x+1)，确认号为ack(客户端)=y+1，此包发送完毕，客户端和服务器进入<strong>ESTABLISHED </strong>(TCP连接成功)**状态，完成三次握手。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">建立连接前要确认客户端和服务端的接收和发送功能是否正常。</span><br><span class=\"line\">第一次客户端发送SYN时 什么也确认不了</span><br><span class=\"line\">第二次服务端发送SYN+ACK 可以确认服务端发送功能正常</span><br><span class=\"line\">第三次 客户端收到服务端发送的YSN+ACK 可以确认客户端发送接收功能正常</span><br><span class=\"line\">最后客户端发送ACK 服务端接收到后 可以确认服务端发送功能正常</span><br><span class=\"line\">到此就确认完毕了。</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-四次挥手\"><a href=\"#2-四次挥手\" class=\"headerlink\" title=\"2. 四次挥手\"></a>2. 四次挥手</h3><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-close-connection-four.jpg\" alt=\"\"></p>\n<p><code>step1：第一次挥手</code><br>首先，客户端发送一个FIN，用来关闭客户端到服务器的数据传送，然后等待服务器的确认。其中终止标志位FIN=1，序列号seq=u。 <strong>客户端</strong>进入<strong>FIN_WAIT1</strong>状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我（Client端）没有数据要发给你（Server端）了&quot;，但是如果你（Server端）还有数据没有发送完成，则不必急着关闭Socket，可以继续发送数据。所以你先发送ACK</span><br></pre></td></tr></table></figure>\n<p><code>step2：第二次挥手</code><br><strong>服务器</strong>收到这个FIN进入<strong>CLOSE_WAIT</strong>状态，然后它给客户端发送一个ACK，确认ack为收到的序号加一。</p>\n<p><strong>客户端</strong>收到ACK应答后进入<strong>FIN_WAIT2</strong>状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">告诉Client端，你的请求我收到了，但是我（Server端）还没准备好，请继续你等我的消息&quot;</span><br></pre></td></tr></table></figure>\n<p><code>step3：第三次挥手</code><br>服务端关闭服务器到客户端的连接，发送一个FIN给客户端。<strong>服务端</strong>进入<strong>LAST_ACK</strong>状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">告诉Client端，好了，我（Server端）这边数据发完了，准备好关闭连接了</span><br></pre></td></tr></table></figure>\n<p><code>step4：第四次挥手</code></p>\n<p><strong>客户端</strong>收到FIN后，进入<strong>TIME_WAIT</strong>状态    并发回一个ACK报文确认，并将确认序号seq设置为收到序号加一。</p>\n<p>服务端收到客户端回复的ACK后立即关闭，服务端进入<strong>CLOASED</strong>状态</p>\n<p>而客户端要等待2MSL后关闭 进入<strong>CLOASED</strong>状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Client端收到FIN报文后，&quot;就知道可以关闭连接了，所以发送ACK。但是他还是不相信网络，怕Server端不知道要关闭，所以发送ACK后没有立即，而是进入TIME_WAIT状态，如果Server端没有收到ACK那么自己还可以重传。Server端收到ACK后，&quot;就知道可以断开连接了&quot;。Client端等待了2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，我Client端也可以关闭连接了。Ok，TCP连接就这样关闭了！</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-TIME-WAIT状态详解\"><a href=\"#3-TIME-WAIT状态详解\" class=\"headerlink\" title=\"3. TIME-WAIT状态详解\"></a>3. TIME-WAIT状态详解</h3><p>为什么Client端要先进入TIME-WAIT状态，等待2MSL时间后才进入CLOSED状态？</p>\n<p><strong>保证TCP协议的全双工连接能够可靠关闭，保证这次连接的重复数据段从网络中消失</strong></p>\n<p>假设由于IP协议的不可靠性或者是其它网络原因，导致Server没有收到Client最后回复的ACK。那么Server就会在超时之后继续发送FIN，Client端在等待2MSL时间后都没收到信息，说明Server端已经收到自己发送的ACK并且成功关闭了。<br><strong>假设CLient端直接关闭了：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>.由于IP协议的不可靠性或者是其它网络原因，导致Server没有收到Client最后回复的ACK。那么Server就会在超时之后继续发送FIN，此时由于Client已经CLOSED了，就找不到与重发的FIN对应的连接，最后Server就会收到RST而不是ACK，Server就会以为是连接错误把问题报告给高层。这样的情况虽然不会造成数据丢失，但是却导致TCP协议不符合可靠连接的要求。所以，Client不是直接进入CLOSED，而是要保持TIME_WAIT，当再次收到FIN的时候，能够保证对方收到ACK，最后正确的关闭连接。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>.如果Client直接CLOSED，然后又再向Server发起一个新连接，我们不能保证这个新连接与刚关闭的连接的端口号是不同的。也就是说有可能新连接和老连接的端口号是相同的。一般来说不会发生什么问题，但是还是有特殊情况出现：假设新连接和已经关闭的老连接端口号是一样的，如果前一次连接的某些数据仍然滞留在网络中，这些延迟数据在建立新连接之后才到达Server，由于新连接和老连接的端口号是一样的，又因为TCP协议判断不同连接的依据是socket pair，于是，TCP协议就认为那个延迟的数据是属于新连接的，这样就和真正的新连接的数据包发生混淆了。所以TCP连接还要在TIME_WAIT状态等待<span class=\"number\">2</span>倍MSL，这样可以保证本次连接的所有数据都从网络中消失。</span><br></pre></td></tr></table></figure>\n<p><strong>2MSL:Maximum Segment Lifetime 即数据在网络中保存的最大时间。</strong></p>\n<p><em>简单易懂的说法:</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">假设Client端发起中断连接请求，也就是发送FIN报文。Server端接到FIN报文后，意思是说&quot;我Client端没有数据要发给你了&quot;，但是如果你还有数据没有发送完成，则不必急着关闭Socket，可以继续发送数据。所以你先发送ACK，&quot;告诉Client端，你的请求我收到了，但是我还没准备好，请继续你等我的消息&quot;。这个时候Client端就进入FIN_WAIT状态，继续等待Server端的FIN报文。当Server端确定数据已发送完成，则向Client端发送FIN报文，&quot;告诉Client端，好了，我这边数据发完了，准备好关闭连接了&quot;。Client端收到FIN报文后，&quot;就知道可以关闭连接了，但是他还是不相信网络，怕Server端不知道要关闭，所以发送ACK后进入TIME_WAIT状态，如果Server端没有收到ACK则可以重传。“，Server端收到ACK后，&quot;就知道可以断开连接了&quot;。Client端等待了2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，我Client端也可以关闭连接了。Ok，TCP连接就这样关闭了！</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-TCP-的有限状态机\"><a href=\"#4-TCP-的有限状态机\" class=\"headerlink\" title=\"4. TCP 的有限状态机\"></a>4. TCP 的有限状态机</h3><p>红色为客户端 蓝色为服务端 细箭头为异常变化</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-status-map.png\" alt=\"TCP\"></p>\n<h3 id=\"5-参考\"><a href=\"#5-参考\" class=\"headerlink\" title=\"5. 参考\"></a>5. 参考</h3><p><code>https://www.baidu.com/link?url=_mlor11BLttd1jmMU4k9OP0gqcjNKhZQ9fJuvbMOhkuH9-lVeB-y3VIVK1neZURi_tmR3rg1lj2lfgvvGhTV-q&amp;wd=&amp;eqid=d0144c250007b69c000000035bfdfafc</code></p>"},{"title":"计算机网络(一)--OSI七层模型","abbrlink":25470,"date":"2018-11-03T14:00:00.000Z","_content":"\n本文主要通过OSI七层模型与常用TCP/IP5层模型介绍了各层的主要作用，包括`应用层`，`运输层`，`网络层`，`数据链路层`，`物理层`等。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n\n\n## OSI与TCP/IP模型\n\n![Model](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/osi-tcp-ip-model.png)\n\n**`应用层:`通过应用进程间的交互来完成特定网络应用。**\n\n**`运输层：`向用户提供可靠的、端到端的差错和流量控制，保证报文的正确传输。**\n\n**`网络层：`通过路由算法，为报文或分组通过通信子网选择最适当的路径。**\n\n**`数据链路层：`其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。** \n\n**`物理层：`利用传输介质为数据链路层提供屋里连接，实现比特流的透明传输。**\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-ip-model.gif)\n\n### 1. 应用层\n\n**主要作用:通过应用进程间的交互来完成特定网络应用。**\n\n**应用层协议定义的是应用进程（进程：主机中正在运行的程序）间的通信和交互的规则。对于不同的网络应用需要不同的应用层协议。在互联网中应用层协议很多，如域名系统DNS**，支持万维网应用的 **HTTP协议**，支持电子邮件的 **SMTP协议**等等。我们把应用层交互的数据单元称为报文。\n\n### 2. 运输层\n\n　**主要任务：向用户提供可靠的、端到端的差错和流量控制，保证报文的正确传输。**\n\n　**主要作用**：向高层屏蔽下层数据通信的具体细节，即向用户透明的传送报文。\n\n主要用到的协议：\n\n1. **传输控制协议 TCP**（Transmisson Control Protocol）--提供**面向连接**的，**可靠的**数据传输服务。\n2. **用户数据协议 UDP**（User Datagram Protocol）--提供**无连接**的，尽最大努力的数据传输服务（**不保证数据传输的可靠性**）。\n\n#### 2.1 UDP\n\n1. UDP 是无连接的；\n2. UDP 使用尽最大努力交付，即不保证可靠交付，因此主机不需要维持复杂的链接状态（这里面有许多参数）；\n3. UDP 是面向报文的；\n4. UDP 没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如 直播，实时视频会议等）；\n5. UDP 支持一对一、一对多、多对一和多对多的交互通信；\n6. UDP 的首部开销小，只有8个字节，比TCP的20个字节的首部要短。\n\n#### 2.2 TCP \n\n1. TCP 是面向连接的。（就好像打电话一样，通话前需要先拨号建立连接，通话结束后要挂机释放连接）；\n2. 每一条 TCP 连接只能有两个端点，每一条TCP连接只能是点对点的（一对一）；\n3. TCP 提供可靠交付的服务。通过TCP连接传送的数据，无差错、不丢失、不重复、并且按序到达；\n4. TCP 提供全双工通信。TCP 允许通信双方的应用进程在任何时候都能发送数据。TCP 连接的两端都设有发送缓存和接收缓存，用来临时存放双方通信的数据；\n5. 面向字节流。TCP 中的“流”（Stream）指的是流入进程或从进程流出的字节序列。“面向字节流”的含义是：虽然应用程序和 TCP 的交互是一次一个数据块（大小不等），但 TCP 把应用程序交下来的数据仅仅看成是一连串的无结构的字节流。\n\n### 3. 网络层\n\n**主要任务：通过路由算法，为报文或分组通过通信子网选择最适当的路径。**该层控制数据链路层与物理层之间的信息转发，建立、维持与终止网络的连接。具体的说，数据链路层的数据在这一层被转换为数据包，然后通过路径选择、分段组合、顺序、进/出路由等控制，将信息从一个网络设备传送到另一个网络设备。\n\n**一般的，数据链路层是解决统一网络内节点之间的通信，而网络层主要解决不同子网之间的通信。例如路由选择问题。**\n\n在实现网络层功能时，需要解决的主要问题如下：\n\n**寻址**：数据链路层中使用的物理地址（如MAC地址）仅解决网络内部的寻址问题。在不同子网之间通信时，为了识别和找到网络中的设备，每一子网中的设备都会被分配一 个唯一的地址。由于各个子网使用的物理技术可能不同，因此这个地址应当是逻辑地址（如IP地址）\n\n**交换：**规定不同的交换方式。常见的交换技术有：线路交换技术和存储转发技术，后者包括报文转发技术和分组转发技术。\n**路由算法：**当源节点和路由节点之间存在多条路径时，本层可以根据路由算法，通过网络为数据分组选择最佳路径，并将信息从最合适的路径，由发送端传送的接受端。\n**连接服务：**与数据链路层的流量控制不同的是，前者控制的是网络相邻节点间的流量，后者控制的是从源节点到目的节点间的流量。其目的在于防止阻塞，并进行差错检测\n\n### 4. 数据链路层\n\n**其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。** \n\n**主要功能**：通过各种控制协议，将有差错的物理信道变为无差错的、能可靠传输数据帧的数据链路。\n\n**具体工作**：接受来自物理层的位流形式的数据，并封装成帧，传送到上一层；同样，也将来自上一层的数据帧，拆装为位流形式的数据转发到物理层；并且还负责处理接受端发回的确认帧的信息，以便提供可靠的数据传输。\n\n该层通常又被分为 介质访问控制(MAC)和逻辑链路控制(LLC)两个子层：\n **MAC子层**的主要任务是**解决共享型网络中多用户对信道竞争的问题，完成网络介质的访问控制。**\n**LLC子层**的主要任务是**建立和维护网络连接，执行差错校验、流量控制和链路控制。**\n\n### 5. 物理层\n\n**主要功能：利用传输介质为数据链路层提供屋里连接，实现比特流的透明传输。**\n\n**作用**：实现相邻计算机节点之间比特流的透明传输，尽可能屏蔽掉具体传输介质与物理设备的差异。使其上面的数据链路层不必考虑网络的具体传输介质是什么。\n\n**透明传输的意义就是：不管传的是什么，所采用的设备只是起一个通道作用，把要传输的内容完好的传到对方！**\n\n在互联网使用的各种协中最重要和最著名的就是 TCP/IP 两个协议。现在人们经常提到的TCP/IP并不一定单指TCP和IP这两个具体的协议，而往往表示互联网所使用的整个TCP/IP协议族。\n\n### 6. 参考\n\n`https://blog.csdn.net/yaopeng_2005/article/details/7064869`","source":"_posts/computer_network/one-network-model.md","raw":"---\ntitle: 计算机网络(一)--OSI七层模型\ntags:\n  - 计算机网络\n  - TCP/IP\ncategories:\n  - 计算机网络\nabbrlink: 25470\ndate: 2018-11-03 22:00:00\n---\n\n本文主要通过OSI七层模型与常用TCP/IP5层模型介绍了各层的主要作用，包括`应用层`，`运输层`，`网络层`，`数据链路层`，`物理层`等。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n\n\n## OSI与TCP/IP模型\n\n![Model](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/osi-tcp-ip-model.png)\n\n**`应用层:`通过应用进程间的交互来完成特定网络应用。**\n\n**`运输层：`向用户提供可靠的、端到端的差错和流量控制，保证报文的正确传输。**\n\n**`网络层：`通过路由算法，为报文或分组通过通信子网选择最适当的路径。**\n\n**`数据链路层：`其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。** \n\n**`物理层：`利用传输介质为数据链路层提供屋里连接，实现比特流的透明传输。**\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-ip-model.gif)\n\n### 1. 应用层\n\n**主要作用:通过应用进程间的交互来完成特定网络应用。**\n\n**应用层协议定义的是应用进程（进程：主机中正在运行的程序）间的通信和交互的规则。对于不同的网络应用需要不同的应用层协议。在互联网中应用层协议很多，如域名系统DNS**，支持万维网应用的 **HTTP协议**，支持电子邮件的 **SMTP协议**等等。我们把应用层交互的数据单元称为报文。\n\n### 2. 运输层\n\n　**主要任务：向用户提供可靠的、端到端的差错和流量控制，保证报文的正确传输。**\n\n　**主要作用**：向高层屏蔽下层数据通信的具体细节，即向用户透明的传送报文。\n\n主要用到的协议：\n\n1. **传输控制协议 TCP**（Transmisson Control Protocol）--提供**面向连接**的，**可靠的**数据传输服务。\n2. **用户数据协议 UDP**（User Datagram Protocol）--提供**无连接**的，尽最大努力的数据传输服务（**不保证数据传输的可靠性**）。\n\n#### 2.1 UDP\n\n1. UDP 是无连接的；\n2. UDP 使用尽最大努力交付，即不保证可靠交付，因此主机不需要维持复杂的链接状态（这里面有许多参数）；\n3. UDP 是面向报文的；\n4. UDP 没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如 直播，实时视频会议等）；\n5. UDP 支持一对一、一对多、多对一和多对多的交互通信；\n6. UDP 的首部开销小，只有8个字节，比TCP的20个字节的首部要短。\n\n#### 2.2 TCP \n\n1. TCP 是面向连接的。（就好像打电话一样，通话前需要先拨号建立连接，通话结束后要挂机释放连接）；\n2. 每一条 TCP 连接只能有两个端点，每一条TCP连接只能是点对点的（一对一）；\n3. TCP 提供可靠交付的服务。通过TCP连接传送的数据，无差错、不丢失、不重复、并且按序到达；\n4. TCP 提供全双工通信。TCP 允许通信双方的应用进程在任何时候都能发送数据。TCP 连接的两端都设有发送缓存和接收缓存，用来临时存放双方通信的数据；\n5. 面向字节流。TCP 中的“流”（Stream）指的是流入进程或从进程流出的字节序列。“面向字节流”的含义是：虽然应用程序和 TCP 的交互是一次一个数据块（大小不等），但 TCP 把应用程序交下来的数据仅仅看成是一连串的无结构的字节流。\n\n### 3. 网络层\n\n**主要任务：通过路由算法，为报文或分组通过通信子网选择最适当的路径。**该层控制数据链路层与物理层之间的信息转发，建立、维持与终止网络的连接。具体的说，数据链路层的数据在这一层被转换为数据包，然后通过路径选择、分段组合、顺序、进/出路由等控制，将信息从一个网络设备传送到另一个网络设备。\n\n**一般的，数据链路层是解决统一网络内节点之间的通信，而网络层主要解决不同子网之间的通信。例如路由选择问题。**\n\n在实现网络层功能时，需要解决的主要问题如下：\n\n**寻址**：数据链路层中使用的物理地址（如MAC地址）仅解决网络内部的寻址问题。在不同子网之间通信时，为了识别和找到网络中的设备，每一子网中的设备都会被分配一 个唯一的地址。由于各个子网使用的物理技术可能不同，因此这个地址应当是逻辑地址（如IP地址）\n\n**交换：**规定不同的交换方式。常见的交换技术有：线路交换技术和存储转发技术，后者包括报文转发技术和分组转发技术。\n**路由算法：**当源节点和路由节点之间存在多条路径时，本层可以根据路由算法，通过网络为数据分组选择最佳路径，并将信息从最合适的路径，由发送端传送的接受端。\n**连接服务：**与数据链路层的流量控制不同的是，前者控制的是网络相邻节点间的流量，后者控制的是从源节点到目的节点间的流量。其目的在于防止阻塞，并进行差错检测\n\n### 4. 数据链路层\n\n**其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。** \n\n**主要功能**：通过各种控制协议，将有差错的物理信道变为无差错的、能可靠传输数据帧的数据链路。\n\n**具体工作**：接受来自物理层的位流形式的数据，并封装成帧，传送到上一层；同样，也将来自上一层的数据帧，拆装为位流形式的数据转发到物理层；并且还负责处理接受端发回的确认帧的信息，以便提供可靠的数据传输。\n\n该层通常又被分为 介质访问控制(MAC)和逻辑链路控制(LLC)两个子层：\n **MAC子层**的主要任务是**解决共享型网络中多用户对信道竞争的问题，完成网络介质的访问控制。**\n**LLC子层**的主要任务是**建立和维护网络连接，执行差错校验、流量控制和链路控制。**\n\n### 5. 物理层\n\n**主要功能：利用传输介质为数据链路层提供屋里连接，实现比特流的透明传输。**\n\n**作用**：实现相邻计算机节点之间比特流的透明传输，尽可能屏蔽掉具体传输介质与物理设备的差异。使其上面的数据链路层不必考虑网络的具体传输介质是什么。\n\n**透明传输的意义就是：不管传的是什么，所采用的设备只是起一个通道作用，把要传输的内容完好的传到对方！**\n\n在互联网使用的各种协中最重要和最著名的就是 TCP/IP 两个协议。现在人们经常提到的TCP/IP并不一定单指TCP和IP这两个具体的协议，而往往表示互联网所使用的整个TCP/IP协议族。\n\n### 6. 参考\n\n`https://blog.csdn.net/yaopeng_2005/article/details/7064869`","slug":"computer_network/one-network-model","published":1,"updated":"2019-02-06T01:18:35.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv42u00040ww4mijzclj4","content":"<p>本文主要通过OSI七层模型与常用TCP/IP5层模型介绍了各层的主要作用，包括<code>应用层</code>，<code>运输层</code>，<code>网络层</code>，<code>数据链路层</code>，<code>物理层</code>等。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"OSI与TCP-IP模型\"><a href=\"#OSI与TCP-IP模型\" class=\"headerlink\" title=\"OSI与TCP/IP模型\"></a>OSI与TCP/IP模型</h2><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/osi-tcp-ip-model.png\" alt=\"Model\"></p>\n<p><strong><code>应用层:</code>通过应用进程间的交互来完成特定网络应用。</strong></p>\n<p><strong><code>运输层：</code>向用户提供可靠的、端到端的差错和流量控制，保证报文的正确传输。</strong></p>\n<p><strong><code>网络层：</code>通过路由算法，为报文或分组通过通信子网选择最适当的路径。</strong></p>\n<p><strong><code>数据链路层：</code>其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。</strong> </p>\n<p><strong><code>物理层：</code>利用传输介质为数据链路层提供屋里连接，实现比特流的透明传输。</strong></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-ip-model.gif\" alt=\"\"></p>\n<h3 id=\"1-应用层\"><a href=\"#1-应用层\" class=\"headerlink\" title=\"1. 应用层\"></a>1. 应用层</h3><p><strong>主要作用:通过应用进程间的交互来完成特定网络应用。</strong></p>\n<p><strong>应用层协议定义的是应用进程（进程：主机中正在运行的程序）间的通信和交互的规则。对于不同的网络应用需要不同的应用层协议。在互联网中应用层协议很多，如域名系统DNS</strong>，支持万维网应用的 <strong>HTTP协议</strong>，支持电子邮件的 <strong>SMTP协议</strong>等等。我们把应用层交互的数据单元称为报文。</p>\n<h3 id=\"2-运输层\"><a href=\"#2-运输层\" class=\"headerlink\" title=\"2. 运输层\"></a>2. 运输层</h3><p>　<strong>主要任务：向用户提供可靠的、端到端的差错和流量控制，保证报文的正确传输。</strong></p>\n<p>　<strong>主要作用</strong>：向高层屏蔽下层数据通信的具体细节，即向用户透明的传送报文。</p>\n<p>主要用到的协议：</p>\n<ol>\n<li><strong>传输控制协议 TCP</strong>（Transmisson Control Protocol）–提供<strong>面向连接</strong>的，<strong>可靠的</strong>数据传输服务。</li>\n<li><strong>用户数据协议 UDP</strong>（User Datagram Protocol）–提供<strong>无连接</strong>的，尽最大努力的数据传输服务（<strong>不保证数据传输的可靠性</strong>）。</li>\n</ol>\n<h4 id=\"2-1-UDP\"><a href=\"#2-1-UDP\" class=\"headerlink\" title=\"2.1 UDP\"></a>2.1 UDP</h4><ol>\n<li>UDP 是无连接的；</li>\n<li>UDP 使用尽最大努力交付，即不保证可靠交付，因此主机不需要维持复杂的链接状态（这里面有许多参数）；</li>\n<li>UDP 是面向报文的；</li>\n<li>UDP 没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如 直播，实时视频会议等）；</li>\n<li>UDP 支持一对一、一对多、多对一和多对多的交互通信；</li>\n<li>UDP 的首部开销小，只有8个字节，比TCP的20个字节的首部要短。</li>\n</ol>\n<h4 id=\"2-2-TCP\"><a href=\"#2-2-TCP\" class=\"headerlink\" title=\"2.2 TCP\"></a>2.2 TCP</h4><ol>\n<li>TCP 是面向连接的。（就好像打电话一样，通话前需要先拨号建立连接，通话结束后要挂机释放连接）；</li>\n<li>每一条 TCP 连接只能有两个端点，每一条TCP连接只能是点对点的（一对一）；</li>\n<li>TCP 提供可靠交付的服务。通过TCP连接传送的数据，无差错、不丢失、不重复、并且按序到达；</li>\n<li>TCP 提供全双工通信。TCP 允许通信双方的应用进程在任何时候都能发送数据。TCP 连接的两端都设有发送缓存和接收缓存，用来临时存放双方通信的数据；</li>\n<li>面向字节流。TCP 中的“流”（Stream）指的是流入进程或从进程流出的字节序列。“面向字节流”的含义是：虽然应用程序和 TCP 的交互是一次一个数据块（大小不等），但 TCP 把应用程序交下来的数据仅仅看成是一连串的无结构的字节流。</li>\n</ol>\n<h3 id=\"3-网络层\"><a href=\"#3-网络层\" class=\"headerlink\" title=\"3. 网络层\"></a>3. 网络层</h3><p><strong>主要任务：通过路由算法，为报文或分组通过通信子网选择最适当的路径。</strong>该层控制数据链路层与物理层之间的信息转发，建立、维持与终止网络的连接。具体的说，数据链路层的数据在这一层被转换为数据包，然后通过路径选择、分段组合、顺序、进/出路由等控制，将信息从一个网络设备传送到另一个网络设备。</p>\n<p><strong>一般的，数据链路层是解决统一网络内节点之间的通信，而网络层主要解决不同子网之间的通信。例如路由选择问题。</strong></p>\n<p>在实现网络层功能时，需要解决的主要问题如下：</p>\n<p><strong>寻址</strong>：数据链路层中使用的物理地址（如MAC地址）仅解决网络内部的寻址问题。在不同子网之间通信时，为了识别和找到网络中的设备，每一子网中的设备都会被分配一 个唯一的地址。由于各个子网使用的物理技术可能不同，因此这个地址应当是逻辑地址（如IP地址）</p>\n<p><strong>交换：</strong>规定不同的交换方式。常见的交换技术有：线路交换技术和存储转发技术，后者包括报文转发技术和分组转发技术。<br><strong>路由算法：</strong>当源节点和路由节点之间存在多条路径时，本层可以根据路由算法，通过网络为数据分组选择最佳路径，并将信息从最合适的路径，由发送端传送的接受端。<br><strong>连接服务：</strong>与数据链路层的流量控制不同的是，前者控制的是网络相邻节点间的流量，后者控制的是从源节点到目的节点间的流量。其目的在于防止阻塞，并进行差错检测</p>\n<h3 id=\"4-数据链路层\"><a href=\"#4-数据链路层\" class=\"headerlink\" title=\"4. 数据链路层\"></a>4. 数据链路层</h3><p><strong>其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。</strong> </p>\n<p><strong>主要功能</strong>：通过各种控制协议，将有差错的物理信道变为无差错的、能可靠传输数据帧的数据链路。</p>\n<p><strong>具体工作</strong>：接受来自物理层的位流形式的数据，并封装成帧，传送到上一层；同样，也将来自上一层的数据帧，拆装为位流形式的数据转发到物理层；并且还负责处理接受端发回的确认帧的信息，以便提供可靠的数据传输。</p>\n<p>该层通常又被分为 介质访问控制(MAC)和逻辑链路控制(LLC)两个子层：<br> <strong>MAC子层</strong>的主要任务是<strong>解决共享型网络中多用户对信道竞争的问题，完成网络介质的访问控制。</strong><br><strong>LLC子层</strong>的主要任务是<strong>建立和维护网络连接，执行差错校验、流量控制和链路控制。</strong></p>\n<h3 id=\"5-物理层\"><a href=\"#5-物理层\" class=\"headerlink\" title=\"5. 物理层\"></a>5. 物理层</h3><p><strong>主要功能：利用传输介质为数据链路层提供屋里连接，实现比特流的透明传输。</strong></p>\n<p><strong>作用</strong>：实现相邻计算机节点之间比特流的透明传输，尽可能屏蔽掉具体传输介质与物理设备的差异。使其上面的数据链路层不必考虑网络的具体传输介质是什么。</p>\n<p><strong>透明传输的意义就是：不管传的是什么，所采用的设备只是起一个通道作用，把要传输的内容完好的传到对方！</strong></p>\n<p>在互联网使用的各种协中最重要和最著名的就是 TCP/IP 两个协议。现在人们经常提到的TCP/IP并不一定单指TCP和IP这两个具体的协议，而往往表示互联网所使用的整个TCP/IP协议族。</p>\n<h3 id=\"6-参考\"><a href=\"#6-参考\" class=\"headerlink\" title=\"6. 参考\"></a>6. 参考</h3><p><code>https://blog.csdn.net/yaopeng_2005/article/details/7064869</code></p>\n","site":{"data":{}},"excerpt":"<p>本文主要通过OSI七层模型与常用TCP/IP5层模型介绍了各层的主要作用，包括<code>应用层</code>，<code>运输层</code>，<code>网络层</code>，<code>数据链路层</code>，<code>物理层</code>等。</p>","more":"<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"OSI与TCP-IP模型\"><a href=\"#OSI与TCP-IP模型\" class=\"headerlink\" title=\"OSI与TCP/IP模型\"></a>OSI与TCP/IP模型</h2><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/osi-tcp-ip-model.png\" alt=\"Model\"></p>\n<p><strong><code>应用层:</code>通过应用进程间的交互来完成特定网络应用。</strong></p>\n<p><strong><code>运输层：</code>向用户提供可靠的、端到端的差错和流量控制，保证报文的正确传输。</strong></p>\n<p><strong><code>网络层：</code>通过路由算法，为报文或分组通过通信子网选择最适当的路径。</strong></p>\n<p><strong><code>数据链路层：</code>其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。</strong> </p>\n<p><strong><code>物理层：</code>利用传输介质为数据链路层提供屋里连接，实现比特流的透明传输。</strong></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-ip-model.gif\" alt=\"\"></p>\n<h3 id=\"1-应用层\"><a href=\"#1-应用层\" class=\"headerlink\" title=\"1. 应用层\"></a>1. 应用层</h3><p><strong>主要作用:通过应用进程间的交互来完成特定网络应用。</strong></p>\n<p><strong>应用层协议定义的是应用进程（进程：主机中正在运行的程序）间的通信和交互的规则。对于不同的网络应用需要不同的应用层协议。在互联网中应用层协议很多，如域名系统DNS</strong>，支持万维网应用的 <strong>HTTP协议</strong>，支持电子邮件的 <strong>SMTP协议</strong>等等。我们把应用层交互的数据单元称为报文。</p>\n<h3 id=\"2-运输层\"><a href=\"#2-运输层\" class=\"headerlink\" title=\"2. 运输层\"></a>2. 运输层</h3><p>　<strong>主要任务：向用户提供可靠的、端到端的差错和流量控制，保证报文的正确传输。</strong></p>\n<p>　<strong>主要作用</strong>：向高层屏蔽下层数据通信的具体细节，即向用户透明的传送报文。</p>\n<p>主要用到的协议：</p>\n<ol>\n<li><strong>传输控制协议 TCP</strong>（Transmisson Control Protocol）–提供<strong>面向连接</strong>的，<strong>可靠的</strong>数据传输服务。</li>\n<li><strong>用户数据协议 UDP</strong>（User Datagram Protocol）–提供<strong>无连接</strong>的，尽最大努力的数据传输服务（<strong>不保证数据传输的可靠性</strong>）。</li>\n</ol>\n<h4 id=\"2-1-UDP\"><a href=\"#2-1-UDP\" class=\"headerlink\" title=\"2.1 UDP\"></a>2.1 UDP</h4><ol>\n<li>UDP 是无连接的；</li>\n<li>UDP 使用尽最大努力交付，即不保证可靠交付，因此主机不需要维持复杂的链接状态（这里面有许多参数）；</li>\n<li>UDP 是面向报文的；</li>\n<li>UDP 没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如 直播，实时视频会议等）；</li>\n<li>UDP 支持一对一、一对多、多对一和多对多的交互通信；</li>\n<li>UDP 的首部开销小，只有8个字节，比TCP的20个字节的首部要短。</li>\n</ol>\n<h4 id=\"2-2-TCP\"><a href=\"#2-2-TCP\" class=\"headerlink\" title=\"2.2 TCP\"></a>2.2 TCP</h4><ol>\n<li>TCP 是面向连接的。（就好像打电话一样，通话前需要先拨号建立连接，通话结束后要挂机释放连接）；</li>\n<li>每一条 TCP 连接只能有两个端点，每一条TCP连接只能是点对点的（一对一）；</li>\n<li>TCP 提供可靠交付的服务。通过TCP连接传送的数据，无差错、不丢失、不重复、并且按序到达；</li>\n<li>TCP 提供全双工通信。TCP 允许通信双方的应用进程在任何时候都能发送数据。TCP 连接的两端都设有发送缓存和接收缓存，用来临时存放双方通信的数据；</li>\n<li>面向字节流。TCP 中的“流”（Stream）指的是流入进程或从进程流出的字节序列。“面向字节流”的含义是：虽然应用程序和 TCP 的交互是一次一个数据块（大小不等），但 TCP 把应用程序交下来的数据仅仅看成是一连串的无结构的字节流。</li>\n</ol>\n<h3 id=\"3-网络层\"><a href=\"#3-网络层\" class=\"headerlink\" title=\"3. 网络层\"></a>3. 网络层</h3><p><strong>主要任务：通过路由算法，为报文或分组通过通信子网选择最适当的路径。</strong>该层控制数据链路层与物理层之间的信息转发，建立、维持与终止网络的连接。具体的说，数据链路层的数据在这一层被转换为数据包，然后通过路径选择、分段组合、顺序、进/出路由等控制，将信息从一个网络设备传送到另一个网络设备。</p>\n<p><strong>一般的，数据链路层是解决统一网络内节点之间的通信，而网络层主要解决不同子网之间的通信。例如路由选择问题。</strong></p>\n<p>在实现网络层功能时，需要解决的主要问题如下：</p>\n<p><strong>寻址</strong>：数据链路层中使用的物理地址（如MAC地址）仅解决网络内部的寻址问题。在不同子网之间通信时，为了识别和找到网络中的设备，每一子网中的设备都会被分配一 个唯一的地址。由于各个子网使用的物理技术可能不同，因此这个地址应当是逻辑地址（如IP地址）</p>\n<p><strong>交换：</strong>规定不同的交换方式。常见的交换技术有：线路交换技术和存储转发技术，后者包括报文转发技术和分组转发技术。<br><strong>路由算法：</strong>当源节点和路由节点之间存在多条路径时，本层可以根据路由算法，通过网络为数据分组选择最佳路径，并将信息从最合适的路径，由发送端传送的接受端。<br><strong>连接服务：</strong>与数据链路层的流量控制不同的是，前者控制的是网络相邻节点间的流量，后者控制的是从源节点到目的节点间的流量。其目的在于防止阻塞，并进行差错检测</p>\n<h3 id=\"4-数据链路层\"><a href=\"#4-数据链路层\" class=\"headerlink\" title=\"4. 数据链路层\"></a>4. 数据链路层</h3><p><strong>其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。</strong> </p>\n<p><strong>主要功能</strong>：通过各种控制协议，将有差错的物理信道变为无差错的、能可靠传输数据帧的数据链路。</p>\n<p><strong>具体工作</strong>：接受来自物理层的位流形式的数据，并封装成帧，传送到上一层；同样，也将来自上一层的数据帧，拆装为位流形式的数据转发到物理层；并且还负责处理接受端发回的确认帧的信息，以便提供可靠的数据传输。</p>\n<p>该层通常又被分为 介质访问控制(MAC)和逻辑链路控制(LLC)两个子层：<br> <strong>MAC子层</strong>的主要任务是<strong>解决共享型网络中多用户对信道竞争的问题，完成网络介质的访问控制。</strong><br><strong>LLC子层</strong>的主要任务是<strong>建立和维护网络连接，执行差错校验、流量控制和链路控制。</strong></p>\n<h3 id=\"5-物理层\"><a href=\"#5-物理层\" class=\"headerlink\" title=\"5. 物理层\"></a>5. 物理层</h3><p><strong>主要功能：利用传输介质为数据链路层提供屋里连接，实现比特流的透明传输。</strong></p>\n<p><strong>作用</strong>：实现相邻计算机节点之间比特流的透明传输，尽可能屏蔽掉具体传输介质与物理设备的差异。使其上面的数据链路层不必考虑网络的具体传输介质是什么。</p>\n<p><strong>透明传输的意义就是：不管传的是什么，所采用的设备只是起一个通道作用，把要传输的内容完好的传到对方！</strong></p>\n<p>在互联网使用的各种协中最重要和最著名的就是 TCP/IP 两个协议。现在人们经常提到的TCP/IP并不一定单指TCP和IP这两个具体的协议，而往往表示互联网所使用的整个TCP/IP协议族。</p>\n<h3 id=\"6-参考\"><a href=\"#6-参考\" class=\"headerlink\" title=\"6. 参考\"></a>6. 参考</h3><p><code>https://blog.csdn.net/yaopeng_2005/article/details/7064869</code></p>"},{"title":"Java设计模式(八)---外观模式","abbrlink":"22a51705","date":"2018-10-20T14:00:00.000Z","_content":"\n本文主要介绍了Java23种设计模式中的外观模式，并结合实例描述了 模式的具体实现和性能分析测试。\n\n<!--more-->\n\n> **Java设计模式系列文章目录**\n>\n> [Java设计模式(一)---单例模式](https://www.lixueduan.com/posts/53093.html)\n>\n> [Java设计模式(二)---工厂模式](https://www.lixueduan.com/posts/34710.html)\n>\n> [Java设计模式(三)---建造者模式](https://www.lixueduan.com/posts/52453.html)\n>\n> [Java设计模式(四)---原型模式](https://www.lixueduan.com/posts/24b6c0e4.html)\n>\n> [Java设计模式(五)---适配器模式](https://www.lixueduan.com/posts/f444ac9.html)\n>\n> [Java设计模式(六)---装饰者模式](https://www.lixueduan.com/posts/75903408.html)\n>\n> [Java设计模式(七)---代理模式](https://www.lixueduan.com/posts/ae2a93bd.html)\n>\n> [Java设计模式(八)---外观模式](https://www.lixueduan.com/posts/22a51705.html)\n>\n> [Java设计模式(九)---享元模式](https://www.lixueduan.com/posts/34e634e7.html)\n>\n> [Java设计模式(十)---策略模式](https://www.lixueduan.com/posts/a7982bdc.html)\n>\n> [Java设计模式(十一)---模板方法模式](https://www.lixueduan.com/posts/57ae709c.html)\n>\n> [Java设计模式(十二)---观察者模式](https://www.lixueduan.com/posts/48bcf013.html)\n>\n> [Java设计模式(十三)---组合模式](https://www.lixueduan.com/posts/a340063f.html)\n>\n> ........\n>\n> Demo下载--> [Github](https://github.com/illusorycloud/design-pattern)\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 简介\n\n> 它通过引入一个外观角色来简化客户端与子系统之间的交互，为复杂的子系统调用提供一个统一的入口，降低子系统与客户端的耦合度，且客户端调用非常方便。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/eight-facade.jpg)\n\n**外观模式结构**：\n\n**SubSystem**: 子系统角色。表示一个系统的子系统或模块。\n\n**Facade**: 外观角色，客户端通过操作外观角色从而达到控制子系统角色的目的。对于客户端来说，外观角色好比一道屏障，对客户端屏蔽了子系统的具体实现。\n\n## 2. 具体实现\n\n```java\n/**\n * 子系统角色类\n * 电脑CPU\n *\n * @author illusoryCloud\n */\npublic class CPU {\n    public void startUp(){\n        System.out.println(\"cpu is  startUp...\");\n    }\n    public void shutDown(){\n        System.out.println(\"cpu is  shutDown...\");\n\n    }\n}\n\n/**\n * 子系统角色类\n * 电脑硬盘\n *\n * @author illusoryCloud\n */\npublic class Disk {\n    public void startUp() {\n        System.out.println(\"disk is  startUp...\");\n    }\n\n    public void shutDown() {\n        System.out.println(\"disk is  shutDown...\");\n\n    }\n}\n\n/**\n * 子系统角色类\n * 电脑内存\n *\n * @author illusoryCloud\n */\npublic class Memory {\n    public void startUp() {\n        System.out.println(\"memory is  startUp...\");\n    }\n\n    public void shutDown() {\n        System.out.println(\"memory is  shutDown...\");\n\n    }\n}\n\n/**\n * 外观角色\n * 电脑\n * 用户通过操作当前类即可达到操作所有子系统的目的\n *\n * @author illusoryCloud\n */\npublic class Computer {\n    private CPU cpu;\n    private Disk disk;\n    private Memory memory;\n\n    public Computer() {\n        cpu = new CPU();\n        disk = new Disk();\n        memory = new Memory();\n    }\n\n    public void startUp() {\n        cpu.startUp();\n        disk.startUp();\n        memory.startUp();\n    }\n\n    public void shutDown() {\n        cpu.shutDown();\n        disk.shutDown();\n        memory.shutDown();\n    }\n}\n\n/**\n * 外观模式 测试类\n *\n * @author illusoryCloud\n */\npublic class FacedeTest {\n    @Test\n    public void facedeTest() {\n        Computer computer = new Computer();\n        computer.startUp();\n        System.out.println(\"------------------\");\n        computer.shutDown();\n    }\n}\n```\n\n## 3. 总结\n\n**外观模式的优点**\n\n外观模式有如下几个优点：\n\n1、**松散耦合**\n\n外观模式松散了客户端和子系统的耦合关系，让子系统内部的模块能更容易扩展和维护\n\n2、**简单易用**\n\n客户端不需要了解系统内部的实现，也不需要和众多子系统内部的模块交互，只需要和外观类交互就可以了\n\n3、**更好地划分层次**\n\n通过合理使用Facade，可以帮助我们更好地划分层次。有些方法是系统对内的，有些方法是对外的，把需要暴露给外部的功能集中到Facade中，这样既方便客户端使用，也很好地隐藏了内部的细节\n\n## 4. Tomcat中的外观模式\n\nTomcat中有很多场景都使用到了外观模式，因为Tomcat中有很多不同的组件，每个组件需要相互通信，但又不能将自己内部数据过多地暴露给其他组件。用外观模式隔离数据是个很好的方法，比如Request上使用外观模式。\n\n比如Servlet，doGet和doPost方法，参数类型是接口HttpServletRequest和接口HttpServletResponse，那么Tomcat中传递过来的真实类型到底是什么呢？\n\n在真正调用Servlet前，会经过很多Tomcat方法，传递给Tomcat的request和response的真正类型是一个Facade类。\n\n　Request类\n\n```java\n    public HttpServletRequest getRequest() {\n        if (facade == null) {\n            facade = new RequestFacade(this);\n        }\n        return facade;\n    }\n\n```\n\n　Response类\n\n```java\n    public HttpServletResponse getResponse() {\n        if (facade == null) {\n            facade = new ResponseFacade(this);\n        }\n        return (facade);\n    }\n```\n\n\n\n因为Request类中很多方法都是组件内部之间交互用的，比如setComet、setReuqestedSessionId等方法，这些方法并不对外公开，但又必须设置为public，因为还要和内部组件交互使用。最好的解决方法就是通过使用一个Facade类，屏蔽掉内部组件之间交互的方法，只提供外部程序要使用的方法。\n\n如果不使用Facade，直接传递的是HttpServletRequest和HttpServletResponse，那么熟悉容器内部运作的开发者可以分别把ServletRequest和ServletResponse向下转型为HttpServletRequest和HttpServletResponse，这样就有安全性的问题了。\n\n## 5. 参考\n\n`https://www.cnblogs.com/xrq730/p/4908822.html`","source":"_posts/design_pattern/eight-facade.md","raw":"---\ntitle: Java设计模式(八)---外观模式\ntags:\n  - 设计模式\ncategories:\n  - 设计模式\nabbrlink: 22a51705\ndate: 2018-10-20 22:00:00\n---\n\n本文主要介绍了Java23种设计模式中的外观模式，并结合实例描述了 模式的具体实现和性能分析测试。\n\n<!--more-->\n\n> **Java设计模式系列文章目录**\n>\n> [Java设计模式(一)---单例模式](https://www.lixueduan.com/posts/53093.html)\n>\n> [Java设计模式(二)---工厂模式](https://www.lixueduan.com/posts/34710.html)\n>\n> [Java设计模式(三)---建造者模式](https://www.lixueduan.com/posts/52453.html)\n>\n> [Java设计模式(四)---原型模式](https://www.lixueduan.com/posts/24b6c0e4.html)\n>\n> [Java设计模式(五)---适配器模式](https://www.lixueduan.com/posts/f444ac9.html)\n>\n> [Java设计模式(六)---装饰者模式](https://www.lixueduan.com/posts/75903408.html)\n>\n> [Java设计模式(七)---代理模式](https://www.lixueduan.com/posts/ae2a93bd.html)\n>\n> [Java设计模式(八)---外观模式](https://www.lixueduan.com/posts/22a51705.html)\n>\n> [Java设计模式(九)---享元模式](https://www.lixueduan.com/posts/34e634e7.html)\n>\n> [Java设计模式(十)---策略模式](https://www.lixueduan.com/posts/a7982bdc.html)\n>\n> [Java设计模式(十一)---模板方法模式](https://www.lixueduan.com/posts/57ae709c.html)\n>\n> [Java设计模式(十二)---观察者模式](https://www.lixueduan.com/posts/48bcf013.html)\n>\n> [Java设计模式(十三)---组合模式](https://www.lixueduan.com/posts/a340063f.html)\n>\n> ........\n>\n> Demo下载--> [Github](https://github.com/illusorycloud/design-pattern)\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 简介\n\n> 它通过引入一个外观角色来简化客户端与子系统之间的交互，为复杂的子系统调用提供一个统一的入口，降低子系统与客户端的耦合度，且客户端调用非常方便。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/eight-facade.jpg)\n\n**外观模式结构**：\n\n**SubSystem**: 子系统角色。表示一个系统的子系统或模块。\n\n**Facade**: 外观角色，客户端通过操作外观角色从而达到控制子系统角色的目的。对于客户端来说，外观角色好比一道屏障，对客户端屏蔽了子系统的具体实现。\n\n## 2. 具体实现\n\n```java\n/**\n * 子系统角色类\n * 电脑CPU\n *\n * @author illusoryCloud\n */\npublic class CPU {\n    public void startUp(){\n        System.out.println(\"cpu is  startUp...\");\n    }\n    public void shutDown(){\n        System.out.println(\"cpu is  shutDown...\");\n\n    }\n}\n\n/**\n * 子系统角色类\n * 电脑硬盘\n *\n * @author illusoryCloud\n */\npublic class Disk {\n    public void startUp() {\n        System.out.println(\"disk is  startUp...\");\n    }\n\n    public void shutDown() {\n        System.out.println(\"disk is  shutDown...\");\n\n    }\n}\n\n/**\n * 子系统角色类\n * 电脑内存\n *\n * @author illusoryCloud\n */\npublic class Memory {\n    public void startUp() {\n        System.out.println(\"memory is  startUp...\");\n    }\n\n    public void shutDown() {\n        System.out.println(\"memory is  shutDown...\");\n\n    }\n}\n\n/**\n * 外观角色\n * 电脑\n * 用户通过操作当前类即可达到操作所有子系统的目的\n *\n * @author illusoryCloud\n */\npublic class Computer {\n    private CPU cpu;\n    private Disk disk;\n    private Memory memory;\n\n    public Computer() {\n        cpu = new CPU();\n        disk = new Disk();\n        memory = new Memory();\n    }\n\n    public void startUp() {\n        cpu.startUp();\n        disk.startUp();\n        memory.startUp();\n    }\n\n    public void shutDown() {\n        cpu.shutDown();\n        disk.shutDown();\n        memory.shutDown();\n    }\n}\n\n/**\n * 外观模式 测试类\n *\n * @author illusoryCloud\n */\npublic class FacedeTest {\n    @Test\n    public void facedeTest() {\n        Computer computer = new Computer();\n        computer.startUp();\n        System.out.println(\"------------------\");\n        computer.shutDown();\n    }\n}\n```\n\n## 3. 总结\n\n**外观模式的优点**\n\n外观模式有如下几个优点：\n\n1、**松散耦合**\n\n外观模式松散了客户端和子系统的耦合关系，让子系统内部的模块能更容易扩展和维护\n\n2、**简单易用**\n\n客户端不需要了解系统内部的实现，也不需要和众多子系统内部的模块交互，只需要和外观类交互就可以了\n\n3、**更好地划分层次**\n\n通过合理使用Facade，可以帮助我们更好地划分层次。有些方法是系统对内的，有些方法是对外的，把需要暴露给外部的功能集中到Facade中，这样既方便客户端使用，也很好地隐藏了内部的细节\n\n## 4. Tomcat中的外观模式\n\nTomcat中有很多场景都使用到了外观模式，因为Tomcat中有很多不同的组件，每个组件需要相互通信，但又不能将自己内部数据过多地暴露给其他组件。用外观模式隔离数据是个很好的方法，比如Request上使用外观模式。\n\n比如Servlet，doGet和doPost方法，参数类型是接口HttpServletRequest和接口HttpServletResponse，那么Tomcat中传递过来的真实类型到底是什么呢？\n\n在真正调用Servlet前，会经过很多Tomcat方法，传递给Tomcat的request和response的真正类型是一个Facade类。\n\n　Request类\n\n```java\n    public HttpServletRequest getRequest() {\n        if (facade == null) {\n            facade = new RequestFacade(this);\n        }\n        return facade;\n    }\n\n```\n\n　Response类\n\n```java\n    public HttpServletResponse getResponse() {\n        if (facade == null) {\n            facade = new ResponseFacade(this);\n        }\n        return (facade);\n    }\n```\n\n\n\n因为Request类中很多方法都是组件内部之间交互用的，比如setComet、setReuqestedSessionId等方法，这些方法并不对外公开，但又必须设置为public，因为还要和内部组件交互使用。最好的解决方法就是通过使用一个Facade类，屏蔽掉内部组件之间交互的方法，只提供外部程序要使用的方法。\n\n如果不使用Facade，直接传递的是HttpServletRequest和HttpServletResponse，那么熟悉容器内部运作的开发者可以分别把ServletRequest和ServletResponse向下转型为HttpServletRequest和HttpServletResponse，这样就有安全性的问题了。\n\n## 5. 参考\n\n`https://www.cnblogs.com/xrq730/p/4908822.html`","slug":"design_pattern/eight-facade","published":1,"updated":"2019-03-04T15:35:12.353Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv43200070ww4r7z8s3fz","content":"<p>本文主要介绍了Java23种设计模式中的外观模式，并结合实例描述了 模式的具体实现和性能分析测试。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p><strong>Java设计模式系列文章目录</strong></p>\n<p><a href=\"https://www.lixueduan.com/posts/53093.html\">Java设计模式(一)—单例模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34710.html\">Java设计模式(二)—工厂模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/52453.html\">Java设计模式(三)—建造者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/24b6c0e4.html\">Java设计模式(四)—原型模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/f444ac9.html\">Java设计模式(五)—适配器模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/75903408.html\">Java设计模式(六)—装饰者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/ae2a93bd.html\">Java设计模式(七)—代理模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/22a51705.html\">Java设计模式(八)—外观模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34e634e7.html\">Java设计模式(九)—享元模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a7982bdc.html\">Java设计模式(十)—策略模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/57ae709c.html\">Java设计模式(十一)—模板方法模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/48bcf013.html\">Java设计模式(十二)—观察者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a340063f.html\">Java设计模式(十三)—组合模式</a></p>\n<p>……..</p>\n<p>Demo下载–&gt; <a href=\"https://github.com/illusorycloud/design-pattern\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><blockquote>\n<p>它通过引入一个外观角色来简化客户端与子系统之间的交互，为复杂的子系统调用提供一个统一的入口，降低子系统与客户端的耦合度，且客户端调用非常方便。</p>\n</blockquote>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/eight-facade.jpg\" alt=\"\"></p>\n<p><strong>外观模式结构</strong>：</p>\n<p><strong>SubSystem</strong>: 子系统角色。表示一个系统的子系统或模块。</p>\n<p><strong>Facade</strong>: 外观角色，客户端通过操作外观角色从而达到控制子系统角色的目的。对于客户端来说，外观角色好比一道屏障，对客户端屏蔽了子系统的具体实现。</p>\n<h2 id=\"2-具体实现\"><a href=\"#2-具体实现\" class=\"headerlink\" title=\"2. 具体实现\"></a>2. 具体实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 子系统角色类</span></span><br><span class=\"line\"><span class=\"comment\"> * 电脑CPU</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CPU</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startUp</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"cpu is  startUp...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutDown</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"cpu is  shutDown...\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 子系统角色类</span></span><br><span class=\"line\"><span class=\"comment\"> * 电脑硬盘</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Disk</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startUp</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"disk is  startUp...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutDown</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"disk is  shutDown...\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 子系统角色类</span></span><br><span class=\"line\"><span class=\"comment\"> * 电脑内存</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Memory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startUp</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"memory is  startUp...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutDown</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"memory is  shutDown...\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 外观角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 电脑</span></span><br><span class=\"line\"><span class=\"comment\"> * 用户通过操作当前类即可达到操作所有子系统的目的</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Computer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> CPU cpu;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Disk disk;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Memory memory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Computer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        cpu = <span class=\"keyword\">new</span> CPU();</span><br><span class=\"line\">        disk = <span class=\"keyword\">new</span> Disk();</span><br><span class=\"line\">        memory = <span class=\"keyword\">new</span> Memory();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startUp</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        cpu.startUp();</span><br><span class=\"line\">        disk.startUp();</span><br><span class=\"line\">        memory.startUp();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutDown</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        cpu.shutDown();</span><br><span class=\"line\">        disk.shutDown();</span><br><span class=\"line\">        memory.shutDown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 外观模式 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FacedeTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">facedeTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Computer computer = <span class=\"keyword\">new</span> Computer();</span><br><span class=\"line\">        computer.startUp();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"------------------\"</span>);</span><br><span class=\"line\">        computer.shutDown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h2><p><strong>外观模式的优点</strong></p>\n<p>外观模式有如下几个优点：</p>\n<p>1、<strong>松散耦合</strong></p>\n<p>外观模式松散了客户端和子系统的耦合关系，让子系统内部的模块能更容易扩展和维护</p>\n<p>2、<strong>简单易用</strong></p>\n<p>客户端不需要了解系统内部的实现，也不需要和众多子系统内部的模块交互，只需要和外观类交互就可以了</p>\n<p>3、<strong>更好地划分层次</strong></p>\n<p>通过合理使用Facade，可以帮助我们更好地划分层次。有些方法是系统对内的，有些方法是对外的，把需要暴露给外部的功能集中到Facade中，这样既方便客户端使用，也很好地隐藏了内部的细节</p>\n<h2 id=\"4-Tomcat中的外观模式\"><a href=\"#4-Tomcat中的外观模式\" class=\"headerlink\" title=\"4. Tomcat中的外观模式\"></a>4. Tomcat中的外观模式</h2><p>Tomcat中有很多场景都使用到了外观模式，因为Tomcat中有很多不同的组件，每个组件需要相互通信，但又不能将自己内部数据过多地暴露给其他组件。用外观模式隔离数据是个很好的方法，比如Request上使用外观模式。</p>\n<p>比如Servlet，doGet和doPost方法，参数类型是接口HttpServletRequest和接口HttpServletResponse，那么Tomcat中传递过来的真实类型到底是什么呢？</p>\n<p>在真正调用Servlet前，会经过很多Tomcat方法，传递给Tomcat的request和response的真正类型是一个Facade类。</p>\n<p>　Request类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> HttpServletRequest <span class=\"title\">getRequest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (facade == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        facade = <span class=\"keyword\">new</span> RequestFacade(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> facade;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>　Response类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> HttpServletResponse <span class=\"title\">getResponse</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (facade == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        facade = <span class=\"keyword\">new</span> ResponseFacade(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (facade);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为Request类中很多方法都是组件内部之间交互用的，比如setComet、setReuqestedSessionId等方法，这些方法并不对外公开，但又必须设置为public，因为还要和内部组件交互使用。最好的解决方法就是通过使用一个Facade类，屏蔽掉内部组件之间交互的方法，只提供外部程序要使用的方法。</p>\n<p>如果不使用Facade，直接传递的是HttpServletRequest和HttpServletResponse，那么熟悉容器内部运作的开发者可以分别把ServletRequest和ServletResponse向下转型为HttpServletRequest和HttpServletResponse，这样就有安全性的问题了。</p>\n<h2 id=\"5-参考\"><a href=\"#5-参考\" class=\"headerlink\" title=\"5. 参考\"></a>5. 参考</h2><p><code>https://www.cnblogs.com/xrq730/p/4908822.html</code></p>\n","site":{"data":{}},"excerpt":"<p>本文主要介绍了Java23种设计模式中的外观模式，并结合实例描述了 模式的具体实现和性能分析测试。</p>","more":"<blockquote>\n<p><strong>Java设计模式系列文章目录</strong></p>\n<p><a href=\"https://www.lixueduan.com/posts/53093.html\">Java设计模式(一)—单例模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34710.html\">Java设计模式(二)—工厂模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/52453.html\">Java设计模式(三)—建造者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/24b6c0e4.html\">Java设计模式(四)—原型模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/f444ac9.html\">Java设计模式(五)—适配器模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/75903408.html\">Java设计模式(六)—装饰者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/ae2a93bd.html\">Java设计模式(七)—代理模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/22a51705.html\">Java设计模式(八)—外观模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34e634e7.html\">Java设计模式(九)—享元模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a7982bdc.html\">Java设计模式(十)—策略模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/57ae709c.html\">Java设计模式(十一)—模板方法模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/48bcf013.html\">Java设计模式(十二)—观察者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a340063f.html\">Java设计模式(十三)—组合模式</a></p>\n<p>……..</p>\n<p>Demo下载–&gt; <a href=\"https://github.com/illusorycloud/design-pattern\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><blockquote>\n<p>它通过引入一个外观角色来简化客户端与子系统之间的交互，为复杂的子系统调用提供一个统一的入口，降低子系统与客户端的耦合度，且客户端调用非常方便。</p>\n</blockquote>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/eight-facade.jpg\" alt=\"\"></p>\n<p><strong>外观模式结构</strong>：</p>\n<p><strong>SubSystem</strong>: 子系统角色。表示一个系统的子系统或模块。</p>\n<p><strong>Facade</strong>: 外观角色，客户端通过操作外观角色从而达到控制子系统角色的目的。对于客户端来说，外观角色好比一道屏障，对客户端屏蔽了子系统的具体实现。</p>\n<h2 id=\"2-具体实现\"><a href=\"#2-具体实现\" class=\"headerlink\" title=\"2. 具体实现\"></a>2. 具体实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 子系统角色类</span></span><br><span class=\"line\"><span class=\"comment\"> * 电脑CPU</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CPU</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startUp</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"cpu is  startUp...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutDown</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"cpu is  shutDown...\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 子系统角色类</span></span><br><span class=\"line\"><span class=\"comment\"> * 电脑硬盘</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Disk</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startUp</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"disk is  startUp...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutDown</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"disk is  shutDown...\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 子系统角色类</span></span><br><span class=\"line\"><span class=\"comment\"> * 电脑内存</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Memory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startUp</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"memory is  startUp...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutDown</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"memory is  shutDown...\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 外观角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 电脑</span></span><br><span class=\"line\"><span class=\"comment\"> * 用户通过操作当前类即可达到操作所有子系统的目的</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Computer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> CPU cpu;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Disk disk;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Memory memory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Computer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        cpu = <span class=\"keyword\">new</span> CPU();</span><br><span class=\"line\">        disk = <span class=\"keyword\">new</span> Disk();</span><br><span class=\"line\">        memory = <span class=\"keyword\">new</span> Memory();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startUp</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        cpu.startUp();</span><br><span class=\"line\">        disk.startUp();</span><br><span class=\"line\">        memory.startUp();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutDown</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        cpu.shutDown();</span><br><span class=\"line\">        disk.shutDown();</span><br><span class=\"line\">        memory.shutDown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 外观模式 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FacedeTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">facedeTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Computer computer = <span class=\"keyword\">new</span> Computer();</span><br><span class=\"line\">        computer.startUp();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"------------------\"</span>);</span><br><span class=\"line\">        computer.shutDown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h2><p><strong>外观模式的优点</strong></p>\n<p>外观模式有如下几个优点：</p>\n<p>1、<strong>松散耦合</strong></p>\n<p>外观模式松散了客户端和子系统的耦合关系，让子系统内部的模块能更容易扩展和维护</p>\n<p>2、<strong>简单易用</strong></p>\n<p>客户端不需要了解系统内部的实现，也不需要和众多子系统内部的模块交互，只需要和外观类交互就可以了</p>\n<p>3、<strong>更好地划分层次</strong></p>\n<p>通过合理使用Facade，可以帮助我们更好地划分层次。有些方法是系统对内的，有些方法是对外的，把需要暴露给外部的功能集中到Facade中，这样既方便客户端使用，也很好地隐藏了内部的细节</p>\n<h2 id=\"4-Tomcat中的外观模式\"><a href=\"#4-Tomcat中的外观模式\" class=\"headerlink\" title=\"4. Tomcat中的外观模式\"></a>4. Tomcat中的外观模式</h2><p>Tomcat中有很多场景都使用到了外观模式，因为Tomcat中有很多不同的组件，每个组件需要相互通信，但又不能将自己内部数据过多地暴露给其他组件。用外观模式隔离数据是个很好的方法，比如Request上使用外观模式。</p>\n<p>比如Servlet，doGet和doPost方法，参数类型是接口HttpServletRequest和接口HttpServletResponse，那么Tomcat中传递过来的真实类型到底是什么呢？</p>\n<p>在真正调用Servlet前，会经过很多Tomcat方法，传递给Tomcat的request和response的真正类型是一个Facade类。</p>\n<p>　Request类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> HttpServletRequest <span class=\"title\">getRequest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (facade == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        facade = <span class=\"keyword\">new</span> RequestFacade(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> facade;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>　Response类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> HttpServletResponse <span class=\"title\">getResponse</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (facade == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        facade = <span class=\"keyword\">new</span> ResponseFacade(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (facade);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为Request类中很多方法都是组件内部之间交互用的，比如setComet、setReuqestedSessionId等方法，这些方法并不对外公开，但又必须设置为public，因为还要和内部组件交互使用。最好的解决方法就是通过使用一个Facade类，屏蔽掉内部组件之间交互的方法，只提供外部程序要使用的方法。</p>\n<p>如果不使用Facade，直接传递的是HttpServletRequest和HttpServletResponse，那么熟悉容器内部运作的开发者可以分别把ServletRequest和ServletResponse向下转型为HttpServletRequest和HttpServletResponse，这样就有安全性的问题了。</p>\n<h2 id=\"5-参考\"><a href=\"#5-参考\" class=\"headerlink\" title=\"5. 参考\"></a>5. 参考</h2><p><code>https://www.cnblogs.com/xrq730/p/4908822.html</code></p>"},{"title":"Java设计模式(四)---原型模式","abbrlink":"24b6c0e4","date":"2018-10-14T14:00:00.000Z","_content":"\n本文主要介绍了Java23种设计模式中的原型模式，并结合实例描述了原型模式的具体实现和应用场景，优缺点分析等。\n\n<!--more-->\n\n> **Java设计模式系列文章目录**\n>\n> [Java设计模式(一)---单例模式](https://www.lixueduan.com/posts/53093.html)\n>\n> [Java设计模式(二)---工厂模式](https://www.lixueduan.com/posts/34710.html)\n>\n> [Java设计模式(三)---建造者模式](https://www.lixueduan.com/posts/52453.html)\n>\n> [Java设计模式(四)---原型模式](https://www.lixueduan.com/posts/24b6c0e4.html)\n>\n> [Java设计模式(五)---适配器模式](https://www.lixueduan.com/posts/f444ac9.html)\n>\n> [Java设计模式(六)---装饰者模式](https://www.lixueduan.com/posts/75903408.html)\n>\n> [Java设计模式(七)---代理模式](https://www.lixueduan.com/posts/ae2a93bd.html)\n>\n> [Java设计模式(八)---外观模式](https://www.lixueduan.com/posts/22a51705.html)\n>\n> [Java设计模式(九)---享元模式](https://www.lixueduan.com/posts/34e634e7.html)\n>\n> [Java设计模式(十)---策略模式](https://www.lixueduan.com/posts/a7982bdc.html)\n>\n> [Java设计模式(十一)---模板方法模式](https://www.lixueduan.com/posts/57ae709c.html)\n>\n> [Java设计模式(十二)---观察者模式](https://www.lixueduan.com/posts/48bcf013.html)\n>\n> [Java设计模式(十三)---组合模式](https://www.lixueduan.com/posts/a340063f.html)\n>\n> ........\n>\n> Demo下载--> [Github](https://github.com/illusorycloud/design-pattern)\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n\n\n## 1. 简介\n\n### 1.1 原型模式\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/four-prototype.gif)\n\n**原型模式的思想就是将一个对象作为原型，对其进行复制、克隆，产生一个和原对象类似的新对象**。简单地说原型模式就是创建复杂对象的时候使用克隆手段来代替新建一个对象。当创建新的对象实例较为复杂时，使用原型模式可以简化对象的创建过程，通过一个已有实例可以提高新实例的创建效率。\n\n 原型模式主要包含如下三个角色：\n\n* Prototype：抽象原型类。声明克隆自身的接口。 \n* ConcretePrototype：具体原型类。实现克隆的具体操作。 \n* Client：客户类。让一个原型克隆自身，从而获得一个新的对象。\n\n### 1.2 Java中的克隆\n\n我们需要知道，Java中的对象克隆分为浅克隆和深克隆。\n\n* 浅克隆：将一个对象克隆后，基本数据类型的变量都会重新创建，而引用类型，指向的还是原对象所指向的。\n\n* 深克隆：将一个对象克隆后，不论是基本数据类型还有引用类型，都是重新创建的。\n\n简单来说，就是深克隆进行了完全彻底的克隆，而浅克隆不彻底。\n\n\n\n## 2. 实现\n\n```java\n//实现Cloneable接口浅克隆，Serializable接口深克隆\n/**\n * 构建的消息对象\n * 普通对象\n *\n * @author illusoryCloud\n */\npublic class Message implements Serializable, Cloneable {\n    /**\n     * 标题\n     */\n    private String Title;\n    /**\n     * 内容\n     */\n    private String Content;\n    /**\n     * 发送者\n     */\n    private User From;\n    /**\n     * 接收者\n     */\n    private User To;\n    /**\n     * 时间\n     */\n    private Date Time;\n\n    /**\n     * 浅克隆\n     *\n     * @return\n     * @throws CloneNotSupportedException\n     */\n    @Override\n    protected Object clone() throws CloneNotSupportedException {\n        try {\n            return super.clone();\n        } catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    /**\n     * 深克隆\n     *\n     * @return Message对象\n     * @throws IOException\n     * @throws ClassNotFoundException\n     */\n    public Message deepClone() throws IOException, ClassNotFoundException {\n        // 写入当前对象的二进制流\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(bos);\n        oos.writeObject(this);\n        // 读出二进制流产生的新对象\n\n        ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());\n        ObjectInputStream ois = new ObjectInputStream(bis);\n        return (Message) ois.readObject();\n    }\n\t\t\t//省略Getter、Setter、toString、构造函数等\n    }\n\n//User类 Message类中引用 \n/**\n * 用户类 被消息类引用\n * 主类实现深克隆 则被引用类也得实现Serializable接口\n * @author illusoryCloud\n */\npublic class User implements Serializable {\n    private String name;\n    private int age;\n\t//省略Getter、Setter、toString、构造函数等\n}\n//测试\n  /**\n * 原型模式测试类\n *\n * @author illusoryCloud\n */\npublic class PrototypeTest {\n    @Test\n    public void prototypeTest() {\n        User zhangsan = new User(\"张三\", 22);\n        User lisi = new User(\"李四\", 23);\n        Message message = new Message();\n        message.setTitle(\"hello\");\n        message.setContent(\"how are you~\");\n        message.setFrom(zhangsan);\n        message.setTo(lisi);\n        message.setTime(new Date());\n        Message cloneOne = null;\n        Message cloneTwo = null;\n        try {\n            cloneOne = (Message) message.clone();\n            cloneTwo = message.deepClone();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        //false  克隆实现的是一个(和原对象相似的)新对象\n        System.out.println(message == cloneOne);\n        //false\n        System.out.println(message == cloneTwo);\n        //true 浅克隆 引用对象指向的还是原对象\n        System.out.println(message.getFrom()==cloneOne.getFrom());\n        //false 深克隆 引用对象也重新创建\n        System.out.println(message.getFrom()==cloneTwo.getFrom());\n\n    }\n\n}\n```\n\n## 3. 总结\n\n**为什么要用原型模式**\n\n通过复制已有的对象，可以简化对象的创建过程，提高创建对象的效率。\n\n深克隆保存对象状态，实现撤销恢复功能。\n\n**缺点**：\n\n在实现深克隆时需要编写复杂的代码。\n\n需要为每一个类写一个克隆方法，如果要深克隆，则类中的每一层对象的类都得支持深克隆，代码比较复杂。\n\n**应用场景**\n\n创建对象成本高。\n\n当一个系统应该独立于它的产品创建、构成和表示时，要使用原型模式。\n\n当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆它们可能比每次用合适的状态手工实例化该类更方便一些。\n\n**原型模式在Java中的应用及解读**\n\n只要是实现了Cloneable接口的类都可以算是原型模式的应用，比如ArrayList。\n\n```java\npublic class ArrayList<E> extends AbstractList<E>\n        implements List<E>, RandomAccess, Cloneable, java.io.Serializable\n{\n    ...\n    public Object clone() {\n    try {\n        ArrayList<E> v = (ArrayList<E>) super.clone();\n        v.elementData = Arrays.copyOf(elementData, size);\n        v.modCount = 0;\n        return v;\n    } catch (CloneNotSupportedException e) {\n        // this shouldn't happen, since we are Cloneable\n        throw new InternalError();\n    }\n    }\n    ...\n}\n```\n\n程序中获取到了一个ArrayList的实例arrayList，我们完全可以通过调用arrayList.clone()方法获取到原ArrayList的拷贝。\n\n## 4. 参考\n\n`https://www.cnblogs.com/xrq730/p/4905907.html`\n\n","source":"_posts/design_pattern/four-prototype.md","raw":"---\ntitle: Java设计模式(四)---原型模式\ntags:\n  - 设计模式\ncategories:\n  - 设计模式\nabbrlink: 24b6c0e4\ndate: 2018-10-14 22:00:00\n---\n\n本文主要介绍了Java23种设计模式中的原型模式，并结合实例描述了原型模式的具体实现和应用场景，优缺点分析等。\n\n<!--more-->\n\n> **Java设计模式系列文章目录**\n>\n> [Java设计模式(一)---单例模式](https://www.lixueduan.com/posts/53093.html)\n>\n> [Java设计模式(二)---工厂模式](https://www.lixueduan.com/posts/34710.html)\n>\n> [Java设计模式(三)---建造者模式](https://www.lixueduan.com/posts/52453.html)\n>\n> [Java设计模式(四)---原型模式](https://www.lixueduan.com/posts/24b6c0e4.html)\n>\n> [Java设计模式(五)---适配器模式](https://www.lixueduan.com/posts/f444ac9.html)\n>\n> [Java设计模式(六)---装饰者模式](https://www.lixueduan.com/posts/75903408.html)\n>\n> [Java设计模式(七)---代理模式](https://www.lixueduan.com/posts/ae2a93bd.html)\n>\n> [Java设计模式(八)---外观模式](https://www.lixueduan.com/posts/22a51705.html)\n>\n> [Java设计模式(九)---享元模式](https://www.lixueduan.com/posts/34e634e7.html)\n>\n> [Java设计模式(十)---策略模式](https://www.lixueduan.com/posts/a7982bdc.html)\n>\n> [Java设计模式(十一)---模板方法模式](https://www.lixueduan.com/posts/57ae709c.html)\n>\n> [Java设计模式(十二)---观察者模式](https://www.lixueduan.com/posts/48bcf013.html)\n>\n> [Java设计模式(十三)---组合模式](https://www.lixueduan.com/posts/a340063f.html)\n>\n> ........\n>\n> Demo下载--> [Github](https://github.com/illusorycloud/design-pattern)\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n\n\n## 1. 简介\n\n### 1.1 原型模式\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/four-prototype.gif)\n\n**原型模式的思想就是将一个对象作为原型，对其进行复制、克隆，产生一个和原对象类似的新对象**。简单地说原型模式就是创建复杂对象的时候使用克隆手段来代替新建一个对象。当创建新的对象实例较为复杂时，使用原型模式可以简化对象的创建过程，通过一个已有实例可以提高新实例的创建效率。\n\n 原型模式主要包含如下三个角色：\n\n* Prototype：抽象原型类。声明克隆自身的接口。 \n* ConcretePrototype：具体原型类。实现克隆的具体操作。 \n* Client：客户类。让一个原型克隆自身，从而获得一个新的对象。\n\n### 1.2 Java中的克隆\n\n我们需要知道，Java中的对象克隆分为浅克隆和深克隆。\n\n* 浅克隆：将一个对象克隆后，基本数据类型的变量都会重新创建，而引用类型，指向的还是原对象所指向的。\n\n* 深克隆：将一个对象克隆后，不论是基本数据类型还有引用类型，都是重新创建的。\n\n简单来说，就是深克隆进行了完全彻底的克隆，而浅克隆不彻底。\n\n\n\n## 2. 实现\n\n```java\n//实现Cloneable接口浅克隆，Serializable接口深克隆\n/**\n * 构建的消息对象\n * 普通对象\n *\n * @author illusoryCloud\n */\npublic class Message implements Serializable, Cloneable {\n    /**\n     * 标题\n     */\n    private String Title;\n    /**\n     * 内容\n     */\n    private String Content;\n    /**\n     * 发送者\n     */\n    private User From;\n    /**\n     * 接收者\n     */\n    private User To;\n    /**\n     * 时间\n     */\n    private Date Time;\n\n    /**\n     * 浅克隆\n     *\n     * @return\n     * @throws CloneNotSupportedException\n     */\n    @Override\n    protected Object clone() throws CloneNotSupportedException {\n        try {\n            return super.clone();\n        } catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    /**\n     * 深克隆\n     *\n     * @return Message对象\n     * @throws IOException\n     * @throws ClassNotFoundException\n     */\n    public Message deepClone() throws IOException, ClassNotFoundException {\n        // 写入当前对象的二进制流\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(bos);\n        oos.writeObject(this);\n        // 读出二进制流产生的新对象\n\n        ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());\n        ObjectInputStream ois = new ObjectInputStream(bis);\n        return (Message) ois.readObject();\n    }\n\t\t\t//省略Getter、Setter、toString、构造函数等\n    }\n\n//User类 Message类中引用 \n/**\n * 用户类 被消息类引用\n * 主类实现深克隆 则被引用类也得实现Serializable接口\n * @author illusoryCloud\n */\npublic class User implements Serializable {\n    private String name;\n    private int age;\n\t//省略Getter、Setter、toString、构造函数等\n}\n//测试\n  /**\n * 原型模式测试类\n *\n * @author illusoryCloud\n */\npublic class PrototypeTest {\n    @Test\n    public void prototypeTest() {\n        User zhangsan = new User(\"张三\", 22);\n        User lisi = new User(\"李四\", 23);\n        Message message = new Message();\n        message.setTitle(\"hello\");\n        message.setContent(\"how are you~\");\n        message.setFrom(zhangsan);\n        message.setTo(lisi);\n        message.setTime(new Date());\n        Message cloneOne = null;\n        Message cloneTwo = null;\n        try {\n            cloneOne = (Message) message.clone();\n            cloneTwo = message.deepClone();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        //false  克隆实现的是一个(和原对象相似的)新对象\n        System.out.println(message == cloneOne);\n        //false\n        System.out.println(message == cloneTwo);\n        //true 浅克隆 引用对象指向的还是原对象\n        System.out.println(message.getFrom()==cloneOne.getFrom());\n        //false 深克隆 引用对象也重新创建\n        System.out.println(message.getFrom()==cloneTwo.getFrom());\n\n    }\n\n}\n```\n\n## 3. 总结\n\n**为什么要用原型模式**\n\n通过复制已有的对象，可以简化对象的创建过程，提高创建对象的效率。\n\n深克隆保存对象状态，实现撤销恢复功能。\n\n**缺点**：\n\n在实现深克隆时需要编写复杂的代码。\n\n需要为每一个类写一个克隆方法，如果要深克隆，则类中的每一层对象的类都得支持深克隆，代码比较复杂。\n\n**应用场景**\n\n创建对象成本高。\n\n当一个系统应该独立于它的产品创建、构成和表示时，要使用原型模式。\n\n当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆它们可能比每次用合适的状态手工实例化该类更方便一些。\n\n**原型模式在Java中的应用及解读**\n\n只要是实现了Cloneable接口的类都可以算是原型模式的应用，比如ArrayList。\n\n```java\npublic class ArrayList<E> extends AbstractList<E>\n        implements List<E>, RandomAccess, Cloneable, java.io.Serializable\n{\n    ...\n    public Object clone() {\n    try {\n        ArrayList<E> v = (ArrayList<E>) super.clone();\n        v.elementData = Arrays.copyOf(elementData, size);\n        v.modCount = 0;\n        return v;\n    } catch (CloneNotSupportedException e) {\n        // this shouldn't happen, since we are Cloneable\n        throw new InternalError();\n    }\n    }\n    ...\n}\n```\n\n程序中获取到了一个ArrayList的实例arrayList，我们完全可以通过调用arrayList.clone()方法获取到原ArrayList的拷贝。\n\n## 4. 参考\n\n`https://www.cnblogs.com/xrq730/p/4905907.html`\n\n","slug":"design_pattern/four-prototype","published":1,"updated":"2019-03-04T15:34:18.355Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv43700080ww4qr20m2xf","content":"<p>本文主要介绍了Java23种设计模式中的原型模式，并结合实例描述了原型模式的具体实现和应用场景，优缺点分析等。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p><strong>Java设计模式系列文章目录</strong></p>\n<p><a href=\"https://www.lixueduan.com/posts/53093.html\">Java设计模式(一)—单例模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34710.html\">Java设计模式(二)—工厂模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/52453.html\">Java设计模式(三)—建造者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/24b6c0e4.html\">Java设计模式(四)—原型模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/f444ac9.html\">Java设计模式(五)—适配器模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/75903408.html\">Java设计模式(六)—装饰者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/ae2a93bd.html\">Java设计模式(七)—代理模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/22a51705.html\">Java设计模式(八)—外观模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34e634e7.html\">Java设计模式(九)—享元模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a7982bdc.html\">Java设计模式(十)—策略模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/57ae709c.html\">Java设计模式(十一)—模板方法模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/48bcf013.html\">Java设计模式(十二)—观察者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a340063f.html\">Java设计模式(十三)—组合模式</a></p>\n<p>……..</p>\n<p>Demo下载–&gt; <a href=\"https://github.com/illusorycloud/design-pattern\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><h3 id=\"1-1-原型模式\"><a href=\"#1-1-原型模式\" class=\"headerlink\" title=\"1.1 原型模式\"></a>1.1 原型模式</h3><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/four-prototype.gif\" alt=\"\"></p>\n<p><strong>原型模式的思想就是将一个对象作为原型，对其进行复制、克隆，产生一个和原对象类似的新对象</strong>。简单地说原型模式就是创建复杂对象的时候使用克隆手段来代替新建一个对象。当创建新的对象实例较为复杂时，使用原型模式可以简化对象的创建过程，通过一个已有实例可以提高新实例的创建效率。</p>\n<p> 原型模式主要包含如下三个角色：</p>\n<ul>\n<li>Prototype：抽象原型类。声明克隆自身的接口。 </li>\n<li>ConcretePrototype：具体原型类。实现克隆的具体操作。 </li>\n<li>Client：客户类。让一个原型克隆自身，从而获得一个新的对象。</li>\n</ul>\n<h3 id=\"1-2-Java中的克隆\"><a href=\"#1-2-Java中的克隆\" class=\"headerlink\" title=\"1.2 Java中的克隆\"></a>1.2 Java中的克隆</h3><p>我们需要知道，Java中的对象克隆分为浅克隆和深克隆。</p>\n<ul>\n<li><p>浅克隆：将一个对象克隆后，基本数据类型的变量都会重新创建，而引用类型，指向的还是原对象所指向的。</p>\n</li>\n<li><p>深克隆：将一个对象克隆后，不论是基本数据类型还有引用类型，都是重新创建的。</p>\n</li>\n</ul>\n<p>简单来说，就是深克隆进行了完全彻底的克隆，而浅克隆不彻底。</p>\n<h2 id=\"2-实现\"><a href=\"#2-实现\" class=\"headerlink\" title=\"2. 实现\"></a>2. 实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实现Cloneable接口浅克隆，Serializable接口深克隆</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 构建的消息对象</span></span><br><span class=\"line\"><span class=\"comment\"> * 普通对象</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Message</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span>, <span class=\"title\">Cloneable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 标题</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String Title;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String Content;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 发送者</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> User From;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 接收者</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> User To;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 时间</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date Time;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 浅克隆</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> CloneNotSupportedException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 深克隆</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Message对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> ClassNotFoundException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Message <span class=\"title\">deepClone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 写入当前对象的二进制流</span></span><br><span class=\"line\">        ByteArrayOutputStream bos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">        ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(bos);</span><br><span class=\"line\">        oos.writeObject(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 读出二进制流产生的新对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">        ByteArrayInputStream bis = <span class=\"keyword\">new</span> ByteArrayInputStream(bos.toByteArray());</span><br><span class=\"line\">        ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(bis);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (Message) ois.readObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//省略Getter、Setter、toString、构造函数等</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//User类 Message类中引用 </span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用户类 被消息类引用</span></span><br><span class=\"line\"><span class=\"comment\"> * 主类实现深克隆 则被引用类也得实现Serializable接口</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">\t<span class=\"comment\">//省略Getter、Setter、toString、构造函数等</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//测试</span></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 原型模式测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrototypeTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">prototypeTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        User zhangsan = <span class=\"keyword\">new</span> User(<span class=\"string\">\"张三\"</span>, <span class=\"number\">22</span>);</span><br><span class=\"line\">        User lisi = <span class=\"keyword\">new</span> User(<span class=\"string\">\"李四\"</span>, <span class=\"number\">23</span>);</span><br><span class=\"line\">        Message message = <span class=\"keyword\">new</span> Message();</span><br><span class=\"line\">        message.setTitle(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">        message.setContent(<span class=\"string\">\"how are you~\"</span>);</span><br><span class=\"line\">        message.setFrom(zhangsan);</span><br><span class=\"line\">        message.setTo(lisi);</span><br><span class=\"line\">        message.setTime(<span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">        Message cloneOne = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Message cloneTwo = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            cloneOne = (Message) message.clone();</span><br><span class=\"line\">            cloneTwo = message.deepClone();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//false  克隆实现的是一个(和原对象相似的)新对象</span></span><br><span class=\"line\">        System.out.println(message == cloneOne);</span><br><span class=\"line\">        <span class=\"comment\">//false</span></span><br><span class=\"line\">        System.out.println(message == cloneTwo);</span><br><span class=\"line\">        <span class=\"comment\">//true 浅克隆 引用对象指向的还是原对象</span></span><br><span class=\"line\">        System.out.println(message.getFrom()==cloneOne.getFrom());</span><br><span class=\"line\">        <span class=\"comment\">//false 深克隆 引用对象也重新创建</span></span><br><span class=\"line\">        System.out.println(message.getFrom()==cloneTwo.getFrom());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h2><p><strong>为什么要用原型模式</strong></p>\n<p>通过复制已有的对象，可以简化对象的创建过程，提高创建对象的效率。</p>\n<p>深克隆保存对象状态，实现撤销恢复功能。</p>\n<p><strong>缺点</strong>：</p>\n<p>在实现深克隆时需要编写复杂的代码。</p>\n<p>需要为每一个类写一个克隆方法，如果要深克隆，则类中的每一层对象的类都得支持深克隆，代码比较复杂。</p>\n<p><strong>应用场景</strong></p>\n<p>创建对象成本高。</p>\n<p>当一个系统应该独立于它的产品创建、构成和表示时，要使用原型模式。</p>\n<p>当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆它们可能比每次用合适的状态手工实例化该类更方便一些。</p>\n<p><strong>原型模式在Java中的应用及解读</strong></p>\n<p>只要是实现了Cloneable接口的类都可以算是原型模式的应用，比如ArrayList。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">RandomAccess</span>, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;E&gt; v = (ArrayList&lt;E&gt;) <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">        v.elementData = Arrays.copyOf(elementData, size);</span><br><span class=\"line\">        v.modCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// this shouldn't happen, since we are Cloneable</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InternalError();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>程序中获取到了一个ArrayList的实例arrayList，我们完全可以通过调用arrayList.clone()方法获取到原ArrayList的拷贝。</p>\n<h2 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4. 参考\"></a>4. 参考</h2><p><code>https://www.cnblogs.com/xrq730/p/4905907.html</code></p>\n","site":{"data":{}},"excerpt":"<p>本文主要介绍了Java23种设计模式中的原型模式，并结合实例描述了原型模式的具体实现和应用场景，优缺点分析等。</p>","more":"<blockquote>\n<p><strong>Java设计模式系列文章目录</strong></p>\n<p><a href=\"https://www.lixueduan.com/posts/53093.html\">Java设计模式(一)—单例模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34710.html\">Java设计模式(二)—工厂模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/52453.html\">Java设计模式(三)—建造者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/24b6c0e4.html\">Java设计模式(四)—原型模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/f444ac9.html\">Java设计模式(五)—适配器模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/75903408.html\">Java设计模式(六)—装饰者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/ae2a93bd.html\">Java设计模式(七)—代理模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/22a51705.html\">Java设计模式(八)—外观模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34e634e7.html\">Java设计模式(九)—享元模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a7982bdc.html\">Java设计模式(十)—策略模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/57ae709c.html\">Java设计模式(十一)—模板方法模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/48bcf013.html\">Java设计模式(十二)—观察者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a340063f.html\">Java设计模式(十三)—组合模式</a></p>\n<p>……..</p>\n<p>Demo下载–&gt; <a href=\"https://github.com/illusorycloud/design-pattern\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><h3 id=\"1-1-原型模式\"><a href=\"#1-1-原型模式\" class=\"headerlink\" title=\"1.1 原型模式\"></a>1.1 原型模式</h3><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/four-prototype.gif\" alt=\"\"></p>\n<p><strong>原型模式的思想就是将一个对象作为原型，对其进行复制、克隆，产生一个和原对象类似的新对象</strong>。简单地说原型模式就是创建复杂对象的时候使用克隆手段来代替新建一个对象。当创建新的对象实例较为复杂时，使用原型模式可以简化对象的创建过程，通过一个已有实例可以提高新实例的创建效率。</p>\n<p> 原型模式主要包含如下三个角色：</p>\n<ul>\n<li>Prototype：抽象原型类。声明克隆自身的接口。 </li>\n<li>ConcretePrototype：具体原型类。实现克隆的具体操作。 </li>\n<li>Client：客户类。让一个原型克隆自身，从而获得一个新的对象。</li>\n</ul>\n<h3 id=\"1-2-Java中的克隆\"><a href=\"#1-2-Java中的克隆\" class=\"headerlink\" title=\"1.2 Java中的克隆\"></a>1.2 Java中的克隆</h3><p>我们需要知道，Java中的对象克隆分为浅克隆和深克隆。</p>\n<ul>\n<li><p>浅克隆：将一个对象克隆后，基本数据类型的变量都会重新创建，而引用类型，指向的还是原对象所指向的。</p>\n</li>\n<li><p>深克隆：将一个对象克隆后，不论是基本数据类型还有引用类型，都是重新创建的。</p>\n</li>\n</ul>\n<p>简单来说，就是深克隆进行了完全彻底的克隆，而浅克隆不彻底。</p>\n<h2 id=\"2-实现\"><a href=\"#2-实现\" class=\"headerlink\" title=\"2. 实现\"></a>2. 实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实现Cloneable接口浅克隆，Serializable接口深克隆</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 构建的消息对象</span></span><br><span class=\"line\"><span class=\"comment\"> * 普通对象</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Message</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span>, <span class=\"title\">Cloneable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 标题</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String Title;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String Content;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 发送者</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> User From;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 接收者</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> User To;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 时间</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date Time;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 浅克隆</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> CloneNotSupportedException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 深克隆</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Message对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> ClassNotFoundException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Message <span class=\"title\">deepClone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 写入当前对象的二进制流</span></span><br><span class=\"line\">        ByteArrayOutputStream bos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">        ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(bos);</span><br><span class=\"line\">        oos.writeObject(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 读出二进制流产生的新对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">        ByteArrayInputStream bis = <span class=\"keyword\">new</span> ByteArrayInputStream(bos.toByteArray());</span><br><span class=\"line\">        ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(bis);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (Message) ois.readObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//省略Getter、Setter、toString、构造函数等</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//User类 Message类中引用 </span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用户类 被消息类引用</span></span><br><span class=\"line\"><span class=\"comment\"> * 主类实现深克隆 则被引用类也得实现Serializable接口</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">\t<span class=\"comment\">//省略Getter、Setter、toString、构造函数等</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//测试</span></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 原型模式测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrototypeTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">prototypeTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        User zhangsan = <span class=\"keyword\">new</span> User(<span class=\"string\">\"张三\"</span>, <span class=\"number\">22</span>);</span><br><span class=\"line\">        User lisi = <span class=\"keyword\">new</span> User(<span class=\"string\">\"李四\"</span>, <span class=\"number\">23</span>);</span><br><span class=\"line\">        Message message = <span class=\"keyword\">new</span> Message();</span><br><span class=\"line\">        message.setTitle(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">        message.setContent(<span class=\"string\">\"how are you~\"</span>);</span><br><span class=\"line\">        message.setFrom(zhangsan);</span><br><span class=\"line\">        message.setTo(lisi);</span><br><span class=\"line\">        message.setTime(<span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">        Message cloneOne = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Message cloneTwo = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            cloneOne = (Message) message.clone();</span><br><span class=\"line\">            cloneTwo = message.deepClone();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//false  克隆实现的是一个(和原对象相似的)新对象</span></span><br><span class=\"line\">        System.out.println(message == cloneOne);</span><br><span class=\"line\">        <span class=\"comment\">//false</span></span><br><span class=\"line\">        System.out.println(message == cloneTwo);</span><br><span class=\"line\">        <span class=\"comment\">//true 浅克隆 引用对象指向的还是原对象</span></span><br><span class=\"line\">        System.out.println(message.getFrom()==cloneOne.getFrom());</span><br><span class=\"line\">        <span class=\"comment\">//false 深克隆 引用对象也重新创建</span></span><br><span class=\"line\">        System.out.println(message.getFrom()==cloneTwo.getFrom());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h2><p><strong>为什么要用原型模式</strong></p>\n<p>通过复制已有的对象，可以简化对象的创建过程，提高创建对象的效率。</p>\n<p>深克隆保存对象状态，实现撤销恢复功能。</p>\n<p><strong>缺点</strong>：</p>\n<p>在实现深克隆时需要编写复杂的代码。</p>\n<p>需要为每一个类写一个克隆方法，如果要深克隆，则类中的每一层对象的类都得支持深克隆，代码比较复杂。</p>\n<p><strong>应用场景</strong></p>\n<p>创建对象成本高。</p>\n<p>当一个系统应该独立于它的产品创建、构成和表示时，要使用原型模式。</p>\n<p>当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆它们可能比每次用合适的状态手工实例化该类更方便一些。</p>\n<p><strong>原型模式在Java中的应用及解读</strong></p>\n<p>只要是实现了Cloneable接口的类都可以算是原型模式的应用，比如ArrayList。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">RandomAccess</span>, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;E&gt; v = (ArrayList&lt;E&gt;) <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">        v.elementData = Arrays.copyOf(elementData, size);</span><br><span class=\"line\">        v.modCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// this shouldn't happen, since we are Cloneable</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InternalError();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>程序中获取到了一个ArrayList的实例arrayList，我们完全可以通过调用arrayList.clone()方法获取到原ArrayList的拷贝。</p>\n<h2 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4. 参考\"></a>4. 参考</h2><p><code>https://www.cnblogs.com/xrq730/p/4905907.html</code></p>"},{"title":"Java设计模式(五)---适配器模式","abbrlink":"f444ac9","date":"2018-10-15T14:00:00.000Z","_content":"\n本文主要介绍了Java23种设计模式之适配器模式，并结合实例描述了适配器模式的具体实现和优缺点分析。\n\n<!--more-->\n\n> **Java设计模式系列文章目录**\n>\n> [Java设计模式(一)---单例模式](https://www.lixueduan.com/posts/53093.html)\n>\n> [Java设计模式(二)---工厂模式](https://www.lixueduan.com/posts/34710.html)\n>\n> [Java设计模式(三)---建造者模式](https://www.lixueduan.com/posts/52453.html)\n>\n> [Java设计模式(四)---原型模式](https://www.lixueduan.com/posts/24b6c0e4.html)\n>\n> [Java设计模式(五)---适配器模式](https://www.lixueduan.com/posts/f444ac9.html)\n>\n> [Java设计模式(六)---装饰者模式](https://www.lixueduan.com/posts/75903408.html)\n>\n> [Java设计模式(七)---代理模式](https://www.lixueduan.com/posts/ae2a93bd.html)\n>\n> [Java设计模式(八)---外观模式](https://www.lixueduan.com/posts/22a51705.html)\n>\n> [Java设计模式(九)---享元模式](https://www.lixueduan.com/posts/34e634e7.html)\n>\n> [Java设计模式(十)---策略模式](https://www.lixueduan.com/posts/a7982bdc.html)\n>\n> [Java设计模式(十一)---模板方法模式](https://www.lixueduan.com/posts/57ae709c.html)\n>\n> [Java设计模式(十二)---观察者模式](https://www.lixueduan.com/posts/48bcf013.html)\n>\n> [Java设计模式(十三)---组合模式](https://www.lixueduan.com/posts/a340063f.html)\n>\n> ........\n>\n> Demo下载--> [Github](https://github.com/illusorycloud/design-pattern)\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 简介\n\n> 适配器模式将一个接口转换成客户希望的另外一个接口。它使得原来由于接口不兼容而不能在一起工作的那些类可以一起工作。\n>\n> **把一个类的接口变换成客户端所期待的另一种接口**\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/five-adapter.jpeg)\n\n用到的对象\n\n* **Target**\n   ---定义Client使用的与特定领域相关的接口。\n* **Client**\n   ---与符合Target接口的对象协同。\n* **Adaptee**\n   ---定义一个已经存在的接口，这个接口需要适配。\n* **Adapter**\n   ---对Adaptee的接口与Target接口进行适配\n\n## 2. 类适配器模式\n\n**原理**：\n\n> 通过继承来实现适配器功能。\n\n当我们要访问的类A中没有我们想要的方法 ，却在另一个接口B中发现了合适的方法，但我们又不能改变类A。\n\n在这种情况下，我们可以定义一个适配器p来进行中转，这个适配器p要继承我们访问类A，这样我们就能继续访问当前类A中的方法（虽然它目前不是我们的菜），然后再实现接口B，这样我们可以在适配器P中访问接口B的方法了。\n\n```java\n/**\n * 目标类\n *\n * @author illusoryCloud\n */\npublic interface Target {\n    void Target();\n}\n\n/**\n * 被适配类\n * 只有Adaptee方法 但是目标接口要Target方法\n *\n * @author illusoryCloud\n */\npublic class Adaptee {\n    public void Adaptee() {\n        System.out.println(\"这是现有的方法\");\n    }\n}\n\n/**\n * 适配器类\n * 继承Adaptee类 使得此类保留了Adaptee方法\n * 实现Target接口 使得此类同时也拥有Target方法\n * 适配完成\n *\n * @author illusoryCloud\n */\npublic class Adapter extends Adaptee implements Target {\n    @Override\n    public void Target() {\n        System.out.println(\"这是目标方法\");\n    }\n}\n\n/**\n * 类适配器模式 测试类\n *\n * @author illusoryCloud\n */\npublic class ClassAdapterTest {\n    @Test\n    public void classAdapterTest() {\n        //Target类型的对象 同时拥有Target()和Adaptee()方法\n        Target target = new Adapter();\n        //这是目标方法\n        target.Target();\n        //这是现有的方法\n        ((Adapter) target).Adaptee();\n    }\n}\n\n```\n\n## 3. 对象适配器模式\n\n原理\n\n> 基本思路和类的适配器模式相同，只是将 Adapter 类作修改，这次不继承 Adaptee 类，而是持有 Adaptee 类的实例，以达到解决兼容性的问题。\n\n```java\n//-------Target和Adaptee与上面一样----------\n\n/**\n * 适配器类 持有Adaptee对象来代替继承Adaptee类\n * 传入Adaptee对象 使得此类同样拥有Adaptee方法\n * 实现Target接口 使得此类同时也拥有Target方法\n * 适配完成\n *\n * @author illusoryCloud\n */\npublic class Adapter implements Target {\n    private Adaptee adaptee;\n\n    public Adapter(Adaptee adaptee) {\n        this.adaptee = adaptee;\n    }\n\n    @Override\n    public void Target() {\n        System.out.println(\"这是目标方法\");\n    }\n\n    public void Adaptee() {\n        adaptee.Adaptee();\n    }\n}\n\n/**\n * 对象适配器模式 测试类\n *\n * @author illusoryCloud\n */\npublic class ObjectAdapterTest {\n    @Test\n    public void objectAdapterTest() {\n        Target target = new Adapter(new Adaptee());\n        //这是目标方法\n        target.Target();\n        //这是现有的方法\n        ((Adapter) target).Adaptee();\n\n    }\n}\n```\n\n## 4. 总结\n\n**适配器模式优点**\n\n1、**有更好的复用性**。系统需要使用现有的类，但此类接口不符合系统需要，通过适配器模式让这些功能得到很好的复用\n\n2、**有更好的扩展性**。实现适配器，可以调用自己开发的功能\n\n**缺点**\n\n过多使用适配器会使得系统非常凌乱，明明调用的是A接口，内部却被适配成了B接口。因此除非必要，不推荐使用适配器，而是作为一种补救措施，条件允许的情况下推荐直接对系统重构。\n\n**适配器模式在JDK中的应用**\n\n`InputStreamReader/OutputStreanWriter`\n\n创建InputStreamReader对象的时候必须在构造函数中传入一个InputStream实例，然后InputStreamReader的作用就是将InputStream适配到Reader。很显然，适配器就是InputStreamReader，源角色就是InputStream代表的实例对象，目标接口就是Reader类。\n\n## 5. 参考\n\n`https://www.cnblogs.com/xrq730/p/4906487.html`","source":"_posts/design_pattern/five-adapter.md","raw":"---\ntitle: Java设计模式(五)---适配器模式\ntags:\n  - 设计模式\ncategories:\n  - 设计模式\nabbrlink: f444ac9\ndate: 2018-10-15 22:00:00\n---\n\n本文主要介绍了Java23种设计模式之适配器模式，并结合实例描述了适配器模式的具体实现和优缺点分析。\n\n<!--more-->\n\n> **Java设计模式系列文章目录**\n>\n> [Java设计模式(一)---单例模式](https://www.lixueduan.com/posts/53093.html)\n>\n> [Java设计模式(二)---工厂模式](https://www.lixueduan.com/posts/34710.html)\n>\n> [Java设计模式(三)---建造者模式](https://www.lixueduan.com/posts/52453.html)\n>\n> [Java设计模式(四)---原型模式](https://www.lixueduan.com/posts/24b6c0e4.html)\n>\n> [Java设计模式(五)---适配器模式](https://www.lixueduan.com/posts/f444ac9.html)\n>\n> [Java设计模式(六)---装饰者模式](https://www.lixueduan.com/posts/75903408.html)\n>\n> [Java设计模式(七)---代理模式](https://www.lixueduan.com/posts/ae2a93bd.html)\n>\n> [Java设计模式(八)---外观模式](https://www.lixueduan.com/posts/22a51705.html)\n>\n> [Java设计模式(九)---享元模式](https://www.lixueduan.com/posts/34e634e7.html)\n>\n> [Java设计模式(十)---策略模式](https://www.lixueduan.com/posts/a7982bdc.html)\n>\n> [Java设计模式(十一)---模板方法模式](https://www.lixueduan.com/posts/57ae709c.html)\n>\n> [Java设计模式(十二)---观察者模式](https://www.lixueduan.com/posts/48bcf013.html)\n>\n> [Java设计模式(十三)---组合模式](https://www.lixueduan.com/posts/a340063f.html)\n>\n> ........\n>\n> Demo下载--> [Github](https://github.com/illusorycloud/design-pattern)\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 简介\n\n> 适配器模式将一个接口转换成客户希望的另外一个接口。它使得原来由于接口不兼容而不能在一起工作的那些类可以一起工作。\n>\n> **把一个类的接口变换成客户端所期待的另一种接口**\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/five-adapter.jpeg)\n\n用到的对象\n\n* **Target**\n   ---定义Client使用的与特定领域相关的接口。\n* **Client**\n   ---与符合Target接口的对象协同。\n* **Adaptee**\n   ---定义一个已经存在的接口，这个接口需要适配。\n* **Adapter**\n   ---对Adaptee的接口与Target接口进行适配\n\n## 2. 类适配器模式\n\n**原理**：\n\n> 通过继承来实现适配器功能。\n\n当我们要访问的类A中没有我们想要的方法 ，却在另一个接口B中发现了合适的方法，但我们又不能改变类A。\n\n在这种情况下，我们可以定义一个适配器p来进行中转，这个适配器p要继承我们访问类A，这样我们就能继续访问当前类A中的方法（虽然它目前不是我们的菜），然后再实现接口B，这样我们可以在适配器P中访问接口B的方法了。\n\n```java\n/**\n * 目标类\n *\n * @author illusoryCloud\n */\npublic interface Target {\n    void Target();\n}\n\n/**\n * 被适配类\n * 只有Adaptee方法 但是目标接口要Target方法\n *\n * @author illusoryCloud\n */\npublic class Adaptee {\n    public void Adaptee() {\n        System.out.println(\"这是现有的方法\");\n    }\n}\n\n/**\n * 适配器类\n * 继承Adaptee类 使得此类保留了Adaptee方法\n * 实现Target接口 使得此类同时也拥有Target方法\n * 适配完成\n *\n * @author illusoryCloud\n */\npublic class Adapter extends Adaptee implements Target {\n    @Override\n    public void Target() {\n        System.out.println(\"这是目标方法\");\n    }\n}\n\n/**\n * 类适配器模式 测试类\n *\n * @author illusoryCloud\n */\npublic class ClassAdapterTest {\n    @Test\n    public void classAdapterTest() {\n        //Target类型的对象 同时拥有Target()和Adaptee()方法\n        Target target = new Adapter();\n        //这是目标方法\n        target.Target();\n        //这是现有的方法\n        ((Adapter) target).Adaptee();\n    }\n}\n\n```\n\n## 3. 对象适配器模式\n\n原理\n\n> 基本思路和类的适配器模式相同，只是将 Adapter 类作修改，这次不继承 Adaptee 类，而是持有 Adaptee 类的实例，以达到解决兼容性的问题。\n\n```java\n//-------Target和Adaptee与上面一样----------\n\n/**\n * 适配器类 持有Adaptee对象来代替继承Adaptee类\n * 传入Adaptee对象 使得此类同样拥有Adaptee方法\n * 实现Target接口 使得此类同时也拥有Target方法\n * 适配完成\n *\n * @author illusoryCloud\n */\npublic class Adapter implements Target {\n    private Adaptee adaptee;\n\n    public Adapter(Adaptee adaptee) {\n        this.adaptee = adaptee;\n    }\n\n    @Override\n    public void Target() {\n        System.out.println(\"这是目标方法\");\n    }\n\n    public void Adaptee() {\n        adaptee.Adaptee();\n    }\n}\n\n/**\n * 对象适配器模式 测试类\n *\n * @author illusoryCloud\n */\npublic class ObjectAdapterTest {\n    @Test\n    public void objectAdapterTest() {\n        Target target = new Adapter(new Adaptee());\n        //这是目标方法\n        target.Target();\n        //这是现有的方法\n        ((Adapter) target).Adaptee();\n\n    }\n}\n```\n\n## 4. 总结\n\n**适配器模式优点**\n\n1、**有更好的复用性**。系统需要使用现有的类，但此类接口不符合系统需要，通过适配器模式让这些功能得到很好的复用\n\n2、**有更好的扩展性**。实现适配器，可以调用自己开发的功能\n\n**缺点**\n\n过多使用适配器会使得系统非常凌乱，明明调用的是A接口，内部却被适配成了B接口。因此除非必要，不推荐使用适配器，而是作为一种补救措施，条件允许的情况下推荐直接对系统重构。\n\n**适配器模式在JDK中的应用**\n\n`InputStreamReader/OutputStreanWriter`\n\n创建InputStreamReader对象的时候必须在构造函数中传入一个InputStream实例，然后InputStreamReader的作用就是将InputStream适配到Reader。很显然，适配器就是InputStreamReader，源角色就是InputStream代表的实例对象，目标接口就是Reader类。\n\n## 5. 参考\n\n`https://www.cnblogs.com/xrq730/p/4906487.html`","slug":"design_pattern/five-adapter","published":1,"updated":"2019-03-04T15:34:34.933Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv43900090ww433lc91s9","content":"<p>本文主要介绍了Java23种设计模式之适配器模式，并结合实例描述了适配器模式的具体实现和优缺点分析。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p><strong>Java设计模式系列文章目录</strong></p>\n<p><a href=\"https://www.lixueduan.com/posts/53093.html\">Java设计模式(一)—单例模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34710.html\">Java设计模式(二)—工厂模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/52453.html\">Java设计模式(三)—建造者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/24b6c0e4.html\">Java设计模式(四)—原型模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/f444ac9.html\">Java设计模式(五)—适配器模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/75903408.html\">Java设计模式(六)—装饰者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/ae2a93bd.html\">Java设计模式(七)—代理模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/22a51705.html\">Java设计模式(八)—外观模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34e634e7.html\">Java设计模式(九)—享元模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a7982bdc.html\">Java设计模式(十)—策略模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/57ae709c.html\">Java设计模式(十一)—模板方法模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/48bcf013.html\">Java设计模式(十二)—观察者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a340063f.html\">Java设计模式(十三)—组合模式</a></p>\n<p>……..</p>\n<p>Demo下载–&gt; <a href=\"https://github.com/illusorycloud/design-pattern\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><blockquote>\n<p>适配器模式将一个接口转换成客户希望的另外一个接口。它使得原来由于接口不兼容而不能在一起工作的那些类可以一起工作。</p>\n<p><strong>把一个类的接口变换成客户端所期待的另一种接口</strong></p>\n</blockquote>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/five-adapter.jpeg\" alt=\"\"></p>\n<p>用到的对象</p>\n<ul>\n<li><strong>Target</strong><br> —定义Client使用的与特定领域相关的接口。</li>\n<li><strong>Client</strong><br> —与符合Target接口的对象协同。</li>\n<li><strong>Adaptee</strong><br> —定义一个已经存在的接口，这个接口需要适配。</li>\n<li><strong>Adapter</strong><br> —对Adaptee的接口与Target接口进行适配</li>\n</ul>\n<h2 id=\"2-类适配器模式\"><a href=\"#2-类适配器模式\" class=\"headerlink\" title=\"2. 类适配器模式\"></a>2. 类适配器模式</h2><p><strong>原理</strong>：</p>\n<blockquote>\n<p>通过继承来实现适配器功能。</p>\n</blockquote>\n<p>当我们要访问的类A中没有我们想要的方法 ，却在另一个接口B中发现了合适的方法，但我们又不能改变类A。</p>\n<p>在这种情况下，我们可以定义一个适配器p来进行中转，这个适配器p要继承我们访问类A，这样我们就能继续访问当前类A中的方法（虽然它目前不是我们的菜），然后再实现接口B，这样我们可以在适配器P中访问接口B的方法了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 目标类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Target</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Target</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 被适配类</span></span><br><span class=\"line\"><span class=\"comment\"> * 只有Adaptee方法 但是目标接口要Target方法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adaptee</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Adaptee</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"这是现有的方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 适配器类</span></span><br><span class=\"line\"><span class=\"comment\"> * 继承Adaptee类 使得此类保留了Adaptee方法</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现Target接口 使得此类同时也拥有Target方法</span></span><br><span class=\"line\"><span class=\"comment\"> * 适配完成</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Adaptee</span> <span class=\"keyword\">implements</span> <span class=\"title\">Target</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Target</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"这是目标方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 类适配器模式 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassAdapterTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">classAdapterTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//Target类型的对象 同时拥有Target()和Adaptee()方法</span></span><br><span class=\"line\">        Target target = <span class=\"keyword\">new</span> Adapter();</span><br><span class=\"line\">        <span class=\"comment\">//这是目标方法</span></span><br><span class=\"line\">        target.Target();</span><br><span class=\"line\">        <span class=\"comment\">//这是现有的方法</span></span><br><span class=\"line\">        ((Adapter) target).Adaptee();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-对象适配器模式\"><a href=\"#3-对象适配器模式\" class=\"headerlink\" title=\"3. 对象适配器模式\"></a>3. 对象适配器模式</h2><p>原理</p>\n<blockquote>\n<p>基本思路和类的适配器模式相同，只是将 Adapter 类作修改，这次不继承 Adaptee 类，而是持有 Adaptee 类的实例，以达到解决兼容性的问题。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//-------Target和Adaptee与上面一样----------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 适配器类 持有Adaptee对象来代替继承Adaptee类</span></span><br><span class=\"line\"><span class=\"comment\"> * 传入Adaptee对象 使得此类同样拥有Adaptee方法</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现Target接口 使得此类同时也拥有Target方法</span></span><br><span class=\"line\"><span class=\"comment\"> * 适配完成</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Target</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Adaptee adaptee;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Adapter</span><span class=\"params\">(Adaptee adaptee)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.adaptee = adaptee;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Target</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"这是目标方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Adaptee</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        adaptee.Adaptee();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 对象适配器模式 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObjectAdapterTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">objectAdapterTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Target target = <span class=\"keyword\">new</span> Adapter(<span class=\"keyword\">new</span> Adaptee());</span><br><span class=\"line\">        <span class=\"comment\">//这是目标方法</span></span><br><span class=\"line\">        target.Target();</span><br><span class=\"line\">        <span class=\"comment\">//这是现有的方法</span></span><br><span class=\"line\">        ((Adapter) target).Adaptee();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h2><p><strong>适配器模式优点</strong></p>\n<p>1、<strong>有更好的复用性</strong>。系统需要使用现有的类，但此类接口不符合系统需要，通过适配器模式让这些功能得到很好的复用</p>\n<p>2、<strong>有更好的扩展性</strong>。实现适配器，可以调用自己开发的功能</p>\n<p><strong>缺点</strong></p>\n<p>过多使用适配器会使得系统非常凌乱，明明调用的是A接口，内部却被适配成了B接口。因此除非必要，不推荐使用适配器，而是作为一种补救措施，条件允许的情况下推荐直接对系统重构。</p>\n<p><strong>适配器模式在JDK中的应用</strong></p>\n<p><code>InputStreamReader/OutputStreanWriter</code></p>\n<p>创建InputStreamReader对象的时候必须在构造函数中传入一个InputStream实例，然后InputStreamReader的作用就是将InputStream适配到Reader。很显然，适配器就是InputStreamReader，源角色就是InputStream代表的实例对象，目标接口就是Reader类。</p>\n<h2 id=\"5-参考\"><a href=\"#5-参考\" class=\"headerlink\" title=\"5. 参考\"></a>5. 参考</h2><p><code>https://www.cnblogs.com/xrq730/p/4906487.html</code></p>\n","site":{"data":{}},"excerpt":"<p>本文主要介绍了Java23种设计模式之适配器模式，并结合实例描述了适配器模式的具体实现和优缺点分析。</p>","more":"<blockquote>\n<p><strong>Java设计模式系列文章目录</strong></p>\n<p><a href=\"https://www.lixueduan.com/posts/53093.html\">Java设计模式(一)—单例模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34710.html\">Java设计模式(二)—工厂模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/52453.html\">Java设计模式(三)—建造者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/24b6c0e4.html\">Java设计模式(四)—原型模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/f444ac9.html\">Java设计模式(五)—适配器模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/75903408.html\">Java设计模式(六)—装饰者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/ae2a93bd.html\">Java设计模式(七)—代理模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/22a51705.html\">Java设计模式(八)—外观模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34e634e7.html\">Java设计模式(九)—享元模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a7982bdc.html\">Java设计模式(十)—策略模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/57ae709c.html\">Java设计模式(十一)—模板方法模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/48bcf013.html\">Java设计模式(十二)—观察者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a340063f.html\">Java设计模式(十三)—组合模式</a></p>\n<p>……..</p>\n<p>Demo下载–&gt; <a href=\"https://github.com/illusorycloud/design-pattern\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><blockquote>\n<p>适配器模式将一个接口转换成客户希望的另外一个接口。它使得原来由于接口不兼容而不能在一起工作的那些类可以一起工作。</p>\n<p><strong>把一个类的接口变换成客户端所期待的另一种接口</strong></p>\n</blockquote>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/five-adapter.jpeg\" alt=\"\"></p>\n<p>用到的对象</p>\n<ul>\n<li><strong>Target</strong><br> —定义Client使用的与特定领域相关的接口。</li>\n<li><strong>Client</strong><br> —与符合Target接口的对象协同。</li>\n<li><strong>Adaptee</strong><br> —定义一个已经存在的接口，这个接口需要适配。</li>\n<li><strong>Adapter</strong><br> —对Adaptee的接口与Target接口进行适配</li>\n</ul>\n<h2 id=\"2-类适配器模式\"><a href=\"#2-类适配器模式\" class=\"headerlink\" title=\"2. 类适配器模式\"></a>2. 类适配器模式</h2><p><strong>原理</strong>：</p>\n<blockquote>\n<p>通过继承来实现适配器功能。</p>\n</blockquote>\n<p>当我们要访问的类A中没有我们想要的方法 ，却在另一个接口B中发现了合适的方法，但我们又不能改变类A。</p>\n<p>在这种情况下，我们可以定义一个适配器p来进行中转，这个适配器p要继承我们访问类A，这样我们就能继续访问当前类A中的方法（虽然它目前不是我们的菜），然后再实现接口B，这样我们可以在适配器P中访问接口B的方法了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 目标类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Target</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Target</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 被适配类</span></span><br><span class=\"line\"><span class=\"comment\"> * 只有Adaptee方法 但是目标接口要Target方法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adaptee</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Adaptee</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"这是现有的方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 适配器类</span></span><br><span class=\"line\"><span class=\"comment\"> * 继承Adaptee类 使得此类保留了Adaptee方法</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现Target接口 使得此类同时也拥有Target方法</span></span><br><span class=\"line\"><span class=\"comment\"> * 适配完成</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Adaptee</span> <span class=\"keyword\">implements</span> <span class=\"title\">Target</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Target</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"这是目标方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 类适配器模式 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassAdapterTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">classAdapterTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//Target类型的对象 同时拥有Target()和Adaptee()方法</span></span><br><span class=\"line\">        Target target = <span class=\"keyword\">new</span> Adapter();</span><br><span class=\"line\">        <span class=\"comment\">//这是目标方法</span></span><br><span class=\"line\">        target.Target();</span><br><span class=\"line\">        <span class=\"comment\">//这是现有的方法</span></span><br><span class=\"line\">        ((Adapter) target).Adaptee();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-对象适配器模式\"><a href=\"#3-对象适配器模式\" class=\"headerlink\" title=\"3. 对象适配器模式\"></a>3. 对象适配器模式</h2><p>原理</p>\n<blockquote>\n<p>基本思路和类的适配器模式相同，只是将 Adapter 类作修改，这次不继承 Adaptee 类，而是持有 Adaptee 类的实例，以达到解决兼容性的问题。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//-------Target和Adaptee与上面一样----------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 适配器类 持有Adaptee对象来代替继承Adaptee类</span></span><br><span class=\"line\"><span class=\"comment\"> * 传入Adaptee对象 使得此类同样拥有Adaptee方法</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现Target接口 使得此类同时也拥有Target方法</span></span><br><span class=\"line\"><span class=\"comment\"> * 适配完成</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Target</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Adaptee adaptee;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Adapter</span><span class=\"params\">(Adaptee adaptee)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.adaptee = adaptee;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Target</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"这是目标方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Adaptee</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        adaptee.Adaptee();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 对象适配器模式 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObjectAdapterTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">objectAdapterTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Target target = <span class=\"keyword\">new</span> Adapter(<span class=\"keyword\">new</span> Adaptee());</span><br><span class=\"line\">        <span class=\"comment\">//这是目标方法</span></span><br><span class=\"line\">        target.Target();</span><br><span class=\"line\">        <span class=\"comment\">//这是现有的方法</span></span><br><span class=\"line\">        ((Adapter) target).Adaptee();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h2><p><strong>适配器模式优点</strong></p>\n<p>1、<strong>有更好的复用性</strong>。系统需要使用现有的类，但此类接口不符合系统需要，通过适配器模式让这些功能得到很好的复用</p>\n<p>2、<strong>有更好的扩展性</strong>。实现适配器，可以调用自己开发的功能</p>\n<p><strong>缺点</strong></p>\n<p>过多使用适配器会使得系统非常凌乱，明明调用的是A接口，内部却被适配成了B接口。因此除非必要，不推荐使用适配器，而是作为一种补救措施，条件允许的情况下推荐直接对系统重构。</p>\n<p><strong>适配器模式在JDK中的应用</strong></p>\n<p><code>InputStreamReader/OutputStreanWriter</code></p>\n<p>创建InputStreamReader对象的时候必须在构造函数中传入一个InputStream实例，然后InputStreamReader的作用就是将InputStream适配到Reader。很显然，适配器就是InputStreamReader，源角色就是InputStream代表的实例对象，目标接口就是Reader类。</p>\n<h2 id=\"5-参考\"><a href=\"#5-参考\" class=\"headerlink\" title=\"5. 参考\"></a>5. 参考</h2><p><code>https://www.cnblogs.com/xrq730/p/4906487.html</code></p>"},{"title":"Java设计模式(六)---装饰者模式","abbrlink":"75903408","date":"2018-10-16T14:00:00.000Z","_content":"\n本文主要介绍了Java23种设计模式中的装饰者模式，并结合实例描述了装饰者模式的具体实现和优缺点分析。\n\n<!--more-->\n\n> **Java设计模式系列文章目录**\n>\n> [Java设计模式(一)---单例模式](https://www.lixueduan.com/posts/53093.html)\n>\n> [Java设计模式(二)---工厂模式](https://www.lixueduan.com/posts/34710.html)\n>\n> [Java设计模式(三)---建造者模式](https://www.lixueduan.com/posts/52453.html)\n>\n> [Java设计模式(四)---原型模式](https://www.lixueduan.com/posts/24b6c0e4.html)\n>\n> [Java设计模式(五)---适配器模式](https://www.lixueduan.com/posts/f444ac9.html)\n>\n> [Java设计模式(六)---装饰者模式](https://www.lixueduan.com/posts/75903408.html)\n>\n> [Java设计模式(七)---代理模式](https://www.lixueduan.com/posts/ae2a93bd.html)\n>\n> [Java设计模式(八)---外观模式](https://www.lixueduan.com/posts/22a51705.html)\n>\n> [Java设计模式(九)---享元模式](https://www.lixueduan.com/posts/34e634e7.html)\n>\n> [Java设计模式(十)---策略模式](https://www.lixueduan.com/posts/a7982bdc.html)\n>\n> [Java设计模式(十一)---模板方法模式](https://www.lixueduan.com/posts/57ae709c.html)\n>\n> [Java设计模式(十二)---观察者模式](https://www.lixueduan.com/posts/48bcf013.html)\n>\n> [Java设计模式(十三)---组合模式](https://www.lixueduan.com/posts/a340063f.html)\n>\n> ........\n>\n> Demo下载--> [Github](https://github.com/illusorycloud/design-pattern)\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 简介\n\n在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。\n\n它是通过创建一个包装对象，也就是装饰来包裹真实的对象。是继承关系的一个替代方案。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/six-decorator.png)\n\n**装饰模式由4种角色组成：**\n（1）抽象构件（Component）角色：给出一个抽象接口，以规范准备接收附加职责的对象。\n（2）具体构件（Concrete Component）角色：定义一个将要接收附加职责的类。\n（3）装饰（Decorator）角色：持有一个构件（Component）对象的实例，并实现一个与抽象构件接口一致的接口，从外类来扩展Component类的功能，但对于Component类来说，是无需知道Decorato的存在的。\n（4）具体装饰（Concrete Decorator）角色：负责给构件对象添加上附加的职责。\n\n## 2. 具体实现\n\n```java\n/**\n * 抽象构件角色\n * 人类\n *\n * @author illusoryCloud\n */\npublic interface Human {\n    void run();\n}\n\n/**\n * 具体构件角色\n * 男人\n *\n * @author illusoryCloud\n */\npublic class Man implements Human {\n    @Override\n    public void run() {\n        System.out.println(\"男人跑得很快\");\n    }\n}\n/**\n * 抽象装饰角色\n *\n * @author illusoryCloud\n */\npublic class Decorator implements Human {\n    /**\n     * 持有一个具体构件的引用\n     */\n    private Human human;\n\n    public Decorator(Human human) {\n        this.human = human;\n    }\n\n    @Override\n    public void run() {\n        human.run();\n    }\n}\n\n/**\n * 具体装饰角色\n * 飞人\n *\n * @author illusoryCloud\n */\npublic class FlyMan extends Decorator {\n    public FlyMan(Human human) {\n        super(human);\n    }\n\n    @Override\n    public void run() {\n        super.run();\n        this.fly();\n    }\n\n    /**\n     * 扩展功能\n     */\n    private void fly() {\n        System.out.println(\"变成飞人了，跑得更快了~\");\n    }\n}\n\n/**\n * 具体装饰角色\n * 强壮的男人\n *\n * @author illusoryCloud\n */\npublic class StrongMan extends Decorator {\n\n    public StrongMan(Human human) {\n        super(human);\n    }\n\n    @Override\n    public void run() {\n        super.run();\n        this.strong();\n    }\n\n    public void strong() {\n        System.out.println(\"变得强壮了，耐力提升了~\");\n    }\n}\n/**\n * 装饰者模式 测试类\n *\n * @author illusoryCloud\n */\npublic class DecoratorTest {\n    @Test\n    public void decoratorTest() {\n        //普通对象\n        Human man = new Man();\n        man.run();\n        System.out.println(\"--------------------\");\n        //装饰后的对象\n        Human flyMan = new FlyMan(man);\n        flyMan.run();\n        System.out.println(\"--------------------\");\n        //装饰后的对象\n        Human strongMan = new StrongMan(man);\n        strongMan.run();\n        System.out.println(\"--------------------\");\n        //装饰后的对象再次装饰\n        Human strongFlyMan = new StrongMan(flyMan);\n        strongFlyMan.run();\n\n    }\n\n}\n\n  //输出\n男人在跑\n--------------------\n男人在跑\n变成飞人了，速度加快了~\n--------------------\n男人在跑\n变得强壮了，耐力提升了~\n--------------------\n男人在跑\n变成飞人了，速度加快了~\n变得强壮了，耐力提升了~\n```\n\n## 3. 总结\n\n**优点**\n\n* 1.**装饰者模式可以提供比继承更多的灵活性**。装饰器模式允许系统动态决定贴上一个需要的装饰，或者除掉一个不需要的装饰。继承关系是不同，继承关系是静态的，它在系统运行前就决定了。\n\n* 2.通过使用不同的具体装饰器以及这些装饰类的排列组合，设计师可以创造出很多不同的行为组合。\n\n**缺点**\n\n由于使用装饰器模式，可以比使用继承关系需要较少数目的类。使用较少的类，当然使设计比较易于进行。但是另一方面，由于使用装饰器模式会产生比使用继承关系更多的对象，更多的对象会使得查错变得困难，特别是这些对象看上去都很像。\n\n**装饰者模式和代理模式对比**\n\n**装饰者模式主要对功能进行扩展，代理模式主要是添加一些无关业务的功能，比如日志，验证等。**\n\n**使用代理模式,代理和真实对象之间的关系在编译时就已经确定了,而装饰器者能够在运行时递归的被构造**.(代理模式会在代理类中创建真实处理类的一个实例,所以可以确定代理和真实对象的关系,而装饰器模式是将原始对象作为一个参数传给装饰器类)\n\n**装饰模式：以对客户端透明的方式扩展对象的功能，是继承关系的一个替代方案；**\n**代理模式：给一个对象提供一个代理对象，并有代理对象来控制对原有对象的引用；**\n\n## 4. 装饰者模式在Java中的应用\n\n装饰器模式在Java体系中的经典应用是Java I/O\n\n**抽象构件角色**:`InputStream`\n\n**具体构建角色**:`ByteArrayInputStream`、`FileInputStream`、`ObjectInputStream`、`PipedInputStream`等\n\n**装饰角色**；`FilterInputStream` -->实现了`InputStream`内的所有抽象方法并且持有一个`InputStream`的引用\n\n**具体装饰角色**:`InflaterInputStream`、`BufferedInputStream`、`DataInputStream`等\n\n## 5. 参考\n\n`https://www.cnblogs.com/xrq730/p/4908940.html`\n\n\n\n","source":"_posts/design_pattern/six-decorator.md","raw":"---\ntitle: Java设计模式(六)---装饰者模式\ntags:\n  - 设计模式\ncategories:\n  - 设计模式\nabbrlink: '75903408'\ndate: 2018-10-16 22:00:00\n---\n\n本文主要介绍了Java23种设计模式中的装饰者模式，并结合实例描述了装饰者模式的具体实现和优缺点分析。\n\n<!--more-->\n\n> **Java设计模式系列文章目录**\n>\n> [Java设计模式(一)---单例模式](https://www.lixueduan.com/posts/53093.html)\n>\n> [Java设计模式(二)---工厂模式](https://www.lixueduan.com/posts/34710.html)\n>\n> [Java设计模式(三)---建造者模式](https://www.lixueduan.com/posts/52453.html)\n>\n> [Java设计模式(四)---原型模式](https://www.lixueduan.com/posts/24b6c0e4.html)\n>\n> [Java设计模式(五)---适配器模式](https://www.lixueduan.com/posts/f444ac9.html)\n>\n> [Java设计模式(六)---装饰者模式](https://www.lixueduan.com/posts/75903408.html)\n>\n> [Java设计模式(七)---代理模式](https://www.lixueduan.com/posts/ae2a93bd.html)\n>\n> [Java设计模式(八)---外观模式](https://www.lixueduan.com/posts/22a51705.html)\n>\n> [Java设计模式(九)---享元模式](https://www.lixueduan.com/posts/34e634e7.html)\n>\n> [Java设计模式(十)---策略模式](https://www.lixueduan.com/posts/a7982bdc.html)\n>\n> [Java设计模式(十一)---模板方法模式](https://www.lixueduan.com/posts/57ae709c.html)\n>\n> [Java设计模式(十二)---观察者模式](https://www.lixueduan.com/posts/48bcf013.html)\n>\n> [Java设计模式(十三)---组合模式](https://www.lixueduan.com/posts/a340063f.html)\n>\n> ........\n>\n> Demo下载--> [Github](https://github.com/illusorycloud/design-pattern)\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 简介\n\n在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。\n\n它是通过创建一个包装对象，也就是装饰来包裹真实的对象。是继承关系的一个替代方案。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/six-decorator.png)\n\n**装饰模式由4种角色组成：**\n（1）抽象构件（Component）角色：给出一个抽象接口，以规范准备接收附加职责的对象。\n（2）具体构件（Concrete Component）角色：定义一个将要接收附加职责的类。\n（3）装饰（Decorator）角色：持有一个构件（Component）对象的实例，并实现一个与抽象构件接口一致的接口，从外类来扩展Component类的功能，但对于Component类来说，是无需知道Decorato的存在的。\n（4）具体装饰（Concrete Decorator）角色：负责给构件对象添加上附加的职责。\n\n## 2. 具体实现\n\n```java\n/**\n * 抽象构件角色\n * 人类\n *\n * @author illusoryCloud\n */\npublic interface Human {\n    void run();\n}\n\n/**\n * 具体构件角色\n * 男人\n *\n * @author illusoryCloud\n */\npublic class Man implements Human {\n    @Override\n    public void run() {\n        System.out.println(\"男人跑得很快\");\n    }\n}\n/**\n * 抽象装饰角色\n *\n * @author illusoryCloud\n */\npublic class Decorator implements Human {\n    /**\n     * 持有一个具体构件的引用\n     */\n    private Human human;\n\n    public Decorator(Human human) {\n        this.human = human;\n    }\n\n    @Override\n    public void run() {\n        human.run();\n    }\n}\n\n/**\n * 具体装饰角色\n * 飞人\n *\n * @author illusoryCloud\n */\npublic class FlyMan extends Decorator {\n    public FlyMan(Human human) {\n        super(human);\n    }\n\n    @Override\n    public void run() {\n        super.run();\n        this.fly();\n    }\n\n    /**\n     * 扩展功能\n     */\n    private void fly() {\n        System.out.println(\"变成飞人了，跑得更快了~\");\n    }\n}\n\n/**\n * 具体装饰角色\n * 强壮的男人\n *\n * @author illusoryCloud\n */\npublic class StrongMan extends Decorator {\n\n    public StrongMan(Human human) {\n        super(human);\n    }\n\n    @Override\n    public void run() {\n        super.run();\n        this.strong();\n    }\n\n    public void strong() {\n        System.out.println(\"变得强壮了，耐力提升了~\");\n    }\n}\n/**\n * 装饰者模式 测试类\n *\n * @author illusoryCloud\n */\npublic class DecoratorTest {\n    @Test\n    public void decoratorTest() {\n        //普通对象\n        Human man = new Man();\n        man.run();\n        System.out.println(\"--------------------\");\n        //装饰后的对象\n        Human flyMan = new FlyMan(man);\n        flyMan.run();\n        System.out.println(\"--------------------\");\n        //装饰后的对象\n        Human strongMan = new StrongMan(man);\n        strongMan.run();\n        System.out.println(\"--------------------\");\n        //装饰后的对象再次装饰\n        Human strongFlyMan = new StrongMan(flyMan);\n        strongFlyMan.run();\n\n    }\n\n}\n\n  //输出\n男人在跑\n--------------------\n男人在跑\n变成飞人了，速度加快了~\n--------------------\n男人在跑\n变得强壮了，耐力提升了~\n--------------------\n男人在跑\n变成飞人了，速度加快了~\n变得强壮了，耐力提升了~\n```\n\n## 3. 总结\n\n**优点**\n\n* 1.**装饰者模式可以提供比继承更多的灵活性**。装饰器模式允许系统动态决定贴上一个需要的装饰，或者除掉一个不需要的装饰。继承关系是不同，继承关系是静态的，它在系统运行前就决定了。\n\n* 2.通过使用不同的具体装饰器以及这些装饰类的排列组合，设计师可以创造出很多不同的行为组合。\n\n**缺点**\n\n由于使用装饰器模式，可以比使用继承关系需要较少数目的类。使用较少的类，当然使设计比较易于进行。但是另一方面，由于使用装饰器模式会产生比使用继承关系更多的对象，更多的对象会使得查错变得困难，特别是这些对象看上去都很像。\n\n**装饰者模式和代理模式对比**\n\n**装饰者模式主要对功能进行扩展，代理模式主要是添加一些无关业务的功能，比如日志，验证等。**\n\n**使用代理模式,代理和真实对象之间的关系在编译时就已经确定了,而装饰器者能够在运行时递归的被构造**.(代理模式会在代理类中创建真实处理类的一个实例,所以可以确定代理和真实对象的关系,而装饰器模式是将原始对象作为一个参数传给装饰器类)\n\n**装饰模式：以对客户端透明的方式扩展对象的功能，是继承关系的一个替代方案；**\n**代理模式：给一个对象提供一个代理对象，并有代理对象来控制对原有对象的引用；**\n\n## 4. 装饰者模式在Java中的应用\n\n装饰器模式在Java体系中的经典应用是Java I/O\n\n**抽象构件角色**:`InputStream`\n\n**具体构建角色**:`ByteArrayInputStream`、`FileInputStream`、`ObjectInputStream`、`PipedInputStream`等\n\n**装饰角色**；`FilterInputStream` -->实现了`InputStream`内的所有抽象方法并且持有一个`InputStream`的引用\n\n**具体装饰角色**:`InflaterInputStream`、`BufferedInputStream`、`DataInputStream`等\n\n## 5. 参考\n\n`https://www.cnblogs.com/xrq730/p/4908940.html`\n\n\n\n","slug":"design_pattern/six-decorator","published":1,"updated":"2019-03-04T15:33:02.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv43j000c0ww4jwgxn67d","content":"<p>本文主要介绍了Java23种设计模式中的装饰者模式，并结合实例描述了装饰者模式的具体实现和优缺点分析。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p><strong>Java设计模式系列文章目录</strong></p>\n<p><a href=\"https://www.lixueduan.com/posts/53093.html\">Java设计模式(一)—单例模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34710.html\">Java设计模式(二)—工厂模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/52453.html\">Java设计模式(三)—建造者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/24b6c0e4.html\">Java设计模式(四)—原型模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/f444ac9.html\">Java设计模式(五)—适配器模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/75903408.html\">Java设计模式(六)—装饰者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/ae2a93bd.html\">Java设计模式(七)—代理模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/22a51705.html\">Java设计模式(八)—外观模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34e634e7.html\">Java设计模式(九)—享元模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a7982bdc.html\">Java设计模式(十)—策略模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/57ae709c.html\">Java设计模式(十一)—模板方法模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/48bcf013.html\">Java设计模式(十二)—观察者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a340063f.html\">Java设计模式(十三)—组合模式</a></p>\n<p>……..</p>\n<p>Demo下载–&gt; <a href=\"https://github.com/illusorycloud/design-pattern\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><p>在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。</p>\n<p>它是通过创建一个包装对象，也就是装饰来包裹真实的对象。是继承关系的一个替代方案。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/six-decorator.png\" alt=\"\"></p>\n<p><strong>装饰模式由4种角色组成：</strong><br>（1）抽象构件（Component）角色：给出一个抽象接口，以规范准备接收附加职责的对象。<br>（2）具体构件（Concrete Component）角色：定义一个将要接收附加职责的类。<br>（3）装饰（Decorator）角色：持有一个构件（Component）对象的实例，并实现一个与抽象构件接口一致的接口，从外类来扩展Component类的功能，但对于Component类来说，是无需知道Decorato的存在的。<br>（4）具体装饰（Concrete Decorator）角色：负责给构件对象添加上附加的职责。</p>\n<h2 id=\"2-具体实现\"><a href=\"#2-具体实现\" class=\"headerlink\" title=\"2. 具体实现\"></a>2. 具体实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象构件角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 人类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Human</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体构件角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 男人</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span> <span class=\"keyword\">implements</span> <span class=\"title\">Human</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"男人跑得很快\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象装饰角色</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Decorator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Human</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 持有一个具体构件的引用</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Human human;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Decorator</span><span class=\"params\">(Human human)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.human = human;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        human.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体装饰角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 飞人</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlyMan</span> <span class=\"keyword\">extends</span> <span class=\"title\">Decorator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FlyMan</span><span class=\"params\">(Human human)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(human);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.run();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fly();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 扩展功能</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">fly</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"变成飞人了，跑得更快了~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体装饰角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 强壮的男人</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StrongMan</span> <span class=\"keyword\">extends</span> <span class=\"title\">Decorator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StrongMan</span><span class=\"params\">(Human human)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(human);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.run();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.strong();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">strong</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"变得强壮了，耐力提升了~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 装饰者模式 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecoratorTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decoratorTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//普通对象</span></span><br><span class=\"line\">        Human man = <span class=\"keyword\">new</span> Man();</span><br><span class=\"line\">        man.run();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"--------------------\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//装饰后的对象</span></span><br><span class=\"line\">        Human flyMan = <span class=\"keyword\">new</span> FlyMan(man);</span><br><span class=\"line\">        flyMan.run();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"--------------------\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//装饰后的对象</span></span><br><span class=\"line\">        Human strongMan = <span class=\"keyword\">new</span> StrongMan(man);</span><br><span class=\"line\">        strongMan.run();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"--------------------\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//装饰后的对象再次装饰</span></span><br><span class=\"line\">        Human strongFlyMan = <span class=\"keyword\">new</span> StrongMan(flyMan);</span><br><span class=\"line\">        strongFlyMan.run();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//输出</span></span><br><span class=\"line\">男人在跑</span><br><span class=\"line\">--------------------</span><br><span class=\"line\">男人在跑</span><br><span class=\"line\">变成飞人了，速度加快了~</span><br><span class=\"line\">--------------------</span><br><span class=\"line\">男人在跑</span><br><span class=\"line\">变得强壮了，耐力提升了~</span><br><span class=\"line\">--------------------</span><br><span class=\"line\">男人在跑</span><br><span class=\"line\">变成飞人了，速度加快了~</span><br><span class=\"line\">变得强壮了，耐力提升了~</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h2><p><strong>优点</strong></p>\n<ul>\n<li><p>1.<strong>装饰者模式可以提供比继承更多的灵活性</strong>。装饰器模式允许系统动态决定贴上一个需要的装饰，或者除掉一个不需要的装饰。继承关系是不同，继承关系是静态的，它在系统运行前就决定了。</p>\n</li>\n<li><p>2.通过使用不同的具体装饰器以及这些装饰类的排列组合，设计师可以创造出很多不同的行为组合。</p>\n</li>\n</ul>\n<p><strong>缺点</strong></p>\n<p>由于使用装饰器模式，可以比使用继承关系需要较少数目的类。使用较少的类，当然使设计比较易于进行。但是另一方面，由于使用装饰器模式会产生比使用继承关系更多的对象，更多的对象会使得查错变得困难，特别是这些对象看上去都很像。</p>\n<p><strong>装饰者模式和代理模式对比</strong></p>\n<p><strong>装饰者模式主要对功能进行扩展，代理模式主要是添加一些无关业务的功能，比如日志，验证等。</strong></p>\n<p><strong>使用代理模式,代理和真实对象之间的关系在编译时就已经确定了,而装饰器者能够在运行时递归的被构造</strong>.(代理模式会在代理类中创建真实处理类的一个实例,所以可以确定代理和真实对象的关系,而装饰器模式是将原始对象作为一个参数传给装饰器类)</p>\n<p><strong>装饰模式：以对客户端透明的方式扩展对象的功能，是继承关系的一个替代方案；</strong><br><strong>代理模式：给一个对象提供一个代理对象，并有代理对象来控制对原有对象的引用；</strong></p>\n<h2 id=\"4-装饰者模式在Java中的应用\"><a href=\"#4-装饰者模式在Java中的应用\" class=\"headerlink\" title=\"4. 装饰者模式在Java中的应用\"></a>4. 装饰者模式在Java中的应用</h2><p>装饰器模式在Java体系中的经典应用是Java I/O</p>\n<p><strong>抽象构件角色</strong>:<code>InputStream</code></p>\n<p><strong>具体构建角色</strong>:<code>ByteArrayInputStream</code>、<code>FileInputStream</code>、<code>ObjectInputStream</code>、<code>PipedInputStream</code>等</p>\n<p><strong>装饰角色</strong>；<code>FilterInputStream</code> –&gt;实现了<code>InputStream</code>内的所有抽象方法并且持有一个<code>InputStream</code>的引用</p>\n<p><strong>具体装饰角色</strong>:<code>InflaterInputStream</code>、<code>BufferedInputStream</code>、<code>DataInputStream</code>等</p>\n<h2 id=\"5-参考\"><a href=\"#5-参考\" class=\"headerlink\" title=\"5. 参考\"></a>5. 参考</h2><p><code>https://www.cnblogs.com/xrq730/p/4908940.html</code></p>\n","site":{"data":{}},"excerpt":"<p>本文主要介绍了Java23种设计模式中的装饰者模式，并结合实例描述了装饰者模式的具体实现和优缺点分析。</p>","more":"<blockquote>\n<p><strong>Java设计模式系列文章目录</strong></p>\n<p><a href=\"https://www.lixueduan.com/posts/53093.html\">Java设计模式(一)—单例模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34710.html\">Java设计模式(二)—工厂模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/52453.html\">Java设计模式(三)—建造者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/24b6c0e4.html\">Java设计模式(四)—原型模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/f444ac9.html\">Java设计模式(五)—适配器模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/75903408.html\">Java设计模式(六)—装饰者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/ae2a93bd.html\">Java设计模式(七)—代理模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/22a51705.html\">Java设计模式(八)—外观模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34e634e7.html\">Java设计模式(九)—享元模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a7982bdc.html\">Java设计模式(十)—策略模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/57ae709c.html\">Java设计模式(十一)—模板方法模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/48bcf013.html\">Java设计模式(十二)—观察者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a340063f.html\">Java设计模式(十三)—组合模式</a></p>\n<p>……..</p>\n<p>Demo下载–&gt; <a href=\"https://github.com/illusorycloud/design-pattern\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><p>在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。</p>\n<p>它是通过创建一个包装对象，也就是装饰来包裹真实的对象。是继承关系的一个替代方案。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/six-decorator.png\" alt=\"\"></p>\n<p><strong>装饰模式由4种角色组成：</strong><br>（1）抽象构件（Component）角色：给出一个抽象接口，以规范准备接收附加职责的对象。<br>（2）具体构件（Concrete Component）角色：定义一个将要接收附加职责的类。<br>（3）装饰（Decorator）角色：持有一个构件（Component）对象的实例，并实现一个与抽象构件接口一致的接口，从外类来扩展Component类的功能，但对于Component类来说，是无需知道Decorato的存在的。<br>（4）具体装饰（Concrete Decorator）角色：负责给构件对象添加上附加的职责。</p>\n<h2 id=\"2-具体实现\"><a href=\"#2-具体实现\" class=\"headerlink\" title=\"2. 具体实现\"></a>2. 具体实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象构件角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 人类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Human</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体构件角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 男人</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span> <span class=\"keyword\">implements</span> <span class=\"title\">Human</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"男人跑得很快\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象装饰角色</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Decorator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Human</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 持有一个具体构件的引用</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Human human;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Decorator</span><span class=\"params\">(Human human)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.human = human;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        human.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体装饰角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 飞人</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlyMan</span> <span class=\"keyword\">extends</span> <span class=\"title\">Decorator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FlyMan</span><span class=\"params\">(Human human)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(human);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.run();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fly();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 扩展功能</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">fly</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"变成飞人了，跑得更快了~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体装饰角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 强壮的男人</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StrongMan</span> <span class=\"keyword\">extends</span> <span class=\"title\">Decorator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StrongMan</span><span class=\"params\">(Human human)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(human);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.run();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.strong();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">strong</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"变得强壮了，耐力提升了~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 装饰者模式 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecoratorTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decoratorTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//普通对象</span></span><br><span class=\"line\">        Human man = <span class=\"keyword\">new</span> Man();</span><br><span class=\"line\">        man.run();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"--------------------\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//装饰后的对象</span></span><br><span class=\"line\">        Human flyMan = <span class=\"keyword\">new</span> FlyMan(man);</span><br><span class=\"line\">        flyMan.run();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"--------------------\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//装饰后的对象</span></span><br><span class=\"line\">        Human strongMan = <span class=\"keyword\">new</span> StrongMan(man);</span><br><span class=\"line\">        strongMan.run();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"--------------------\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//装饰后的对象再次装饰</span></span><br><span class=\"line\">        Human strongFlyMan = <span class=\"keyword\">new</span> StrongMan(flyMan);</span><br><span class=\"line\">        strongFlyMan.run();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//输出</span></span><br><span class=\"line\">男人在跑</span><br><span class=\"line\">--------------------</span><br><span class=\"line\">男人在跑</span><br><span class=\"line\">变成飞人了，速度加快了~</span><br><span class=\"line\">--------------------</span><br><span class=\"line\">男人在跑</span><br><span class=\"line\">变得强壮了，耐力提升了~</span><br><span class=\"line\">--------------------</span><br><span class=\"line\">男人在跑</span><br><span class=\"line\">变成飞人了，速度加快了~</span><br><span class=\"line\">变得强壮了，耐力提升了~</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h2><p><strong>优点</strong></p>\n<ul>\n<li><p>1.<strong>装饰者模式可以提供比继承更多的灵活性</strong>。装饰器模式允许系统动态决定贴上一个需要的装饰，或者除掉一个不需要的装饰。继承关系是不同，继承关系是静态的，它在系统运行前就决定了。</p>\n</li>\n<li><p>2.通过使用不同的具体装饰器以及这些装饰类的排列组合，设计师可以创造出很多不同的行为组合。</p>\n</li>\n</ul>\n<p><strong>缺点</strong></p>\n<p>由于使用装饰器模式，可以比使用继承关系需要较少数目的类。使用较少的类，当然使设计比较易于进行。但是另一方面，由于使用装饰器模式会产生比使用继承关系更多的对象，更多的对象会使得查错变得困难，特别是这些对象看上去都很像。</p>\n<p><strong>装饰者模式和代理模式对比</strong></p>\n<p><strong>装饰者模式主要对功能进行扩展，代理模式主要是添加一些无关业务的功能，比如日志，验证等。</strong></p>\n<p><strong>使用代理模式,代理和真实对象之间的关系在编译时就已经确定了,而装饰器者能够在运行时递归的被构造</strong>.(代理模式会在代理类中创建真实处理类的一个实例,所以可以确定代理和真实对象的关系,而装饰器模式是将原始对象作为一个参数传给装饰器类)</p>\n<p><strong>装饰模式：以对客户端透明的方式扩展对象的功能，是继承关系的一个替代方案；</strong><br><strong>代理模式：给一个对象提供一个代理对象，并有代理对象来控制对原有对象的引用；</strong></p>\n<h2 id=\"4-装饰者模式在Java中的应用\"><a href=\"#4-装饰者模式在Java中的应用\" class=\"headerlink\" title=\"4. 装饰者模式在Java中的应用\"></a>4. 装饰者模式在Java中的应用</h2><p>装饰器模式在Java体系中的经典应用是Java I/O</p>\n<p><strong>抽象构件角色</strong>:<code>InputStream</code></p>\n<p><strong>具体构建角色</strong>:<code>ByteArrayInputStream</code>、<code>FileInputStream</code>、<code>ObjectInputStream</code>、<code>PipedInputStream</code>等</p>\n<p><strong>装饰角色</strong>；<code>FilterInputStream</code> –&gt;实现了<code>InputStream</code>内的所有抽象方法并且持有一个<code>InputStream</code>的引用</p>\n<p><strong>具体装饰角色</strong>:<code>InflaterInputStream</code>、<code>BufferedInputStream</code>、<code>DataInputStream</code>等</p>\n<h2 id=\"5-参考\"><a href=\"#5-参考\" class=\"headerlink\" title=\"5. 参考\"></a>5. 参考</h2><p><code>https://www.cnblogs.com/xrq730/p/4908940.html</code></p>"},{"title":"Java设计模式(十)---策略模式","abbrlink":"a7982bdc","date":"2018-10-23T14:00:00.000Z","_content":"\n本文主要介绍了Java23种设计模式中的策略模式，并结合实例描述了策略模式的具体实现和策略模式的优缺点分析。\n\n<!--more-->\n\n> **Java设计模式系列文章目录**\n>\n> [Java设计模式(一)---单例模式](https://www.lixueduan.com/posts/53093.html)\n>\n> [Java设计模式(二)---工厂模式](https://www.lixueduan.com/posts/34710.html)\n>\n> [Java设计模式(三)---建造者模式](https://www.lixueduan.com/posts/52453.html)\n>\n> [Java设计模式(四)---原型模式](https://www.lixueduan.com/posts/24b6c0e4.html)\n>\n> [Java设计模式(五)---适配器模式](https://www.lixueduan.com/posts/f444ac9.html)\n>\n> [Java设计模式(六)---装饰者模式](https://www.lixueduan.com/posts/75903408.html)\n>\n> [Java设计模式(七)---代理模式](https://www.lixueduan.com/posts/ae2a93bd.html)\n>\n> [Java设计模式(八)---外观模式](https://www.lixueduan.com/posts/22a51705.html)\n>\n> [Java设计模式(九)---享元模式](https://www.lixueduan.com/posts/34e634e7.html)\n>\n> [Java设计模式(十)---策略模式](https://www.lixueduan.com/posts/a7982bdc.html)\n>\n> [Java设计模式(十一)---模板方法模式](https://www.lixueduan.com/posts/57ae709c.html)\n>\n> [Java设计模式(十二)---观察者模式](https://www.lixueduan.com/posts/48bcf013.html)\n>\n> [Java设计模式(十三)---组合模式](https://www.lixueduan.com/posts/a340063f.html)\n>\n> ........\n>\n> Demo下载--> [Github](https://github.com/illusorycloud/design-pattern)\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 简介\n\n> **策略模式是对算法的包装**\n>\n> 策略模式定义了一系列的算法，并将每一个算法封装起来，而且它们还可以相互替换。策略模式让算法独立于使用它的客户而独立变化。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/ten-strategy.png)\n\n　　这个模式涉及到三个角色：\n\n　　●　　**环境(Context)角色**：持有一个Strategy的引用。\n\n　　●　　**抽象策略(Strategy)角色**：这是一个抽象角色，通常由一个接口或抽象类实现。此角色给出所有的具体策略类所需的接口。\n\n　　●　　**具体策略(ConcreteStrategy)角色**：包装了相关的算法或行为。\n\n## 2. 代码实现\n\n```java\n/**\n * 策略模式 抽象策略角色\n * 定义一个两个整数间的计算方法\n *\n * @author illusoryCloud\n */\npublic interface Strategy {\n    /**\n     * 两个整数间的计算方法\n     *\n     * @param a\n     * @param b\n     * @return\n     */\n    int calculate(int a, int b);\n}\n/**\n * 策略模式 具体策略角色\n * 加法\n *\n * @author illusoryCloud\n */\npublic class AddStrategy implements Strategy {\n    @Override\n    public int calculate(int a, int b) {\n        return a + b;\n    }\n}\n/**\n * 策略模式 具体策略角色\n * 减法\n *\n * @author illusoryCloud\n */\npublic class SubtractionStrategy implements Strategy {\n    @Override\n    public int calculate(int a, int b) {\n        return a - b;\n    }\n}\n/**\n * 策略模式 具体策略角色\n * 乘法\n *\n * @author illusoryCloud\n */\npublic class MultiplyStrategy implements Strategy {\n    @Override\n    public int calculate(int a, int b) {\n        return a * b;\n    }\n}\n/**\n * 策略模式 具体策略角色\n * 除法\n *\n * @author illusoryCloud\n */\npublic class DivisionStrategy implements Strategy {\n    @Override\n    public int calculate(int a, int b) {\n        if (b != 0) {\n            return a / b;\n        } else {\n            throw new RuntimeException(\"除数不能为零\");\n        }\n\n    }\n}\n/**\n * 策略模式 环境角色\n *\n * @author illusoryCloud\n */\npublic class Context {\n    /**\n     * 持有Strategy的引用\n     */\n    private Strategy strategy;\n\n    public Context(Strategy strategy) {\n        super();\n        this.strategy = strategy;\n    }\n\n\n    public Strategy getStrategy() {\n        return strategy;\n    }\n\n    /**\n     * set方法可以完成策略更换\n     */\n    public void setStrategy(Strategy strategy) {\n        this.strategy = strategy;\n    }\n\n    public int calculate(int a, int b) {\n        return strategy.calculate(a, b);\n    }\n}\n/**\n * 策略模式 测试类\n *\n * @author illusoryCloud\n */\npublic class StrategyTest {\n    @Test\n    public void strategyTest() {\n\n        //加法\n        Context context = new Context(new AddStrategy());\n        System.out.println(context.calculate(5, 5));\n        //减法\n        Context context2 = new Context(new SubtractionStrategy());\n        System.out.println(context2.calculate(5, 5));\n        //乘法\n        Context context3 = new Context(new MultiplyStrategy());\n        System.out.println(context3.calculate(5, 5));\n        //除法\n        Context context4 = new Context(new DivisionStrategy());\n        System.out.println(context4.calculate(5, 5));\n    }\n}\n```\n\n## 3. 总结\n\n**策略模式的重心不是如何实现算法**（就如同工厂模式的重心不是工厂中如何产生具体子类一样），而是如何组织、调用这些算法，从而让程序结构更灵活，具有更好的维护性和扩展性。\n\n**策略模式与状态模式**\n\n策略模式与状态模式及其相似，但是二者有其内在的差别，策略模式将具体策略类暴露出去，调用者需要具体明白每个策略的不同之处以便正确使用。而状态模式状态的改变是由其内部条件来改变的，与外界无关，二者在思想上有本质区别。\n\n**优点**\n\n1.让代码更优雅，避免了多重条件if...else语句。\n\n2.策略模式提供了管理相关算法簇的办法，恰当使用继承可以把公共代码移到父类，从而避免了代码重复。\n\n**缺点**\n\n1.客户端必须知道所有的策略类，并自行决定使用 哪一个策略，这意味着客户端必须理解这些算法的区别，以便选择恰当的算法\n\n2.如果备选策略很多，对象的数据会很多\n\n## 4. 参考\n\n`https://www.cnblogs.com/xrq730/p/4906313.html`\n\n","source":"_posts/design_pattern/ten-strategy.md","raw":"---\ntitle: Java设计模式(十)---策略模式\ntags:\n  - 设计模式\ncategories:\n  - 设计模式\nabbrlink: a7982bdc\ndate: 2018-10-23 22:00:00\n---\n\n本文主要介绍了Java23种设计模式中的策略模式，并结合实例描述了策略模式的具体实现和策略模式的优缺点分析。\n\n<!--more-->\n\n> **Java设计模式系列文章目录**\n>\n> [Java设计模式(一)---单例模式](https://www.lixueduan.com/posts/53093.html)\n>\n> [Java设计模式(二)---工厂模式](https://www.lixueduan.com/posts/34710.html)\n>\n> [Java设计模式(三)---建造者模式](https://www.lixueduan.com/posts/52453.html)\n>\n> [Java设计模式(四)---原型模式](https://www.lixueduan.com/posts/24b6c0e4.html)\n>\n> [Java设计模式(五)---适配器模式](https://www.lixueduan.com/posts/f444ac9.html)\n>\n> [Java设计模式(六)---装饰者模式](https://www.lixueduan.com/posts/75903408.html)\n>\n> [Java设计模式(七)---代理模式](https://www.lixueduan.com/posts/ae2a93bd.html)\n>\n> [Java设计模式(八)---外观模式](https://www.lixueduan.com/posts/22a51705.html)\n>\n> [Java设计模式(九)---享元模式](https://www.lixueduan.com/posts/34e634e7.html)\n>\n> [Java设计模式(十)---策略模式](https://www.lixueduan.com/posts/a7982bdc.html)\n>\n> [Java设计模式(十一)---模板方法模式](https://www.lixueduan.com/posts/57ae709c.html)\n>\n> [Java设计模式(十二)---观察者模式](https://www.lixueduan.com/posts/48bcf013.html)\n>\n> [Java设计模式(十三)---组合模式](https://www.lixueduan.com/posts/a340063f.html)\n>\n> ........\n>\n> Demo下载--> [Github](https://github.com/illusorycloud/design-pattern)\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 简介\n\n> **策略模式是对算法的包装**\n>\n> 策略模式定义了一系列的算法，并将每一个算法封装起来，而且它们还可以相互替换。策略模式让算法独立于使用它的客户而独立变化。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/ten-strategy.png)\n\n　　这个模式涉及到三个角色：\n\n　　●　　**环境(Context)角色**：持有一个Strategy的引用。\n\n　　●　　**抽象策略(Strategy)角色**：这是一个抽象角色，通常由一个接口或抽象类实现。此角色给出所有的具体策略类所需的接口。\n\n　　●　　**具体策略(ConcreteStrategy)角色**：包装了相关的算法或行为。\n\n## 2. 代码实现\n\n```java\n/**\n * 策略模式 抽象策略角色\n * 定义一个两个整数间的计算方法\n *\n * @author illusoryCloud\n */\npublic interface Strategy {\n    /**\n     * 两个整数间的计算方法\n     *\n     * @param a\n     * @param b\n     * @return\n     */\n    int calculate(int a, int b);\n}\n/**\n * 策略模式 具体策略角色\n * 加法\n *\n * @author illusoryCloud\n */\npublic class AddStrategy implements Strategy {\n    @Override\n    public int calculate(int a, int b) {\n        return a + b;\n    }\n}\n/**\n * 策略模式 具体策略角色\n * 减法\n *\n * @author illusoryCloud\n */\npublic class SubtractionStrategy implements Strategy {\n    @Override\n    public int calculate(int a, int b) {\n        return a - b;\n    }\n}\n/**\n * 策略模式 具体策略角色\n * 乘法\n *\n * @author illusoryCloud\n */\npublic class MultiplyStrategy implements Strategy {\n    @Override\n    public int calculate(int a, int b) {\n        return a * b;\n    }\n}\n/**\n * 策略模式 具体策略角色\n * 除法\n *\n * @author illusoryCloud\n */\npublic class DivisionStrategy implements Strategy {\n    @Override\n    public int calculate(int a, int b) {\n        if (b != 0) {\n            return a / b;\n        } else {\n            throw new RuntimeException(\"除数不能为零\");\n        }\n\n    }\n}\n/**\n * 策略模式 环境角色\n *\n * @author illusoryCloud\n */\npublic class Context {\n    /**\n     * 持有Strategy的引用\n     */\n    private Strategy strategy;\n\n    public Context(Strategy strategy) {\n        super();\n        this.strategy = strategy;\n    }\n\n\n    public Strategy getStrategy() {\n        return strategy;\n    }\n\n    /**\n     * set方法可以完成策略更换\n     */\n    public void setStrategy(Strategy strategy) {\n        this.strategy = strategy;\n    }\n\n    public int calculate(int a, int b) {\n        return strategy.calculate(a, b);\n    }\n}\n/**\n * 策略模式 测试类\n *\n * @author illusoryCloud\n */\npublic class StrategyTest {\n    @Test\n    public void strategyTest() {\n\n        //加法\n        Context context = new Context(new AddStrategy());\n        System.out.println(context.calculate(5, 5));\n        //减法\n        Context context2 = new Context(new SubtractionStrategy());\n        System.out.println(context2.calculate(5, 5));\n        //乘法\n        Context context3 = new Context(new MultiplyStrategy());\n        System.out.println(context3.calculate(5, 5));\n        //除法\n        Context context4 = new Context(new DivisionStrategy());\n        System.out.println(context4.calculate(5, 5));\n    }\n}\n```\n\n## 3. 总结\n\n**策略模式的重心不是如何实现算法**（就如同工厂模式的重心不是工厂中如何产生具体子类一样），而是如何组织、调用这些算法，从而让程序结构更灵活，具有更好的维护性和扩展性。\n\n**策略模式与状态模式**\n\n策略模式与状态模式及其相似，但是二者有其内在的差别，策略模式将具体策略类暴露出去，调用者需要具体明白每个策略的不同之处以便正确使用。而状态模式状态的改变是由其内部条件来改变的，与外界无关，二者在思想上有本质区别。\n\n**优点**\n\n1.让代码更优雅，避免了多重条件if...else语句。\n\n2.策略模式提供了管理相关算法簇的办法，恰当使用继承可以把公共代码移到父类，从而避免了代码重复。\n\n**缺点**\n\n1.客户端必须知道所有的策略类，并自行决定使用 哪一个策略，这意味着客户端必须理解这些算法的区别，以便选择恰当的算法\n\n2.如果备选策略很多，对象的数据会很多\n\n## 4. 参考\n\n`https://www.cnblogs.com/xrq730/p/4906313.html`\n\n","slug":"design_pattern/ten-strategy","published":1,"updated":"2019-03-04T15:35:40.935Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv43o000d0ww4y0ns7sos","content":"<p>本文主要介绍了Java23种设计模式中的策略模式，并结合实例描述了策略模式的具体实现和策略模式的优缺点分析。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p><strong>Java设计模式系列文章目录</strong></p>\n<p><a href=\"https://www.lixueduan.com/posts/53093.html\">Java设计模式(一)—单例模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34710.html\">Java设计模式(二)—工厂模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/52453.html\">Java设计模式(三)—建造者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/24b6c0e4.html\">Java设计模式(四)—原型模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/f444ac9.html\">Java设计模式(五)—适配器模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/75903408.html\">Java设计模式(六)—装饰者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/ae2a93bd.html\">Java设计模式(七)—代理模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/22a51705.html\">Java设计模式(八)—外观模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34e634e7.html\">Java设计模式(九)—享元模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a7982bdc.html\">Java设计模式(十)—策略模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/57ae709c.html\">Java设计模式(十一)—模板方法模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/48bcf013.html\">Java设计模式(十二)—观察者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a340063f.html\">Java设计模式(十三)—组合模式</a></p>\n<p>……..</p>\n<p>Demo下载–&gt; <a href=\"https://github.com/illusorycloud/design-pattern\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><blockquote>\n<p><strong>策略模式是对算法的包装</strong></p>\n<p>策略模式定义了一系列的算法，并将每一个算法封装起来，而且它们还可以相互替换。策略模式让算法独立于使用它的客户而独立变化。</p>\n</blockquote>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/ten-strategy.png\" alt=\"\"></p>\n<p>　　这个模式涉及到三个角色：</p>\n<p>　　●　　<strong>环境(Context)角色</strong>：持有一个Strategy的引用。</p>\n<p>　　●　　<strong>抽象策略(Strategy)角色</strong>：这是一个抽象角色，通常由一个接口或抽象类实现。此角色给出所有的具体策略类所需的接口。</p>\n<p>　　●　　<strong>具体策略(ConcreteStrategy)角色</strong>：包装了相关的算法或行为。</p>\n<h2 id=\"2-代码实现\"><a href=\"#2-代码实现\" class=\"headerlink\" title=\"2. 代码实现\"></a>2. 代码实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 策略模式 抽象策略角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义一个两个整数间的计算方法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Strategy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 两个整数间的计算方法</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> a</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> b</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 策略模式 具体策略角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 加法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AddStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 策略模式 具体策略角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 减法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubtractionStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a - b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 策略模式 具体策略角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 乘法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MultiplyStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a * b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 策略模式 具体策略角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 除法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DivisionStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a / b;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"除数不能为零\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 策略模式 环境角色</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 持有Strategy的引用</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Strategy strategy;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Context</span><span class=\"params\">(Strategy strategy)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.strategy = strategy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Strategy <span class=\"title\">getStrategy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> strategy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * set方法可以完成策略更换</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStrategy</span><span class=\"params\">(Strategy strategy)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.strategy = strategy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> strategy.calculate(a, b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 策略模式 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StrategyTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">strategyTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//加法</span></span><br><span class=\"line\">        Context context = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> AddStrategy());</span><br><span class=\"line\">        System.out.println(context.calculate(<span class=\"number\">5</span>, <span class=\"number\">5</span>));</span><br><span class=\"line\">        <span class=\"comment\">//减法</span></span><br><span class=\"line\">        Context context2 = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> SubtractionStrategy());</span><br><span class=\"line\">        System.out.println(context2.calculate(<span class=\"number\">5</span>, <span class=\"number\">5</span>));</span><br><span class=\"line\">        <span class=\"comment\">//乘法</span></span><br><span class=\"line\">        Context context3 = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> MultiplyStrategy());</span><br><span class=\"line\">        System.out.println(context3.calculate(<span class=\"number\">5</span>, <span class=\"number\">5</span>));</span><br><span class=\"line\">        <span class=\"comment\">//除法</span></span><br><span class=\"line\">        Context context4 = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> DivisionStrategy());</span><br><span class=\"line\">        System.out.println(context4.calculate(<span class=\"number\">5</span>, <span class=\"number\">5</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h2><p><strong>策略模式的重心不是如何实现算法</strong>（就如同工厂模式的重心不是工厂中如何产生具体子类一样），而是如何组织、调用这些算法，从而让程序结构更灵活，具有更好的维护性和扩展性。</p>\n<p><strong>策略模式与状态模式</strong></p>\n<p>策略模式与状态模式及其相似，但是二者有其内在的差别，策略模式将具体策略类暴露出去，调用者需要具体明白每个策略的不同之处以便正确使用。而状态模式状态的改变是由其内部条件来改变的，与外界无关，二者在思想上有本质区别。</p>\n<p><strong>优点</strong></p>\n<p>1.让代码更优雅，避免了多重条件if…else语句。</p>\n<p>2.策略模式提供了管理相关算法簇的办法，恰当使用继承可以把公共代码移到父类，从而避免了代码重复。</p>\n<p><strong>缺点</strong></p>\n<p>1.客户端必须知道所有的策略类，并自行决定使用 哪一个策略，这意味着客户端必须理解这些算法的区别，以便选择恰当的算法</p>\n<p>2.如果备选策略很多，对象的数据会很多</p>\n<h2 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4. 参考\"></a>4. 参考</h2><p><code>https://www.cnblogs.com/xrq730/p/4906313.html</code></p>\n","site":{"data":{}},"excerpt":"<p>本文主要介绍了Java23种设计模式中的策略模式，并结合实例描述了策略模式的具体实现和策略模式的优缺点分析。</p>","more":"<blockquote>\n<p><strong>Java设计模式系列文章目录</strong></p>\n<p><a href=\"https://www.lixueduan.com/posts/53093.html\">Java设计模式(一)—单例模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34710.html\">Java设计模式(二)—工厂模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/52453.html\">Java设计模式(三)—建造者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/24b6c0e4.html\">Java设计模式(四)—原型模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/f444ac9.html\">Java设计模式(五)—适配器模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/75903408.html\">Java设计模式(六)—装饰者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/ae2a93bd.html\">Java设计模式(七)—代理模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/22a51705.html\">Java设计模式(八)—外观模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34e634e7.html\">Java设计模式(九)—享元模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a7982bdc.html\">Java设计模式(十)—策略模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/57ae709c.html\">Java设计模式(十一)—模板方法模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/48bcf013.html\">Java设计模式(十二)—观察者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a340063f.html\">Java设计模式(十三)—组合模式</a></p>\n<p>……..</p>\n<p>Demo下载–&gt; <a href=\"https://github.com/illusorycloud/design-pattern\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><blockquote>\n<p><strong>策略模式是对算法的包装</strong></p>\n<p>策略模式定义了一系列的算法，并将每一个算法封装起来，而且它们还可以相互替换。策略模式让算法独立于使用它的客户而独立变化。</p>\n</blockquote>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/ten-strategy.png\" alt=\"\"></p>\n<p>　　这个模式涉及到三个角色：</p>\n<p>　　●　　<strong>环境(Context)角色</strong>：持有一个Strategy的引用。</p>\n<p>　　●　　<strong>抽象策略(Strategy)角色</strong>：这是一个抽象角色，通常由一个接口或抽象类实现。此角色给出所有的具体策略类所需的接口。</p>\n<p>　　●　　<strong>具体策略(ConcreteStrategy)角色</strong>：包装了相关的算法或行为。</p>\n<h2 id=\"2-代码实现\"><a href=\"#2-代码实现\" class=\"headerlink\" title=\"2. 代码实现\"></a>2. 代码实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 策略模式 抽象策略角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义一个两个整数间的计算方法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Strategy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 两个整数间的计算方法</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> a</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> b</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 策略模式 具体策略角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 加法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AddStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 策略模式 具体策略角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 减法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubtractionStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a - b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 策略模式 具体策略角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 乘法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MultiplyStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a * b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 策略模式 具体策略角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 除法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DivisionStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a / b;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"除数不能为零\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 策略模式 环境角色</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 持有Strategy的引用</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Strategy strategy;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Context</span><span class=\"params\">(Strategy strategy)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.strategy = strategy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Strategy <span class=\"title\">getStrategy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> strategy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * set方法可以完成策略更换</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStrategy</span><span class=\"params\">(Strategy strategy)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.strategy = strategy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> strategy.calculate(a, b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 策略模式 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StrategyTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">strategyTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//加法</span></span><br><span class=\"line\">        Context context = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> AddStrategy());</span><br><span class=\"line\">        System.out.println(context.calculate(<span class=\"number\">5</span>, <span class=\"number\">5</span>));</span><br><span class=\"line\">        <span class=\"comment\">//减法</span></span><br><span class=\"line\">        Context context2 = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> SubtractionStrategy());</span><br><span class=\"line\">        System.out.println(context2.calculate(<span class=\"number\">5</span>, <span class=\"number\">5</span>));</span><br><span class=\"line\">        <span class=\"comment\">//乘法</span></span><br><span class=\"line\">        Context context3 = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> MultiplyStrategy());</span><br><span class=\"line\">        System.out.println(context3.calculate(<span class=\"number\">5</span>, <span class=\"number\">5</span>));</span><br><span class=\"line\">        <span class=\"comment\">//除法</span></span><br><span class=\"line\">        Context context4 = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> DivisionStrategy());</span><br><span class=\"line\">        System.out.println(context4.calculate(<span class=\"number\">5</span>, <span class=\"number\">5</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h2><p><strong>策略模式的重心不是如何实现算法</strong>（就如同工厂模式的重心不是工厂中如何产生具体子类一样），而是如何组织、调用这些算法，从而让程序结构更灵活，具有更好的维护性和扩展性。</p>\n<p><strong>策略模式与状态模式</strong></p>\n<p>策略模式与状态模式及其相似，但是二者有其内在的差别，策略模式将具体策略类暴露出去，调用者需要具体明白每个策略的不同之处以便正确使用。而状态模式状态的改变是由其内部条件来改变的，与外界无关，二者在思想上有本质区别。</p>\n<p><strong>优点</strong></p>\n<p>1.让代码更优雅，避免了多重条件if…else语句。</p>\n<p>2.策略模式提供了管理相关算法簇的办法，恰当使用继承可以把公共代码移到父类，从而避免了代码重复。</p>\n<p><strong>缺点</strong></p>\n<p>1.客户端必须知道所有的策略类，并自行决定使用 哪一个策略，这意味着客户端必须理解这些算法的区别，以便选择恰当的算法</p>\n<p>2.如果备选策略很多，对象的数据会很多</p>\n<h2 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4. 参考\"></a>4. 参考</h2><p><code>https://www.cnblogs.com/xrq730/p/4906313.html</code></p>"},{"title":"Java设计模式(十三)---组合模式","abbrlink":"a340063f","date":"2018-10-26T14:00:00.000Z","_content":"\n本文主要介绍了Java23种设计模式中的 模式，并结合实例描述了 模式的具体实现和性能分析测试。\n\n<!--more-->\n\n> **Java设计模式系列文章目录**\n>\n> [Java设计模式(一)---单例模式](https://www.lixueduan.com/posts/53093.html)\n>\n> [Java设计模式(二)---工厂模式](https://www.lixueduan.com/posts/34710.html)\n>\n> [Java设计模式(三)---建造者模式](https://www.lixueduan.com/posts/52453.html)\n>\n> [Java设计模式(四)---原型模式](https://www.lixueduan.com/posts/24b6c0e4.html)\n>\n> [Java设计模式(五)---适配器模式](https://www.lixueduan.com/posts/f444ac9.html)\n>\n> [Java设计模式(六)---装饰者模式](https://www.lixueduan.com/posts/75903408.html)\n>\n> [Java设计模式(七)---代理模式](https://www.lixueduan.com/posts/ae2a93bd.html)\n>\n> [Java设计模式(八)---外观模式](https://www.lixueduan.com/posts/22a51705.html)\n>\n> [Java设计模式(九)---享元模式](https://www.lixueduan.com/posts/34e634e7.html)\n>\n> [Java设计模式(十)---策略模式](https://www.lixueduan.com/posts/a7982bdc.html)\n>\n> [Java设计模式(十一)---模板方法模式](https://www.lixueduan.com/posts/57ae709c.html)\n>\n> [Java设计模式(十二)---观察者模式](https://www.lixueduan.com/posts/48bcf013.html)\n>\n> [Java设计模式(十三)---组合模式](https://www.lixueduan.com/posts/a340063f.html)\n>\n> ........\n>\n> Demo下载--> [Github](https://github.com/illusorycloud/design-pattern)\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 简介\n\n**组合模式：将对象组合成树形结构以表示”部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性**。 \n\n> **所谓组合模式，其实说的是对象包含对象的问题，通过组合的方式（在对象内部引用对象）来进行布局**\n>\n> 以Windows文件系统为例，文件夹下可能有文件，也可能还有一个文件夹。\n> 文件夹可以包含文件和文件夹，但文件却没有这些功能。所以实现的时候需要单独实现。\n> 如果用组合模式的话，将文件和文件夹看成一个整体。都是文件。当做抽象的文件。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/thirteen-composite.jpg)\n\n## 2. 代码实现\n\n```java\n/**\n * 组合模式\n *\n * @author illusoryCloud\n */\npublic class Employee {\n    private String name;\n    /**\n     * 职位\n     */\n    private String dept;\n    /**\n     * 工资\n     */\n    private int salary;\n    /**\n     * 下属 一个Employee集合\n     */\n    private List<Employee> subordinates;\n\n    public Employee(String name, String dept, int sal) {\n        this.name = name;\n        this.dept = dept;\n        this.salary = sal;\n        subordinates = new ArrayList<Employee>();\n    }\n\n    public void add(Employee e) {\n        subordinates.add(e);\n    }\n\n    public void remove(Employee e) {\n        subordinates.remove(e);\n    }\n\n    public List<Employee> getSubordinates() {\n        return subordinates;\n    }\n\n    @Override\n    public String toString() {\n        return (\"Employee :[ Name : \" + name\n                + \", dept : \" + dept + \", salary :\"\n                + salary + \" ]\");\n    }\n}\n\n/**\n * 组合模式 测试类\n *\n * @author illusoryCloud\n */\npublic class CompositeTest {\n    @Test\n    public void compositeTest(){\n        Employee CEO = new Employee(\"John\",\"CEO\", 30000);\n\n        Employee headSales = new Employee(\"Robert\",\"Head Sales\", 20000);\n\n        Employee headMarketing = new Employee(\"Michel\",\"Head Marketing\", 20000);\n\n        Employee clerk1 = new Employee(\"Laura\",\"Marketing\", 10000);\n        Employee clerk2 = new Employee(\"Bob\",\"Marketing\", 10000);\n\n        Employee salesExecutive1 = new Employee(\"Richard\",\"Sales\", 10000);\n        Employee salesExecutive2 = new Employee(\"Rob\",\"Sales\", 10000);\n\n        CEO.add(headSales);\n        CEO.add(headMarketing);\n\n        headSales.add(salesExecutive1);\n        headSales.add(salesExecutive2);\n\n        headMarketing.add(clerk1);\n        headMarketing.add(clerk2);\n\n        //打印该组织的所有员工\n        System.out.println(CEO);\n        for (Employee headEmployee : CEO.getSubordinates()) {\n            System.out.println(headEmployee);\n            for (Employee employee : headEmployee.getSubordinates()) {\n                System.out.println(employee);\n            }\n        }\n    }\n}\n```\n\n## 3. 参考\n\n`https://blog.csdn.net/qq_40709468/article/details/81990084`\n\n`http://www.runoob.com/design-pattern/composite-pattern.html`","source":"_posts/design_pattern/thirteen-composite.md","raw":"---\ntitle: Java设计模式(十三)---组合模式\ntags:\n  - 设计模式\ncategories:\n  - 设计模式\nabbrlink: a340063f\ndate: 2018-10-26 22:00:00\n---\n\n本文主要介绍了Java23种设计模式中的 模式，并结合实例描述了 模式的具体实现和性能分析测试。\n\n<!--more-->\n\n> **Java设计模式系列文章目录**\n>\n> [Java设计模式(一)---单例模式](https://www.lixueduan.com/posts/53093.html)\n>\n> [Java设计模式(二)---工厂模式](https://www.lixueduan.com/posts/34710.html)\n>\n> [Java设计模式(三)---建造者模式](https://www.lixueduan.com/posts/52453.html)\n>\n> [Java设计模式(四)---原型模式](https://www.lixueduan.com/posts/24b6c0e4.html)\n>\n> [Java设计模式(五)---适配器模式](https://www.lixueduan.com/posts/f444ac9.html)\n>\n> [Java设计模式(六)---装饰者模式](https://www.lixueduan.com/posts/75903408.html)\n>\n> [Java设计模式(七)---代理模式](https://www.lixueduan.com/posts/ae2a93bd.html)\n>\n> [Java设计模式(八)---外观模式](https://www.lixueduan.com/posts/22a51705.html)\n>\n> [Java设计模式(九)---享元模式](https://www.lixueduan.com/posts/34e634e7.html)\n>\n> [Java设计模式(十)---策略模式](https://www.lixueduan.com/posts/a7982bdc.html)\n>\n> [Java设计模式(十一)---模板方法模式](https://www.lixueduan.com/posts/57ae709c.html)\n>\n> [Java设计模式(十二)---观察者模式](https://www.lixueduan.com/posts/48bcf013.html)\n>\n> [Java设计模式(十三)---组合模式](https://www.lixueduan.com/posts/a340063f.html)\n>\n> ........\n>\n> Demo下载--> [Github](https://github.com/illusorycloud/design-pattern)\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 简介\n\n**组合模式：将对象组合成树形结构以表示”部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性**。 \n\n> **所谓组合模式，其实说的是对象包含对象的问题，通过组合的方式（在对象内部引用对象）来进行布局**\n>\n> 以Windows文件系统为例，文件夹下可能有文件，也可能还有一个文件夹。\n> 文件夹可以包含文件和文件夹，但文件却没有这些功能。所以实现的时候需要单独实现。\n> 如果用组合模式的话，将文件和文件夹看成一个整体。都是文件。当做抽象的文件。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/thirteen-composite.jpg)\n\n## 2. 代码实现\n\n```java\n/**\n * 组合模式\n *\n * @author illusoryCloud\n */\npublic class Employee {\n    private String name;\n    /**\n     * 职位\n     */\n    private String dept;\n    /**\n     * 工资\n     */\n    private int salary;\n    /**\n     * 下属 一个Employee集合\n     */\n    private List<Employee> subordinates;\n\n    public Employee(String name, String dept, int sal) {\n        this.name = name;\n        this.dept = dept;\n        this.salary = sal;\n        subordinates = new ArrayList<Employee>();\n    }\n\n    public void add(Employee e) {\n        subordinates.add(e);\n    }\n\n    public void remove(Employee e) {\n        subordinates.remove(e);\n    }\n\n    public List<Employee> getSubordinates() {\n        return subordinates;\n    }\n\n    @Override\n    public String toString() {\n        return (\"Employee :[ Name : \" + name\n                + \", dept : \" + dept + \", salary :\"\n                + salary + \" ]\");\n    }\n}\n\n/**\n * 组合模式 测试类\n *\n * @author illusoryCloud\n */\npublic class CompositeTest {\n    @Test\n    public void compositeTest(){\n        Employee CEO = new Employee(\"John\",\"CEO\", 30000);\n\n        Employee headSales = new Employee(\"Robert\",\"Head Sales\", 20000);\n\n        Employee headMarketing = new Employee(\"Michel\",\"Head Marketing\", 20000);\n\n        Employee clerk1 = new Employee(\"Laura\",\"Marketing\", 10000);\n        Employee clerk2 = new Employee(\"Bob\",\"Marketing\", 10000);\n\n        Employee salesExecutive1 = new Employee(\"Richard\",\"Sales\", 10000);\n        Employee salesExecutive2 = new Employee(\"Rob\",\"Sales\", 10000);\n\n        CEO.add(headSales);\n        CEO.add(headMarketing);\n\n        headSales.add(salesExecutive1);\n        headSales.add(salesExecutive2);\n\n        headMarketing.add(clerk1);\n        headMarketing.add(clerk2);\n\n        //打印该组织的所有员工\n        System.out.println(CEO);\n        for (Employee headEmployee : CEO.getSubordinates()) {\n            System.out.println(headEmployee);\n            for (Employee employee : headEmployee.getSubordinates()) {\n                System.out.println(employee);\n            }\n        }\n    }\n}\n```\n\n## 3. 参考\n\n`https://blog.csdn.net/qq_40709468/article/details/81990084`\n\n`http://www.runoob.com/design-pattern/composite-pattern.html`","slug":"design_pattern/thirteen-composite","published":1,"updated":"2019-03-04T15:36:19.945Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv43w000h0ww4s7v9gzij","content":"<p>本文主要介绍了Java23种设计模式中的 模式，并结合实例描述了 模式的具体实现和性能分析测试。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p><strong>Java设计模式系列文章目录</strong></p>\n<p><a href=\"https://www.lixueduan.com/posts/53093.html\">Java设计模式(一)—单例模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34710.html\">Java设计模式(二)—工厂模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/52453.html\">Java设计模式(三)—建造者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/24b6c0e4.html\">Java设计模式(四)—原型模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/f444ac9.html\">Java设计模式(五)—适配器模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/75903408.html\">Java设计模式(六)—装饰者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/ae2a93bd.html\">Java设计模式(七)—代理模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/22a51705.html\">Java设计模式(八)—外观模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34e634e7.html\">Java设计模式(九)—享元模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a7982bdc.html\">Java设计模式(十)—策略模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/57ae709c.html\">Java设计模式(十一)—模板方法模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/48bcf013.html\">Java设计模式(十二)—观察者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a340063f.html\">Java设计模式(十三)—组合模式</a></p>\n<p>……..</p>\n<p>Demo下载–&gt; <a href=\"https://github.com/illusorycloud/design-pattern\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><p><strong>组合模式：将对象组合成树形结构以表示”部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性</strong>。 </p>\n<blockquote>\n<p><strong>所谓组合模式，其实说的是对象包含对象的问题，通过组合的方式（在对象内部引用对象）来进行布局</strong></p>\n<p>以Windows文件系统为例，文件夹下可能有文件，也可能还有一个文件夹。<br>文件夹可以包含文件和文件夹，但文件却没有这些功能。所以实现的时候需要单独实现。<br>如果用组合模式的话，将文件和文件夹看成一个整体。都是文件。当做抽象的文件。</p>\n</blockquote>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/thirteen-composite.jpg\" alt=\"\"></p>\n<h2 id=\"2-代码实现\"><a href=\"#2-代码实现\" class=\"headerlink\" title=\"2. 代码实现\"></a>2. 代码实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 组合模式</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 职位</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dept;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 工资</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> salary;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 下属 一个Employee集合</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Employee&gt; subordinates;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Employee</span><span class=\"params\">(String name, String dept, <span class=\"keyword\">int</span> sal)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dept = dept;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.salary = sal;</span><br><span class=\"line\">        subordinates = <span class=\"keyword\">new</span> ArrayList&lt;Employee&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Employee e)</span> </span>&#123;</span><br><span class=\"line\">        subordinates.add(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(Employee e)</span> </span>&#123;</span><br><span class=\"line\">        subordinates.remove(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Employee&gt; <span class=\"title\">getSubordinates</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> subordinates;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"string\">\"Employee :[ Name : \"</span> + name</span><br><span class=\"line\">                + <span class=\"string\">\", dept : \"</span> + dept + <span class=\"string\">\", salary :\"</span></span><br><span class=\"line\">                + salary + <span class=\"string\">\" ]\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 组合模式 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CompositeTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">compositeTest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Employee CEO = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"John\"</span>,<span class=\"string\">\"CEO\"</span>, <span class=\"number\">30000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Employee headSales = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"Robert\"</span>,<span class=\"string\">\"Head Sales\"</span>, <span class=\"number\">20000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Employee headMarketing = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"Michel\"</span>,<span class=\"string\">\"Head Marketing\"</span>, <span class=\"number\">20000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Employee clerk1 = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"Laura\"</span>,<span class=\"string\">\"Marketing\"</span>, <span class=\"number\">10000</span>);</span><br><span class=\"line\">        Employee clerk2 = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"Bob\"</span>,<span class=\"string\">\"Marketing\"</span>, <span class=\"number\">10000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Employee salesExecutive1 = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"Richard\"</span>,<span class=\"string\">\"Sales\"</span>, <span class=\"number\">10000</span>);</span><br><span class=\"line\">        Employee salesExecutive2 = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"Rob\"</span>,<span class=\"string\">\"Sales\"</span>, <span class=\"number\">10000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        CEO.add(headSales);</span><br><span class=\"line\">        CEO.add(headMarketing);</span><br><span class=\"line\"></span><br><span class=\"line\">        headSales.add(salesExecutive1);</span><br><span class=\"line\">        headSales.add(salesExecutive2);</span><br><span class=\"line\"></span><br><span class=\"line\">        headMarketing.add(clerk1);</span><br><span class=\"line\">        headMarketing.add(clerk2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//打印该组织的所有员工</span></span><br><span class=\"line\">        System.out.println(CEO);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Employee headEmployee : CEO.getSubordinates()) &#123;</span><br><span class=\"line\">            System.out.println(headEmployee);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Employee employee : headEmployee.getSubordinates()) &#123;</span><br><span class=\"line\">                System.out.println(employee);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-参考\"><a href=\"#3-参考\" class=\"headerlink\" title=\"3. 参考\"></a>3. 参考</h2><p><code>https://blog.csdn.net/qq_40709468/article/details/81990084</code></p>\n<p><code>http://www.runoob.com/design-pattern/composite-pattern.html</code></p>\n","site":{"data":{}},"excerpt":"<p>本文主要介绍了Java23种设计模式中的 模式，并结合实例描述了 模式的具体实现和性能分析测试。</p>","more":"<blockquote>\n<p><strong>Java设计模式系列文章目录</strong></p>\n<p><a href=\"https://www.lixueduan.com/posts/53093.html\">Java设计模式(一)—单例模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34710.html\">Java设计模式(二)—工厂模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/52453.html\">Java设计模式(三)—建造者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/24b6c0e4.html\">Java设计模式(四)—原型模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/f444ac9.html\">Java设计模式(五)—适配器模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/75903408.html\">Java设计模式(六)—装饰者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/ae2a93bd.html\">Java设计模式(七)—代理模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/22a51705.html\">Java设计模式(八)—外观模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34e634e7.html\">Java设计模式(九)—享元模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a7982bdc.html\">Java设计模式(十)—策略模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/57ae709c.html\">Java设计模式(十一)—模板方法模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/48bcf013.html\">Java设计模式(十二)—观察者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a340063f.html\">Java设计模式(十三)—组合模式</a></p>\n<p>……..</p>\n<p>Demo下载–&gt; <a href=\"https://github.com/illusorycloud/design-pattern\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><p><strong>组合模式：将对象组合成树形结构以表示”部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性</strong>。 </p>\n<blockquote>\n<p><strong>所谓组合模式，其实说的是对象包含对象的问题，通过组合的方式（在对象内部引用对象）来进行布局</strong></p>\n<p>以Windows文件系统为例，文件夹下可能有文件，也可能还有一个文件夹。<br>文件夹可以包含文件和文件夹，但文件却没有这些功能。所以实现的时候需要单独实现。<br>如果用组合模式的话，将文件和文件夹看成一个整体。都是文件。当做抽象的文件。</p>\n</blockquote>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/thirteen-composite.jpg\" alt=\"\"></p>\n<h2 id=\"2-代码实现\"><a href=\"#2-代码实现\" class=\"headerlink\" title=\"2. 代码实现\"></a>2. 代码实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 组合模式</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 职位</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dept;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 工资</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> salary;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 下属 一个Employee集合</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Employee&gt; subordinates;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Employee</span><span class=\"params\">(String name, String dept, <span class=\"keyword\">int</span> sal)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dept = dept;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.salary = sal;</span><br><span class=\"line\">        subordinates = <span class=\"keyword\">new</span> ArrayList&lt;Employee&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Employee e)</span> </span>&#123;</span><br><span class=\"line\">        subordinates.add(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(Employee e)</span> </span>&#123;</span><br><span class=\"line\">        subordinates.remove(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Employee&gt; <span class=\"title\">getSubordinates</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> subordinates;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"string\">\"Employee :[ Name : \"</span> + name</span><br><span class=\"line\">                + <span class=\"string\">\", dept : \"</span> + dept + <span class=\"string\">\", salary :\"</span></span><br><span class=\"line\">                + salary + <span class=\"string\">\" ]\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 组合模式 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CompositeTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">compositeTest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Employee CEO = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"John\"</span>,<span class=\"string\">\"CEO\"</span>, <span class=\"number\">30000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Employee headSales = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"Robert\"</span>,<span class=\"string\">\"Head Sales\"</span>, <span class=\"number\">20000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Employee headMarketing = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"Michel\"</span>,<span class=\"string\">\"Head Marketing\"</span>, <span class=\"number\">20000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Employee clerk1 = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"Laura\"</span>,<span class=\"string\">\"Marketing\"</span>, <span class=\"number\">10000</span>);</span><br><span class=\"line\">        Employee clerk2 = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"Bob\"</span>,<span class=\"string\">\"Marketing\"</span>, <span class=\"number\">10000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Employee salesExecutive1 = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"Richard\"</span>,<span class=\"string\">\"Sales\"</span>, <span class=\"number\">10000</span>);</span><br><span class=\"line\">        Employee salesExecutive2 = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"Rob\"</span>,<span class=\"string\">\"Sales\"</span>, <span class=\"number\">10000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        CEO.add(headSales);</span><br><span class=\"line\">        CEO.add(headMarketing);</span><br><span class=\"line\"></span><br><span class=\"line\">        headSales.add(salesExecutive1);</span><br><span class=\"line\">        headSales.add(salesExecutive2);</span><br><span class=\"line\"></span><br><span class=\"line\">        headMarketing.add(clerk1);</span><br><span class=\"line\">        headMarketing.add(clerk2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//打印该组织的所有员工</span></span><br><span class=\"line\">        System.out.println(CEO);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Employee headEmployee : CEO.getSubordinates()) &#123;</span><br><span class=\"line\">            System.out.println(headEmployee);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Employee employee : headEmployee.getSubordinates()) &#123;</span><br><span class=\"line\">                System.out.println(employee);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-参考\"><a href=\"#3-参考\" class=\"headerlink\" title=\"3. 参考\"></a>3. 参考</h2><p><code>https://blog.csdn.net/qq_40709468/article/details/81990084</code></p>\n<p><code>http://www.runoob.com/design-pattern/composite-pattern.html</code></p>"},{"title":"Git 配置及SSH key及使用","abbrlink":49894,"date":"2017-07-01T04:00:00.000Z","_content":"\n​\t本地 Git 仓库和 GitHub 仓库之间的传输是通过 SSH 加密的，所以配置SSH key之后，上传代码到`Github`远程仓库时就不用输入密码了。一般是在C盘用户目录下有一个 `something` 和 `something.pub` 来命名的一对文件，这个 `something` 通常就是 `id_dsa` 或 `id_rsa`。有 `.pub` 后缀的文件就是公钥，另一个文件则是密钥。连接时必须提供一个公钥用于授权，没有的话就要生成一个。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. Git 配置\n\n配置全局用户名和密码，git提交代码时用来显示你身份和联系方式，并不是github用户名和邮箱\n\n```java\ngit config --global user.name \"lillusory\" //改成自己的\ngit config --global user.email \"xueduanli@163.com\"  //改成自己的\n```\n\n## 2. 生成SSH key\n\n### 2.1 生成秘钥\n\n- 执行`ssh-keygen -t rsa -C \"你的邮箱地址\" ` 命令 生成ssh key\n- 然后会叫你输入保存路径，直接按回车即可，保存在C盘用户目录下\n- 然后会提示输入密码和确认密码，不用输入直接按两下回车即可\n\n到这里SSH key就生成好了，接下来就是配置到github上。\n\n### 2.2 配置SSH key\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/2018-12-27-git-ssh-key-set1.png)\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/2018-12-27-git-ssh-key-set2.png)\n\n\n\n登陆Github-->点击头像-->Settings-->SSH and GPG keys-->选择SSh keys上的New SSH keys-->name 随便写，key就是刚才生成的文件中的所有内容。\n\n文件默认是在C盘用户目录下，我的是`C:\\Users\\13452\\.ssh`\n\n文件夹中应该会有两个文件 ：`id_rsa`和`id_rsa.pub` \n\n`id_rsa.pub`就是我们要的key, 一般以`ssh-rsa`开头，以你刚才输的邮箱结尾。\n\n### 2.3 测试\n\n执行`ssh -T git@github.com`命令验证一下。\n\n可能会提示，`无法验证主机的真实性`是否要建立连接，输入`yes`就行了。\n\n如果，看到：\n\n> Hi xxx! You've successfully authenticated, but GitHub does not # provide shell access.\n\n恭喜你，你的设置已经成功了。\n\n## 3. 参考\n\n[Git Book](https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5)","source":"_posts/git/git-ssh-key-set.md","raw":"---\ntitle: Git 配置及SSH key及使用\ntags:\n  - Git\ncategories:\n  - Git\nabbrlink: 49894\ndate: 2017-07-01 12:00:00\n---\n\n​\t本地 Git 仓库和 GitHub 仓库之间的传输是通过 SSH 加密的，所以配置SSH key之后，上传代码到`Github`远程仓库时就不用输入密码了。一般是在C盘用户目录下有一个 `something` 和 `something.pub` 来命名的一对文件，这个 `something` 通常就是 `id_dsa` 或 `id_rsa`。有 `.pub` 后缀的文件就是公钥，另一个文件则是密钥。连接时必须提供一个公钥用于授权，没有的话就要生成一个。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. Git 配置\n\n配置全局用户名和密码，git提交代码时用来显示你身份和联系方式，并不是github用户名和邮箱\n\n```java\ngit config --global user.name \"lillusory\" //改成自己的\ngit config --global user.email \"xueduanli@163.com\"  //改成自己的\n```\n\n## 2. 生成SSH key\n\n### 2.1 生成秘钥\n\n- 执行`ssh-keygen -t rsa -C \"你的邮箱地址\" ` 命令 生成ssh key\n- 然后会叫你输入保存路径，直接按回车即可，保存在C盘用户目录下\n- 然后会提示输入密码和确认密码，不用输入直接按两下回车即可\n\n到这里SSH key就生成好了，接下来就是配置到github上。\n\n### 2.2 配置SSH key\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/2018-12-27-git-ssh-key-set1.png)\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/2018-12-27-git-ssh-key-set2.png)\n\n\n\n登陆Github-->点击头像-->Settings-->SSH and GPG keys-->选择SSh keys上的New SSH keys-->name 随便写，key就是刚才生成的文件中的所有内容。\n\n文件默认是在C盘用户目录下，我的是`C:\\Users\\13452\\.ssh`\n\n文件夹中应该会有两个文件 ：`id_rsa`和`id_rsa.pub` \n\n`id_rsa.pub`就是我们要的key, 一般以`ssh-rsa`开头，以你刚才输的邮箱结尾。\n\n### 2.3 测试\n\n执行`ssh -T git@github.com`命令验证一下。\n\n可能会提示，`无法验证主机的真实性`是否要建立连接，输入`yes`就行了。\n\n如果，看到：\n\n> Hi xxx! You've successfully authenticated, but GitHub does not # provide shell access.\n\n恭喜你，你的设置已经成功了。\n\n## 3. 参考\n\n[Git Book](https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5)","slug":"git/git-ssh-key-set","published":1,"updated":"2019-02-06T01:15:16.209Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv440000j0ww4evvnvgwp","content":"<p>​    本地 Git 仓库和 GitHub 仓库之间的传输是通过 SSH 加密的，所以配置SSH key之后，上传代码到<code>Github</code>远程仓库时就不用输入密码了。一般是在C盘用户目录下有一个 <code>something</code> 和 <code>something.pub</code> 来命名的一对文件，这个 <code>something</code> 通常就是 <code>id_dsa</code> 或 <code>id_rsa</code>。有 <code>.pub</code> 后缀的文件就是公钥，另一个文件则是密钥。连接时必须提供一个公钥用于授权，没有的话就要生成一个。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-Git-配置\"><a href=\"#1-Git-配置\" class=\"headerlink\" title=\"1. Git 配置\"></a>1. Git 配置</h2><p>配置全局用户名和密码，git提交代码时用来显示你身份和联系方式，并不是github用户名和邮箱</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">\"lillusory\"</span> <span class=\"comment\">//改成自己的</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">\"xueduanli@163.com\"</span>  <span class=\"comment\">//改成自己的</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-生成SSH-key\"><a href=\"#2-生成SSH-key\" class=\"headerlink\" title=\"2. 生成SSH key\"></a>2. 生成SSH key</h2><h3 id=\"2-1-生成秘钥\"><a href=\"#2-1-生成秘钥\" class=\"headerlink\" title=\"2.1 生成秘钥\"></a>2.1 生成秘钥</h3><ul>\n<li>执行<code>ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;</code> 命令 生成ssh key</li>\n<li>然后会叫你输入保存路径，直接按回车即可，保存在C盘用户目录下</li>\n<li>然后会提示输入密码和确认密码，不用输入直接按两下回车即可</li>\n</ul>\n<p>到这里SSH key就生成好了，接下来就是配置到github上。</p>\n<h3 id=\"2-2-配置SSH-key\"><a href=\"#2-2-配置SSH-key\" class=\"headerlink\" title=\"2.2 配置SSH key\"></a>2.2 配置SSH key</h3><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/2018-12-27-git-ssh-key-set1.png\" alt=\"\"></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/2018-12-27-git-ssh-key-set2.png\" alt=\"\"></p>\n<p>登陆Github–&gt;点击头像–&gt;Settings–&gt;SSH and GPG keys–&gt;选择SSh keys上的New SSH keys–&gt;name 随便写，key就是刚才生成的文件中的所有内容。</p>\n<p>文件默认是在C盘用户目录下，我的是<code>C:\\Users\\13452\\.ssh</code></p>\n<p>文件夹中应该会有两个文件 ：<code>id_rsa</code>和<code>id_rsa.pub</code> </p>\n<p><code>id_rsa.pub</code>就是我们要的key, 一般以<code>ssh-rsa</code>开头，以你刚才输的邮箱结尾。</p>\n<h3 id=\"2-3-测试\"><a href=\"#2-3-测试\" class=\"headerlink\" title=\"2.3 测试\"></a>2.3 测试</h3><p>执行<code>ssh -T git@github.com</code>命令验证一下。</p>\n<p>可能会提示，<code>无法验证主机的真实性</code>是否要建立连接，输入<code>yes</code>就行了。</p>\n<p>如果，看到：</p>\n<blockquote>\n<p>Hi xxx! You’ve successfully authenticated, but GitHub does not # provide shell access.</p>\n</blockquote>\n<p>恭喜你，你的设置已经成功了。</p>\n<h2 id=\"3-参考\"><a href=\"#3-参考\" class=\"headerlink\" title=\"3. 参考\"></a>3. 参考</h2><p><a href=\"https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5\" target=\"_blank\" rel=\"noopener\">Git Book</a></p>\n","site":{"data":{}},"excerpt":"<p>​    本地 Git 仓库和 GitHub 仓库之间的传输是通过 SSH 加密的，所以配置SSH key之后，上传代码到<code>Github</code>远程仓库时就不用输入密码了。一般是在C盘用户目录下有一个 <code>something</code> 和 <code>something.pub</code> 来命名的一对文件，这个 <code>something</code> 通常就是 <code>id_dsa</code> 或 <code>id_rsa</code>。有 <code>.pub</code> 后缀的文件就是公钥，另一个文件则是密钥。连接时必须提供一个公钥用于授权，没有的话就要生成一个。</p>","more":"<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-Git-配置\"><a href=\"#1-Git-配置\" class=\"headerlink\" title=\"1. Git 配置\"></a>1. Git 配置</h2><p>配置全局用户名和密码，git提交代码时用来显示你身份和联系方式，并不是github用户名和邮箱</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">\"lillusory\"</span> <span class=\"comment\">//改成自己的</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">\"xueduanli@163.com\"</span>  <span class=\"comment\">//改成自己的</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-生成SSH-key\"><a href=\"#2-生成SSH-key\" class=\"headerlink\" title=\"2. 生成SSH key\"></a>2. 生成SSH key</h2><h3 id=\"2-1-生成秘钥\"><a href=\"#2-1-生成秘钥\" class=\"headerlink\" title=\"2.1 生成秘钥\"></a>2.1 生成秘钥</h3><ul>\n<li>执行<code>ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;</code> 命令 生成ssh key</li>\n<li>然后会叫你输入保存路径，直接按回车即可，保存在C盘用户目录下</li>\n<li>然后会提示输入密码和确认密码，不用输入直接按两下回车即可</li>\n</ul>\n<p>到这里SSH key就生成好了，接下来就是配置到github上。</p>\n<h3 id=\"2-2-配置SSH-key\"><a href=\"#2-2-配置SSH-key\" class=\"headerlink\" title=\"2.2 配置SSH key\"></a>2.2 配置SSH key</h3><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/2018-12-27-git-ssh-key-set1.png\" alt=\"\"></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/2018-12-27-git-ssh-key-set2.png\" alt=\"\"></p>\n<p>登陆Github–&gt;点击头像–&gt;Settings–&gt;SSH and GPG keys–&gt;选择SSh keys上的New SSH keys–&gt;name 随便写，key就是刚才生成的文件中的所有内容。</p>\n<p>文件默认是在C盘用户目录下，我的是<code>C:\\Users\\13452\\.ssh</code></p>\n<p>文件夹中应该会有两个文件 ：<code>id_rsa</code>和<code>id_rsa.pub</code> </p>\n<p><code>id_rsa.pub</code>就是我们要的key, 一般以<code>ssh-rsa</code>开头，以你刚才输的邮箱结尾。</p>\n<h3 id=\"2-3-测试\"><a href=\"#2-3-测试\" class=\"headerlink\" title=\"2.3 测试\"></a>2.3 测试</h3><p>执行<code>ssh -T git@github.com</code>命令验证一下。</p>\n<p>可能会提示，<code>无法验证主机的真实性</code>是否要建立连接，输入<code>yes</code>就行了。</p>\n<p>如果，看到：</p>\n<blockquote>\n<p>Hi xxx! You’ve successfully authenticated, but GitHub does not # provide shell access.</p>\n</blockquote>\n<p>恭喜你，你的设置已经成功了。</p>\n<h2 id=\"3-参考\"><a href=\"#3-参考\" class=\"headerlink\" title=\"3. 参考\"></a>3. 参考</h2><p><a href=\"https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5\" target=\"_blank\" rel=\"noopener\">Git Book</a></p>"},{"title":"基于Hexo搭建个人博客优化之（五）--压缩篇","abbrlink":"70deabab","date":"2019-01-10T14:00:00.000Z","_content":"\n本章主要记录了如何通过`gulp`工具压缩压缩博客静态文件以加快网站加载速度。\n\n<!--more-->\n\n> 这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n在本系列文章的第二章中也有类似静态资源压缩的教程，是用的`hexo-neat`插件，最近用着用着出现了一点点问题，无奈之下换用了`gulp`。这个工具也可以很方便的压缩静态资源。\n\n## 1. 插件安装\n\n首先需要安装`gulp`工具\n\n命令：`npm install gulp`\n\n接着安装功能模块，包括\n\n```xml\ngulp-htmlclean // 清理html\ngulp-htmlmin // 压缩html\ngulp-minify-css // 压缩css\ngulp-uglify // 混淆js\n```\n\n命令：`npm install gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify --save`\n\n## 2. 创建任务\n\n在站点根目录下，新建`gulpfile.js`文件，文件内容如下:\n\n```javascript\nvar gulp = require('gulp');\n\n//Plugins模块获取\nvar minifycss = require('gulp-minify-css');\nvar uglify = require('gulp-uglify');\nvar htmlmin = require('gulp-htmlmin');\nvar htmlclean = require('gulp-htmlclean');\n//压缩css\ngulp.task('minify-css', function () {\nreturn gulp.src('./public/**/*.css')\n.pipe(minifycss())\n.pipe(gulp.dest('./public'));\n});\n//压缩html\ngulp.task('minify-html', function () {\nreturn gulp.src('./public/**/*.html')\n.pipe(htmlclean())\n.pipe(htmlmin({\nremoveComments: true,\nminifyJS: true,\nminifyCSS: true,\nminifyURLs: true,\n}))\n\n.pipe(gulp.dest('./public'))\n});\n//压缩js 不压缩min.js\ngulp.task('minify-js', function () {\nreturn gulp.src(['./public/**/*.js', '!./public/**/*.min.js'])\n.pipe(uglify())\n.pipe(gulp.dest('./public'));\n});\n\n//4.0以前的写法 \n//gulp.task('default', [\n  //  'minify-html', 'minify-css', 'minify-js'\n//]);\n//4.0以后的写法\n// 执行 gulp 命令时执行的任务\ngulp.task('default', gulp.parallel('minify-html', 'minify-css', 'minify-js', function() {\n  // Do something after a, b, and c are finished.\n}));\n \n```\n\n## 3. 使用\n\n使用时按照以下顺序就可以了：\n\n```java\nhexo clean //先清理文件\nhexo g  //编译生成静态文件\ngulp  //gulp插件执行压缩任务\nhexo s //开启服务\n```\n\n## 4. 问题\n\n刚开始弄这个的时候也是各种百度，Google，大部分的文章也是这么写的但是，第二部的js 代码却都有问题，也不能说有问题吧，大部分都是4.0以前的写法，导致现在gulp更新到4.0之后全都无法使用了。可能在看到这篇文章之前也试了各种办法。然后每次都出现这样的问题：\n\n```java\n\nassert.js:85\n  throw new assert.AssertionError({\n  ^\nAssertionError: Task function must be specified\n    at Gulp.set [as _setTask] (/home/hope/web/node_modules/undertaker/lib/set-task.js:10:3)\n    at Gulp.task (/home/hope/web/node_modules/undertaker/lib/task.js:13:8)\n.................\n```\n\n在看了下gulp相关资料后才发现了问题，接着把js代码稍微改了改终于能用了。不过运行的时候好像也有点问题，不过不影响使用，对这些工具还是不太了解。\n\n```java\n[21:35:20] The following tasks did not complete: default, <anonymous>\n[21:35:20] Did you forget to signal async completion?\n//代码里也没这个任务呀\n```","source":"_posts/hexo/hexo-blog-compress-five.md","raw":"---\ntitle: 基于Hexo搭建个人博客优化之（五）--压缩篇\ntags:\n  - Hexo\ncategories:\n  - Hexo\nabbrlink: 70deabab\ndate: 2019-01-10 22:00:00\n---\n\n本章主要记录了如何通过`gulp`工具压缩压缩博客静态文件以加快网站加载速度。\n\n<!--more-->\n\n> 这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n在本系列文章的第二章中也有类似静态资源压缩的教程，是用的`hexo-neat`插件，最近用着用着出现了一点点问题，无奈之下换用了`gulp`。这个工具也可以很方便的压缩静态资源。\n\n## 1. 插件安装\n\n首先需要安装`gulp`工具\n\n命令：`npm install gulp`\n\n接着安装功能模块，包括\n\n```xml\ngulp-htmlclean // 清理html\ngulp-htmlmin // 压缩html\ngulp-minify-css // 压缩css\ngulp-uglify // 混淆js\n```\n\n命令：`npm install gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify --save`\n\n## 2. 创建任务\n\n在站点根目录下，新建`gulpfile.js`文件，文件内容如下:\n\n```javascript\nvar gulp = require('gulp');\n\n//Plugins模块获取\nvar minifycss = require('gulp-minify-css');\nvar uglify = require('gulp-uglify');\nvar htmlmin = require('gulp-htmlmin');\nvar htmlclean = require('gulp-htmlclean');\n//压缩css\ngulp.task('minify-css', function () {\nreturn gulp.src('./public/**/*.css')\n.pipe(minifycss())\n.pipe(gulp.dest('./public'));\n});\n//压缩html\ngulp.task('minify-html', function () {\nreturn gulp.src('./public/**/*.html')\n.pipe(htmlclean())\n.pipe(htmlmin({\nremoveComments: true,\nminifyJS: true,\nminifyCSS: true,\nminifyURLs: true,\n}))\n\n.pipe(gulp.dest('./public'))\n});\n//压缩js 不压缩min.js\ngulp.task('minify-js', function () {\nreturn gulp.src(['./public/**/*.js', '!./public/**/*.min.js'])\n.pipe(uglify())\n.pipe(gulp.dest('./public'));\n});\n\n//4.0以前的写法 \n//gulp.task('default', [\n  //  'minify-html', 'minify-css', 'minify-js'\n//]);\n//4.0以后的写法\n// 执行 gulp 命令时执行的任务\ngulp.task('default', gulp.parallel('minify-html', 'minify-css', 'minify-js', function() {\n  // Do something after a, b, and c are finished.\n}));\n \n```\n\n## 3. 使用\n\n使用时按照以下顺序就可以了：\n\n```java\nhexo clean //先清理文件\nhexo g  //编译生成静态文件\ngulp  //gulp插件执行压缩任务\nhexo s //开启服务\n```\n\n## 4. 问题\n\n刚开始弄这个的时候也是各种百度，Google，大部分的文章也是这么写的但是，第二部的js 代码却都有问题，也不能说有问题吧，大部分都是4.0以前的写法，导致现在gulp更新到4.0之后全都无法使用了。可能在看到这篇文章之前也试了各种办法。然后每次都出现这样的问题：\n\n```java\n\nassert.js:85\n  throw new assert.AssertionError({\n  ^\nAssertionError: Task function must be specified\n    at Gulp.set [as _setTask] (/home/hope/web/node_modules/undertaker/lib/set-task.js:10:3)\n    at Gulp.task (/home/hope/web/node_modules/undertaker/lib/task.js:13:8)\n.................\n```\n\n在看了下gulp相关资料后才发现了问题，接着把js代码稍微改了改终于能用了。不过运行的时候好像也有点问题，不过不影响使用，对这些工具还是不太了解。\n\n```java\n[21:35:20] The following tasks did not complete: default, <anonymous>\n[21:35:20] Did you forget to signal async completion?\n//代码里也没这个任务呀\n```","slug":"hexo/hexo-blog-compress-five","published":1,"updated":"2019-02-06T01:14:13.774Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv444000o0ww4qv8vqm55","content":"<p>本章主要记录了如何通过<code>gulp</code>工具压缩压缩博客静态文件以加快网站加载速度。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。</p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<p>在本系列文章的第二章中也有类似静态资源压缩的教程，是用的<code>hexo-neat</code>插件，最近用着用着出现了一点点问题，无奈之下换用了<code>gulp</code>。这个工具也可以很方便的压缩静态资源。</p>\n<h2 id=\"1-插件安装\"><a href=\"#1-插件安装\" class=\"headerlink\" title=\"1. 插件安装\"></a>1. 插件安装</h2><p>首先需要安装<code>gulp</code>工具</p>\n<p>命令：<code>npm install gulp</code></p>\n<p>接着安装功能模块，包括</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp-htmlclean // 清理html</span><br><span class=\"line\">gulp-htmlmin // 压缩html</span><br><span class=\"line\">gulp-minify-css // 压缩css</span><br><span class=\"line\">gulp-uglify // 混淆js</span><br></pre></td></tr></table></figure>\n<p>命令：<code>npm install gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify --save</code></p>\n<h2 id=\"2-创建任务\"><a href=\"#2-创建任务\" class=\"headerlink\" title=\"2. 创建任务\"></a>2. 创建任务</h2><p>在站点根目录下，新建<code>gulpfile.js</code>文件，文件内容如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Plugins模块获取</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> htmlmin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-htmlmin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> htmlclean = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-htmlclean'</span>);</span><br><span class=\"line\"><span class=\"comment\">//压缩css</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'minify-css'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./public/**/*.css'</span>)</span><br><span class=\"line\">.pipe(minifycss())</span><br><span class=\"line\">.pipe(gulp.dest(<span class=\"string\">'./public'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//压缩html</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'minify-html'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./public/**/*.html'</span>)</span><br><span class=\"line\">.pipe(htmlclean())</span><br><span class=\"line\">.pipe(htmlmin(&#123;</span><br><span class=\"line\">removeComments: <span class=\"literal\">true</span>,</span><br><span class=\"line\">minifyJS: <span class=\"literal\">true</span>,</span><br><span class=\"line\">minifyCSS: <span class=\"literal\">true</span>,</span><br><span class=\"line\">minifyURLs: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">.pipe(gulp.dest(<span class=\"string\">'./public'</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//压缩js 不压缩min.js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'minify-js'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> gulp.src([<span class=\"string\">'./public/**/*.js'</span>, <span class=\"string\">'!./public/**/*.min.js'</span>])</span><br><span class=\"line\">.pipe(uglify())</span><br><span class=\"line\">.pipe(gulp.dest(<span class=\"string\">'./public'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4.0以前的写法 </span></span><br><span class=\"line\"><span class=\"comment\">//gulp.task('default', [</span></span><br><span class=\"line\">  <span class=\"comment\">//  'minify-html', 'minify-css', 'minify-js'</span></span><br><span class=\"line\"><span class=\"comment\">//]);</span></span><br><span class=\"line\"><span class=\"comment\">//4.0以后的写法</span></span><br><span class=\"line\"><span class=\"comment\">// 执行 gulp 命令时执行的任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, gulp.parallel(<span class=\"string\">'minify-html'</span>, <span class=\"string\">'minify-css'</span>, <span class=\"string\">'minify-js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Do something after a, b, and c are finished.</span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-使用\"><a href=\"#3-使用\" class=\"headerlink\" title=\"3. 使用\"></a>3. 使用</h2><p>使用时按照以下顺序就可以了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean <span class=\"comment\">//先清理文件</span></span><br><span class=\"line\">hexo g  <span class=\"comment\">//编译生成静态文件</span></span><br><span class=\"line\">gulp  <span class=\"comment\">//gulp插件执行压缩任务</span></span><br><span class=\"line\">hexo s <span class=\"comment\">//开启服务</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-问题\"><a href=\"#4-问题\" class=\"headerlink\" title=\"4. 问题\"></a>4. 问题</h2><p>刚开始弄这个的时候也是各种百度，Google，大部分的文章也是这么写的但是，第二部的js 代码却都有问题，也不能说有问题吧，大部分都是4.0以前的写法，导致现在gulp更新到4.0之后全都无法使用了。可能在看到这篇文章之前也试了各种办法。然后每次都出现这样的问题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">assert</span>.js:<span class=\"number\">85</span></span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"keyword\">assert</span>.AssertionError(&#123;</span><br><span class=\"line\">  ^</span><br><span class=\"line\">AssertionError: Task function must be specified</span><br><span class=\"line\">    at Gulp.set [as _setTask] (/home/hope/web/node_modules/undertaker/lib/set-task.js:<span class=\"number\">10</span>:<span class=\"number\">3</span>)</span><br><span class=\"line\">    at Gulp.task (/home/hope/web/node_modules/undertaker/lib/task.js:<span class=\"number\">13</span>:<span class=\"number\">8</span>)</span><br><span class=\"line\">.................</span><br></pre></td></tr></table></figure>\n<p>在看了下gulp相关资料后才发现了问题，接着把js代码稍微改了改终于能用了。不过运行的时候好像也有点问题，不过不影响使用，对这些工具还是不太了解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">21</span>:<span class=\"number\">35</span>:<span class=\"number\">20</span>] The following tasks did not complete: <span class=\"keyword\">default</span>, &lt;anonymous&gt;</span><br><span class=\"line\">[<span class=\"number\">21</span>:<span class=\"number\">35</span>:<span class=\"number\">20</span>] Did you forget to signal async completion?</span><br><span class=\"line\"><span class=\"comment\">//代码里也没这个任务呀</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>本章主要记录了如何通过<code>gulp</code>工具压缩压缩博客静态文件以加快网站加载速度。</p>","more":"<blockquote>\n<p>这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。</p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<p>在本系列文章的第二章中也有类似静态资源压缩的教程，是用的<code>hexo-neat</code>插件，最近用着用着出现了一点点问题，无奈之下换用了<code>gulp</code>。这个工具也可以很方便的压缩静态资源。</p>\n<h2 id=\"1-插件安装\"><a href=\"#1-插件安装\" class=\"headerlink\" title=\"1. 插件安装\"></a>1. 插件安装</h2><p>首先需要安装<code>gulp</code>工具</p>\n<p>命令：<code>npm install gulp</code></p>\n<p>接着安装功能模块，包括</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp-htmlclean // 清理html</span><br><span class=\"line\">gulp-htmlmin // 压缩html</span><br><span class=\"line\">gulp-minify-css // 压缩css</span><br><span class=\"line\">gulp-uglify // 混淆js</span><br></pre></td></tr></table></figure>\n<p>命令：<code>npm install gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify --save</code></p>\n<h2 id=\"2-创建任务\"><a href=\"#2-创建任务\" class=\"headerlink\" title=\"2. 创建任务\"></a>2. 创建任务</h2><p>在站点根目录下，新建<code>gulpfile.js</code>文件，文件内容如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Plugins模块获取</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> htmlmin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-htmlmin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> htmlclean = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-htmlclean'</span>);</span><br><span class=\"line\"><span class=\"comment\">//压缩css</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'minify-css'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./public/**/*.css'</span>)</span><br><span class=\"line\">.pipe(minifycss())</span><br><span class=\"line\">.pipe(gulp.dest(<span class=\"string\">'./public'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//压缩html</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'minify-html'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./public/**/*.html'</span>)</span><br><span class=\"line\">.pipe(htmlclean())</span><br><span class=\"line\">.pipe(htmlmin(&#123;</span><br><span class=\"line\">removeComments: <span class=\"literal\">true</span>,</span><br><span class=\"line\">minifyJS: <span class=\"literal\">true</span>,</span><br><span class=\"line\">minifyCSS: <span class=\"literal\">true</span>,</span><br><span class=\"line\">minifyURLs: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">.pipe(gulp.dest(<span class=\"string\">'./public'</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//压缩js 不压缩min.js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'minify-js'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> gulp.src([<span class=\"string\">'./public/**/*.js'</span>, <span class=\"string\">'!./public/**/*.min.js'</span>])</span><br><span class=\"line\">.pipe(uglify())</span><br><span class=\"line\">.pipe(gulp.dest(<span class=\"string\">'./public'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4.0以前的写法 </span></span><br><span class=\"line\"><span class=\"comment\">//gulp.task('default', [</span></span><br><span class=\"line\">  <span class=\"comment\">//  'minify-html', 'minify-css', 'minify-js'</span></span><br><span class=\"line\"><span class=\"comment\">//]);</span></span><br><span class=\"line\"><span class=\"comment\">//4.0以后的写法</span></span><br><span class=\"line\"><span class=\"comment\">// 执行 gulp 命令时执行的任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, gulp.parallel(<span class=\"string\">'minify-html'</span>, <span class=\"string\">'minify-css'</span>, <span class=\"string\">'minify-js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Do something after a, b, and c are finished.</span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-使用\"><a href=\"#3-使用\" class=\"headerlink\" title=\"3. 使用\"></a>3. 使用</h2><p>使用时按照以下顺序就可以了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean <span class=\"comment\">//先清理文件</span></span><br><span class=\"line\">hexo g  <span class=\"comment\">//编译生成静态文件</span></span><br><span class=\"line\">gulp  <span class=\"comment\">//gulp插件执行压缩任务</span></span><br><span class=\"line\">hexo s <span class=\"comment\">//开启服务</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-问题\"><a href=\"#4-问题\" class=\"headerlink\" title=\"4. 问题\"></a>4. 问题</h2><p>刚开始弄这个的时候也是各种百度，Google，大部分的文章也是这么写的但是，第二部的js 代码却都有问题，也不能说有问题吧，大部分都是4.0以前的写法，导致现在gulp更新到4.0之后全都无法使用了。可能在看到这篇文章之前也试了各种办法。然后每次都出现这样的问题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">assert</span>.js:<span class=\"number\">85</span></span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"keyword\">assert</span>.AssertionError(&#123;</span><br><span class=\"line\">  ^</span><br><span class=\"line\">AssertionError: Task function must be specified</span><br><span class=\"line\">    at Gulp.set [as _setTask] (/home/hope/web/node_modules/undertaker/lib/set-task.js:<span class=\"number\">10</span>:<span class=\"number\">3</span>)</span><br><span class=\"line\">    at Gulp.task (/home/hope/web/node_modules/undertaker/lib/task.js:<span class=\"number\">13</span>:<span class=\"number\">8</span>)</span><br><span class=\"line\">.................</span><br></pre></td></tr></table></figure>\n<p>在看了下gulp相关资料后才发现了问题，接着把js代码稍微改了改终于能用了。不过运行的时候好像也有点问题，不过不影响使用，对这些工具还是不太了解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">21</span>:<span class=\"number\">35</span>:<span class=\"number\">20</span>] The following tasks did not complete: <span class=\"keyword\">default</span>, &lt;anonymous&gt;</span><br><span class=\"line\">[<span class=\"number\">21</span>:<span class=\"number\">35</span>:<span class=\"number\">20</span>] Did you forget to signal async completion?</span><br><span class=\"line\"><span class=\"comment\">//代码里也没这个任务呀</span></span><br></pre></td></tr></table></figure>"},{"title":"基于Hexo搭建个人博客之（一）--基础篇","abbrlink":18973,"date":"2018-12-20T14:00:00.000Z","_content":"\n本文主要记录了如何搭建自己的博客。基于Hexo框架在本地搭建自己博客的全过程，包括了环境准备到Hexo初始化，再到服务的开启等。\n\n<!--more-->\n\n> 这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 环境准备\n\n- Git  [Git下载地址](https://git-scm.com/downloads)\n- Node.js  [Node.js下载地址](https://nodejs.org/en/)\n\n小白式安装，一直下一步就ok了。\n\n都安装好后就可以开始安装Hexo啦.\n\n## 2. 安装Hexo\n\n- 1.新建一个文件夹,用于安装Hexo,以后这个就是放博客文件的.\n- 2.在此文件夹右键,`Git Bash Here`,打开Git\n- 3.安装Hexo  命令`npm install -g hexo`\n- 4.初始化Hexo  命令`hexo init`\n- 5.安装组件  命令`npm install`\n\n到此为止,Hexo就算是安装完成了。\n\n## 3. 开启服务\n\n- 1.`hexo generate`或者简写`hexo g`  编译,生成静态文件,就是生成一个个html文件.\n\n- 2.开启服务`hexo server`或者`hexo s`   成功开启后就可以在本地访问了。 http://localhost:4000\n  - 假如页面一直无法跳转，那么可能端口被占用了。此时我们ctrl+c停止服务器，`hexo server -p 端口号`来改变端口号  \n  - 如`hexo server -p 5000`  将端口号换为`5000`,默认是`4000`\n- 3.常用命令 \n  - `hexo clean`  清除缓存文件  \n  - `hexo deploy`或者`hexo d`  部署网站到云端,这个后面再讲。\n\n## 参考\n\n[Hexo官方文档](https://hexo.io/zh-cn/docs/)","source":"_posts/hexo/hexo-blog-setup-one.md","raw":"---\ntitle: 基于Hexo搭建个人博客之（一）--基础篇\ntags:\n  - Hexo\ncategories:\n  - Hexo\nabbrlink: 18973\ndate: 2018-12-20 22:00:00\n---\n\n本文主要记录了如何搭建自己的博客。基于Hexo框架在本地搭建自己博客的全过程，包括了环境准备到Hexo初始化，再到服务的开启等。\n\n<!--more-->\n\n> 这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 环境准备\n\n- Git  [Git下载地址](https://git-scm.com/downloads)\n- Node.js  [Node.js下载地址](https://nodejs.org/en/)\n\n小白式安装，一直下一步就ok了。\n\n都安装好后就可以开始安装Hexo啦.\n\n## 2. 安装Hexo\n\n- 1.新建一个文件夹,用于安装Hexo,以后这个就是放博客文件的.\n- 2.在此文件夹右键,`Git Bash Here`,打开Git\n- 3.安装Hexo  命令`npm install -g hexo`\n- 4.初始化Hexo  命令`hexo init`\n- 5.安装组件  命令`npm install`\n\n到此为止,Hexo就算是安装完成了。\n\n## 3. 开启服务\n\n- 1.`hexo generate`或者简写`hexo g`  编译,生成静态文件,就是生成一个个html文件.\n\n- 2.开启服务`hexo server`或者`hexo s`   成功开启后就可以在本地访问了。 http://localhost:4000\n  - 假如页面一直无法跳转，那么可能端口被占用了。此时我们ctrl+c停止服务器，`hexo server -p 端口号`来改变端口号  \n  - 如`hexo server -p 5000`  将端口号换为`5000`,默认是`4000`\n- 3.常用命令 \n  - `hexo clean`  清除缓存文件  \n  - `hexo deploy`或者`hexo d`  部署网站到云端,这个后面再讲。\n\n## 参考\n\n[Hexo官方文档](https://hexo.io/zh-cn/docs/)","slug":"hexo/hexo-blog-setup-one","published":1,"updated":"2019-02-06T01:14:45.995Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv445000p0ww4onz4arpx","content":"<p>本文主要记录了如何搭建自己的博客。基于Hexo框架在本地搭建自己博客的全过程，包括了环境准备到Hexo初始化，再到服务的开启等。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。</p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-环境准备\"><a href=\"#1-环境准备\" class=\"headerlink\" title=\"1. 环境准备\"></a>1. 环境准备</h2><ul>\n<li>Git  <a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">Git下载地址</a></li>\n<li>Node.js  <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js下载地址</a></li>\n</ul>\n<p>小白式安装，一直下一步就ok了。</p>\n<p>都安装好后就可以开始安装Hexo啦.</p>\n<h2 id=\"2-安装Hexo\"><a href=\"#2-安装Hexo\" class=\"headerlink\" title=\"2. 安装Hexo\"></a>2. 安装Hexo</h2><ul>\n<li>1.新建一个文件夹,用于安装Hexo,以后这个就是放博客文件的.</li>\n<li>2.在此文件夹右键,<code>Git Bash Here</code>,打开Git</li>\n<li>3.安装Hexo  命令<code>npm install -g hexo</code></li>\n<li>4.初始化Hexo  命令<code>hexo init</code></li>\n<li>5.安装组件  命令<code>npm install</code></li>\n</ul>\n<p>到此为止,Hexo就算是安装完成了。</p>\n<h2 id=\"3-开启服务\"><a href=\"#3-开启服务\" class=\"headerlink\" title=\"3. 开启服务\"></a>3. 开启服务</h2><ul>\n<li><p>1.<code>hexo generate</code>或者简写<code>hexo g</code>  编译,生成静态文件,就是生成一个个html文件.</p>\n</li>\n<li><p>2.开启服务<code>hexo server</code>或者<code>hexo s</code>   成功开启后就可以在本地访问了。 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a></p>\n<ul>\n<li>假如页面一直无法跳转，那么可能端口被占用了。此时我们ctrl+c停止服务器，<code>hexo server -p 端口号</code>来改变端口号  </li>\n<li>如<code>hexo server -p 5000</code>  将端口号换为<code>5000</code>,默认是<code>4000</code></li>\n</ul>\n</li>\n<li>3.常用命令 <ul>\n<li><code>hexo clean</code>  清除缓存文件  </li>\n<li><code>hexo deploy</code>或者<code>hexo d</code>  部署网站到云端,这个后面再讲。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo官方文档</a></p>\n","site":{"data":{}},"excerpt":"<p>本文主要记录了如何搭建自己的博客。基于Hexo框架在本地搭建自己博客的全过程，包括了环境准备到Hexo初始化，再到服务的开启等。</p>","more":"<blockquote>\n<p>这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。</p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-环境准备\"><a href=\"#1-环境准备\" class=\"headerlink\" title=\"1. 环境准备\"></a>1. 环境准备</h2><ul>\n<li>Git  <a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">Git下载地址</a></li>\n<li>Node.js  <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js下载地址</a></li>\n</ul>\n<p>小白式安装，一直下一步就ok了。</p>\n<p>都安装好后就可以开始安装Hexo啦.</p>\n<h2 id=\"2-安装Hexo\"><a href=\"#2-安装Hexo\" class=\"headerlink\" title=\"2. 安装Hexo\"></a>2. 安装Hexo</h2><ul>\n<li>1.新建一个文件夹,用于安装Hexo,以后这个就是放博客文件的.</li>\n<li>2.在此文件夹右键,<code>Git Bash Here</code>,打开Git</li>\n<li>3.安装Hexo  命令<code>npm install -g hexo</code></li>\n<li>4.初始化Hexo  命令<code>hexo init</code></li>\n<li>5.安装组件  命令<code>npm install</code></li>\n</ul>\n<p>到此为止,Hexo就算是安装完成了。</p>\n<h2 id=\"3-开启服务\"><a href=\"#3-开启服务\" class=\"headerlink\" title=\"3. 开启服务\"></a>3. 开启服务</h2><ul>\n<li><p>1.<code>hexo generate</code>或者简写<code>hexo g</code>  编译,生成静态文件,就是生成一个个html文件.</p>\n</li>\n<li><p>2.开启服务<code>hexo server</code>或者<code>hexo s</code>   成功开启后就可以在本地访问了。 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a></p>\n<ul>\n<li>假如页面一直无法跳转，那么可能端口被占用了。此时我们ctrl+c停止服务器，<code>hexo server -p 端口号</code>来改变端口号  </li>\n<li>如<code>hexo server -p 5000</code>  将端口号换为<code>5000</code>,默认是<code>4000</code></li>\n</ul>\n</li>\n<li>3.常用命令 <ul>\n<li><code>hexo clean</code>  清除缓存文件  </li>\n<li><code>hexo deploy</code>或者<code>hexo d</code>  部署网站到云端,这个后面再讲。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo官方文档</a></p>"},{"title":"基于Hexo搭建个人博客之（四）--管理篇","abbrlink":33469,"date":"2018-12-27T14:00:00.000Z","_content":"\n本章主要记录了如何通过使用`Github`的`分支功能`解决更换电脑后博客更新不方便的问题，让你的博客能在各个电脑上灵活切换。在也不用担心换电脑后博客配置丢失等问题了。\n\n<!--more-->\n\n> 这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n到此为止，我们已经完成了差不多所有的步骤。\n\n* 1.搭建博客\n* 2.优化主题\n* 3.部署收录\n\n**新问题：**\n\n​\t现在博客只能在自己的电脑上更新，如果换电脑了就很麻烦。配置文件主题什么的都要重新弄。所以网上找了找多台电脑同时操作的办法，我们可以利用Github的分支功能。\n\n​\t将博客文件夹下所有文件全`push`到`Github`。这样换电脑后直接`pull`就可以了。\n\n## 1. 新建分支\n\n* 1.在`Github`的`lillusory.github.io`（hexo仓库）上新建一个分支，例如`Hexo`，并切换到该分支.\n\n* 2.并在该仓库`Settings->Branches->Default branch`中将默认分支设为`Hexo`.`Hexo`分支是博客的开发环境，用来写博客，保存原始文件,`master`分支用于显示，保存生产的静态文件。\n\n* 3.新建分支后将博客目录下的所有文件上传到该分支，注意由于一个`git仓库`中不能包含其他仓库，所以需要删除掉主题文件夹中的`.git`目录。\n\n* 4.如果按照前面的博文添加了背景，则需要删掉`站点目录\\themes\\next\\source\\lib\\canvas-nest`文件夹中的`.git`目录。以后需要更新主题时，可以先克隆到本地在复制到相应目录.\n\n## 2. 写博客\n\n在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理。\n\n* 依次执行`git add .`、`git commit -m \"这里写备注\"`、`git push origin 这里写分支名字`指令将改动推送到GitHub（此时当前分支应为hexo）。\n* 然后才执行`hexo g -d`发布网站到master分支上。\n\n## 3. 博客迁移\n\n当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：\n\n* 克隆仓库\n  * 使用`git clone git@github.com:illusorycloud/illusorycloud.github.io.git`拷贝仓库（默认分支为hexo）；//修改成自己的\n* 安装插件 在前面克隆下的项目中安装插件\n  * 执行命令`npm install hexo、npm install`、`npm install hexo-deployer-git`\n\n## 4. 参考\n\n[如何在多台电脑上更新博客](https://blog.csdn.net/qq_25560423/article/details/53785707)\n\n\n\n","source":"_posts/hexo/hexo-blog-tranfer-four.md","raw":"---\ntitle: 基于Hexo搭建个人博客之（四）--管理篇\ntags:\n  - Hexo\ncategories:\n  - Hexo\nabbrlink: 33469\ndate: 2018-12-27 22:00:00\n---\n\n本章主要记录了如何通过使用`Github`的`分支功能`解决更换电脑后博客更新不方便的问题，让你的博客能在各个电脑上灵活切换。在也不用担心换电脑后博客配置丢失等问题了。\n\n<!--more-->\n\n> 这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n到此为止，我们已经完成了差不多所有的步骤。\n\n* 1.搭建博客\n* 2.优化主题\n* 3.部署收录\n\n**新问题：**\n\n​\t现在博客只能在自己的电脑上更新，如果换电脑了就很麻烦。配置文件主题什么的都要重新弄。所以网上找了找多台电脑同时操作的办法，我们可以利用Github的分支功能。\n\n​\t将博客文件夹下所有文件全`push`到`Github`。这样换电脑后直接`pull`就可以了。\n\n## 1. 新建分支\n\n* 1.在`Github`的`lillusory.github.io`（hexo仓库）上新建一个分支，例如`Hexo`，并切换到该分支.\n\n* 2.并在该仓库`Settings->Branches->Default branch`中将默认分支设为`Hexo`.`Hexo`分支是博客的开发环境，用来写博客，保存原始文件,`master`分支用于显示，保存生产的静态文件。\n\n* 3.新建分支后将博客目录下的所有文件上传到该分支，注意由于一个`git仓库`中不能包含其他仓库，所以需要删除掉主题文件夹中的`.git`目录。\n\n* 4.如果按照前面的博文添加了背景，则需要删掉`站点目录\\themes\\next\\source\\lib\\canvas-nest`文件夹中的`.git`目录。以后需要更新主题时，可以先克隆到本地在复制到相应目录.\n\n## 2. 写博客\n\n在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理。\n\n* 依次执行`git add .`、`git commit -m \"这里写备注\"`、`git push origin 这里写分支名字`指令将改动推送到GitHub（此时当前分支应为hexo）。\n* 然后才执行`hexo g -d`发布网站到master分支上。\n\n## 3. 博客迁移\n\n当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：\n\n* 克隆仓库\n  * 使用`git clone git@github.com:illusorycloud/illusorycloud.github.io.git`拷贝仓库（默认分支为hexo）；//修改成自己的\n* 安装插件 在前面克隆下的项目中安装插件\n  * 执行命令`npm install hexo、npm install`、`npm install hexo-deployer-git`\n\n## 4. 参考\n\n[如何在多台电脑上更新博客](https://blog.csdn.net/qq_25560423/article/details/53785707)\n\n\n\n","slug":"hexo/hexo-blog-tranfer-four","published":1,"updated":"2019-02-06T01:14:55.264Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv44a000t0ww46mc7ouvt","content":"<p>本章主要记录了如何通过使用<code>Github</code>的<code>分支功能</code>解决更换电脑后博客更新不方便的问题，让你的博客能在各个电脑上灵活切换。在也不用担心换电脑后博客配置丢失等问题了。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。</p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<p>到此为止，我们已经完成了差不多所有的步骤。</p>\n<ul>\n<li>1.搭建博客</li>\n<li>2.优化主题</li>\n<li>3.部署收录</li>\n</ul>\n<p><strong>新问题：</strong></p>\n<p>​    现在博客只能在自己的电脑上更新，如果换电脑了就很麻烦。配置文件主题什么的都要重新弄。所以网上找了找多台电脑同时操作的办法，我们可以利用Github的分支功能。</p>\n<p>​    将博客文件夹下所有文件全<code>push</code>到<code>Github</code>。这样换电脑后直接<code>pull</code>就可以了。</p>\n<h2 id=\"1-新建分支\"><a href=\"#1-新建分支\" class=\"headerlink\" title=\"1. 新建分支\"></a>1. 新建分支</h2><ul>\n<li><p>1.在<code>Github</code>的<code>lillusory.github.io</code>（hexo仓库）上新建一个分支，例如<code>Hexo</code>，并切换到该分支.</p>\n</li>\n<li><p>2.并在该仓库<code>Settings-&gt;Branches-&gt;Default branch</code>中将默认分支设为<code>Hexo</code>.<code>Hexo</code>分支是博客的开发环境，用来写博客，保存原始文件,<code>master</code>分支用于显示，保存生产的静态文件。</p>\n</li>\n<li><p>3.新建分支后将博客目录下的所有文件上传到该分支，注意由于一个<code>git仓库</code>中不能包含其他仓库，所以需要删除掉主题文件夹中的<code>.git</code>目录。</p>\n</li>\n<li><p>4.如果按照前面的博文添加了背景，则需要删掉<code>站点目录\\themes\\next\\source\\lib\\canvas-nest</code>文件夹中的<code>.git</code>目录。以后需要更新主题时，可以先克隆到本地在复制到相应目录.</p>\n</li>\n</ul>\n<h2 id=\"2-写博客\"><a href=\"#2-写博客\" class=\"headerlink\" title=\"2. 写博客\"></a>2. 写博客</h2><p>在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理。</p>\n<ul>\n<li>依次执行<code>git add .</code>、<code>git commit -m &quot;这里写备注&quot;</code>、<code>git push origin 这里写分支名字</code>指令将改动推送到GitHub（此时当前分支应为hexo）。</li>\n<li>然后才执行<code>hexo g -d</code>发布网站到master分支上。</li>\n</ul>\n<h2 id=\"3-博客迁移\"><a href=\"#3-博客迁移\" class=\"headerlink\" title=\"3. 博客迁移\"></a>3. 博客迁移</h2><p>当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：</p>\n<ul>\n<li>克隆仓库<ul>\n<li>使用<code>git clone git@github.com:illusorycloud/illusorycloud.github.io.git</code>拷贝仓库（默认分支为hexo）；//修改成自己的</li>\n</ul>\n</li>\n<li>安装插件 在前面克隆下的项目中安装插件<ul>\n<li>执行命令<code>npm install hexo、npm install</code>、<code>npm install hexo-deployer-git</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4. 参考\"></a>4. 参考</h2><p><a href=\"https://blog.csdn.net/qq_25560423/article/details/53785707\" target=\"_blank\" rel=\"noopener\">如何在多台电脑上更新博客</a></p>\n","site":{"data":{}},"excerpt":"<p>本章主要记录了如何通过使用<code>Github</code>的<code>分支功能</code>解决更换电脑后博客更新不方便的问题，让你的博客能在各个电脑上灵活切换。在也不用担心换电脑后博客配置丢失等问题了。</p>","more":"<blockquote>\n<p>这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。</p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<p>到此为止，我们已经完成了差不多所有的步骤。</p>\n<ul>\n<li>1.搭建博客</li>\n<li>2.优化主题</li>\n<li>3.部署收录</li>\n</ul>\n<p><strong>新问题：</strong></p>\n<p>​    现在博客只能在自己的电脑上更新，如果换电脑了就很麻烦。配置文件主题什么的都要重新弄。所以网上找了找多台电脑同时操作的办法，我们可以利用Github的分支功能。</p>\n<p>​    将博客文件夹下所有文件全<code>push</code>到<code>Github</code>。这样换电脑后直接<code>pull</code>就可以了。</p>\n<h2 id=\"1-新建分支\"><a href=\"#1-新建分支\" class=\"headerlink\" title=\"1. 新建分支\"></a>1. 新建分支</h2><ul>\n<li><p>1.在<code>Github</code>的<code>lillusory.github.io</code>（hexo仓库）上新建一个分支，例如<code>Hexo</code>，并切换到该分支.</p>\n</li>\n<li><p>2.并在该仓库<code>Settings-&gt;Branches-&gt;Default branch</code>中将默认分支设为<code>Hexo</code>.<code>Hexo</code>分支是博客的开发环境，用来写博客，保存原始文件,<code>master</code>分支用于显示，保存生产的静态文件。</p>\n</li>\n<li><p>3.新建分支后将博客目录下的所有文件上传到该分支，注意由于一个<code>git仓库</code>中不能包含其他仓库，所以需要删除掉主题文件夹中的<code>.git</code>目录。</p>\n</li>\n<li><p>4.如果按照前面的博文添加了背景，则需要删掉<code>站点目录\\themes\\next\\source\\lib\\canvas-nest</code>文件夹中的<code>.git</code>目录。以后需要更新主题时，可以先克隆到本地在复制到相应目录.</p>\n</li>\n</ul>\n<h2 id=\"2-写博客\"><a href=\"#2-写博客\" class=\"headerlink\" title=\"2. 写博客\"></a>2. 写博客</h2><p>在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理。</p>\n<ul>\n<li>依次执行<code>git add .</code>、<code>git commit -m &quot;这里写备注&quot;</code>、<code>git push origin 这里写分支名字</code>指令将改动推送到GitHub（此时当前分支应为hexo）。</li>\n<li>然后才执行<code>hexo g -d</code>发布网站到master分支上。</li>\n</ul>\n<h2 id=\"3-博客迁移\"><a href=\"#3-博客迁移\" class=\"headerlink\" title=\"3. 博客迁移\"></a>3. 博客迁移</h2><p>当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：</p>\n<ul>\n<li>克隆仓库<ul>\n<li>使用<code>git clone git@github.com:illusorycloud/illusorycloud.github.io.git</code>拷贝仓库（默认分支为hexo）；//修改成自己的</li>\n</ul>\n</li>\n<li>安装插件 在前面克隆下的项目中安装插件<ul>\n<li>执行命令<code>npm install hexo、npm install</code>、<code>npm install hexo-deployer-git</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4. 参考\"></a>4. 参考</h2><p><a href=\"https://blog.csdn.net/qq_25560423/article/details/53785707\" target=\"_blank\" rel=\"noopener\">如何在多台电脑上更新博客</a></p>"},{"title":"枚举式单例模式与序列化","abbrlink":"dff2f393","date":"2018-10-22T14:00:00.000Z","_content":"\n本文主要记录了单例模式中的枚举式写法和序列化与反序列化安全问题，通过分析源码说明了为什么枚举式单例是序列化安全的。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 问题\n\nJava中单例模式大概有五种：`饿汉式`、`静态内部类`、`懒汉式`、`双重校验锁`、`枚举式`。\n\n`静态内部类`和`双重校验锁`已经这么优秀了为什么还要有第五种`枚举式`呢？\n\n**因为前面4种都存在一个序列化和反序列化时的安全问题。将单例对象序列化后，在反序列化时会重新创建一个单例对象，违背了单例模式的初衷**。而枚举式单例则没有这个问题。更多Java单例模式信息请阅读:[Java设计模式(一)---单例模式](https://www.lixueduan.com/posts/53093.html)。\n\n## 2. 分析\n\n**序列化可能会破坏单例模式，比较每次反序列化一个序列化的对象实例时都会创建一个新的实例,枚举类单例可以解决该问题**。\n**枚举序列化是由jvm保证的，每一个枚举类型和定义的枚举变量在JVM中都是唯一的**，在枚举类型的序列化和反序列化上，Java做了特殊的规定：在序列化时Java仅仅是将枚举对象的`name`属性输出到结果中，反序列化的时候则是通过`java.lang.Enum`的`valueOf()`方法来根据名字查找枚举对象。同时，编译器是不允许任何对这种序列化机制的定制的并禁用了`writeObject`、`readObject`、`readObjectNoData`、`writeReplace`和`readResolve`等方法，从而保证了枚举实例的唯一性.\n\n**Enum类的valueOf方法**:\n\n```java\npublic static <T extends Enum<T>> T valueOf(Class<T> enumType,\n                                              String name) {\n      T result = enumType.enumConstantDirectory().get(name);\n      if (result != null)\n          return result;\n      if (name == null)\n          throw new NullPointerException(\"Name is null\");\n      throw new IllegalArgumentException(\n          \"No enum constant \" + enumType.getCanonicalName() + \".\" + name);\n  }\n```\n\n实际上通过调用`enumType(Class对象的引用)`的`enumConstantDirectory()`方法获取到的是一个Map集合，在该集合中存放了以枚举name为key和以枚举实例变量为value的Key&Value数据，因此通过name的值就可以获取到枚举实例.\n\n**`enumConstantDirectory()`方法**：\n\n```java\nMap<String, T> enumConstantDirectory() {\n        if (enumConstantDirectory == null) {\n            //getEnumConstantsShared最终通过反射调用枚举类的values方法\n            T[] universe = getEnumConstantsShared();\n            if (universe == null)\n                throw new IllegalArgumentException(\n                    getName() + \" is not an enum type\");\n            Map<String, T> m = new HashMap<>(2 * universe.length);\n            //map存放了当前enum类的所有枚举实例变量，以name为key值\n            for (T constant : universe)\n                m.put(((Enum<?>)constant).name(), constant);\n            enumConstantDirectory = m;\n        }\n        return enumConstantDirectory;\n    }\n    private volatile transient Map<String, T> enumConstantDirectory = null;\n```\n\n到这里我们也就可以看出枚举序列化确实不会重新创建新实例，jvm保证了每个枚举实例变量的唯一性。\n\n**通过反射获取构造器并创建枚举 **:\n\n```java\npublic static void main(String[] args) throws IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException {\n   Constructor<SingletonEnum> constructor=SingletonEnum.class.getDeclaredConstructor(String.class,int.class);\n   constructor.setAccessible(true);\n   //创建枚举\n   SingletonEnum singleton=constructor.newInstance(\"otherInstance\",9);\n  }\n```\n\n执行报错 \n\n```java\nException in thread \"main\" java.lang.IllegalArgumentException: Cannot reflectively create enum objects\n    at java.lang.reflect.Constructor.newInstance(Constructor.java:417)\n    at zejian.SingletonEnum.main(SingletonEnum.java:38)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)\n```\n\n显然不能使用反射创建枚举类，这是为什么呢？在`newInstance()`方法中找找原因。\n\n**newInstance()方法**： \n\n```java\npublic T newInstance(Object ... initargs)\n        throws InstantiationException, IllegalAccessException,\n               IllegalArgumentException, InvocationTargetException\n    {\n        if (!override) {\n            if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {\n                Class<?> caller = Reflection.getCallerClass();\n                checkAccess(caller, clazz, null, modifiers);\n            }\n        }\n        //这里判断Modifier.ENUM是不是枚举修饰符，如果是就抛异常\n        if ((clazz.getModifiers() & Modifier.ENUM) != 0)\n            throw new IllegalArgumentException(\"Cannot reflectively create enum objects\");\n        ConstructorAccessor ca = constructorAccessor;   // read volatile\n        if (ca == null) {\n            ca = acquireConstructorAccessor();\n        }\n        @SuppressWarnings(\"unchecked\")\n        T inst = (T) ca.newInstance(initargs);\n        return inst;\n    }\n```\n\n源码显示确实无法使用反射创建枚举实例，也就是说明了创建枚举实例只有编译器能够做到而已。\n\n## 3. 结论\n\n显然枚举单例模式确实是很不错的选择，因此我们推荐使用它。\n\n不过由于使用枚举时占用的内存常常是静态变量的两倍还多，因此android官方在内存优化方面给出的建议是尽量避免在android中使用enum。\n\n但是不管如何，关于单例，我们总是应该记住：`线程安全`，`延迟加载`，`序列化与反序列化安全`，`反射安全`是很重重要的。\n\n## 4. 参考\n\n`https://blog.csdn.net/javazejian/article/details/71333103#%E6%9E%9A%E4%B8%BE%E4%B8%8E%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F`","source":"_posts/java/java-enum-singleton.md","raw":"---\ntitle: 枚举式单例模式与序列化\ntags:\n  - Java\ncategories:\n  - Java\nabbrlink: dff2f393\ndate: 2018-10-22 22:00:00\n---\n\n本文主要记录了单例模式中的枚举式写法和序列化与反序列化安全问题，通过分析源码说明了为什么枚举式单例是序列化安全的。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 问题\n\nJava中单例模式大概有五种：`饿汉式`、`静态内部类`、`懒汉式`、`双重校验锁`、`枚举式`。\n\n`静态内部类`和`双重校验锁`已经这么优秀了为什么还要有第五种`枚举式`呢？\n\n**因为前面4种都存在一个序列化和反序列化时的安全问题。将单例对象序列化后，在反序列化时会重新创建一个单例对象，违背了单例模式的初衷**。而枚举式单例则没有这个问题。更多Java单例模式信息请阅读:[Java设计模式(一)---单例模式](https://www.lixueduan.com/posts/53093.html)。\n\n## 2. 分析\n\n**序列化可能会破坏单例模式，比较每次反序列化一个序列化的对象实例时都会创建一个新的实例,枚举类单例可以解决该问题**。\n**枚举序列化是由jvm保证的，每一个枚举类型和定义的枚举变量在JVM中都是唯一的**，在枚举类型的序列化和反序列化上，Java做了特殊的规定：在序列化时Java仅仅是将枚举对象的`name`属性输出到结果中，反序列化的时候则是通过`java.lang.Enum`的`valueOf()`方法来根据名字查找枚举对象。同时，编译器是不允许任何对这种序列化机制的定制的并禁用了`writeObject`、`readObject`、`readObjectNoData`、`writeReplace`和`readResolve`等方法，从而保证了枚举实例的唯一性.\n\n**Enum类的valueOf方法**:\n\n```java\npublic static <T extends Enum<T>> T valueOf(Class<T> enumType,\n                                              String name) {\n      T result = enumType.enumConstantDirectory().get(name);\n      if (result != null)\n          return result;\n      if (name == null)\n          throw new NullPointerException(\"Name is null\");\n      throw new IllegalArgumentException(\n          \"No enum constant \" + enumType.getCanonicalName() + \".\" + name);\n  }\n```\n\n实际上通过调用`enumType(Class对象的引用)`的`enumConstantDirectory()`方法获取到的是一个Map集合，在该集合中存放了以枚举name为key和以枚举实例变量为value的Key&Value数据，因此通过name的值就可以获取到枚举实例.\n\n**`enumConstantDirectory()`方法**：\n\n```java\nMap<String, T> enumConstantDirectory() {\n        if (enumConstantDirectory == null) {\n            //getEnumConstantsShared最终通过反射调用枚举类的values方法\n            T[] universe = getEnumConstantsShared();\n            if (universe == null)\n                throw new IllegalArgumentException(\n                    getName() + \" is not an enum type\");\n            Map<String, T> m = new HashMap<>(2 * universe.length);\n            //map存放了当前enum类的所有枚举实例变量，以name为key值\n            for (T constant : universe)\n                m.put(((Enum<?>)constant).name(), constant);\n            enumConstantDirectory = m;\n        }\n        return enumConstantDirectory;\n    }\n    private volatile transient Map<String, T> enumConstantDirectory = null;\n```\n\n到这里我们也就可以看出枚举序列化确实不会重新创建新实例，jvm保证了每个枚举实例变量的唯一性。\n\n**通过反射获取构造器并创建枚举 **:\n\n```java\npublic static void main(String[] args) throws IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException {\n   Constructor<SingletonEnum> constructor=SingletonEnum.class.getDeclaredConstructor(String.class,int.class);\n   constructor.setAccessible(true);\n   //创建枚举\n   SingletonEnum singleton=constructor.newInstance(\"otherInstance\",9);\n  }\n```\n\n执行报错 \n\n```java\nException in thread \"main\" java.lang.IllegalArgumentException: Cannot reflectively create enum objects\n    at java.lang.reflect.Constructor.newInstance(Constructor.java:417)\n    at zejian.SingletonEnum.main(SingletonEnum.java:38)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)\n```\n\n显然不能使用反射创建枚举类，这是为什么呢？在`newInstance()`方法中找找原因。\n\n**newInstance()方法**： \n\n```java\npublic T newInstance(Object ... initargs)\n        throws InstantiationException, IllegalAccessException,\n               IllegalArgumentException, InvocationTargetException\n    {\n        if (!override) {\n            if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {\n                Class<?> caller = Reflection.getCallerClass();\n                checkAccess(caller, clazz, null, modifiers);\n            }\n        }\n        //这里判断Modifier.ENUM是不是枚举修饰符，如果是就抛异常\n        if ((clazz.getModifiers() & Modifier.ENUM) != 0)\n            throw new IllegalArgumentException(\"Cannot reflectively create enum objects\");\n        ConstructorAccessor ca = constructorAccessor;   // read volatile\n        if (ca == null) {\n            ca = acquireConstructorAccessor();\n        }\n        @SuppressWarnings(\"unchecked\")\n        T inst = (T) ca.newInstance(initargs);\n        return inst;\n    }\n```\n\n源码显示确实无法使用反射创建枚举实例，也就是说明了创建枚举实例只有编译器能够做到而已。\n\n## 3. 结论\n\n显然枚举单例模式确实是很不错的选择，因此我们推荐使用它。\n\n不过由于使用枚举时占用的内存常常是静态变量的两倍还多，因此android官方在内存优化方面给出的建议是尽量避免在android中使用enum。\n\n但是不管如何，关于单例，我们总是应该记住：`线程安全`，`延迟加载`，`序列化与反序列化安全`，`反射安全`是很重重要的。\n\n## 4. 参考\n\n`https://blog.csdn.net/javazejian/article/details/71333103#%E6%9E%9A%E4%B8%BE%E4%B8%8E%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F`","slug":"java/java-enum-singleton","published":1,"updated":"2019-02-27T14:24:13.993Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv44c000w0ww46u6jg9ou","content":"<p>本文主要记录了单例模式中的枚举式写法和序列化与反序列化安全问题，通过分析源码说明了为什么枚举式单例是序列化安全的。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1. 问题\"></a>1. 问题</h2><p>Java中单例模式大概有五种：<code>饿汉式</code>、<code>静态内部类</code>、<code>懒汉式</code>、<code>双重校验锁</code>、<code>枚举式</code>。</p>\n<p><code>静态内部类</code>和<code>双重校验锁</code>已经这么优秀了为什么还要有第五种<code>枚举式</code>呢？</p>\n<p><strong>因为前面4种都存在一个序列化和反序列化时的安全问题。将单例对象序列化后，在反序列化时会重新创建一个单例对象，违背了单例模式的初衷</strong>。而枚举式单例则没有这个问题。更多Java单例模式信息请阅读:<a href=\"https://www.lixueduan.com/posts/53093.html\">Java设计模式(一)—单例模式</a>。</p>\n<h2 id=\"2-分析\"><a href=\"#2-分析\" class=\"headerlink\" title=\"2. 分析\"></a>2. 分析</h2><p><strong>序列化可能会破坏单例模式，比较每次反序列化一个序列化的对象实例时都会创建一个新的实例,枚举类单例可以解决该问题</strong>。<br><strong>枚举序列化是由jvm保证的，每一个枚举类型和定义的枚举变量在JVM中都是唯一的</strong>，在枚举类型的序列化和反序列化上，Java做了特殊的规定：在序列化时Java仅仅是将枚举对象的<code>name</code>属性输出到结果中，反序列化的时候则是通过<code>java.lang.Enum</code>的<code>valueOf()</code>方法来根据名字查找枚举对象。同时，编译器是不允许任何对这种序列化机制的定制的并禁用了<code>writeObject</code>、<code>readObject</code>、<code>readObjectNoData</code>、<code>writeReplace</code>和<code>readResolve</code>等方法，从而保证了枚举实例的唯一性.</p>\n<p><strong>Enum类的valueOf方法</strong>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Enum&lt;T&gt;&gt; <span class=\"function\">T <span class=\"title\">valueOf</span><span class=\"params\">(Class&lt;T&gt; enumType,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                              String name)</span> </span>&#123;</span><br><span class=\"line\">      T result = enumType.enumConstantDirectory().get(name);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (result != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">          <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (name == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException(<span class=\"string\">\"Name is null\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(</span><br><span class=\"line\">          <span class=\"string\">\"No enum constant \"</span> + enumType.getCanonicalName() + <span class=\"string\">\".\"</span> + name);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>实际上通过调用<code>enumType(Class对象的引用)</code>的<code>enumConstantDirectory()</code>方法获取到的是一个Map集合，在该集合中存放了以枚举name为key和以枚举实例变量为value的Key&amp;Value数据，因此通过name的值就可以获取到枚举实例.</p>\n<p><strong><code>enumConstantDirectory()</code>方法</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Map&lt;String, T&gt; <span class=\"title\">enumConstantDirectory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (enumConstantDirectory == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//getEnumConstantsShared最终通过反射调用枚举类的values方法</span></span><br><span class=\"line\">            T[] universe = getEnumConstantsShared();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (universe == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(</span><br><span class=\"line\">                    getName() + <span class=\"string\">\" is not an enum type\"</span>);</span><br><span class=\"line\">            Map&lt;String, T&gt; m = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">2</span> * universe.length);</span><br><span class=\"line\">            <span class=\"comment\">//map存放了当前enum类的所有枚举实例变量，以name为key值</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (T constant : universe)</span><br><span class=\"line\">                m.put(((Enum&lt;?&gt;)constant).name(), constant);</span><br><span class=\"line\">            enumConstantDirectory = m;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> enumConstantDirectory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">transient</span> Map&lt;String, T&gt; enumConstantDirectory = <span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></figure>\n<p>到这里我们也就可以看出枚举序列化确实不会重新创建新实例，jvm保证了每个枚举实例变量的唯一性。</p>\n<p><strong>通过反射获取构造器并创建枚举 </strong>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException </span>&#123;</span><br><span class=\"line\">   Constructor&lt;SingletonEnum&gt; constructor=SingletonEnum.class.getDeclaredConstructor(String.class,<span class=\"keyword\">int</span>.class);</span><br><span class=\"line\">   constructor.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">   <span class=\"comment\">//创建枚举</span></span><br><span class=\"line\">   SingletonEnum singleton=constructor.newInstance(<span class=\"string\">\"otherInstance\"</span>,<span class=\"number\">9</span>);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>执行报错 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread <span class=\"string\">\"main\"</span> java.lang.IllegalArgumentException: Cannot reflectively create <span class=\"keyword\">enum</span> objects</span><br><span class=\"line\">    at java.lang.reflect.Constructor.newInstance(Constructor.java:<span class=\"number\">417</span>)</span><br><span class=\"line\">    at zejian.SingletonEnum.main(SingletonEnum.java:<span class=\"number\">38</span>)</span><br><span class=\"line\">    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class=\"number\">62</span>)</span><br><span class=\"line\">    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class=\"number\">43</span>)</span><br><span class=\"line\">    at java.lang.reflect.Method.invoke(Method.java:<span class=\"number\">498</span>)</span><br><span class=\"line\">    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:<span class=\"number\">144</span>)</span><br></pre></td></tr></table></figure>\n<p>显然不能使用反射创建枚举类，这是为什么呢？在<code>newInstance()</code>方法中找找原因。</p>\n<p><strong>newInstance()方法</strong>： </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">newInstance</span><span class=\"params\">(Object ... initargs)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> InstantiationException, IllegalAccessException,</span></span><br><span class=\"line\"><span class=\"function\">               IllegalArgumentException, InvocationTargetException</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!override) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Reflection.quickCheckMemberAccess(clazz, modifiers)) &#123;</span><br><span class=\"line\">                Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class=\"line\">                checkAccess(caller, clazz, <span class=\"keyword\">null</span>, modifiers);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//这里判断Modifier.ENUM是不是枚举修饰符，如果是就抛异常</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((clazz.getModifiers() &amp; Modifier.ENUM) != <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Cannot reflectively create enum objects\"</span>);</span><br><span class=\"line\">        ConstructorAccessor ca = constructorAccessor;   <span class=\"comment\">// read volatile</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ca == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            ca = acquireConstructorAccessor();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">        T inst = (T) ca.newInstance(initargs);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inst;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>源码显示确实无法使用反射创建枚举实例，也就是说明了创建枚举实例只有编译器能够做到而已。</p>\n<h2 id=\"3-结论\"><a href=\"#3-结论\" class=\"headerlink\" title=\"3. 结论\"></a>3. 结论</h2><p>显然枚举单例模式确实是很不错的选择，因此我们推荐使用它。</p>\n<p>不过由于使用枚举时占用的内存常常是静态变量的两倍还多，因此android官方在内存优化方面给出的建议是尽量避免在android中使用enum。</p>\n<p>但是不管如何，关于单例，我们总是应该记住：<code>线程安全</code>，<code>延迟加载</code>，<code>序列化与反序列化安全</code>，<code>反射安全</code>是很重重要的。</p>\n<h2 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4. 参考\"></a>4. 参考</h2><p><code>https://blog.csdn.net/javazejian/article/details/71333103#%E6%9E%9A%E4%B8%BE%E4%B8%8E%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F</code></p>\n","site":{"data":{}},"excerpt":"<p>本文主要记录了单例模式中的枚举式写法和序列化与反序列化安全问题，通过分析源码说明了为什么枚举式单例是序列化安全的。</p>","more":"<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1. 问题\"></a>1. 问题</h2><p>Java中单例模式大概有五种：<code>饿汉式</code>、<code>静态内部类</code>、<code>懒汉式</code>、<code>双重校验锁</code>、<code>枚举式</code>。</p>\n<p><code>静态内部类</code>和<code>双重校验锁</code>已经这么优秀了为什么还要有第五种<code>枚举式</code>呢？</p>\n<p><strong>因为前面4种都存在一个序列化和反序列化时的安全问题。将单例对象序列化后，在反序列化时会重新创建一个单例对象，违背了单例模式的初衷</strong>。而枚举式单例则没有这个问题。更多Java单例模式信息请阅读:<a href=\"https://www.lixueduan.com/posts/53093.html\">Java设计模式(一)—单例模式</a>。</p>\n<h2 id=\"2-分析\"><a href=\"#2-分析\" class=\"headerlink\" title=\"2. 分析\"></a>2. 分析</h2><p><strong>序列化可能会破坏单例模式，比较每次反序列化一个序列化的对象实例时都会创建一个新的实例,枚举类单例可以解决该问题</strong>。<br><strong>枚举序列化是由jvm保证的，每一个枚举类型和定义的枚举变量在JVM中都是唯一的</strong>，在枚举类型的序列化和反序列化上，Java做了特殊的规定：在序列化时Java仅仅是将枚举对象的<code>name</code>属性输出到结果中，反序列化的时候则是通过<code>java.lang.Enum</code>的<code>valueOf()</code>方法来根据名字查找枚举对象。同时，编译器是不允许任何对这种序列化机制的定制的并禁用了<code>writeObject</code>、<code>readObject</code>、<code>readObjectNoData</code>、<code>writeReplace</code>和<code>readResolve</code>等方法，从而保证了枚举实例的唯一性.</p>\n<p><strong>Enum类的valueOf方法</strong>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Enum&lt;T&gt;&gt; <span class=\"function\">T <span class=\"title\">valueOf</span><span class=\"params\">(Class&lt;T&gt; enumType,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                              String name)</span> </span>&#123;</span><br><span class=\"line\">      T result = enumType.enumConstantDirectory().get(name);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (result != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">          <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (name == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException(<span class=\"string\">\"Name is null\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(</span><br><span class=\"line\">          <span class=\"string\">\"No enum constant \"</span> + enumType.getCanonicalName() + <span class=\"string\">\".\"</span> + name);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>实际上通过调用<code>enumType(Class对象的引用)</code>的<code>enumConstantDirectory()</code>方法获取到的是一个Map集合，在该集合中存放了以枚举name为key和以枚举实例变量为value的Key&amp;Value数据，因此通过name的值就可以获取到枚举实例.</p>\n<p><strong><code>enumConstantDirectory()</code>方法</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Map&lt;String, T&gt; <span class=\"title\">enumConstantDirectory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (enumConstantDirectory == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//getEnumConstantsShared最终通过反射调用枚举类的values方法</span></span><br><span class=\"line\">            T[] universe = getEnumConstantsShared();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (universe == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(</span><br><span class=\"line\">                    getName() + <span class=\"string\">\" is not an enum type\"</span>);</span><br><span class=\"line\">            Map&lt;String, T&gt; m = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">2</span> * universe.length);</span><br><span class=\"line\">            <span class=\"comment\">//map存放了当前enum类的所有枚举实例变量，以name为key值</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (T constant : universe)</span><br><span class=\"line\">                m.put(((Enum&lt;?&gt;)constant).name(), constant);</span><br><span class=\"line\">            enumConstantDirectory = m;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> enumConstantDirectory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">transient</span> Map&lt;String, T&gt; enumConstantDirectory = <span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></figure>\n<p>到这里我们也就可以看出枚举序列化确实不会重新创建新实例，jvm保证了每个枚举实例变量的唯一性。</p>\n<p><strong>通过反射获取构造器并创建枚举 </strong>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException </span>&#123;</span><br><span class=\"line\">   Constructor&lt;SingletonEnum&gt; constructor=SingletonEnum.class.getDeclaredConstructor(String.class,<span class=\"keyword\">int</span>.class);</span><br><span class=\"line\">   constructor.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">   <span class=\"comment\">//创建枚举</span></span><br><span class=\"line\">   SingletonEnum singleton=constructor.newInstance(<span class=\"string\">\"otherInstance\"</span>,<span class=\"number\">9</span>);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>执行报错 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread <span class=\"string\">\"main\"</span> java.lang.IllegalArgumentException: Cannot reflectively create <span class=\"keyword\">enum</span> objects</span><br><span class=\"line\">    at java.lang.reflect.Constructor.newInstance(Constructor.java:<span class=\"number\">417</span>)</span><br><span class=\"line\">    at zejian.SingletonEnum.main(SingletonEnum.java:<span class=\"number\">38</span>)</span><br><span class=\"line\">    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class=\"number\">62</span>)</span><br><span class=\"line\">    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class=\"number\">43</span>)</span><br><span class=\"line\">    at java.lang.reflect.Method.invoke(Method.java:<span class=\"number\">498</span>)</span><br><span class=\"line\">    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:<span class=\"number\">144</span>)</span><br></pre></td></tr></table></figure>\n<p>显然不能使用反射创建枚举类，这是为什么呢？在<code>newInstance()</code>方法中找找原因。</p>\n<p><strong>newInstance()方法</strong>： </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">newInstance</span><span class=\"params\">(Object ... initargs)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> InstantiationException, IllegalAccessException,</span></span><br><span class=\"line\"><span class=\"function\">               IllegalArgumentException, InvocationTargetException</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!override) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Reflection.quickCheckMemberAccess(clazz, modifiers)) &#123;</span><br><span class=\"line\">                Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class=\"line\">                checkAccess(caller, clazz, <span class=\"keyword\">null</span>, modifiers);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//这里判断Modifier.ENUM是不是枚举修饰符，如果是就抛异常</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((clazz.getModifiers() &amp; Modifier.ENUM) != <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Cannot reflectively create enum objects\"</span>);</span><br><span class=\"line\">        ConstructorAccessor ca = constructorAccessor;   <span class=\"comment\">// read volatile</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ca == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            ca = acquireConstructorAccessor();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">        T inst = (T) ca.newInstance(initargs);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inst;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>源码显示确实无法使用反射创建枚举实例，也就是说明了创建枚举实例只有编译器能够做到而已。</p>\n<h2 id=\"3-结论\"><a href=\"#3-结论\" class=\"headerlink\" title=\"3. 结论\"></a>3. 结论</h2><p>显然枚举单例模式确实是很不错的选择，因此我们推荐使用它。</p>\n<p>不过由于使用枚举时占用的内存常常是静态变量的两倍还多，因此android官方在内存优化方面给出的建议是尽量避免在android中使用enum。</p>\n<p>但是不管如何，关于单例，我们总是应该记住：<code>线程安全</code>，<code>延迟加载</code>，<code>序列化与反序列化安全</code>，<code>反射安全</code>是很重重要的。</p>\n<h2 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4. 参考\"></a>4. 参考</h2><p><code>https://blog.csdn.net/javazejian/article/details/71333103#%E6%9E%9A%E4%B8%BE%E4%B8%8E%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F</code></p>"},{"title":"Java设计模式(十一)---模板方法模式","abbrlink":"57ae709c","date":"2018-10-24T14:00:00.000Z","_content":"\n本文主要介绍了Java23种设计模式中的模板方法模式，并结合实例描述了模板方法模式的具体实现和优缺点分析。\n\n<!--more-->\n\n> **Java设计模式系列文章目录**\n>\n> [Java设计模式(一)---单例模式](https://www.lixueduan.com/posts/53093.html)\n>\n> [Java设计模式(二)---工厂模式](https://www.lixueduan.com/posts/34710.html)\n>\n> [Java设计模式(三)---建造者模式](https://www.lixueduan.com/posts/52453.html)\n>\n> [Java设计模式(四)---原型模式](https://www.lixueduan.com/posts/24b6c0e4.html)\n>\n> [Java设计模式(五)---适配器模式](https://www.lixueduan.com/posts/f444ac9.html)\n>\n> [Java设计模式(六)---装饰者模式](https://www.lixueduan.com/posts/75903408.html)\n>\n> [Java设计模式(七)---代理模式](https://www.lixueduan.com/posts/ae2a93bd.html)\n>\n> [Java设计模式(八)---外观模式](https://www.lixueduan.com/posts/22a51705.html)\n>\n> [Java设计模式(九)---享元模式](https://www.lixueduan.com/posts/34e634e7.html)\n>\n> [Java设计模式(十)---策略模式](https://www.lixueduan.com/posts/a7982bdc.html)\n>\n> [Java设计模式(十一)---模板方法模式](https://www.lixueduan.com/posts/57ae709c.html)\n>\n> [Java设计模式(十二)---观察者模式](https://www.lixueduan.com/posts/48bcf013.html)\n>\n> [Java设计模式(十三)---组合模式](https://www.lixueduan.com/posts/a340063f.html)\n>\n> ........\n>\n> Demo下载--> [Github](https://github.com/illusorycloud/design-pattern)\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 简介\n\n**模板方法模式是类的行为模式。**\n\n>  准备一个抽象类，将部分逻辑以具体方法以及具体构造函数的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。\n>\n>  这就是模板方法模式的用意。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/eleven-template.png)\n\n　　**抽象模板(Abstract Template)角色有如下责任：**\n\n* 定义了一个或多个抽象操作，以便让子类实现。这些抽象操作叫做基本操作，它们是一个顶级逻辑的组成步骤。\n\n* 定义并实现了一个模板方法。这个模板方法一般是一个具体方法，它给出了一个顶级逻辑的骨架，而逻辑的组成步骤在相应的抽象操作中，推迟到子类实现。顶级逻辑也有可能调用一些具体方法。\n\n　　**具体模板(Concrete Template)角色又如下责任：**\n\n* 实现父类所定义的一个或多个抽象方法，它们是一个顶级逻辑的组成步骤。\n\n* 每一个抽象模板角色都可以有任意多个具体模板角色与之对应，而每一个具体模板角色都可以给出这些抽象方法（也就是顶级逻辑的组成步骤）的不同实现，从而使得顶级逻辑的实现各不相同。\n\n## 2. 代码实现\n\n```java\n假设泡茶喝咖啡都需有四个步骤：1.烧水 2.泡茶/冲咖啡 3.倒入杯子 4.添加调味品\n那么可以写一个抽象类，因为大多数饮料都可以看成这四个步骤。\n然后烧水和倒入杯子这两个步骤都是相同的，那么在抽象类中可以直接实现，然后其他特殊操作则由子类具体实现。\n/**\n * 模板方法模式\n * 抽象模板角色\n *\n * @author illusoryCloud\n */\npublic abstract class BaseCreatDrink {\n    /**\n     * 按顺序调用其他方法\n     */\n    public void doCreate() {\n        boilWater();\n        brew();\n        pourInCup();\n        if (isNeedCondiments())\n        {\n            addCondiments();\n        }\n    }\n\n    /**\n     * 烧开水\n     * 通用的方法 直接实现\n     */\n    private void boilWater() {\n        System.out.println(\"烧开水~\");\n    }\n\n    /**\n     * 特殊操作，在子类中具体实现\n     */\n    public abstract void brew();\n\n\n    /**\n     * 倒入杯中\n     * 通用的方法 直接实现\n     */\n    private void pourInCup() {\n        System.out.println(\"倒入杯中~\");\n    }\n\n    /**\n     * 添加调味品 茶里面加柠檬 咖啡中加糖等等\n     * 特殊操作\n     * 具体由子类实现\n     */\n    public abstract void addCondiments();\n\n    /**\n     * 钩子方法，决定某些算法步骤是否挂钩在算法中\n     * 子类可以重写该类来改变算法或者逻辑\n     */\n    public boolean isNeedCondiments() {\n        return true;\n    }\n}\n/**\n * 具体模板角色\n * 纯茶\n *\n * @author illusoryCloud\n */\npublic class CreatTea extends BaseCreatDrink {\n    @Override\n    public void brew() {\n        System.out.println(\"泡茶~\");\n    }\n\n    @Override\n    public void addCondiments() {\n        System.out.println(\"加柠檬~\");\n    }\n}\n/**\n * 具体模板角色\n * 茶\n *\n * @author illusoryCloud\n */\npublic class CreatPureTea extends BaseCreatDrink {\n    @Override\n    public void brew() {\n        System.out.println(\"泡茶~\");\n    }\n\n    @Override\n    public void addCondiments() {\n        System.out.println(\"加柠檬~\");\n    }\n\n    /**\n     * 通过重写钩子方法来改变算法\n     * 返回true则添加调味品\n     * 返回false则不加\n     * 默认为true\n     *\n     * @return isNeedCondiments\n     */\n    @Override\n    public boolean isNeedCondiments() {\n        return false;\n    }\n}\n/**\n * 具体模板角色\n * 咖啡\n *\n * @author illusoryCloud\n */\npublic class CreatCoffee extends BaseCreatDrink {\n    @Override\n    public void brew() {\n        System.out.println(\"冲咖啡~\");\n    }\n\n    @Override\n    public void addCondiments() {\n        System.out.println(\"加糖~\");\n    }\n}\n/**\n * 模板方法模式 测试类\n *\n * @author illusoryCloud\n */\npublic class TemplateTest {\n    @Test\n    public void templateTest() {\n        System.out.println(\"-------茶-------\");\n        CreatTea tea = new CreatTea();\n        tea.doCreate();\n        System.out.println(\"-------咖啡-------\");\n        CreatCoffee coffee = new CreatCoffee();\n        coffee.doCreate();\n        System.out.println(\"-------纯茶-------\");\n        CreatPureTea pureTea = new CreatPureTea();\n        pureTea.doCreate();\n    }\n}\n//输出\n往锅里加的是白菜~\n炒啊炒啊炒~\n菜炒好了，起锅~\n往锅里加的是肉~\n炒啊炒啊炒~\n菜炒好了，起锅~\n```\n\n## 3. 总结\n\n**模板方法模式在Java中的应用**\n\n最常见的就是Servlet了。\n\n**HttpServlet担任抽象模板角色**\n\n　　　　模板方法：由service()方法担任。\n\n　　　　基本方法：由doPost()、doGet()等方法担任。\n\n**MyServlet担任具体模板角色**\n\n自定义的servlet置换掉了父类HttpServlet中七个基本方法中的其中两个，分别是doGet()和doPost()。\n\n## 4. 参考\n\n`https://www.cnblogs.com/qiumingcheng/p/5219664.html`\n\n`https://www.cnblogs.com/yanlong300/p/8446261.html`","source":"_posts/design_pattern/eleven-template.md","raw":"---\ntitle: Java设计模式(十一)---模板方法模式\ntags:\n  - 设计模式\ncategories:\n  - 设计模式\nabbrlink: 57ae709c\ndate: 2018-10-24 22:00:00\n---\n\n本文主要介绍了Java23种设计模式中的模板方法模式，并结合实例描述了模板方法模式的具体实现和优缺点分析。\n\n<!--more-->\n\n> **Java设计模式系列文章目录**\n>\n> [Java设计模式(一)---单例模式](https://www.lixueduan.com/posts/53093.html)\n>\n> [Java设计模式(二)---工厂模式](https://www.lixueduan.com/posts/34710.html)\n>\n> [Java设计模式(三)---建造者模式](https://www.lixueduan.com/posts/52453.html)\n>\n> [Java设计模式(四)---原型模式](https://www.lixueduan.com/posts/24b6c0e4.html)\n>\n> [Java设计模式(五)---适配器模式](https://www.lixueduan.com/posts/f444ac9.html)\n>\n> [Java设计模式(六)---装饰者模式](https://www.lixueduan.com/posts/75903408.html)\n>\n> [Java设计模式(七)---代理模式](https://www.lixueduan.com/posts/ae2a93bd.html)\n>\n> [Java设计模式(八)---外观模式](https://www.lixueduan.com/posts/22a51705.html)\n>\n> [Java设计模式(九)---享元模式](https://www.lixueduan.com/posts/34e634e7.html)\n>\n> [Java设计模式(十)---策略模式](https://www.lixueduan.com/posts/a7982bdc.html)\n>\n> [Java设计模式(十一)---模板方法模式](https://www.lixueduan.com/posts/57ae709c.html)\n>\n> [Java设计模式(十二)---观察者模式](https://www.lixueduan.com/posts/48bcf013.html)\n>\n> [Java设计模式(十三)---组合模式](https://www.lixueduan.com/posts/a340063f.html)\n>\n> ........\n>\n> Demo下载--> [Github](https://github.com/illusorycloud/design-pattern)\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 简介\n\n**模板方法模式是类的行为模式。**\n\n>  准备一个抽象类，将部分逻辑以具体方法以及具体构造函数的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。\n>\n>  这就是模板方法模式的用意。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/eleven-template.png)\n\n　　**抽象模板(Abstract Template)角色有如下责任：**\n\n* 定义了一个或多个抽象操作，以便让子类实现。这些抽象操作叫做基本操作，它们是一个顶级逻辑的组成步骤。\n\n* 定义并实现了一个模板方法。这个模板方法一般是一个具体方法，它给出了一个顶级逻辑的骨架，而逻辑的组成步骤在相应的抽象操作中，推迟到子类实现。顶级逻辑也有可能调用一些具体方法。\n\n　　**具体模板(Concrete Template)角色又如下责任：**\n\n* 实现父类所定义的一个或多个抽象方法，它们是一个顶级逻辑的组成步骤。\n\n* 每一个抽象模板角色都可以有任意多个具体模板角色与之对应，而每一个具体模板角色都可以给出这些抽象方法（也就是顶级逻辑的组成步骤）的不同实现，从而使得顶级逻辑的实现各不相同。\n\n## 2. 代码实现\n\n```java\n假设泡茶喝咖啡都需有四个步骤：1.烧水 2.泡茶/冲咖啡 3.倒入杯子 4.添加调味品\n那么可以写一个抽象类，因为大多数饮料都可以看成这四个步骤。\n然后烧水和倒入杯子这两个步骤都是相同的，那么在抽象类中可以直接实现，然后其他特殊操作则由子类具体实现。\n/**\n * 模板方法模式\n * 抽象模板角色\n *\n * @author illusoryCloud\n */\npublic abstract class BaseCreatDrink {\n    /**\n     * 按顺序调用其他方法\n     */\n    public void doCreate() {\n        boilWater();\n        brew();\n        pourInCup();\n        if (isNeedCondiments())\n        {\n            addCondiments();\n        }\n    }\n\n    /**\n     * 烧开水\n     * 通用的方法 直接实现\n     */\n    private void boilWater() {\n        System.out.println(\"烧开水~\");\n    }\n\n    /**\n     * 特殊操作，在子类中具体实现\n     */\n    public abstract void brew();\n\n\n    /**\n     * 倒入杯中\n     * 通用的方法 直接实现\n     */\n    private void pourInCup() {\n        System.out.println(\"倒入杯中~\");\n    }\n\n    /**\n     * 添加调味品 茶里面加柠檬 咖啡中加糖等等\n     * 特殊操作\n     * 具体由子类实现\n     */\n    public abstract void addCondiments();\n\n    /**\n     * 钩子方法，决定某些算法步骤是否挂钩在算法中\n     * 子类可以重写该类来改变算法或者逻辑\n     */\n    public boolean isNeedCondiments() {\n        return true;\n    }\n}\n/**\n * 具体模板角色\n * 纯茶\n *\n * @author illusoryCloud\n */\npublic class CreatTea extends BaseCreatDrink {\n    @Override\n    public void brew() {\n        System.out.println(\"泡茶~\");\n    }\n\n    @Override\n    public void addCondiments() {\n        System.out.println(\"加柠檬~\");\n    }\n}\n/**\n * 具体模板角色\n * 茶\n *\n * @author illusoryCloud\n */\npublic class CreatPureTea extends BaseCreatDrink {\n    @Override\n    public void brew() {\n        System.out.println(\"泡茶~\");\n    }\n\n    @Override\n    public void addCondiments() {\n        System.out.println(\"加柠檬~\");\n    }\n\n    /**\n     * 通过重写钩子方法来改变算法\n     * 返回true则添加调味品\n     * 返回false则不加\n     * 默认为true\n     *\n     * @return isNeedCondiments\n     */\n    @Override\n    public boolean isNeedCondiments() {\n        return false;\n    }\n}\n/**\n * 具体模板角色\n * 咖啡\n *\n * @author illusoryCloud\n */\npublic class CreatCoffee extends BaseCreatDrink {\n    @Override\n    public void brew() {\n        System.out.println(\"冲咖啡~\");\n    }\n\n    @Override\n    public void addCondiments() {\n        System.out.println(\"加糖~\");\n    }\n}\n/**\n * 模板方法模式 测试类\n *\n * @author illusoryCloud\n */\npublic class TemplateTest {\n    @Test\n    public void templateTest() {\n        System.out.println(\"-------茶-------\");\n        CreatTea tea = new CreatTea();\n        tea.doCreate();\n        System.out.println(\"-------咖啡-------\");\n        CreatCoffee coffee = new CreatCoffee();\n        coffee.doCreate();\n        System.out.println(\"-------纯茶-------\");\n        CreatPureTea pureTea = new CreatPureTea();\n        pureTea.doCreate();\n    }\n}\n//输出\n往锅里加的是白菜~\n炒啊炒啊炒~\n菜炒好了，起锅~\n往锅里加的是肉~\n炒啊炒啊炒~\n菜炒好了，起锅~\n```\n\n## 3. 总结\n\n**模板方法模式在Java中的应用**\n\n最常见的就是Servlet了。\n\n**HttpServlet担任抽象模板角色**\n\n　　　　模板方法：由service()方法担任。\n\n　　　　基本方法：由doPost()、doGet()等方法担任。\n\n**MyServlet担任具体模板角色**\n\n自定义的servlet置换掉了父类HttpServlet中七个基本方法中的其中两个，分别是doGet()和doPost()。\n\n## 4. 参考\n\n`https://www.cnblogs.com/qiumingcheng/p/5219664.html`\n\n`https://www.cnblogs.com/yanlong300/p/8446261.html`","slug":"design_pattern/eleven-template","published":1,"updated":"2019-03-04T15:35:54.648Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv44i00110ww4q5p13kqf","content":"<p>本文主要介绍了Java23种设计模式中的模板方法模式，并结合实例描述了模板方法模式的具体实现和优缺点分析。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p><strong>Java设计模式系列文章目录</strong></p>\n<p><a href=\"https://www.lixueduan.com/posts/53093.html\">Java设计模式(一)—单例模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34710.html\">Java设计模式(二)—工厂模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/52453.html\">Java设计模式(三)—建造者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/24b6c0e4.html\">Java设计模式(四)—原型模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/f444ac9.html\">Java设计模式(五)—适配器模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/75903408.html\">Java设计模式(六)—装饰者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/ae2a93bd.html\">Java设计模式(七)—代理模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/22a51705.html\">Java设计模式(八)—外观模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34e634e7.html\">Java设计模式(九)—享元模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a7982bdc.html\">Java设计模式(十)—策略模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/57ae709c.html\">Java设计模式(十一)—模板方法模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/48bcf013.html\">Java设计模式(十二)—观察者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a340063f.html\">Java设计模式(十三)—组合模式</a></p>\n<p>……..</p>\n<p>Demo下载–&gt; <a href=\"https://github.com/illusorycloud/design-pattern\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><p><strong>模板方法模式是类的行为模式。</strong></p>\n<blockquote>\n<p> 准备一个抽象类，将部分逻辑以具体方法以及具体构造函数的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。</p>\n<p> 这就是模板方法模式的用意。</p>\n</blockquote>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/eleven-template.png\" alt=\"\"></p>\n<p>　　<strong>抽象模板(Abstract Template)角色有如下责任：</strong></p>\n<ul>\n<li><p>定义了一个或多个抽象操作，以便让子类实现。这些抽象操作叫做基本操作，它们是一个顶级逻辑的组成步骤。</p>\n</li>\n<li><p>定义并实现了一个模板方法。这个模板方法一般是一个具体方法，它给出了一个顶级逻辑的骨架，而逻辑的组成步骤在相应的抽象操作中，推迟到子类实现。顶级逻辑也有可能调用一些具体方法。</p>\n</li>\n</ul>\n<p>　　<strong>具体模板(Concrete Template)角色又如下责任：</strong></p>\n<ul>\n<li><p>实现父类所定义的一个或多个抽象方法，它们是一个顶级逻辑的组成步骤。</p>\n</li>\n<li><p>每一个抽象模板角色都可以有任意多个具体模板角色与之对应，而每一个具体模板角色都可以给出这些抽象方法（也就是顶级逻辑的组成步骤）的不同实现，从而使得顶级逻辑的实现各不相同。</p>\n</li>\n</ul>\n<h2 id=\"2-代码实现\"><a href=\"#2-代码实现\" class=\"headerlink\" title=\"2. 代码实现\"></a>2. 代码实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">假设泡茶喝咖啡都需有四个步骤：<span class=\"number\">1</span>.烧水 <span class=\"number\">2</span>.泡茶/冲咖啡 <span class=\"number\">3</span>.倒入杯子 <span class=\"number\">4</span>.添加调味品</span><br><span class=\"line\">那么可以写一个抽象类，因为大多数饮料都可以看成这四个步骤。</span><br><span class=\"line\">然后烧水和倒入杯子这两个步骤都是相同的，那么在抽象类中可以直接实现，然后其他特殊操作则由子类具体实现。</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 模板方法模式</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象模板角色</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseCreatDrink</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 按顺序调用其他方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        boilWater();</span><br><span class=\"line\">        brew();</span><br><span class=\"line\">        pourInCup();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isNeedCondiments())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            addCondiments();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 烧开水</span></span><br><span class=\"line\"><span class=\"comment\">     * 通用的方法 直接实现</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">boilWater</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"烧开水~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 特殊操作，在子类中具体实现</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">brew</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 倒入杯中</span></span><br><span class=\"line\"><span class=\"comment\">     * 通用的方法 直接实现</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">pourInCup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"倒入杯中~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加调味品 茶里面加柠檬 咖啡中加糖等等</span></span><br><span class=\"line\"><span class=\"comment\">     * 特殊操作</span></span><br><span class=\"line\"><span class=\"comment\">     * 具体由子类实现</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">addCondiments</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 钩子方法，决定某些算法步骤是否挂钩在算法中</span></span><br><span class=\"line\"><span class=\"comment\">     * 子类可以重写该类来改变算法或者逻辑</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNeedCondiments</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体模板角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 纯茶</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CreatTea</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseCreatDrink</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">brew</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"泡茶~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addCondiments</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"加柠檬~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体模板角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 茶</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CreatPureTea</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseCreatDrink</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">brew</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"泡茶~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addCondiments</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"加柠檬~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过重写钩子方法来改变算法</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回true则添加调味品</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回false则不加</span></span><br><span class=\"line\"><span class=\"comment\">     * 默认为true</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> isNeedCondiments</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNeedCondiments</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体模板角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 咖啡</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CreatCoffee</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseCreatDrink</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">brew</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"冲咖啡~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addCondiments</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"加糖~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 模板方法模式 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TemplateTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">templateTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"-------茶-------\"</span>);</span><br><span class=\"line\">        CreatTea tea = <span class=\"keyword\">new</span> CreatTea();</span><br><span class=\"line\">        tea.doCreate();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"-------咖啡-------\"</span>);</span><br><span class=\"line\">        CreatCoffee coffee = <span class=\"keyword\">new</span> CreatCoffee();</span><br><span class=\"line\">        coffee.doCreate();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"-------纯茶-------\"</span>);</span><br><span class=\"line\">        CreatPureTea pureTea = <span class=\"keyword\">new</span> CreatPureTea();</span><br><span class=\"line\">        pureTea.doCreate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\">往锅里加的是白菜~</span><br><span class=\"line\">炒啊炒啊炒~</span><br><span class=\"line\">菜炒好了，起锅~</span><br><span class=\"line\">往锅里加的是肉~</span><br><span class=\"line\">炒啊炒啊炒~</span><br><span class=\"line\">菜炒好了，起锅~</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h2><p><strong>模板方法模式在Java中的应用</strong></p>\n<p>最常见的就是Servlet了。</p>\n<p><strong>HttpServlet担任抽象模板角色</strong></p>\n<p>　　　　模板方法：由service()方法担任。</p>\n<p>　　　　基本方法：由doPost()、doGet()等方法担任。</p>\n<p><strong>MyServlet担任具体模板角色</strong></p>\n<p>自定义的servlet置换掉了父类HttpServlet中七个基本方法中的其中两个，分别是doGet()和doPost()。</p>\n<h2 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4. 参考\"></a>4. 参考</h2><p><code>https://www.cnblogs.com/qiumingcheng/p/5219664.html</code></p>\n<p><code>https://www.cnblogs.com/yanlong300/p/8446261.html</code></p>\n","site":{"data":{}},"excerpt":"<p>本文主要介绍了Java23种设计模式中的模板方法模式，并结合实例描述了模板方法模式的具体实现和优缺点分析。</p>","more":"<blockquote>\n<p><strong>Java设计模式系列文章目录</strong></p>\n<p><a href=\"https://www.lixueduan.com/posts/53093.html\">Java设计模式(一)—单例模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34710.html\">Java设计模式(二)—工厂模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/52453.html\">Java设计模式(三)—建造者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/24b6c0e4.html\">Java设计模式(四)—原型模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/f444ac9.html\">Java设计模式(五)—适配器模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/75903408.html\">Java设计模式(六)—装饰者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/ae2a93bd.html\">Java设计模式(七)—代理模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/22a51705.html\">Java设计模式(八)—外观模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34e634e7.html\">Java设计模式(九)—享元模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a7982bdc.html\">Java设计模式(十)—策略模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/57ae709c.html\">Java设计模式(十一)—模板方法模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/48bcf013.html\">Java设计模式(十二)—观察者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a340063f.html\">Java设计模式(十三)—组合模式</a></p>\n<p>……..</p>\n<p>Demo下载–&gt; <a href=\"https://github.com/illusorycloud/design-pattern\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><p><strong>模板方法模式是类的行为模式。</strong></p>\n<blockquote>\n<p> 准备一个抽象类，将部分逻辑以具体方法以及具体构造函数的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。</p>\n<p> 这就是模板方法模式的用意。</p>\n</blockquote>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/eleven-template.png\" alt=\"\"></p>\n<p>　　<strong>抽象模板(Abstract Template)角色有如下责任：</strong></p>\n<ul>\n<li><p>定义了一个或多个抽象操作，以便让子类实现。这些抽象操作叫做基本操作，它们是一个顶级逻辑的组成步骤。</p>\n</li>\n<li><p>定义并实现了一个模板方法。这个模板方法一般是一个具体方法，它给出了一个顶级逻辑的骨架，而逻辑的组成步骤在相应的抽象操作中，推迟到子类实现。顶级逻辑也有可能调用一些具体方法。</p>\n</li>\n</ul>\n<p>　　<strong>具体模板(Concrete Template)角色又如下责任：</strong></p>\n<ul>\n<li><p>实现父类所定义的一个或多个抽象方法，它们是一个顶级逻辑的组成步骤。</p>\n</li>\n<li><p>每一个抽象模板角色都可以有任意多个具体模板角色与之对应，而每一个具体模板角色都可以给出这些抽象方法（也就是顶级逻辑的组成步骤）的不同实现，从而使得顶级逻辑的实现各不相同。</p>\n</li>\n</ul>\n<h2 id=\"2-代码实现\"><a href=\"#2-代码实现\" class=\"headerlink\" title=\"2. 代码实现\"></a>2. 代码实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">假设泡茶喝咖啡都需有四个步骤：<span class=\"number\">1</span>.烧水 <span class=\"number\">2</span>.泡茶/冲咖啡 <span class=\"number\">3</span>.倒入杯子 <span class=\"number\">4</span>.添加调味品</span><br><span class=\"line\">那么可以写一个抽象类，因为大多数饮料都可以看成这四个步骤。</span><br><span class=\"line\">然后烧水和倒入杯子这两个步骤都是相同的，那么在抽象类中可以直接实现，然后其他特殊操作则由子类具体实现。</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 模板方法模式</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象模板角色</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseCreatDrink</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 按顺序调用其他方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        boilWater();</span><br><span class=\"line\">        brew();</span><br><span class=\"line\">        pourInCup();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isNeedCondiments())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            addCondiments();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 烧开水</span></span><br><span class=\"line\"><span class=\"comment\">     * 通用的方法 直接实现</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">boilWater</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"烧开水~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 特殊操作，在子类中具体实现</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">brew</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 倒入杯中</span></span><br><span class=\"line\"><span class=\"comment\">     * 通用的方法 直接实现</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">pourInCup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"倒入杯中~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加调味品 茶里面加柠檬 咖啡中加糖等等</span></span><br><span class=\"line\"><span class=\"comment\">     * 特殊操作</span></span><br><span class=\"line\"><span class=\"comment\">     * 具体由子类实现</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">addCondiments</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 钩子方法，决定某些算法步骤是否挂钩在算法中</span></span><br><span class=\"line\"><span class=\"comment\">     * 子类可以重写该类来改变算法或者逻辑</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNeedCondiments</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体模板角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 纯茶</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CreatTea</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseCreatDrink</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">brew</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"泡茶~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addCondiments</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"加柠檬~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体模板角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 茶</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CreatPureTea</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseCreatDrink</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">brew</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"泡茶~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addCondiments</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"加柠檬~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过重写钩子方法来改变算法</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回true则添加调味品</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回false则不加</span></span><br><span class=\"line\"><span class=\"comment\">     * 默认为true</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> isNeedCondiments</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNeedCondiments</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体模板角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 咖啡</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CreatCoffee</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseCreatDrink</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">brew</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"冲咖啡~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addCondiments</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"加糖~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 模板方法模式 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TemplateTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">templateTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"-------茶-------\"</span>);</span><br><span class=\"line\">        CreatTea tea = <span class=\"keyword\">new</span> CreatTea();</span><br><span class=\"line\">        tea.doCreate();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"-------咖啡-------\"</span>);</span><br><span class=\"line\">        CreatCoffee coffee = <span class=\"keyword\">new</span> CreatCoffee();</span><br><span class=\"line\">        coffee.doCreate();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"-------纯茶-------\"</span>);</span><br><span class=\"line\">        CreatPureTea pureTea = <span class=\"keyword\">new</span> CreatPureTea();</span><br><span class=\"line\">        pureTea.doCreate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\">往锅里加的是白菜~</span><br><span class=\"line\">炒啊炒啊炒~</span><br><span class=\"line\">菜炒好了，起锅~</span><br><span class=\"line\">往锅里加的是肉~</span><br><span class=\"line\">炒啊炒啊炒~</span><br><span class=\"line\">菜炒好了，起锅~</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h2><p><strong>模板方法模式在Java中的应用</strong></p>\n<p>最常见的就是Servlet了。</p>\n<p><strong>HttpServlet担任抽象模板角色</strong></p>\n<p>　　　　模板方法：由service()方法担任。</p>\n<p>　　　　基本方法：由doPost()、doGet()等方法担任。</p>\n<p><strong>MyServlet担任具体模板角色</strong></p>\n<p>自定义的servlet置换掉了父类HttpServlet中七个基本方法中的其中两个，分别是doGet()和doPost()。</p>\n<h2 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4. 参考\"></a>4. 参考</h2><p><code>https://www.cnblogs.com/qiumingcheng/p/5219664.html</code></p>\n<p><code>https://www.cnblogs.com/yanlong300/p/8446261.html</code></p>"},{"title":"volatile关键字在单例模式(双重校验锁)中的作用","abbrlink":"e7cef119","date":"2018-10-08T14:00:00.000Z","_content":"\n本文主要讲述了Java单例模式之双重校验锁中`volatile`关键字的作用。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n上篇文章[Java设计模式(一)--单例模式](https://www.lixueduan.com/posts/53093.html)中讲了Java单例模式的几种写法，其中`懒汉式`和`双重校验锁`方式写法如下：\n\n## 1. 懒汉式\n\n```java\npublic class Singleton {  \n    private static Singleton instance;  \n\n    private Singleton (){}  \n\n    public static synchronized Singleton getInstance() {  \n    if (instance == null) {  \n        instance = new Singleton();  \n    }  \n   　　 return instance;  \n    }  \n\n}\n```\n\n这种方式实现的单例：实现了`lazy loading` 使用时才创建实例。`synchronized`保证了线程安全，但效率低。\n\n## 2. 双重校验锁\n\n```java\npublic class Singleton {\n    private static volatile Singleton singleton;\n\n    private Singleton() {\n    }\n\n    public static Singleton getInstance() {\n        if (singleton == null) { \n            synchronized (Singleton.class) { //1\n                if (singleton == null) { //2\n                    singleton = new Singleton(); //3\n                }\n            }\n        }\n        return singleton;\n    }\n}\n```\n\n## 3. 执行过程\n\n双重校验锁方式的执行过程如下：\n\n1.`线程A`进入 `getInstance()` 方法。 \n\n2.由于 `singleton`为 `null`，`线程A`在 //1 处进入 `synchronized` 块。  \n\n3.`线程A`被`线程B`预占。 \n\n4.`线程B `进入 `getInstance()` 方法。 \n\n5.由于 `singleton`仍旧为 `null`，`线程B`试图获取 //1 处的锁。然而，由于`线程A`已经持有该锁，`线程B`在 //1 处阻塞。\n\n6.`线程B`被`线程A`预占。\n\n7.`线程A`执行，由于在 //2 处实例仍旧为 `null`，`线程A`还创建一个 `Singleton` 对象并将其引用赋值给 `instance`。\n\n8.`线程A`退出 `synchronized` 块并从 `getInstance()` 方法返回实例。 \n\n9.`线程A`被`线程B`预占。\n\n10.`线程B`获取 //1 处的锁并检查 `instance` 是否为 `null`。 \n\n11.由于 `singleton`是非 `null` 的，并没有创建第二个 `Singleton` 对象，由`线程A`所创建的对象被返回。\n\n## 4. 问题\n\n双重检查锁定背后的理论是完美的。不幸地是，现实完全不同。**双重检查锁定的问题是：并不能保证它会在单处理器或多处理器计算机上顺利运行。**\n\n**双重检查锁定失败的问题并不归咎于 JVM 中的实现 bug，而是归咎于 Java 平台内存模型。内存模型允许所谓的“无序写入”，这也是这些习语失败的一个主要原因。**\n\n `singleton = new Singleton();`\n\n该语句非原子操作，实际是三个步骤。\n\n* 1.给singleton分配内存；\n* 2.调用 Singleton 的构造函数来初始化成员变量；\n* 3.将给singleton对象指向分配的内存空间（此时singleton才不为null）；\n\n虚拟机的`指令重排序`-->\n\n执行命令时虚拟机可能会对以上3个步骤交换位置 最后可能是132这种 分配内存并修改指针后未初始化 多线程获取时可能会出现问题。\n\n当`线程A`进入同步方法执行`singleton = new Singleton();`代码时，恰好这三个步骤重排序后为`1 3 2`，\n\n那么`步骤3`执行后`singleton`已经不为`null`,但是未执行`步骤2`，`singleton`对象初始化不完全，此时`线程B`执行`getInstance()`方法，第一步判断时`singleton`不为null,则直接将未完全初始化的`singleton`对象返回了。\n\n## 5. 解决\n\n**如果一个字段被声明成volatile，Java线程内存模型确保所有线程看到这个变量的值是一致的，同时还会禁止指令重排序**\n\n所以使用`volatile`关键字会禁止指令重排序,可以避免这种问题。使用`volatile`关键字后使得 `singleton = new Singleton();`语句一定会按照上面拆分的步骤123来执行。\n\n## 参考\n\n`https://blog.csdn.net/qq646040754/article/details/81327933`","source":"_posts/java/java-volatile与双重校验锁.md","raw":"---\ntitle: volatile关键字在单例模式(双重校验锁)中的作用\ntags:\n  - Java\ncategories:\n  - Java\nabbrlink: e7cef119\ndate: 2018-10-08 22:00:00\n---\n\n本文主要讲述了Java单例模式之双重校验锁中`volatile`关键字的作用。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n上篇文章[Java设计模式(一)--单例模式](https://www.lixueduan.com/posts/53093.html)中讲了Java单例模式的几种写法，其中`懒汉式`和`双重校验锁`方式写法如下：\n\n## 1. 懒汉式\n\n```java\npublic class Singleton {  \n    private static Singleton instance;  \n\n    private Singleton (){}  \n\n    public static synchronized Singleton getInstance() {  \n    if (instance == null) {  \n        instance = new Singleton();  \n    }  \n   　　 return instance;  \n    }  \n\n}\n```\n\n这种方式实现的单例：实现了`lazy loading` 使用时才创建实例。`synchronized`保证了线程安全，但效率低。\n\n## 2. 双重校验锁\n\n```java\npublic class Singleton {\n    private static volatile Singleton singleton;\n\n    private Singleton() {\n    }\n\n    public static Singleton getInstance() {\n        if (singleton == null) { \n            synchronized (Singleton.class) { //1\n                if (singleton == null) { //2\n                    singleton = new Singleton(); //3\n                }\n            }\n        }\n        return singleton;\n    }\n}\n```\n\n## 3. 执行过程\n\n双重校验锁方式的执行过程如下：\n\n1.`线程A`进入 `getInstance()` 方法。 \n\n2.由于 `singleton`为 `null`，`线程A`在 //1 处进入 `synchronized` 块。  \n\n3.`线程A`被`线程B`预占。 \n\n4.`线程B `进入 `getInstance()` 方法。 \n\n5.由于 `singleton`仍旧为 `null`，`线程B`试图获取 //1 处的锁。然而，由于`线程A`已经持有该锁，`线程B`在 //1 处阻塞。\n\n6.`线程B`被`线程A`预占。\n\n7.`线程A`执行，由于在 //2 处实例仍旧为 `null`，`线程A`还创建一个 `Singleton` 对象并将其引用赋值给 `instance`。\n\n8.`线程A`退出 `synchronized` 块并从 `getInstance()` 方法返回实例。 \n\n9.`线程A`被`线程B`预占。\n\n10.`线程B`获取 //1 处的锁并检查 `instance` 是否为 `null`。 \n\n11.由于 `singleton`是非 `null` 的，并没有创建第二个 `Singleton` 对象，由`线程A`所创建的对象被返回。\n\n## 4. 问题\n\n双重检查锁定背后的理论是完美的。不幸地是，现实完全不同。**双重检查锁定的问题是：并不能保证它会在单处理器或多处理器计算机上顺利运行。**\n\n**双重检查锁定失败的问题并不归咎于 JVM 中的实现 bug，而是归咎于 Java 平台内存模型。内存模型允许所谓的“无序写入”，这也是这些习语失败的一个主要原因。**\n\n `singleton = new Singleton();`\n\n该语句非原子操作，实际是三个步骤。\n\n* 1.给singleton分配内存；\n* 2.调用 Singleton 的构造函数来初始化成员变量；\n* 3.将给singleton对象指向分配的内存空间（此时singleton才不为null）；\n\n虚拟机的`指令重排序`-->\n\n执行命令时虚拟机可能会对以上3个步骤交换位置 最后可能是132这种 分配内存并修改指针后未初始化 多线程获取时可能会出现问题。\n\n当`线程A`进入同步方法执行`singleton = new Singleton();`代码时，恰好这三个步骤重排序后为`1 3 2`，\n\n那么`步骤3`执行后`singleton`已经不为`null`,但是未执行`步骤2`，`singleton`对象初始化不完全，此时`线程B`执行`getInstance()`方法，第一步判断时`singleton`不为null,则直接将未完全初始化的`singleton`对象返回了。\n\n## 5. 解决\n\n**如果一个字段被声明成volatile，Java线程内存模型确保所有线程看到这个变量的值是一致的，同时还会禁止指令重排序**\n\n所以使用`volatile`关键字会禁止指令重排序,可以避免这种问题。使用`volatile`关键字后使得 `singleton = new Singleton();`语句一定会按照上面拆分的步骤123来执行。\n\n## 参考\n\n`https://blog.csdn.net/qq646040754/article/details/81327933`","slug":"java/java-volatile与双重校验锁","published":1,"updated":"2019-02-14T13:44:36.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv44k00130ww44kgifcwp","content":"<p>本文主要讲述了Java单例模式之双重校验锁中<code>volatile</code>关键字的作用。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<p>上篇文章<a href=\"https://www.lixueduan.com/posts/53093.html\">Java设计模式(一)–单例模式</a>中讲了Java单例模式的几种写法，其中<code>懒汉式</code>和<code>双重校验锁</code>方式写法如下：</p>\n<h2 id=\"1-懒汉式\"><a href=\"#1-懒汉式\" class=\"headerlink\" title=\"1. 懒汉式\"></a>1. 懒汉式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span> <span class=\"params\">()</span></span>&#123;&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">        instance = <span class=\"keyword\">new</span> Singleton();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">   　　 <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方式实现的单例：实现了<code>lazy loading</code> 使用时才创建实例。<code>synchronized</code>保证了线程安全，但效率低。</p>\n<h2 id=\"2-双重校验锁\"><a href=\"#2-双重校验锁\" class=\"headerlink\" title=\"2. 双重校验锁\"></a>2. 双重校验锁</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> Singleton singleton;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (singleton == <span class=\"keyword\">null</span>) &#123; </span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (Singleton.class) &#123; <span class=\"comment\">//1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (singleton == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">//2</span></span><br><span class=\"line\">                    singleton = <span class=\"keyword\">new</span> Singleton(); <span class=\"comment\">//3</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-执行过程\"><a href=\"#3-执行过程\" class=\"headerlink\" title=\"3. 执行过程\"></a>3. 执行过程</h2><p>双重校验锁方式的执行过程如下：</p>\n<p>1.<code>线程A</code>进入 <code>getInstance()</code> 方法。 </p>\n<p>2.由于 <code>singleton</code>为 <code>null</code>，<code>线程A</code>在 //1 处进入 <code>synchronized</code> 块。  </p>\n<p>3.<code>线程A</code>被<code>线程B</code>预占。 </p>\n<p>4.<code>线程B</code>进入 <code>getInstance()</code> 方法。 </p>\n<p>5.由于 <code>singleton</code>仍旧为 <code>null</code>，<code>线程B</code>试图获取 //1 处的锁。然而，由于<code>线程A</code>已经持有该锁，<code>线程B</code>在 //1 处阻塞。</p>\n<p>6.<code>线程B</code>被<code>线程A</code>预占。</p>\n<p>7.<code>线程A</code>执行，由于在 //2 处实例仍旧为 <code>null</code>，<code>线程A</code>还创建一个 <code>Singleton</code> 对象并将其引用赋值给 <code>instance</code>。</p>\n<p>8.<code>线程A</code>退出 <code>synchronized</code> 块并从 <code>getInstance()</code> 方法返回实例。 </p>\n<p>9.<code>线程A</code>被<code>线程B</code>预占。</p>\n<p>10.<code>线程B</code>获取 //1 处的锁并检查 <code>instance</code> 是否为 <code>null</code>。 </p>\n<p>11.由于 <code>singleton</code>是非 <code>null</code> 的，并没有创建第二个 <code>Singleton</code> 对象，由<code>线程A</code>所创建的对象被返回。</p>\n<h2 id=\"4-问题\"><a href=\"#4-问题\" class=\"headerlink\" title=\"4. 问题\"></a>4. 问题</h2><p>双重检查锁定背后的理论是完美的。不幸地是，现实完全不同。<strong>双重检查锁定的问题是：并不能保证它会在单处理器或多处理器计算机上顺利运行。</strong></p>\n<p><strong>双重检查锁定失败的问题并不归咎于 JVM 中的实现 bug，而是归咎于 Java 平台内存模型。内存模型允许所谓的“无序写入”，这也是这些习语失败的一个主要原因。</strong></p>\n<p> <code>singleton = new Singleton();</code></p>\n<p>该语句非原子操作，实际是三个步骤。</p>\n<ul>\n<li>1.给singleton分配内存；</li>\n<li>2.调用 Singleton 的构造函数来初始化成员变量；</li>\n<li>3.将给singleton对象指向分配的内存空间（此时singleton才不为null）；</li>\n</ul>\n<p>虚拟机的<code>指令重排序</code>–&gt;</p>\n<p>执行命令时虚拟机可能会对以上3个步骤交换位置 最后可能是132这种 分配内存并修改指针后未初始化 多线程获取时可能会出现问题。</p>\n<p>当<code>线程A</code>进入同步方法执行<code>singleton = new Singleton();</code>代码时，恰好这三个步骤重排序后为<code>1 3 2</code>，</p>\n<p>那么<code>步骤3</code>执行后<code>singleton</code>已经不为<code>null</code>,但是未执行<code>步骤2</code>，<code>singleton</code>对象初始化不完全，此时<code>线程B</code>执行<code>getInstance()</code>方法，第一步判断时<code>singleton</code>不为null,则直接将未完全初始化的<code>singleton</code>对象返回了。</p>\n<h2 id=\"5-解决\"><a href=\"#5-解决\" class=\"headerlink\" title=\"5. 解决\"></a>5. 解决</h2><p><strong>如果一个字段被声明成volatile，Java线程内存模型确保所有线程看到这个变量的值是一致的，同时还会禁止指令重排序</strong></p>\n<p>所以使用<code>volatile</code>关键字会禁止指令重排序,可以避免这种问题。使用<code>volatile</code>关键字后使得 <code>singleton = new Singleton();</code>语句一定会按照上面拆分的步骤123来执行。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><code>https://blog.csdn.net/qq646040754/article/details/81327933</code></p>\n","site":{"data":{}},"excerpt":"<p>本文主要讲述了Java单例模式之双重校验锁中<code>volatile</code>关键字的作用。</p>","more":"<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<p>上篇文章<a href=\"https://www.lixueduan.com/posts/53093.html\">Java设计模式(一)–单例模式</a>中讲了Java单例模式的几种写法，其中<code>懒汉式</code>和<code>双重校验锁</code>方式写法如下：</p>\n<h2 id=\"1-懒汉式\"><a href=\"#1-懒汉式\" class=\"headerlink\" title=\"1. 懒汉式\"></a>1. 懒汉式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span> <span class=\"params\">()</span></span>&#123;&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">        instance = <span class=\"keyword\">new</span> Singleton();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">   　　 <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方式实现的单例：实现了<code>lazy loading</code> 使用时才创建实例。<code>synchronized</code>保证了线程安全，但效率低。</p>\n<h2 id=\"2-双重校验锁\"><a href=\"#2-双重校验锁\" class=\"headerlink\" title=\"2. 双重校验锁\"></a>2. 双重校验锁</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> Singleton singleton;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (singleton == <span class=\"keyword\">null</span>) &#123; </span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (Singleton.class) &#123; <span class=\"comment\">//1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (singleton == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">//2</span></span><br><span class=\"line\">                    singleton = <span class=\"keyword\">new</span> Singleton(); <span class=\"comment\">//3</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-执行过程\"><a href=\"#3-执行过程\" class=\"headerlink\" title=\"3. 执行过程\"></a>3. 执行过程</h2><p>双重校验锁方式的执行过程如下：</p>\n<p>1.<code>线程A</code>进入 <code>getInstance()</code> 方法。 </p>\n<p>2.由于 <code>singleton</code>为 <code>null</code>，<code>线程A</code>在 //1 处进入 <code>synchronized</code> 块。  </p>\n<p>3.<code>线程A</code>被<code>线程B</code>预占。 </p>\n<p>4.<code>线程B</code>进入 <code>getInstance()</code> 方法。 </p>\n<p>5.由于 <code>singleton</code>仍旧为 <code>null</code>，<code>线程B</code>试图获取 //1 处的锁。然而，由于<code>线程A</code>已经持有该锁，<code>线程B</code>在 //1 处阻塞。</p>\n<p>6.<code>线程B</code>被<code>线程A</code>预占。</p>\n<p>7.<code>线程A</code>执行，由于在 //2 处实例仍旧为 <code>null</code>，<code>线程A</code>还创建一个 <code>Singleton</code> 对象并将其引用赋值给 <code>instance</code>。</p>\n<p>8.<code>线程A</code>退出 <code>synchronized</code> 块并从 <code>getInstance()</code> 方法返回实例。 </p>\n<p>9.<code>线程A</code>被<code>线程B</code>预占。</p>\n<p>10.<code>线程B</code>获取 //1 处的锁并检查 <code>instance</code> 是否为 <code>null</code>。 </p>\n<p>11.由于 <code>singleton</code>是非 <code>null</code> 的，并没有创建第二个 <code>Singleton</code> 对象，由<code>线程A</code>所创建的对象被返回。</p>\n<h2 id=\"4-问题\"><a href=\"#4-问题\" class=\"headerlink\" title=\"4. 问题\"></a>4. 问题</h2><p>双重检查锁定背后的理论是完美的。不幸地是，现实完全不同。<strong>双重检查锁定的问题是：并不能保证它会在单处理器或多处理器计算机上顺利运行。</strong></p>\n<p><strong>双重检查锁定失败的问题并不归咎于 JVM 中的实现 bug，而是归咎于 Java 平台内存模型。内存模型允许所谓的“无序写入”，这也是这些习语失败的一个主要原因。</strong></p>\n<p> <code>singleton = new Singleton();</code></p>\n<p>该语句非原子操作，实际是三个步骤。</p>\n<ul>\n<li>1.给singleton分配内存；</li>\n<li>2.调用 Singleton 的构造函数来初始化成员变量；</li>\n<li>3.将给singleton对象指向分配的内存空间（此时singleton才不为null）；</li>\n</ul>\n<p>虚拟机的<code>指令重排序</code>–&gt;</p>\n<p>执行命令时虚拟机可能会对以上3个步骤交换位置 最后可能是132这种 分配内存并修改指针后未初始化 多线程获取时可能会出现问题。</p>\n<p>当<code>线程A</code>进入同步方法执行<code>singleton = new Singleton();</code>代码时，恰好这三个步骤重排序后为<code>1 3 2</code>，</p>\n<p>那么<code>步骤3</code>执行后<code>singleton</code>已经不为<code>null</code>,但是未执行<code>步骤2</code>，<code>singleton</code>对象初始化不完全，此时<code>线程B</code>执行<code>getInstance()</code>方法，第一步判断时<code>singleton</code>不为null,则直接将未完全初始化的<code>singleton</code>对象返回了。</p>\n<h2 id=\"5-解决\"><a href=\"#5-解决\" class=\"headerlink\" title=\"5. 解决\"></a>5. 解决</h2><p><strong>如果一个字段被声明成volatile，Java线程内存模型确保所有线程看到这个变量的值是一致的，同时还会禁止指令重排序</strong></p>\n<p>所以使用<code>volatile</code>关键字会禁止指令重排序,可以避免这种问题。使用<code>volatile</code>关键字后使得 <code>singleton = new Singleton();</code>语句一定会按照上面拆分的步骤123来执行。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><code>https://blog.csdn.net/qq646040754/article/details/81327933</code></p>"},{"title":"Linux下的网络配置","abbrlink":"b0d13a6d","date":"2019-01-14T14:00:00.000Z","_content":"\n本章主要讲了linux如何配置网络，让虚拟机能够连上外网，如何让虚拟机和主机联通，同时介绍了ssh客户端工具连接虚拟机。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. Xshell\n\n在安装好虚拟机后就可以正常使用了。但是在正常工作中不可能真的在服务器上操作，一般都是通过ssh客户端工具连接服务器进行操作。\n\n这里用到的客户端工具是`Xshell`,通过该工具连上服务器后就可以在自己的电脑上操作了。而且还可以开多个窗口，比较方便。\n\n![xshell](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/network-set/xshell-use.png)\n\n这里新建连接时需要输入要连接的服务器的IP和端口号，账户和密码，端口号默认是22，一般不用改。\n\n## 2. 网络配置\n\n### 2.1 桥接模式和NAT模式\n\n按照上面的方法就可以连上虚拟机了，但是现在虚拟机的IP是自动获取的，**每次重启后都IP都会变**，这肯定不行呀，所以我们需要为虚拟机设置**静态IP**.\n\n由于我们这里使用的是NAT模式。这个模式下虚拟机可以上网，但是无法和主机联通。\n\n**桥接模式和NAT模式的区别：**\n\n桥接模式下虚拟机可以看做一台真正的独立的电脑，所以桥接模式下需要为虚拟机分配独立的IP，在家里到时无所谓，在公司的话由于IP和电脑绑定的，所以需要网络管理人员给你的虚拟机分配一个IP才行。\n\nNAT模式下，虚拟机会动态获取IP,虽然有自己的IP但是最终上网还是通过主机上网的。所以NAT模式下不用分配独立的IP,但是**NAT模式下主机和虚拟机无法联通。**\n\n**为了主机和虚拟机联通，我们必须让主机和虚拟机在同一个网段下。**\n\n**为了主机和虚拟机联通，我们必须让主机和虚拟机在同一个网段下。**\n\n**为了主机和虚拟机联通，我们必须让主机和虚拟机在同一个网段下。**\n\n### 2.2 设置静态IP\n\n在设置静态IP前我们需要知道主机的IP.\n\nwindows下命令行输入 `ipconfig` 即可获取到本机IP.\n\n![ipconfig](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/network-set/ip-query.png)\n\n然后通过VMware软件对网络进行配置。\n\n![vmware](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/network-set/ip-set-way.png)\n\n![static ip](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/network-set/vm-ip-set.png)\n\n接着在虚拟机中配置具体网络信息。\n\n### 2.3 网络配置\n\n#### 2.3.1 网卡配置\n\n网络配置文件在`/etc/sysconfig/network-scripts/ifcfg-ens33`目录下，一般是叫`ifcfg-ens33`\n\n编辑配置文件 命令：`vi /etc/sysconfig/network-scripts/ifcfg-ens33`\n\n配置如下 ：\n\n其中ip地址必须和主机在同一网段下，网关就是上边的那个网关。DNS可填可不填。\n\n```xml\nBOOTPROTO=\"static\"  # 手动分配ip\nONBOOT=\"yes\"  # 该网卡是否随网络服务启动\nIPADDR=\"192.168.1.111\"  # 该网卡ip地址就是你要配置的固定IP\nGATEWAY=\"192.168.1.2\"   # 网关\nNETMASK=\"255.255.255.0\"   # 子网掩码 固定值\nDNS1=\"8.8.8.8\"    # DNS，8.8.8.8为Google提供的免费DNS服务器的IP地址\nDNS2=\"192.168.1.2\" \n```\n\n#### 2.3.2 网络配置\n\n命令：`vi /etc/sysconfig/network` 添加以下内容\n\n```xml\nNETWORKING=yes # 网络是否工作，此处一定不能为no\nNETWORKING_IPV6=no\nHOSTNAME=localhost.localdomain\nGATEWAY=192.168.1.2\n```\n\n#### 2.3.3 配置公共DNS服务\n\n`vi /etc/resolv.conf`\n\n```xml\nsearch localdomain\nnameserver 8.8.8.8\nnameserver 192.168.1.2\n```\n\n#### 2.3.4 关闭防火墙\n\n```java\nsystemctl stop firewalld # 临时关闭防火墙\nsystemctl disable firewalld # 禁止开机启动\n```\n\n#### 2.3.5 重启网络服务\n\n`service network restart`\n\n到此为止网络配置就完成了，现在虚拟机的IP重启后不会变了，也可以连上外网了，还可以和主机联通了。","source":"_posts/linux/conf-network.md","raw":"---\ntitle: Linux下的网络配置\ntags:\n  - Linux\ncategories:\n  - Linux\nabbrlink: b0d13a6d\ndate: 2019-01-14 22:00:00\n---\n\n本章主要讲了linux如何配置网络，让虚拟机能够连上外网，如何让虚拟机和主机联通，同时介绍了ssh客户端工具连接虚拟机。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. Xshell\n\n在安装好虚拟机后就可以正常使用了。但是在正常工作中不可能真的在服务器上操作，一般都是通过ssh客户端工具连接服务器进行操作。\n\n这里用到的客户端工具是`Xshell`,通过该工具连上服务器后就可以在自己的电脑上操作了。而且还可以开多个窗口，比较方便。\n\n![xshell](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/network-set/xshell-use.png)\n\n这里新建连接时需要输入要连接的服务器的IP和端口号，账户和密码，端口号默认是22，一般不用改。\n\n## 2. 网络配置\n\n### 2.1 桥接模式和NAT模式\n\n按照上面的方法就可以连上虚拟机了，但是现在虚拟机的IP是自动获取的，**每次重启后都IP都会变**，这肯定不行呀，所以我们需要为虚拟机设置**静态IP**.\n\n由于我们这里使用的是NAT模式。这个模式下虚拟机可以上网，但是无法和主机联通。\n\n**桥接模式和NAT模式的区别：**\n\n桥接模式下虚拟机可以看做一台真正的独立的电脑，所以桥接模式下需要为虚拟机分配独立的IP，在家里到时无所谓，在公司的话由于IP和电脑绑定的，所以需要网络管理人员给你的虚拟机分配一个IP才行。\n\nNAT模式下，虚拟机会动态获取IP,虽然有自己的IP但是最终上网还是通过主机上网的。所以NAT模式下不用分配独立的IP,但是**NAT模式下主机和虚拟机无法联通。**\n\n**为了主机和虚拟机联通，我们必须让主机和虚拟机在同一个网段下。**\n\n**为了主机和虚拟机联通，我们必须让主机和虚拟机在同一个网段下。**\n\n**为了主机和虚拟机联通，我们必须让主机和虚拟机在同一个网段下。**\n\n### 2.2 设置静态IP\n\n在设置静态IP前我们需要知道主机的IP.\n\nwindows下命令行输入 `ipconfig` 即可获取到本机IP.\n\n![ipconfig](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/network-set/ip-query.png)\n\n然后通过VMware软件对网络进行配置。\n\n![vmware](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/network-set/ip-set-way.png)\n\n![static ip](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/network-set/vm-ip-set.png)\n\n接着在虚拟机中配置具体网络信息。\n\n### 2.3 网络配置\n\n#### 2.3.1 网卡配置\n\n网络配置文件在`/etc/sysconfig/network-scripts/ifcfg-ens33`目录下，一般是叫`ifcfg-ens33`\n\n编辑配置文件 命令：`vi /etc/sysconfig/network-scripts/ifcfg-ens33`\n\n配置如下 ：\n\n其中ip地址必须和主机在同一网段下，网关就是上边的那个网关。DNS可填可不填。\n\n```xml\nBOOTPROTO=\"static\"  # 手动分配ip\nONBOOT=\"yes\"  # 该网卡是否随网络服务启动\nIPADDR=\"192.168.1.111\"  # 该网卡ip地址就是你要配置的固定IP\nGATEWAY=\"192.168.1.2\"   # 网关\nNETMASK=\"255.255.255.0\"   # 子网掩码 固定值\nDNS1=\"8.8.8.8\"    # DNS，8.8.8.8为Google提供的免费DNS服务器的IP地址\nDNS2=\"192.168.1.2\" \n```\n\n#### 2.3.2 网络配置\n\n命令：`vi /etc/sysconfig/network` 添加以下内容\n\n```xml\nNETWORKING=yes # 网络是否工作，此处一定不能为no\nNETWORKING_IPV6=no\nHOSTNAME=localhost.localdomain\nGATEWAY=192.168.1.2\n```\n\n#### 2.3.3 配置公共DNS服务\n\n`vi /etc/resolv.conf`\n\n```xml\nsearch localdomain\nnameserver 8.8.8.8\nnameserver 192.168.1.2\n```\n\n#### 2.3.4 关闭防火墙\n\n```java\nsystemctl stop firewalld # 临时关闭防火墙\nsystemctl disable firewalld # 禁止开机启动\n```\n\n#### 2.3.5 重启网络服务\n\n`service network restart`\n\n到此为止网络配置就完成了，现在虚拟机的IP重启后不会变了，也可以连上外网了，还可以和主机联通了。","slug":"linux/conf-network","published":1,"updated":"2019-02-06T01:11:32.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv44o00180ww4z4uys5ny","content":"<p>本章主要讲了linux如何配置网络，让虚拟机能够连上外网，如何让虚拟机和主机联通，同时介绍了ssh客户端工具连接虚拟机。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-Xshell\"><a href=\"#1-Xshell\" class=\"headerlink\" title=\"1. Xshell\"></a>1. Xshell</h2><p>在安装好虚拟机后就可以正常使用了。但是在正常工作中不可能真的在服务器上操作，一般都是通过ssh客户端工具连接服务器进行操作。</p>\n<p>这里用到的客户端工具是<code>Xshell</code>,通过该工具连上服务器后就可以在自己的电脑上操作了。而且还可以开多个窗口，比较方便。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/network-set/xshell-use.png\" alt=\"xshell\"></p>\n<p>这里新建连接时需要输入要连接的服务器的IP和端口号，账户和密码，端口号默认是22，一般不用改。</p>\n<h2 id=\"2-网络配置\"><a href=\"#2-网络配置\" class=\"headerlink\" title=\"2. 网络配置\"></a>2. 网络配置</h2><h3 id=\"2-1-桥接模式和NAT模式\"><a href=\"#2-1-桥接模式和NAT模式\" class=\"headerlink\" title=\"2.1 桥接模式和NAT模式\"></a>2.1 桥接模式和NAT模式</h3><p>按照上面的方法就可以连上虚拟机了，但是现在虚拟机的IP是自动获取的，<strong>每次重启后都IP都会变</strong>，这肯定不行呀，所以我们需要为虚拟机设置<strong>静态IP</strong>.</p>\n<p>由于我们这里使用的是NAT模式。这个模式下虚拟机可以上网，但是无法和主机联通。</p>\n<p><strong>桥接模式和NAT模式的区别：</strong></p>\n<p>桥接模式下虚拟机可以看做一台真正的独立的电脑，所以桥接模式下需要为虚拟机分配独立的IP，在家里到时无所谓，在公司的话由于IP和电脑绑定的，所以需要网络管理人员给你的虚拟机分配一个IP才行。</p>\n<p>NAT模式下，虚拟机会动态获取IP,虽然有自己的IP但是最终上网还是通过主机上网的。所以NAT模式下不用分配独立的IP,但是<strong>NAT模式下主机和虚拟机无法联通。</strong></p>\n<p><strong>为了主机和虚拟机联通，我们必须让主机和虚拟机在同一个网段下。</strong></p>\n<p><strong>为了主机和虚拟机联通，我们必须让主机和虚拟机在同一个网段下。</strong></p>\n<p><strong>为了主机和虚拟机联通，我们必须让主机和虚拟机在同一个网段下。</strong></p>\n<h3 id=\"2-2-设置静态IP\"><a href=\"#2-2-设置静态IP\" class=\"headerlink\" title=\"2.2 设置静态IP\"></a>2.2 设置静态IP</h3><p>在设置静态IP前我们需要知道主机的IP.</p>\n<p>windows下命令行输入 <code>ipconfig</code> 即可获取到本机IP.</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/network-set/ip-query.png\" alt=\"ipconfig\"></p>\n<p>然后通过VMware软件对网络进行配置。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/network-set/ip-set-way.png\" alt=\"vmware\"></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/network-set/vm-ip-set.png\" alt=\"static ip\"></p>\n<p>接着在虚拟机中配置具体网络信息。</p>\n<h3 id=\"2-3-网络配置\"><a href=\"#2-3-网络配置\" class=\"headerlink\" title=\"2.3 网络配置\"></a>2.3 网络配置</h3><h4 id=\"2-3-1-网卡配置\"><a href=\"#2-3-1-网卡配置\" class=\"headerlink\" title=\"2.3.1 网卡配置\"></a>2.3.1 网卡配置</h4><p>网络配置文件在<code>/etc/sysconfig/network-scripts/ifcfg-ens33</code>目录下，一般是叫<code>ifcfg-ens33</code></p>\n<p>编辑配置文件 命令：<code>vi /etc/sysconfig/network-scripts/ifcfg-ens33</code></p>\n<p>配置如下 ：</p>\n<p>其中ip地址必须和主机在同一网段下，网关就是上边的那个网关。DNS可填可不填。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOOTPROTO=\"static\"  # 手动分配ip</span><br><span class=\"line\">ONBOOT=\"yes\"  # 该网卡是否随网络服务启动</span><br><span class=\"line\">IPADDR=\"192.168.1.111\"  # 该网卡ip地址就是你要配置的固定IP</span><br><span class=\"line\">GATEWAY=\"192.168.1.2\"   # 网关</span><br><span class=\"line\">NETMASK=\"255.255.255.0\"   # 子网掩码 固定值</span><br><span class=\"line\">DNS1=\"8.8.8.8\"    # DNS，8.8.8.8为Google提供的免费DNS服务器的IP地址</span><br><span class=\"line\">DNS2=\"192.168.1.2\"</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-3-2-网络配置\"><a href=\"#2-3-2-网络配置\" class=\"headerlink\" title=\"2.3.2 网络配置\"></a>2.3.2 网络配置</h4><p>命令：<code>vi /etc/sysconfig/network</code> 添加以下内容</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NETWORKING=yes # 网络是否工作，此处一定不能为no</span><br><span class=\"line\">NETWORKING_IPV6=no</span><br><span class=\"line\">HOSTNAME=localhost.localdomain</span><br><span class=\"line\">GATEWAY=192.168.1.2</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-3-3-配置公共DNS服务\"><a href=\"#2-3-3-配置公共DNS服务\" class=\"headerlink\" title=\"2.3.3 配置公共DNS服务\"></a>2.3.3 配置公共DNS服务</h4><p><code>vi /etc/resolv.conf</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">search localdomain</span><br><span class=\"line\">nameserver 8.8.8.8</span><br><span class=\"line\">nameserver 192.168.1.2</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-3-4-关闭防火墙\"><a href=\"#2-3-4-关闭防火墙\" class=\"headerlink\" title=\"2.3.4 关闭防火墙\"></a>2.3.4 关闭防火墙</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld # 临时关闭防火墙</span><br><span class=\"line\">systemctl disable firewalld # 禁止开机启动</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-3-5-重启网络服务\"><a href=\"#2-3-5-重启网络服务\" class=\"headerlink\" title=\"2.3.5 重启网络服务\"></a>2.3.5 重启网络服务</h4><p><code>service network restart</code></p>\n<p>到此为止网络配置就完成了，现在虚拟机的IP重启后不会变了，也可以连上外网了，还可以和主机联通了。</p>\n","site":{"data":{}},"excerpt":"<p>本章主要讲了linux如何配置网络，让虚拟机能够连上外网，如何让虚拟机和主机联通，同时介绍了ssh客户端工具连接虚拟机。</p>","more":"<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-Xshell\"><a href=\"#1-Xshell\" class=\"headerlink\" title=\"1. Xshell\"></a>1. Xshell</h2><p>在安装好虚拟机后就可以正常使用了。但是在正常工作中不可能真的在服务器上操作，一般都是通过ssh客户端工具连接服务器进行操作。</p>\n<p>这里用到的客户端工具是<code>Xshell</code>,通过该工具连上服务器后就可以在自己的电脑上操作了。而且还可以开多个窗口，比较方便。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/network-set/xshell-use.png\" alt=\"xshell\"></p>\n<p>这里新建连接时需要输入要连接的服务器的IP和端口号，账户和密码，端口号默认是22，一般不用改。</p>\n<h2 id=\"2-网络配置\"><a href=\"#2-网络配置\" class=\"headerlink\" title=\"2. 网络配置\"></a>2. 网络配置</h2><h3 id=\"2-1-桥接模式和NAT模式\"><a href=\"#2-1-桥接模式和NAT模式\" class=\"headerlink\" title=\"2.1 桥接模式和NAT模式\"></a>2.1 桥接模式和NAT模式</h3><p>按照上面的方法就可以连上虚拟机了，但是现在虚拟机的IP是自动获取的，<strong>每次重启后都IP都会变</strong>，这肯定不行呀，所以我们需要为虚拟机设置<strong>静态IP</strong>.</p>\n<p>由于我们这里使用的是NAT模式。这个模式下虚拟机可以上网，但是无法和主机联通。</p>\n<p><strong>桥接模式和NAT模式的区别：</strong></p>\n<p>桥接模式下虚拟机可以看做一台真正的独立的电脑，所以桥接模式下需要为虚拟机分配独立的IP，在家里到时无所谓，在公司的话由于IP和电脑绑定的，所以需要网络管理人员给你的虚拟机分配一个IP才行。</p>\n<p>NAT模式下，虚拟机会动态获取IP,虽然有自己的IP但是最终上网还是通过主机上网的。所以NAT模式下不用分配独立的IP,但是<strong>NAT模式下主机和虚拟机无法联通。</strong></p>\n<p><strong>为了主机和虚拟机联通，我们必须让主机和虚拟机在同一个网段下。</strong></p>\n<p><strong>为了主机和虚拟机联通，我们必须让主机和虚拟机在同一个网段下。</strong></p>\n<p><strong>为了主机和虚拟机联通，我们必须让主机和虚拟机在同一个网段下。</strong></p>\n<h3 id=\"2-2-设置静态IP\"><a href=\"#2-2-设置静态IP\" class=\"headerlink\" title=\"2.2 设置静态IP\"></a>2.2 设置静态IP</h3><p>在设置静态IP前我们需要知道主机的IP.</p>\n<p>windows下命令行输入 <code>ipconfig</code> 即可获取到本机IP.</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/network-set/ip-query.png\" alt=\"ipconfig\"></p>\n<p>然后通过VMware软件对网络进行配置。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/network-set/ip-set-way.png\" alt=\"vmware\"></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/network-set/vm-ip-set.png\" alt=\"static ip\"></p>\n<p>接着在虚拟机中配置具体网络信息。</p>\n<h3 id=\"2-3-网络配置\"><a href=\"#2-3-网络配置\" class=\"headerlink\" title=\"2.3 网络配置\"></a>2.3 网络配置</h3><h4 id=\"2-3-1-网卡配置\"><a href=\"#2-3-1-网卡配置\" class=\"headerlink\" title=\"2.3.1 网卡配置\"></a>2.3.1 网卡配置</h4><p>网络配置文件在<code>/etc/sysconfig/network-scripts/ifcfg-ens33</code>目录下，一般是叫<code>ifcfg-ens33</code></p>\n<p>编辑配置文件 命令：<code>vi /etc/sysconfig/network-scripts/ifcfg-ens33</code></p>\n<p>配置如下 ：</p>\n<p>其中ip地址必须和主机在同一网段下，网关就是上边的那个网关。DNS可填可不填。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOOTPROTO=\"static\"  # 手动分配ip</span><br><span class=\"line\">ONBOOT=\"yes\"  # 该网卡是否随网络服务启动</span><br><span class=\"line\">IPADDR=\"192.168.1.111\"  # 该网卡ip地址就是你要配置的固定IP</span><br><span class=\"line\">GATEWAY=\"192.168.1.2\"   # 网关</span><br><span class=\"line\">NETMASK=\"255.255.255.0\"   # 子网掩码 固定值</span><br><span class=\"line\">DNS1=\"8.8.8.8\"    # DNS，8.8.8.8为Google提供的免费DNS服务器的IP地址</span><br><span class=\"line\">DNS2=\"192.168.1.2\"</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-3-2-网络配置\"><a href=\"#2-3-2-网络配置\" class=\"headerlink\" title=\"2.3.2 网络配置\"></a>2.3.2 网络配置</h4><p>命令：<code>vi /etc/sysconfig/network</code> 添加以下内容</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NETWORKING=yes # 网络是否工作，此处一定不能为no</span><br><span class=\"line\">NETWORKING_IPV6=no</span><br><span class=\"line\">HOSTNAME=localhost.localdomain</span><br><span class=\"line\">GATEWAY=192.168.1.2</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-3-3-配置公共DNS服务\"><a href=\"#2-3-3-配置公共DNS服务\" class=\"headerlink\" title=\"2.3.3 配置公共DNS服务\"></a>2.3.3 配置公共DNS服务</h4><p><code>vi /etc/resolv.conf</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">search localdomain</span><br><span class=\"line\">nameserver 8.8.8.8</span><br><span class=\"line\">nameserver 192.168.1.2</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-3-4-关闭防火墙\"><a href=\"#2-3-4-关闭防火墙\" class=\"headerlink\" title=\"2.3.4 关闭防火墙\"></a>2.3.4 关闭防火墙</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld # 临时关闭防火墙</span><br><span class=\"line\">systemctl disable firewalld # 禁止开机启动</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-3-5-重启网络服务\"><a href=\"#2-3-5-重启网络服务\" class=\"headerlink\" title=\"2.3.5 重启网络服务\"></a>2.3.5 重启网络服务</h4><p><code>service network restart</code></p>\n<p>到此为止网络配置就完成了，现在虚拟机的IP重启后不会变了，也可以连上外网了，还可以和主机联通了。</p>"},{"title":"超详细的VMware虚拟机安装CentOS7教程","abbrlink":"4d7cca6f","date":"2019-01-14T14:00:00.000Z","_content":"\n这是一个十分详细的CentOS7的安装教程，对自己的安装过程做了一个记录。主要记录了如何通过VMware虚拟机安装Linux，从软件下载到虚拟机安装等等。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 准备工作\n\n### 1.1 VMware下载\n\n百度网盘下载（内含注册机）\n\n链接: `https://pan.baidu.com/s/1wz4hdNQBikTvyUMNokSVYg`提取码: yed7\n\n怎么安装就不用写了吧。\n\n### 1.2 CentOS下载\n\n`http://mirrors.163.com/centos/7.6.1810/isos/x86_64/`\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/software-install/centos7-down.png)\n\n## 2. CentOS 7安装\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/1-create-vm.png)\n\n创建虚拟机，这里我们选择自定义安装类型。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/2-custom-install.png)\n\n然后选择版本，需要注意兼容问题，一般是向下兼容，14上的虚拟机复制到15上可以用，15的复制到14上可能会用不了。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/3-version-select.png)\n\n这里选择稍后再安装。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/4-after-install.png)\n\n接着选择系统，这里是CentOS 7 64位。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/5-system-select.png)\n\n这个是保存的文件名字。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/6-filename.png)\n\n这里一般默认的就行了,电脑配置好的可以调高点。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/7-cpu-select.png)\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/8-memory-select.png)\n\n网络这里,如果仅仅是让虚拟机能上网，两种模式都可以的，用桥接的话只要你在局域网内有合法的地址，比如你的ADSL猫是带路由功能的，如果是在单位，那就要网络管理人员给你合法IP才行。NAT模式下，虚拟机从属于主机，也就是访问外部网络必须通过主机来访问，因此虚拟机的IP只有主机才能识别。而桥接模式下，虚拟机和主机是平行关系，共享一张网卡（使用网卡的多个接口），可以直接访问外部网络。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/9-network-select.png)\n\n这些都默认的就行了。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/10-IO-select.png)\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/11-disk-select.png)\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/12-newdisk-select.png)\n\n这个是虚拟机文件的名字。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/14-filename.png)\n\n这里选择自定义硬件。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/15-custom.png)\n\n选择镜像文件。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/17-file-select.png)\n\n到这里就结束了，点击开启虚拟机后会自动开始安装。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/18-start.png)\n\n选择安装CentOS 7\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/19-setup.png)\n\n语言选择\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/20-language.png)\n\n调一下时间和地区。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/21-time.png)\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/22-time2.png)\n\n选择要安装的软件，新手还是安装一个GUI比较好。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/23-software1.png)\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/24-software2.png)\n\n查看一下网络连接\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/25-network-set1.png)\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/26-network-set2.png)\n\n开始安装。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/27-begin-install.png)\n\n安装过程中可以设置一下账号密码，一个root账户，一个普通账户。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/28-password-set1.png)\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/29-password-set2.png)\n\n然后耐心等待安装完成就好了。\n\n安装完成后重启就可以登录系统了。\n\n## 3. 快照\n\n快照相当于windows中的还原点。在安装好后可以拍摄一张快照，方便恢复或者克隆虚拟机。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/30-backup1.png)\n\n","source":"_posts/linux/install-centos.md","raw":"---\ntitle: 超详细的VMware虚拟机安装CentOS7教程\ntags:\n  - Linux\ncategories:\n  - Linux\nabbrlink: 4d7cca6f\ndate: 2019-01-14 22:00:00\n---\n\n这是一个十分详细的CentOS7的安装教程，对自己的安装过程做了一个记录。主要记录了如何通过VMware虚拟机安装Linux，从软件下载到虚拟机安装等等。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 准备工作\n\n### 1.1 VMware下载\n\n百度网盘下载（内含注册机）\n\n链接: `https://pan.baidu.com/s/1wz4hdNQBikTvyUMNokSVYg`提取码: yed7\n\n怎么安装就不用写了吧。\n\n### 1.2 CentOS下载\n\n`http://mirrors.163.com/centos/7.6.1810/isos/x86_64/`\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/software-install/centos7-down.png)\n\n## 2. CentOS 7安装\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/1-create-vm.png)\n\n创建虚拟机，这里我们选择自定义安装类型。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/2-custom-install.png)\n\n然后选择版本，需要注意兼容问题，一般是向下兼容，14上的虚拟机复制到15上可以用，15的复制到14上可能会用不了。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/3-version-select.png)\n\n这里选择稍后再安装。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/4-after-install.png)\n\n接着选择系统，这里是CentOS 7 64位。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/5-system-select.png)\n\n这个是保存的文件名字。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/6-filename.png)\n\n这里一般默认的就行了,电脑配置好的可以调高点。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/7-cpu-select.png)\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/8-memory-select.png)\n\n网络这里,如果仅仅是让虚拟机能上网，两种模式都可以的，用桥接的话只要你在局域网内有合法的地址，比如你的ADSL猫是带路由功能的，如果是在单位，那就要网络管理人员给你合法IP才行。NAT模式下，虚拟机从属于主机，也就是访问外部网络必须通过主机来访问，因此虚拟机的IP只有主机才能识别。而桥接模式下，虚拟机和主机是平行关系，共享一张网卡（使用网卡的多个接口），可以直接访问外部网络。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/9-network-select.png)\n\n这些都默认的就行了。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/10-IO-select.png)\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/11-disk-select.png)\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/12-newdisk-select.png)\n\n这个是虚拟机文件的名字。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/14-filename.png)\n\n这里选择自定义硬件。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/15-custom.png)\n\n选择镜像文件。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/17-file-select.png)\n\n到这里就结束了，点击开启虚拟机后会自动开始安装。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/18-start.png)\n\n选择安装CentOS 7\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/19-setup.png)\n\n语言选择\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/20-language.png)\n\n调一下时间和地区。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/21-time.png)\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/22-time2.png)\n\n选择要安装的软件，新手还是安装一个GUI比较好。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/23-software1.png)\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/24-software2.png)\n\n查看一下网络连接\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/25-network-set1.png)\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/26-network-set2.png)\n\n开始安装。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/27-begin-install.png)\n\n安装过程中可以设置一下账号密码，一个root账户，一个普通账户。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/28-password-set1.png)\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/29-password-set2.png)\n\n然后耐心等待安装完成就好了。\n\n安装完成后重启就可以登录系统了。\n\n## 3. 快照\n\n快照相当于windows中的还原点。在安装好后可以拍摄一张快照，方便恢复或者克隆虚拟机。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/30-backup1.png)\n\n","slug":"linux/install-centos","published":1,"updated":"2019-02-06T01:11:41.842Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv44q001a0ww49uf4kv76","content":"<p>这是一个十分详细的CentOS7的安装教程，对自己的安装过程做了一个记录。主要记录了如何通过VMware虚拟机安装Linux，从软件下载到虚拟机安装等等。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-准备工作\"><a href=\"#1-准备工作\" class=\"headerlink\" title=\"1. 准备工作\"></a>1. 准备工作</h2><h3 id=\"1-1-VMware下载\"><a href=\"#1-1-VMware下载\" class=\"headerlink\" title=\"1.1 VMware下载\"></a>1.1 VMware下载</h3><p>百度网盘下载（内含注册机）</p>\n<p>链接: <code>https://pan.baidu.com/s/1wz4hdNQBikTvyUMNokSVYg</code>提取码: yed7</p>\n<p>怎么安装就不用写了吧。</p>\n<h3 id=\"1-2-CentOS下载\"><a href=\"#1-2-CentOS下载\" class=\"headerlink\" title=\"1.2 CentOS下载\"></a>1.2 CentOS下载</h3><p><code>http://mirrors.163.com/centos/7.6.1810/isos/x86_64/</code></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/software-install/centos7-down.png\" alt=\"\"></p>\n<h2 id=\"2-CentOS-7安装\"><a href=\"#2-CentOS-7安装\" class=\"headerlink\" title=\"2. CentOS 7安装\"></a>2. CentOS 7安装</h2><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/1-create-vm.png\" alt=\"\"></p>\n<p>创建虚拟机，这里我们选择自定义安装类型。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/2-custom-install.png\" alt=\"\"></p>\n<p>然后选择版本，需要注意兼容问题，一般是向下兼容，14上的虚拟机复制到15上可以用，15的复制到14上可能会用不了。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/3-version-select.png\" alt=\"\"></p>\n<p>这里选择稍后再安装。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/4-after-install.png\" alt=\"\"></p>\n<p>接着选择系统，这里是CentOS 7 64位。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/5-system-select.png\" alt=\"\"></p>\n<p>这个是保存的文件名字。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/6-filename.png\" alt=\"\"></p>\n<p>这里一般默认的就行了,电脑配置好的可以调高点。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/7-cpu-select.png\" alt=\"\"></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/8-memory-select.png\" alt=\"\"></p>\n<p>网络这里,如果仅仅是让虚拟机能上网，两种模式都可以的，用桥接的话只要你在局域网内有合法的地址，比如你的ADSL猫是带路由功能的，如果是在单位，那就要网络管理人员给你合法IP才行。NAT模式下，虚拟机从属于主机，也就是访问外部网络必须通过主机来访问，因此虚拟机的IP只有主机才能识别。而桥接模式下，虚拟机和主机是平行关系，共享一张网卡（使用网卡的多个接口），可以直接访问外部网络。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/9-network-select.png\" alt=\"\"></p>\n<p>这些都默认的就行了。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/10-IO-select.png\" alt=\"\"></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/11-disk-select.png\" alt=\"\"></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/12-newdisk-select.png\" alt=\"\"></p>\n<p>这个是虚拟机文件的名字。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/14-filename.png\" alt=\"\"></p>\n<p>这里选择自定义硬件。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/15-custom.png\" alt=\"\"></p>\n<p>选择镜像文件。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/17-file-select.png\" alt=\"\"></p>\n<p>到这里就结束了，点击开启虚拟机后会自动开始安装。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/18-start.png\" alt=\"\"></p>\n<p>选择安装CentOS 7</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/19-setup.png\" alt=\"\"></p>\n<p>语言选择</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/20-language.png\" alt=\"\"></p>\n<p>调一下时间和地区。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/21-time.png\" alt=\"\"></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/22-time2.png\" alt=\"\"></p>\n<p>选择要安装的软件，新手还是安装一个GUI比较好。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/23-software1.png\" alt=\"\"></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/24-software2.png\" alt=\"\"></p>\n<p>查看一下网络连接</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/25-network-set1.png\" alt=\"\"></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/26-network-set2.png\" alt=\"\"></p>\n<p>开始安装。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/27-begin-install.png\" alt=\"\"></p>\n<p>安装过程中可以设置一下账号密码，一个root账户，一个普通账户。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/28-password-set1.png\" alt=\"\"></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/29-password-set2.png\" alt=\"\"></p>\n<p>然后耐心等待安装完成就好了。</p>\n<p>安装完成后重启就可以登录系统了。</p>\n<h2 id=\"3-快照\"><a href=\"#3-快照\" class=\"headerlink\" title=\"3. 快照\"></a>3. 快照</h2><p>快照相当于windows中的还原点。在安装好后可以拍摄一张快照，方便恢复或者克隆虚拟机。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/30-backup1.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>这是一个十分详细的CentOS7的安装教程，对自己的安装过程做了一个记录。主要记录了如何通过VMware虚拟机安装Linux，从软件下载到虚拟机安装等等。</p>","more":"<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-准备工作\"><a href=\"#1-准备工作\" class=\"headerlink\" title=\"1. 准备工作\"></a>1. 准备工作</h2><h3 id=\"1-1-VMware下载\"><a href=\"#1-1-VMware下载\" class=\"headerlink\" title=\"1.1 VMware下载\"></a>1.1 VMware下载</h3><p>百度网盘下载（内含注册机）</p>\n<p>链接: <code>https://pan.baidu.com/s/1wz4hdNQBikTvyUMNokSVYg</code>提取码: yed7</p>\n<p>怎么安装就不用写了吧。</p>\n<h3 id=\"1-2-CentOS下载\"><a href=\"#1-2-CentOS下载\" class=\"headerlink\" title=\"1.2 CentOS下载\"></a>1.2 CentOS下载</h3><p><code>http://mirrors.163.com/centos/7.6.1810/isos/x86_64/</code></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/software-install/centos7-down.png\" alt=\"\"></p>\n<h2 id=\"2-CentOS-7安装\"><a href=\"#2-CentOS-7安装\" class=\"headerlink\" title=\"2. CentOS 7安装\"></a>2. CentOS 7安装</h2><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/1-create-vm.png\" alt=\"\"></p>\n<p>创建虚拟机，这里我们选择自定义安装类型。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/2-custom-install.png\" alt=\"\"></p>\n<p>然后选择版本，需要注意兼容问题，一般是向下兼容，14上的虚拟机复制到15上可以用，15的复制到14上可能会用不了。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/3-version-select.png\" alt=\"\"></p>\n<p>这里选择稍后再安装。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/4-after-install.png\" alt=\"\"></p>\n<p>接着选择系统，这里是CentOS 7 64位。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/5-system-select.png\" alt=\"\"></p>\n<p>这个是保存的文件名字。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/6-filename.png\" alt=\"\"></p>\n<p>这里一般默认的就行了,电脑配置好的可以调高点。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/7-cpu-select.png\" alt=\"\"></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/8-memory-select.png\" alt=\"\"></p>\n<p>网络这里,如果仅仅是让虚拟机能上网，两种模式都可以的，用桥接的话只要你在局域网内有合法的地址，比如你的ADSL猫是带路由功能的，如果是在单位，那就要网络管理人员给你合法IP才行。NAT模式下，虚拟机从属于主机，也就是访问外部网络必须通过主机来访问，因此虚拟机的IP只有主机才能识别。而桥接模式下，虚拟机和主机是平行关系，共享一张网卡（使用网卡的多个接口），可以直接访问外部网络。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/9-network-select.png\" alt=\"\"></p>\n<p>这些都默认的就行了。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/10-IO-select.png\" alt=\"\"></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/11-disk-select.png\" alt=\"\"></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/12-newdisk-select.png\" alt=\"\"></p>\n<p>这个是虚拟机文件的名字。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/14-filename.png\" alt=\"\"></p>\n<p>这里选择自定义硬件。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/15-custom.png\" alt=\"\"></p>\n<p>选择镜像文件。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/17-file-select.png\" alt=\"\"></p>\n<p>到这里就结束了，点击开启虚拟机后会自动开始安装。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/18-start.png\" alt=\"\"></p>\n<p>选择安装CentOS 7</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/19-setup.png\" alt=\"\"></p>\n<p>语言选择</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/20-language.png\" alt=\"\"></p>\n<p>调一下时间和地区。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/21-time.png\" alt=\"\"></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/22-time2.png\" alt=\"\"></p>\n<p>选择要安装的软件，新手还是安装一个GUI比较好。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/23-software1.png\" alt=\"\"></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/24-software2.png\" alt=\"\"></p>\n<p>查看一下网络连接</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/25-network-set1.png\" alt=\"\"></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/26-network-set2.png\" alt=\"\"></p>\n<p>开始安装。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/27-begin-install.png\" alt=\"\"></p>\n<p>安装过程中可以设置一下账号密码，一个root账户，一个普通账户。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/28-password-set1.png\" alt=\"\"></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/29-password-set2.png\" alt=\"\"></p>\n<p>然后耐心等待安装完成就好了。</p>\n<p>安装完成后重启就可以登录系统了。</p>\n<h2 id=\"3-快照\"><a href=\"#3-快照\" class=\"headerlink\" title=\"3. 快照\"></a>3. 快照</h2><p>快照相当于windows中的还原点。在安装好后可以拍摄一张快照，方便恢复或者克隆虚拟机。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/centos7-install/30-backup1.png\" alt=\"\"></p>"},{"title":"Linux下安装jdk和Tomcat","abbrlink":"54978294","date":"2019-01-15T14:00:00.000Z","_content":"\n本章主要讲了如何通过解压方式在Linux下安装JDK和Tomcat等软件。\n\n<!-- more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n软件统一放在`/usr/software`下 解压后放在单独的文件夹下`/usr/local/java`/`/usr/local/mysql`\n\n## 1.JDK\n\n安装包下载`jdk-8u191-linux-x64.tar.gz ` 注意32位和64位的别下载错了。\n\n命令`uname -a` 查看Linux系统位数。\n\n网址：`https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html`\n\n1.首先将压缩包传到虚拟机。放在`/usr/software`下\n\n2.然后解压文件`tar zxvf jdk-8u191-linux-x64.tar.gz` 按tab会自动补全。\n\n3.将解压得到的文件移动到`/usr/local/java`,命令`mv jdk1.8.0_191/ /usr/local/jdk8\n\n4.配置环境变量 \n\n 命令`vim /etc/profile` \n\n添加以下内容\n\n```xml\n　export JAVA_HOME=/usr/local/jdk8/\n　export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n　export PATH=$PATH:$JAVA_HOME/bin\n```\n\n5.解析该文件 命令`source /etc/profile`\n\n6.测试 命令 `java -version` 输出版本信息就说明配好了。\n\n## 2.Tomcat\n\n安装包下载`apache-tomcat-8.5.37.tar.gz`\n\n网址`https://tomcat.apache.org/download-80.cgi`\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/software-install/tomcat8-down.png)\n\n1.压缩包上传到虚拟机`/usr/software目录下`\n\n2.解压文件 `tar zxvf apache-tomcat-8.5.37.tar.gz `\n\n3.将解压后的文件移动到`/usr/local/tomcat`,命令`mv apache-tomcat-8.5.37 /usr/local/tomcat`\n\n4.配置环境变量 \n\n 命令`vim /etc/profile` \n\n添加以下内容\n\n```xml\nexport TOMCAT_HOME=/usr/local/tomcat\nexport CATANILA_HOME=/usr/local/tomcat\n```\n\n5.解析该文件 命令`source /etc/profile`\n\n","source":"_posts/linux/install-jdk-tomcat.md","raw":"---\ntitle: Linux下安装jdk和Tomcat\ntags:\n  - Linux\ncategories:\n  - Linux\nabbrlink: '54978294'\ndate: 2019-01-15 22:00:00\n---\n\n本章主要讲了如何通过解压方式在Linux下安装JDK和Tomcat等软件。\n\n<!-- more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n软件统一放在`/usr/software`下 解压后放在单独的文件夹下`/usr/local/java`/`/usr/local/mysql`\n\n## 1.JDK\n\n安装包下载`jdk-8u191-linux-x64.tar.gz ` 注意32位和64位的别下载错了。\n\n命令`uname -a` 查看Linux系统位数。\n\n网址：`https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html`\n\n1.首先将压缩包传到虚拟机。放在`/usr/software`下\n\n2.然后解压文件`tar zxvf jdk-8u191-linux-x64.tar.gz` 按tab会自动补全。\n\n3.将解压得到的文件移动到`/usr/local/java`,命令`mv jdk1.8.0_191/ /usr/local/jdk8\n\n4.配置环境变量 \n\n 命令`vim /etc/profile` \n\n添加以下内容\n\n```xml\n　export JAVA_HOME=/usr/local/jdk8/\n　export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n　export PATH=$PATH:$JAVA_HOME/bin\n```\n\n5.解析该文件 命令`source /etc/profile`\n\n6.测试 命令 `java -version` 输出版本信息就说明配好了。\n\n## 2.Tomcat\n\n安装包下载`apache-tomcat-8.5.37.tar.gz`\n\n网址`https://tomcat.apache.org/download-80.cgi`\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/software-install/tomcat8-down.png)\n\n1.压缩包上传到虚拟机`/usr/software目录下`\n\n2.解压文件 `tar zxvf apache-tomcat-8.5.37.tar.gz `\n\n3.将解压后的文件移动到`/usr/local/tomcat`,命令`mv apache-tomcat-8.5.37 /usr/local/tomcat`\n\n4.配置环境变量 \n\n 命令`vim /etc/profile` \n\n添加以下内容\n\n```xml\nexport TOMCAT_HOME=/usr/local/tomcat\nexport CATANILA_HOME=/usr/local/tomcat\n```\n\n5.解析该文件 命令`source /etc/profile`\n\n","slug":"linux/install-jdk-tomcat","published":1,"updated":"2019-02-06T01:11:52.157Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv44u001e0ww4zhj6xvdt","content":"<p>本章主要讲了如何通过解压方式在Linux下安装JDK和Tomcat等软件。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<p>软件统一放在<code>/usr/software</code>下 解压后放在单独的文件夹下<code>/usr/local/java</code>/<code>/usr/local/mysql</code></p>\n<h2 id=\"1-JDK\"><a href=\"#1-JDK\" class=\"headerlink\" title=\"1.JDK\"></a>1.JDK</h2><p>安装包下载<code>jdk-8u191-linux-x64.tar.gz</code> 注意32位和64位的别下载错了。</p>\n<p>命令<code>uname -a</code> 查看Linux系统位数。</p>\n<p>网址：<code>https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</code></p>\n<p>1.首先将压缩包传到虚拟机。放在<code>/usr/software</code>下</p>\n<p>2.然后解压文件<code>tar zxvf jdk-8u191-linux-x64.tar.gz</code> 按tab会自动补全。</p>\n<p>3.将解压得到的文件移动到<code>/usr/local/java</code>,命令`mv jdk1.8.0_191/ /usr/local/jdk8</p>\n<p>4.配置环境变量 </p>\n<p> 命令<code>vim /etc/profile</code> </p>\n<p>添加以下内容</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　export JAVA_HOME=/usr/local/jdk8/</span><br><span class=\"line\">　export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">　export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure>\n<p>5.解析该文件 命令<code>source /etc/profile</code></p>\n<p>6.测试 命令 <code>java -version</code> 输出版本信息就说明配好了。</p>\n<h2 id=\"2-Tomcat\"><a href=\"#2-Tomcat\" class=\"headerlink\" title=\"2.Tomcat\"></a>2.Tomcat</h2><p>安装包下载<code>apache-tomcat-8.5.37.tar.gz</code></p>\n<p>网址<code>https://tomcat.apache.org/download-80.cgi</code></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/software-install/tomcat8-down.png\" alt=\"\"></p>\n<p>1.压缩包上传到虚拟机<code>/usr/software目录下</code></p>\n<p>2.解压文件 <code>tar zxvf apache-tomcat-8.5.37.tar.gz</code></p>\n<p>3.将解压后的文件移动到<code>/usr/local/tomcat</code>,命令<code>mv apache-tomcat-8.5.37 /usr/local/tomcat</code></p>\n<p>4.配置环境变量 </p>\n<p> 命令<code>vim /etc/profile</code> </p>\n<p>添加以下内容</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export TOMCAT_HOME=/usr/local/tomcat</span><br><span class=\"line\">export CATANILA_HOME=/usr/local/tomcat</span><br></pre></td></tr></table></figure>\n<p>5.解析该文件 命令<code>source /etc/profile</code></p>\n","site":{"data":{}},"excerpt":"<p>本章主要讲了如何通过解压方式在Linux下安装JDK和Tomcat等软件。</p>","more":"<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<p>软件统一放在<code>/usr/software</code>下 解压后放在单独的文件夹下<code>/usr/local/java</code>/<code>/usr/local/mysql</code></p>\n<h2 id=\"1-JDK\"><a href=\"#1-JDK\" class=\"headerlink\" title=\"1.JDK\"></a>1.JDK</h2><p>安装包下载<code>jdk-8u191-linux-x64.tar.gz</code> 注意32位和64位的别下载错了。</p>\n<p>命令<code>uname -a</code> 查看Linux系统位数。</p>\n<p>网址：<code>https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</code></p>\n<p>1.首先将压缩包传到虚拟机。放在<code>/usr/software</code>下</p>\n<p>2.然后解压文件<code>tar zxvf jdk-8u191-linux-x64.tar.gz</code> 按tab会自动补全。</p>\n<p>3.将解压得到的文件移动到<code>/usr/local/java</code>,命令`mv jdk1.8.0_191/ /usr/local/jdk8</p>\n<p>4.配置环境变量 </p>\n<p> 命令<code>vim /etc/profile</code> </p>\n<p>添加以下内容</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　export JAVA_HOME=/usr/local/jdk8/</span><br><span class=\"line\">　export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">　export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure>\n<p>5.解析该文件 命令<code>source /etc/profile</code></p>\n<p>6.测试 命令 <code>java -version</code> 输出版本信息就说明配好了。</p>\n<h2 id=\"2-Tomcat\"><a href=\"#2-Tomcat\" class=\"headerlink\" title=\"2.Tomcat\"></a>2.Tomcat</h2><p>安装包下载<code>apache-tomcat-8.5.37.tar.gz</code></p>\n<p>网址<code>https://tomcat.apache.org/download-80.cgi</code></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/software-install/tomcat8-down.png\" alt=\"\"></p>\n<p>1.压缩包上传到虚拟机<code>/usr/software目录下</code></p>\n<p>2.解压文件 <code>tar zxvf apache-tomcat-8.5.37.tar.gz</code></p>\n<p>3.将解压后的文件移动到<code>/usr/local/tomcat</code>,命令<code>mv apache-tomcat-8.5.37 /usr/local/tomcat</code></p>\n<p>4.配置环境变量 </p>\n<p> 命令<code>vim /etc/profile</code> </p>\n<p>添加以下内容</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export TOMCAT_HOME=/usr/local/tomcat</span><br><span class=\"line\">export CATANILA_HOME=/usr/local/tomcat</span><br></pre></td></tr></table></figure>\n<p>5.解析该文件 命令<code>source /etc/profile</code></p>"},{"title":"Linux下安装RabbitMQ","abbrlink":"b84a2c6c","date":"2019-01-21T14:00:00.000Z","_content":"\n本章主要讲了如何通过解压方式在Linux下安装RabbitMQ和Erlang，超级详细的安装过程，和安装过程中遇到的一些问题。\n\n<!-- more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n软件统一放在`/usr/software`下 解压后放在单独的文件夹下`/usr/locac/opt/rabbitmq`,`/usr/local/opt/erlang`\n\n# RabbitMQ\n\n## 0. 环境准备\n\n### 1.版本问题\n\nErlang和RabbitMQ版本必须对应才行，不然可能会出错。\n\n**官网信息如下 RabbitMQ Erlang Version Requirements**\n\nErlang/OTP versions **older than 20.3 are not supported** by RabbitMQ versions released in 2019.\n\nRabbitMQ **versions prior to 3.7.7 do not support Erlang/OTP 21** or newer.\n\nRabbitMQ version3.7.7--3.7.10 需要的Erlang版本最低为20.3.X,最高为21.X\n\n| RabbitMQ version   | Minimum required Erlang/OTP | Maximum supported Erlang/OTP |\n| ------------------ | --------------------------- | ---------------------------- |\n| **3.7.7---3.7.10** | **20.3.X**                  | **21.X**                     |\n| **3.7.0--3.7.6**   | **19.3**                    | **20.3.X**                   |\n\n具体信息在这里`http://www.rabbitmq.com/which-erlang.html`\n\n这里选择的版本是 `Erlang:21.2`,`RabbitMQ3.7.10`,`Linux:CentOS 7`\n\n### 2. 依赖下载\n\n安装`rabbitmq`需要下载以下依赖，这里可以提前下载上。\n\n`# yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel`\n\n`# yum install xmlto -y`\n\n## 1. Erlang安装\n\n### 1.1 下载\n\n安装RabbitMQ之前需要先安装Erlang.\n\n下载地址：`http://www.erlang.org/downloads`\n\n文件`otp_src_21.2.tar.gz`\n\n### 1.2 解压\n\n将压缩包上传到虚拟机中，我是放在/usr/software目录下的\n\n`# tar xvf otp_src_21.2.tar.gz`  解压文件\n\n复制一份到/usr/local/opt/erlang-software\n\n`# cp otp_src_21.2  /usr/local/opt/erlang-software -r`\n\n创建erlang安装目录： /usr/local/opt/erlang  \n\n### 1.3 编译\n\n进入到/usr/local/opt/erlang-software目录下\n\n`# cd /usr/local/opt/erlang-software`\n\n配置安装路径编译代码：`# ./configure --prefix=/usr/local/opt/erlang`\n\n`# make && make install` 执行编译\n\n### 1.4 环境变量配置\n\n配置Erlang环境变量,`# vi /etc/profile` 添加以下内容\n\n```xml\nexport PATH=$PATH:/usr/local/opt/erlang/bin\n```\n\n `# source /etc/profile `使得文件生效\n\n### 1.5 验证\n\n验证erlang是否安装成功：`# erl` 进入如下界面就说明 配置好了\n\n```xml\n[root@localhost bin]# erl\nErlang/OTP 21 [erts-10.2] [source] [64-bit] [smp:1:1] [ds:1:1:10] [async-threads:1]\n\nEshell V10.2  (abort with ^G)\n1> \n`\n```\n\n## 2. RabbitMQ安装\n\n### 2.1 下载 \n\n官网：`http://www.rabbitmq.com/releases/rabbitmq-server`\n\n这里下载3.7.10 :`http://www.rabbitmq.com/install-generic-unix.html`\n\n文件：`rabbitmq-server-generic-unix-3.7.10.tar.xz`\n\n### 2.2 解压\n\n文件是xz格式的，解压后得到tar格式文件。\n\n`# xz -d rabbitmq-server-generic-unix-3.7.10.tar.xz`\n\n`# tar -xvf rabbitmq-server-generic-unix-3.7.10.tar`\n\n复制到/usr/local/opt/rabbitmq目录下`# cp -r rabbitmq_server-3.7.10/ /usr/local/opt/rabbitmq`\n\n### 2.3 环境变量配置\n\n配置rabbitmq环境变量,`# vi /etc/profile` 添加以下内容\n\n`export PATH=$PATH:/usr/local/opt/rabbitmq/sbin`\n\n环境变量生效：`source /etc/profile`\n\n### 2.4 使用\n\n进入/usr/local/opt/rabbitmq/sbin目录\n\n启动服务：`# ./rabbitmq-server -detached`\n\n查看服务状态：`# ./rabbitmqctl status`\n\n关闭服务：`# ./rabbitmqctl stop `\n\n### 2.5 配置网页插件\n\n首先创建目录，否则可能报错：`# mkdir /etc/rabbitmq `\n\n启用插件：`# ./rabbitmq-plugins enable rabbitmq_management`\n\n启动mq：`# ./rabbitmq-server -detached`\n\n配置linux 端口： 15672 网页管理，  5672 AMQP端口\n\n然后访问`http://192.168.5.154:15672/`\n\n这里是需要登录了。\n\nrabbitmq默认会创建guest账号，只能用于localhost登录页面管理员，需要自己创建账号。\n\n### 2.6 添加账户\n\n查看mq用户：`# rabbitmqctl list_users  `\n\n查看用户权限：`# rabbitmqctl list_user_permissions guest`\n\n新增用户： `# rabbitmqctl add_user root root`  用户名root,密码root\n\n赋予管理员权限：\n\n`rabbitmqctl set_user_tags root administrator `\n\n`rabbitmqctl set_permissions -p \"/\" root \".*\" \".*\" \".*\" `\n\n\n\n## 3. 问题\n\n1.启动报错\n\n```java\n[root@localhost sbin]# ./rabbitmq-server start\n\nBOOT FAILED\n===========\n=INFO REPORT==== 21-Jan-2019::20:49:29.302765 ===\nError description:\n   noproc\n   \nLog files (may contain more information):\n   /usr/local/opt/rabbitmq/var/log/rabbitmq/rabbit@localhost.log\n   /usr/local/opt/rabbitmq/var/log/rabbitmq/rabbit@localhost-sasl.log\n\nStack trace:\n   [{gen,do_for_proc,2,[{file,\"gen.erl\"},{line,228}]},\n    {gen_event,rpc,2,[{file,\"gen_event.erl\"},{line,239}]},\n    {rabbit,ensure_working_log_handlers,0,\n            [{file,\"src/rabbit.erl\"},{line,856}]},\n    {rabbit,'-boot/0-fun-0-',0,[{file,\"src/rabbit.erl\"},{line,288}]},\n    {rabbit,start_it,1,[{file,\"src/rabbit.erl\"},{line,424}]},\n    {init,start_em,1,[]},\n    {init,do_boot,3,[]}]\n\n{\"init terminating in do_boot\",noproc}\ninit terminating in do_boot (noproc)\n\nCrash dump is being written to: erl_crash.dump...done\n```\n\n这个问题网上查了一下，有的说是权限问题，也有说是erlang和rabbitmq版本对应不上，暂时没解决。\n\n以解决，确实是版本问题，erlang版本和rabbitmq的版本对应不上，最前面单独写了这个关于版本的问题。","source":"_posts/linux/install-rabbitmq.md","raw":"---\ntitle: Linux下安装RabbitMQ\ntags:\n  - Linux\ncategories:\n  - Linux\nabbrlink: b84a2c6c\ndate: 2019-01-21 22:00:00\n---\n\n本章主要讲了如何通过解压方式在Linux下安装RabbitMQ和Erlang，超级详细的安装过程，和安装过程中遇到的一些问题。\n\n<!-- more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n软件统一放在`/usr/software`下 解压后放在单独的文件夹下`/usr/locac/opt/rabbitmq`,`/usr/local/opt/erlang`\n\n# RabbitMQ\n\n## 0. 环境准备\n\n### 1.版本问题\n\nErlang和RabbitMQ版本必须对应才行，不然可能会出错。\n\n**官网信息如下 RabbitMQ Erlang Version Requirements**\n\nErlang/OTP versions **older than 20.3 are not supported** by RabbitMQ versions released in 2019.\n\nRabbitMQ **versions prior to 3.7.7 do not support Erlang/OTP 21** or newer.\n\nRabbitMQ version3.7.7--3.7.10 需要的Erlang版本最低为20.3.X,最高为21.X\n\n| RabbitMQ version   | Minimum required Erlang/OTP | Maximum supported Erlang/OTP |\n| ------------------ | --------------------------- | ---------------------------- |\n| **3.7.7---3.7.10** | **20.3.X**                  | **21.X**                     |\n| **3.7.0--3.7.6**   | **19.3**                    | **20.3.X**                   |\n\n具体信息在这里`http://www.rabbitmq.com/which-erlang.html`\n\n这里选择的版本是 `Erlang:21.2`,`RabbitMQ3.7.10`,`Linux:CentOS 7`\n\n### 2. 依赖下载\n\n安装`rabbitmq`需要下载以下依赖，这里可以提前下载上。\n\n`# yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel`\n\n`# yum install xmlto -y`\n\n## 1. Erlang安装\n\n### 1.1 下载\n\n安装RabbitMQ之前需要先安装Erlang.\n\n下载地址：`http://www.erlang.org/downloads`\n\n文件`otp_src_21.2.tar.gz`\n\n### 1.2 解压\n\n将压缩包上传到虚拟机中，我是放在/usr/software目录下的\n\n`# tar xvf otp_src_21.2.tar.gz`  解压文件\n\n复制一份到/usr/local/opt/erlang-software\n\n`# cp otp_src_21.2  /usr/local/opt/erlang-software -r`\n\n创建erlang安装目录： /usr/local/opt/erlang  \n\n### 1.3 编译\n\n进入到/usr/local/opt/erlang-software目录下\n\n`# cd /usr/local/opt/erlang-software`\n\n配置安装路径编译代码：`# ./configure --prefix=/usr/local/opt/erlang`\n\n`# make && make install` 执行编译\n\n### 1.4 环境变量配置\n\n配置Erlang环境变量,`# vi /etc/profile` 添加以下内容\n\n```xml\nexport PATH=$PATH:/usr/local/opt/erlang/bin\n```\n\n `# source /etc/profile `使得文件生效\n\n### 1.5 验证\n\n验证erlang是否安装成功：`# erl` 进入如下界面就说明 配置好了\n\n```xml\n[root@localhost bin]# erl\nErlang/OTP 21 [erts-10.2] [source] [64-bit] [smp:1:1] [ds:1:1:10] [async-threads:1]\n\nEshell V10.2  (abort with ^G)\n1> \n`\n```\n\n## 2. RabbitMQ安装\n\n### 2.1 下载 \n\n官网：`http://www.rabbitmq.com/releases/rabbitmq-server`\n\n这里下载3.7.10 :`http://www.rabbitmq.com/install-generic-unix.html`\n\n文件：`rabbitmq-server-generic-unix-3.7.10.tar.xz`\n\n### 2.2 解压\n\n文件是xz格式的，解压后得到tar格式文件。\n\n`# xz -d rabbitmq-server-generic-unix-3.7.10.tar.xz`\n\n`# tar -xvf rabbitmq-server-generic-unix-3.7.10.tar`\n\n复制到/usr/local/opt/rabbitmq目录下`# cp -r rabbitmq_server-3.7.10/ /usr/local/opt/rabbitmq`\n\n### 2.3 环境变量配置\n\n配置rabbitmq环境变量,`# vi /etc/profile` 添加以下内容\n\n`export PATH=$PATH:/usr/local/opt/rabbitmq/sbin`\n\n环境变量生效：`source /etc/profile`\n\n### 2.4 使用\n\n进入/usr/local/opt/rabbitmq/sbin目录\n\n启动服务：`# ./rabbitmq-server -detached`\n\n查看服务状态：`# ./rabbitmqctl status`\n\n关闭服务：`# ./rabbitmqctl stop `\n\n### 2.5 配置网页插件\n\n首先创建目录，否则可能报错：`# mkdir /etc/rabbitmq `\n\n启用插件：`# ./rabbitmq-plugins enable rabbitmq_management`\n\n启动mq：`# ./rabbitmq-server -detached`\n\n配置linux 端口： 15672 网页管理，  5672 AMQP端口\n\n然后访问`http://192.168.5.154:15672/`\n\n这里是需要登录了。\n\nrabbitmq默认会创建guest账号，只能用于localhost登录页面管理员，需要自己创建账号。\n\n### 2.6 添加账户\n\n查看mq用户：`# rabbitmqctl list_users  `\n\n查看用户权限：`# rabbitmqctl list_user_permissions guest`\n\n新增用户： `# rabbitmqctl add_user root root`  用户名root,密码root\n\n赋予管理员权限：\n\n`rabbitmqctl set_user_tags root administrator `\n\n`rabbitmqctl set_permissions -p \"/\" root \".*\" \".*\" \".*\" `\n\n\n\n## 3. 问题\n\n1.启动报错\n\n```java\n[root@localhost sbin]# ./rabbitmq-server start\n\nBOOT FAILED\n===========\n=INFO REPORT==== 21-Jan-2019::20:49:29.302765 ===\nError description:\n   noproc\n   \nLog files (may contain more information):\n   /usr/local/opt/rabbitmq/var/log/rabbitmq/rabbit@localhost.log\n   /usr/local/opt/rabbitmq/var/log/rabbitmq/rabbit@localhost-sasl.log\n\nStack trace:\n   [{gen,do_for_proc,2,[{file,\"gen.erl\"},{line,228}]},\n    {gen_event,rpc,2,[{file,\"gen_event.erl\"},{line,239}]},\n    {rabbit,ensure_working_log_handlers,0,\n            [{file,\"src/rabbit.erl\"},{line,856}]},\n    {rabbit,'-boot/0-fun-0-',0,[{file,\"src/rabbit.erl\"},{line,288}]},\n    {rabbit,start_it,1,[{file,\"src/rabbit.erl\"},{line,424}]},\n    {init,start_em,1,[]},\n    {init,do_boot,3,[]}]\n\n{\"init terminating in do_boot\",noproc}\ninit terminating in do_boot (noproc)\n\nCrash dump is being written to: erl_crash.dump...done\n```\n\n这个问题网上查了一下，有的说是权限问题，也有说是erlang和rabbitmq版本对应不上，暂时没解决。\n\n以解决，确实是版本问题，erlang版本和rabbitmq的版本对应不上，最前面单独写了这个关于版本的问题。","slug":"linux/install-rabbitmq","published":1,"updated":"2019-02-06T01:12:00.986Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv44w001h0ww4mkfzn4qg","content":"<p>本章主要讲了如何通过解压方式在Linux下安装RabbitMQ和Erlang，超级详细的安装过程，和安装过程中遇到的一些问题。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<p>软件统一放在<code>/usr/software</code>下 解压后放在单独的文件夹下<code>/usr/locac/opt/rabbitmq</code>,<code>/usr/local/opt/erlang</code></p>\n<h1 id=\"RabbitMQ\"><a href=\"#RabbitMQ\" class=\"headerlink\" title=\"RabbitMQ\"></a>RabbitMQ</h1><h2 id=\"0-环境准备\"><a href=\"#0-环境准备\" class=\"headerlink\" title=\"0. 环境准备\"></a>0. 环境准备</h2><h3 id=\"1-版本问题\"><a href=\"#1-版本问题\" class=\"headerlink\" title=\"1.版本问题\"></a>1.版本问题</h3><p>Erlang和RabbitMQ版本必须对应才行，不然可能会出错。</p>\n<p><strong>官网信息如下 RabbitMQ Erlang Version Requirements</strong></p>\n<p>Erlang/OTP versions <strong>older than 20.3 are not supported</strong> by RabbitMQ versions released in 2019.</p>\n<p>RabbitMQ <strong>versions prior to 3.7.7 do not support Erlang/OTP 21</strong> or newer.</p>\n<p>RabbitMQ version3.7.7–3.7.10 需要的Erlang版本最低为20.3.X,最高为21.X</p>\n<table>\n<thead>\n<tr>\n<th>RabbitMQ version</th>\n<th>Minimum required Erlang/OTP</th>\n<th>Maximum supported Erlang/OTP</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>3.7.7—3.7.10</strong></td>\n<td><strong>20.3.X</strong></td>\n<td><strong>21.X</strong></td>\n</tr>\n<tr>\n<td><strong>3.7.0–3.7.6</strong></td>\n<td><strong>19.3</strong></td>\n<td><strong>20.3.X</strong></td>\n</tr>\n</tbody>\n</table>\n<p>具体信息在这里<code>http://www.rabbitmq.com/which-erlang.html</code></p>\n<p>这里选择的版本是 <code>Erlang:21.2</code>,<code>RabbitMQ3.7.10</code>,<code>Linux:CentOS 7</code></p>\n<h3 id=\"2-依赖下载\"><a href=\"#2-依赖下载\" class=\"headerlink\" title=\"2. 依赖下载\"></a>2. 依赖下载</h3><p>安装<code>rabbitmq</code>需要下载以下依赖，这里可以提前下载上。</p>\n<p><code># yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel</code></p>\n<p><code># yum install xmlto -y</code></p>\n<h2 id=\"1-Erlang安装\"><a href=\"#1-Erlang安装\" class=\"headerlink\" title=\"1. Erlang安装\"></a>1. Erlang安装</h2><h3 id=\"1-1-下载\"><a href=\"#1-1-下载\" class=\"headerlink\" title=\"1.1 下载\"></a>1.1 下载</h3><p>安装RabbitMQ之前需要先安装Erlang.</p>\n<p>下载地址：<code>http://www.erlang.org/downloads</code></p>\n<p>文件<code>otp_src_21.2.tar.gz</code></p>\n<h3 id=\"1-2-解压\"><a href=\"#1-2-解压\" class=\"headerlink\" title=\"1.2 解压\"></a>1.2 解压</h3><p>将压缩包上传到虚拟机中，我是放在/usr/software目录下的</p>\n<p><code># tar xvf otp_src_21.2.tar.gz</code>  解压文件</p>\n<p>复制一份到/usr/local/opt/erlang-software</p>\n<p><code># cp otp_src_21.2  /usr/local/opt/erlang-software -r</code></p>\n<p>创建erlang安装目录： /usr/local/opt/erlang  </p>\n<h3 id=\"1-3-编译\"><a href=\"#1-3-编译\" class=\"headerlink\" title=\"1.3 编译\"></a>1.3 编译</h3><p>进入到/usr/local/opt/erlang-software目录下</p>\n<p><code># cd /usr/local/opt/erlang-software</code></p>\n<p>配置安装路径编译代码：<code># ./configure --prefix=/usr/local/opt/erlang</code></p>\n<p><code># make &amp;&amp; make install</code> 执行编译</p>\n<h3 id=\"1-4-环境变量配置\"><a href=\"#1-4-环境变量配置\" class=\"headerlink\" title=\"1.4 环境变量配置\"></a>1.4 环境变量配置</h3><p>配置Erlang环境变量,<code># vi /etc/profile</code> 添加以下内容</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:/usr/local/opt/erlang/bin</span><br></pre></td></tr></table></figure>\n<p> <code># source /etc/profile</code>使得文件生效</p>\n<h3 id=\"1-5-验证\"><a href=\"#1-5-验证\" class=\"headerlink\" title=\"1.5 验证\"></a>1.5 验证</h3><p>验证erlang是否安装成功：<code># erl</code> 进入如下界面就说明 配置好了</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost bin]# erl</span><br><span class=\"line\">Erlang/OTP 21 [erts-10.2] [source] [64-bit] [smp:1:1] [ds:1:1:10] [async-threads:1]</span><br><span class=\"line\"></span><br><span class=\"line\">Eshell V10.2  (abort with ^G)</span><br><span class=\"line\">1&gt; </span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-RabbitMQ安装\"><a href=\"#2-RabbitMQ安装\" class=\"headerlink\" title=\"2. RabbitMQ安装\"></a>2. RabbitMQ安装</h2><h3 id=\"2-1-下载\"><a href=\"#2-1-下载\" class=\"headerlink\" title=\"2.1 下载\"></a>2.1 下载</h3><p>官网：<code>http://www.rabbitmq.com/releases/rabbitmq-server</code></p>\n<p>这里下载3.7.10 :<code>http://www.rabbitmq.com/install-generic-unix.html</code></p>\n<p>文件：<code>rabbitmq-server-generic-unix-3.7.10.tar.xz</code></p>\n<h3 id=\"2-2-解压\"><a href=\"#2-2-解压\" class=\"headerlink\" title=\"2.2 解压\"></a>2.2 解压</h3><p>文件是xz格式的，解压后得到tar格式文件。</p>\n<p><code># xz -d rabbitmq-server-generic-unix-3.7.10.tar.xz</code></p>\n<p><code># tar -xvf rabbitmq-server-generic-unix-3.7.10.tar</code></p>\n<p>复制到/usr/local/opt/rabbitmq目录下<code># cp -r rabbitmq_server-3.7.10/ /usr/local/opt/rabbitmq</code></p>\n<h3 id=\"2-3-环境变量配置\"><a href=\"#2-3-环境变量配置\" class=\"headerlink\" title=\"2.3 环境变量配置\"></a>2.3 环境变量配置</h3><p>配置rabbitmq环境变量,<code># vi /etc/profile</code> 添加以下内容</p>\n<p><code>export PATH=$PATH:/usr/local/opt/rabbitmq/sbin</code></p>\n<p>环境变量生效：<code>source /etc/profile</code></p>\n<h3 id=\"2-4-使用\"><a href=\"#2-4-使用\" class=\"headerlink\" title=\"2.4 使用\"></a>2.4 使用</h3><p>进入/usr/local/opt/rabbitmq/sbin目录</p>\n<p>启动服务：<code># ./rabbitmq-server -detached</code></p>\n<p>查看服务状态：<code># ./rabbitmqctl status</code></p>\n<p>关闭服务：<code># ./rabbitmqctl stop</code></p>\n<h3 id=\"2-5-配置网页插件\"><a href=\"#2-5-配置网页插件\" class=\"headerlink\" title=\"2.5 配置网页插件\"></a>2.5 配置网页插件</h3><p>首先创建目录，否则可能报错：<code># mkdir /etc/rabbitmq</code></p>\n<p>启用插件：<code># ./rabbitmq-plugins enable rabbitmq_management</code></p>\n<p>启动mq：<code># ./rabbitmq-server -detached</code></p>\n<p>配置linux 端口： 15672 网页管理，  5672 AMQP端口</p>\n<p>然后访问<code>http://192.168.5.154:15672/</code></p>\n<p>这里是需要登录了。</p>\n<p>rabbitmq默认会创建guest账号，只能用于localhost登录页面管理员，需要自己创建账号。</p>\n<h3 id=\"2-6-添加账户\"><a href=\"#2-6-添加账户\" class=\"headerlink\" title=\"2.6 添加账户\"></a>2.6 添加账户</h3><p>查看mq用户：<code># rabbitmqctl list_users</code></p>\n<p>查看用户权限：<code># rabbitmqctl list_user_permissions guest</code></p>\n<p>新增用户： <code># rabbitmqctl add_user root root</code>  用户名root,密码root</p>\n<p>赋予管理员权限：</p>\n<p><code>rabbitmqctl set_user_tags root administrator</code></p>\n<p><code>rabbitmqctl set_permissions -p &quot;/&quot; root &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</code></p>\n<h2 id=\"3-问题\"><a href=\"#3-问题\" class=\"headerlink\" title=\"3. 问题\"></a>3. 问题</h2><p>1.启动报错</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost sbin]# ./rabbitmq-server start</span><br><span class=\"line\"></span><br><span class=\"line\">BOOT FAILED</span><br><span class=\"line\">===========</span><br><span class=\"line\">=INFO REPORT==== <span class=\"number\">21</span>-Jan-<span class=\"number\">2019</span>::<span class=\"number\">20</span>:<span class=\"number\">49</span>:<span class=\"number\">29.302765</span> ===</span><br><span class=\"line\">Error description:</span><br><span class=\"line\">   noproc</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"function\">Log <span class=\"title\">files</span> <span class=\"params\">(may contain more information)</span>:</span></span><br><span class=\"line\"><span class=\"function\">   /usr/local/opt/rabbitmq/<span class=\"keyword\">var</span>/log/rabbitmq/rabbit@localhost.log</span></span><br><span class=\"line\"><span class=\"function\">   /usr/local/opt/rabbitmq/<span class=\"keyword\">var</span>/log/rabbitmq/rabbit@localhost-sasl.log</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">Stack trace:</span></span><br><span class=\"line\"><span class=\"function\">   [</span>&#123;gen,do_for_proc,<span class=\"number\">2</span>,[&#123;file,<span class=\"string\">\"gen.erl\"</span>&#125;,&#123;line,<span class=\"number\">228</span>&#125;]&#125;,</span><br><span class=\"line\">    &#123;gen_event,rpc,<span class=\"number\">2</span>,[&#123;file,<span class=\"string\">\"gen_event.erl\"</span>&#125;,&#123;line,<span class=\"number\">239</span>&#125;]&#125;,</span><br><span class=\"line\">    &#123;rabbit,ensure_working_log_handlers,<span class=\"number\">0</span>,</span><br><span class=\"line\">            [&#123;file,<span class=\"string\">\"src/rabbit.erl\"</span>&#125;,&#123;line,<span class=\"number\">856</span>&#125;]&#125;,</span><br><span class=\"line\">    &#123;rabbit,<span class=\"string\">'-boot/0-fun-0-'</span>,<span class=\"number\">0</span>,[&#123;file,<span class=\"string\">\"src/rabbit.erl\"</span>&#125;,&#123;line,<span class=\"number\">288</span>&#125;]&#125;,</span><br><span class=\"line\">    &#123;rabbit,start_it,<span class=\"number\">1</span>,[&#123;file,<span class=\"string\">\"src/rabbit.erl\"</span>&#125;,&#123;line,<span class=\"number\">424</span>&#125;]&#125;,</span><br><span class=\"line\">    &#123;init,start_em,<span class=\"number\">1</span>,[]&#125;,</span><br><span class=\"line\">    &#123;init,do_boot,<span class=\"number\">3</span>,[]&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;<span class=\"string\">\"init terminating in do_boot\"</span>,noproc&#125;</span><br><span class=\"line\"><span class=\"function\">init terminating in <span class=\"title\">do_boot</span> <span class=\"params\">(noproc)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">Crash dump is being written to: erl_crash.dump...done</span></span><br></pre></td></tr></table></figure>\n<p>这个问题网上查了一下，有的说是权限问题，也有说是erlang和rabbitmq版本对应不上，暂时没解决。</p>\n<p>以解决，确实是版本问题，erlang版本和rabbitmq的版本对应不上，最前面单独写了这个关于版本的问题。</p>\n","site":{"data":{}},"excerpt":"<p>本章主要讲了如何通过解压方式在Linux下安装RabbitMQ和Erlang，超级详细的安装过程，和安装过程中遇到的一些问题。</p>","more":"<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<p>软件统一放在<code>/usr/software</code>下 解压后放在单独的文件夹下<code>/usr/locac/opt/rabbitmq</code>,<code>/usr/local/opt/erlang</code></p>\n<h1 id=\"RabbitMQ\"><a href=\"#RabbitMQ\" class=\"headerlink\" title=\"RabbitMQ\"></a>RabbitMQ</h1><h2 id=\"0-环境准备\"><a href=\"#0-环境准备\" class=\"headerlink\" title=\"0. 环境准备\"></a>0. 环境准备</h2><h3 id=\"1-版本问题\"><a href=\"#1-版本问题\" class=\"headerlink\" title=\"1.版本问题\"></a>1.版本问题</h3><p>Erlang和RabbitMQ版本必须对应才行，不然可能会出错。</p>\n<p><strong>官网信息如下 RabbitMQ Erlang Version Requirements</strong></p>\n<p>Erlang/OTP versions <strong>older than 20.3 are not supported</strong> by RabbitMQ versions released in 2019.</p>\n<p>RabbitMQ <strong>versions prior to 3.7.7 do not support Erlang/OTP 21</strong> or newer.</p>\n<p>RabbitMQ version3.7.7–3.7.10 需要的Erlang版本最低为20.3.X,最高为21.X</p>\n<table>\n<thead>\n<tr>\n<th>RabbitMQ version</th>\n<th>Minimum required Erlang/OTP</th>\n<th>Maximum supported Erlang/OTP</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>3.7.7—3.7.10</strong></td>\n<td><strong>20.3.X</strong></td>\n<td><strong>21.X</strong></td>\n</tr>\n<tr>\n<td><strong>3.7.0–3.7.6</strong></td>\n<td><strong>19.3</strong></td>\n<td><strong>20.3.X</strong></td>\n</tr>\n</tbody>\n</table>\n<p>具体信息在这里<code>http://www.rabbitmq.com/which-erlang.html</code></p>\n<p>这里选择的版本是 <code>Erlang:21.2</code>,<code>RabbitMQ3.7.10</code>,<code>Linux:CentOS 7</code></p>\n<h3 id=\"2-依赖下载\"><a href=\"#2-依赖下载\" class=\"headerlink\" title=\"2. 依赖下载\"></a>2. 依赖下载</h3><p>安装<code>rabbitmq</code>需要下载以下依赖，这里可以提前下载上。</p>\n<p><code># yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel</code></p>\n<p><code># yum install xmlto -y</code></p>\n<h2 id=\"1-Erlang安装\"><a href=\"#1-Erlang安装\" class=\"headerlink\" title=\"1. Erlang安装\"></a>1. Erlang安装</h2><h3 id=\"1-1-下载\"><a href=\"#1-1-下载\" class=\"headerlink\" title=\"1.1 下载\"></a>1.1 下载</h3><p>安装RabbitMQ之前需要先安装Erlang.</p>\n<p>下载地址：<code>http://www.erlang.org/downloads</code></p>\n<p>文件<code>otp_src_21.2.tar.gz</code></p>\n<h3 id=\"1-2-解压\"><a href=\"#1-2-解压\" class=\"headerlink\" title=\"1.2 解压\"></a>1.2 解压</h3><p>将压缩包上传到虚拟机中，我是放在/usr/software目录下的</p>\n<p><code># tar xvf otp_src_21.2.tar.gz</code>  解压文件</p>\n<p>复制一份到/usr/local/opt/erlang-software</p>\n<p><code># cp otp_src_21.2  /usr/local/opt/erlang-software -r</code></p>\n<p>创建erlang安装目录： /usr/local/opt/erlang  </p>\n<h3 id=\"1-3-编译\"><a href=\"#1-3-编译\" class=\"headerlink\" title=\"1.3 编译\"></a>1.3 编译</h3><p>进入到/usr/local/opt/erlang-software目录下</p>\n<p><code># cd /usr/local/opt/erlang-software</code></p>\n<p>配置安装路径编译代码：<code># ./configure --prefix=/usr/local/opt/erlang</code></p>\n<p><code># make &amp;&amp; make install</code> 执行编译</p>\n<h3 id=\"1-4-环境变量配置\"><a href=\"#1-4-环境变量配置\" class=\"headerlink\" title=\"1.4 环境变量配置\"></a>1.4 环境变量配置</h3><p>配置Erlang环境变量,<code># vi /etc/profile</code> 添加以下内容</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:/usr/local/opt/erlang/bin</span><br></pre></td></tr></table></figure>\n<p> <code># source /etc/profile</code>使得文件生效</p>\n<h3 id=\"1-5-验证\"><a href=\"#1-5-验证\" class=\"headerlink\" title=\"1.5 验证\"></a>1.5 验证</h3><p>验证erlang是否安装成功：<code># erl</code> 进入如下界面就说明 配置好了</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost bin]# erl</span><br><span class=\"line\">Erlang/OTP 21 [erts-10.2] [source] [64-bit] [smp:1:1] [ds:1:1:10] [async-threads:1]</span><br><span class=\"line\"></span><br><span class=\"line\">Eshell V10.2  (abort with ^G)</span><br><span class=\"line\">1&gt; </span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-RabbitMQ安装\"><a href=\"#2-RabbitMQ安装\" class=\"headerlink\" title=\"2. RabbitMQ安装\"></a>2. RabbitMQ安装</h2><h3 id=\"2-1-下载\"><a href=\"#2-1-下载\" class=\"headerlink\" title=\"2.1 下载\"></a>2.1 下载</h3><p>官网：<code>http://www.rabbitmq.com/releases/rabbitmq-server</code></p>\n<p>这里下载3.7.10 :<code>http://www.rabbitmq.com/install-generic-unix.html</code></p>\n<p>文件：<code>rabbitmq-server-generic-unix-3.7.10.tar.xz</code></p>\n<h3 id=\"2-2-解压\"><a href=\"#2-2-解压\" class=\"headerlink\" title=\"2.2 解压\"></a>2.2 解压</h3><p>文件是xz格式的，解压后得到tar格式文件。</p>\n<p><code># xz -d rabbitmq-server-generic-unix-3.7.10.tar.xz</code></p>\n<p><code># tar -xvf rabbitmq-server-generic-unix-3.7.10.tar</code></p>\n<p>复制到/usr/local/opt/rabbitmq目录下<code># cp -r rabbitmq_server-3.7.10/ /usr/local/opt/rabbitmq</code></p>\n<h3 id=\"2-3-环境变量配置\"><a href=\"#2-3-环境变量配置\" class=\"headerlink\" title=\"2.3 环境变量配置\"></a>2.3 环境变量配置</h3><p>配置rabbitmq环境变量,<code># vi /etc/profile</code> 添加以下内容</p>\n<p><code>export PATH=$PATH:/usr/local/opt/rabbitmq/sbin</code></p>\n<p>环境变量生效：<code>source /etc/profile</code></p>\n<h3 id=\"2-4-使用\"><a href=\"#2-4-使用\" class=\"headerlink\" title=\"2.4 使用\"></a>2.4 使用</h3><p>进入/usr/local/opt/rabbitmq/sbin目录</p>\n<p>启动服务：<code># ./rabbitmq-server -detached</code></p>\n<p>查看服务状态：<code># ./rabbitmqctl status</code></p>\n<p>关闭服务：<code># ./rabbitmqctl stop</code></p>\n<h3 id=\"2-5-配置网页插件\"><a href=\"#2-5-配置网页插件\" class=\"headerlink\" title=\"2.5 配置网页插件\"></a>2.5 配置网页插件</h3><p>首先创建目录，否则可能报错：<code># mkdir /etc/rabbitmq</code></p>\n<p>启用插件：<code># ./rabbitmq-plugins enable rabbitmq_management</code></p>\n<p>启动mq：<code># ./rabbitmq-server -detached</code></p>\n<p>配置linux 端口： 15672 网页管理，  5672 AMQP端口</p>\n<p>然后访问<code>http://192.168.5.154:15672/</code></p>\n<p>这里是需要登录了。</p>\n<p>rabbitmq默认会创建guest账号，只能用于localhost登录页面管理员，需要自己创建账号。</p>\n<h3 id=\"2-6-添加账户\"><a href=\"#2-6-添加账户\" class=\"headerlink\" title=\"2.6 添加账户\"></a>2.6 添加账户</h3><p>查看mq用户：<code># rabbitmqctl list_users</code></p>\n<p>查看用户权限：<code># rabbitmqctl list_user_permissions guest</code></p>\n<p>新增用户： <code># rabbitmqctl add_user root root</code>  用户名root,密码root</p>\n<p>赋予管理员权限：</p>\n<p><code>rabbitmqctl set_user_tags root administrator</code></p>\n<p><code>rabbitmqctl set_permissions -p &quot;/&quot; root &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</code></p>\n<h2 id=\"3-问题\"><a href=\"#3-问题\" class=\"headerlink\" title=\"3. 问题\"></a>3. 问题</h2><p>1.启动报错</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost sbin]# ./rabbitmq-server start</span><br><span class=\"line\"></span><br><span class=\"line\">BOOT FAILED</span><br><span class=\"line\">===========</span><br><span class=\"line\">=INFO REPORT==== <span class=\"number\">21</span>-Jan-<span class=\"number\">2019</span>::<span class=\"number\">20</span>:<span class=\"number\">49</span>:<span class=\"number\">29.302765</span> ===</span><br><span class=\"line\">Error description:</span><br><span class=\"line\">   noproc</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"function\">Log <span class=\"title\">files</span> <span class=\"params\">(may contain more information)</span>:</span></span><br><span class=\"line\"><span class=\"function\">   /usr/local/opt/rabbitmq/<span class=\"keyword\">var</span>/log/rabbitmq/rabbit@localhost.log</span></span><br><span class=\"line\"><span class=\"function\">   /usr/local/opt/rabbitmq/<span class=\"keyword\">var</span>/log/rabbitmq/rabbit@localhost-sasl.log</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">Stack trace:</span></span><br><span class=\"line\"><span class=\"function\">   [</span>&#123;gen,do_for_proc,<span class=\"number\">2</span>,[&#123;file,<span class=\"string\">\"gen.erl\"</span>&#125;,&#123;line,<span class=\"number\">228</span>&#125;]&#125;,</span><br><span class=\"line\">    &#123;gen_event,rpc,<span class=\"number\">2</span>,[&#123;file,<span class=\"string\">\"gen_event.erl\"</span>&#125;,&#123;line,<span class=\"number\">239</span>&#125;]&#125;,</span><br><span class=\"line\">    &#123;rabbit,ensure_working_log_handlers,<span class=\"number\">0</span>,</span><br><span class=\"line\">            [&#123;file,<span class=\"string\">\"src/rabbit.erl\"</span>&#125;,&#123;line,<span class=\"number\">856</span>&#125;]&#125;,</span><br><span class=\"line\">    &#123;rabbit,<span class=\"string\">'-boot/0-fun-0-'</span>,<span class=\"number\">0</span>,[&#123;file,<span class=\"string\">\"src/rabbit.erl\"</span>&#125;,&#123;line,<span class=\"number\">288</span>&#125;]&#125;,</span><br><span class=\"line\">    &#123;rabbit,start_it,<span class=\"number\">1</span>,[&#123;file,<span class=\"string\">\"src/rabbit.erl\"</span>&#125;,&#123;line,<span class=\"number\">424</span>&#125;]&#125;,</span><br><span class=\"line\">    &#123;init,start_em,<span class=\"number\">1</span>,[]&#125;,</span><br><span class=\"line\">    &#123;init,do_boot,<span class=\"number\">3</span>,[]&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;<span class=\"string\">\"init terminating in do_boot\"</span>,noproc&#125;</span><br><span class=\"line\"><span class=\"function\">init terminating in <span class=\"title\">do_boot</span> <span class=\"params\">(noproc)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">Crash dump is being written to: erl_crash.dump...done</span></span><br></pre></td></tr></table></figure>\n<p>这个问题网上查了一下，有的说是权限问题，也有说是erlang和rabbitmq版本对应不上，暂时没解决。</p>\n<p>以解决，确实是版本问题，erlang版本和rabbitmq的版本对应不上，最前面单独写了这个关于版本的问题。</p>"},{"title":"Linux安装MySQL教程","abbrlink":"1be8c408","date":"2019-01-16T14:00:00.000Z","_content":"\n本章主要讲了如何通过解压方式在Linux下安装MySQL，以及如何设置让我们可以远程连接到服务器上的mysql.\n\n<!-- more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n软件统一放在`/usr/software`下 解压后放在单独的文件夹下`/usr/local/java`/`/usr/local/mysql`\n\n其中：`#`为Linux命令，`mysql`则是mysql下的命令\n\n软件统一放在`/usr/software`下 解压后放在单独的文件夹下`/usr/local/java`/`/usr/local/mysql`\n\n安装包下载`mysql-5.7.24-linux-glibc2.12-x86_64.tar`\n\n网址`https://dev.mysql.com/downloads/mysql/5.7.html#downloads`\n\n![mysql](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/software-install/mysql5.7-down.png)\n\n## 1. 安装依赖\n\n```xml\n# yum install -y cmake make gcc gcc-c++ libaio ncurses ncurses-devel\n```\n\n## 2. 解压文件\n\n压缩包上传到虚拟机`/usr/software目录下`,进入这个目录\n\n解压文件\n\n```xml\n# tar zxvf mysql-5.7.24-linux-glibc2.12-x86_64.tar.gz\n```\n\n将解压后的文件移动到`/usr/local/mysql`\n\n```xml\n# mv mysql-5.7.24-linux-glibc2.12-x86_64 /usr/local/mysql\n```\n\n## 3. 添加用户和赋权\n\n1.添加用户和用户组\n\n给mysql赋权的用户必须对当前目录具有读写权限，但是一般不用root账户，所以创建一个用户mysql。\n\n执行命令：创建用户组mysql`groupadd mysql``\n\n创建用户也叫mysql \n\n```xml\n// 命令中第一个mysql是用户，第二个mysql是用户组。\n# useradd -r -g mysql mysql \n```\n\n2.给用户赋权限\n\n 一定保证当前是在`/usr/local/mysql` 目录下\n\n给用户组赋权限\n\n```xml\n//mysql是用户组名\n# chgrp -R mysql.\n```\n\n给用户赋权限  \n\n```xml\n//这个mysql是用户名\n#  chown -R mysql. \n```\n\n## 4. 数据库初始化\n\n安装数据库 : \n\n```xml\n// 这里会生成临时密码，后边有用\n# bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data\n```\n\n执行以下命令创建RSA private key ：\n\n```xml\n# bin/mysql_ssl_rsa_setup --datadir=/usr/local/mysql/data\n```\n\n## 5. 配置my.cnf\n\n```xml\n# vim /etc/my.cnf\n```\n\n 内容如下：\n\n```java\n[mysqld]\ncharacter_set_server=utf8\ninit_connect='SET NAMES utf8'\nbasedir=/usr/local/mysql\ndatadir=/usr/local/mysql/data\nsocket=/tmp/mysql.sock\n#不区分大小写 (sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES 这个简单来说就是sql语句是否严格)\nlower_case_table_names = 1\nlog-error=/var/log/mysqld.log\npid-file=/usr/local/mysql/data/mysqld.pid   \n```\n\n\n\n```xml\n# cp /usr/local/mysql/support-files/mysql.server  /etc/init.d/mysqld\n# vim /etc/init.d/mysqld\n```\n\n添加以下内容，在46行\n\n```java\n basedir=/usr/local/mysql\n datadir=/usr/local/mysql/data\n```\n\n## 6. 修改密码\n\n启动mysql   \n\n```xml\n# service mysqld start\n```\n\n 加入开机起动    \n\n```xml\n# chkconfig --add mysqld\n```\n\n登录修改密码 \n\n```xml\n# mysql -uroot -p 上面初始化时的密码\n```\n\n如果出现错误 需要添加软连接 \n\n```xml\n # ln -s /usr/local/mysql/bin/mysql /usr/bin\n```\n\n如果出现`Access denied for user 'root'@'localhost' (using password: YES)`应该是密码错了，直接强行修改密码好了。先停掉mysql. \n\n```xml\n# service mysql stop\n```\n\n然后修改配置文件 \n\n```\n# vim /etc/my.cnf\n```\n\n在[mysqld]后面任意一行添加`skip-grant-tables`用来跳过密码验证的过程\n\n接下来我们需要重启MySQL \n\n```xml\n# /etc/init.d/mysqld restart\n```\n\n重启之后输入命令`mysql`即可进入mysql了，然后开始修改密码。\n\n```mysql\nmysql> use mysql;\n# 这里修改密码的命令在5.7以上和5.7以下是不同的 需要注意\nmysql> update user set authentication_string=passworD(\"你的密码\") where user='root';\nflush privileges;\nmysql> quit\n```\n\n完成后可以把配置文件中的跳过密码验证去掉。\n\n然后就可以正常使用啦。\n\n## 7. 外部访问\n\n首先进入mysql，\n\n```xml\n# mysql -u root -p\n```\n\n接着创建远程连接 MySQL 的用户 mysql命令\n\n```mysql\n-- 创建用户、密码及权限范围 第一个 roo t为用户名 @后为适用的主机，‘%’表示所有电脑都可以访问连接，第二个 root 为密码\nmysql> GRANT ALL PRIVILEGES ON *.* TO 'root'@'192.168.1.3' IDENTIFIED BY 'root' WITH GRANT OPTION;  \n-- 立即生效\nmysql> flush privileges;\n```\n\n查看数据库用户：\n\n```mysql\n-- 使用 mysql 库\nmysql> use mysql;\n-- 查看用户\nmysql> SELECT DISTINCT CONCAT('User: [', user, '''@''', host, '];') AS USER_HOST FROM user;  \n-- 查看端口\nmysql> show global variables like 'port';\n--mysql 默认端口为3306\n```\n\n解决防火墙问题\n\n防火墙默认只开放了22端口，要访问数据库要么关掉防火墙要么修改配置文件，开放3306端口\n\n修改防火墙配置： 命令\n\n```xml\n# vim /etc/sysconfig/iptables\n```\n\n添加以下内容\n\n```xml\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT\n```\n\n然后重启防火墙\n\n```\n# service iptables restart\n```\n\n最后查看服务器IP\n\n```xml\n# ip a\n```\n\n到这里应该就可以通过IP和端口号远程连接服务器上的MySQL了。\n\n## 8. 问题\n\nmysql中执行命令出现以下错误：\n\n```error\nERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.\n```\n\n解决： 修改用户密码\n\n```mysql\nmysql> alter user 'root'@'localhost' identified by '你的密码'; \n```\n\n## 参考\n\n`https://blog.csdn.net/z13615480737/article/details/80019881`\n\n`https://www.cnblogs.com/goodcheap/p/7103049.html`","source":"_posts/linux/mysql-install.md","raw":"---\ntitle: Linux安装MySQL教程\ntags:\n  - Linux\ncategories:\n  - Linux\nabbrlink: 1be8c408\ndate: 2019-01-16 22:00:00\n---\n\n本章主要讲了如何通过解压方式在Linux下安装MySQL，以及如何设置让我们可以远程连接到服务器上的mysql.\n\n<!-- more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n软件统一放在`/usr/software`下 解压后放在单独的文件夹下`/usr/local/java`/`/usr/local/mysql`\n\n其中：`#`为Linux命令，`mysql`则是mysql下的命令\n\n软件统一放在`/usr/software`下 解压后放在单独的文件夹下`/usr/local/java`/`/usr/local/mysql`\n\n安装包下载`mysql-5.7.24-linux-glibc2.12-x86_64.tar`\n\n网址`https://dev.mysql.com/downloads/mysql/5.7.html#downloads`\n\n![mysql](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/software-install/mysql5.7-down.png)\n\n## 1. 安装依赖\n\n```xml\n# yum install -y cmake make gcc gcc-c++ libaio ncurses ncurses-devel\n```\n\n## 2. 解压文件\n\n压缩包上传到虚拟机`/usr/software目录下`,进入这个目录\n\n解压文件\n\n```xml\n# tar zxvf mysql-5.7.24-linux-glibc2.12-x86_64.tar.gz\n```\n\n将解压后的文件移动到`/usr/local/mysql`\n\n```xml\n# mv mysql-5.7.24-linux-glibc2.12-x86_64 /usr/local/mysql\n```\n\n## 3. 添加用户和赋权\n\n1.添加用户和用户组\n\n给mysql赋权的用户必须对当前目录具有读写权限，但是一般不用root账户，所以创建一个用户mysql。\n\n执行命令：创建用户组mysql`groupadd mysql``\n\n创建用户也叫mysql \n\n```xml\n// 命令中第一个mysql是用户，第二个mysql是用户组。\n# useradd -r -g mysql mysql \n```\n\n2.给用户赋权限\n\n 一定保证当前是在`/usr/local/mysql` 目录下\n\n给用户组赋权限\n\n```xml\n//mysql是用户组名\n# chgrp -R mysql.\n```\n\n给用户赋权限  \n\n```xml\n//这个mysql是用户名\n#  chown -R mysql. \n```\n\n## 4. 数据库初始化\n\n安装数据库 : \n\n```xml\n// 这里会生成临时密码，后边有用\n# bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data\n```\n\n执行以下命令创建RSA private key ：\n\n```xml\n# bin/mysql_ssl_rsa_setup --datadir=/usr/local/mysql/data\n```\n\n## 5. 配置my.cnf\n\n```xml\n# vim /etc/my.cnf\n```\n\n 内容如下：\n\n```java\n[mysqld]\ncharacter_set_server=utf8\ninit_connect='SET NAMES utf8'\nbasedir=/usr/local/mysql\ndatadir=/usr/local/mysql/data\nsocket=/tmp/mysql.sock\n#不区分大小写 (sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES 这个简单来说就是sql语句是否严格)\nlower_case_table_names = 1\nlog-error=/var/log/mysqld.log\npid-file=/usr/local/mysql/data/mysqld.pid   \n```\n\n\n\n```xml\n# cp /usr/local/mysql/support-files/mysql.server  /etc/init.d/mysqld\n# vim /etc/init.d/mysqld\n```\n\n添加以下内容，在46行\n\n```java\n basedir=/usr/local/mysql\n datadir=/usr/local/mysql/data\n```\n\n## 6. 修改密码\n\n启动mysql   \n\n```xml\n# service mysqld start\n```\n\n 加入开机起动    \n\n```xml\n# chkconfig --add mysqld\n```\n\n登录修改密码 \n\n```xml\n# mysql -uroot -p 上面初始化时的密码\n```\n\n如果出现错误 需要添加软连接 \n\n```xml\n # ln -s /usr/local/mysql/bin/mysql /usr/bin\n```\n\n如果出现`Access denied for user 'root'@'localhost' (using password: YES)`应该是密码错了，直接强行修改密码好了。先停掉mysql. \n\n```xml\n# service mysql stop\n```\n\n然后修改配置文件 \n\n```\n# vim /etc/my.cnf\n```\n\n在[mysqld]后面任意一行添加`skip-grant-tables`用来跳过密码验证的过程\n\n接下来我们需要重启MySQL \n\n```xml\n# /etc/init.d/mysqld restart\n```\n\n重启之后输入命令`mysql`即可进入mysql了，然后开始修改密码。\n\n```mysql\nmysql> use mysql;\n# 这里修改密码的命令在5.7以上和5.7以下是不同的 需要注意\nmysql> update user set authentication_string=passworD(\"你的密码\") where user='root';\nflush privileges;\nmysql> quit\n```\n\n完成后可以把配置文件中的跳过密码验证去掉。\n\n然后就可以正常使用啦。\n\n## 7. 外部访问\n\n首先进入mysql，\n\n```xml\n# mysql -u root -p\n```\n\n接着创建远程连接 MySQL 的用户 mysql命令\n\n```mysql\n-- 创建用户、密码及权限范围 第一个 roo t为用户名 @后为适用的主机，‘%’表示所有电脑都可以访问连接，第二个 root 为密码\nmysql> GRANT ALL PRIVILEGES ON *.* TO 'root'@'192.168.1.3' IDENTIFIED BY 'root' WITH GRANT OPTION;  \n-- 立即生效\nmysql> flush privileges;\n```\n\n查看数据库用户：\n\n```mysql\n-- 使用 mysql 库\nmysql> use mysql;\n-- 查看用户\nmysql> SELECT DISTINCT CONCAT('User: [', user, '''@''', host, '];') AS USER_HOST FROM user;  \n-- 查看端口\nmysql> show global variables like 'port';\n--mysql 默认端口为3306\n```\n\n解决防火墙问题\n\n防火墙默认只开放了22端口，要访问数据库要么关掉防火墙要么修改配置文件，开放3306端口\n\n修改防火墙配置： 命令\n\n```xml\n# vim /etc/sysconfig/iptables\n```\n\n添加以下内容\n\n```xml\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT\n```\n\n然后重启防火墙\n\n```\n# service iptables restart\n```\n\n最后查看服务器IP\n\n```xml\n# ip a\n```\n\n到这里应该就可以通过IP和端口号远程连接服务器上的MySQL了。\n\n## 8. 问题\n\nmysql中执行命令出现以下错误：\n\n```error\nERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.\n```\n\n解决： 修改用户密码\n\n```mysql\nmysql> alter user 'root'@'localhost' identified by '你的密码'; \n```\n\n## 参考\n\n`https://blog.csdn.net/z13615480737/article/details/80019881`\n\n`https://www.cnblogs.com/goodcheap/p/7103049.html`","slug":"linux/mysql-install","published":1,"updated":"2019-02-06T01:12:10.263Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv451001l0ww49xpxwl44","content":"<p>本章主要讲了如何通过解压方式在Linux下安装MySQL，以及如何设置让我们可以远程连接到服务器上的mysql.</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<p>软件统一放在<code>/usr/software</code>下 解压后放在单独的文件夹下<code>/usr/local/java</code>/<code>/usr/local/mysql</code></p>\n<p>其中：<code>#</code>为Linux命令，<code>mysql</code>则是mysql下的命令</p>\n<p>软件统一放在<code>/usr/software</code>下 解压后放在单独的文件夹下<code>/usr/local/java</code>/<code>/usr/local/mysql</code></p>\n<p>安装包下载<code>mysql-5.7.24-linux-glibc2.12-x86_64.tar</code></p>\n<p>网址<code>https://dev.mysql.com/downloads/mysql/5.7.html#downloads</code></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/software-install/mysql5.7-down.png\" alt=\"mysql\"></p>\n<h2 id=\"1-安装依赖\"><a href=\"#1-安装依赖\" class=\"headerlink\" title=\"1. 安装依赖\"></a>1. 安装依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># yum install -y cmake make gcc gcc-c++ libaio ncurses ncurses-devel</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-解压文件\"><a href=\"#2-解压文件\" class=\"headerlink\" title=\"2. 解压文件\"></a>2. 解压文件</h2><p>压缩包上传到虚拟机<code>/usr/software目录下</code>,进入这个目录</p>\n<p>解压文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># tar zxvf mysql-5.7.24-linux-glibc2.12-x86_64.tar.gz</span><br></pre></td></tr></table></figure>\n<p>将解压后的文件移动到<code>/usr/local/mysql</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mv mysql-5.7.24-linux-glibc2.12-x86_64 /usr/local/mysql</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-添加用户和赋权\"><a href=\"#3-添加用户和赋权\" class=\"headerlink\" title=\"3. 添加用户和赋权\"></a>3. 添加用户和赋权</h2><p>1.添加用户和用户组</p>\n<p>给mysql赋权的用户必须对当前目录具有读写权限，但是一般不用root账户，所以创建一个用户mysql。</p>\n<p>执行命令：创建用户组mysql<code>groupadd mysql`</code></p>\n<p>创建用户也叫mysql </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 命令中第一个mysql是用户，第二个mysql是用户组。</span><br><span class=\"line\"># useradd -r -g mysql mysql</span><br></pre></td></tr></table></figure>\n<p>2.给用户赋权限</p>\n<p> 一定保证当前是在<code>/usr/local/mysql</code> 目录下</p>\n<p>给用户组赋权限</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//mysql是用户组名</span><br><span class=\"line\"># chgrp -R mysql.</span><br></pre></td></tr></table></figure>\n<p>给用户赋权限  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//这个mysql是用户名</span><br><span class=\"line\">#  chown -R mysql.</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-数据库初始化\"><a href=\"#4-数据库初始化\" class=\"headerlink\" title=\"4. 数据库初始化\"></a>4. 数据库初始化</h2><p>安装数据库 : </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 这里会生成临时密码，后边有用</span><br><span class=\"line\"># bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data</span><br></pre></td></tr></table></figure>\n<p>执行以下命令创建RSA private key ：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># bin/mysql_ssl_rsa_setup --datadir=/usr/local/mysql/data</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-配置my-cnf\"><a href=\"#5-配置my-cnf\" class=\"headerlink\" title=\"5. 配置my.cnf\"></a>5. 配置my.cnf</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vim /etc/my.cnf</span><br></pre></td></tr></table></figure>\n<p> 内容如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">character_set_server=utf8</span><br><span class=\"line\">init_connect=<span class=\"string\">'SET NAMES utf8'</span></span><br><span class=\"line\">basedir=/usr/local/mysql</span><br><span class=\"line\">datadir=/usr/local/mysql/data</span><br><span class=\"line\">socket=/tmp/mysql.sock</span><br><span class=\"line\">#不区分大小写 (sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES 这个简单来说就是sql语句是否严格)</span><br><span class=\"line\">lower_case_table_names = <span class=\"number\">1</span></span><br><span class=\"line\">log-error=/<span class=\"keyword\">var</span>/log/mysqld.log</span><br><span class=\"line\">pid-file=/usr/local/mysql/data/mysqld.pid</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cp /usr/local/mysql/support-files/mysql.server  /etc/init.d/mysqld</span><br><span class=\"line\"># vim /etc/init.d/mysqld</span><br></pre></td></tr></table></figure>\n<p>添加以下内容，在46行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">basedir=/usr/local/mysql</span><br><span class=\"line\">datadir=/usr/local/mysql/data</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-修改密码\"><a href=\"#6-修改密码\" class=\"headerlink\" title=\"6. 修改密码\"></a>6. 修改密码</h2><p>启动mysql   </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># service mysqld start</span><br></pre></td></tr></table></figure>\n<p> 加入开机起动    </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># chkconfig --add mysqld</span><br></pre></td></tr></table></figure>\n<p>登录修改密码 </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mysql -uroot -p 上面初始化时的密码</span><br></pre></td></tr></table></figure>\n<p>如果出现错误 需要添加软连接 </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ln -s /usr/local/mysql/bin/mysql /usr/bin</span><br></pre></td></tr></table></figure>\n<p>如果出现<code>Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: YES)</code>应该是密码错了，直接强行修改密码好了。先停掉mysql. </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># service mysql stop</span><br></pre></td></tr></table></figure>\n<p>然后修改配置文件 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vim /etc/my.cnf</span><br></pre></td></tr></table></figure>\n<p>在[mysqld]后面任意一行添加<code>skip-grant-tables</code>用来跳过密码验证的过程</p>\n<p>接下来我们需要重启MySQL </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># /etc/init.d/mysqld restart</span><br></pre></td></tr></table></figure>\n<p>重启之后输入命令<code>mysql</code>即可进入mysql了，然后开始修改密码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; use mysql;</span><br><span class=\"line\"># 这里修改密码的命令在5.7以上和5.7以下是不同的 需要注意</span><br><span class=\"line\">mysql&gt; update user set authentication_string=passworD(&quot;你的密码&quot;) where user=&apos;root&apos;;</span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\">mysql&gt; quit</span><br></pre></td></tr></table></figure>\n<p>完成后可以把配置文件中的跳过密码验证去掉。</p>\n<p>然后就可以正常使用啦。</p>\n<h2 id=\"7-外部访问\"><a href=\"#7-外部访问\" class=\"headerlink\" title=\"7. 外部访问\"></a>7. 外部访问</h2><p>首先进入mysql，</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mysql -u root -p</span><br></pre></td></tr></table></figure>\n<p>接着创建远程连接 MySQL 的用户 mysql命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 创建用户、密码及权限范围 第一个 roo t为用户名 @后为适用的主机，‘%’表示所有电脑都可以访问连接，第二个 root 为密码</span><br><span class=\"line\">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;192.168.1.3&apos; IDENTIFIED BY &apos;root&apos; WITH GRANT OPTION;  </span><br><span class=\"line\">-- 立即生效</span><br><span class=\"line\">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure>\n<p>查看数据库用户：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 使用 mysql 库</span><br><span class=\"line\">mysql&gt; use mysql;</span><br><span class=\"line\">-- 查看用户</span><br><span class=\"line\">mysql&gt; SELECT DISTINCT CONCAT(&apos;User: [&apos;, user, &apos;&apos;&apos;@&apos;&apos;&apos;, host, &apos;];&apos;) AS USER_HOST FROM user;  </span><br><span class=\"line\">-- 查看端口</span><br><span class=\"line\">mysql&gt; show global variables like &apos;port&apos;;</span><br><span class=\"line\">--mysql 默认端口为3306</span><br></pre></td></tr></table></figure>\n<p>解决防火墙问题</p>\n<p>防火墙默认只开放了22端口，要访问数据库要么关掉防火墙要么修改配置文件，开放3306端口</p>\n<p>修改防火墙配置： 命令</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vim /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure>\n<p>添加以下内容</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT</span><br></pre></td></tr></table></figure>\n<p>然后重启防火墙</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># service iptables restart</span><br></pre></td></tr></table></figure>\n<p>最后查看服务器IP</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ip a</span><br></pre></td></tr></table></figure>\n<p>到这里应该就可以通过IP和端口号远程连接服务器上的MySQL了。</p>\n<h2 id=\"8-问题\"><a href=\"#8-问题\" class=\"headerlink\" title=\"8. 问题\"></a>8. 问题</h2><p>mysql中执行命令出现以下错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.</span><br></pre></td></tr></table></figure>\n<p>解决： 修改用户密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter user &apos;root&apos;@&apos;localhost&apos; identified by &apos;你的密码&apos;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><code>https://blog.csdn.net/z13615480737/article/details/80019881</code></p>\n<p><code>https://www.cnblogs.com/goodcheap/p/7103049.html</code></p>\n","site":{"data":{}},"excerpt":"<p>本章主要讲了如何通过解压方式在Linux下安装MySQL，以及如何设置让我们可以远程连接到服务器上的mysql.</p>","more":"<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<p>软件统一放在<code>/usr/software</code>下 解压后放在单独的文件夹下<code>/usr/local/java</code>/<code>/usr/local/mysql</code></p>\n<p>其中：<code>#</code>为Linux命令，<code>mysql</code>则是mysql下的命令</p>\n<p>软件统一放在<code>/usr/software</code>下 解压后放在单独的文件夹下<code>/usr/local/java</code>/<code>/usr/local/mysql</code></p>\n<p>安装包下载<code>mysql-5.7.24-linux-glibc2.12-x86_64.tar</code></p>\n<p>网址<code>https://dev.mysql.com/downloads/mysql/5.7.html#downloads</code></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/linux/software-install/mysql5.7-down.png\" alt=\"mysql\"></p>\n<h2 id=\"1-安装依赖\"><a href=\"#1-安装依赖\" class=\"headerlink\" title=\"1. 安装依赖\"></a>1. 安装依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># yum install -y cmake make gcc gcc-c++ libaio ncurses ncurses-devel</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-解压文件\"><a href=\"#2-解压文件\" class=\"headerlink\" title=\"2. 解压文件\"></a>2. 解压文件</h2><p>压缩包上传到虚拟机<code>/usr/software目录下</code>,进入这个目录</p>\n<p>解压文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># tar zxvf mysql-5.7.24-linux-glibc2.12-x86_64.tar.gz</span><br></pre></td></tr></table></figure>\n<p>将解压后的文件移动到<code>/usr/local/mysql</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mv mysql-5.7.24-linux-glibc2.12-x86_64 /usr/local/mysql</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-添加用户和赋权\"><a href=\"#3-添加用户和赋权\" class=\"headerlink\" title=\"3. 添加用户和赋权\"></a>3. 添加用户和赋权</h2><p>1.添加用户和用户组</p>\n<p>给mysql赋权的用户必须对当前目录具有读写权限，但是一般不用root账户，所以创建一个用户mysql。</p>\n<p>执行命令：创建用户组mysql<code>groupadd mysql`</code></p>\n<p>创建用户也叫mysql </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 命令中第一个mysql是用户，第二个mysql是用户组。</span><br><span class=\"line\"># useradd -r -g mysql mysql</span><br></pre></td></tr></table></figure>\n<p>2.给用户赋权限</p>\n<p> 一定保证当前是在<code>/usr/local/mysql</code> 目录下</p>\n<p>给用户组赋权限</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//mysql是用户组名</span><br><span class=\"line\"># chgrp -R mysql.</span><br></pre></td></tr></table></figure>\n<p>给用户赋权限  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//这个mysql是用户名</span><br><span class=\"line\">#  chown -R mysql.</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-数据库初始化\"><a href=\"#4-数据库初始化\" class=\"headerlink\" title=\"4. 数据库初始化\"></a>4. 数据库初始化</h2><p>安装数据库 : </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 这里会生成临时密码，后边有用</span><br><span class=\"line\"># bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data</span><br></pre></td></tr></table></figure>\n<p>执行以下命令创建RSA private key ：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># bin/mysql_ssl_rsa_setup --datadir=/usr/local/mysql/data</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-配置my-cnf\"><a href=\"#5-配置my-cnf\" class=\"headerlink\" title=\"5. 配置my.cnf\"></a>5. 配置my.cnf</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vim /etc/my.cnf</span><br></pre></td></tr></table></figure>\n<p> 内容如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">character_set_server=utf8</span><br><span class=\"line\">init_connect=<span class=\"string\">'SET NAMES utf8'</span></span><br><span class=\"line\">basedir=/usr/local/mysql</span><br><span class=\"line\">datadir=/usr/local/mysql/data</span><br><span class=\"line\">socket=/tmp/mysql.sock</span><br><span class=\"line\">#不区分大小写 (sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES 这个简单来说就是sql语句是否严格)</span><br><span class=\"line\">lower_case_table_names = <span class=\"number\">1</span></span><br><span class=\"line\">log-error=/<span class=\"keyword\">var</span>/log/mysqld.log</span><br><span class=\"line\">pid-file=/usr/local/mysql/data/mysqld.pid</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cp /usr/local/mysql/support-files/mysql.server  /etc/init.d/mysqld</span><br><span class=\"line\"># vim /etc/init.d/mysqld</span><br></pre></td></tr></table></figure>\n<p>添加以下内容，在46行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">basedir=/usr/local/mysql</span><br><span class=\"line\">datadir=/usr/local/mysql/data</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-修改密码\"><a href=\"#6-修改密码\" class=\"headerlink\" title=\"6. 修改密码\"></a>6. 修改密码</h2><p>启动mysql   </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># service mysqld start</span><br></pre></td></tr></table></figure>\n<p> 加入开机起动    </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># chkconfig --add mysqld</span><br></pre></td></tr></table></figure>\n<p>登录修改密码 </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mysql -uroot -p 上面初始化时的密码</span><br></pre></td></tr></table></figure>\n<p>如果出现错误 需要添加软连接 </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ln -s /usr/local/mysql/bin/mysql /usr/bin</span><br></pre></td></tr></table></figure>\n<p>如果出现<code>Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: YES)</code>应该是密码错了，直接强行修改密码好了。先停掉mysql. </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># service mysql stop</span><br></pre></td></tr></table></figure>\n<p>然后修改配置文件 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vim /etc/my.cnf</span><br></pre></td></tr></table></figure>\n<p>在[mysqld]后面任意一行添加<code>skip-grant-tables</code>用来跳过密码验证的过程</p>\n<p>接下来我们需要重启MySQL </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># /etc/init.d/mysqld restart</span><br></pre></td></tr></table></figure>\n<p>重启之后输入命令<code>mysql</code>即可进入mysql了，然后开始修改密码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; use mysql;</span><br><span class=\"line\"># 这里修改密码的命令在5.7以上和5.7以下是不同的 需要注意</span><br><span class=\"line\">mysql&gt; update user set authentication_string=passworD(&quot;你的密码&quot;) where user=&apos;root&apos;;</span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\">mysql&gt; quit</span><br></pre></td></tr></table></figure>\n<p>完成后可以把配置文件中的跳过密码验证去掉。</p>\n<p>然后就可以正常使用啦。</p>\n<h2 id=\"7-外部访问\"><a href=\"#7-外部访问\" class=\"headerlink\" title=\"7. 外部访问\"></a>7. 外部访问</h2><p>首先进入mysql，</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mysql -u root -p</span><br></pre></td></tr></table></figure>\n<p>接着创建远程连接 MySQL 的用户 mysql命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 创建用户、密码及权限范围 第一个 roo t为用户名 @后为适用的主机，‘%’表示所有电脑都可以访问连接，第二个 root 为密码</span><br><span class=\"line\">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;192.168.1.3&apos; IDENTIFIED BY &apos;root&apos; WITH GRANT OPTION;  </span><br><span class=\"line\">-- 立即生效</span><br><span class=\"line\">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure>\n<p>查看数据库用户：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 使用 mysql 库</span><br><span class=\"line\">mysql&gt; use mysql;</span><br><span class=\"line\">-- 查看用户</span><br><span class=\"line\">mysql&gt; SELECT DISTINCT CONCAT(&apos;User: [&apos;, user, &apos;&apos;&apos;@&apos;&apos;&apos;, host, &apos;];&apos;) AS USER_HOST FROM user;  </span><br><span class=\"line\">-- 查看端口</span><br><span class=\"line\">mysql&gt; show global variables like &apos;port&apos;;</span><br><span class=\"line\">--mysql 默认端口为3306</span><br></pre></td></tr></table></figure>\n<p>解决防火墙问题</p>\n<p>防火墙默认只开放了22端口，要访问数据库要么关掉防火墙要么修改配置文件，开放3306端口</p>\n<p>修改防火墙配置： 命令</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vim /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure>\n<p>添加以下内容</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT</span><br></pre></td></tr></table></figure>\n<p>然后重启防火墙</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># service iptables restart</span><br></pre></td></tr></table></figure>\n<p>最后查看服务器IP</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ip a</span><br></pre></td></tr></table></figure>\n<p>到这里应该就可以通过IP和端口号远程连接服务器上的MySQL了。</p>\n<h2 id=\"8-问题\"><a href=\"#8-问题\" class=\"headerlink\" title=\"8. 问题\"></a>8. 问题</h2><p>mysql中执行命令出现以下错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.</span><br></pre></td></tr></table></figure>\n<p>解决： 修改用户密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter user &apos;root&apos;@&apos;localhost&apos; identified by &apos;你的密码&apos;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><code>https://blog.csdn.net/z13615480737/article/details/80019881</code></p>\n<p><code>https://www.cnblogs.com/goodcheap/p/7103049.html</code></p>"},{"title":"Markdown语法与小技巧","abbrlink":"9b0e40a3","date":"2019-01-18T14:00:00.000Z","_content":"\n本文主要介绍了关于markdown的一些常用语法和技巧，让大家更好的写文章。自从17年前开始在 GitHub 玩耍，接触到 Markdown 之后，就感觉很有意思。不过也仅仅是了解一下基本语法，所以找了一下Markdown的语法用法来学习学习。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n如下：\n\n*注：如下技巧大多是利用 Markdown 兼容部分 HTML 标签的特性来完成，不一定在所有网站和软件里都完全支持，主要以 GitHub 支持为准。*\n\n## 标题\n\n```\n# This is an <h1> tag\n## This is an <h2> tag\n###### This is an <h6> tag\n```\n\n## 重点\n\n```\n*This text will be italic*\n_This will also be italic_\n\n**This text will be bold**\n__This will also be bold__\n\n_You **can** combine them_\n```\n\n*This text will be italic*\n_This will also be italic_\n\n**This text will be bold**\n__This will also be bold__\n\n_You **can** combine them_\n\n## 清单\n\n### 无序\n\n```\n* Item 1\n* Item 2\n  * Item 2a\n  * Item 2b\n```\n\n- Item 1\n- Item 2\n  - Item 2a\n  - Item 2b\n\n### 有序\n\n```\n1. Item 1\n1. Item 2\n1. Item 3\n   1. Item 3a\n   1. Item 3b\n```\n\n1. Item 1\n2. Item 2\n3. Item 3\n   1. Item 3a\n   2. Item 3b\n\n## 图片\n\n```\n![GitHub Logo](/images/logo.png)\nFormat: ![Alt Text](url)\n```\n\n## 链接\n\n```\nhttp://github.com - automatic!\n[GitHub](http://github.com)\n```\n\nhttp://github.com - automatic!\n[GitHub](http://github.com)\n\n## 引用文字\n\n```\nAs Kanye West said:\n\n> We're living the future so\n> the present is our past.\n```\n\nAs Kanye West said:\n\n> We're living the future so\n> the present is our past.\n\n## 内联代码\n\n```\nI think you should use an\n`<addr>` element here instead.\n```\n\nI think you should use an\n`<addr>` element here instead.\n\n## 删除线\n\n用两个波浪线（如`~~this~~`）包裹的任何单词都会显示为划掉。\n\n~~这是被删除的内容~~\n\n## 在表格单元格里换行\n\n借助于 HTML 里的 `<br />` 实现。\n\n示例代码：\n\n```\n| Header1 | Header2                          |\n|---------|----------------------------------|\n| item 1  | 1. one<br />2. two<br />3. three |\n```\n\n示例效果：\n\n| Header1 | Header2                          |\n| ------- | -------------------------------- |\n| item 1  | 1. one<br />2. two<br />3. three |\n\n## 引用\n\n 在引用的文字前加>即可。引用也可以嵌套，如加两个>>三个>>> \n\n> 这是引用的内容\n>\n> > 这是引用的内容\n\n## 分割线\n\n三个或者三个以上的 - 或者 * 都可以。 \n\n------\n\n------\n\n## 流程图\n\n```\n​```flow\nst=>start: 开始\nop=>operation: My Operation\ncond=>condition: Yes or No?\ne=>end\nst->op->cond\ncond(yes)->e\ncond(no)->op\n&```\n```\n\n## 表格\n\n```\n| 左对齐标题 | 右对齐标题 | 居中对齐标题 |\n| :------| ------: | :------: |\n| 短文本 | 中等文本 | 稍微长一点的文本 |\n| 稍微长一点的文本 | 短文本 | 中等文本 |\n```\n\n> //语法：\n>\n> 1）|、-、:之间的多余空格会被忽略，不影响布局。\n> 2）默认标题栏居中对齐，内容居左对齐。\n> 3）-:表示内容和标题栏居右对齐，:-表示内容和标题栏居左对齐，:-:表示内容和标题栏居中对齐。\n> 4）内容和|之间的多余空格会被忽略，每行第一个|和最后一个|可以省略，-的数量至少有一个。\n\n表格在渲染之后很整洁好看，但是在文件源码里却可能是这样的：\n\n```\n|Header1|Header2|\n|---|---|\n|a|a|\n|ab|ab|\n|abc|abc|\n```\n\n不知道你能不能忍，反正我是不能忍。\n\n好在广大网友们的智慧是无穷的，在各种编辑器里为 Markdown 提供了表格格式化功能，比如我使用 Vim 编辑器，就有 [vim-table-mode](https://github.com/dhruvasagar/vim-table-mode) 插件，它能帮我自动将表格格式化成这样：\n\n```\n| Header1 | Header2 |\n|---------|---------|\n| a       | a       |\n| ab      | ab      |\n| abc     | abc     |\n```\n\n是不是看着舒服多了？\n\n如果你不使用 Vim，也没有关系，比如 Atom 编辑器的 [markdown-table-formatter](https://atom.io/packages/markdown-table-formatter) 插件，Sublime Text 3 的 [MarkdownTableFormatter](https://github.com/bitwiser73/MarkdownTableFormatter) 等等，都提供了类似的解决方案。\n\n## 使用 Emoji\n\n这个是 GitHub 对标准 Markdown 标记之外的扩展了，用得好能让文字生动一些。\n\n示例代码：\n\n```\n我和我的小伙伴们都笑了。:smile:\n```\n\n示例效果：\n\n我和我的小伙伴们都笑了。:smile:\n\n[Github支持的表情在这里哟](https://github.com/ikatyang/emoji-cheat-sheet/blob/master/README.md)\n\n## 行首缩进\n\n直接在 Markdown 里用空格和 Tab 键缩进在渲染后会被忽略掉，需要借助 HTML 转义字符在行首添加空格来实现，`&ensp;` 代表半角空格，`&emsp;` 代表全角空格。\n\n示例代码：\n\n```\n&emsp;&emsp;春天来了，又到了万物复苏的季节。\n```\n\n示例效果：\n\n&emsp;&emsp;春天来了，又到了万物复苏的季节。\n\n## 展示数学公式\n\n如果是在 GitHub Pages，可以参考 <http://wanguolin.github.io/mathmatics_rending/> 使用 MathJax 来优雅地展示数学公式（非图片）。\n\n如果是在 GitHub 项目的 README 等地方，目前我能找到的方案只能是贴图了，以下是一种比较方便的贴图方案：\n\n1. 在 <https://www.codecogs.com/latex/eqneditor.php> 网页上部的输入框里输入 LaTeX 公式，比如 `$$x=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2a}$$`；\n\n2. 在网页下部拷贝 URL Encoded 的内容，比如以上公式生成的是 `https://latex.codecogs.com/png.latex?%24%24x%3D%5Cfrac%7B-b%5Cpm%5Csqrt%7Bb%5E2-4ac%7D%7D%7B2a%7D%24%24`；\n\n   ![](D:\\lillusory\\MyProject\\lillusory.github.io\\images\\posts\\Markdown\\Markdown_latex_img)\n\n3. 在文档需要的地方使用以上 URL 贴图，比如\n\n   ```\n   ![](https://latex.codecogs.com/png.latex?%24%24x%3D%5Cfrac%7B-b%5Cpm%5Csqrt%7Bb%5E2-4ac%7D%7D%7B2a%7D%24%24)\n   ```\n\n   示例效果：\n\n   ![](https://latex.codecogs.com/png.latex?%24%24x%3D%5Cfrac%7B-b%5Cpm%5Csqrt%7Bb%5E2-4ac%7D%7D%7B2a%7D%24%24)\n\n## 任务列表\n\n在 GitHub 和 GitLab 等网站，除了可以使用有序列表和无序列表外，还可以使用任务列表，很适合要列出一些清单的场景。\n\n示例代码：\n\n```\n**购物清单**\n\n- [ ] 一次性水杯\n- [x] 西瓜\n- [ ] 豆浆\n- [x] 可口可乐\n- [ ] 小茗同学\n```\n\n示例效果：\n\n**购物清单**\n\n- [ ] 一次性水杯\n- [x] 西瓜\n- [ ] 豆浆\n- [x] 可口可乐\n- [ ] 小茗同学\n\n## 自动维护目录\n\n有时候维护一份比较长的文档，希望能够自动根据文档中的标题生成目录（Table of Contents），并且当标题有变化时自动更新目录，能减轻工作量，也不易出错。比如 Atom 编辑器的 [markdown-toc](https://atom.io/packages/markdown-toc) 插件，Sublime Text 的 [MarkdownTOC](https://packagecontrol.io/packages/MarkdownTOC) 插件等。\n\n## 后话\n\n希望自己，也希望大家在了解这些之后能有所收获，更好地排版，专注写作。\n\n## 参考\n\n- <https://raw.githubusercontent.com/matiassingers/awesome-readme/master/readme.md>\n- <https://www.zybuluo.com/songpfei/note/247346>\n- [支持的表情](https://guides.github.com/features/mastering-markdown/)","source":"_posts/markdown/markdown-skills.md","raw":"---\ntitle: Markdown语法与小技巧\ntags:\n  - Markdown\ncategories:\n  - Markdown\nabbrlink: 9b0e40a3\ndate: 2019-01-18 22:00:00\n---\n\n本文主要介绍了关于markdown的一些常用语法和技巧，让大家更好的写文章。自从17年前开始在 GitHub 玩耍，接触到 Markdown 之后，就感觉很有意思。不过也仅仅是了解一下基本语法，所以找了一下Markdown的语法用法来学习学习。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n如下：\n\n*注：如下技巧大多是利用 Markdown 兼容部分 HTML 标签的特性来完成，不一定在所有网站和软件里都完全支持，主要以 GitHub 支持为准。*\n\n## 标题\n\n```\n# This is an <h1> tag\n## This is an <h2> tag\n###### This is an <h6> tag\n```\n\n## 重点\n\n```\n*This text will be italic*\n_This will also be italic_\n\n**This text will be bold**\n__This will also be bold__\n\n_You **can** combine them_\n```\n\n*This text will be italic*\n_This will also be italic_\n\n**This text will be bold**\n__This will also be bold__\n\n_You **can** combine them_\n\n## 清单\n\n### 无序\n\n```\n* Item 1\n* Item 2\n  * Item 2a\n  * Item 2b\n```\n\n- Item 1\n- Item 2\n  - Item 2a\n  - Item 2b\n\n### 有序\n\n```\n1. Item 1\n1. Item 2\n1. Item 3\n   1. Item 3a\n   1. Item 3b\n```\n\n1. Item 1\n2. Item 2\n3. Item 3\n   1. Item 3a\n   2. Item 3b\n\n## 图片\n\n```\n![GitHub Logo](/images/logo.png)\nFormat: ![Alt Text](url)\n```\n\n## 链接\n\n```\nhttp://github.com - automatic!\n[GitHub](http://github.com)\n```\n\nhttp://github.com - automatic!\n[GitHub](http://github.com)\n\n## 引用文字\n\n```\nAs Kanye West said:\n\n> We're living the future so\n> the present is our past.\n```\n\nAs Kanye West said:\n\n> We're living the future so\n> the present is our past.\n\n## 内联代码\n\n```\nI think you should use an\n`<addr>` element here instead.\n```\n\nI think you should use an\n`<addr>` element here instead.\n\n## 删除线\n\n用两个波浪线（如`~~this~~`）包裹的任何单词都会显示为划掉。\n\n~~这是被删除的内容~~\n\n## 在表格单元格里换行\n\n借助于 HTML 里的 `<br />` 实现。\n\n示例代码：\n\n```\n| Header1 | Header2                          |\n|---------|----------------------------------|\n| item 1  | 1. one<br />2. two<br />3. three |\n```\n\n示例效果：\n\n| Header1 | Header2                          |\n| ------- | -------------------------------- |\n| item 1  | 1. one<br />2. two<br />3. three |\n\n## 引用\n\n 在引用的文字前加>即可。引用也可以嵌套，如加两个>>三个>>> \n\n> 这是引用的内容\n>\n> > 这是引用的内容\n\n## 分割线\n\n三个或者三个以上的 - 或者 * 都可以。 \n\n------\n\n------\n\n## 流程图\n\n```\n​```flow\nst=>start: 开始\nop=>operation: My Operation\ncond=>condition: Yes or No?\ne=>end\nst->op->cond\ncond(yes)->e\ncond(no)->op\n&```\n```\n\n## 表格\n\n```\n| 左对齐标题 | 右对齐标题 | 居中对齐标题 |\n| :------| ------: | :------: |\n| 短文本 | 中等文本 | 稍微长一点的文本 |\n| 稍微长一点的文本 | 短文本 | 中等文本 |\n```\n\n> //语法：\n>\n> 1）|、-、:之间的多余空格会被忽略，不影响布局。\n> 2）默认标题栏居中对齐，内容居左对齐。\n> 3）-:表示内容和标题栏居右对齐，:-表示内容和标题栏居左对齐，:-:表示内容和标题栏居中对齐。\n> 4）内容和|之间的多余空格会被忽略，每行第一个|和最后一个|可以省略，-的数量至少有一个。\n\n表格在渲染之后很整洁好看，但是在文件源码里却可能是这样的：\n\n```\n|Header1|Header2|\n|---|---|\n|a|a|\n|ab|ab|\n|abc|abc|\n```\n\n不知道你能不能忍，反正我是不能忍。\n\n好在广大网友们的智慧是无穷的，在各种编辑器里为 Markdown 提供了表格格式化功能，比如我使用 Vim 编辑器，就有 [vim-table-mode](https://github.com/dhruvasagar/vim-table-mode) 插件，它能帮我自动将表格格式化成这样：\n\n```\n| Header1 | Header2 |\n|---------|---------|\n| a       | a       |\n| ab      | ab      |\n| abc     | abc     |\n```\n\n是不是看着舒服多了？\n\n如果你不使用 Vim，也没有关系，比如 Atom 编辑器的 [markdown-table-formatter](https://atom.io/packages/markdown-table-formatter) 插件，Sublime Text 3 的 [MarkdownTableFormatter](https://github.com/bitwiser73/MarkdownTableFormatter) 等等，都提供了类似的解决方案。\n\n## 使用 Emoji\n\n这个是 GitHub 对标准 Markdown 标记之外的扩展了，用得好能让文字生动一些。\n\n示例代码：\n\n```\n我和我的小伙伴们都笑了。:smile:\n```\n\n示例效果：\n\n我和我的小伙伴们都笑了。:smile:\n\n[Github支持的表情在这里哟](https://github.com/ikatyang/emoji-cheat-sheet/blob/master/README.md)\n\n## 行首缩进\n\n直接在 Markdown 里用空格和 Tab 键缩进在渲染后会被忽略掉，需要借助 HTML 转义字符在行首添加空格来实现，`&ensp;` 代表半角空格，`&emsp;` 代表全角空格。\n\n示例代码：\n\n```\n&emsp;&emsp;春天来了，又到了万物复苏的季节。\n```\n\n示例效果：\n\n&emsp;&emsp;春天来了，又到了万物复苏的季节。\n\n## 展示数学公式\n\n如果是在 GitHub Pages，可以参考 <http://wanguolin.github.io/mathmatics_rending/> 使用 MathJax 来优雅地展示数学公式（非图片）。\n\n如果是在 GitHub 项目的 README 等地方，目前我能找到的方案只能是贴图了，以下是一种比较方便的贴图方案：\n\n1. 在 <https://www.codecogs.com/latex/eqneditor.php> 网页上部的输入框里输入 LaTeX 公式，比如 `$$x=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2a}$$`；\n\n2. 在网页下部拷贝 URL Encoded 的内容，比如以上公式生成的是 `https://latex.codecogs.com/png.latex?%24%24x%3D%5Cfrac%7B-b%5Cpm%5Csqrt%7Bb%5E2-4ac%7D%7D%7B2a%7D%24%24`；\n\n   ![](D:\\lillusory\\MyProject\\lillusory.github.io\\images\\posts\\Markdown\\Markdown_latex_img)\n\n3. 在文档需要的地方使用以上 URL 贴图，比如\n\n   ```\n   ![](https://latex.codecogs.com/png.latex?%24%24x%3D%5Cfrac%7B-b%5Cpm%5Csqrt%7Bb%5E2-4ac%7D%7D%7B2a%7D%24%24)\n   ```\n\n   示例效果：\n\n   ![](https://latex.codecogs.com/png.latex?%24%24x%3D%5Cfrac%7B-b%5Cpm%5Csqrt%7Bb%5E2-4ac%7D%7D%7B2a%7D%24%24)\n\n## 任务列表\n\n在 GitHub 和 GitLab 等网站，除了可以使用有序列表和无序列表外，还可以使用任务列表，很适合要列出一些清单的场景。\n\n示例代码：\n\n```\n**购物清单**\n\n- [ ] 一次性水杯\n- [x] 西瓜\n- [ ] 豆浆\n- [x] 可口可乐\n- [ ] 小茗同学\n```\n\n示例效果：\n\n**购物清单**\n\n- [ ] 一次性水杯\n- [x] 西瓜\n- [ ] 豆浆\n- [x] 可口可乐\n- [ ] 小茗同学\n\n## 自动维护目录\n\n有时候维护一份比较长的文档，希望能够自动根据文档中的标题生成目录（Table of Contents），并且当标题有变化时自动更新目录，能减轻工作量，也不易出错。比如 Atom 编辑器的 [markdown-toc](https://atom.io/packages/markdown-toc) 插件，Sublime Text 的 [MarkdownTOC](https://packagecontrol.io/packages/MarkdownTOC) 插件等。\n\n## 后话\n\n希望自己，也希望大家在了解这些之后能有所收获，更好地排版，专注写作。\n\n## 参考\n\n- <https://raw.githubusercontent.com/matiassingers/awesome-readme/master/readme.md>\n- <https://www.zybuluo.com/songpfei/note/247346>\n- [支持的表情](https://guides.github.com/features/mastering-markdown/)","slug":"markdown/markdown-skills","published":1,"updated":"2019-02-06T01:11:18.948Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv454001n0ww4bk8pq6ij","content":"<p>本文主要介绍了关于markdown的一些常用语法和技巧，让大家更好的写文章。自从17年前开始在 GitHub 玩耍，接触到 Markdown 之后，就感觉很有意思。不过也仅仅是了解一下基本语法，所以找了一下Markdown的语法用法来学习学习。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<p>如下：</p>\n<p><em>注：如下技巧大多是利用 Markdown 兼容部分 HTML 标签的特性来完成，不一定在所有网站和软件里都完全支持，主要以 GitHub 支持为准。</em></p>\n<h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># This is an &lt;h1&gt; tag</span><br><span class=\"line\">## This is an &lt;h2&gt; tag</span><br><span class=\"line\">###### This is an &lt;h6&gt; tag</span><br></pre></td></tr></table></figure>\n<h2 id=\"重点\"><a href=\"#重点\" class=\"headerlink\" title=\"重点\"></a>重点</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*This text will be italic*</span><br><span class=\"line\">_This will also be italic_</span><br><span class=\"line\"></span><br><span class=\"line\">**This text will be bold**</span><br><span class=\"line\">__This will also be bold__</span><br><span class=\"line\"></span><br><span class=\"line\">_You **can** combine them_</span><br></pre></td></tr></table></figure>\n<p><em>This text will be italic</em><br><em>This will also be italic</em></p>\n<p><strong>This text will be bold</strong><br><strong>This will also be bold</strong></p>\n<p><em>You <strong>can</strong> combine them</em></p>\n<h2 id=\"清单\"><a href=\"#清单\" class=\"headerlink\" title=\"清单\"></a>清单</h2><h3 id=\"无序\"><a href=\"#无序\" class=\"headerlink\" title=\"无序\"></a>无序</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* Item 1</span><br><span class=\"line\">* Item 2</span><br><span class=\"line\">  * Item 2a</span><br><span class=\"line\">  * Item 2b</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Item 1</li>\n<li>Item 2<ul>\n<li>Item 2a</li>\n<li>Item 2b</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"有序\"><a href=\"#有序\" class=\"headerlink\" title=\"有序\"></a>有序</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Item 1</span><br><span class=\"line\">1. Item 2</span><br><span class=\"line\">1. Item 3</span><br><span class=\"line\">   1. Item 3a</span><br><span class=\"line\">   1. Item 3b</span><br></pre></td></tr></table></figure>\n<ol>\n<li>Item 1</li>\n<li>Item 2</li>\n<li>Item 3<ol>\n<li>Item 3a</li>\n<li>Item 3b</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![GitHub Logo](/images/logo.png)</span><br><span class=\"line\">Format: ![Alt Text](url)</span><br></pre></td></tr></table></figure>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://github.com - automatic!</span><br><span class=\"line\">[GitHub](http://github.com)</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://github.com\" target=\"_blank\" rel=\"noopener\">http://github.com</a> - automatic!<br><a href=\"http://github.com\" target=\"_blank\" rel=\"noopener\">GitHub</a></p>\n<h2 id=\"引用文字\"><a href=\"#引用文字\" class=\"headerlink\" title=\"引用文字\"></a>引用文字</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">As Kanye West said:</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; We&apos;re living the future so</span><br><span class=\"line\">&gt; the present is our past.</span><br></pre></td></tr></table></figure>\n<p>As Kanye West said:</p>\n<blockquote>\n<p>We’re living the future so<br>the present is our past.</p>\n</blockquote>\n<h2 id=\"内联代码\"><a href=\"#内联代码\" class=\"headerlink\" title=\"内联代码\"></a>内联代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I think you should use an</span><br><span class=\"line\">`&lt;addr&gt;` element here instead.</span><br></pre></td></tr></table></figure>\n<p>I think you should use an<br><code>&lt;addr&gt;</code> element here instead.</p>\n<h2 id=\"删除线\"><a href=\"#删除线\" class=\"headerlink\" title=\"删除线\"></a>删除线</h2><p>用两个波浪线（如<code>~~this~~</code>）包裹的任何单词都会显示为划掉。</p>\n<p><del>这是被删除的内容</del></p>\n<h2 id=\"在表格单元格里换行\"><a href=\"#在表格单元格里换行\" class=\"headerlink\" title=\"在表格单元格里换行\"></a>在表格单元格里换行</h2><p>借助于 HTML 里的 <code>&lt;br /&gt;</code> 实现。</p>\n<p>示例代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| Header1 | Header2                          |</span><br><span class=\"line\">|---------|----------------------------------|</span><br><span class=\"line\">| item 1  | 1. one&lt;br /&gt;2. two&lt;br /&gt;3. three |</span><br></pre></td></tr></table></figure>\n<p>示例效果：</p>\n<table>\n<thead>\n<tr>\n<th>Header1</th>\n<th>Header2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>item 1</td>\n<td>1. one<br>2. two<br>3. three</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p> 在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt; </p>\n<blockquote>\n<p>这是引用的内容</p>\n<blockquote>\n<p>这是引用的内容</p>\n</blockquote>\n</blockquote>\n<h2 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h2><p>三个或者三个以上的 - 或者 * 都可以。 </p>\n<hr>\n<hr>\n<h2 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">​```flow</span><br><span class=\"line\">st=&gt;start: 开始</span><br><span class=\"line\">op=&gt;operation: My Operation</span><br><span class=\"line\">cond=&gt;condition: Yes or No?</span><br><span class=\"line\">e=&gt;end</span><br><span class=\"line\">st-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;e</span><br><span class=\"line\">cond(no)-&gt;op</span><br><span class=\"line\">&amp;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 表格</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">左对齐标题</th>\n<th style=\"text-align:right\">右对齐标题</th>\n<th style=\"text-align:center\">居中对齐标题</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">短文本</td>\n<td style=\"text-align:right\">中等文本</td>\n<td style=\"text-align:center\">稍微长一点的文本</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">稍微长一点的文本</td>\n<td style=\"text-align:right\">短文本</td>\n<td style=\"text-align:center\">中等文本</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt; //语法：</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; 1）|、-、:之间的多余空格会被忽略，不影响布局。</span><br><span class=\"line\">&gt; 2）默认标题栏居中对齐，内容居左对齐。</span><br><span class=\"line\">&gt; 3）-:表示内容和标题栏居右对齐，:-表示内容和标题栏居左对齐，:-:表示内容和标题栏居中对齐。</span><br><span class=\"line\">&gt; 4）内容和|之间的多余空格会被忽略，每行第一个|和最后一个|可以省略，-的数量至少有一个。</span><br><span class=\"line\"></span><br><span class=\"line\">表格在渲染之后很整洁好看，但是在文件源码里却可能是这样的：</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>Header1</th>\n<th>Header2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a</td>\n<td>a</td>\n</tr>\n<tr>\n<td>ab</td>\n<td>ab</td>\n</tr>\n<tr>\n<td>abc</td>\n<td>abc</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">不知道你能不能忍，反正我是不能忍。</span><br><span class=\"line\"></span><br><span class=\"line\">好在广大网友们的智慧是无穷的，在各种编辑器里为 Markdown 提供了表格格式化功能，比如我使用 Vim 编辑器，就有 [vim-table-mode](https://github.com/dhruvasagar/vim-table-mode) 插件，它能帮我自动将表格格式化成这样：</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>Header1</th>\n<th>Header2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a</td>\n<td>a</td>\n</tr>\n<tr>\n<td>ab</td>\n<td>ab</td>\n</tr>\n<tr>\n<td>abc</td>\n<td>abc</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">是不是看着舒服多了？</span><br><span class=\"line\"></span><br><span class=\"line\">如果你不使用 Vim，也没有关系，比如 Atom 编辑器的 [markdown-table-formatter](https://atom.io/packages/markdown-table-formatter) 插件，Sublime Text 3 的 [MarkdownTableFormatter](https://github.com/bitwiser73/MarkdownTableFormatter) 等等，都提供了类似的解决方案。</span><br><span class=\"line\"></span><br><span class=\"line\">## 使用 Emoji</span><br><span class=\"line\"></span><br><span class=\"line\">这个是 GitHub 对标准 Markdown 标记之外的扩展了，用得好能让文字生动一些。</span><br><span class=\"line\"></span><br><span class=\"line\">示例代码：</span><br></pre></td></tr></table></figure>\n<p>我和我的小伙伴们都笑了。:smile:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">示例效果：</span><br><span class=\"line\"></span><br><span class=\"line\">我和我的小伙伴们都笑了。:smile:</span><br><span class=\"line\"></span><br><span class=\"line\">[Github支持的表情在这里哟](https://github.com/ikatyang/emoji-cheat-sheet/blob/master/README.md)</span><br><span class=\"line\"></span><br><span class=\"line\">## 行首缩进</span><br><span class=\"line\"></span><br><span class=\"line\">直接在 Markdown 里用空格和 Tab 键缩进在渲染后会被忽略掉，需要借助 HTML 转义字符在行首添加空格来实现，`&amp;ensp;` 代表半角空格，`&amp;emsp;` 代表全角空格。</span><br><span class=\"line\"></span><br><span class=\"line\">示例代码：</span><br></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;春天来了，又到了万物复苏的季节。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">示例效果：</span><br><span class=\"line\"></span><br><span class=\"line\">&amp;emsp;&amp;emsp;春天来了，又到了万物复苏的季节。</span><br><span class=\"line\"></span><br><span class=\"line\">## 展示数学公式</span><br><span class=\"line\"></span><br><span class=\"line\">如果是在 GitHub Pages，可以参考 &lt;http://wanguolin.github.io/mathmatics_rending/&gt; 使用 MathJax 来优雅地展示数学公式（非图片）。</span><br><span class=\"line\"></span><br><span class=\"line\">如果是在 GitHub 项目的 README 等地方，目前我能找到的方案只能是贴图了，以下是一种比较方便的贴图方案：</span><br><span class=\"line\"></span><br><span class=\"line\">1. 在 &lt;https://www.codecogs.com/latex/eqneditor.php&gt; 网页上部的输入框里输入 LaTeX 公式，比如 `$$x=\\frac&#123;-b\\pm\\sqrt&#123;b^2-4ac&#125;&#125;&#123;2a&#125;$$`；</span><br><span class=\"line\"></span><br><span class=\"line\">2. 在网页下部拷贝 URL Encoded 的内容，比如以上公式生成的是 `https://latex.codecogs.com/png.latex?%24%24x%3D%5Cfrac%7B-b%5Cpm%5Csqrt%7Bb%5E2-4ac%7D%7D%7B2a%7D%24%24`；</span><br><span class=\"line\"></span><br><span class=\"line\">   ![](D:\\lillusory\\MyProject\\lillusory.github.io\\images\\posts\\Markdown\\Markdown_latex_img)</span><br><span class=\"line\"></span><br><span class=\"line\">3. 在文档需要的地方使用以上 URL 贴图，比如</span><br></pre></td></tr></table></figure></p>\n<p>   <img src=\"https://latex.codecogs.com/png.latex?%24%24x%3D%5Cfrac%7B-b%5Cpm%5Csqrt%7Bb%5E2-4ac%7D%7D%7B2a%7D%24%24\" alt=\"\"><br>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">   示例效果：</span><br><span class=\"line\"></span><br><span class=\"line\">   ![](https://latex.codecogs.com/png.latex?%24%24x%3D%5Cfrac%7B-b%5Cpm%5Csqrt%7Bb%5E2-4ac%7D%7D%7B2a%7D%24%24)</span><br><span class=\"line\"></span><br><span class=\"line\">## 任务列表</span><br><span class=\"line\"></span><br><span class=\"line\">在 GitHub 和 GitLab 等网站，除了可以使用有序列表和无序列表外，还可以使用任务列表，很适合要列出一些清单的场景。</span><br><span class=\"line\"></span><br><span class=\"line\">示例代码：</span><br></pre></td></tr></table></figure></p>\n<p><strong>购物清单</strong></p>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 一次性水杯</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 西瓜</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 豆浆</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 可口可乐</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 小茗同学<br><code>`</code></li>\n</ul>\n<p>示例效果：</p>\n<p><strong>购物清单</strong></p>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 一次性水杯</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 西瓜</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 豆浆</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 可口可乐</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 小茗同学</li>\n</ul>\n<h2 id=\"自动维护目录\"><a href=\"#自动维护目录\" class=\"headerlink\" title=\"自动维护目录\"></a>自动维护目录</h2><p>有时候维护一份比较长的文档，希望能够自动根据文档中的标题生成目录（Table of Contents），并且当标题有变化时自动更新目录，能减轻工作量，也不易出错。比如 Atom 编辑器的 <a href=\"https://atom.io/packages/markdown-toc\" target=\"_blank\" rel=\"noopener\">markdown-toc</a> 插件，Sublime Text 的 <a href=\"https://packagecontrol.io/packages/MarkdownTOC\" target=\"_blank\" rel=\"noopener\">MarkdownTOC</a> 插件等。</p>\n<h2 id=\"后话\"><a href=\"#后话\" class=\"headerlink\" title=\"后话\"></a>后话</h2><p>希望自己，也希望大家在了解这些之后能有所收获，更好地排版，专注写作。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://raw.githubusercontent.com/matiassingers/awesome-readme/master/readme.md\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/matiassingers/awesome-readme/master/readme.md</a></li>\n<li><a href=\"https://www.zybuluo.com/songpfei/note/247346\" target=\"_blank\" rel=\"noopener\">https://www.zybuluo.com/songpfei/note/247346</a></li>\n<li><a href=\"https://guides.github.com/features/mastering-markdown/\" target=\"_blank\" rel=\"noopener\">支持的表情</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>本文主要介绍了关于markdown的一些常用语法和技巧，让大家更好的写文章。自从17年前开始在 GitHub 玩耍，接触到 Markdown 之后，就感觉很有意思。不过也仅仅是了解一下基本语法，所以找了一下Markdown的语法用法来学习学习。</p>","more":"<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<p>如下：</p>\n<p><em>注：如下技巧大多是利用 Markdown 兼容部分 HTML 标签的特性来完成，不一定在所有网站和软件里都完全支持，主要以 GitHub 支持为准。</em></p>\n<h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># This is an &lt;h1&gt; tag</span><br><span class=\"line\">## This is an &lt;h2&gt; tag</span><br><span class=\"line\">###### This is an &lt;h6&gt; tag</span><br></pre></td></tr></table></figure>\n<h2 id=\"重点\"><a href=\"#重点\" class=\"headerlink\" title=\"重点\"></a>重点</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*This text will be italic*</span><br><span class=\"line\">_This will also be italic_</span><br><span class=\"line\"></span><br><span class=\"line\">**This text will be bold**</span><br><span class=\"line\">__This will also be bold__</span><br><span class=\"line\"></span><br><span class=\"line\">_You **can** combine them_</span><br></pre></td></tr></table></figure>\n<p><em>This text will be italic</em><br><em>This will also be italic</em></p>\n<p><strong>This text will be bold</strong><br><strong>This will also be bold</strong></p>\n<p><em>You <strong>can</strong> combine them</em></p>\n<h2 id=\"清单\"><a href=\"#清单\" class=\"headerlink\" title=\"清单\"></a>清单</h2><h3 id=\"无序\"><a href=\"#无序\" class=\"headerlink\" title=\"无序\"></a>无序</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* Item 1</span><br><span class=\"line\">* Item 2</span><br><span class=\"line\">  * Item 2a</span><br><span class=\"line\">  * Item 2b</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Item 1</li>\n<li>Item 2<ul>\n<li>Item 2a</li>\n<li>Item 2b</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"有序\"><a href=\"#有序\" class=\"headerlink\" title=\"有序\"></a>有序</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Item 1</span><br><span class=\"line\">1. Item 2</span><br><span class=\"line\">1. Item 3</span><br><span class=\"line\">   1. Item 3a</span><br><span class=\"line\">   1. Item 3b</span><br></pre></td></tr></table></figure>\n<ol>\n<li>Item 1</li>\n<li>Item 2</li>\n<li>Item 3<ol>\n<li>Item 3a</li>\n<li>Item 3b</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![GitHub Logo](/images/logo.png)</span><br><span class=\"line\">Format: ![Alt Text](url)</span><br></pre></td></tr></table></figure>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://github.com - automatic!</span><br><span class=\"line\">[GitHub](http://github.com)</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://github.com\" target=\"_blank\" rel=\"noopener\">http://github.com</a> - automatic!<br><a href=\"http://github.com\" target=\"_blank\" rel=\"noopener\">GitHub</a></p>\n<h2 id=\"引用文字\"><a href=\"#引用文字\" class=\"headerlink\" title=\"引用文字\"></a>引用文字</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">As Kanye West said:</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; We&apos;re living the future so</span><br><span class=\"line\">&gt; the present is our past.</span><br></pre></td></tr></table></figure>\n<p>As Kanye West said:</p>\n<blockquote>\n<p>We’re living the future so<br>the present is our past.</p>\n</blockquote>\n<h2 id=\"内联代码\"><a href=\"#内联代码\" class=\"headerlink\" title=\"内联代码\"></a>内联代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I think you should use an</span><br><span class=\"line\">`&lt;addr&gt;` element here instead.</span><br></pre></td></tr></table></figure>\n<p>I think you should use an<br><code>&lt;addr&gt;</code> element here instead.</p>\n<h2 id=\"删除线\"><a href=\"#删除线\" class=\"headerlink\" title=\"删除线\"></a>删除线</h2><p>用两个波浪线（如<code>~~this~~</code>）包裹的任何单词都会显示为划掉。</p>\n<p><del>这是被删除的内容</del></p>\n<h2 id=\"在表格单元格里换行\"><a href=\"#在表格单元格里换行\" class=\"headerlink\" title=\"在表格单元格里换行\"></a>在表格单元格里换行</h2><p>借助于 HTML 里的 <code>&lt;br /&gt;</code> 实现。</p>\n<p>示例代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| Header1 | Header2                          |</span><br><span class=\"line\">|---------|----------------------------------|</span><br><span class=\"line\">| item 1  | 1. one&lt;br /&gt;2. two&lt;br /&gt;3. three |</span><br></pre></td></tr></table></figure>\n<p>示例效果：</p>\n<table>\n<thead>\n<tr>\n<th>Header1</th>\n<th>Header2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>item 1</td>\n<td>1. one<br>2. two<br>3. three</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p> 在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt; </p>\n<blockquote>\n<p>这是引用的内容</p>\n<blockquote>\n<p>这是引用的内容</p>\n</blockquote>\n</blockquote>\n<h2 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h2><p>三个或者三个以上的 - 或者 * 都可以。 </p>\n<hr>\n<hr>\n<h2 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">​```flow</span><br><span class=\"line\">st=&gt;start: 开始</span><br><span class=\"line\">op=&gt;operation: My Operation</span><br><span class=\"line\">cond=&gt;condition: Yes or No?</span><br><span class=\"line\">e=&gt;end</span><br><span class=\"line\">st-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;e</span><br><span class=\"line\">cond(no)-&gt;op</span><br><span class=\"line\">&amp;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 表格</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">左对齐标题</th>\n<th style=\"text-align:right\">右对齐标题</th>\n<th style=\"text-align:center\">居中对齐标题</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">短文本</td>\n<td style=\"text-align:right\">中等文本</td>\n<td style=\"text-align:center\">稍微长一点的文本</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">稍微长一点的文本</td>\n<td style=\"text-align:right\">短文本</td>\n<td style=\"text-align:center\">中等文本</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt; //语法：</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; 1）|、-、:之间的多余空格会被忽略，不影响布局。</span><br><span class=\"line\">&gt; 2）默认标题栏居中对齐，内容居左对齐。</span><br><span class=\"line\">&gt; 3）-:表示内容和标题栏居右对齐，:-表示内容和标题栏居左对齐，:-:表示内容和标题栏居中对齐。</span><br><span class=\"line\">&gt; 4）内容和|之间的多余空格会被忽略，每行第一个|和最后一个|可以省略，-的数量至少有一个。</span><br><span class=\"line\"></span><br><span class=\"line\">表格在渲染之后很整洁好看，但是在文件源码里却可能是这样的：</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>Header1</th>\n<th>Header2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a</td>\n<td>a</td>\n</tr>\n<tr>\n<td>ab</td>\n<td>ab</td>\n</tr>\n<tr>\n<td>abc</td>\n<td>abc</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">不知道你能不能忍，反正我是不能忍。</span><br><span class=\"line\"></span><br><span class=\"line\">好在广大网友们的智慧是无穷的，在各种编辑器里为 Markdown 提供了表格格式化功能，比如我使用 Vim 编辑器，就有 [vim-table-mode](https://github.com/dhruvasagar/vim-table-mode) 插件，它能帮我自动将表格格式化成这样：</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>Header1</th>\n<th>Header2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a</td>\n<td>a</td>\n</tr>\n<tr>\n<td>ab</td>\n<td>ab</td>\n</tr>\n<tr>\n<td>abc</td>\n<td>abc</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">是不是看着舒服多了？</span><br><span class=\"line\"></span><br><span class=\"line\">如果你不使用 Vim，也没有关系，比如 Atom 编辑器的 [markdown-table-formatter](https://atom.io/packages/markdown-table-formatter) 插件，Sublime Text 3 的 [MarkdownTableFormatter](https://github.com/bitwiser73/MarkdownTableFormatter) 等等，都提供了类似的解决方案。</span><br><span class=\"line\"></span><br><span class=\"line\">## 使用 Emoji</span><br><span class=\"line\"></span><br><span class=\"line\">这个是 GitHub 对标准 Markdown 标记之外的扩展了，用得好能让文字生动一些。</span><br><span class=\"line\"></span><br><span class=\"line\">示例代码：</span><br></pre></td></tr></table></figure>\n<p>我和我的小伙伴们都笑了。:smile:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">示例效果：</span><br><span class=\"line\"></span><br><span class=\"line\">我和我的小伙伴们都笑了。:smile:</span><br><span class=\"line\"></span><br><span class=\"line\">[Github支持的表情在这里哟](https://github.com/ikatyang/emoji-cheat-sheet/blob/master/README.md)</span><br><span class=\"line\"></span><br><span class=\"line\">## 行首缩进</span><br><span class=\"line\"></span><br><span class=\"line\">直接在 Markdown 里用空格和 Tab 键缩进在渲染后会被忽略掉，需要借助 HTML 转义字符在行首添加空格来实现，`&amp;ensp;` 代表半角空格，`&amp;emsp;` 代表全角空格。</span><br><span class=\"line\"></span><br><span class=\"line\">示例代码：</span><br></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;春天来了，又到了万物复苏的季节。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">示例效果：</span><br><span class=\"line\"></span><br><span class=\"line\">&amp;emsp;&amp;emsp;春天来了，又到了万物复苏的季节。</span><br><span class=\"line\"></span><br><span class=\"line\">## 展示数学公式</span><br><span class=\"line\"></span><br><span class=\"line\">如果是在 GitHub Pages，可以参考 &lt;http://wanguolin.github.io/mathmatics_rending/&gt; 使用 MathJax 来优雅地展示数学公式（非图片）。</span><br><span class=\"line\"></span><br><span class=\"line\">如果是在 GitHub 项目的 README 等地方，目前我能找到的方案只能是贴图了，以下是一种比较方便的贴图方案：</span><br><span class=\"line\"></span><br><span class=\"line\">1. 在 &lt;https://www.codecogs.com/latex/eqneditor.php&gt; 网页上部的输入框里输入 LaTeX 公式，比如 `$$x=\\frac&#123;-b\\pm\\sqrt&#123;b^2-4ac&#125;&#125;&#123;2a&#125;$$`；</span><br><span class=\"line\"></span><br><span class=\"line\">2. 在网页下部拷贝 URL Encoded 的内容，比如以上公式生成的是 `https://latex.codecogs.com/png.latex?%24%24x%3D%5Cfrac%7B-b%5Cpm%5Csqrt%7Bb%5E2-4ac%7D%7D%7B2a%7D%24%24`；</span><br><span class=\"line\"></span><br><span class=\"line\">   ![](D:\\lillusory\\MyProject\\lillusory.github.io\\images\\posts\\Markdown\\Markdown_latex_img)</span><br><span class=\"line\"></span><br><span class=\"line\">3. 在文档需要的地方使用以上 URL 贴图，比如</span><br></pre></td></tr></table></figure></p>\n<p>   <img src=\"https://latex.codecogs.com/png.latex?%24%24x%3D%5Cfrac%7B-b%5Cpm%5Csqrt%7Bb%5E2-4ac%7D%7D%7B2a%7D%24%24\" alt=\"\"><br>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">   示例效果：</span><br><span class=\"line\"></span><br><span class=\"line\">   ![](https://latex.codecogs.com/png.latex?%24%24x%3D%5Cfrac%7B-b%5Cpm%5Csqrt%7Bb%5E2-4ac%7D%7D%7B2a%7D%24%24)</span><br><span class=\"line\"></span><br><span class=\"line\">## 任务列表</span><br><span class=\"line\"></span><br><span class=\"line\">在 GitHub 和 GitLab 等网站，除了可以使用有序列表和无序列表外，还可以使用任务列表，很适合要列出一些清单的场景。</span><br><span class=\"line\"></span><br><span class=\"line\">示例代码：</span><br></pre></td></tr></table></figure></p>\n<p><strong>购物清单</strong></p>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 一次性水杯</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 西瓜</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 豆浆</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 可口可乐</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 小茗同学<br><code>`</code></li>\n</ul>\n<p>示例效果：</p>\n<p><strong>购物清单</strong></p>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 一次性水杯</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 西瓜</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 豆浆</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 可口可乐</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 小茗同学</li>\n</ul>\n<h2 id=\"自动维护目录\"><a href=\"#自动维护目录\" class=\"headerlink\" title=\"自动维护目录\"></a>自动维护目录</h2><p>有时候维护一份比较长的文档，希望能够自动根据文档中的标题生成目录（Table of Contents），并且当标题有变化时自动更新目录，能减轻工作量，也不易出错。比如 Atom 编辑器的 <a href=\"https://atom.io/packages/markdown-toc\" target=\"_blank\" rel=\"noopener\">markdown-toc</a> 插件，Sublime Text 的 <a href=\"https://packagecontrol.io/packages/MarkdownTOC\" target=\"_blank\" rel=\"noopener\">MarkdownTOC</a> 插件等。</p>\n<h2 id=\"后话\"><a href=\"#后话\" class=\"headerlink\" title=\"后话\"></a>后话</h2><p>希望自己，也希望大家在了解这些之后能有所收获，更好地排版，专注写作。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://raw.githubusercontent.com/matiassingers/awesome-readme/master/readme.md\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/matiassingers/awesome-readme/master/readme.md</a></li>\n<li><a href=\"https://www.zybuluo.com/songpfei/note/247346\" target=\"_blank\" rel=\"noopener\">https://www.zybuluo.com/songpfei/note/247346</a></li>\n<li><a href=\"https://guides.github.com/features/mastering-markdown/\" target=\"_blank\" rel=\"noopener\">支持的表情</a></li>\n</ul>"},{"title":"Nginx入门教程(四)---反向代理与负载均衡","abbrlink":"930200c5","date":"2019-03-04T14:00:00.000Z","_content":"\n本章主要对Nginx服务器的常用配置文件，包括虚拟主机配置，location配置级语法等。\n\n<!-- more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 反向代理(proxy)\n\n### 1.1 简介\n\n**如果您的内容服务器具有必须保持安全的敏感信息，如信用卡号数据库，可在防火墙外部设置一个`代理服务器`作为`内容服务器的替身`**。\n\n当外部客户机尝试访问内容服务器时，会将其送到代理服务器。实际内容位于内容服务器上，在防火墙内部受到安全保护。代理服务器位于防火墙外部，在客户机看来就像是内容服务器。\n\n 这样，代理服务器就在安全数据库和可能的恶意攻击之间提供了又一道屏障。与有权访问整个数据库的情况相对比，就算是侥幸攻击成功，作恶者充其量也仅限于访问单个事务中所涉及的信息。未经授权的用户无法访问到真正的内容服务器，因为防火墙通路只允许代理服务器有权进行访问。\n\n**就是客户端先访问Nginx服务器，Nginx收到请求后再去请求内容服务器,这样中间多了一个Nginx服务器中转，会更加安全**。\n\n### 1.2 配置\n\n#### 1. 修改配置文件\n\n首先需要修改`Nginx服务器`配置文件``nginx.conf`。\n\n配置文件大概是这样的，在`server`中添加一个`location`用于中转。\n\n```nginx\nhttp{\n    keepalive_timeout  65;\n    server{\n        listen 80; //端口号\n        server_name localhost; //域名\n        location \\ {\n            root html; //网站根目录\n            index index.html; //网站首页\n        }  \n        access_log  logs/host.access.log  main; //访问日志\n        error page 500 error.html; //错误页面\n        #这里就是代理 通过正则表达式来匹配\n        #后缀以.jsp结尾的请求都会跳转到 http://192.168.5.154:8080;\n        location ~ \\.jsp$ {\n            proxy_pass   http://192.168.5.154:8080;\n        }  \n    }\n}\n```\n\n#### 2. 开启内容服务器\n\n然后在`192.168.5.154`的`8080`端口开启了一个``tomcat`,当做是真正的内容服务器，在tomcat默认的`index.jsp`中添加了一句显示IP地址的。\n\n```jsp\n<!--测试Nginx反向代理新增-->\nremote ip:<%=request.getRemoteAddr()%>\n```\n\n### 1.3 测试\n\n然后开始访问：\n\n首先直接访问内容服务器(Tomcat)：`192.168.5.154:8080`\n\n```java\nremote ip:192.168.5.199 \n```\n\n然后访问Nginx通过代理来访问内容服务器：`192.168.5.154/index.jsp`\n\n```java\nremote ip:192.168.5.154\n```\n\n显示远程\tIP是192.168.5.154，这个刚好就是Nginx服务器的IP；\n\n反向代理成功。\n\n### 1.4 问题\n\n前面设置后反向代理已经成功了,但是这样设置后，每次访问内容服务器都显示的是Nginx服务器的IP,内容服务器无法获取用户的真实IP，所以还需要进行一点修改。\n\n#### 1. 修改\n\n```nginx\nhttp{\n    keepalive_timeout  65;\n    server{\n        listen 80; //端口号\n        server_name localhost; //域名\n        location \\ {\n            root html; //网站根目录\n            index index.html; //网站首页\n        }  \n        access_log  logs/host.access.log  main; //访问日志\n        error page 500 error.html; //错误页面\n        #这里就是代理 通过正则表达式来匹配\n        #后缀以.jsp结尾的请求都会跳转到 http://192.168.5.154:8080;\n        location ~ \\.jsp$ {\n            #在请求头中添加上真实的IP \n            #具体格式为 proxy_set_header 属性名 数据\n            proxy_set_header X-real-ip $remote_addr\n            proxy_pass   http://192.168.5.154:8080;\n        }  \n    }\n}\n```\n\n`proxy_set_header X-real-ip $remote_addr` :Nginx服务器是知道客户端真实IP的，所以为了让内容服务器知道真实IP，只需要将真实IP添加到请求头中就可以了。\n\n其中`X-real-ip` 是自定义的，内容服务器取数据时也使用这个`X-real-ip`\n\n`$remote_addr` 则是获取远程客户端IP。\n\n#### 2. 测试：\n\n修改jsp，添加了一句代码。\n\n```jsp\n                <!--测试Nginx反向代理新增-->\n \t\t\t   <!--获取请求头中的真实IP-->\n                Real remote ip:<%=request.getHeader(\"X-real-ip\")%> <br />\n                remote ip/Nginx ip:<%=request.getRemoteAddr()%>\n```\n\n然后开始访问：\n\n首先直接访问内容服务器(Tomcat)：`192.168.5.154:8080`\n\n```java\nReal remote ip:null \nremote ip/Nginx ip:192.168.5.199 \n```\n\n然后访问Nginx通过代理来访问内容服务器：`192.168.5.154/index.jsp`\n\n```java\nReal remote ip:192.168.5.199 \nremote ip/Nginx ip:192.168.5.154\n```\n\n成功获取到真实IP，问题解决。\n\n## 2. 负载均衡(upstream)\n\n### 2.1 简介\n\n**可以在一个组织内使用多个代理服务器来平衡各 Web 服务器间的网络负载**。\n\n对于客户机发往真正服务器的请求，代理服务器起着中间调停者的作用。客户机每次都使用同一个 URL，但请求所采取的路由每次都可能经过不同的代理服务器。\n\n**同样是客户端先访问Nginx服务器，然后Nginx服务器再根据负载均衡算法将请求分发到不同的内容服务器上**。\n\n### 2.2 配置\n\n同意需要修改`Nginx服务器`配置文件``nginx.conf`。\n\n配置文件大概是这样的，在`server`中添加一个`location`用于中转。\n\n```nginx\nhttp{\n    keepalive_timeout  65;\n    #upstream 负载均衡 与server同级\n    #tomcat_server 负载均衡名字 自定义的 \n    #要用在下面location反向代理处 \n    #poxy_pass   http://tomcat_server;\n    upstream tomcat_server{\n        #weight权重 max_fails 最大失败次数 超过后就认为该节点down掉了 fail_timeout 超时时间\n        #192.168.5.154:8080 IP地址或者域名都可以\n        server 192.168.5.154:8080 weight=1 max_fails=2 fail_timeout=30s;\n        server 192.168.5.155:8080 weight=1 max_fails=2 fail_timeout=30s;\n    }\n    \n    \n    server{\n        listen 80; //端口号\n        server_name localhost; //域名\n        location \\ {\n            root html; //网站根目录\n            index index.html; //网站首页\n        }  \n        access_log  logs/host.access.log  main; //访问日志\n        error page 500 error.html; //错误页面\n        #proxy_pass 反向代理 通过正则表达式来匹配\n        #后缀以.jsp结尾的请求都会跳转到 http://192.168.5.154:8080;\n        #proxy_set_header 将真实IP添加到请求头中 传递到内容服务器\n        location ~ \\.jsp$ {\n            proxy_set_header X-real-ip $remote_addr\n            #proxy_pass   http://192.168.5.154:8080;\n            #反向代理这里不光可以写IP 还可以写上面配置的负载均衡\n            proxy_pass   http://tomcat_server;\n        }  \n    }\n}\n```\n\n### 2.3 测试\n\n开启两个tomcat，一个是`192.168.5.154`,一个是``192.168.5.155`.\n\n然后浏览器访问nginx服务器：`192.168.5.154/index.jsp`；\n\n会随机跳转到两个tomcat服务器中的一个就说明负载均衡配置成功了。\n\n## 3. 参考\n\n`http://www.runoob.com/linux/nginx-install-setup.html`\n\n`https://www.cnblogs.com/javahr/p/8318728.html`","source":"_posts/nginx/four-proxy-upstream.md","raw":"---\ntitle: Nginx入门教程(四)---反向代理与负载均衡\ntags:\n  - Nginx\ncategories:\n  - Nginx\nabbrlink: 930200c5\ndate: 2019-03-04 22:00:00\n---\n\n本章主要对Nginx服务器的常用配置文件，包括虚拟主机配置，location配置级语法等。\n\n<!-- more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 反向代理(proxy)\n\n### 1.1 简介\n\n**如果您的内容服务器具有必须保持安全的敏感信息，如信用卡号数据库，可在防火墙外部设置一个`代理服务器`作为`内容服务器的替身`**。\n\n当外部客户机尝试访问内容服务器时，会将其送到代理服务器。实际内容位于内容服务器上，在防火墙内部受到安全保护。代理服务器位于防火墙外部，在客户机看来就像是内容服务器。\n\n 这样，代理服务器就在安全数据库和可能的恶意攻击之间提供了又一道屏障。与有权访问整个数据库的情况相对比，就算是侥幸攻击成功，作恶者充其量也仅限于访问单个事务中所涉及的信息。未经授权的用户无法访问到真正的内容服务器，因为防火墙通路只允许代理服务器有权进行访问。\n\n**就是客户端先访问Nginx服务器，Nginx收到请求后再去请求内容服务器,这样中间多了一个Nginx服务器中转，会更加安全**。\n\n### 1.2 配置\n\n#### 1. 修改配置文件\n\n首先需要修改`Nginx服务器`配置文件``nginx.conf`。\n\n配置文件大概是这样的，在`server`中添加一个`location`用于中转。\n\n```nginx\nhttp{\n    keepalive_timeout  65;\n    server{\n        listen 80; //端口号\n        server_name localhost; //域名\n        location \\ {\n            root html; //网站根目录\n            index index.html; //网站首页\n        }  \n        access_log  logs/host.access.log  main; //访问日志\n        error page 500 error.html; //错误页面\n        #这里就是代理 通过正则表达式来匹配\n        #后缀以.jsp结尾的请求都会跳转到 http://192.168.5.154:8080;\n        location ~ \\.jsp$ {\n            proxy_pass   http://192.168.5.154:8080;\n        }  \n    }\n}\n```\n\n#### 2. 开启内容服务器\n\n然后在`192.168.5.154`的`8080`端口开启了一个``tomcat`,当做是真正的内容服务器，在tomcat默认的`index.jsp`中添加了一句显示IP地址的。\n\n```jsp\n<!--测试Nginx反向代理新增-->\nremote ip:<%=request.getRemoteAddr()%>\n```\n\n### 1.3 测试\n\n然后开始访问：\n\n首先直接访问内容服务器(Tomcat)：`192.168.5.154:8080`\n\n```java\nremote ip:192.168.5.199 \n```\n\n然后访问Nginx通过代理来访问内容服务器：`192.168.5.154/index.jsp`\n\n```java\nremote ip:192.168.5.154\n```\n\n显示远程\tIP是192.168.5.154，这个刚好就是Nginx服务器的IP；\n\n反向代理成功。\n\n### 1.4 问题\n\n前面设置后反向代理已经成功了,但是这样设置后，每次访问内容服务器都显示的是Nginx服务器的IP,内容服务器无法获取用户的真实IP，所以还需要进行一点修改。\n\n#### 1. 修改\n\n```nginx\nhttp{\n    keepalive_timeout  65;\n    server{\n        listen 80; //端口号\n        server_name localhost; //域名\n        location \\ {\n            root html; //网站根目录\n            index index.html; //网站首页\n        }  \n        access_log  logs/host.access.log  main; //访问日志\n        error page 500 error.html; //错误页面\n        #这里就是代理 通过正则表达式来匹配\n        #后缀以.jsp结尾的请求都会跳转到 http://192.168.5.154:8080;\n        location ~ \\.jsp$ {\n            #在请求头中添加上真实的IP \n            #具体格式为 proxy_set_header 属性名 数据\n            proxy_set_header X-real-ip $remote_addr\n            proxy_pass   http://192.168.5.154:8080;\n        }  \n    }\n}\n```\n\n`proxy_set_header X-real-ip $remote_addr` :Nginx服务器是知道客户端真实IP的，所以为了让内容服务器知道真实IP，只需要将真实IP添加到请求头中就可以了。\n\n其中`X-real-ip` 是自定义的，内容服务器取数据时也使用这个`X-real-ip`\n\n`$remote_addr` 则是获取远程客户端IP。\n\n#### 2. 测试：\n\n修改jsp，添加了一句代码。\n\n```jsp\n                <!--测试Nginx反向代理新增-->\n \t\t\t   <!--获取请求头中的真实IP-->\n                Real remote ip:<%=request.getHeader(\"X-real-ip\")%> <br />\n                remote ip/Nginx ip:<%=request.getRemoteAddr()%>\n```\n\n然后开始访问：\n\n首先直接访问内容服务器(Tomcat)：`192.168.5.154:8080`\n\n```java\nReal remote ip:null \nremote ip/Nginx ip:192.168.5.199 \n```\n\n然后访问Nginx通过代理来访问内容服务器：`192.168.5.154/index.jsp`\n\n```java\nReal remote ip:192.168.5.199 \nremote ip/Nginx ip:192.168.5.154\n```\n\n成功获取到真实IP，问题解决。\n\n## 2. 负载均衡(upstream)\n\n### 2.1 简介\n\n**可以在一个组织内使用多个代理服务器来平衡各 Web 服务器间的网络负载**。\n\n对于客户机发往真正服务器的请求，代理服务器起着中间调停者的作用。客户机每次都使用同一个 URL，但请求所采取的路由每次都可能经过不同的代理服务器。\n\n**同样是客户端先访问Nginx服务器，然后Nginx服务器再根据负载均衡算法将请求分发到不同的内容服务器上**。\n\n### 2.2 配置\n\n同意需要修改`Nginx服务器`配置文件``nginx.conf`。\n\n配置文件大概是这样的，在`server`中添加一个`location`用于中转。\n\n```nginx\nhttp{\n    keepalive_timeout  65;\n    #upstream 负载均衡 与server同级\n    #tomcat_server 负载均衡名字 自定义的 \n    #要用在下面location反向代理处 \n    #poxy_pass   http://tomcat_server;\n    upstream tomcat_server{\n        #weight权重 max_fails 最大失败次数 超过后就认为该节点down掉了 fail_timeout 超时时间\n        #192.168.5.154:8080 IP地址或者域名都可以\n        server 192.168.5.154:8080 weight=1 max_fails=2 fail_timeout=30s;\n        server 192.168.5.155:8080 weight=1 max_fails=2 fail_timeout=30s;\n    }\n    \n    \n    server{\n        listen 80; //端口号\n        server_name localhost; //域名\n        location \\ {\n            root html; //网站根目录\n            index index.html; //网站首页\n        }  \n        access_log  logs/host.access.log  main; //访问日志\n        error page 500 error.html; //错误页面\n        #proxy_pass 反向代理 通过正则表达式来匹配\n        #后缀以.jsp结尾的请求都会跳转到 http://192.168.5.154:8080;\n        #proxy_set_header 将真实IP添加到请求头中 传递到内容服务器\n        location ~ \\.jsp$ {\n            proxy_set_header X-real-ip $remote_addr\n            #proxy_pass   http://192.168.5.154:8080;\n            #反向代理这里不光可以写IP 还可以写上面配置的负载均衡\n            proxy_pass   http://tomcat_server;\n        }  \n    }\n}\n```\n\n### 2.3 测试\n\n开启两个tomcat，一个是`192.168.5.154`,一个是``192.168.5.155`.\n\n然后浏览器访问nginx服务器：`192.168.5.154/index.jsp`；\n\n会随机跳转到两个tomcat服务器中的一个就说明负载均衡配置成功了。\n\n## 3. 参考\n\n`http://www.runoob.com/linux/nginx-install-setup.html`\n\n`https://www.cnblogs.com/javahr/p/8318728.html`","slug":"nginx/four-proxy-upstream","published":1,"updated":"2019-03-04T14:54:12.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv458001r0ww4tuscdvlg","content":"<p>本章主要对Nginx服务器的常用配置文件，包括虚拟主机配置，location配置级语法等。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-反向代理-proxy\"><a href=\"#1-反向代理-proxy\" class=\"headerlink\" title=\"1. 反向代理(proxy)\"></a>1. 反向代理(proxy)</h2><h3 id=\"1-1-简介\"><a href=\"#1-1-简介\" class=\"headerlink\" title=\"1.1 简介\"></a>1.1 简介</h3><p><strong>如果您的内容服务器具有必须保持安全的敏感信息，如信用卡号数据库，可在防火墙外部设置一个<code>代理服务器</code>作为<code>内容服务器的替身</code></strong>。</p>\n<p>当外部客户机尝试访问内容服务器时，会将其送到代理服务器。实际内容位于内容服务器上，在防火墙内部受到安全保护。代理服务器位于防火墙外部，在客户机看来就像是内容服务器。</p>\n<p> 这样，代理服务器就在安全数据库和可能的恶意攻击之间提供了又一道屏障。与有权访问整个数据库的情况相对比，就算是侥幸攻击成功，作恶者充其量也仅限于访问单个事务中所涉及的信息。未经授权的用户无法访问到真正的内容服务器，因为防火墙通路只允许代理服务器有权进行访问。</p>\n<p><strong>就是客户端先访问Nginx服务器，Nginx收到请求后再去请求内容服务器,这样中间多了一个Nginx服务器中转，会更加安全</strong>。</p>\n<h3 id=\"1-2-配置\"><a href=\"#1-2-配置\" class=\"headerlink\" title=\"1.2 配置\"></a>1.2 配置</h3><h4 id=\"1-修改配置文件\"><a href=\"#1-修改配置文件\" class=\"headerlink\" title=\"1. 修改配置文件\"></a>1. 修改配置文件</h4><p>首先需要修改<code>Nginx服务器</code>配置文件<code></code>nginx.conf`。</p>\n<p>配置文件大概是这样的，在<code>server</code>中添加一个<code>location</code>用于中转。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http&#123;</span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\">    server&#123;</span><br><span class=\"line\">        listen 80; //端口号</span><br><span class=\"line\">        server_name localhost; //域名</span><br><span class=\"line\">        <span class=\"attribute\">location</span> \\ &#123;</span><br><span class=\"line\">            root html; //网站根目录</span><br><span class=\"line\">            index index.html; //网站首页</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        access_log  logs/host.access.log  main; //访问日志</span><br><span class=\"line\">        error page 500 error.html; //错误页面</span><br><span class=\"line\">        <span class=\"comment\">#这里就是代理 通过正则表达式来匹配</span></span><br><span class=\"line\">        <span class=\"comment\">#后缀以.jsp结尾的请求都会跳转到 http://192.168.5.154:8080;</span></span><br><span class=\"line\">        <span class=\"attribute\">location</span> <span class=\"regexp\">~ \\.jsp$</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_pass</span>   http://192.168.5.154:8080;</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-开启内容服务器\"><a href=\"#2-开启内容服务器\" class=\"headerlink\" title=\"2. 开启内容服务器\"></a>2. 开启内容服务器</h4><p>然后在<code>192.168.5.154</code>的<code>8080</code>端口开启了一个<code></code>tomcat<code>,当做是真正的内容服务器，在tomcat默认的</code>index.jsp`中添加了一句显示IP地址的。</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--测试Nginx反向代理新增--&gt;</span><br><span class=\"line\">remote ip:&lt;%=request.getRemoteAddr()%&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3-测试\"><a href=\"#1-3-测试\" class=\"headerlink\" title=\"1.3 测试\"></a>1.3 测试</h3><p>然后开始访问：</p>\n<p>首先直接访问内容服务器(Tomcat)：<code>192.168.5.154:8080</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">remote ip:<span class=\"number\">192.168</span>.5.199</span><br></pre></td></tr></table></figure>\n<p>然后访问Nginx通过代理来访问内容服务器：<code>192.168.5.154/index.jsp</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">remote ip:<span class=\"number\">192.168</span>.5.154</span><br></pre></td></tr></table></figure>\n<p>显示远程    IP是192.168.5.154，这个刚好就是Nginx服务器的IP；</p>\n<p>反向代理成功。</p>\n<h3 id=\"1-4-问题\"><a href=\"#1-4-问题\" class=\"headerlink\" title=\"1.4 问题\"></a>1.4 问题</h3><p>前面设置后反向代理已经成功了,但是这样设置后，每次访问内容服务器都显示的是Nginx服务器的IP,内容服务器无法获取用户的真实IP，所以还需要进行一点修改。</p>\n<h4 id=\"1-修改\"><a href=\"#1-修改\" class=\"headerlink\" title=\"1. 修改\"></a>1. 修改</h4><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http&#123;</span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\">    server&#123;</span><br><span class=\"line\">        listen 80; //端口号</span><br><span class=\"line\">        server_name localhost; //域名</span><br><span class=\"line\">        <span class=\"attribute\">location</span> \\ &#123;</span><br><span class=\"line\">            root html; //网站根目录</span><br><span class=\"line\">            index index.html; //网站首页</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        access_log  logs/host.access.log  main; //访问日志</span><br><span class=\"line\">        error page 500 error.html; //错误页面</span><br><span class=\"line\">        <span class=\"comment\">#这里就是代理 通过正则表达式来匹配</span></span><br><span class=\"line\">        <span class=\"comment\">#后缀以.jsp结尾的请求都会跳转到 http://192.168.5.154:8080;</span></span><br><span class=\"line\">        <span class=\"attribute\">location</span> <span class=\"regexp\">~ \\.jsp$</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">#在请求头中添加上真实的IP </span></span><br><span class=\"line\">            <span class=\"comment\">#具体格式为 proxy_set_header 属性名 数据</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_set_header</span> X-real-ip <span class=\"variable\">$remote_addr</span></span><br><span class=\"line\">            proxy_pass   http://192.168.5.154:8080;</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>proxy_set_header X-real-ip $remote_addr</code> :Nginx服务器是知道客户端真实IP的，所以为了让内容服务器知道真实IP，只需要将真实IP添加到请求头中就可以了。</p>\n<p>其中<code>X-real-ip</code> 是自定义的，内容服务器取数据时也使用这个<code>X-real-ip</code></p>\n<p><code>$remote_addr</code> 则是获取远程客户端IP。</p>\n<h4 id=\"2-测试：\"><a href=\"#2-测试：\" class=\"headerlink\" title=\"2. 测试：\"></a>2. 测试：</h4><p>修改jsp，添加了一句代码。</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">         &lt;!--测试Nginx反向代理新增--&gt;</span><br><span class=\"line\">&lt;!--获取请求头中的真实IP--&gt;</span><br><span class=\"line\">         Real remote ip:&lt;%=request.getHeader(<span class=\"string\">\"X-real-ip\"</span>)%&gt; &lt;br /&gt;</span><br><span class=\"line\">         remote ip/Nginx ip:&lt;%=request.getRemoteAddr()%&gt;</span><br></pre></td></tr></table></figure>\n<p>然后开始访问：</p>\n<p>首先直接访问内容服务器(Tomcat)：<code>192.168.5.154:8080</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Real remote ip:<span class=\"keyword\">null</span> </span><br><span class=\"line\">remote ip/Nginx ip:<span class=\"number\">192.168</span>.5.199</span><br></pre></td></tr></table></figure>\n<p>然后访问Nginx通过代理来访问内容服务器：<code>192.168.5.154/index.jsp</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Real remote ip:<span class=\"number\">192.168</span>.5.199 </span><br><span class=\"line\">remote ip/Nginx ip:<span class=\"number\">192.168</span>.5.154</span><br></pre></td></tr></table></figure>\n<p>成功获取到真实IP，问题解决。</p>\n<h2 id=\"2-负载均衡-upstream\"><a href=\"#2-负载均衡-upstream\" class=\"headerlink\" title=\"2. 负载均衡(upstream)\"></a>2. 负载均衡(upstream)</h2><h3 id=\"2-1-简介\"><a href=\"#2-1-简介\" class=\"headerlink\" title=\"2.1 简介\"></a>2.1 简介</h3><p><strong>可以在一个组织内使用多个代理服务器来平衡各 Web 服务器间的网络负载</strong>。</p>\n<p>对于客户机发往真正服务器的请求，代理服务器起着中间调停者的作用。客户机每次都使用同一个 URL，但请求所采取的路由每次都可能经过不同的代理服务器。</p>\n<p><strong>同样是客户端先访问Nginx服务器，然后Nginx服务器再根据负载均衡算法将请求分发到不同的内容服务器上</strong>。</p>\n<h3 id=\"2-2-配置\"><a href=\"#2-2-配置\" class=\"headerlink\" title=\"2.2 配置\"></a>2.2 配置</h3><p>同意需要修改<code>Nginx服务器</code>配置文件<code></code>nginx.conf`。</p>\n<p>配置文件大概是这样的，在<code>server</code>中添加一个<code>location</code>用于中转。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http&#123;</span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\">    <span class=\"comment\">#upstream 负载均衡 与server同级</span></span><br><span class=\"line\">    <span class=\"comment\">#tomcat_server 负载均衡名字 自定义的 </span></span><br><span class=\"line\">    <span class=\"comment\">#要用在下面location反向代理处 </span></span><br><span class=\"line\">    <span class=\"comment\">#poxy_pass   http://tomcat_server;</span></span><br><span class=\"line\">    <span class=\"attribute\">upstream</span> tomcat_server&#123;</span><br><span class=\"line\">        <span class=\"comment\">#weight权重 max_fails 最大失败次数 超过后就认为该节点down掉了 fail_timeout 超时时间</span></span><br><span class=\"line\">        <span class=\"comment\">#192.168.5.154:8080 IP地址或者域名都可以</span></span><br><span class=\"line\">        <span class=\"attribute\">server</span> <span class=\"number\">192.168.5.154:8080</span> weight=<span class=\"number\">1</span> max_fails=<span class=\"number\">2</span> fail_timeout=<span class=\"number\">30s</span>;</span><br><span class=\"line\">        <span class=\"attribute\">server</span> <span class=\"number\">192.168.5.155:8080</span> weight=<span class=\"number\">1</span> max_fails=<span class=\"number\">2</span> fail_timeout=<span class=\"number\">30s</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    server&#123;</span><br><span class=\"line\">        listen 80; //端口号</span><br><span class=\"line\">        server_name localhost; //域名</span><br><span class=\"line\">        <span class=\"attribute\">location</span> \\ &#123;</span><br><span class=\"line\">            root html; //网站根目录</span><br><span class=\"line\">            index index.html; //网站首页</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        access_log  logs/host.access.log  main; //访问日志</span><br><span class=\"line\">        error page 500 error.html; //错误页面</span><br><span class=\"line\">        <span class=\"comment\">#proxy_pass 反向代理 通过正则表达式来匹配</span></span><br><span class=\"line\">        <span class=\"comment\">#后缀以.jsp结尾的请求都会跳转到 http://192.168.5.154:8080;</span></span><br><span class=\"line\">        <span class=\"comment\">#proxy_set_header 将真实IP添加到请求头中 传递到内容服务器</span></span><br><span class=\"line\">        <span class=\"attribute\">location</span> <span class=\"regexp\">~ \\.jsp$</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_set_header</span> X-real-ip <span class=\"variable\">$remote_addr</span></span><br><span class=\"line\">            <span class=\"comment\">#proxy_pass   http://192.168.5.154:8080;</span></span><br><span class=\"line\">            <span class=\"comment\">#反向代理这里不光可以写IP 还可以写上面配置的负载均衡</span></span><br><span class=\"line\">            proxy_pass   http://tomcat_server;</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-测试\"><a href=\"#2-3-测试\" class=\"headerlink\" title=\"2.3 测试\"></a>2.3 测试</h3><p>开启两个tomcat，一个是<code>192.168.5.154</code>,一个是<code></code>192.168.5.155`.</p>\n<p>然后浏览器访问nginx服务器：<code>192.168.5.154/index.jsp</code>；</p>\n<p>会随机跳转到两个tomcat服务器中的一个就说明负载均衡配置成功了。</p>\n<h2 id=\"3-参考\"><a href=\"#3-参考\" class=\"headerlink\" title=\"3. 参考\"></a>3. 参考</h2><p><code>http://www.runoob.com/linux/nginx-install-setup.html</code></p>\n<p><code>https://www.cnblogs.com/javahr/p/8318728.html</code></p>\n","site":{"data":{}},"excerpt":"<p>本章主要对Nginx服务器的常用配置文件，包括虚拟主机配置，location配置级语法等。</p>","more":"<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-反向代理-proxy\"><a href=\"#1-反向代理-proxy\" class=\"headerlink\" title=\"1. 反向代理(proxy)\"></a>1. 反向代理(proxy)</h2><h3 id=\"1-1-简介\"><a href=\"#1-1-简介\" class=\"headerlink\" title=\"1.1 简介\"></a>1.1 简介</h3><p><strong>如果您的内容服务器具有必须保持安全的敏感信息，如信用卡号数据库，可在防火墙外部设置一个<code>代理服务器</code>作为<code>内容服务器的替身</code></strong>。</p>\n<p>当外部客户机尝试访问内容服务器时，会将其送到代理服务器。实际内容位于内容服务器上，在防火墙内部受到安全保护。代理服务器位于防火墙外部，在客户机看来就像是内容服务器。</p>\n<p> 这样，代理服务器就在安全数据库和可能的恶意攻击之间提供了又一道屏障。与有权访问整个数据库的情况相对比，就算是侥幸攻击成功，作恶者充其量也仅限于访问单个事务中所涉及的信息。未经授权的用户无法访问到真正的内容服务器，因为防火墙通路只允许代理服务器有权进行访问。</p>\n<p><strong>就是客户端先访问Nginx服务器，Nginx收到请求后再去请求内容服务器,这样中间多了一个Nginx服务器中转，会更加安全</strong>。</p>\n<h3 id=\"1-2-配置\"><a href=\"#1-2-配置\" class=\"headerlink\" title=\"1.2 配置\"></a>1.2 配置</h3><h4 id=\"1-修改配置文件\"><a href=\"#1-修改配置文件\" class=\"headerlink\" title=\"1. 修改配置文件\"></a>1. 修改配置文件</h4><p>首先需要修改<code>Nginx服务器</code>配置文件<code></code>nginx.conf`。</p>\n<p>配置文件大概是这样的，在<code>server</code>中添加一个<code>location</code>用于中转。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http&#123;</span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\">    server&#123;</span><br><span class=\"line\">        listen 80; //端口号</span><br><span class=\"line\">        server_name localhost; //域名</span><br><span class=\"line\">        <span class=\"attribute\">location</span> \\ &#123;</span><br><span class=\"line\">            root html; //网站根目录</span><br><span class=\"line\">            index index.html; //网站首页</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        access_log  logs/host.access.log  main; //访问日志</span><br><span class=\"line\">        error page 500 error.html; //错误页面</span><br><span class=\"line\">        <span class=\"comment\">#这里就是代理 通过正则表达式来匹配</span></span><br><span class=\"line\">        <span class=\"comment\">#后缀以.jsp结尾的请求都会跳转到 http://192.168.5.154:8080;</span></span><br><span class=\"line\">        <span class=\"attribute\">location</span> <span class=\"regexp\">~ \\.jsp$</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_pass</span>   http://192.168.5.154:8080;</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-开启内容服务器\"><a href=\"#2-开启内容服务器\" class=\"headerlink\" title=\"2. 开启内容服务器\"></a>2. 开启内容服务器</h4><p>然后在<code>192.168.5.154</code>的<code>8080</code>端口开启了一个<code></code>tomcat<code>,当做是真正的内容服务器，在tomcat默认的</code>index.jsp`中添加了一句显示IP地址的。</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--测试Nginx反向代理新增--&gt;</span><br><span class=\"line\">remote ip:&lt;%=request.getRemoteAddr()%&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3-测试\"><a href=\"#1-3-测试\" class=\"headerlink\" title=\"1.3 测试\"></a>1.3 测试</h3><p>然后开始访问：</p>\n<p>首先直接访问内容服务器(Tomcat)：<code>192.168.5.154:8080</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">remote ip:<span class=\"number\">192.168</span>.5.199</span><br></pre></td></tr></table></figure>\n<p>然后访问Nginx通过代理来访问内容服务器：<code>192.168.5.154/index.jsp</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">remote ip:<span class=\"number\">192.168</span>.5.154</span><br></pre></td></tr></table></figure>\n<p>显示远程    IP是192.168.5.154，这个刚好就是Nginx服务器的IP；</p>\n<p>反向代理成功。</p>\n<h3 id=\"1-4-问题\"><a href=\"#1-4-问题\" class=\"headerlink\" title=\"1.4 问题\"></a>1.4 问题</h3><p>前面设置后反向代理已经成功了,但是这样设置后，每次访问内容服务器都显示的是Nginx服务器的IP,内容服务器无法获取用户的真实IP，所以还需要进行一点修改。</p>\n<h4 id=\"1-修改\"><a href=\"#1-修改\" class=\"headerlink\" title=\"1. 修改\"></a>1. 修改</h4><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http&#123;</span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\">    server&#123;</span><br><span class=\"line\">        listen 80; //端口号</span><br><span class=\"line\">        server_name localhost; //域名</span><br><span class=\"line\">        <span class=\"attribute\">location</span> \\ &#123;</span><br><span class=\"line\">            root html; //网站根目录</span><br><span class=\"line\">            index index.html; //网站首页</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        access_log  logs/host.access.log  main; //访问日志</span><br><span class=\"line\">        error page 500 error.html; //错误页面</span><br><span class=\"line\">        <span class=\"comment\">#这里就是代理 通过正则表达式来匹配</span></span><br><span class=\"line\">        <span class=\"comment\">#后缀以.jsp结尾的请求都会跳转到 http://192.168.5.154:8080;</span></span><br><span class=\"line\">        <span class=\"attribute\">location</span> <span class=\"regexp\">~ \\.jsp$</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">#在请求头中添加上真实的IP </span></span><br><span class=\"line\">            <span class=\"comment\">#具体格式为 proxy_set_header 属性名 数据</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_set_header</span> X-real-ip <span class=\"variable\">$remote_addr</span></span><br><span class=\"line\">            proxy_pass   http://192.168.5.154:8080;</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>proxy_set_header X-real-ip $remote_addr</code> :Nginx服务器是知道客户端真实IP的，所以为了让内容服务器知道真实IP，只需要将真实IP添加到请求头中就可以了。</p>\n<p>其中<code>X-real-ip</code> 是自定义的，内容服务器取数据时也使用这个<code>X-real-ip</code></p>\n<p><code>$remote_addr</code> 则是获取远程客户端IP。</p>\n<h4 id=\"2-测试：\"><a href=\"#2-测试：\" class=\"headerlink\" title=\"2. 测试：\"></a>2. 测试：</h4><p>修改jsp，添加了一句代码。</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">         &lt;!--测试Nginx反向代理新增--&gt;</span><br><span class=\"line\">&lt;!--获取请求头中的真实IP--&gt;</span><br><span class=\"line\">         Real remote ip:&lt;%=request.getHeader(<span class=\"string\">\"X-real-ip\"</span>)%&gt; &lt;br /&gt;</span><br><span class=\"line\">         remote ip/Nginx ip:&lt;%=request.getRemoteAddr()%&gt;</span><br></pre></td></tr></table></figure>\n<p>然后开始访问：</p>\n<p>首先直接访问内容服务器(Tomcat)：<code>192.168.5.154:8080</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Real remote ip:<span class=\"keyword\">null</span> </span><br><span class=\"line\">remote ip/Nginx ip:<span class=\"number\">192.168</span>.5.199</span><br></pre></td></tr></table></figure>\n<p>然后访问Nginx通过代理来访问内容服务器：<code>192.168.5.154/index.jsp</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Real remote ip:<span class=\"number\">192.168</span>.5.199 </span><br><span class=\"line\">remote ip/Nginx ip:<span class=\"number\">192.168</span>.5.154</span><br></pre></td></tr></table></figure>\n<p>成功获取到真实IP，问题解决。</p>\n<h2 id=\"2-负载均衡-upstream\"><a href=\"#2-负载均衡-upstream\" class=\"headerlink\" title=\"2. 负载均衡(upstream)\"></a>2. 负载均衡(upstream)</h2><h3 id=\"2-1-简介\"><a href=\"#2-1-简介\" class=\"headerlink\" title=\"2.1 简介\"></a>2.1 简介</h3><p><strong>可以在一个组织内使用多个代理服务器来平衡各 Web 服务器间的网络负载</strong>。</p>\n<p>对于客户机发往真正服务器的请求，代理服务器起着中间调停者的作用。客户机每次都使用同一个 URL，但请求所采取的路由每次都可能经过不同的代理服务器。</p>\n<p><strong>同样是客户端先访问Nginx服务器，然后Nginx服务器再根据负载均衡算法将请求分发到不同的内容服务器上</strong>。</p>\n<h3 id=\"2-2-配置\"><a href=\"#2-2-配置\" class=\"headerlink\" title=\"2.2 配置\"></a>2.2 配置</h3><p>同意需要修改<code>Nginx服务器</code>配置文件<code></code>nginx.conf`。</p>\n<p>配置文件大概是这样的，在<code>server</code>中添加一个<code>location</code>用于中转。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http&#123;</span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\">    <span class=\"comment\">#upstream 负载均衡 与server同级</span></span><br><span class=\"line\">    <span class=\"comment\">#tomcat_server 负载均衡名字 自定义的 </span></span><br><span class=\"line\">    <span class=\"comment\">#要用在下面location反向代理处 </span></span><br><span class=\"line\">    <span class=\"comment\">#poxy_pass   http://tomcat_server;</span></span><br><span class=\"line\">    <span class=\"attribute\">upstream</span> tomcat_server&#123;</span><br><span class=\"line\">        <span class=\"comment\">#weight权重 max_fails 最大失败次数 超过后就认为该节点down掉了 fail_timeout 超时时间</span></span><br><span class=\"line\">        <span class=\"comment\">#192.168.5.154:8080 IP地址或者域名都可以</span></span><br><span class=\"line\">        <span class=\"attribute\">server</span> <span class=\"number\">192.168.5.154:8080</span> weight=<span class=\"number\">1</span> max_fails=<span class=\"number\">2</span> fail_timeout=<span class=\"number\">30s</span>;</span><br><span class=\"line\">        <span class=\"attribute\">server</span> <span class=\"number\">192.168.5.155:8080</span> weight=<span class=\"number\">1</span> max_fails=<span class=\"number\">2</span> fail_timeout=<span class=\"number\">30s</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    server&#123;</span><br><span class=\"line\">        listen 80; //端口号</span><br><span class=\"line\">        server_name localhost; //域名</span><br><span class=\"line\">        <span class=\"attribute\">location</span> \\ &#123;</span><br><span class=\"line\">            root html; //网站根目录</span><br><span class=\"line\">            index index.html; //网站首页</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        access_log  logs/host.access.log  main; //访问日志</span><br><span class=\"line\">        error page 500 error.html; //错误页面</span><br><span class=\"line\">        <span class=\"comment\">#proxy_pass 反向代理 通过正则表达式来匹配</span></span><br><span class=\"line\">        <span class=\"comment\">#后缀以.jsp结尾的请求都会跳转到 http://192.168.5.154:8080;</span></span><br><span class=\"line\">        <span class=\"comment\">#proxy_set_header 将真实IP添加到请求头中 传递到内容服务器</span></span><br><span class=\"line\">        <span class=\"attribute\">location</span> <span class=\"regexp\">~ \\.jsp$</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_set_header</span> X-real-ip <span class=\"variable\">$remote_addr</span></span><br><span class=\"line\">            <span class=\"comment\">#proxy_pass   http://192.168.5.154:8080;</span></span><br><span class=\"line\">            <span class=\"comment\">#反向代理这里不光可以写IP 还可以写上面配置的负载均衡</span></span><br><span class=\"line\">            proxy_pass   http://tomcat_server;</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-测试\"><a href=\"#2-3-测试\" class=\"headerlink\" title=\"2.3 测试\"></a>2.3 测试</h3><p>开启两个tomcat，一个是<code>192.168.5.154</code>,一个是<code></code>192.168.5.155`.</p>\n<p>然后浏览器访问nginx服务器：<code>192.168.5.154/index.jsp</code>；</p>\n<p>会随机跳转到两个tomcat服务器中的一个就说明负载均衡配置成功了。</p>\n<h2 id=\"3-参考\"><a href=\"#3-参考\" class=\"headerlink\" title=\"3. 参考\"></a>3. 参考</h2><p><code>http://www.runoob.com/linux/nginx-install-setup.html</code></p>\n<p><code>https://www.cnblogs.com/javahr/p/8318728.html</code></p>"},{"title":"Nginx入门教程(一)---安装与配置","abbrlink":"545ed69","date":"2019-03-01T14:00:00.000Z","_content":"\n本章主要对Nginx服务器进行了介绍，同时对Nginx与Apache之间做出了对比，最后记录了如何在Linux下通过解压方式安装Nginx，也对Nginx基本使用做出了说明。\n\n<!-- more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n软件统一放在`/usr/software`下 解压后放在单独的文件夹下`/usr/local/java`/`/usr/local/mysql`\n\n## 1. Nginx简介\n\nNginx是一款轻量级的Web服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。其特点是**占有内存少，并发能力强**，事实上nginx的并发能力确实在同类型的网页服务器中表现较好。 \n\n### 1.1 Nginx模块架构\n\nNginx 由内核和模块组成。Nginx 的模块从结构上分为`核心模块`、`基础模块`和`第三方模块`。\n\n* **核心模块**：HTTP 模块、 EVENT 模块和 MAIL 模块\n* **基础模块**： HTTP Access 模块、HTTP FastCGI 模块、HTTP Proxy 模块和 HTTP Rewrite模块\n* **第三方模块**：HTTP Upstream Request Hash 模块、 Notice 模块和 HTTP Access Key模块 \n\n### 1.2 Nignx与Appache\n\n`Nginx`的高并发得益于其采用了`epoll`模型，与传统的服务器程序架构不同`epoll` 是`linux内核2.6`以后才出现的。\n\n**`Nginx`采用`epoll`模型，异步非阻塞，而`Apache`采用的是`select 模型` **。\n\n* **Select模型**：select 选择句柄的时候是遍历所有句柄，也就是说句柄有事件响应时，select 需要遍历所有句柄才能获取到哪些句柄有事件通知，因此效率是非常低。\n* **epoll 模型**：epoll对于句柄事件的选择不是遍历的，是事件响应的，就是句柄上事件来就马上选择出来，不需要遍历整个句柄链表，因此效率非常高。\n\n## 2. 安装\n\n注：这里用的是`CentOS 7`\n\n### 2.1 安装包下载\n\n官网：`http://nginx.org/en/download.html` 这里下载的时`nginx-1.15.9.tar.gz`\n\n上传到服务器上，这里放在了`usr/software`目录下\n\n### 2.2 环境准备\n\n**安装编译源码所需要的工具和库**:\n\n```linux\n# yum install gcc gcc-c++ ncurses-devel perl \n```\n\n**安装HTTP rewrite module模块**: \n\n```linux\n# yum install pcre pcre-devel\n```\n\n**安装HTTP zlib模块**: \n\n```linux\n# yum install zlib gzip zlib-devel\n```\n\n### 2.3 编译安装\n\n**解压**：\n\n```shell\n[root@localhost software]# tar -zxvf nginx-1.15.9.tar.gz -C /usr/local\n//解压到/usr/local目录下\n```\n\n**配置**:\n\n进行configure配置，检查是否报错。\n\n```linux\n[root@localhost nginx-1.15.9]# ./configure --prefix=/usr/local/nginx\n\n//出现下面的配置摘要就算配置ok\nConfiguration summary\n  + using system PCRE library\n  + OpenSSL library is not used\n  + using system zlib library\n\n  nginx path prefix: \"/usr/local/nginx\"\n  nginx binary file: \"/usr/local/nginx/sbin/nginx\"\n  .....\n  nginx http uwsgi temporary files: \"uwsgi_temp\"\n  nginx http scgi temporary files: \"scgi_temp\"\n```\n\n**编译安装**:\n\n```linux\n[root@localhost nginx-1.15.9]# make&&make install\n\n//出现下面的提示就算编译安装ok\nmake[1]: Leaving directory `/usr/local/nginx-1.15.9'\n\n```\n\n编译安装后多了一个``Nginx`文件夹,在`/usr/local/nginx` 内部又分为四个目录\n\n```nginx\n/usr/local/nginx\n\t\t\t--conf\t配置文件\n\t\t\t--html  网页文件\n\t\t\t--logs  日志文件\n\t\t\t--sbin  主要二进制文件\n```\n\n**查看Nginx版本:**\n\n```linux\n[root@localhost nginx]# /usr/local/nginx/sbin/nginx -v\nnginx version: nginx/1.15.9\n//这里是Nginx 1.15.9\n```\n\n到这里``Nginx`安装就结束了。\n\n## 3. 基本操作\n\n### 3.1 启动\n\n```linux\n[root@localhost sbin]# /usr/local/nginx/sbin/nginx\n\n//这里如果没有报错就说明启动成功了\n```\n\n查看\n\n```linux\n[root@localhost sbin]# ps aux|grep nginx\nroot      98830  0.0  0.0  20552   616 ?        Ss   09:57   0:00 nginx: master process /usr/local/nginx/sbin/nginx\nnobody    98831  0.0  0.1  23088  1392 ?        S    09:57   0:00 nginx: worker process\nroot      98839  0.0  0.0 112708   976 pts/1    R+   09:57   0:00 grep --color=auto nginx\n```\n\n可以看到Nginx有两个进程，一个`master进程`一个`worker进程`.\n\n同时浏览器已经可以访问了:直接访问IP地址即可`http://192.168.5.154/`\n\n显示如下：\n\n```java\nWelcome to nginx!\nIf you see this page, the nginx web server is successfully installed and working. Further configuration is required.\n\nFor online documentation and support please refer to nginx.org.\nCommercial support is available at nginx.com.\n\nThank you for using nginx.\n```\n\n说明`Nginx`确实已经启动了。\n\n### 3.2 常用命令\n\n```linux\n[root@localhost sbin]# /usr/local/nginx/sbin/nginx -s reload   # 重新载入配置文件\n\n[root@localhost sbin]# /usr/local/nginx/sbin/nginx -s reopen   # 重启 Nginx\n\n[root@localhost sbin]# /usr/local/nginx/sbin/nginx -s stop     # 停止 Nginx\n```\n\n## 4. 参考\n\n`http://www.runoob.com/linux/nginx-install-setup.html`\n\n","source":"_posts/nginx/one-install.md","raw":"---\ntitle: Nginx入门教程(一)---安装与配置\ntags:\n  - Nginx\ncategories:\n  - Nginx\nabbrlink: 545ed69\ndate: 2019-03-01 22:00:00\n---\n\n本章主要对Nginx服务器进行了介绍，同时对Nginx与Apache之间做出了对比，最后记录了如何在Linux下通过解压方式安装Nginx，也对Nginx基本使用做出了说明。\n\n<!-- more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n软件统一放在`/usr/software`下 解压后放在单独的文件夹下`/usr/local/java`/`/usr/local/mysql`\n\n## 1. Nginx简介\n\nNginx是一款轻量级的Web服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。其特点是**占有内存少，并发能力强**，事实上nginx的并发能力确实在同类型的网页服务器中表现较好。 \n\n### 1.1 Nginx模块架构\n\nNginx 由内核和模块组成。Nginx 的模块从结构上分为`核心模块`、`基础模块`和`第三方模块`。\n\n* **核心模块**：HTTP 模块、 EVENT 模块和 MAIL 模块\n* **基础模块**： HTTP Access 模块、HTTP FastCGI 模块、HTTP Proxy 模块和 HTTP Rewrite模块\n* **第三方模块**：HTTP Upstream Request Hash 模块、 Notice 模块和 HTTP Access Key模块 \n\n### 1.2 Nignx与Appache\n\n`Nginx`的高并发得益于其采用了`epoll`模型，与传统的服务器程序架构不同`epoll` 是`linux内核2.6`以后才出现的。\n\n**`Nginx`采用`epoll`模型，异步非阻塞，而`Apache`采用的是`select 模型` **。\n\n* **Select模型**：select 选择句柄的时候是遍历所有句柄，也就是说句柄有事件响应时，select 需要遍历所有句柄才能获取到哪些句柄有事件通知，因此效率是非常低。\n* **epoll 模型**：epoll对于句柄事件的选择不是遍历的，是事件响应的，就是句柄上事件来就马上选择出来，不需要遍历整个句柄链表，因此效率非常高。\n\n## 2. 安装\n\n注：这里用的是`CentOS 7`\n\n### 2.1 安装包下载\n\n官网：`http://nginx.org/en/download.html` 这里下载的时`nginx-1.15.9.tar.gz`\n\n上传到服务器上，这里放在了`usr/software`目录下\n\n### 2.2 环境准备\n\n**安装编译源码所需要的工具和库**:\n\n```linux\n# yum install gcc gcc-c++ ncurses-devel perl \n```\n\n**安装HTTP rewrite module模块**: \n\n```linux\n# yum install pcre pcre-devel\n```\n\n**安装HTTP zlib模块**: \n\n```linux\n# yum install zlib gzip zlib-devel\n```\n\n### 2.3 编译安装\n\n**解压**：\n\n```shell\n[root@localhost software]# tar -zxvf nginx-1.15.9.tar.gz -C /usr/local\n//解压到/usr/local目录下\n```\n\n**配置**:\n\n进行configure配置，检查是否报错。\n\n```linux\n[root@localhost nginx-1.15.9]# ./configure --prefix=/usr/local/nginx\n\n//出现下面的配置摘要就算配置ok\nConfiguration summary\n  + using system PCRE library\n  + OpenSSL library is not used\n  + using system zlib library\n\n  nginx path prefix: \"/usr/local/nginx\"\n  nginx binary file: \"/usr/local/nginx/sbin/nginx\"\n  .....\n  nginx http uwsgi temporary files: \"uwsgi_temp\"\n  nginx http scgi temporary files: \"scgi_temp\"\n```\n\n**编译安装**:\n\n```linux\n[root@localhost nginx-1.15.9]# make&&make install\n\n//出现下面的提示就算编译安装ok\nmake[1]: Leaving directory `/usr/local/nginx-1.15.9'\n\n```\n\n编译安装后多了一个``Nginx`文件夹,在`/usr/local/nginx` 内部又分为四个目录\n\n```nginx\n/usr/local/nginx\n\t\t\t--conf\t配置文件\n\t\t\t--html  网页文件\n\t\t\t--logs  日志文件\n\t\t\t--sbin  主要二进制文件\n```\n\n**查看Nginx版本:**\n\n```linux\n[root@localhost nginx]# /usr/local/nginx/sbin/nginx -v\nnginx version: nginx/1.15.9\n//这里是Nginx 1.15.9\n```\n\n到这里``Nginx`安装就结束了。\n\n## 3. 基本操作\n\n### 3.1 启动\n\n```linux\n[root@localhost sbin]# /usr/local/nginx/sbin/nginx\n\n//这里如果没有报错就说明启动成功了\n```\n\n查看\n\n```linux\n[root@localhost sbin]# ps aux|grep nginx\nroot      98830  0.0  0.0  20552   616 ?        Ss   09:57   0:00 nginx: master process /usr/local/nginx/sbin/nginx\nnobody    98831  0.0  0.1  23088  1392 ?        S    09:57   0:00 nginx: worker process\nroot      98839  0.0  0.0 112708   976 pts/1    R+   09:57   0:00 grep --color=auto nginx\n```\n\n可以看到Nginx有两个进程，一个`master进程`一个`worker进程`.\n\n同时浏览器已经可以访问了:直接访问IP地址即可`http://192.168.5.154/`\n\n显示如下：\n\n```java\nWelcome to nginx!\nIf you see this page, the nginx web server is successfully installed and working. Further configuration is required.\n\nFor online documentation and support please refer to nginx.org.\nCommercial support is available at nginx.com.\n\nThank you for using nginx.\n```\n\n说明`Nginx`确实已经启动了。\n\n### 3.2 常用命令\n\n```linux\n[root@localhost sbin]# /usr/local/nginx/sbin/nginx -s reload   # 重新载入配置文件\n\n[root@localhost sbin]# /usr/local/nginx/sbin/nginx -s reopen   # 重启 Nginx\n\n[root@localhost sbin]# /usr/local/nginx/sbin/nginx -s stop     # 停止 Nginx\n```\n\n## 4. 参考\n\n`http://www.runoob.com/linux/nginx-install-setup.html`\n\n","slug":"nginx/one-install","published":1,"updated":"2019-03-04T14:01:02.641Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv45c001t0ww4n3yewurj","content":"<p>本章主要对Nginx服务器进行了介绍，同时对Nginx与Apache之间做出了对比，最后记录了如何在Linux下通过解压方式安装Nginx，也对Nginx基本使用做出了说明。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<p>软件统一放在<code>/usr/software</code>下 解压后放在单独的文件夹下<code>/usr/local/java</code>/<code>/usr/local/mysql</code></p>\n<h2 id=\"1-Nginx简介\"><a href=\"#1-Nginx简介\" class=\"headerlink\" title=\"1. Nginx简介\"></a>1. Nginx简介</h2><p>Nginx是一款轻量级的Web服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。其特点是<strong>占有内存少，并发能力强</strong>，事实上nginx的并发能力确实在同类型的网页服务器中表现较好。 </p>\n<h3 id=\"1-1-Nginx模块架构\"><a href=\"#1-1-Nginx模块架构\" class=\"headerlink\" title=\"1.1 Nginx模块架构\"></a>1.1 Nginx模块架构</h3><p>Nginx 由内核和模块组成。Nginx 的模块从结构上分为<code>核心模块</code>、<code>基础模块</code>和<code>第三方模块</code>。</p>\n<ul>\n<li><strong>核心模块</strong>：HTTP 模块、 EVENT 模块和 MAIL 模块</li>\n<li><strong>基础模块</strong>： HTTP Access 模块、HTTP FastCGI 模块、HTTP Proxy 模块和 HTTP Rewrite模块</li>\n<li><strong>第三方模块</strong>：HTTP Upstream Request Hash 模块、 Notice 模块和 HTTP Access Key模块 </li>\n</ul>\n<h3 id=\"1-2-Nignx与Appache\"><a href=\"#1-2-Nignx与Appache\" class=\"headerlink\" title=\"1.2 Nignx与Appache\"></a>1.2 Nignx与Appache</h3><p><code>Nginx</code>的高并发得益于其采用了<code>epoll</code>模型，与传统的服务器程序架构不同<code>epoll</code> 是<code>linux内核2.6</code>以后才出现的。</p>\n<p><strong><code>Nginx</code>采用<code>epoll</code>模型，异步非阻塞，而<code>Apache</code>采用的是<code>select 模型</code> </strong>。</p>\n<ul>\n<li><strong>Select模型</strong>：select 选择句柄的时候是遍历所有句柄，也就是说句柄有事件响应时，select 需要遍历所有句柄才能获取到哪些句柄有事件通知，因此效率是非常低。</li>\n<li><strong>epoll 模型</strong>：epoll对于句柄事件的选择不是遍历的，是事件响应的，就是句柄上事件来就马上选择出来，不需要遍历整个句柄链表，因此效率非常高。</li>\n</ul>\n<h2 id=\"2-安装\"><a href=\"#2-安装\" class=\"headerlink\" title=\"2. 安装\"></a>2. 安装</h2><p>注：这里用的是<code>CentOS 7</code></p>\n<h3 id=\"2-1-安装包下载\"><a href=\"#2-1-安装包下载\" class=\"headerlink\" title=\"2.1 安装包下载\"></a>2.1 安装包下载</h3><p>官网：<code>http://nginx.org/en/download.html</code> 这里下载的时<code>nginx-1.15.9.tar.gz</code></p>\n<p>上传到服务器上，这里放在了<code>usr/software</code>目录下</p>\n<h3 id=\"2-2-环境准备\"><a href=\"#2-2-环境准备\" class=\"headerlink\" title=\"2.2 环境准备\"></a>2.2 环境准备</h3><p><strong>安装编译源码所需要的工具和库</strong>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># yum install gcc gcc-c++ ncurses-devel perl</span><br></pre></td></tr></table></figure>\n<p><strong>安装HTTP rewrite module模块</strong>: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># yum install pcre pcre-devel</span><br></pre></td></tr></table></figure>\n<p><strong>安装HTTP zlib模块</strong>: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># yum install zlib gzip zlib-devel</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-编译安装\"><a href=\"#2-3-编译安装\" class=\"headerlink\" title=\"2.3 编译安装\"></a>2.3 编译安装</h3><p><strong>解压</strong>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost software]# tar -zxvf nginx-1.15.9.tar.gz -C /usr/local</span><br><span class=\"line\">//解压到/usr/local目录下</span><br></pre></td></tr></table></figure>\n<p><strong>配置</strong>:</p>\n<p>进行configure配置，检查是否报错。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost nginx-1.15.9]# ./configure --prefix=/usr/local/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">//出现下面的配置摘要就算配置ok</span><br><span class=\"line\">Configuration summary</span><br><span class=\"line\">  + using system PCRE library</span><br><span class=\"line\">  + OpenSSL library is not used</span><br><span class=\"line\">  + using system zlib library</span><br><span class=\"line\"></span><br><span class=\"line\">  nginx path prefix: &quot;/usr/local/nginx&quot;</span><br><span class=\"line\">  nginx binary file: &quot;/usr/local/nginx/sbin/nginx&quot;</span><br><span class=\"line\">  .....</span><br><span class=\"line\">  nginx http uwsgi temporary files: &quot;uwsgi_temp&quot;</span><br><span class=\"line\">  nginx http scgi temporary files: &quot;scgi_temp&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>编译安装</strong>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost nginx-1.15.9]# make&amp;&amp;make install</span><br><span class=\"line\"></span><br><span class=\"line\">//出现下面的提示就算编译安装ok</span><br><span class=\"line\">make[1]: Leaving directory `/usr/local/nginx-1.15.9&apos;</span><br></pre></td></tr></table></figure>\n<p>编译安装后多了一个<code></code>Nginx<code>文件夹,在</code>/usr/local/nginx` 内部又分为四个目录</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/nginx</span><br><span class=\"line\">\t\t\t--conf\t配置文件</span><br><span class=\"line\">\t\t\t--html  网页文件</span><br><span class=\"line\">\t\t\t--logs  日志文件</span><br><span class=\"line\">\t\t\t--sbin  主要二进制文件</span><br></pre></td></tr></table></figure>\n<p><strong>查看Nginx版本:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost nginx]# /usr/local/nginx/sbin/nginx -v</span><br><span class=\"line\">nginx version: nginx/1.15.9</span><br><span class=\"line\">//这里是Nginx 1.15.9</span><br></pre></td></tr></table></figure>\n<p>到这里<code></code>Nginx`安装就结束了。</p>\n<h2 id=\"3-基本操作\"><a href=\"#3-基本操作\" class=\"headerlink\" title=\"3. 基本操作\"></a>3. 基本操作</h2><h3 id=\"3-1-启动\"><a href=\"#3-1-启动\" class=\"headerlink\" title=\"3.1 启动\"></a>3.1 启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost sbin]# /usr/local/nginx/sbin/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">//这里如果没有报错就说明启动成功了</span><br></pre></td></tr></table></figure>\n<p>查看</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost sbin]# ps aux|grep nginx</span><br><span class=\"line\">root      98830  0.0  0.0  20552   616 ?        Ss   09:57   0:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nobody    98831  0.0  0.1  23088  1392 ?        S    09:57   0:00 nginx: worker process</span><br><span class=\"line\">root      98839  0.0  0.0 112708   976 pts/1    R+   09:57   0:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure>\n<p>可以看到Nginx有两个进程，一个<code>master进程</code>一个<code>worker进程</code>.</p>\n<p>同时浏览器已经可以访问了:直接访问IP地址即可<code>http://192.168.5.154/</code></p>\n<p>显示如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Welcome to nginx!</span><br><span class=\"line\">If you see <span class=\"keyword\">this</span> page, the nginx web server is successfully installed and working. Further configuration is required.</span><br><span class=\"line\"></span><br><span class=\"line\">For online documentation and support please refer to nginx.org.</span><br><span class=\"line\">Commercial support is available at nginx.com.</span><br><span class=\"line\"></span><br><span class=\"line\">Thank you <span class=\"keyword\">for</span> using nginx.</span><br></pre></td></tr></table></figure>\n<p>说明<code>Nginx</code>确实已经启动了。</p>\n<h3 id=\"3-2-常用命令\"><a href=\"#3-2-常用命令\" class=\"headerlink\" title=\"3.2 常用命令\"></a>3.2 常用命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost sbin]# /usr/local/nginx/sbin/nginx -s reload   # 重新载入配置文件</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost sbin]# /usr/local/nginx/sbin/nginx -s reopen   # 重启 Nginx</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost sbin]# /usr/local/nginx/sbin/nginx -s stop     # 停止 Nginx</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4. 参考\"></a>4. 参考</h2><p><code>http://www.runoob.com/linux/nginx-install-setup.html</code></p>\n","site":{"data":{}},"excerpt":"<p>本章主要对Nginx服务器进行了介绍，同时对Nginx与Apache之间做出了对比，最后记录了如何在Linux下通过解压方式安装Nginx，也对Nginx基本使用做出了说明。</p>","more":"<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<p>软件统一放在<code>/usr/software</code>下 解压后放在单独的文件夹下<code>/usr/local/java</code>/<code>/usr/local/mysql</code></p>\n<h2 id=\"1-Nginx简介\"><a href=\"#1-Nginx简介\" class=\"headerlink\" title=\"1. Nginx简介\"></a>1. Nginx简介</h2><p>Nginx是一款轻量级的Web服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。其特点是<strong>占有内存少，并发能力强</strong>，事实上nginx的并发能力确实在同类型的网页服务器中表现较好。 </p>\n<h3 id=\"1-1-Nginx模块架构\"><a href=\"#1-1-Nginx模块架构\" class=\"headerlink\" title=\"1.1 Nginx模块架构\"></a>1.1 Nginx模块架构</h3><p>Nginx 由内核和模块组成。Nginx 的模块从结构上分为<code>核心模块</code>、<code>基础模块</code>和<code>第三方模块</code>。</p>\n<ul>\n<li><strong>核心模块</strong>：HTTP 模块、 EVENT 模块和 MAIL 模块</li>\n<li><strong>基础模块</strong>： HTTP Access 模块、HTTP FastCGI 模块、HTTP Proxy 模块和 HTTP Rewrite模块</li>\n<li><strong>第三方模块</strong>：HTTP Upstream Request Hash 模块、 Notice 模块和 HTTP Access Key模块 </li>\n</ul>\n<h3 id=\"1-2-Nignx与Appache\"><a href=\"#1-2-Nignx与Appache\" class=\"headerlink\" title=\"1.2 Nignx与Appache\"></a>1.2 Nignx与Appache</h3><p><code>Nginx</code>的高并发得益于其采用了<code>epoll</code>模型，与传统的服务器程序架构不同<code>epoll</code> 是<code>linux内核2.6</code>以后才出现的。</p>\n<p><strong><code>Nginx</code>采用<code>epoll</code>模型，异步非阻塞，而<code>Apache</code>采用的是<code>select 模型</code> </strong>。</p>\n<ul>\n<li><strong>Select模型</strong>：select 选择句柄的时候是遍历所有句柄，也就是说句柄有事件响应时，select 需要遍历所有句柄才能获取到哪些句柄有事件通知，因此效率是非常低。</li>\n<li><strong>epoll 模型</strong>：epoll对于句柄事件的选择不是遍历的，是事件响应的，就是句柄上事件来就马上选择出来，不需要遍历整个句柄链表，因此效率非常高。</li>\n</ul>\n<h2 id=\"2-安装\"><a href=\"#2-安装\" class=\"headerlink\" title=\"2. 安装\"></a>2. 安装</h2><p>注：这里用的是<code>CentOS 7</code></p>\n<h3 id=\"2-1-安装包下载\"><a href=\"#2-1-安装包下载\" class=\"headerlink\" title=\"2.1 安装包下载\"></a>2.1 安装包下载</h3><p>官网：<code>http://nginx.org/en/download.html</code> 这里下载的时<code>nginx-1.15.9.tar.gz</code></p>\n<p>上传到服务器上，这里放在了<code>usr/software</code>目录下</p>\n<h3 id=\"2-2-环境准备\"><a href=\"#2-2-环境准备\" class=\"headerlink\" title=\"2.2 环境准备\"></a>2.2 环境准备</h3><p><strong>安装编译源码所需要的工具和库</strong>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># yum install gcc gcc-c++ ncurses-devel perl</span><br></pre></td></tr></table></figure>\n<p><strong>安装HTTP rewrite module模块</strong>: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># yum install pcre pcre-devel</span><br></pre></td></tr></table></figure>\n<p><strong>安装HTTP zlib模块</strong>: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># yum install zlib gzip zlib-devel</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-编译安装\"><a href=\"#2-3-编译安装\" class=\"headerlink\" title=\"2.3 编译安装\"></a>2.3 编译安装</h3><p><strong>解压</strong>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost software]# tar -zxvf nginx-1.15.9.tar.gz -C /usr/local</span><br><span class=\"line\">//解压到/usr/local目录下</span><br></pre></td></tr></table></figure>\n<p><strong>配置</strong>:</p>\n<p>进行configure配置，检查是否报错。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost nginx-1.15.9]# ./configure --prefix=/usr/local/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">//出现下面的配置摘要就算配置ok</span><br><span class=\"line\">Configuration summary</span><br><span class=\"line\">  + using system PCRE library</span><br><span class=\"line\">  + OpenSSL library is not used</span><br><span class=\"line\">  + using system zlib library</span><br><span class=\"line\"></span><br><span class=\"line\">  nginx path prefix: &quot;/usr/local/nginx&quot;</span><br><span class=\"line\">  nginx binary file: &quot;/usr/local/nginx/sbin/nginx&quot;</span><br><span class=\"line\">  .....</span><br><span class=\"line\">  nginx http uwsgi temporary files: &quot;uwsgi_temp&quot;</span><br><span class=\"line\">  nginx http scgi temporary files: &quot;scgi_temp&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>编译安装</strong>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost nginx-1.15.9]# make&amp;&amp;make install</span><br><span class=\"line\"></span><br><span class=\"line\">//出现下面的提示就算编译安装ok</span><br><span class=\"line\">make[1]: Leaving directory `/usr/local/nginx-1.15.9&apos;</span><br></pre></td></tr></table></figure>\n<p>编译安装后多了一个<code></code>Nginx<code>文件夹,在</code>/usr/local/nginx` 内部又分为四个目录</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/nginx</span><br><span class=\"line\">\t\t\t--conf\t配置文件</span><br><span class=\"line\">\t\t\t--html  网页文件</span><br><span class=\"line\">\t\t\t--logs  日志文件</span><br><span class=\"line\">\t\t\t--sbin  主要二进制文件</span><br></pre></td></tr></table></figure>\n<p><strong>查看Nginx版本:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost nginx]# /usr/local/nginx/sbin/nginx -v</span><br><span class=\"line\">nginx version: nginx/1.15.9</span><br><span class=\"line\">//这里是Nginx 1.15.9</span><br></pre></td></tr></table></figure>\n<p>到这里<code></code>Nginx`安装就结束了。</p>\n<h2 id=\"3-基本操作\"><a href=\"#3-基本操作\" class=\"headerlink\" title=\"3. 基本操作\"></a>3. 基本操作</h2><h3 id=\"3-1-启动\"><a href=\"#3-1-启动\" class=\"headerlink\" title=\"3.1 启动\"></a>3.1 启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost sbin]# /usr/local/nginx/sbin/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">//这里如果没有报错就说明启动成功了</span><br></pre></td></tr></table></figure>\n<p>查看</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost sbin]# ps aux|grep nginx</span><br><span class=\"line\">root      98830  0.0  0.0  20552   616 ?        Ss   09:57   0:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nobody    98831  0.0  0.1  23088  1392 ?        S    09:57   0:00 nginx: worker process</span><br><span class=\"line\">root      98839  0.0  0.0 112708   976 pts/1    R+   09:57   0:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure>\n<p>可以看到Nginx有两个进程，一个<code>master进程</code>一个<code>worker进程</code>.</p>\n<p>同时浏览器已经可以访问了:直接访问IP地址即可<code>http://192.168.5.154/</code></p>\n<p>显示如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Welcome to nginx!</span><br><span class=\"line\">If you see <span class=\"keyword\">this</span> page, the nginx web server is successfully installed and working. Further configuration is required.</span><br><span class=\"line\"></span><br><span class=\"line\">For online documentation and support please refer to nginx.org.</span><br><span class=\"line\">Commercial support is available at nginx.com.</span><br><span class=\"line\"></span><br><span class=\"line\">Thank you <span class=\"keyword\">for</span> using nginx.</span><br></pre></td></tr></table></figure>\n<p>说明<code>Nginx</code>确实已经启动了。</p>\n<h3 id=\"3-2-常用命令\"><a href=\"#3-2-常用命令\" class=\"headerlink\" title=\"3.2 常用命令\"></a>3.2 常用命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost sbin]# /usr/local/nginx/sbin/nginx -s reload   # 重新载入配置文件</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost sbin]# /usr/local/nginx/sbin/nginx -s reopen   # 重启 Nginx</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost sbin]# /usr/local/nginx/sbin/nginx -s stop     # 停止 Nginx</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4. 参考\"></a>4. 参考</h2><p><code>http://www.runoob.com/linux/nginx-install-setup.html</code></p>"},{"title":"Nginx入门教程(二)---配置文件详解","abbrlink":"5a0a337e","date":"2019-03-02T14:00:00.000Z","_content":"\n本章主要对Nginx服务器的常用配置文件，包括虚拟主机配置，location配置级语法等。\n\n<!-- more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n软件统一放在`/usr/software`下 解压后放在单独的文件夹下`/usr/local/java`/`/usr/local/mysql`\n\n## 1. 虚拟主机配置\n\n在前面启动Nignx后，Nginx目录下会多出几个文件夹\n\n```nginx\n/usr/local/nginx\n\t\t\t--conf\t配置文件\n\t\t\t--html  网页文件\n\t\t\t--logs  日志文件\n\t\t\t--sbin  主要二进制文件\n\n\t\t\t--client_body_temp\n\t\t\t--fastcgi_temp\n\t\t\t--proxy_temp\n\t\t\t--scgi_temp\n\t\t\t--uwsgi_temp\n```\n\n不过这些`temp`文件夹都不是重点。\n\n### 1.1 配置文件\n\n这里讲解一下`conf`里的配置文件，有很多配置文件，重点看` nginx.conf`.\n\n```nginx\n/usr/local/nginx/conf\n\t\t-- fastcgi.conf\n\t\t-- fastcgi.conf.default\n \t\t-- fastcgi_params\n\t\t-- fastcgi_params.default\n\t\t-- koi-utf\n \t\t-- koi-win\n \t\t-- mime.types\n \t\t-- mime.types.default\n \t\t-- nginx.conf  # 重点关心这个\n \t\t-- nginx.conf.default\n\t\t-- scgi_params\n\t\t-- scgi_params.default\n \t\t-- uwsgi_params\n\t\t-- uwsgi_params.default\n \t\t--win-utf\n```\n\n### 1.2 nginx.conf\n\n看一下默认的`nginx.conf`\n\n```nginx\n[root@localhost conf]# vim nginx.conf\n//默认配置如下：\n\n#可以指定用户 不过无所谓\n#user  nobody;   \n\n#nginx工作进程,一般设置为和cpu核数一样\nworker_processes  1; \n\n#错误日志存放目录 \n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#进程pid存放位置\n#pid        logs/nginx.pid;\n\n\nevents {\n    # 单个CPU最大连接数\n    worker_connections  1024;\n}\n\n# http 这里重点\nhttp {\n    #文件扩展名与类型映射表\n    include       mime.types;\n    \n    #默认文件类型\n    default_type  application/octet-stream;\n    \n\t#设置日志模式\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n    \n  \t#开启高效传输模式  \n    sendfile        on;\n    \n    # 激活tcp_nopush参数可以允许把httpresponse header和文件的开始放在一个文件里发布\n    # 积极的作用是减少网络报文段的数量\n    #tcp_nopush     on;\n    \n\t#连接超时时间，单位是秒\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n    \n    #开启gzip压缩功能\n    #gzip  on;\n    \n\t#基于域名的虚拟主机\n    server {\n        #监听端口\n        listen       80;\n        #域名\n        server_name  localhost;\n        #字符集\n\t    #charset koi8-r;\n         \n\t    #nginx访问日志 这里的main就是上面配置的那个log_format  main \n        #access_log  logs/host.access.log  main;\n        \n\t    #location 标签\n        #这里的/表示匹配根目录下的/目录\n        location / {\n            #站点根目录，即网站程序存放目录\n\t\t   #就是上面的四个文件夹中的html文件夹\n            root   html;\n            #首页排序 默认找index.html 没有在找index.htm\n            index  index.html index.htm;\n        }\n\t    # 错误页面\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #错误页面 错误码为500 502 503 504时 重定向到50x.html\n        error_page   500 502 503 504  /50x.html;\n\t    #location 标签\n        #这里的表示匹配根目录下的/50x.html\n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache's document root\n  # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n\n```\n\n### 1.3 基本配置\n\n上面的配置文件好像挺长的，其实最重要的就那么几个。\n\n```nginx\nhttp{\n    keepalive_timeout  65;\n    server{\n        listen 80; //端口号\n        server_name localhost; //域名\n        location \\ {\n            root html; //网站根目录\n            index index.html; //网站首页\n        }  \n        access_log  logs/host.access.log  main; //访问日志\n        error page 500 error.html; //错误页面\n    }\n}\n```\n\n## 2. location\n\n### 2.1 简介\n\n`nginx.conf`大概内容如下：\n\n```java\nhttp{\n    keepalive_timeout  65;\n    server{\n        listen 80; //端口号\n        server_name localhost; //域名\n        location \\ {\n            root html; //网站根目录\n            index index.html; //网站首页\n        }  \n        access_log  logs/host.access.log  main; //访问日志\n        error page 500 error.html; //错误页面\n    }\n}\n```\n\n其中`server`代表虚拟主机，一个虚拟主机可以配置多个`location`\n\n`location`表示uri方法定位\n\n基本语法如下：\n\n- 1.location=pattern{} 静准匹配\n- 2.location pattern{} 一般匹配\n- 3.location~pattern{} 正则匹配\n\n**Nginx可以对数据进行压缩，对一些图片、css、js、html等文件进行缓存，从而实现动静分离等待优化功能**。\n\n**动态的就去访问tomcat服务器，静态的就直接访问Nginx服务器**。\n\n**基本语法**：\n\n```nginx\nlocation [=|~|~*|^~|@] /uri/ {\n    ....\n}\n```\n\n〖=〗 表示精确匹配，如果找到，立即停止搜索并立即处理此请求。\n〖~ 〗 表示区分大小写匹配\n〖~*〗 表示不区分大小写匹配\n〖^~ 〗 表示只匹配字符串,不查询正则表达式。\n\n〖@〗 指定一个命名的location，一般只用于内部重定向请求。\n\n### 2.2 正则表达式\n\n1.语法格式：\n\n```nginx\nlocation [=|~|~*|^~|@]   /uri/ {\n    .....\n}\n```\n\n1.依据不同的前缀`=`，`^~`,`~ `，`~*` ”和`不带任何前缀`(因为[ ] 表示可选，可以不要的)表达不同的含义。\n 简单的说尽管location 的/uri/ 配置一样，但前缀不一样，表达的是不同的指令含义。\n**注意：查询字符串不在URI范围内。例如：/films.htm?fid=123 的URI 是/films.htm**。\n\n2.对这些不同前缀，分下类，就2 大类：\n\n*  **正则location** : `~ `和`~*`前缀表示正则location ，`~ `区分大小写，`~* `不区分大小写。\n* **普通location** : `=`，`^~ `和`@ `和  ` 无任何前缀`, 都属于普通location 。\n\n**详细说明**：\n\n* **~**  : 区分大小写匹配\n\n* **~*** : 不区分大小写匹配\n\n* **!~** :  区分大小写不匹配\n* **!~*** : 不区分大小写不匹配\n\n* **^** : 以什么开头的匹配\n\n* **$** : 以什么结尾的匹配\n* ***** : 代表任意字符\n\n## 3. 参考\n\n`http://www.runoob.com/linux/nginx-install-setup.html`","source":"_posts/nginx/two-conf.md","raw":"---\ntitle: Nginx入门教程(二)---配置文件详解\ntags:\n  - Nginx\ncategories:\n  - Nginx\nabbrlink: 5a0a337e\ndate: 2019-03-02 22:00:00\n---\n\n本章主要对Nginx服务器的常用配置文件，包括虚拟主机配置，location配置级语法等。\n\n<!-- more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n软件统一放在`/usr/software`下 解压后放在单独的文件夹下`/usr/local/java`/`/usr/local/mysql`\n\n## 1. 虚拟主机配置\n\n在前面启动Nignx后，Nginx目录下会多出几个文件夹\n\n```nginx\n/usr/local/nginx\n\t\t\t--conf\t配置文件\n\t\t\t--html  网页文件\n\t\t\t--logs  日志文件\n\t\t\t--sbin  主要二进制文件\n\n\t\t\t--client_body_temp\n\t\t\t--fastcgi_temp\n\t\t\t--proxy_temp\n\t\t\t--scgi_temp\n\t\t\t--uwsgi_temp\n```\n\n不过这些`temp`文件夹都不是重点。\n\n### 1.1 配置文件\n\n这里讲解一下`conf`里的配置文件，有很多配置文件，重点看` nginx.conf`.\n\n```nginx\n/usr/local/nginx/conf\n\t\t-- fastcgi.conf\n\t\t-- fastcgi.conf.default\n \t\t-- fastcgi_params\n\t\t-- fastcgi_params.default\n\t\t-- koi-utf\n \t\t-- koi-win\n \t\t-- mime.types\n \t\t-- mime.types.default\n \t\t-- nginx.conf  # 重点关心这个\n \t\t-- nginx.conf.default\n\t\t-- scgi_params\n\t\t-- scgi_params.default\n \t\t-- uwsgi_params\n\t\t-- uwsgi_params.default\n \t\t--win-utf\n```\n\n### 1.2 nginx.conf\n\n看一下默认的`nginx.conf`\n\n```nginx\n[root@localhost conf]# vim nginx.conf\n//默认配置如下：\n\n#可以指定用户 不过无所谓\n#user  nobody;   \n\n#nginx工作进程,一般设置为和cpu核数一样\nworker_processes  1; \n\n#错误日志存放目录 \n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#进程pid存放位置\n#pid        logs/nginx.pid;\n\n\nevents {\n    # 单个CPU最大连接数\n    worker_connections  1024;\n}\n\n# http 这里重点\nhttp {\n    #文件扩展名与类型映射表\n    include       mime.types;\n    \n    #默认文件类型\n    default_type  application/octet-stream;\n    \n\t#设置日志模式\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n    \n  \t#开启高效传输模式  \n    sendfile        on;\n    \n    # 激活tcp_nopush参数可以允许把httpresponse header和文件的开始放在一个文件里发布\n    # 积极的作用是减少网络报文段的数量\n    #tcp_nopush     on;\n    \n\t#连接超时时间，单位是秒\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n    \n    #开启gzip压缩功能\n    #gzip  on;\n    \n\t#基于域名的虚拟主机\n    server {\n        #监听端口\n        listen       80;\n        #域名\n        server_name  localhost;\n        #字符集\n\t    #charset koi8-r;\n         \n\t    #nginx访问日志 这里的main就是上面配置的那个log_format  main \n        #access_log  logs/host.access.log  main;\n        \n\t    #location 标签\n        #这里的/表示匹配根目录下的/目录\n        location / {\n            #站点根目录，即网站程序存放目录\n\t\t   #就是上面的四个文件夹中的html文件夹\n            root   html;\n            #首页排序 默认找index.html 没有在找index.htm\n            index  index.html index.htm;\n        }\n\t    # 错误页面\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #错误页面 错误码为500 502 503 504时 重定向到50x.html\n        error_page   500 502 503 504  /50x.html;\n\t    #location 标签\n        #这里的表示匹配根目录下的/50x.html\n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache's document root\n  # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n\n```\n\n### 1.3 基本配置\n\n上面的配置文件好像挺长的，其实最重要的就那么几个。\n\n```nginx\nhttp{\n    keepalive_timeout  65;\n    server{\n        listen 80; //端口号\n        server_name localhost; //域名\n        location \\ {\n            root html; //网站根目录\n            index index.html; //网站首页\n        }  \n        access_log  logs/host.access.log  main; //访问日志\n        error page 500 error.html; //错误页面\n    }\n}\n```\n\n## 2. location\n\n### 2.1 简介\n\n`nginx.conf`大概内容如下：\n\n```java\nhttp{\n    keepalive_timeout  65;\n    server{\n        listen 80; //端口号\n        server_name localhost; //域名\n        location \\ {\n            root html; //网站根目录\n            index index.html; //网站首页\n        }  \n        access_log  logs/host.access.log  main; //访问日志\n        error page 500 error.html; //错误页面\n    }\n}\n```\n\n其中`server`代表虚拟主机，一个虚拟主机可以配置多个`location`\n\n`location`表示uri方法定位\n\n基本语法如下：\n\n- 1.location=pattern{} 静准匹配\n- 2.location pattern{} 一般匹配\n- 3.location~pattern{} 正则匹配\n\n**Nginx可以对数据进行压缩，对一些图片、css、js、html等文件进行缓存，从而实现动静分离等待优化功能**。\n\n**动态的就去访问tomcat服务器，静态的就直接访问Nginx服务器**。\n\n**基本语法**：\n\n```nginx\nlocation [=|~|~*|^~|@] /uri/ {\n    ....\n}\n```\n\n〖=〗 表示精确匹配，如果找到，立即停止搜索并立即处理此请求。\n〖~ 〗 表示区分大小写匹配\n〖~*〗 表示不区分大小写匹配\n〖^~ 〗 表示只匹配字符串,不查询正则表达式。\n\n〖@〗 指定一个命名的location，一般只用于内部重定向请求。\n\n### 2.2 正则表达式\n\n1.语法格式：\n\n```nginx\nlocation [=|~|~*|^~|@]   /uri/ {\n    .....\n}\n```\n\n1.依据不同的前缀`=`，`^~`,`~ `，`~*` ”和`不带任何前缀`(因为[ ] 表示可选，可以不要的)表达不同的含义。\n 简单的说尽管location 的/uri/ 配置一样，但前缀不一样，表达的是不同的指令含义。\n**注意：查询字符串不在URI范围内。例如：/films.htm?fid=123 的URI 是/films.htm**。\n\n2.对这些不同前缀，分下类，就2 大类：\n\n*  **正则location** : `~ `和`~*`前缀表示正则location ，`~ `区分大小写，`~* `不区分大小写。\n* **普通location** : `=`，`^~ `和`@ `和  ` 无任何前缀`, 都属于普通location 。\n\n**详细说明**：\n\n* **~**  : 区分大小写匹配\n\n* **~*** : 不区分大小写匹配\n\n* **!~** :  区分大小写不匹配\n* **!~*** : 不区分大小写不匹配\n\n* **^** : 以什么开头的匹配\n\n* **$** : 以什么结尾的匹配\n* ***** : 代表任意字符\n\n## 3. 参考\n\n`http://www.runoob.com/linux/nginx-install-setup.html`","slug":"nginx/two-conf","published":1,"updated":"2019-03-04T14:54:12.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv45g001x0ww418w8sry5","content":"<p>本章主要对Nginx服务器的常用配置文件，包括虚拟主机配置，location配置级语法等。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<p>软件统一放在<code>/usr/software</code>下 解压后放在单独的文件夹下<code>/usr/local/java</code>/<code>/usr/local/mysql</code></p>\n<h2 id=\"1-虚拟主机配置\"><a href=\"#1-虚拟主机配置\" class=\"headerlink\" title=\"1. 虚拟主机配置\"></a>1. 虚拟主机配置</h2><p>在前面启动Nignx后，Nginx目录下会多出几个文件夹</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/nginx</span><br><span class=\"line\">\t\t\t--conf\t配置文件</span><br><span class=\"line\">\t\t\t--html  网页文件</span><br><span class=\"line\">\t\t\t--logs  日志文件</span><br><span class=\"line\">\t\t\t--sbin  主要二进制文件</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t--client_body_temp</span><br><span class=\"line\">\t\t\t--fastcgi_temp</span><br><span class=\"line\">\t\t\t--proxy_temp</span><br><span class=\"line\">\t\t\t--scgi_temp</span><br><span class=\"line\">\t\t\t--uwsgi_temp</span><br></pre></td></tr></table></figure>\n<p>不过这些<code>temp</code>文件夹都不是重点。</p>\n<h3 id=\"1-1-配置文件\"><a href=\"#1-1-配置文件\" class=\"headerlink\" title=\"1.1 配置文件\"></a>1.1 配置文件</h3><p>这里讲解一下<code>conf</code>里的配置文件，有很多配置文件，重点看<code>nginx.conf</code>.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/nginx/conf</span><br><span class=\"line\">\t\t-- fastcgi.conf</span><br><span class=\"line\">\t\t-- fastcgi.conf.default</span><br><span class=\"line\"> \t\t-- fastcgi_params</span><br><span class=\"line\">\t\t-- fastcgi_params.default</span><br><span class=\"line\">\t\t-- koi-utf</span><br><span class=\"line\"> \t\t-- koi-win</span><br><span class=\"line\"> \t\t-- mime.types</span><br><span class=\"line\"> \t\t-- mime.types.default</span><br><span class=\"line\"> \t\t-- nginx.conf  # 重点关心这个</span><br><span class=\"line\"> \t\t-- nginx.conf.default</span><br><span class=\"line\">\t\t-- scgi_params</span><br><span class=\"line\">\t\t-- scgi_params.default</span><br><span class=\"line\"> \t\t-- uwsgi_params</span><br><span class=\"line\">\t\t-- uwsgi_params.default</span><br><span class=\"line\"> \t\t--win-utf</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-nginx-conf\"><a href=\"#1-2-nginx-conf\" class=\"headerlink\" title=\"1.2 nginx.conf\"></a>1.2 nginx.conf</h3><p>看一下默认的<code>nginx.conf</code></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost conf]# vim nginx.conf</span><br><span class=\"line\">//默认配置如下：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#可以指定用户 不过无所谓</span></span><br><span class=\"line\"><span class=\"comment\">#user  nobody;   </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#nginx工作进程,一般设置为和cpu核数一样</span></span><br><span class=\"line\"><span class=\"attribute\">worker_processes</span>  <span class=\"number\">1</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#错误日志存放目录 </span></span><br><span class=\"line\"><span class=\"comment\">#error_log  logs/error.log;</span></span><br><span class=\"line\"><span class=\"comment\">#error_log  logs/error.log  notice;</span></span><br><span class=\"line\"><span class=\"comment\">#error_log  logs/error.log  info;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进程pid存放位置</span></span><br><span class=\"line\"><span class=\"comment\">#pid        logs/nginx.pid;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">events</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 单个CPU最大连接数</span></span><br><span class=\"line\">    <span class=\"attribute\">worker_connections</span>  <span class=\"number\">1024</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># http 这里重点</span></span><br><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">#文件扩展名与类型映射表</span></span><br><span class=\"line\">    <span class=\"attribute\">include</span>       mime.types;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#默认文件类型</span></span><br><span class=\"line\">    <span class=\"attribute\">default_type</span>  application/octet-stream;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">#设置日志模式</span></span><br><span class=\"line\">    <span class=\"comment\">#log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '</span></span><br><span class=\"line\">    <span class=\"comment\">#                  '$status $body_bytes_sent \"$http_referer\" '</span></span><br><span class=\"line\">    <span class=\"comment\">#                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#access_log  logs/access.log  main;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  \t<span class=\"comment\">#开启高效传输模式  </span></span><br><span class=\"line\">    <span class=\"attribute\">sendfile</span>        <span class=\"literal\">on</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 激活tcp_nopush参数可以允许把httpresponse header和文件的开始放在一个文件里发布</span></span><br><span class=\"line\">    <span class=\"comment\"># 积极的作用是减少网络报文段的数量</span></span><br><span class=\"line\">    <span class=\"comment\">#tcp_nopush     on;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">#连接超时时间，单位是秒</span></span><br><span class=\"line\">    <span class=\"comment\">#keepalive_timeout  0;</span></span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#开启gzip压缩功能</span></span><br><span class=\"line\">    <span class=\"comment\">#gzip  on;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">#基于域名的虚拟主机</span></span><br><span class=\"line\">    <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">#监听端口</span></span><br><span class=\"line\">        <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">        <span class=\"comment\">#域名</span></span><br><span class=\"line\">        <span class=\"attribute\">server_name</span>  localhost;</span><br><span class=\"line\">        <span class=\"comment\">#字符集</span></span><br><span class=\"line\">\t    <span class=\"comment\">#charset koi8-r;</span></span><br><span class=\"line\">         </span><br><span class=\"line\">\t    <span class=\"comment\">#nginx访问日志 这里的main就是上面配置的那个log_format  main </span></span><br><span class=\"line\">        <span class=\"comment\">#access_log  logs/host.access.log  main;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">\t    <span class=\"comment\">#location 标签</span></span><br><span class=\"line\">        <span class=\"comment\">#这里的/表示匹配根目录下的/目录</span></span><br><span class=\"line\">        <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">            <span class=\"comment\">#站点根目录，即网站程序存放目录</span></span><br><span class=\"line\">\t\t   <span class=\"comment\">#就是上面的四个文件夹中的html文件夹</span></span><br><span class=\"line\">            <span class=\"attribute\">root</span>   html;</span><br><span class=\"line\">            <span class=\"comment\">#首页排序 默认找index.html 没有在找index.htm</span></span><br><span class=\"line\">            <span class=\"attribute\">index</span>  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t    <span class=\"comment\"># 错误页面</span></span><br><span class=\"line\">        <span class=\"comment\">#error_page  404              /404.html;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># redirect server error pages to the static page /50x.html</span></span><br><span class=\"line\">        <span class=\"comment\">#错误页面 错误码为500 502 503 504时 重定向到50x.html</span></span><br><span class=\"line\">        <span class=\"attribute\">error_page</span>   <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span>  /50x.html;</span><br><span class=\"line\">\t    <span class=\"comment\">#location 标签</span></span><br><span class=\"line\">        <span class=\"comment\">#这里的表示匹配根目录下的/50x.html</span></span><br><span class=\"line\">        <span class=\"attribute\">location</span> = /50x.html &#123;</span><br><span class=\"line\">            <span class=\"attribute\">root</span>   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        <span class=\"comment\">#location ~ \\.php$ &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">#    proxy_pass   http://127.0.0.1;</span></span><br><span class=\"line\">        <span class=\"comment\">#&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        <span class=\"comment\">#location ~ \\.php$ &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">#    root           html;</span></span><br><span class=\"line\">        <span class=\"comment\">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class=\"line\">        <span class=\"comment\">#    fastcgi_index  index.php;</span></span><br><span class=\"line\">        <span class=\"comment\">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class=\"line\">        <span class=\"comment\">#    include        fastcgi_params;</span></span><br><span class=\"line\">        <span class=\"comment\">#&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># deny access to .htaccess files, if Apache's document root</span></span><br><span class=\"line\">  <span class=\"comment\"># concurs with nginx's one</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        <span class=\"comment\">#location ~ /\\.ht &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">#    deny  all;</span></span><br><span class=\"line\">        <span class=\"comment\">#&#125;</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3-基本配置\"><a href=\"#1-3-基本配置\" class=\"headerlink\" title=\"1.3 基本配置\"></a>1.3 基本配置</h3><p>上面的配置文件好像挺长的，其实最重要的就那么几个。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http&#123;</span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\">    server&#123;</span><br><span class=\"line\">        listen 80; //端口号</span><br><span class=\"line\">        server_name localhost; //域名</span><br><span class=\"line\">        <span class=\"attribute\">location</span> \\ &#123;</span><br><span class=\"line\">            root html; //网站根目录</span><br><span class=\"line\">            index index.html; //网站首页</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        access_log  logs/host.access.log  main; //访问日志</span><br><span class=\"line\">        error page 500 error.html; //错误页面</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-location\"><a href=\"#2-location\" class=\"headerlink\" title=\"2. location\"></a>2. location</h2><h3 id=\"2-1-简介\"><a href=\"#2-1-简介\" class=\"headerlink\" title=\"2.1 简介\"></a>2.1 简介</h3><p><code>nginx.conf</code>大概内容如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http&#123;</span><br><span class=\"line\">    keepalive_timeout  <span class=\"number\">65</span>;</span><br><span class=\"line\">    server&#123;</span><br><span class=\"line\">        listen <span class=\"number\">80</span>; <span class=\"comment\">//端口号</span></span><br><span class=\"line\">        server_name localhost; <span class=\"comment\">//域名</span></span><br><span class=\"line\">        location \\ &#123;</span><br><span class=\"line\">            root html; <span class=\"comment\">//网站根目录</span></span><br><span class=\"line\">            index index.html; <span class=\"comment\">//网站首页</span></span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        access_log  logs/host.access.log  main; <span class=\"comment\">//访问日志</span></span><br><span class=\"line\">        error page <span class=\"number\">500</span> error.html; <span class=\"comment\">//错误页面</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中<code>server</code>代表虚拟主机，一个虚拟主机可以配置多个<code>location</code></p>\n<p><code>location</code>表示uri方法定位</p>\n<p>基本语法如下：</p>\n<ul>\n<li>1.location=pattern{} 静准匹配</li>\n<li>2.location pattern{} 一般匹配</li>\n<li>3.location~pattern{} 正则匹配</li>\n</ul>\n<p><strong>Nginx可以对数据进行压缩，对一些图片、css、js、html等文件进行缓存，从而实现动静分离等待优化功能</strong>。</p>\n<p><strong>动态的就去访问tomcat服务器，静态的就直接访问Nginx服务器</strong>。</p>\n<p><strong>基本语法</strong>：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> [=|~|~*|^~|@] /uri/ &#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>〖=〗 表示精确匹配，如果找到，立即停止搜索并立即处理此请求。<br>〖~ 〗 表示区分大小写匹配<br>〖~*〗 表示不区分大小写匹配<br>〖^~ 〗 表示只匹配字符串,不查询正则表达式。</p>\n<p>〖@〗 指定一个命名的location，一般只用于内部重定向请求。</p>\n<h3 id=\"2-2-正则表达式\"><a href=\"#2-2-正则表达式\" class=\"headerlink\" title=\"2.2 正则表达式\"></a>2.2 正则表达式</h3><p>1.语法格式：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> [=|~|~*|^~|@]   /uri/ &#123;</span><br><span class=\"line\">    .....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>1.依据不同的前缀<code>=</code>，<code>^~</code>,<code>~</code>，<code>~*</code> ”和<code>不带任何前缀</code>(因为[ ] 表示可选，可以不要的)表达不同的含义。<br> 简单的说尽管location 的/uri/ 配置一样，但前缀不一样，表达的是不同的指令含义。<br><strong>注意：查询字符串不在URI范围内。例如：/films.htm?fid=123 的URI 是/films.htm</strong>。</p>\n<p>2.对这些不同前缀，分下类，就2 大类：</p>\n<ul>\n<li><strong>正则location</strong> : <code>~</code>和<code>~*</code>前缀表示正则location ，<code>~</code>区分大小写，<code>~*</code>不区分大小写。</li>\n<li><strong>普通location</strong> : <code>=</code>，<code>^~</code>和<code>@</code>和  <code>无任何前缀</code>, 都属于普通location 。</li>\n</ul>\n<p><strong>详细说明</strong>：</p>\n<ul>\n<li><p><strong>~</strong>  : 区分大小写匹配</p>\n</li>\n<li><p><strong>~*</strong> : 不区分大小写匹配</p>\n</li>\n<li><p><strong>!~</strong> :  区分大小写不匹配</p>\n</li>\n<li><p><strong>!~*</strong> : 不区分大小写不匹配</p>\n</li>\n<li><p><strong>^</strong> : 以什么开头的匹配</p>\n</li>\n<li><p><strong>$</strong> : 以什么结尾的匹配</p>\n</li>\n<li><strong>*</strong> : 代表任意字符</li>\n</ul>\n<h2 id=\"3-参考\"><a href=\"#3-参考\" class=\"headerlink\" title=\"3. 参考\"></a>3. 参考</h2><p><code>http://www.runoob.com/linux/nginx-install-setup.html</code></p>\n","site":{"data":{}},"excerpt":"<p>本章主要对Nginx服务器的常用配置文件，包括虚拟主机配置，location配置级语法等。</p>","more":"<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<p>软件统一放在<code>/usr/software</code>下 解压后放在单独的文件夹下<code>/usr/local/java</code>/<code>/usr/local/mysql</code></p>\n<h2 id=\"1-虚拟主机配置\"><a href=\"#1-虚拟主机配置\" class=\"headerlink\" title=\"1. 虚拟主机配置\"></a>1. 虚拟主机配置</h2><p>在前面启动Nignx后，Nginx目录下会多出几个文件夹</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/nginx</span><br><span class=\"line\">\t\t\t--conf\t配置文件</span><br><span class=\"line\">\t\t\t--html  网页文件</span><br><span class=\"line\">\t\t\t--logs  日志文件</span><br><span class=\"line\">\t\t\t--sbin  主要二进制文件</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t--client_body_temp</span><br><span class=\"line\">\t\t\t--fastcgi_temp</span><br><span class=\"line\">\t\t\t--proxy_temp</span><br><span class=\"line\">\t\t\t--scgi_temp</span><br><span class=\"line\">\t\t\t--uwsgi_temp</span><br></pre></td></tr></table></figure>\n<p>不过这些<code>temp</code>文件夹都不是重点。</p>\n<h3 id=\"1-1-配置文件\"><a href=\"#1-1-配置文件\" class=\"headerlink\" title=\"1.1 配置文件\"></a>1.1 配置文件</h3><p>这里讲解一下<code>conf</code>里的配置文件，有很多配置文件，重点看<code>nginx.conf</code>.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/nginx/conf</span><br><span class=\"line\">\t\t-- fastcgi.conf</span><br><span class=\"line\">\t\t-- fastcgi.conf.default</span><br><span class=\"line\"> \t\t-- fastcgi_params</span><br><span class=\"line\">\t\t-- fastcgi_params.default</span><br><span class=\"line\">\t\t-- koi-utf</span><br><span class=\"line\"> \t\t-- koi-win</span><br><span class=\"line\"> \t\t-- mime.types</span><br><span class=\"line\"> \t\t-- mime.types.default</span><br><span class=\"line\"> \t\t-- nginx.conf  # 重点关心这个</span><br><span class=\"line\"> \t\t-- nginx.conf.default</span><br><span class=\"line\">\t\t-- scgi_params</span><br><span class=\"line\">\t\t-- scgi_params.default</span><br><span class=\"line\"> \t\t-- uwsgi_params</span><br><span class=\"line\">\t\t-- uwsgi_params.default</span><br><span class=\"line\"> \t\t--win-utf</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-nginx-conf\"><a href=\"#1-2-nginx-conf\" class=\"headerlink\" title=\"1.2 nginx.conf\"></a>1.2 nginx.conf</h3><p>看一下默认的<code>nginx.conf</code></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost conf]# vim nginx.conf</span><br><span class=\"line\">//默认配置如下：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#可以指定用户 不过无所谓</span></span><br><span class=\"line\"><span class=\"comment\">#user  nobody;   </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#nginx工作进程,一般设置为和cpu核数一样</span></span><br><span class=\"line\"><span class=\"attribute\">worker_processes</span>  <span class=\"number\">1</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#错误日志存放目录 </span></span><br><span class=\"line\"><span class=\"comment\">#error_log  logs/error.log;</span></span><br><span class=\"line\"><span class=\"comment\">#error_log  logs/error.log  notice;</span></span><br><span class=\"line\"><span class=\"comment\">#error_log  logs/error.log  info;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进程pid存放位置</span></span><br><span class=\"line\"><span class=\"comment\">#pid        logs/nginx.pid;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">events</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 单个CPU最大连接数</span></span><br><span class=\"line\">    <span class=\"attribute\">worker_connections</span>  <span class=\"number\">1024</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># http 这里重点</span></span><br><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">#文件扩展名与类型映射表</span></span><br><span class=\"line\">    <span class=\"attribute\">include</span>       mime.types;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#默认文件类型</span></span><br><span class=\"line\">    <span class=\"attribute\">default_type</span>  application/octet-stream;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">#设置日志模式</span></span><br><span class=\"line\">    <span class=\"comment\">#log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '</span></span><br><span class=\"line\">    <span class=\"comment\">#                  '$status $body_bytes_sent \"$http_referer\" '</span></span><br><span class=\"line\">    <span class=\"comment\">#                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#access_log  logs/access.log  main;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  \t<span class=\"comment\">#开启高效传输模式  </span></span><br><span class=\"line\">    <span class=\"attribute\">sendfile</span>        <span class=\"literal\">on</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 激活tcp_nopush参数可以允许把httpresponse header和文件的开始放在一个文件里发布</span></span><br><span class=\"line\">    <span class=\"comment\"># 积极的作用是减少网络报文段的数量</span></span><br><span class=\"line\">    <span class=\"comment\">#tcp_nopush     on;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">#连接超时时间，单位是秒</span></span><br><span class=\"line\">    <span class=\"comment\">#keepalive_timeout  0;</span></span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#开启gzip压缩功能</span></span><br><span class=\"line\">    <span class=\"comment\">#gzip  on;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">#基于域名的虚拟主机</span></span><br><span class=\"line\">    <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">#监听端口</span></span><br><span class=\"line\">        <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">        <span class=\"comment\">#域名</span></span><br><span class=\"line\">        <span class=\"attribute\">server_name</span>  localhost;</span><br><span class=\"line\">        <span class=\"comment\">#字符集</span></span><br><span class=\"line\">\t    <span class=\"comment\">#charset koi8-r;</span></span><br><span class=\"line\">         </span><br><span class=\"line\">\t    <span class=\"comment\">#nginx访问日志 这里的main就是上面配置的那个log_format  main </span></span><br><span class=\"line\">        <span class=\"comment\">#access_log  logs/host.access.log  main;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">\t    <span class=\"comment\">#location 标签</span></span><br><span class=\"line\">        <span class=\"comment\">#这里的/表示匹配根目录下的/目录</span></span><br><span class=\"line\">        <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">            <span class=\"comment\">#站点根目录，即网站程序存放目录</span></span><br><span class=\"line\">\t\t   <span class=\"comment\">#就是上面的四个文件夹中的html文件夹</span></span><br><span class=\"line\">            <span class=\"attribute\">root</span>   html;</span><br><span class=\"line\">            <span class=\"comment\">#首页排序 默认找index.html 没有在找index.htm</span></span><br><span class=\"line\">            <span class=\"attribute\">index</span>  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t    <span class=\"comment\"># 错误页面</span></span><br><span class=\"line\">        <span class=\"comment\">#error_page  404              /404.html;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># redirect server error pages to the static page /50x.html</span></span><br><span class=\"line\">        <span class=\"comment\">#错误页面 错误码为500 502 503 504时 重定向到50x.html</span></span><br><span class=\"line\">        <span class=\"attribute\">error_page</span>   <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span>  /50x.html;</span><br><span class=\"line\">\t    <span class=\"comment\">#location 标签</span></span><br><span class=\"line\">        <span class=\"comment\">#这里的表示匹配根目录下的/50x.html</span></span><br><span class=\"line\">        <span class=\"attribute\">location</span> = /50x.html &#123;</span><br><span class=\"line\">            <span class=\"attribute\">root</span>   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        <span class=\"comment\">#location ~ \\.php$ &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">#    proxy_pass   http://127.0.0.1;</span></span><br><span class=\"line\">        <span class=\"comment\">#&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        <span class=\"comment\">#location ~ \\.php$ &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">#    root           html;</span></span><br><span class=\"line\">        <span class=\"comment\">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class=\"line\">        <span class=\"comment\">#    fastcgi_index  index.php;</span></span><br><span class=\"line\">        <span class=\"comment\">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class=\"line\">        <span class=\"comment\">#    include        fastcgi_params;</span></span><br><span class=\"line\">        <span class=\"comment\">#&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># deny access to .htaccess files, if Apache's document root</span></span><br><span class=\"line\">  <span class=\"comment\"># concurs with nginx's one</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        <span class=\"comment\">#location ~ /\\.ht &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">#    deny  all;</span></span><br><span class=\"line\">        <span class=\"comment\">#&#125;</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3-基本配置\"><a href=\"#1-3-基本配置\" class=\"headerlink\" title=\"1.3 基本配置\"></a>1.3 基本配置</h3><p>上面的配置文件好像挺长的，其实最重要的就那么几个。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http&#123;</span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\">    server&#123;</span><br><span class=\"line\">        listen 80; //端口号</span><br><span class=\"line\">        server_name localhost; //域名</span><br><span class=\"line\">        <span class=\"attribute\">location</span> \\ &#123;</span><br><span class=\"line\">            root html; //网站根目录</span><br><span class=\"line\">            index index.html; //网站首页</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        access_log  logs/host.access.log  main; //访问日志</span><br><span class=\"line\">        error page 500 error.html; //错误页面</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-location\"><a href=\"#2-location\" class=\"headerlink\" title=\"2. location\"></a>2. location</h2><h3 id=\"2-1-简介\"><a href=\"#2-1-简介\" class=\"headerlink\" title=\"2.1 简介\"></a>2.1 简介</h3><p><code>nginx.conf</code>大概内容如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http&#123;</span><br><span class=\"line\">    keepalive_timeout  <span class=\"number\">65</span>;</span><br><span class=\"line\">    server&#123;</span><br><span class=\"line\">        listen <span class=\"number\">80</span>; <span class=\"comment\">//端口号</span></span><br><span class=\"line\">        server_name localhost; <span class=\"comment\">//域名</span></span><br><span class=\"line\">        location \\ &#123;</span><br><span class=\"line\">            root html; <span class=\"comment\">//网站根目录</span></span><br><span class=\"line\">            index index.html; <span class=\"comment\">//网站首页</span></span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        access_log  logs/host.access.log  main; <span class=\"comment\">//访问日志</span></span><br><span class=\"line\">        error page <span class=\"number\">500</span> error.html; <span class=\"comment\">//错误页面</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中<code>server</code>代表虚拟主机，一个虚拟主机可以配置多个<code>location</code></p>\n<p><code>location</code>表示uri方法定位</p>\n<p>基本语法如下：</p>\n<ul>\n<li>1.location=pattern{} 静准匹配</li>\n<li>2.location pattern{} 一般匹配</li>\n<li>3.location~pattern{} 正则匹配</li>\n</ul>\n<p><strong>Nginx可以对数据进行压缩，对一些图片、css、js、html等文件进行缓存，从而实现动静分离等待优化功能</strong>。</p>\n<p><strong>动态的就去访问tomcat服务器，静态的就直接访问Nginx服务器</strong>。</p>\n<p><strong>基本语法</strong>：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> [=|~|~*|^~|@] /uri/ &#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>〖=〗 表示精确匹配，如果找到，立即停止搜索并立即处理此请求。<br>〖~ 〗 表示区分大小写匹配<br>〖~*〗 表示不区分大小写匹配<br>〖^~ 〗 表示只匹配字符串,不查询正则表达式。</p>\n<p>〖@〗 指定一个命名的location，一般只用于内部重定向请求。</p>\n<h3 id=\"2-2-正则表达式\"><a href=\"#2-2-正则表达式\" class=\"headerlink\" title=\"2.2 正则表达式\"></a>2.2 正则表达式</h3><p>1.语法格式：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> [=|~|~*|^~|@]   /uri/ &#123;</span><br><span class=\"line\">    .....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>1.依据不同的前缀<code>=</code>，<code>^~</code>,<code>~</code>，<code>~*</code> ”和<code>不带任何前缀</code>(因为[ ] 表示可选，可以不要的)表达不同的含义。<br> 简单的说尽管location 的/uri/ 配置一样，但前缀不一样，表达的是不同的指令含义。<br><strong>注意：查询字符串不在URI范围内。例如：/films.htm?fid=123 的URI 是/films.htm</strong>。</p>\n<p>2.对这些不同前缀，分下类，就2 大类：</p>\n<ul>\n<li><strong>正则location</strong> : <code>~</code>和<code>~*</code>前缀表示正则location ，<code>~</code>区分大小写，<code>~*</code>不区分大小写。</li>\n<li><strong>普通location</strong> : <code>=</code>，<code>^~</code>和<code>@</code>和  <code>无任何前缀</code>, 都属于普通location 。</li>\n</ul>\n<p><strong>详细说明</strong>：</p>\n<ul>\n<li><p><strong>~</strong>  : 区分大小写匹配</p>\n</li>\n<li><p><strong>~*</strong> : 不区分大小写匹配</p>\n</li>\n<li><p><strong>!~</strong> :  区分大小写不匹配</p>\n</li>\n<li><p><strong>!~*</strong> : 不区分大小写不匹配</p>\n</li>\n<li><p><strong>^</strong> : 以什么开头的匹配</p>\n</li>\n<li><p><strong>$</strong> : 以什么结尾的匹配</p>\n</li>\n<li><strong>*</strong> : 代表任意字符</li>\n</ul>\n<h2 id=\"3-参考\"><a href=\"#3-参考\" class=\"headerlink\" title=\"3. 参考\"></a>3. 参考</h2><p><code>http://www.runoob.com/linux/nginx-install-setup.html</code></p>"},{"title":"Android平台自动发送邮件demo","abbrlink":"9a79dc9b","date":"2018-12-25T14:00:00.000Z","_content":"\n一个Android平台自动发送邮件的小demo，记录了一下实现的过程。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 导包\n\n使用邮件发送功能,需要导入3个jar包.\n\n```java\nadditional.jar\nmail.jar\nactivation.jar\n\n//用的是AndroidStudio\n //1.切换到Project视图\n //2.将这3个jar包放到app下的lib文件夹中\n //3.选择这个三个jar包右键 Add As Library\n //4.如果导入成功 在Module 的build.gradle中就能看到这个 和平常引入第三方库一样\n    implementation files('libs/activation.jar')\n    implementation files('libs/additionnal.jar')\n    implementation files('libs/mail.jar')\n```\n\n## 2. 创建Helper工具类\n\n```java\npackage lillusory.com.androidemail;\n\nimport android.os.AsyncTask;\nimport android.util.Log;\n\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Properties;\n\nimport javax.activation.CommandMap;\nimport javax.activation.MailcapCommandMap;\nimport javax.mail.Authenticator;\nimport javax.mail.Message;\nimport javax.mail.Multipart;\nimport javax.mail.PasswordAuthentication;\nimport javax.mail.Session;\nimport javax.mail.Transport;\nimport javax.mail.internet.InternetAddress;\nimport javax.mail.internet.MimeBodyPart;\nimport javax.mail.internet.MimeMessage;\nimport javax.mail.internet.MimeMultipart;\n\npublic class MyEmailHelper {\n    private static final String TAG = MyEmailHelper.class.getSimpleName();\n    private int port = 25;  //smtp协议使用的端口\n    private String host = \"smtp.163.com\"; // 发件人邮件服务器\n    //TODO 需要改成自己的账号和授权密码\n    private String user = \"xxx@163.com\";   // 使用者账号\n    private String password = \"xxx\"; //使用者SMTP授权密码\n    private List<String> emailTos;\n    private List<String> emailCCs;\n    private String title;\n    private String context;\n    private List<String> paths;\n\n    public enum SendStatus {\n        SENDING, UNDO, SENDOK, SENDFAIL, BADCONTEXT\n    }\n\n    private SendStatus sendStatus;\n\n    public interface EmailInfterface {\n        void startSend();\n\n        void SendStatus(SendStatus sendStatus);\n    }\n\n    private EmailInfterface EmailInfterface;\n\n    public void setJieEmailInfterface(EmailInfterface EmailInfterface) {\n        this.EmailInfterface = EmailInfterface;\n    }\n\n\n    public MyEmailHelper() {\n        sendStatus = SendStatus.UNDO;\n    }\n\n    //构造发送邮件帐户的服务器，端口，帐户，密码\n    public MyEmailHelper(String host, int port, String user, String password) {\n        this.port = port;\n        this.user = user;\n        this.password = password;\n        this.host = host;\n        sendStatus = SendStatus.UNDO;\n    }\n\n    /**\n     * @param emailTos 主要接收人的电子邮箱列表\n     * @param emailCCs 抄送人的电子邮箱列表\n     * @param title    邮件标题\n     * @param context  正文内容\n     * @param paths    发送的附件路径集合\n     */\n    public void setParams(List<String> emailTos, List<String> emailCCs, String title, String context,\n                          List<String> paths) {\n        this.emailTos = emailTos;\n        this.emailCCs = emailCCs;\n        this.title = title;\n        this.context = context;\n        this.paths = paths;\n    }\n\n    public void sendEmail() {\n        new MyAsynTask().execute();\n    }\n\n    private void sendEmailBg() throws Exception {\n        Properties properties = new Properties();\n        properties.put(\"mail.smtp.host\", host);\n        properties.put(\"mail.smtp.port\", port);\n        properties.put(\"mail.smtp.auth\", \"true\");//true一定要加引号\n        properties.put(\"mail.transport.protocol\", \"smtp\");\n\n        MyAuthenticator jieAuth = new MyAuthenticator(user, password);\n\n        Session session = Session.getInstance(properties, jieAuth);\n        //创建一个消息\n        MimeMessage msg = new MimeMessage(session);\n\n        //设置发送人\n        msg.setFrom(new InternetAddress(user));\n\n        //设置主要接收人\n        if (emailTos != null && !emailTos.isEmpty()) {\n            int size = emailTos.size();\n            InternetAddress[] addresses = new InternetAddress[size];\n            for (int i = 0; i < size; i++) {\n                addresses[i] = new InternetAddress(emailTos.get(i));\n            }\n            msg.setRecipients(Message.RecipientType.TO, addresses);\n        }\n\n        //设置抄送人的电子邮件\n        if (emailCCs != null && !emailCCs.isEmpty()) {\n            int size = emailCCs.size();\n            InternetAddress[] addresses = new InternetAddress[size];\n            for (int i = 0; i < size; i++) {\n                addresses[i] = new InternetAddress(emailCCs.get(i));\n            }\n            msg.setRecipients(Message.RecipientType.CC, addresses);\n        }\n\n        msg.setSubject(title);\n\n        //创建一个消息体\n        MimeBodyPart msgBodyPart = new MimeBodyPart();\n        msgBodyPart.setText(context);\n\n        //创建Multipart增加其他的parts\n        Multipart mp = new MimeMultipart();\n        mp.addBodyPart(msgBodyPart);\n\n        //创建文件附件\n        if (paths != null) {\n            for (String path : paths) {\n                MimeBodyPart fileBodyPart = new MimeBodyPart();\n                fileBodyPart.attachFile(path);\n                mp.addBodyPart(fileBodyPart);\n            }\n        }\n        //增加Multipart到消息体中\n        msg.setContent(mp);\n        //设置日期\n        msg.setSentDate(new Date());\n        //设置附件格式\n        MailcapCommandMap mc = (MailcapCommandMap) CommandMap.getDefaultCommandMap();\n        mc.addMailcap(\"text/html;; x-java-content-handler=com.sun.mail.handlers.text_html\");\n        mc.addMailcap(\"text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml\");\n        mc.addMailcap(\"text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain\");\n        mc.addMailcap(\"multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed\");\n        mc.addMailcap(\"message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822\");\n        CommandMap.setDefaultCommandMap(mc);\n        //发送消息\n        Transport.send(msg);\n    }\n\n    class MyAuthenticator extends Authenticator {\n        private String strUser;\n        private String strPwd;\n\n        public MyAuthenticator(String user, String password) {\n            this.strUser = user;\n            this.strPwd = password;\n        }\n\n\n        protected PasswordAuthentication getPasswordAuthentication() {\n            return new PasswordAuthentication(strUser, strPwd);\n        }\n    }\n\n    class MyAsynTask extends AsyncTask<Void, Void, SendStatus> {\n\n        @Override\n        protected void onPreExecute() {\n            super.onPreExecute();\n            if (EmailInfterface != null) {\n                EmailInfterface.startSend();\n            }\n        }\n\n        @Override\n        protected void onPostExecute(SendStatus result) {\n            super.onPostExecute(result);\n            if (EmailInfterface != null) {\n                EmailInfterface.SendStatus(result);\n            }\n            sendStatus = SendStatus.UNDO;\n        }\n\n        @Override\n        protected SendStatus doInBackground(Void... params) {\n            try {\n                sendStatus = SendStatus.SENDING;\n                sendEmailBg();\n                sendStatus = SendStatus.SENDOK;\n            } catch (Exception e) {\n                String message = e.getMessage();\n                Log.v(TAG, \"邮件发送失败的原因--》\" + message);\n                SendStatus sendStatus = CheckErrorUtils.checkExcption(message);\n                e.printStackTrace();\n//                MyEmailHelper.this.sendStatus = SendStatus.SENDFAIL;\n                MyEmailHelper.this.sendStatus = sendStatus;\n            }\n            return sendStatus;\n        }\n    }\n}\n\n```\n\n## 3. 具体发送方法\n\n```java\n public void sendMail(String from, String to, String title, String context) {\n//          附件\n//        List<String> files = new ArrayList<String>();\n//        files.add(\"/mnt/sdcard/test.txt\");\n        //主要接收人的电子邮箱列表\n        List<String> toEmail = new ArrayList<String>();\n        toEmail.add(to);\n        List<String> ccEmail = new ArrayList<String>();\n        //抄送人的电子邮箱列表 抄送给自己 防止被检测为垃圾邮件\n        ccEmail.add(from);\n        helper.setParams(toEmail, ccEmail, title, context, null);\n        Log.v(TAG, \"toEmail:\" + toEmail + \" ccEmail:\" + ccEmail + \" EMAIL_TITLE_APP:\" + title + \" appEmailContext:\" + context);\n        helper.setJieEmailInfterface(new MyEmailHelper.EmailInfterface() {\n            @Override\n            public void startSend() {\n                Toast.makeText(MainActivity.this, \"邮件发送中~\", Toast.LENGTH_LONG).show();\n            }\n\n            @Override\n            public void SendStatus(MyEmailHelper.SendStatus sendStatus) {\n                switch (sendStatus) {\n                    case SENDOK:\n                        Toast.makeText(MainActivity.this, \"发送邮件成功~\", Toast.LENGTH_LONG).show();\n                        break;\n                    case SENDFAIL:\n                        Toast.makeText(MainActivity.this, \"发送邮件失败~\", Toast.LENGTH_LONG).show();\n                        break;\n                    case SENDING:\n                        Toast.makeText(MainActivity.this, \"邮件正在发送中，请稍后重试~\", Toast.LENGTH_LONG).show();\n                        break;\n                    case BADCONTEXT:\n                        Toast.makeText(MainActivity.this, \"邮件内容或标题被识别为垃圾邮件，请修改后重试~\", Toast.LENGTH_LONG).show();\n                        break;\n                }\n            }\n        });\n        helper.sendEmail();\n    }\n```\n\n## 4. 发送失败原因检查\n\n```java\npackage lillusory.com.androidemail;\n\nimport android.util.Log;\n\npublic class CheckErrorUtils {\n    public static  MyEmailHelper.SendStatus checkExcption(String message){\n        if(message.contains(\"554 DT:SPM\")){\n            //发送失败原因有很多 这个是比较常见的问题 \n            Log.v(\"Az\",\"邮件被识别为垃圾邮件了~\");\n        }\n        return MyEmailHelper.SendStatus.BADCONTEXT;\n    }\n}\n```\n\n\n\n## 5. 网络权限\n\n记得添加网络权限\n\n![picture](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/android/email-sender.png)\n\n[点击下载Demo](https://github.com/lillusory/EmailForAndroid)\n\n","source":"_posts/android/email-sender.md","raw":"---\ntitle: Android平台自动发送邮件demo\ntags:\n  - Android\ncategories:\n  - Android\nabbrlink: 9a79dc9b\ndate: 2018-12-25 22:00:00\n---\n\n一个Android平台自动发送邮件的小demo，记录了一下实现的过程。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 导包\n\n使用邮件发送功能,需要导入3个jar包.\n\n```java\nadditional.jar\nmail.jar\nactivation.jar\n\n//用的是AndroidStudio\n //1.切换到Project视图\n //2.将这3个jar包放到app下的lib文件夹中\n //3.选择这个三个jar包右键 Add As Library\n //4.如果导入成功 在Module 的build.gradle中就能看到这个 和平常引入第三方库一样\n    implementation files('libs/activation.jar')\n    implementation files('libs/additionnal.jar')\n    implementation files('libs/mail.jar')\n```\n\n## 2. 创建Helper工具类\n\n```java\npackage lillusory.com.androidemail;\n\nimport android.os.AsyncTask;\nimport android.util.Log;\n\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Properties;\n\nimport javax.activation.CommandMap;\nimport javax.activation.MailcapCommandMap;\nimport javax.mail.Authenticator;\nimport javax.mail.Message;\nimport javax.mail.Multipart;\nimport javax.mail.PasswordAuthentication;\nimport javax.mail.Session;\nimport javax.mail.Transport;\nimport javax.mail.internet.InternetAddress;\nimport javax.mail.internet.MimeBodyPart;\nimport javax.mail.internet.MimeMessage;\nimport javax.mail.internet.MimeMultipart;\n\npublic class MyEmailHelper {\n    private static final String TAG = MyEmailHelper.class.getSimpleName();\n    private int port = 25;  //smtp协议使用的端口\n    private String host = \"smtp.163.com\"; // 发件人邮件服务器\n    //TODO 需要改成自己的账号和授权密码\n    private String user = \"xxx@163.com\";   // 使用者账号\n    private String password = \"xxx\"; //使用者SMTP授权密码\n    private List<String> emailTos;\n    private List<String> emailCCs;\n    private String title;\n    private String context;\n    private List<String> paths;\n\n    public enum SendStatus {\n        SENDING, UNDO, SENDOK, SENDFAIL, BADCONTEXT\n    }\n\n    private SendStatus sendStatus;\n\n    public interface EmailInfterface {\n        void startSend();\n\n        void SendStatus(SendStatus sendStatus);\n    }\n\n    private EmailInfterface EmailInfterface;\n\n    public void setJieEmailInfterface(EmailInfterface EmailInfterface) {\n        this.EmailInfterface = EmailInfterface;\n    }\n\n\n    public MyEmailHelper() {\n        sendStatus = SendStatus.UNDO;\n    }\n\n    //构造发送邮件帐户的服务器，端口，帐户，密码\n    public MyEmailHelper(String host, int port, String user, String password) {\n        this.port = port;\n        this.user = user;\n        this.password = password;\n        this.host = host;\n        sendStatus = SendStatus.UNDO;\n    }\n\n    /**\n     * @param emailTos 主要接收人的电子邮箱列表\n     * @param emailCCs 抄送人的电子邮箱列表\n     * @param title    邮件标题\n     * @param context  正文内容\n     * @param paths    发送的附件路径集合\n     */\n    public void setParams(List<String> emailTos, List<String> emailCCs, String title, String context,\n                          List<String> paths) {\n        this.emailTos = emailTos;\n        this.emailCCs = emailCCs;\n        this.title = title;\n        this.context = context;\n        this.paths = paths;\n    }\n\n    public void sendEmail() {\n        new MyAsynTask().execute();\n    }\n\n    private void sendEmailBg() throws Exception {\n        Properties properties = new Properties();\n        properties.put(\"mail.smtp.host\", host);\n        properties.put(\"mail.smtp.port\", port);\n        properties.put(\"mail.smtp.auth\", \"true\");//true一定要加引号\n        properties.put(\"mail.transport.protocol\", \"smtp\");\n\n        MyAuthenticator jieAuth = new MyAuthenticator(user, password);\n\n        Session session = Session.getInstance(properties, jieAuth);\n        //创建一个消息\n        MimeMessage msg = new MimeMessage(session);\n\n        //设置发送人\n        msg.setFrom(new InternetAddress(user));\n\n        //设置主要接收人\n        if (emailTos != null && !emailTos.isEmpty()) {\n            int size = emailTos.size();\n            InternetAddress[] addresses = new InternetAddress[size];\n            for (int i = 0; i < size; i++) {\n                addresses[i] = new InternetAddress(emailTos.get(i));\n            }\n            msg.setRecipients(Message.RecipientType.TO, addresses);\n        }\n\n        //设置抄送人的电子邮件\n        if (emailCCs != null && !emailCCs.isEmpty()) {\n            int size = emailCCs.size();\n            InternetAddress[] addresses = new InternetAddress[size];\n            for (int i = 0; i < size; i++) {\n                addresses[i] = new InternetAddress(emailCCs.get(i));\n            }\n            msg.setRecipients(Message.RecipientType.CC, addresses);\n        }\n\n        msg.setSubject(title);\n\n        //创建一个消息体\n        MimeBodyPart msgBodyPart = new MimeBodyPart();\n        msgBodyPart.setText(context);\n\n        //创建Multipart增加其他的parts\n        Multipart mp = new MimeMultipart();\n        mp.addBodyPart(msgBodyPart);\n\n        //创建文件附件\n        if (paths != null) {\n            for (String path : paths) {\n                MimeBodyPart fileBodyPart = new MimeBodyPart();\n                fileBodyPart.attachFile(path);\n                mp.addBodyPart(fileBodyPart);\n            }\n        }\n        //增加Multipart到消息体中\n        msg.setContent(mp);\n        //设置日期\n        msg.setSentDate(new Date());\n        //设置附件格式\n        MailcapCommandMap mc = (MailcapCommandMap) CommandMap.getDefaultCommandMap();\n        mc.addMailcap(\"text/html;; x-java-content-handler=com.sun.mail.handlers.text_html\");\n        mc.addMailcap(\"text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml\");\n        mc.addMailcap(\"text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain\");\n        mc.addMailcap(\"multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed\");\n        mc.addMailcap(\"message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822\");\n        CommandMap.setDefaultCommandMap(mc);\n        //发送消息\n        Transport.send(msg);\n    }\n\n    class MyAuthenticator extends Authenticator {\n        private String strUser;\n        private String strPwd;\n\n        public MyAuthenticator(String user, String password) {\n            this.strUser = user;\n            this.strPwd = password;\n        }\n\n\n        protected PasswordAuthentication getPasswordAuthentication() {\n            return new PasswordAuthentication(strUser, strPwd);\n        }\n    }\n\n    class MyAsynTask extends AsyncTask<Void, Void, SendStatus> {\n\n        @Override\n        protected void onPreExecute() {\n            super.onPreExecute();\n            if (EmailInfterface != null) {\n                EmailInfterface.startSend();\n            }\n        }\n\n        @Override\n        protected void onPostExecute(SendStatus result) {\n            super.onPostExecute(result);\n            if (EmailInfterface != null) {\n                EmailInfterface.SendStatus(result);\n            }\n            sendStatus = SendStatus.UNDO;\n        }\n\n        @Override\n        protected SendStatus doInBackground(Void... params) {\n            try {\n                sendStatus = SendStatus.SENDING;\n                sendEmailBg();\n                sendStatus = SendStatus.SENDOK;\n            } catch (Exception e) {\n                String message = e.getMessage();\n                Log.v(TAG, \"邮件发送失败的原因--》\" + message);\n                SendStatus sendStatus = CheckErrorUtils.checkExcption(message);\n                e.printStackTrace();\n//                MyEmailHelper.this.sendStatus = SendStatus.SENDFAIL;\n                MyEmailHelper.this.sendStatus = sendStatus;\n            }\n            return sendStatus;\n        }\n    }\n}\n\n```\n\n## 3. 具体发送方法\n\n```java\n public void sendMail(String from, String to, String title, String context) {\n//          附件\n//        List<String> files = new ArrayList<String>();\n//        files.add(\"/mnt/sdcard/test.txt\");\n        //主要接收人的电子邮箱列表\n        List<String> toEmail = new ArrayList<String>();\n        toEmail.add(to);\n        List<String> ccEmail = new ArrayList<String>();\n        //抄送人的电子邮箱列表 抄送给自己 防止被检测为垃圾邮件\n        ccEmail.add(from);\n        helper.setParams(toEmail, ccEmail, title, context, null);\n        Log.v(TAG, \"toEmail:\" + toEmail + \" ccEmail:\" + ccEmail + \" EMAIL_TITLE_APP:\" + title + \" appEmailContext:\" + context);\n        helper.setJieEmailInfterface(new MyEmailHelper.EmailInfterface() {\n            @Override\n            public void startSend() {\n                Toast.makeText(MainActivity.this, \"邮件发送中~\", Toast.LENGTH_LONG).show();\n            }\n\n            @Override\n            public void SendStatus(MyEmailHelper.SendStatus sendStatus) {\n                switch (sendStatus) {\n                    case SENDOK:\n                        Toast.makeText(MainActivity.this, \"发送邮件成功~\", Toast.LENGTH_LONG).show();\n                        break;\n                    case SENDFAIL:\n                        Toast.makeText(MainActivity.this, \"发送邮件失败~\", Toast.LENGTH_LONG).show();\n                        break;\n                    case SENDING:\n                        Toast.makeText(MainActivity.this, \"邮件正在发送中，请稍后重试~\", Toast.LENGTH_LONG).show();\n                        break;\n                    case BADCONTEXT:\n                        Toast.makeText(MainActivity.this, \"邮件内容或标题被识别为垃圾邮件，请修改后重试~\", Toast.LENGTH_LONG).show();\n                        break;\n                }\n            }\n        });\n        helper.sendEmail();\n    }\n```\n\n## 4. 发送失败原因检查\n\n```java\npackage lillusory.com.androidemail;\n\nimport android.util.Log;\n\npublic class CheckErrorUtils {\n    public static  MyEmailHelper.SendStatus checkExcption(String message){\n        if(message.contains(\"554 DT:SPM\")){\n            //发送失败原因有很多 这个是比较常见的问题 \n            Log.v(\"Az\",\"邮件被识别为垃圾邮件了~\");\n        }\n        return MyEmailHelper.SendStatus.BADCONTEXT;\n    }\n}\n```\n\n\n\n## 5. 网络权限\n\n记得添加网络权限\n\n![picture](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/android/email-sender.png)\n\n[点击下载Demo](https://github.com/lillusory/EmailForAndroid)\n\n","slug":"android/email-sender","published":1,"updated":"2019-02-06T01:19:14.821Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv4a0003g0ww46xy1t3ec","content":"<p>一个Android平台自动发送邮件的小demo，记录了一下实现的过程。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-导包\"><a href=\"#1-导包\" class=\"headerlink\" title=\"1. 导包\"></a>1. 导包</h2><p>使用邮件发送功能,需要导入3个jar包.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">additional.jar</span><br><span class=\"line\">mail.jar</span><br><span class=\"line\">activation.jar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用的是AndroidStudio</span></span><br><span class=\"line\"> <span class=\"comment\">//1.切换到Project视图</span></span><br><span class=\"line\"> <span class=\"comment\">//2.将这3个jar包放到app下的lib文件夹中</span></span><br><span class=\"line\"> <span class=\"comment\">//3.选择这个三个jar包右键 Add As Library</span></span><br><span class=\"line\"> <span class=\"comment\">//4.如果导入成功 在Module 的build.gradle中就能看到这个 和平常引入第三方库一样</span></span><br><span class=\"line\">    <span class=\"function\">implementation <span class=\"title\">files</span><span class=\"params\">(<span class=\"string\">'libs/activation.jar'</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    implementation <span class=\"title\">files</span><span class=\"params\">(<span class=\"string\">'libs/additionnal.jar'</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    implementation <span class=\"title\">files</span><span class=\"params\">(<span class=\"string\">'libs/mail.jar'</span>)</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-创建Helper工具类\"><a href=\"#2-创建Helper工具类\" class=\"headerlink\" title=\"2. 创建Helper工具类\"></a>2. 创建Helper工具类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lillusory.com.androidemail;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.AsyncTask;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.activation.CommandMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.activation.MailcapCommandMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.mail.Authenticator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.mail.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.mail.Multipart;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.mail.PasswordAuthentication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.mail.Session;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.mail.Transport;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.mail.internet.InternetAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.mail.internet.MimeBodyPart;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.mail.internet.MimeMessage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.mail.internet.MimeMultipart;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyEmailHelper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = MyEmailHelper.class.getSimpleName();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> port = <span class=\"number\">25</span>;  <span class=\"comment\">//smtp协议使用的端口</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String host = <span class=\"string\">\"smtp.163.com\"</span>; <span class=\"comment\">// 发件人邮件服务器</span></span><br><span class=\"line\">    <span class=\"comment\">//TODO 需要改成自己的账号和授权密码</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String user = <span class=\"string\">\"xxx@163.com\"</span>;   <span class=\"comment\">// 使用者账号</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password = <span class=\"string\">\"xxx\"</span>; <span class=\"comment\">//使用者SMTP授权密码</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; emailTos;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; emailCCs;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String title;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String context;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; paths;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> SendStatus &#123;</span><br><span class=\"line\">        SENDING, UNDO, SENDOK, SENDFAIL, BADCONTEXT</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SendStatus sendStatus;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">EmailInfterface</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">startSend</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SendStatus</span><span class=\"params\">(SendStatus sendStatus)</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> EmailInfterface EmailInfterface;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setJieEmailInfterface</span><span class=\"params\">(EmailInfterface EmailInfterface)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.EmailInfterface = EmailInfterface;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyEmailHelper</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        sendStatus = SendStatus.UNDO;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造发送邮件帐户的服务器，端口，帐户，密码</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyEmailHelper</span><span class=\"params\">(String host, <span class=\"keyword\">int</span> port, String user, String password)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.port = port;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.user = user;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.password = password;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.host = host;</span><br><span class=\"line\">        sendStatus = SendStatus.UNDO;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> emailTos 主要接收人的电子邮箱列表</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> emailCCs 抄送人的电子邮箱列表</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> title    邮件标题</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> context  正文内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> paths    发送的附件路径集合</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setParams</span><span class=\"params\">(List&lt;String&gt; emailTos, List&lt;String&gt; emailCCs, String title, String context,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          List&lt;String&gt; paths)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.emailTos = emailTos;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.emailCCs = emailCCs;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.title = title;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.context = context;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.paths = paths;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendEmail</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> MyAsynTask().execute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sendEmailBg</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Properties properties = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">        properties.put(<span class=\"string\">\"mail.smtp.host\"</span>, host);</span><br><span class=\"line\">        properties.put(<span class=\"string\">\"mail.smtp.port\"</span>, port);</span><br><span class=\"line\">        properties.put(<span class=\"string\">\"mail.smtp.auth\"</span>, <span class=\"string\">\"true\"</span>);<span class=\"comment\">//true一定要加引号</span></span><br><span class=\"line\">        properties.put(<span class=\"string\">\"mail.transport.protocol\"</span>, <span class=\"string\">\"smtp\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        MyAuthenticator jieAuth = <span class=\"keyword\">new</span> MyAuthenticator(user, password);</span><br><span class=\"line\"></span><br><span class=\"line\">        Session session = Session.getInstance(properties, jieAuth);</span><br><span class=\"line\">        <span class=\"comment\">//创建一个消息</span></span><br><span class=\"line\">        MimeMessage msg = <span class=\"keyword\">new</span> MimeMessage(session);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置发送人</span></span><br><span class=\"line\">        msg.setFrom(<span class=\"keyword\">new</span> InternetAddress(user));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置主要接收人</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (emailTos != <span class=\"keyword\">null</span> &amp;&amp; !emailTos.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> size = emailTos.size();</span><br><span class=\"line\">            InternetAddress[] addresses = <span class=\"keyword\">new</span> InternetAddress[size];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">                addresses[i] = <span class=\"keyword\">new</span> InternetAddress(emailTos.get(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            msg.setRecipients(Message.RecipientType.TO, addresses);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置抄送人的电子邮件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (emailCCs != <span class=\"keyword\">null</span> &amp;&amp; !emailCCs.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> size = emailCCs.size();</span><br><span class=\"line\">            InternetAddress[] addresses = <span class=\"keyword\">new</span> InternetAddress[size];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">                addresses[i] = <span class=\"keyword\">new</span> InternetAddress(emailCCs.get(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            msg.setRecipients(Message.RecipientType.CC, addresses);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        msg.setSubject(title);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建一个消息体</span></span><br><span class=\"line\">        MimeBodyPart msgBodyPart = <span class=\"keyword\">new</span> MimeBodyPart();</span><br><span class=\"line\">        msgBodyPart.setText(context);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建Multipart增加其他的parts</span></span><br><span class=\"line\">        Multipart mp = <span class=\"keyword\">new</span> MimeMultipart();</span><br><span class=\"line\">        mp.addBodyPart(msgBodyPart);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建文件附件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (paths != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String path : paths) &#123;</span><br><span class=\"line\">                MimeBodyPart fileBodyPart = <span class=\"keyword\">new</span> MimeBodyPart();</span><br><span class=\"line\">                fileBodyPart.attachFile(path);</span><br><span class=\"line\">                mp.addBodyPart(fileBodyPart);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//增加Multipart到消息体中</span></span><br><span class=\"line\">        msg.setContent(mp);</span><br><span class=\"line\">        <span class=\"comment\">//设置日期</span></span><br><span class=\"line\">        msg.setSentDate(<span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">        <span class=\"comment\">//设置附件格式</span></span><br><span class=\"line\">        MailcapCommandMap mc = (MailcapCommandMap) CommandMap.getDefaultCommandMap();</span><br><span class=\"line\">        mc.addMailcap(<span class=\"string\">\"text/html;; x-java-content-handler=com.sun.mail.handlers.text_html\"</span>);</span><br><span class=\"line\">        mc.addMailcap(<span class=\"string\">\"text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml\"</span>);</span><br><span class=\"line\">        mc.addMailcap(<span class=\"string\">\"text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain\"</span>);</span><br><span class=\"line\">        mc.addMailcap(<span class=\"string\">\"multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed\"</span>);</span><br><span class=\"line\">        mc.addMailcap(<span class=\"string\">\"message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822\"</span>);</span><br><span class=\"line\">        CommandMap.setDefaultCommandMap(mc);</span><br><span class=\"line\">        <span class=\"comment\">//发送消息</span></span><br><span class=\"line\">        Transport.send(msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAuthenticator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Authenticator</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String strUser;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String strPwd;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyAuthenticator</span><span class=\"params\">(String user, String password)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.strUser = user;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.strPwd = password;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> PasswordAuthentication <span class=\"title\">getPasswordAuthentication</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PasswordAuthentication(strUser, strPwd);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAsynTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">Void</span>, <span class=\"title\">Void</span>, <span class=\"title\">SendStatus</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPreExecute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onPreExecute();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (EmailInfterface != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                EmailInfterface.startSend();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostExecute</span><span class=\"params\">(SendStatus result)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onPostExecute(result);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (EmailInfterface != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                EmailInfterface.SendStatus(result);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sendStatus = SendStatus.UNDO;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> SendStatus <span class=\"title\">doInBackground</span><span class=\"params\">(Void... params)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                sendStatus = SendStatus.SENDING;</span><br><span class=\"line\">                sendEmailBg();</span><br><span class=\"line\">                sendStatus = SendStatus.SENDOK;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                String message = e.getMessage();</span><br><span class=\"line\">                Log.v(TAG, <span class=\"string\">\"邮件发送失败的原因--》\"</span> + message);</span><br><span class=\"line\">                SendStatus sendStatus = CheckErrorUtils.checkExcption(message);</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\"><span class=\"comment\">//                MyEmailHelper.this.sendStatus = SendStatus.SENDFAIL;</span></span><br><span class=\"line\">                MyEmailHelper.<span class=\"keyword\">this</span>.sendStatus = sendStatus;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> sendStatus;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-具体发送方法\"><a href=\"#3-具体发送方法\" class=\"headerlink\" title=\"3. 具体发送方法\"></a>3. 具体发送方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendMail</span><span class=\"params\">(String from, String to, String title, String context)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//          附件</span></span><br><span class=\"line\"><span class=\"comment\">//        List&lt;String&gt; files = new ArrayList&lt;String&gt;();</span></span><br><span class=\"line\"><span class=\"comment\">//        files.add(\"/mnt/sdcard/test.txt\");</span></span><br><span class=\"line\">        <span class=\"comment\">//主要接收人的电子邮箱列表</span></span><br><span class=\"line\">        List&lt;String&gt; toEmail = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">        toEmail.add(to);</span><br><span class=\"line\">        List&lt;String&gt; ccEmail = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//抄送人的电子邮箱列表 抄送给自己 防止被检测为垃圾邮件</span></span><br><span class=\"line\">        ccEmail.add(from);</span><br><span class=\"line\">        helper.setParams(toEmail, ccEmail, title, context, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        Log.v(TAG, <span class=\"string\">\"toEmail:\"</span> + toEmail + <span class=\"string\">\" ccEmail:\"</span> + ccEmail + <span class=\"string\">\" EMAIL_TITLE_APP:\"</span> + title + <span class=\"string\">\" appEmailContext:\"</span> + context);</span><br><span class=\"line\">        helper.setJieEmailInfterface(<span class=\"keyword\">new</span> MyEmailHelper.EmailInfterface() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startSend</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"邮件发送中~\"</span>, Toast.LENGTH_LONG).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SendStatus</span><span class=\"params\">(MyEmailHelper.SendStatus sendStatus)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">switch</span> (sendStatus) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> SENDOK:</span><br><span class=\"line\">                        Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"发送邮件成功~\"</span>, Toast.LENGTH_LONG).show();</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> SENDFAIL:</span><br><span class=\"line\">                        Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"发送邮件失败~\"</span>, Toast.LENGTH_LONG).show();</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> SENDING:</span><br><span class=\"line\">                        Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"邮件正在发送中，请稍后重试~\"</span>, Toast.LENGTH_LONG).show();</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> BADCONTEXT:</span><br><span class=\"line\">                        Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"邮件内容或标题被识别为垃圾邮件，请修改后重试~\"</span>, Toast.LENGTH_LONG).show();</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        helper.sendEmail();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-发送失败原因检查\"><a href=\"#4-发送失败原因检查\" class=\"headerlink\" title=\"4. 发送失败原因检查\"></a>4. 发送失败原因检查</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lillusory.com.androidemail;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CheckErrorUtils</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span>  MyEmailHelper.<span class=\"function\">SendStatus <span class=\"title\">checkExcption</span><span class=\"params\">(String message)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(message.contains(<span class=\"string\">\"554 DT:SPM\"</span>))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//发送失败原因有很多 这个是比较常见的问题 </span></span><br><span class=\"line\">            Log.v(<span class=\"string\">\"Az\"</span>,<span class=\"string\">\"邮件被识别为垃圾邮件了~\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MyEmailHelper.SendStatus.BADCONTEXT;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-网络权限\"><a href=\"#5-网络权限\" class=\"headerlink\" title=\"5. 网络权限\"></a>5. 网络权限</h2><p>记得添加网络权限</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/android/email-sender.png\" alt=\"picture\"></p>\n<p><a href=\"https://github.com/lillusory/EmailForAndroid\" target=\"_blank\" rel=\"noopener\">点击下载Demo</a></p>\n","site":{"data":{}},"excerpt":"<p>一个Android平台自动发送邮件的小demo，记录了一下实现的过程。</p>","more":"<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-导包\"><a href=\"#1-导包\" class=\"headerlink\" title=\"1. 导包\"></a>1. 导包</h2><p>使用邮件发送功能,需要导入3个jar包.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">additional.jar</span><br><span class=\"line\">mail.jar</span><br><span class=\"line\">activation.jar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用的是AndroidStudio</span></span><br><span class=\"line\"> <span class=\"comment\">//1.切换到Project视图</span></span><br><span class=\"line\"> <span class=\"comment\">//2.将这3个jar包放到app下的lib文件夹中</span></span><br><span class=\"line\"> <span class=\"comment\">//3.选择这个三个jar包右键 Add As Library</span></span><br><span class=\"line\"> <span class=\"comment\">//4.如果导入成功 在Module 的build.gradle中就能看到这个 和平常引入第三方库一样</span></span><br><span class=\"line\">    <span class=\"function\">implementation <span class=\"title\">files</span><span class=\"params\">(<span class=\"string\">'libs/activation.jar'</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    implementation <span class=\"title\">files</span><span class=\"params\">(<span class=\"string\">'libs/additionnal.jar'</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    implementation <span class=\"title\">files</span><span class=\"params\">(<span class=\"string\">'libs/mail.jar'</span>)</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-创建Helper工具类\"><a href=\"#2-创建Helper工具类\" class=\"headerlink\" title=\"2. 创建Helper工具类\"></a>2. 创建Helper工具类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lillusory.com.androidemail;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.AsyncTask;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.activation.CommandMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.activation.MailcapCommandMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.mail.Authenticator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.mail.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.mail.Multipart;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.mail.PasswordAuthentication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.mail.Session;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.mail.Transport;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.mail.internet.InternetAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.mail.internet.MimeBodyPart;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.mail.internet.MimeMessage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.mail.internet.MimeMultipart;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyEmailHelper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = MyEmailHelper.class.getSimpleName();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> port = <span class=\"number\">25</span>;  <span class=\"comment\">//smtp协议使用的端口</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String host = <span class=\"string\">\"smtp.163.com\"</span>; <span class=\"comment\">// 发件人邮件服务器</span></span><br><span class=\"line\">    <span class=\"comment\">//TODO 需要改成自己的账号和授权密码</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String user = <span class=\"string\">\"xxx@163.com\"</span>;   <span class=\"comment\">// 使用者账号</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password = <span class=\"string\">\"xxx\"</span>; <span class=\"comment\">//使用者SMTP授权密码</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; emailTos;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; emailCCs;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String title;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String context;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; paths;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> SendStatus &#123;</span><br><span class=\"line\">        SENDING, UNDO, SENDOK, SENDFAIL, BADCONTEXT</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SendStatus sendStatus;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">EmailInfterface</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">startSend</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SendStatus</span><span class=\"params\">(SendStatus sendStatus)</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> EmailInfterface EmailInfterface;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setJieEmailInfterface</span><span class=\"params\">(EmailInfterface EmailInfterface)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.EmailInfterface = EmailInfterface;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyEmailHelper</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        sendStatus = SendStatus.UNDO;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造发送邮件帐户的服务器，端口，帐户，密码</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyEmailHelper</span><span class=\"params\">(String host, <span class=\"keyword\">int</span> port, String user, String password)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.port = port;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.user = user;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.password = password;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.host = host;</span><br><span class=\"line\">        sendStatus = SendStatus.UNDO;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> emailTos 主要接收人的电子邮箱列表</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> emailCCs 抄送人的电子邮箱列表</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> title    邮件标题</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> context  正文内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> paths    发送的附件路径集合</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setParams</span><span class=\"params\">(List&lt;String&gt; emailTos, List&lt;String&gt; emailCCs, String title, String context,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          List&lt;String&gt; paths)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.emailTos = emailTos;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.emailCCs = emailCCs;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.title = title;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.context = context;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.paths = paths;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendEmail</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> MyAsynTask().execute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sendEmailBg</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Properties properties = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">        properties.put(<span class=\"string\">\"mail.smtp.host\"</span>, host);</span><br><span class=\"line\">        properties.put(<span class=\"string\">\"mail.smtp.port\"</span>, port);</span><br><span class=\"line\">        properties.put(<span class=\"string\">\"mail.smtp.auth\"</span>, <span class=\"string\">\"true\"</span>);<span class=\"comment\">//true一定要加引号</span></span><br><span class=\"line\">        properties.put(<span class=\"string\">\"mail.transport.protocol\"</span>, <span class=\"string\">\"smtp\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        MyAuthenticator jieAuth = <span class=\"keyword\">new</span> MyAuthenticator(user, password);</span><br><span class=\"line\"></span><br><span class=\"line\">        Session session = Session.getInstance(properties, jieAuth);</span><br><span class=\"line\">        <span class=\"comment\">//创建一个消息</span></span><br><span class=\"line\">        MimeMessage msg = <span class=\"keyword\">new</span> MimeMessage(session);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置发送人</span></span><br><span class=\"line\">        msg.setFrom(<span class=\"keyword\">new</span> InternetAddress(user));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置主要接收人</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (emailTos != <span class=\"keyword\">null</span> &amp;&amp; !emailTos.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> size = emailTos.size();</span><br><span class=\"line\">            InternetAddress[] addresses = <span class=\"keyword\">new</span> InternetAddress[size];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">                addresses[i] = <span class=\"keyword\">new</span> InternetAddress(emailTos.get(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            msg.setRecipients(Message.RecipientType.TO, addresses);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置抄送人的电子邮件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (emailCCs != <span class=\"keyword\">null</span> &amp;&amp; !emailCCs.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> size = emailCCs.size();</span><br><span class=\"line\">            InternetAddress[] addresses = <span class=\"keyword\">new</span> InternetAddress[size];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">                addresses[i] = <span class=\"keyword\">new</span> InternetAddress(emailCCs.get(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            msg.setRecipients(Message.RecipientType.CC, addresses);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        msg.setSubject(title);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建一个消息体</span></span><br><span class=\"line\">        MimeBodyPart msgBodyPart = <span class=\"keyword\">new</span> MimeBodyPart();</span><br><span class=\"line\">        msgBodyPart.setText(context);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建Multipart增加其他的parts</span></span><br><span class=\"line\">        Multipart mp = <span class=\"keyword\">new</span> MimeMultipart();</span><br><span class=\"line\">        mp.addBodyPart(msgBodyPart);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建文件附件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (paths != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String path : paths) &#123;</span><br><span class=\"line\">                MimeBodyPart fileBodyPart = <span class=\"keyword\">new</span> MimeBodyPart();</span><br><span class=\"line\">                fileBodyPart.attachFile(path);</span><br><span class=\"line\">                mp.addBodyPart(fileBodyPart);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//增加Multipart到消息体中</span></span><br><span class=\"line\">        msg.setContent(mp);</span><br><span class=\"line\">        <span class=\"comment\">//设置日期</span></span><br><span class=\"line\">        msg.setSentDate(<span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">        <span class=\"comment\">//设置附件格式</span></span><br><span class=\"line\">        MailcapCommandMap mc = (MailcapCommandMap) CommandMap.getDefaultCommandMap();</span><br><span class=\"line\">        mc.addMailcap(<span class=\"string\">\"text/html;; x-java-content-handler=com.sun.mail.handlers.text_html\"</span>);</span><br><span class=\"line\">        mc.addMailcap(<span class=\"string\">\"text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml\"</span>);</span><br><span class=\"line\">        mc.addMailcap(<span class=\"string\">\"text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain\"</span>);</span><br><span class=\"line\">        mc.addMailcap(<span class=\"string\">\"multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed\"</span>);</span><br><span class=\"line\">        mc.addMailcap(<span class=\"string\">\"message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822\"</span>);</span><br><span class=\"line\">        CommandMap.setDefaultCommandMap(mc);</span><br><span class=\"line\">        <span class=\"comment\">//发送消息</span></span><br><span class=\"line\">        Transport.send(msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAuthenticator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Authenticator</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String strUser;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String strPwd;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyAuthenticator</span><span class=\"params\">(String user, String password)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.strUser = user;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.strPwd = password;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> PasswordAuthentication <span class=\"title\">getPasswordAuthentication</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PasswordAuthentication(strUser, strPwd);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAsynTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">Void</span>, <span class=\"title\">Void</span>, <span class=\"title\">SendStatus</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPreExecute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onPreExecute();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (EmailInfterface != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                EmailInfterface.startSend();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostExecute</span><span class=\"params\">(SendStatus result)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onPostExecute(result);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (EmailInfterface != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                EmailInfterface.SendStatus(result);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sendStatus = SendStatus.UNDO;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> SendStatus <span class=\"title\">doInBackground</span><span class=\"params\">(Void... params)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                sendStatus = SendStatus.SENDING;</span><br><span class=\"line\">                sendEmailBg();</span><br><span class=\"line\">                sendStatus = SendStatus.SENDOK;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                String message = e.getMessage();</span><br><span class=\"line\">                Log.v(TAG, <span class=\"string\">\"邮件发送失败的原因--》\"</span> + message);</span><br><span class=\"line\">                SendStatus sendStatus = CheckErrorUtils.checkExcption(message);</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\"><span class=\"comment\">//                MyEmailHelper.this.sendStatus = SendStatus.SENDFAIL;</span></span><br><span class=\"line\">                MyEmailHelper.<span class=\"keyword\">this</span>.sendStatus = sendStatus;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> sendStatus;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-具体发送方法\"><a href=\"#3-具体发送方法\" class=\"headerlink\" title=\"3. 具体发送方法\"></a>3. 具体发送方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendMail</span><span class=\"params\">(String from, String to, String title, String context)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//          附件</span></span><br><span class=\"line\"><span class=\"comment\">//        List&lt;String&gt; files = new ArrayList&lt;String&gt;();</span></span><br><span class=\"line\"><span class=\"comment\">//        files.add(\"/mnt/sdcard/test.txt\");</span></span><br><span class=\"line\">        <span class=\"comment\">//主要接收人的电子邮箱列表</span></span><br><span class=\"line\">        List&lt;String&gt; toEmail = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">        toEmail.add(to);</span><br><span class=\"line\">        List&lt;String&gt; ccEmail = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//抄送人的电子邮箱列表 抄送给自己 防止被检测为垃圾邮件</span></span><br><span class=\"line\">        ccEmail.add(from);</span><br><span class=\"line\">        helper.setParams(toEmail, ccEmail, title, context, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        Log.v(TAG, <span class=\"string\">\"toEmail:\"</span> + toEmail + <span class=\"string\">\" ccEmail:\"</span> + ccEmail + <span class=\"string\">\" EMAIL_TITLE_APP:\"</span> + title + <span class=\"string\">\" appEmailContext:\"</span> + context);</span><br><span class=\"line\">        helper.setJieEmailInfterface(<span class=\"keyword\">new</span> MyEmailHelper.EmailInfterface() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startSend</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"邮件发送中~\"</span>, Toast.LENGTH_LONG).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SendStatus</span><span class=\"params\">(MyEmailHelper.SendStatus sendStatus)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">switch</span> (sendStatus) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> SENDOK:</span><br><span class=\"line\">                        Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"发送邮件成功~\"</span>, Toast.LENGTH_LONG).show();</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> SENDFAIL:</span><br><span class=\"line\">                        Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"发送邮件失败~\"</span>, Toast.LENGTH_LONG).show();</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> SENDING:</span><br><span class=\"line\">                        Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"邮件正在发送中，请稍后重试~\"</span>, Toast.LENGTH_LONG).show();</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> BADCONTEXT:</span><br><span class=\"line\">                        Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"邮件内容或标题被识别为垃圾邮件，请修改后重试~\"</span>, Toast.LENGTH_LONG).show();</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        helper.sendEmail();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-发送失败原因检查\"><a href=\"#4-发送失败原因检查\" class=\"headerlink\" title=\"4. 发送失败原因检查\"></a>4. 发送失败原因检查</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lillusory.com.androidemail;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CheckErrorUtils</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span>  MyEmailHelper.<span class=\"function\">SendStatus <span class=\"title\">checkExcption</span><span class=\"params\">(String message)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(message.contains(<span class=\"string\">\"554 DT:SPM\"</span>))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//发送失败原因有很多 这个是比较常见的问题 </span></span><br><span class=\"line\">            Log.v(<span class=\"string\">\"Az\"</span>,<span class=\"string\">\"邮件被识别为垃圾邮件了~\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MyEmailHelper.SendStatus.BADCONTEXT;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-网络权限\"><a href=\"#5-网络权限\" class=\"headerlink\" title=\"5. 网络权限\"></a>5. 网络权限</h2><p>记得添加网络权限</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/android/email-sender.png\" alt=\"picture\"></p>\n<p><a href=\"https://github.com/lillusory/EmailForAndroid\" target=\"_blank\" rel=\"noopener\">点击下载Demo</a></p>"},{"title":"计算机网络(五)--从输入URL到页面加载的过程中发生了什么","abbrlink":5863,"date":"2018-11-15T14:00:00.000Z","_content":"\n本文主要对用户从浏览器输入URL到页面加载的这一过程进行了具体分析与叙述。包括：`DNS解析`、`发送HTTP请求`、`TCP连接`、`服务器响应`、`浏览器解析渲染页面`等。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n总体来说分为以下几个过程:\n\n* 1.DNS解析\n* 2.TCP连接\n* 3.发送HTTP请求\n* 4.服务器处理请求并返回HTTP报文\n* 5.浏览器解析渲染页面\n* 6.连接结束\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcpip-http-relation-about.jpg)\n\n## 1. DNS解析\n\n解析域名，找到主机IP。如百度对应的IP为`180.97.33.108` ,浏览器输入IP也可以访问到百度。\n\n（1）浏览器会缓存DNS一段时间，一般2-30分钟不等。如果有缓存，直接返回IP，否则下一步。\n\n（2）缓存中无法找到IP，浏览器会进行一个系统调用，查询hosts文件。如果找到，直接返回IP，否则下一步。（在计算机本地目录etc下有一个hosts文件，hosts文件中保存有域名与IP的对应解析，通常也可以修改hosts科学上网或破解软件。）\n\n（3）进行了（1）（2）本地查询无果，只能借助于网络。路由器一般都会有自己的DNS缓存，ISP服务商DNS缓存，这时一般都能够得到相应的IP。如果还是无果，只能借助于DNS递归解析了。\n\n（4）这时，ISP的DNS服务器就会开始从根域名服务器开始递归搜索，从.com顶级域名服务器，到baidu的域名服务器。\n\n到这里，浏览器就获得了IP。在DNS解析过程中，常常会解析出不同的IP。比如，电信的是一个IP，网通的是另一个IP。这是采取了智能DNS的结果，降低运营商间访问延时，在多个运营商设置主机房，就近访问主机。电信用户返回电信主机IP，网通用户返回网通主机IP。当然，劫持DNS，也可以屏蔽掉一部分网点的访问，某防火长城也加入了这一特性。\n\n## 2. TCP连接\n\n浏览器与网站建立TCP连接\n\n浏览器利用IP直接与网站主机通信。浏览器发出TCP（SYN标志位为1）连接请求，主机返回TCP（SYN，ACK标志位均为1）应答报文，浏览器收到应答报文发现ACK标志位为1，表示连接请求确认。浏览器返回TCP（）确认报文，主机收到确认报文，三次握手，TCP链接建立完成。\n\n## 3. 发送HTTP请求\n\n浏览器发起HTTP请求\n\n其实这部分又可以称为前端工程师眼中的HTTP，它主要发生在客户端。发送HTTP请求的过程就是构建HTTP请求报文并通过TCP协议中发送到服务器指定端口(HTTP协议80/8080, HTTPS协议443)。HTTP请求报文是由三部分组成: **请求行**, **请求报头**和**请求正文**。 \n\n**请求行**\n\n请求行包括：请求方法，URL  ， 协议版本\n\n```java\n请求行：请求方法    URL    协议版本\n    eg:\tGET   index.html HTTP/1.1\n```\n\n**请求报头**\n\n请求报头允许客户端向服务器传递请求的附加信息和客户端自身的信息。\nPS: 客户端不一定特指浏览器，有时候也可使用Linux下的CURL命令以及HTTP客户端测试工具等。\n常见的请求报头有: `Accept`,` Accept-Charset`,` Accept-Encoding`,` Accept-Language,` `Content-Type`, `Authorization`, `Cookie`, `User-Agent`等。\n\n**请求正文**\n\n当使用`POST`, `PUT`等方法时，通常需要客户端向服务器传递数据。这些数据就储存在请求正文中。在请求包头中有一些与请求正文相关的信息，例如: 现在的Web应用通常采用Rest架构，请求的数据格式一般为json。这时就需要设置`Content-Type: application/json`\n\n浏览器向主机发起一个HTTP请求。请求中包含访问的URL，也就是http://www.baidu.com/ ，还有User-Agent用户浏览器操作系统信息，编码等。值得一提的是Accep-Encoding和Cookies项。Accept-Encoding一般采用gzip，压缩之后传输html文件。Cookies如果是首次访问，会提示服务器建立用户缓存信息，如果不是，可以利用Cookies对应键值，找到相应缓存，缓存里面存放着用户名，密码和一些用户设置项。\n\n## 4. 服务器响应\n\n服务器对请求做出响应并返回HTTP响应报文。自然而然这部分对应的就是后端工程师眼中的HTTP。后端从在固定的端口接收到TCP报文开始，这一部分对应于编程语言中的socket。它会对TCP连接进行处理，对HTTP协议进行解析，并按照报文格式进一步封装成HTTP Request对象，供上层使用。这一部分工作一般是由Web服务器去进行，例如Tomcat。\n\nHTTP响应报文也是由三部分组成: **响应行**, **响应报头**和**响应报文**。\n\n**响应行**\n\n响应行包括：协议版本 状态码 状态码描述\n\n```java\n响应行包括：协议版本   状态码 状态码描述\n    eg:  \tHTTP/1.1  200    OK\n```\n\n**响应报头**\n\n常见的响应报头字段有: Server, Connection...。\n\n**响应报文**\n\n服务器返回给浏览器的文本信息，通常HTML, CSS, JS, 图片等文件就放在这一部分。\n\n## 5. 浏览器解析渲染页面\n\n返回状态码200 OK，表示服务器可以相应请求，返回报文，由于在报头中`Content-type:“text/html”`，浏览器以HTML形式呈现，而不是下载文件。\n\n浏览器在收到HTML,CSS,JS文件后，它是如何把页面呈现到屏幕上的?\n\n浏览器是一个边解析边渲染的过程。首先浏览器解析HTML文件构建DOM树，然后解析CSS文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。这个过程比较复杂，涉及到两个概念: reflow(回流)和repain(重绘)。DOM节点中的各个元素都是以盒模型的形式存在，这些都需要浏览器去计算其位置和大小等，这个过程称为relow;当盒模型的位置,大小以及其他属性，如颜色,字体,等确定下来之后，浏览器便开始绘制内容，这个过程称为repain。页面在首次加载时必然会经历reflow和repain。reflow和repain过程是非常消耗性能的，尤其是在移动设备上，它会破坏用户体验，有时会造成页面卡顿。所以我们应该尽可能少的减少reflow和repain。\n\n**重定向 负载均衡**\n\n但是，对于大型网站存在多个主机站点，往往不会直接返回请求页面，而是重定向。返回的状态码就不是200 OK，而是301,302以3开头的重定向码，浏览器在获取了重定向响应后，在响应报文中Location项找到重定向地址，浏览器重新第一步访问即可。\n\n补充一点的就是，重定向是为了负载均衡或者导入流量，提高SEO排名。利用一个前端服务器接受请求，然后负载到不同的主机上，可以大大提高站点的业务并发处理能力；重定向也可将多个域名的访问，集中到一个站点；由于[lixueduan.com](lixueduan.com)，[www.lixueduan.com](www.lixueduan.com)会被搜索引擎认为是两个网站，照成每个的链接数都会减少从而降低排名，永久重定向会将两个地址关联起来，搜索引擎会认为是同一个网站，从而提高排名。\n\n## 6. 连接结束\n\n在HTTP/1.0中默认使用短连接。也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个HTML或其他类型的Web页中包含有其他的Web资源（如JavaScript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话。\n\n而从HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入这行代码：\n\n```\nConnection:keep-alive\n```\n\n在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。\n\n## 7. 计算机网络常见问题\n\n看完系列文章，下面这些问题应该也不是问题了。\n\n- 1.TCP三次握手和四次挥手\n- 2.在浏览器中输入url地址->>显示主页的过程\n- 3.HTTP和HTTPS的区别\n- 4.TCP、UDP协议的区别\n- 5.常见的状态码。\n\n## 8. 参考\n\n`https://segmentfault.com/a/1190000006879700`","source":"_posts/computer_network/five-connection-process.md","raw":"---\ntitle: 计算机网络(五)--从输入URL到页面加载的过程中发生了什么\ntags:\n  - 计算机网络\ncategories:\n  - 计算机网络\nabbrlink: 5863\ndate: 2018-11-15 22:00:00\n---\n\n本文主要对用户从浏览器输入URL到页面加载的这一过程进行了具体分析与叙述。包括：`DNS解析`、`发送HTTP请求`、`TCP连接`、`服务器响应`、`浏览器解析渲染页面`等。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n总体来说分为以下几个过程:\n\n* 1.DNS解析\n* 2.TCP连接\n* 3.发送HTTP请求\n* 4.服务器处理请求并返回HTTP报文\n* 5.浏览器解析渲染页面\n* 6.连接结束\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcpip-http-relation-about.jpg)\n\n## 1. DNS解析\n\n解析域名，找到主机IP。如百度对应的IP为`180.97.33.108` ,浏览器输入IP也可以访问到百度。\n\n（1）浏览器会缓存DNS一段时间，一般2-30分钟不等。如果有缓存，直接返回IP，否则下一步。\n\n（2）缓存中无法找到IP，浏览器会进行一个系统调用，查询hosts文件。如果找到，直接返回IP，否则下一步。（在计算机本地目录etc下有一个hosts文件，hosts文件中保存有域名与IP的对应解析，通常也可以修改hosts科学上网或破解软件。）\n\n（3）进行了（1）（2）本地查询无果，只能借助于网络。路由器一般都会有自己的DNS缓存，ISP服务商DNS缓存，这时一般都能够得到相应的IP。如果还是无果，只能借助于DNS递归解析了。\n\n（4）这时，ISP的DNS服务器就会开始从根域名服务器开始递归搜索，从.com顶级域名服务器，到baidu的域名服务器。\n\n到这里，浏览器就获得了IP。在DNS解析过程中，常常会解析出不同的IP。比如，电信的是一个IP，网通的是另一个IP。这是采取了智能DNS的结果，降低运营商间访问延时，在多个运营商设置主机房，就近访问主机。电信用户返回电信主机IP，网通用户返回网通主机IP。当然，劫持DNS，也可以屏蔽掉一部分网点的访问，某防火长城也加入了这一特性。\n\n## 2. TCP连接\n\n浏览器与网站建立TCP连接\n\n浏览器利用IP直接与网站主机通信。浏览器发出TCP（SYN标志位为1）连接请求，主机返回TCP（SYN，ACK标志位均为1）应答报文，浏览器收到应答报文发现ACK标志位为1，表示连接请求确认。浏览器返回TCP（）确认报文，主机收到确认报文，三次握手，TCP链接建立完成。\n\n## 3. 发送HTTP请求\n\n浏览器发起HTTP请求\n\n其实这部分又可以称为前端工程师眼中的HTTP，它主要发生在客户端。发送HTTP请求的过程就是构建HTTP请求报文并通过TCP协议中发送到服务器指定端口(HTTP协议80/8080, HTTPS协议443)。HTTP请求报文是由三部分组成: **请求行**, **请求报头**和**请求正文**。 \n\n**请求行**\n\n请求行包括：请求方法，URL  ， 协议版本\n\n```java\n请求行：请求方法    URL    协议版本\n    eg:\tGET   index.html HTTP/1.1\n```\n\n**请求报头**\n\n请求报头允许客户端向服务器传递请求的附加信息和客户端自身的信息。\nPS: 客户端不一定特指浏览器，有时候也可使用Linux下的CURL命令以及HTTP客户端测试工具等。\n常见的请求报头有: `Accept`,` Accept-Charset`,` Accept-Encoding`,` Accept-Language,` `Content-Type`, `Authorization`, `Cookie`, `User-Agent`等。\n\n**请求正文**\n\n当使用`POST`, `PUT`等方法时，通常需要客户端向服务器传递数据。这些数据就储存在请求正文中。在请求包头中有一些与请求正文相关的信息，例如: 现在的Web应用通常采用Rest架构，请求的数据格式一般为json。这时就需要设置`Content-Type: application/json`\n\n浏览器向主机发起一个HTTP请求。请求中包含访问的URL，也就是http://www.baidu.com/ ，还有User-Agent用户浏览器操作系统信息，编码等。值得一提的是Accep-Encoding和Cookies项。Accept-Encoding一般采用gzip，压缩之后传输html文件。Cookies如果是首次访问，会提示服务器建立用户缓存信息，如果不是，可以利用Cookies对应键值，找到相应缓存，缓存里面存放着用户名，密码和一些用户设置项。\n\n## 4. 服务器响应\n\n服务器对请求做出响应并返回HTTP响应报文。自然而然这部分对应的就是后端工程师眼中的HTTP。后端从在固定的端口接收到TCP报文开始，这一部分对应于编程语言中的socket。它会对TCP连接进行处理，对HTTP协议进行解析，并按照报文格式进一步封装成HTTP Request对象，供上层使用。这一部分工作一般是由Web服务器去进行，例如Tomcat。\n\nHTTP响应报文也是由三部分组成: **响应行**, **响应报头**和**响应报文**。\n\n**响应行**\n\n响应行包括：协议版本 状态码 状态码描述\n\n```java\n响应行包括：协议版本   状态码 状态码描述\n    eg:  \tHTTP/1.1  200    OK\n```\n\n**响应报头**\n\n常见的响应报头字段有: Server, Connection...。\n\n**响应报文**\n\n服务器返回给浏览器的文本信息，通常HTML, CSS, JS, 图片等文件就放在这一部分。\n\n## 5. 浏览器解析渲染页面\n\n返回状态码200 OK，表示服务器可以相应请求，返回报文，由于在报头中`Content-type:“text/html”`，浏览器以HTML形式呈现，而不是下载文件。\n\n浏览器在收到HTML,CSS,JS文件后，它是如何把页面呈现到屏幕上的?\n\n浏览器是一个边解析边渲染的过程。首先浏览器解析HTML文件构建DOM树，然后解析CSS文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。这个过程比较复杂，涉及到两个概念: reflow(回流)和repain(重绘)。DOM节点中的各个元素都是以盒模型的形式存在，这些都需要浏览器去计算其位置和大小等，这个过程称为relow;当盒模型的位置,大小以及其他属性，如颜色,字体,等确定下来之后，浏览器便开始绘制内容，这个过程称为repain。页面在首次加载时必然会经历reflow和repain。reflow和repain过程是非常消耗性能的，尤其是在移动设备上，它会破坏用户体验，有时会造成页面卡顿。所以我们应该尽可能少的减少reflow和repain。\n\n**重定向 负载均衡**\n\n但是，对于大型网站存在多个主机站点，往往不会直接返回请求页面，而是重定向。返回的状态码就不是200 OK，而是301,302以3开头的重定向码，浏览器在获取了重定向响应后，在响应报文中Location项找到重定向地址，浏览器重新第一步访问即可。\n\n补充一点的就是，重定向是为了负载均衡或者导入流量，提高SEO排名。利用一个前端服务器接受请求，然后负载到不同的主机上，可以大大提高站点的业务并发处理能力；重定向也可将多个域名的访问，集中到一个站点；由于[lixueduan.com](lixueduan.com)，[www.lixueduan.com](www.lixueduan.com)会被搜索引擎认为是两个网站，照成每个的链接数都会减少从而降低排名，永久重定向会将两个地址关联起来，搜索引擎会认为是同一个网站，从而提高排名。\n\n## 6. 连接结束\n\n在HTTP/1.0中默认使用短连接。也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个HTML或其他类型的Web页中包含有其他的Web资源（如JavaScript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话。\n\n而从HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入这行代码：\n\n```\nConnection:keep-alive\n```\n\n在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。\n\n## 7. 计算机网络常见问题\n\n看完系列文章，下面这些问题应该也不是问题了。\n\n- 1.TCP三次握手和四次挥手\n- 2.在浏览器中输入url地址->>显示主页的过程\n- 3.HTTP和HTTPS的区别\n- 4.TCP、UDP协议的区别\n- 5.常见的状态码。\n\n## 8. 参考\n\n`https://segmentfault.com/a/1190000006879700`","slug":"computer_network/five-connection-process","published":1,"updated":"2019-02-06T01:18:17.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv4a2003h0ww45k1gzc7g","content":"<p>本文主要对用户从浏览器输入URL到页面加载的这一过程进行了具体分析与叙述。包括：<code>DNS解析</code>、<code>发送HTTP请求</code>、<code>TCP连接</code>、<code>服务器响应</code>、<code>浏览器解析渲染页面</code>等。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<p>总体来说分为以下几个过程:</p>\n<ul>\n<li>1.DNS解析</li>\n<li>2.TCP连接</li>\n<li>3.发送HTTP请求</li>\n<li>4.服务器处理请求并返回HTTP报文</li>\n<li>5.浏览器解析渲染页面</li>\n<li>6.连接结束</li>\n</ul>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcpip-http-relation-about.jpg\" alt=\"\"></p>\n<h2 id=\"1-DNS解析\"><a href=\"#1-DNS解析\" class=\"headerlink\" title=\"1. DNS解析\"></a>1. DNS解析</h2><p>解析域名，找到主机IP。如百度对应的IP为<code>180.97.33.108</code> ,浏览器输入IP也可以访问到百度。</p>\n<p>（1）浏览器会缓存DNS一段时间，一般2-30分钟不等。如果有缓存，直接返回IP，否则下一步。</p>\n<p>（2）缓存中无法找到IP，浏览器会进行一个系统调用，查询hosts文件。如果找到，直接返回IP，否则下一步。（在计算机本地目录etc下有一个hosts文件，hosts文件中保存有域名与IP的对应解析，通常也可以修改hosts科学上网或破解软件。）</p>\n<p>（3）进行了（1）（2）本地查询无果，只能借助于网络。路由器一般都会有自己的DNS缓存，ISP服务商DNS缓存，这时一般都能够得到相应的IP。如果还是无果，只能借助于DNS递归解析了。</p>\n<p>（4）这时，ISP的DNS服务器就会开始从根域名服务器开始递归搜索，从.com顶级域名服务器，到baidu的域名服务器。</p>\n<p>到这里，浏览器就获得了IP。在DNS解析过程中，常常会解析出不同的IP。比如，电信的是一个IP，网通的是另一个IP。这是采取了智能DNS的结果，降低运营商间访问延时，在多个运营商设置主机房，就近访问主机。电信用户返回电信主机IP，网通用户返回网通主机IP。当然，劫持DNS，也可以屏蔽掉一部分网点的访问，某防火长城也加入了这一特性。</p>\n<h2 id=\"2-TCP连接\"><a href=\"#2-TCP连接\" class=\"headerlink\" title=\"2. TCP连接\"></a>2. TCP连接</h2><p>浏览器与网站建立TCP连接</p>\n<p>浏览器利用IP直接与网站主机通信。浏览器发出TCP（SYN标志位为1）连接请求，主机返回TCP（SYN，ACK标志位均为1）应答报文，浏览器收到应答报文发现ACK标志位为1，表示连接请求确认。浏览器返回TCP（）确认报文，主机收到确认报文，三次握手，TCP链接建立完成。</p>\n<h2 id=\"3-发送HTTP请求\"><a href=\"#3-发送HTTP请求\" class=\"headerlink\" title=\"3. 发送HTTP请求\"></a>3. 发送HTTP请求</h2><p>浏览器发起HTTP请求</p>\n<p>其实这部分又可以称为前端工程师眼中的HTTP，它主要发生在客户端。发送HTTP请求的过程就是构建HTTP请求报文并通过TCP协议中发送到服务器指定端口(HTTP协议80/8080, HTTPS协议443)。HTTP请求报文是由三部分组成: <strong>请求行</strong>, <strong>请求报头</strong>和<strong>请求正文</strong>。 </p>\n<p><strong>请求行</strong></p>\n<p>请求行包括：请求方法，URL  ， 协议版本</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请求行：请求方法    URL    协议版本</span><br><span class=\"line\">    eg:\tGET   index.html HTTP/<span class=\"number\">1.1</span></span><br></pre></td></tr></table></figure>\n<p><strong>请求报头</strong></p>\n<p>请求报头允许客户端向服务器传递请求的附加信息和客户端自身的信息。<br>PS: 客户端不一定特指浏览器，有时候也可使用Linux下的CURL命令以及HTTP客户端测试工具等。<br>常见的请求报头有: <code>Accept</code>,<code>Accept-Charset</code>,<code>Accept-Encoding</code>,<code>Accept-Language,</code> <code>Content-Type</code>, <code>Authorization</code>, <code>Cookie</code>, <code>User-Agent</code>等。</p>\n<p><strong>请求正文</strong></p>\n<p>当使用<code>POST</code>, <code>PUT</code>等方法时，通常需要客户端向服务器传递数据。这些数据就储存在请求正文中。在请求包头中有一些与请求正文相关的信息，例如: 现在的Web应用通常采用Rest架构，请求的数据格式一般为json。这时就需要设置<code>Content-Type: application/json</code></p>\n<p>浏览器向主机发起一个HTTP请求。请求中包含访问的URL，也就是<a href=\"http://www.baidu.com/\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com/</a> ，还有User-Agent用户浏览器操作系统信息，编码等。值得一提的是Accep-Encoding和Cookies项。Accept-Encoding一般采用gzip，压缩之后传输html文件。Cookies如果是首次访问，会提示服务器建立用户缓存信息，如果不是，可以利用Cookies对应键值，找到相应缓存，缓存里面存放着用户名，密码和一些用户设置项。</p>\n<h2 id=\"4-服务器响应\"><a href=\"#4-服务器响应\" class=\"headerlink\" title=\"4. 服务器响应\"></a>4. 服务器响应</h2><p>服务器对请求做出响应并返回HTTP响应报文。自然而然这部分对应的就是后端工程师眼中的HTTP。后端从在固定的端口接收到TCP报文开始，这一部分对应于编程语言中的socket。它会对TCP连接进行处理，对HTTP协议进行解析，并按照报文格式进一步封装成HTTP Request对象，供上层使用。这一部分工作一般是由Web服务器去进行，例如Tomcat。</p>\n<p>HTTP响应报文也是由三部分组成: <strong>响应行</strong>, <strong>响应报头</strong>和<strong>响应报文</strong>。</p>\n<p><strong>响应行</strong></p>\n<p>响应行包括：协议版本 状态码 状态码描述</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">响应行包括：协议版本   状态码 状态码描述</span><br><span class=\"line\">    eg:  \tHTTP/<span class=\"number\">1.1</span>  <span class=\"number\">200</span>    OK</span><br></pre></td></tr></table></figure>\n<p><strong>响应报头</strong></p>\n<p>常见的响应报头字段有: Server, Connection…。</p>\n<p><strong>响应报文</strong></p>\n<p>服务器返回给浏览器的文本信息，通常HTML, CSS, JS, 图片等文件就放在这一部分。</p>\n<h2 id=\"5-浏览器解析渲染页面\"><a href=\"#5-浏览器解析渲染页面\" class=\"headerlink\" title=\"5. 浏览器解析渲染页面\"></a>5. 浏览器解析渲染页面</h2><p>返回状态码200 OK，表示服务器可以相应请求，返回报文，由于在报头中<code>Content-type:“text/html”</code>，浏览器以HTML形式呈现，而不是下载文件。</p>\n<p>浏览器在收到HTML,CSS,JS文件后，它是如何把页面呈现到屏幕上的?</p>\n<p>浏览器是一个边解析边渲染的过程。首先浏览器解析HTML文件构建DOM树，然后解析CSS文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。这个过程比较复杂，涉及到两个概念: reflow(回流)和repain(重绘)。DOM节点中的各个元素都是以盒模型的形式存在，这些都需要浏览器去计算其位置和大小等，这个过程称为relow;当盒模型的位置,大小以及其他属性，如颜色,字体,等确定下来之后，浏览器便开始绘制内容，这个过程称为repain。页面在首次加载时必然会经历reflow和repain。reflow和repain过程是非常消耗性能的，尤其是在移动设备上，它会破坏用户体验，有时会造成页面卡顿。所以我们应该尽可能少的减少reflow和repain。</p>\n<p><strong>重定向 负载均衡</strong></p>\n<p>但是，对于大型网站存在多个主机站点，往往不会直接返回请求页面，而是重定向。返回的状态码就不是200 OK，而是301,302以3开头的重定向码，浏览器在获取了重定向响应后，在响应报文中Location项找到重定向地址，浏览器重新第一步访问即可。</p>\n<p>补充一点的就是，重定向是为了负载均衡或者导入流量，提高SEO排名。利用一个前端服务器接受请求，然后负载到不同的主机上，可以大大提高站点的业务并发处理能力；重定向也可将多个域名的访问，集中到一个站点；由于<a href=\"lixueduan.com\">lixueduan.com</a>，<a href=\"www.lixueduan.com\">www.lixueduan.com</a>会被搜索引擎认为是两个网站，照成每个的链接数都会减少从而降低排名，永久重定向会将两个地址关联起来，搜索引擎会认为是同一个网站，从而提高排名。</p>\n<h2 id=\"6-连接结束\"><a href=\"#6-连接结束\" class=\"headerlink\" title=\"6. 连接结束\"></a>6. 连接结束</h2><p>在HTTP/1.0中默认使用短连接。也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个HTML或其他类型的Web页中包含有其他的Web资源（如JavaScript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话。</p>\n<p>而从HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入这行代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connection:keep-alive</span><br></pre></td></tr></table></figure>\n<p>在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。</p>\n<h2 id=\"7-计算机网络常见问题\"><a href=\"#7-计算机网络常见问题\" class=\"headerlink\" title=\"7. 计算机网络常见问题\"></a>7. 计算机网络常见问题</h2><p>看完系列文章，下面这些问题应该也不是问题了。</p>\n<ul>\n<li>1.TCP三次握手和四次挥手</li>\n<li>2.在浏览器中输入url地址-&gt;&gt;显示主页的过程</li>\n<li>3.HTTP和HTTPS的区别</li>\n<li>4.TCP、UDP协议的区别</li>\n<li>5.常见的状态码。</li>\n</ul>\n<h2 id=\"8-参考\"><a href=\"#8-参考\" class=\"headerlink\" title=\"8. 参考\"></a>8. 参考</h2><p><code>https://segmentfault.com/a/1190000006879700</code></p>\n","site":{"data":{}},"excerpt":"<p>本文主要对用户从浏览器输入URL到页面加载的这一过程进行了具体分析与叙述。包括：<code>DNS解析</code>、<code>发送HTTP请求</code>、<code>TCP连接</code>、<code>服务器响应</code>、<code>浏览器解析渲染页面</code>等。</p>","more":"<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<p>总体来说分为以下几个过程:</p>\n<ul>\n<li>1.DNS解析</li>\n<li>2.TCP连接</li>\n<li>3.发送HTTP请求</li>\n<li>4.服务器处理请求并返回HTTP报文</li>\n<li>5.浏览器解析渲染页面</li>\n<li>6.连接结束</li>\n</ul>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcpip-http-relation-about.jpg\" alt=\"\"></p>\n<h2 id=\"1-DNS解析\"><a href=\"#1-DNS解析\" class=\"headerlink\" title=\"1. DNS解析\"></a>1. DNS解析</h2><p>解析域名，找到主机IP。如百度对应的IP为<code>180.97.33.108</code> ,浏览器输入IP也可以访问到百度。</p>\n<p>（1）浏览器会缓存DNS一段时间，一般2-30分钟不等。如果有缓存，直接返回IP，否则下一步。</p>\n<p>（2）缓存中无法找到IP，浏览器会进行一个系统调用，查询hosts文件。如果找到，直接返回IP，否则下一步。（在计算机本地目录etc下有一个hosts文件，hosts文件中保存有域名与IP的对应解析，通常也可以修改hosts科学上网或破解软件。）</p>\n<p>（3）进行了（1）（2）本地查询无果，只能借助于网络。路由器一般都会有自己的DNS缓存，ISP服务商DNS缓存，这时一般都能够得到相应的IP。如果还是无果，只能借助于DNS递归解析了。</p>\n<p>（4）这时，ISP的DNS服务器就会开始从根域名服务器开始递归搜索，从.com顶级域名服务器，到baidu的域名服务器。</p>\n<p>到这里，浏览器就获得了IP。在DNS解析过程中，常常会解析出不同的IP。比如，电信的是一个IP，网通的是另一个IP。这是采取了智能DNS的结果，降低运营商间访问延时，在多个运营商设置主机房，就近访问主机。电信用户返回电信主机IP，网通用户返回网通主机IP。当然，劫持DNS，也可以屏蔽掉一部分网点的访问，某防火长城也加入了这一特性。</p>\n<h2 id=\"2-TCP连接\"><a href=\"#2-TCP连接\" class=\"headerlink\" title=\"2. TCP连接\"></a>2. TCP连接</h2><p>浏览器与网站建立TCP连接</p>\n<p>浏览器利用IP直接与网站主机通信。浏览器发出TCP（SYN标志位为1）连接请求，主机返回TCP（SYN，ACK标志位均为1）应答报文，浏览器收到应答报文发现ACK标志位为1，表示连接请求确认。浏览器返回TCP（）确认报文，主机收到确认报文，三次握手，TCP链接建立完成。</p>\n<h2 id=\"3-发送HTTP请求\"><a href=\"#3-发送HTTP请求\" class=\"headerlink\" title=\"3. 发送HTTP请求\"></a>3. 发送HTTP请求</h2><p>浏览器发起HTTP请求</p>\n<p>其实这部分又可以称为前端工程师眼中的HTTP，它主要发生在客户端。发送HTTP请求的过程就是构建HTTP请求报文并通过TCP协议中发送到服务器指定端口(HTTP协议80/8080, HTTPS协议443)。HTTP请求报文是由三部分组成: <strong>请求行</strong>, <strong>请求报头</strong>和<strong>请求正文</strong>。 </p>\n<p><strong>请求行</strong></p>\n<p>请求行包括：请求方法，URL  ， 协议版本</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请求行：请求方法    URL    协议版本</span><br><span class=\"line\">    eg:\tGET   index.html HTTP/<span class=\"number\">1.1</span></span><br></pre></td></tr></table></figure>\n<p><strong>请求报头</strong></p>\n<p>请求报头允许客户端向服务器传递请求的附加信息和客户端自身的信息。<br>PS: 客户端不一定特指浏览器，有时候也可使用Linux下的CURL命令以及HTTP客户端测试工具等。<br>常见的请求报头有: <code>Accept</code>,<code>Accept-Charset</code>,<code>Accept-Encoding</code>,<code>Accept-Language,</code> <code>Content-Type</code>, <code>Authorization</code>, <code>Cookie</code>, <code>User-Agent</code>等。</p>\n<p><strong>请求正文</strong></p>\n<p>当使用<code>POST</code>, <code>PUT</code>等方法时，通常需要客户端向服务器传递数据。这些数据就储存在请求正文中。在请求包头中有一些与请求正文相关的信息，例如: 现在的Web应用通常采用Rest架构，请求的数据格式一般为json。这时就需要设置<code>Content-Type: application/json</code></p>\n<p>浏览器向主机发起一个HTTP请求。请求中包含访问的URL，也就是<a href=\"http://www.baidu.com/\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com/</a> ，还有User-Agent用户浏览器操作系统信息，编码等。值得一提的是Accep-Encoding和Cookies项。Accept-Encoding一般采用gzip，压缩之后传输html文件。Cookies如果是首次访问，会提示服务器建立用户缓存信息，如果不是，可以利用Cookies对应键值，找到相应缓存，缓存里面存放着用户名，密码和一些用户设置项。</p>\n<h2 id=\"4-服务器响应\"><a href=\"#4-服务器响应\" class=\"headerlink\" title=\"4. 服务器响应\"></a>4. 服务器响应</h2><p>服务器对请求做出响应并返回HTTP响应报文。自然而然这部分对应的就是后端工程师眼中的HTTP。后端从在固定的端口接收到TCP报文开始，这一部分对应于编程语言中的socket。它会对TCP连接进行处理，对HTTP协议进行解析，并按照报文格式进一步封装成HTTP Request对象，供上层使用。这一部分工作一般是由Web服务器去进行，例如Tomcat。</p>\n<p>HTTP响应报文也是由三部分组成: <strong>响应行</strong>, <strong>响应报头</strong>和<strong>响应报文</strong>。</p>\n<p><strong>响应行</strong></p>\n<p>响应行包括：协议版本 状态码 状态码描述</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">响应行包括：协议版本   状态码 状态码描述</span><br><span class=\"line\">    eg:  \tHTTP/<span class=\"number\">1.1</span>  <span class=\"number\">200</span>    OK</span><br></pre></td></tr></table></figure>\n<p><strong>响应报头</strong></p>\n<p>常见的响应报头字段有: Server, Connection…。</p>\n<p><strong>响应报文</strong></p>\n<p>服务器返回给浏览器的文本信息，通常HTML, CSS, JS, 图片等文件就放在这一部分。</p>\n<h2 id=\"5-浏览器解析渲染页面\"><a href=\"#5-浏览器解析渲染页面\" class=\"headerlink\" title=\"5. 浏览器解析渲染页面\"></a>5. 浏览器解析渲染页面</h2><p>返回状态码200 OK，表示服务器可以相应请求，返回报文，由于在报头中<code>Content-type:“text/html”</code>，浏览器以HTML形式呈现，而不是下载文件。</p>\n<p>浏览器在收到HTML,CSS,JS文件后，它是如何把页面呈现到屏幕上的?</p>\n<p>浏览器是一个边解析边渲染的过程。首先浏览器解析HTML文件构建DOM树，然后解析CSS文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。这个过程比较复杂，涉及到两个概念: reflow(回流)和repain(重绘)。DOM节点中的各个元素都是以盒模型的形式存在，这些都需要浏览器去计算其位置和大小等，这个过程称为relow;当盒模型的位置,大小以及其他属性，如颜色,字体,等确定下来之后，浏览器便开始绘制内容，这个过程称为repain。页面在首次加载时必然会经历reflow和repain。reflow和repain过程是非常消耗性能的，尤其是在移动设备上，它会破坏用户体验，有时会造成页面卡顿。所以我们应该尽可能少的减少reflow和repain。</p>\n<p><strong>重定向 负载均衡</strong></p>\n<p>但是，对于大型网站存在多个主机站点，往往不会直接返回请求页面，而是重定向。返回的状态码就不是200 OK，而是301,302以3开头的重定向码，浏览器在获取了重定向响应后，在响应报文中Location项找到重定向地址，浏览器重新第一步访问即可。</p>\n<p>补充一点的就是，重定向是为了负载均衡或者导入流量，提高SEO排名。利用一个前端服务器接受请求，然后负载到不同的主机上，可以大大提高站点的业务并发处理能力；重定向也可将多个域名的访问，集中到一个站点；由于<a href=\"lixueduan.com\">lixueduan.com</a>，<a href=\"www.lixueduan.com\">www.lixueduan.com</a>会被搜索引擎认为是两个网站，照成每个的链接数都会减少从而降低排名，永久重定向会将两个地址关联起来，搜索引擎会认为是同一个网站，从而提高排名。</p>\n<h2 id=\"6-连接结束\"><a href=\"#6-连接结束\" class=\"headerlink\" title=\"6. 连接结束\"></a>6. 连接结束</h2><p>在HTTP/1.0中默认使用短连接。也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个HTML或其他类型的Web页中包含有其他的Web资源（如JavaScript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话。</p>\n<p>而从HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入这行代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connection:keep-alive</span><br></pre></td></tr></table></figure>\n<p>在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。</p>\n<h2 id=\"7-计算机网络常见问题\"><a href=\"#7-计算机网络常见问题\" class=\"headerlink\" title=\"7. 计算机网络常见问题\"></a>7. 计算机网络常见问题</h2><p>看完系列文章，下面这些问题应该也不是问题了。</p>\n<ul>\n<li>1.TCP三次握手和四次挥手</li>\n<li>2.在浏览器中输入url地址-&gt;&gt;显示主页的过程</li>\n<li>3.HTTP和HTTPS的区别</li>\n<li>4.TCP、UDP协议的区别</li>\n<li>5.常见的状态码。</li>\n</ul>\n<h2 id=\"8-参考\"><a href=\"#8-参考\" class=\"headerlink\" title=\"8. 参考\"></a>8. 参考</h2><p><code>https://segmentfault.com/a/1190000006879700</code></p>"},{"title":"计算机网络(四)--HTTP与HTTPS","abbrlink":21307,"date":"2018-11-12T14:00:00.000Z","_content":"\n本文主要介绍了`HTTP`、`HTTPS`的基本概念及两者的区别，`HTTPS`的工作原理及优缺点，最后介绍了HTTP的响应状态码。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. HTTP和HTTPS基本概念\n\n　　HTTP：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。\n\n　　HTTPS：是以**安全**为目标的HTTP通道，简单讲是**HTTP的安全版**，即HTTP下加入**SSL层**，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。\n\n```java\nHTTP--> HTTP-->TCP-->IP\nHTTPS-> HTTP-->SSL-->TCP-->IP\n```\n\n　　HTTPS协议的**主要作用**：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。\n\n## 2. HTTP与HTTPS的区别\n\n　　HTTP协议传输的数据都是未加密的，也就是明文的，因此使用**HTTP协议传输隐私信息非常不安全**，为了保证这些隐私数据能加密传输，于是网景公司设计了SSL（Secure Sockets Layer）协议用于对HTTP协议传输的数据进行加密，从而就诞生了HTTPS。简单来说，**HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比HTTP协议安全**。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/https-key-lvalue.jpg)\n\n　　**HTTPS和HTTP的区别:**\n\n　　1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。\n\n　　2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。\n\n　　3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。\n\n　　4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。\n\n## 3. HTTPS工作原理\n\n　　我们都知道HTTPS能够加密信息，以免敏感信息被第三方获取，所以很多银行网站或电子邮箱等等安全级别较高的服务都会采用HTTPS协议。\n\n**SSL协议的握手过程**\n\n分为五个步骤:\n\n第一步，客户端给出SSL协议版本号、一个客户端生成的随机数1（Client random），以及客户端支持的加密方法。\n\n第二步，服务端根据客服端支持的加密方法选出双方使用的加密方法，并给出数字证书、以及一个服务器生成的随机数2（Server random）。\n\n第三步，客户端确认数字证书有效，然后生成一个新的随机数3（Premaster secret），并使用数字证书中的公钥，加密这个随机数，发给服务端。\n\n第四步，服务端使用自己的私钥，获取客户端发来的随机数3（即Premaster secret）。到这里双方都拥有三个随机数了，为什么要使用三个随机数呢？这是因为 SSL/TLS 握手过程的数据都是明文传输的，并且多个随机数种子来生成秘钥不容易被暴力破解出来。 \n\n第五步，客户端和服务端根据约定的加密方法，使用前面的三个随机数，生成\"对话密钥\"（session key），用来加密接下来的整个对话过程。\n\n第六步，客户端将前面的握手消息生成摘要再用协商好的秘钥加密，这是客户端发出的第一条加密消息。服务端接收后会用秘钥解密，能解出来说明前面协商出来的秘钥是一致的。 \n\n第七步，服务端也会将握手过程的消息生成摘要再用秘钥加密，这是服务端发出的第一条加密消息。客户端接收后会用秘钥解密，能解出来说明协商的秘钥是一致的。 \n\n到这里，双方已安全地协商出了同一份秘钥，所有的应用层数据都会用这个秘钥加密后再通过 TCP 进行可靠传输。 \n\n  ![https握手过程](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/https-ssl-connection.png)\n\n## 4. HTTPS的优缺点\n\n　　**优点:**\n\n　　（1）使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；\n\n　　（2）HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。\n\n　　（3）HTTPS是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。\n\n　　（4）谷歌曾在2014年8月份调整搜索引擎算法，并称“比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中的排名将会更高”\n\n　　**缺点:**\n\n　　（1）HTTPS协议握手阶段比较费时，会使页面的加载时间延长近50%，增加10%到20%的耗电；\n\n　　（2）HTTPS连接缓存不如HTTP高效，会增加数据开销和功耗，甚至已有的安全措施也会因此而受到影响；\n\n　　（3）SSL证书需要钱，功能越强大的证书费用越高，个人网站、小网站没有必要一般不会用。\n\n　   （4）SSL证书通常需要绑定IP，不能在同一IP上绑定多个域名，IPv4资源不可能支撑这个消耗。\n\n　　（5）HTTPS协议的加密范围也比较有限，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用。最关键的，SSL证书的信用链体系并不安全，特别是在某些国家可以控制CA根证书的情况下，中间人攻击一样可行。\n\n## 5. HTTP响应状态码\n\n状态码以3位数字和原因短语组成，例如 200 OK 。\n\n数字的第一位指定了响应类型，后两位无分类。响应类别一共有5种：\n\n- 1XX Informational(信息性状态码)\n- 2XX Success(成功状态码)\n- 3XX Redirection(重定向状态码)\n- 4XX Client Error(客户端错误状态码)\n- 5XX Server Error(服务器错误状态码)\n\n```java\n200：请求成功      处理方式：获得响应的内容，进行处理 \n\n201：请求完成，结果是创建了新资源。新创建资源的URI可在响应的实体中得到    处理方式：爬虫中不会遇到 \n\n202：请求被接受，但处理尚未完成    处理方式：阻塞等待 \n\n204：服务器端已经实现了请求，但是没有返回新的信 息。如果客户是用户代理，则无须为此更新自身的文档视图。    处理方式：丢弃\n\n300：该状态码不被HTTP/1.0的应用程序直接使用， 只是作为3XX类型回应的默认解释。存在多个可用的被请求资源。    处理方式：若程序中能够处理，则进行进一步处理，如果程序中不能处理，则丢弃\n301：请求到的资源都会分配一个永久的URL，这样就可以在将来通过该URL来访问此资源    处理方式：重定向到分配的URL\n302：请求到的资源在一个不同的URL处临时保存     处理方式：重定向到临时的URL \n\n304 请求的资源未更新     处理方式：丢弃 \n\n400 非法请求     处理方式：丢弃 \n\n401 未授权     处理方式：丢弃 \n\n403 禁止     处理方式：丢弃 \n\n404 没有找到     处理方式：丢弃 \n\n5XX 回应代码以“5”开头的状态码表示服务器端发现自己出现错误，不能继续执行请求    处理方式：丢弃\n```\n\n## 6. HTTP长连接、短连接\n\n在HTTP/1.0中默认使用短连接。也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个HTML或其他类型的Web页中包含有其他的Web资源（如JavaScript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话。\n\n而从HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入这行代码：\n\n```\nConnection:keep-alive\n```\n\n在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。\n\n**HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。**\n\n**https加密是在传输层** \n\nhttps报文在被包装成tcp报文的时候完成加密的过程，无论是https的**header域**也好，body域也罢都是会被加密的。\n\n当使用**tcpdump或者wireshark**之类的tcp层工具抓包，获取是加密的内容，而如果用应用层抓包，使用**Charels(Mac)、Fildder(Windows)**抓包工具，那当然看到是明文的。\n\n## 7. 参考\n\n`https://www.cnblogs.com/qiangxia/p/5261813.html`\n\n`https://www.cnblogs.com/wqhwe/p/5407468.html`\n\n`http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html`","source":"_posts/computer_network/four-http-https.md","raw":"---\ntitle: 计算机网络(四)--HTTP与HTTPS\ntags:\n  - 计算机网络\n  - HTTP\ncategories:\n  - 计算机网络\nabbrlink: 21307\ndate: 2018-11-12 22:00:00\n---\n\n本文主要介绍了`HTTP`、`HTTPS`的基本概念及两者的区别，`HTTPS`的工作原理及优缺点，最后介绍了HTTP的响应状态码。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. HTTP和HTTPS基本概念\n\n　　HTTP：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。\n\n　　HTTPS：是以**安全**为目标的HTTP通道，简单讲是**HTTP的安全版**，即HTTP下加入**SSL层**，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。\n\n```java\nHTTP--> HTTP-->TCP-->IP\nHTTPS-> HTTP-->SSL-->TCP-->IP\n```\n\n　　HTTPS协议的**主要作用**：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。\n\n## 2. HTTP与HTTPS的区别\n\n　　HTTP协议传输的数据都是未加密的，也就是明文的，因此使用**HTTP协议传输隐私信息非常不安全**，为了保证这些隐私数据能加密传输，于是网景公司设计了SSL（Secure Sockets Layer）协议用于对HTTP协议传输的数据进行加密，从而就诞生了HTTPS。简单来说，**HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比HTTP协议安全**。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/https-key-lvalue.jpg)\n\n　　**HTTPS和HTTP的区别:**\n\n　　1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。\n\n　　2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。\n\n　　3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。\n\n　　4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。\n\n## 3. HTTPS工作原理\n\n　　我们都知道HTTPS能够加密信息，以免敏感信息被第三方获取，所以很多银行网站或电子邮箱等等安全级别较高的服务都会采用HTTPS协议。\n\n**SSL协议的握手过程**\n\n分为五个步骤:\n\n第一步，客户端给出SSL协议版本号、一个客户端生成的随机数1（Client random），以及客户端支持的加密方法。\n\n第二步，服务端根据客服端支持的加密方法选出双方使用的加密方法，并给出数字证书、以及一个服务器生成的随机数2（Server random）。\n\n第三步，客户端确认数字证书有效，然后生成一个新的随机数3（Premaster secret），并使用数字证书中的公钥，加密这个随机数，发给服务端。\n\n第四步，服务端使用自己的私钥，获取客户端发来的随机数3（即Premaster secret）。到这里双方都拥有三个随机数了，为什么要使用三个随机数呢？这是因为 SSL/TLS 握手过程的数据都是明文传输的，并且多个随机数种子来生成秘钥不容易被暴力破解出来。 \n\n第五步，客户端和服务端根据约定的加密方法，使用前面的三个随机数，生成\"对话密钥\"（session key），用来加密接下来的整个对话过程。\n\n第六步，客户端将前面的握手消息生成摘要再用协商好的秘钥加密，这是客户端发出的第一条加密消息。服务端接收后会用秘钥解密，能解出来说明前面协商出来的秘钥是一致的。 \n\n第七步，服务端也会将握手过程的消息生成摘要再用秘钥加密，这是服务端发出的第一条加密消息。客户端接收后会用秘钥解密，能解出来说明协商的秘钥是一致的。 \n\n到这里，双方已安全地协商出了同一份秘钥，所有的应用层数据都会用这个秘钥加密后再通过 TCP 进行可靠传输。 \n\n  ![https握手过程](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/https-ssl-connection.png)\n\n## 4. HTTPS的优缺点\n\n　　**优点:**\n\n　　（1）使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；\n\n　　（2）HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。\n\n　　（3）HTTPS是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。\n\n　　（4）谷歌曾在2014年8月份调整搜索引擎算法，并称“比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中的排名将会更高”\n\n　　**缺点:**\n\n　　（1）HTTPS协议握手阶段比较费时，会使页面的加载时间延长近50%，增加10%到20%的耗电；\n\n　　（2）HTTPS连接缓存不如HTTP高效，会增加数据开销和功耗，甚至已有的安全措施也会因此而受到影响；\n\n　　（3）SSL证书需要钱，功能越强大的证书费用越高，个人网站、小网站没有必要一般不会用。\n\n　   （4）SSL证书通常需要绑定IP，不能在同一IP上绑定多个域名，IPv4资源不可能支撑这个消耗。\n\n　　（5）HTTPS协议的加密范围也比较有限，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用。最关键的，SSL证书的信用链体系并不安全，特别是在某些国家可以控制CA根证书的情况下，中间人攻击一样可行。\n\n## 5. HTTP响应状态码\n\n状态码以3位数字和原因短语组成，例如 200 OK 。\n\n数字的第一位指定了响应类型，后两位无分类。响应类别一共有5种：\n\n- 1XX Informational(信息性状态码)\n- 2XX Success(成功状态码)\n- 3XX Redirection(重定向状态码)\n- 4XX Client Error(客户端错误状态码)\n- 5XX Server Error(服务器错误状态码)\n\n```java\n200：请求成功      处理方式：获得响应的内容，进行处理 \n\n201：请求完成，结果是创建了新资源。新创建资源的URI可在响应的实体中得到    处理方式：爬虫中不会遇到 \n\n202：请求被接受，但处理尚未完成    处理方式：阻塞等待 \n\n204：服务器端已经实现了请求，但是没有返回新的信 息。如果客户是用户代理，则无须为此更新自身的文档视图。    处理方式：丢弃\n\n300：该状态码不被HTTP/1.0的应用程序直接使用， 只是作为3XX类型回应的默认解释。存在多个可用的被请求资源。    处理方式：若程序中能够处理，则进行进一步处理，如果程序中不能处理，则丢弃\n301：请求到的资源都会分配一个永久的URL，这样就可以在将来通过该URL来访问此资源    处理方式：重定向到分配的URL\n302：请求到的资源在一个不同的URL处临时保存     处理方式：重定向到临时的URL \n\n304 请求的资源未更新     处理方式：丢弃 \n\n400 非法请求     处理方式：丢弃 \n\n401 未授权     处理方式：丢弃 \n\n403 禁止     处理方式：丢弃 \n\n404 没有找到     处理方式：丢弃 \n\n5XX 回应代码以“5”开头的状态码表示服务器端发现自己出现错误，不能继续执行请求    处理方式：丢弃\n```\n\n## 6. HTTP长连接、短连接\n\n在HTTP/1.0中默认使用短连接。也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个HTML或其他类型的Web页中包含有其他的Web资源（如JavaScript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话。\n\n而从HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入这行代码：\n\n```\nConnection:keep-alive\n```\n\n在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。\n\n**HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。**\n\n**https加密是在传输层** \n\nhttps报文在被包装成tcp报文的时候完成加密的过程，无论是https的**header域**也好，body域也罢都是会被加密的。\n\n当使用**tcpdump或者wireshark**之类的tcp层工具抓包，获取是加密的内容，而如果用应用层抓包，使用**Charels(Mac)、Fildder(Windows)**抓包工具，那当然看到是明文的。\n\n## 7. 参考\n\n`https://www.cnblogs.com/qiangxia/p/5261813.html`\n\n`https://www.cnblogs.com/wqhwe/p/5407468.html`\n\n`http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html`","slug":"computer_network/four-http-https","published":1,"updated":"2019-02-06T01:18:26.969Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv4a4003k0ww484do46lk","content":"<p>本文主要介绍了<code>HTTP</code>、<code>HTTPS</code>的基本概念及两者的区别，<code>HTTPS</code>的工作原理及优缺点，最后介绍了HTTP的响应状态码。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-HTTP和HTTPS基本概念\"><a href=\"#1-HTTP和HTTPS基本概念\" class=\"headerlink\" title=\"1. HTTP和HTTPS基本概念\"></a>1. HTTP和HTTPS基本概念</h2><p>　　HTTP：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。</p>\n<p>　　HTTPS：是以<strong>安全</strong>为目标的HTTP通道，简单讲是<strong>HTTP的安全版</strong>，即HTTP下加入<strong>SSL层</strong>，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP--&gt; HTTP--&gt;TCP--&gt;IP</span><br><span class=\"line\">HTTPS-&gt; HTTP--&gt;SSL--&gt;TCP--&gt;IP</span><br></pre></td></tr></table></figure>\n<p>　　HTTPS协议的<strong>主要作用</strong>：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。</p>\n<h2 id=\"2-HTTP与HTTPS的区别\"><a href=\"#2-HTTP与HTTPS的区别\" class=\"headerlink\" title=\"2. HTTP与HTTPS的区别\"></a>2. HTTP与HTTPS的区别</h2><p>　　HTTP协议传输的数据都是未加密的，也就是明文的，因此使用<strong>HTTP协议传输隐私信息非常不安全</strong>，为了保证这些隐私数据能加密传输，于是网景公司设计了SSL（Secure Sockets Layer）协议用于对HTTP协议传输的数据进行加密，从而就诞生了HTTPS。简单来说，<strong>HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比HTTP协议安全</strong>。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/https-key-lvalue.jpg\" alt=\"\"></p>\n<p>　　<strong>HTTPS和HTTP的区别:</strong></p>\n<p>　　1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。</p>\n<p>　　2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</p>\n<p>　　3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</p>\n<p>　　4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p>\n<h2 id=\"3-HTTPS工作原理\"><a href=\"#3-HTTPS工作原理\" class=\"headerlink\" title=\"3. HTTPS工作原理\"></a>3. HTTPS工作原理</h2><p>　　我们都知道HTTPS能够加密信息，以免敏感信息被第三方获取，所以很多银行网站或电子邮箱等等安全级别较高的服务都会采用HTTPS协议。</p>\n<p><strong>SSL协议的握手过程</strong></p>\n<p>分为五个步骤:</p>\n<p>第一步，客户端给出SSL协议版本号、一个客户端生成的随机数1（Client random），以及客户端支持的加密方法。</p>\n<p>第二步，服务端根据客服端支持的加密方法选出双方使用的加密方法，并给出数字证书、以及一个服务器生成的随机数2（Server random）。</p>\n<p>第三步，客户端确认数字证书有效，然后生成一个新的随机数3（Premaster secret），并使用数字证书中的公钥，加密这个随机数，发给服务端。</p>\n<p>第四步，服务端使用自己的私钥，获取客户端发来的随机数3（即Premaster secret）。到这里双方都拥有三个随机数了，为什么要使用三个随机数呢？这是因为 SSL/TLS 握手过程的数据都是明文传输的，并且多个随机数种子来生成秘钥不容易被暴力破解出来。 </p>\n<p>第五步，客户端和服务端根据约定的加密方法，使用前面的三个随机数，生成”对话密钥”（session key），用来加密接下来的整个对话过程。</p>\n<p>第六步，客户端将前面的握手消息生成摘要再用协商好的秘钥加密，这是客户端发出的第一条加密消息。服务端接收后会用秘钥解密，能解出来说明前面协商出来的秘钥是一致的。 </p>\n<p>第七步，服务端也会将握手过程的消息生成摘要再用秘钥加密，这是服务端发出的第一条加密消息。客户端接收后会用秘钥解密，能解出来说明协商的秘钥是一致的。 </p>\n<p>到这里，双方已安全地协商出了同一份秘钥，所有的应用层数据都会用这个秘钥加密后再通过 TCP 进行可靠传输。 </p>\n<p>  <img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/https-ssl-connection.png\" alt=\"https握手过程\"></p>\n<h2 id=\"4-HTTPS的优缺点\"><a href=\"#4-HTTPS的优缺点\" class=\"headerlink\" title=\"4. HTTPS的优缺点\"></a>4. HTTPS的优缺点</h2><p>　　<strong>优点:</strong></p>\n<p>　　（1）使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；</p>\n<p>　　（2）HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。</p>\n<p>　　（3）HTTPS是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。</p>\n<p>　　（4）谷歌曾在2014年8月份调整搜索引擎算法，并称“比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中的排名将会更高”</p>\n<p>　　<strong>缺点:</strong></p>\n<p>　　（1）HTTPS协议握手阶段比较费时，会使页面的加载时间延长近50%，增加10%到20%的耗电；</p>\n<p>　　（2）HTTPS连接缓存不如HTTP高效，会增加数据开销和功耗，甚至已有的安全措施也会因此而受到影响；</p>\n<p>　　（3）SSL证书需要钱，功能越强大的证书费用越高，个人网站、小网站没有必要一般不会用。</p>\n<p>　   （4）SSL证书通常需要绑定IP，不能在同一IP上绑定多个域名，IPv4资源不可能支撑这个消耗。</p>\n<p>　　（5）HTTPS协议的加密范围也比较有限，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用。最关键的，SSL证书的信用链体系并不安全，特别是在某些国家可以控制CA根证书的情况下，中间人攻击一样可行。</p>\n<h2 id=\"5-HTTP响应状态码\"><a href=\"#5-HTTP响应状态码\" class=\"headerlink\" title=\"5. HTTP响应状态码\"></a>5. HTTP响应状态码</h2><p>状态码以3位数字和原因短语组成，例如 200 OK 。</p>\n<p>数字的第一位指定了响应类型，后两位无分类。响应类别一共有5种：</p>\n<ul>\n<li>1XX Informational(信息性状态码)</li>\n<li>2XX Success(成功状态码)</li>\n<li>3XX Redirection(重定向状态码)</li>\n<li>4XX Client Error(客户端错误状态码)</li>\n<li>5XX Server Error(服务器错误状态码)</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">200</span>：请求成功      处理方式：获得响应的内容，进行处理 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">201</span>：请求完成，结果是创建了新资源。新创建资源的URI可在响应的实体中得到    处理方式：爬虫中不会遇到 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">202</span>：请求被接受，但处理尚未完成    处理方式：阻塞等待 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">204</span>：服务器端已经实现了请求，但是没有返回新的信 息。如果客户是用户代理，则无须为此更新自身的文档视图。    处理方式：丢弃</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">300</span>：该状态码不被HTTP/<span class=\"number\">1.0</span>的应用程序直接使用， 只是作为<span class=\"number\">3</span>XX类型回应的默认解释。存在多个可用的被请求资源。    处理方式：若程序中能够处理，则进行进一步处理，如果程序中不能处理，则丢弃</span><br><span class=\"line\"><span class=\"number\">301</span>：请求到的资源都会分配一个永久的URL，这样就可以在将来通过该URL来访问此资源    处理方式：重定向到分配的URL</span><br><span class=\"line\"><span class=\"number\">302</span>：请求到的资源在一个不同的URL处临时保存     处理方式：重定向到临时的URL </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">304</span> 请求的资源未更新     处理方式：丢弃 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">400</span> 非法请求     处理方式：丢弃 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">401</span> 未授权     处理方式：丢弃 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">403</span> 禁止     处理方式：丢弃 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">404</span> 没有找到     处理方式：丢弃 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5</span>XX 回应代码以“<span class=\"number\">5</span>”开头的状态码表示服务器端发现自己出现错误，不能继续执行请求    处理方式：丢弃</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-HTTP长连接、短连接\"><a href=\"#6-HTTP长连接、短连接\" class=\"headerlink\" title=\"6. HTTP长连接、短连接\"></a>6. HTTP长连接、短连接</h2><p>在HTTP/1.0中默认使用短连接。也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个HTML或其他类型的Web页中包含有其他的Web资源（如JavaScript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话。</p>\n<p>而从HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入这行代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connection:keep-alive</span><br></pre></td></tr></table></figure>\n<p>在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。</p>\n<p><strong>HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。</strong></p>\n<p><strong>https加密是在传输层</strong> </p>\n<p>https报文在被包装成tcp报文的时候完成加密的过程，无论是https的<strong>header域</strong>也好，body域也罢都是会被加密的。</p>\n<p>当使用<strong>tcpdump或者wireshark</strong>之类的tcp层工具抓包，获取是加密的内容，而如果用应用层抓包，使用<strong>Charels(Mac)、Fildder(Windows)</strong>抓包工具，那当然看到是明文的。</p>\n<h2 id=\"7-参考\"><a href=\"#7-参考\" class=\"headerlink\" title=\"7. 参考\"></a>7. 参考</h2><p><code>https://www.cnblogs.com/qiangxia/p/5261813.html</code></p>\n<p><code>https://www.cnblogs.com/wqhwe/p/5407468.html</code></p>\n<p><code>http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html</code></p>\n","site":{"data":{}},"excerpt":"<p>本文主要介绍了<code>HTTP</code>、<code>HTTPS</code>的基本概念及两者的区别，<code>HTTPS</code>的工作原理及优缺点，最后介绍了HTTP的响应状态码。</p>","more":"<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-HTTP和HTTPS基本概念\"><a href=\"#1-HTTP和HTTPS基本概念\" class=\"headerlink\" title=\"1. HTTP和HTTPS基本概念\"></a>1. HTTP和HTTPS基本概念</h2><p>　　HTTP：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。</p>\n<p>　　HTTPS：是以<strong>安全</strong>为目标的HTTP通道，简单讲是<strong>HTTP的安全版</strong>，即HTTP下加入<strong>SSL层</strong>，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP--&gt; HTTP--&gt;TCP--&gt;IP</span><br><span class=\"line\">HTTPS-&gt; HTTP--&gt;SSL--&gt;TCP--&gt;IP</span><br></pre></td></tr></table></figure>\n<p>　　HTTPS协议的<strong>主要作用</strong>：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。</p>\n<h2 id=\"2-HTTP与HTTPS的区别\"><a href=\"#2-HTTP与HTTPS的区别\" class=\"headerlink\" title=\"2. HTTP与HTTPS的区别\"></a>2. HTTP与HTTPS的区别</h2><p>　　HTTP协议传输的数据都是未加密的，也就是明文的，因此使用<strong>HTTP协议传输隐私信息非常不安全</strong>，为了保证这些隐私数据能加密传输，于是网景公司设计了SSL（Secure Sockets Layer）协议用于对HTTP协议传输的数据进行加密，从而就诞生了HTTPS。简单来说，<strong>HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比HTTP协议安全</strong>。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/https-key-lvalue.jpg\" alt=\"\"></p>\n<p>　　<strong>HTTPS和HTTP的区别:</strong></p>\n<p>　　1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。</p>\n<p>　　2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</p>\n<p>　　3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</p>\n<p>　　4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p>\n<h2 id=\"3-HTTPS工作原理\"><a href=\"#3-HTTPS工作原理\" class=\"headerlink\" title=\"3. HTTPS工作原理\"></a>3. HTTPS工作原理</h2><p>　　我们都知道HTTPS能够加密信息，以免敏感信息被第三方获取，所以很多银行网站或电子邮箱等等安全级别较高的服务都会采用HTTPS协议。</p>\n<p><strong>SSL协议的握手过程</strong></p>\n<p>分为五个步骤:</p>\n<p>第一步，客户端给出SSL协议版本号、一个客户端生成的随机数1（Client random），以及客户端支持的加密方法。</p>\n<p>第二步，服务端根据客服端支持的加密方法选出双方使用的加密方法，并给出数字证书、以及一个服务器生成的随机数2（Server random）。</p>\n<p>第三步，客户端确认数字证书有效，然后生成一个新的随机数3（Premaster secret），并使用数字证书中的公钥，加密这个随机数，发给服务端。</p>\n<p>第四步，服务端使用自己的私钥，获取客户端发来的随机数3（即Premaster secret）。到这里双方都拥有三个随机数了，为什么要使用三个随机数呢？这是因为 SSL/TLS 握手过程的数据都是明文传输的，并且多个随机数种子来生成秘钥不容易被暴力破解出来。 </p>\n<p>第五步，客户端和服务端根据约定的加密方法，使用前面的三个随机数，生成”对话密钥”（session key），用来加密接下来的整个对话过程。</p>\n<p>第六步，客户端将前面的握手消息生成摘要再用协商好的秘钥加密，这是客户端发出的第一条加密消息。服务端接收后会用秘钥解密，能解出来说明前面协商出来的秘钥是一致的。 </p>\n<p>第七步，服务端也会将握手过程的消息生成摘要再用秘钥加密，这是服务端发出的第一条加密消息。客户端接收后会用秘钥解密，能解出来说明协商的秘钥是一致的。 </p>\n<p>到这里，双方已安全地协商出了同一份秘钥，所有的应用层数据都会用这个秘钥加密后再通过 TCP 进行可靠传输。 </p>\n<p>  <img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/https-ssl-connection.png\" alt=\"https握手过程\"></p>\n<h2 id=\"4-HTTPS的优缺点\"><a href=\"#4-HTTPS的优缺点\" class=\"headerlink\" title=\"4. HTTPS的优缺点\"></a>4. HTTPS的优缺点</h2><p>　　<strong>优点:</strong></p>\n<p>　　（1）使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；</p>\n<p>　　（2）HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。</p>\n<p>　　（3）HTTPS是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。</p>\n<p>　　（4）谷歌曾在2014年8月份调整搜索引擎算法，并称“比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中的排名将会更高”</p>\n<p>　　<strong>缺点:</strong></p>\n<p>　　（1）HTTPS协议握手阶段比较费时，会使页面的加载时间延长近50%，增加10%到20%的耗电；</p>\n<p>　　（2）HTTPS连接缓存不如HTTP高效，会增加数据开销和功耗，甚至已有的安全措施也会因此而受到影响；</p>\n<p>　　（3）SSL证书需要钱，功能越强大的证书费用越高，个人网站、小网站没有必要一般不会用。</p>\n<p>　   （4）SSL证书通常需要绑定IP，不能在同一IP上绑定多个域名，IPv4资源不可能支撑这个消耗。</p>\n<p>　　（5）HTTPS协议的加密范围也比较有限，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用。最关键的，SSL证书的信用链体系并不安全，特别是在某些国家可以控制CA根证书的情况下，中间人攻击一样可行。</p>\n<h2 id=\"5-HTTP响应状态码\"><a href=\"#5-HTTP响应状态码\" class=\"headerlink\" title=\"5. HTTP响应状态码\"></a>5. HTTP响应状态码</h2><p>状态码以3位数字和原因短语组成，例如 200 OK 。</p>\n<p>数字的第一位指定了响应类型，后两位无分类。响应类别一共有5种：</p>\n<ul>\n<li>1XX Informational(信息性状态码)</li>\n<li>2XX Success(成功状态码)</li>\n<li>3XX Redirection(重定向状态码)</li>\n<li>4XX Client Error(客户端错误状态码)</li>\n<li>5XX Server Error(服务器错误状态码)</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">200</span>：请求成功      处理方式：获得响应的内容，进行处理 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">201</span>：请求完成，结果是创建了新资源。新创建资源的URI可在响应的实体中得到    处理方式：爬虫中不会遇到 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">202</span>：请求被接受，但处理尚未完成    处理方式：阻塞等待 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">204</span>：服务器端已经实现了请求，但是没有返回新的信 息。如果客户是用户代理，则无须为此更新自身的文档视图。    处理方式：丢弃</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">300</span>：该状态码不被HTTP/<span class=\"number\">1.0</span>的应用程序直接使用， 只是作为<span class=\"number\">3</span>XX类型回应的默认解释。存在多个可用的被请求资源。    处理方式：若程序中能够处理，则进行进一步处理，如果程序中不能处理，则丢弃</span><br><span class=\"line\"><span class=\"number\">301</span>：请求到的资源都会分配一个永久的URL，这样就可以在将来通过该URL来访问此资源    处理方式：重定向到分配的URL</span><br><span class=\"line\"><span class=\"number\">302</span>：请求到的资源在一个不同的URL处临时保存     处理方式：重定向到临时的URL </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">304</span> 请求的资源未更新     处理方式：丢弃 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">400</span> 非法请求     处理方式：丢弃 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">401</span> 未授权     处理方式：丢弃 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">403</span> 禁止     处理方式：丢弃 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">404</span> 没有找到     处理方式：丢弃 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5</span>XX 回应代码以“<span class=\"number\">5</span>”开头的状态码表示服务器端发现自己出现错误，不能继续执行请求    处理方式：丢弃</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-HTTP长连接、短连接\"><a href=\"#6-HTTP长连接、短连接\" class=\"headerlink\" title=\"6. HTTP长连接、短连接\"></a>6. HTTP长连接、短连接</h2><p>在HTTP/1.0中默认使用短连接。也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个HTML或其他类型的Web页中包含有其他的Web资源（如JavaScript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话。</p>\n<p>而从HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入这行代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connection:keep-alive</span><br></pre></td></tr></table></figure>\n<p>在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。</p>\n<p><strong>HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。</strong></p>\n<p><strong>https加密是在传输层</strong> </p>\n<p>https报文在被包装成tcp报文的时候完成加密的过程，无论是https的<strong>header域</strong>也好，body域也罢都是会被加密的。</p>\n<p>当使用<strong>tcpdump或者wireshark</strong>之类的tcp层工具抓包，获取是加密的内容，而如果用应用层抓包，使用<strong>Charels(Mac)、Fildder(Windows)</strong>抓包工具，那当然看到是明文的。</p>\n<h2 id=\"7-参考\"><a href=\"#7-参考\" class=\"headerlink\" title=\"7. 参考\"></a>7. 参考</h2><p><code>https://www.cnblogs.com/qiangxia/p/5261813.html</code></p>\n<p><code>https://www.cnblogs.com/wqhwe/p/5407468.html</code></p>\n<p><code>http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html</code></p>"},{"title":"计算机网络(三)--TCP如何保证传输可靠性","abbrlink":18422,"date":"2018-11-08T14:00:00.000Z","_content":"\n本文主要叙述了TCP协议是如何保证传输的可靠性的，主要保证手段包括：`序列号`、`校验和`\n\n、`流量控制`、`拥塞控制`、`停止等待协议`、`超时重传`、`连接管理`等。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n>\n\n## 1. 主要保证方式\n\n1. **序列号:**应用数据被分割成 TCP 认为最适合发送的数据块,同时给每一个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层。\n2. **校验和：** TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到端的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。\n3. **流量控制：** TCP 连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议。 （TCP 利用滑动窗口实现流量控制）\n4. **拥塞控制：** 当网络拥塞时，减少数据的发送。\n5. **停止等待协议(确认应答)** 也是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。\n6. **超时重传：** 当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。\n7. **连接管理:** 三次握手四次挥手,保证可靠的连接，是保证可靠性的前提。 \n\n## 2. 停止等待协议\n\n- 停止等待协议是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组；\n- 在停止等待协议中，若接收方收到重复分组，就丢弃该分组，但同时还要发送确认；\n\n**1) 无差错情况:**\n\n![normal](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-send-normal.jpg)\n\n发送方发送分组,接收方在规定时间内收到,并且回复确认.发送方再次发送。\n\n**2) 出现差错情况（超时重传）:** [![timeout](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-send-tiemout.jpg)\n\n停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重转时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为 **自动重传请求 ARQ** 。另外在停止等待协议中若收到重复分组，就丢弃该分组，但同时还要发送确认。**连续 ARQ 协议** 可提高信道利用率。发送维持一个发送窗口，凡位于发送窗口内的分组可连续发送出去，而不需要等待对方确认。接收方一般采用累积确认，对按序到达的最后一个分组发送确认，表明到这个分组位置的所有分组都已经正确收到了。\n\n**3) 确认丢失和确认迟到**\n\n- **确认丢失**：当确认消息在传输过程丢失 ![lost](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-send-lost.jpg)A发送M1消息，B收到后，B向A发送了一个M1确认消息，但却在传输过程中丢失。而A并不知道，在超时计时过后，A重传M1消息，B再次收到该消息后采取以下两点措施：\n  1. 丢弃这个重复的M1消息，不向上层交付。\n  2. 向A发送确认消息。（不会认为已经发送过了，就不再发送。A能重传，就证明B的确认消息丢失）。\n- **确认迟到** ：确认消息在传输过程中迟到 [![late](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-send-late.jpg)A发送M1消息，B收到并发送确认。在超时时间内没有收到确认消息，A重传M1消息，B仍然收到并继续发送确认消息（B收到了2份M1）。此时A收到了B第二次发送的确认消息。接着发送其他数据。过了一会，A收到了B第一次发送的对M1的确认消息（A也收到了2份确认消息）。处理如下：\n  1. A收到重复的确认后，直接丢弃。\n  2. B收到重复的M1后，也直接丢弃重复的M1。\n\n## 3. ARQ协议\n\n即自动重传请求 ARQ 协议(Automatic Repeat reQuest )，停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重转时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为自动重传请求ARQ。\n\n**优点：** 简单\n\n**缺点：** 信道利用率低\n\n## 4. 连续ARQ协议\n\n连续 ARQ 协议可提高信道利用率。发送方维持一个发送窗口，凡位于发送窗口内的分组可以连续发送出去，而不需要等待对方确认。接收方一般采用累计确认，对按序到达的最后一个分组发送确认，表明到这个分组为止的所有分组都已经正确收到了。\n\n**优点：** 信道利用率高，容易实现，即使确认丢失，也不必重传。\n\n**缺点：** 不能向发送方反映出接收方已经正确收到的所有分组的信息。 比如：发送方发送了 5条 消息，中间第三条丢失（3号），这时接收方只能对前两个发送确认。发送方无法知道后三个分组的下落，而只好把后三个全部重传一次。这也叫 Go-Back-N（回退 N），表示需要退回来重传已经发送过的 N 个消息。\n\n## 5. 流量控制\n\n- 滑动窗口（Sliding window）是一种流量控制技术。早期的网络通信中，通信双方不会考虑网络的拥挤情况直接发送数据。由于大家不知道网络拥塞状况，同时发送数据，导致中间节点阻塞掉包，谁也发不了数据，所以就有了滑动窗口机制来解决此问题。\n- TCP 中采用滑动窗口来进行传输控制，滑动窗口的大小意味着接收方还有多大的缓冲区可以用于接收数据。发送方可以通过滑动窗口的大小来确定应该发送多少字节的数据。当滑动窗口为 0 时，发送方一般不能再发送数据报，但有两种情况除外，一种情况是可以发送紧急数据，例如，允许用户终止在远端机上的运行进程。另一种情况是发送方可以发送一个 1 字节的数据报来通知接收方重新声明它希望接收的下一字节及发送方的滑动窗口大小。\n- **TCP 利用滑动窗口实现流量控制的机制。**\n- **流量控制是为了控制发送方发送速率，保证接收方来得及接收。**\n- 接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。\n\n## 6. 拥塞控制\n\n**防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。**\n\n 拥塞：即对资源的需求超过了可用的资源。若网络中许多资源同时供应不足，网络的性能就要明显变坏，整个网络的吞吐量随之负荷的增大而下降 \n\n拥塞控制所要做的都有一个**前提：网络能够承受现有的网络负荷。**拥塞控制是一个**全局性的过程**，涉及到所有的主机、路由器，以及与降低网络传输性能有关的所有因素。\n\n几种拥塞控制方法\n\n​    慢开始( slow-start )、拥塞避免( congestion avoidance )、快重传( fast retransmit )和快恢复( fast recovery )。\n\n**慢开始和拥塞避免**\n\n​    发送方维持一个拥塞窗口 cwnd ( congestion window )的状态变量。拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化。发送方让自己的发送窗口等于拥塞。\n\n​    发送方控制拥塞窗口的原则是：只要网络没有出现拥塞，拥塞窗口就再增大一些，以便把更多的分组发送出去。但只要网络出现拥塞，拥塞窗口就减小一些，以减少注入到网络中的分组数。\n\n **慢开始算法：**当主机开始发送数据时，如果立即所大量数据字节注入到网络，那么就有可能引起网络拥塞，因为现在并不清楚网络的负荷情况。因此，较好的方法是 先探测一下，即由小到大逐渐增大发送窗口，也就是说，由小到大逐渐增大拥塞窗口数值。 \n\n**拥塞避免算法：**让拥塞窗口cwnd缓慢地增大，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍。这样拥塞窗口cwnd按线性规律缓慢增长，比慢开始算法的拥塞窗口增长速率缓慢得多。 \n\n**快重传与快恢复**\n\n 在 TCP/IP 中，快速重传和恢复（fast retransmit and recovery，FRR）是一种拥塞控制算法，它能快速恢复丢失的数据包。没有 FRR，如果数据包丢失了，TCP 将会使用定时器来要求传输暂停。在暂停的这段时间内，没有新的或复制的数据包被发送。有了 FRR，如果接收机接收到一个不按顺序的数据段，它会立即给发送机发送一个重复确认。如果发送机接收到三个重复确认，它会假定确认件指出的数据段丢失了，并立即重传这些丢失的数据段。有了 FRR，就不会因为重传时要求的暂停被耽误。 　当有单独的数据包丢失时，快速重传和恢复（FRR）能最有效地工作。当有多个数据信息包在某一段很短的时间内丢失时，它则不能很有效地工作。  \n\n## 7.参考\n\n`https://blog.csdn.net/liuchenxia8/article/details/80428157`\n\n`https://blog.csdn.net/yangbodong22011/article/details/48473183`\n\n\n\n","source":"_posts/computer_network/three-tcp-reliability.md","raw":"---\ntitle: 计算机网络(三)--TCP如何保证传输可靠性\ntags:\n  - 计算机网络\n  - TCP/IP\ncategories:\n  - 计算机网络\nabbrlink: 18422\ndate: 2018-11-08 22:00:00\n---\n\n本文主要叙述了TCP协议是如何保证传输的可靠性的，主要保证手段包括：`序列号`、`校验和`\n\n、`流量控制`、`拥塞控制`、`停止等待协议`、`超时重传`、`连接管理`等。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n>\n\n## 1. 主要保证方式\n\n1. **序列号:**应用数据被分割成 TCP 认为最适合发送的数据块,同时给每一个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层。\n2. **校验和：** TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到端的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。\n3. **流量控制：** TCP 连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议。 （TCP 利用滑动窗口实现流量控制）\n4. **拥塞控制：** 当网络拥塞时，减少数据的发送。\n5. **停止等待协议(确认应答)** 也是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。\n6. **超时重传：** 当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。\n7. **连接管理:** 三次握手四次挥手,保证可靠的连接，是保证可靠性的前提。 \n\n## 2. 停止等待协议\n\n- 停止等待协议是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组；\n- 在停止等待协议中，若接收方收到重复分组，就丢弃该分组，但同时还要发送确认；\n\n**1) 无差错情况:**\n\n![normal](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-send-normal.jpg)\n\n发送方发送分组,接收方在规定时间内收到,并且回复确认.发送方再次发送。\n\n**2) 出现差错情况（超时重传）:** [![timeout](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-send-tiemout.jpg)\n\n停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重转时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为 **自动重传请求 ARQ** 。另外在停止等待协议中若收到重复分组，就丢弃该分组，但同时还要发送确认。**连续 ARQ 协议** 可提高信道利用率。发送维持一个发送窗口，凡位于发送窗口内的分组可连续发送出去，而不需要等待对方确认。接收方一般采用累积确认，对按序到达的最后一个分组发送确认，表明到这个分组位置的所有分组都已经正确收到了。\n\n**3) 确认丢失和确认迟到**\n\n- **确认丢失**：当确认消息在传输过程丢失 ![lost](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-send-lost.jpg)A发送M1消息，B收到后，B向A发送了一个M1确认消息，但却在传输过程中丢失。而A并不知道，在超时计时过后，A重传M1消息，B再次收到该消息后采取以下两点措施：\n  1. 丢弃这个重复的M1消息，不向上层交付。\n  2. 向A发送确认消息。（不会认为已经发送过了，就不再发送。A能重传，就证明B的确认消息丢失）。\n- **确认迟到** ：确认消息在传输过程中迟到 [![late](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-send-late.jpg)A发送M1消息，B收到并发送确认。在超时时间内没有收到确认消息，A重传M1消息，B仍然收到并继续发送确认消息（B收到了2份M1）。此时A收到了B第二次发送的确认消息。接着发送其他数据。过了一会，A收到了B第一次发送的对M1的确认消息（A也收到了2份确认消息）。处理如下：\n  1. A收到重复的确认后，直接丢弃。\n  2. B收到重复的M1后，也直接丢弃重复的M1。\n\n## 3. ARQ协议\n\n即自动重传请求 ARQ 协议(Automatic Repeat reQuest )，停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重转时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为自动重传请求ARQ。\n\n**优点：** 简单\n\n**缺点：** 信道利用率低\n\n## 4. 连续ARQ协议\n\n连续 ARQ 协议可提高信道利用率。发送方维持一个发送窗口，凡位于发送窗口内的分组可以连续发送出去，而不需要等待对方确认。接收方一般采用累计确认，对按序到达的最后一个分组发送确认，表明到这个分组为止的所有分组都已经正确收到了。\n\n**优点：** 信道利用率高，容易实现，即使确认丢失，也不必重传。\n\n**缺点：** 不能向发送方反映出接收方已经正确收到的所有分组的信息。 比如：发送方发送了 5条 消息，中间第三条丢失（3号），这时接收方只能对前两个发送确认。发送方无法知道后三个分组的下落，而只好把后三个全部重传一次。这也叫 Go-Back-N（回退 N），表示需要退回来重传已经发送过的 N 个消息。\n\n## 5. 流量控制\n\n- 滑动窗口（Sliding window）是一种流量控制技术。早期的网络通信中，通信双方不会考虑网络的拥挤情况直接发送数据。由于大家不知道网络拥塞状况，同时发送数据，导致中间节点阻塞掉包，谁也发不了数据，所以就有了滑动窗口机制来解决此问题。\n- TCP 中采用滑动窗口来进行传输控制，滑动窗口的大小意味着接收方还有多大的缓冲区可以用于接收数据。发送方可以通过滑动窗口的大小来确定应该发送多少字节的数据。当滑动窗口为 0 时，发送方一般不能再发送数据报，但有两种情况除外，一种情况是可以发送紧急数据，例如，允许用户终止在远端机上的运行进程。另一种情况是发送方可以发送一个 1 字节的数据报来通知接收方重新声明它希望接收的下一字节及发送方的滑动窗口大小。\n- **TCP 利用滑动窗口实现流量控制的机制。**\n- **流量控制是为了控制发送方发送速率，保证接收方来得及接收。**\n- 接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。\n\n## 6. 拥塞控制\n\n**防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。**\n\n 拥塞：即对资源的需求超过了可用的资源。若网络中许多资源同时供应不足，网络的性能就要明显变坏，整个网络的吞吐量随之负荷的增大而下降 \n\n拥塞控制所要做的都有一个**前提：网络能够承受现有的网络负荷。**拥塞控制是一个**全局性的过程**，涉及到所有的主机、路由器，以及与降低网络传输性能有关的所有因素。\n\n几种拥塞控制方法\n\n​    慢开始( slow-start )、拥塞避免( congestion avoidance )、快重传( fast retransmit )和快恢复( fast recovery )。\n\n**慢开始和拥塞避免**\n\n​    发送方维持一个拥塞窗口 cwnd ( congestion window )的状态变量。拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化。发送方让自己的发送窗口等于拥塞。\n\n​    发送方控制拥塞窗口的原则是：只要网络没有出现拥塞，拥塞窗口就再增大一些，以便把更多的分组发送出去。但只要网络出现拥塞，拥塞窗口就减小一些，以减少注入到网络中的分组数。\n\n **慢开始算法：**当主机开始发送数据时，如果立即所大量数据字节注入到网络，那么就有可能引起网络拥塞，因为现在并不清楚网络的负荷情况。因此，较好的方法是 先探测一下，即由小到大逐渐增大发送窗口，也就是说，由小到大逐渐增大拥塞窗口数值。 \n\n**拥塞避免算法：**让拥塞窗口cwnd缓慢地增大，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍。这样拥塞窗口cwnd按线性规律缓慢增长，比慢开始算法的拥塞窗口增长速率缓慢得多。 \n\n**快重传与快恢复**\n\n 在 TCP/IP 中，快速重传和恢复（fast retransmit and recovery，FRR）是一种拥塞控制算法，它能快速恢复丢失的数据包。没有 FRR，如果数据包丢失了，TCP 将会使用定时器来要求传输暂停。在暂停的这段时间内，没有新的或复制的数据包被发送。有了 FRR，如果接收机接收到一个不按顺序的数据段，它会立即给发送机发送一个重复确认。如果发送机接收到三个重复确认，它会假定确认件指出的数据段丢失了，并立即重传这些丢失的数据段。有了 FRR，就不会因为重传时要求的暂停被耽误。 　当有单独的数据包丢失时，快速重传和恢复（FRR）能最有效地工作。当有多个数据信息包在某一段很短的时间内丢失时，它则不能很有效地工作。  \n\n## 7.参考\n\n`https://blog.csdn.net/liuchenxia8/article/details/80428157`\n\n`https://blog.csdn.net/yangbodong22011/article/details/48473183`\n\n\n\n","slug":"computer_network/three-tcp-reliability","published":1,"updated":"2019-02-06T01:18:54.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv4a8003m0ww417qrp8jl","content":"<p>本文主要叙述了TCP协议是如何保证传输的可靠性的，主要保证手段包括：<code>序列号</code>、<code>校验和</code></p>\n<p>、<code>流量控制</code>、<code>拥塞控制</code>、<code>停止等待协议</code>、<code>超时重传</code>、<code>连接管理</code>等。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-主要保证方式\"><a href=\"#1-主要保证方式\" class=\"headerlink\" title=\"1. 主要保证方式\"></a>1. 主要保证方式</h2><ol>\n<li><strong>序列号:</strong>应用数据被分割成 TCP 认为最适合发送的数据块,同时给每一个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层。</li>\n<li><strong>校验和：</strong> TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到端的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。</li>\n<li><strong>流量控制：</strong> TCP 连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议。 （TCP 利用滑动窗口实现流量控制）</li>\n<li><strong>拥塞控制：</strong> 当网络拥塞时，减少数据的发送。</li>\n<li><strong>停止等待协议(确认应答)</strong> 也是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。</li>\n<li><strong>超时重传：</strong> 当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。</li>\n<li><strong>连接管理:</strong> 三次握手四次挥手,保证可靠的连接，是保证可靠性的前提。 </li>\n</ol>\n<h2 id=\"2-停止等待协议\"><a href=\"#2-停止等待协议\" class=\"headerlink\" title=\"2. 停止等待协议\"></a>2. 停止等待协议</h2><ul>\n<li>停止等待协议是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组；</li>\n<li>在停止等待协议中，若接收方收到重复分组，就丢弃该分组，但同时还要发送确认；</li>\n</ul>\n<p><strong>1) 无差错情况:</strong></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-send-normal.jpg\" alt=\"normal\"></p>\n<p>发送方发送分组,接收方在规定时间内收到,并且回复确认.发送方再次发送。</p>\n<p><strong>2) 出现差错情况（超时重传）:</strong> [<img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-send-tiemout.jpg\" alt=\"timeout\"></p>\n<p>停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重转时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为 <strong>自动重传请求 ARQ</strong> 。另外在停止等待协议中若收到重复分组，就丢弃该分组，但同时还要发送确认。<strong>连续 ARQ 协议</strong> 可提高信道利用率。发送维持一个发送窗口，凡位于发送窗口内的分组可连续发送出去，而不需要等待对方确认。接收方一般采用累积确认，对按序到达的最后一个分组发送确认，表明到这个分组位置的所有分组都已经正确收到了。</p>\n<p><strong>3) 确认丢失和确认迟到</strong></p>\n<ul>\n<li><strong>确认丢失</strong>：当确认消息在传输过程丢失 <img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-send-lost.jpg\" alt=\"lost\">A发送M1消息，B收到后，B向A发送了一个M1确认消息，但却在传输过程中丢失。而A并不知道，在超时计时过后，A重传M1消息，B再次收到该消息后采取以下两点措施：<ol>\n<li>丢弃这个重复的M1消息，不向上层交付。</li>\n<li>向A发送确认消息。（不会认为已经发送过了，就不再发送。A能重传，就证明B的确认消息丢失）。</li>\n</ol>\n</li>\n<li><strong>确认迟到</strong> ：确认消息在传输过程中迟到 [<img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-send-late.jpg\" alt=\"late\">A发送M1消息，B收到并发送确认。在超时时间内没有收到确认消息，A重传M1消息，B仍然收到并继续发送确认消息（B收到了2份M1）。此时A收到了B第二次发送的确认消息。接着发送其他数据。过了一会，A收到了B第一次发送的对M1的确认消息（A也收到了2份确认消息）。处理如下：<ol>\n<li>A收到重复的确认后，直接丢弃。</li>\n<li>B收到重复的M1后，也直接丢弃重复的M1。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"3-ARQ协议\"><a href=\"#3-ARQ协议\" class=\"headerlink\" title=\"3. ARQ协议\"></a>3. ARQ协议</h2><p>即自动重传请求 ARQ 协议(Automatic Repeat reQuest )，停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重转时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为自动重传请求ARQ。</p>\n<p><strong>优点：</strong> 简单</p>\n<p><strong>缺点：</strong> 信道利用率低</p>\n<h2 id=\"4-连续ARQ协议\"><a href=\"#4-连续ARQ协议\" class=\"headerlink\" title=\"4. 连续ARQ协议\"></a>4. 连续ARQ协议</h2><p>连续 ARQ 协议可提高信道利用率。发送方维持一个发送窗口，凡位于发送窗口内的分组可以连续发送出去，而不需要等待对方确认。接收方一般采用累计确认，对按序到达的最后一个分组发送确认，表明到这个分组为止的所有分组都已经正确收到了。</p>\n<p><strong>优点：</strong> 信道利用率高，容易实现，即使确认丢失，也不必重传。</p>\n<p><strong>缺点：</strong> 不能向发送方反映出接收方已经正确收到的所有分组的信息。 比如：发送方发送了 5条 消息，中间第三条丢失（3号），这时接收方只能对前两个发送确认。发送方无法知道后三个分组的下落，而只好把后三个全部重传一次。这也叫 Go-Back-N（回退 N），表示需要退回来重传已经发送过的 N 个消息。</p>\n<h2 id=\"5-流量控制\"><a href=\"#5-流量控制\" class=\"headerlink\" title=\"5. 流量控制\"></a>5. 流量控制</h2><ul>\n<li>滑动窗口（Sliding window）是一种流量控制技术。早期的网络通信中，通信双方不会考虑网络的拥挤情况直接发送数据。由于大家不知道网络拥塞状况，同时发送数据，导致中间节点阻塞掉包，谁也发不了数据，所以就有了滑动窗口机制来解决此问题。</li>\n<li>TCP 中采用滑动窗口来进行传输控制，滑动窗口的大小意味着接收方还有多大的缓冲区可以用于接收数据。发送方可以通过滑动窗口的大小来确定应该发送多少字节的数据。当滑动窗口为 0 时，发送方一般不能再发送数据报，但有两种情况除外，一种情况是可以发送紧急数据，例如，允许用户终止在远端机上的运行进程。另一种情况是发送方可以发送一个 1 字节的数据报来通知接收方重新声明它希望接收的下一字节及发送方的滑动窗口大小。</li>\n<li><strong>TCP 利用滑动窗口实现流量控制的机制。</strong></li>\n<li><strong>流量控制是为了控制发送方发送速率，保证接收方来得及接收。</strong></li>\n<li>接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。</li>\n</ul>\n<h2 id=\"6-拥塞控制\"><a href=\"#6-拥塞控制\" class=\"headerlink\" title=\"6. 拥塞控制\"></a>6. 拥塞控制</h2><p><strong>防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。</strong></p>\n<p> 拥塞：即对资源的需求超过了可用的资源。若网络中许多资源同时供应不足，网络的性能就要明显变坏，整个网络的吞吐量随之负荷的增大而下降 </p>\n<p>拥塞控制所要做的都有一个<strong>前提：网络能够承受现有的网络负荷。</strong>拥塞控制是一个<strong>全局性的过程</strong>，涉及到所有的主机、路由器，以及与降低网络传输性能有关的所有因素。</p>\n<p>几种拥塞控制方法</p>\n<p>​    慢开始( slow-start )、拥塞避免( congestion avoidance )、快重传( fast retransmit )和快恢复( fast recovery )。</p>\n<p><strong>慢开始和拥塞避免</strong></p>\n<p>​    发送方维持一个拥塞窗口 cwnd ( congestion window )的状态变量。拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化。发送方让自己的发送窗口等于拥塞。</p>\n<p>​    发送方控制拥塞窗口的原则是：只要网络没有出现拥塞，拥塞窗口就再增大一些，以便把更多的分组发送出去。但只要网络出现拥塞，拥塞窗口就减小一些，以减少注入到网络中的分组数。</p>\n<p> <strong>慢开始算法：</strong>当主机开始发送数据时，如果立即所大量数据字节注入到网络，那么就有可能引起网络拥塞，因为现在并不清楚网络的负荷情况。因此，较好的方法是 先探测一下，即由小到大逐渐增大发送窗口，也就是说，由小到大逐渐增大拥塞窗口数值。 </p>\n<p><strong>拥塞避免算法：</strong>让拥塞窗口cwnd缓慢地增大，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍。这样拥塞窗口cwnd按线性规律缓慢增长，比慢开始算法的拥塞窗口增长速率缓慢得多。 </p>\n<p><strong>快重传与快恢复</strong></p>\n<p> 在 TCP/IP 中，快速重传和恢复（fast retransmit and recovery，FRR）是一种拥塞控制算法，它能快速恢复丢失的数据包。没有 FRR，如果数据包丢失了，TCP 将会使用定时器来要求传输暂停。在暂停的这段时间内，没有新的或复制的数据包被发送。有了 FRR，如果接收机接收到一个不按顺序的数据段，它会立即给发送机发送一个重复确认。如果发送机接收到三个重复确认，它会假定确认件指出的数据段丢失了，并立即重传这些丢失的数据段。有了 FRR，就不会因为重传时要求的暂停被耽误。 　当有单独的数据包丢失时，快速重传和恢复（FRR）能最有效地工作。当有多个数据信息包在某一段很短的时间内丢失时，它则不能很有效地工作。  </p>\n<h2 id=\"7-参考\"><a href=\"#7-参考\" class=\"headerlink\" title=\"7.参考\"></a>7.参考</h2><p><code>https://blog.csdn.net/liuchenxia8/article/details/80428157</code></p>\n<p><code>https://blog.csdn.net/yangbodong22011/article/details/48473183</code></p>\n","site":{"data":{}},"excerpt":"<p>本文主要叙述了TCP协议是如何保证传输的可靠性的，主要保证手段包括：<code>序列号</code>、<code>校验和</code></p>\n<p>、<code>流量控制</code>、<code>拥塞控制</code>、<code>停止等待协议</code>、<code>超时重传</code>、<code>连接管理</code>等。</p>","more":"<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-主要保证方式\"><a href=\"#1-主要保证方式\" class=\"headerlink\" title=\"1. 主要保证方式\"></a>1. 主要保证方式</h2><ol>\n<li><strong>序列号:</strong>应用数据被分割成 TCP 认为最适合发送的数据块,同时给每一个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层。</li>\n<li><strong>校验和：</strong> TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到端的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。</li>\n<li><strong>流量控制：</strong> TCP 连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议。 （TCP 利用滑动窗口实现流量控制）</li>\n<li><strong>拥塞控制：</strong> 当网络拥塞时，减少数据的发送。</li>\n<li><strong>停止等待协议(确认应答)</strong> 也是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。</li>\n<li><strong>超时重传：</strong> 当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。</li>\n<li><strong>连接管理:</strong> 三次握手四次挥手,保证可靠的连接，是保证可靠性的前提。 </li>\n</ol>\n<h2 id=\"2-停止等待协议\"><a href=\"#2-停止等待协议\" class=\"headerlink\" title=\"2. 停止等待协议\"></a>2. 停止等待协议</h2><ul>\n<li>停止等待协议是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组；</li>\n<li>在停止等待协议中，若接收方收到重复分组，就丢弃该分组，但同时还要发送确认；</li>\n</ul>\n<p><strong>1) 无差错情况:</strong></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-send-normal.jpg\" alt=\"normal\"></p>\n<p>发送方发送分组,接收方在规定时间内收到,并且回复确认.发送方再次发送。</p>\n<p><strong>2) 出现差错情况（超时重传）:</strong> [<img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-send-tiemout.jpg\" alt=\"timeout\"></p>\n<p>停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重转时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为 <strong>自动重传请求 ARQ</strong> 。另外在停止等待协议中若收到重复分组，就丢弃该分组，但同时还要发送确认。<strong>连续 ARQ 协议</strong> 可提高信道利用率。发送维持一个发送窗口，凡位于发送窗口内的分组可连续发送出去，而不需要等待对方确认。接收方一般采用累积确认，对按序到达的最后一个分组发送确认，表明到这个分组位置的所有分组都已经正确收到了。</p>\n<p><strong>3) 确认丢失和确认迟到</strong></p>\n<ul>\n<li><strong>确认丢失</strong>：当确认消息在传输过程丢失 <img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-send-lost.jpg\" alt=\"lost\">A发送M1消息，B收到后，B向A发送了一个M1确认消息，但却在传输过程中丢失。而A并不知道，在超时计时过后，A重传M1消息，B再次收到该消息后采取以下两点措施：<ol>\n<li>丢弃这个重复的M1消息，不向上层交付。</li>\n<li>向A发送确认消息。（不会认为已经发送过了，就不再发送。A能重传，就证明B的确认消息丢失）。</li>\n</ol>\n</li>\n<li><strong>确认迟到</strong> ：确认消息在传输过程中迟到 [<img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/network/tcp-send-late.jpg\" alt=\"late\">A发送M1消息，B收到并发送确认。在超时时间内没有收到确认消息，A重传M1消息，B仍然收到并继续发送确认消息（B收到了2份M1）。此时A收到了B第二次发送的确认消息。接着发送其他数据。过了一会，A收到了B第一次发送的对M1的确认消息（A也收到了2份确认消息）。处理如下：<ol>\n<li>A收到重复的确认后，直接丢弃。</li>\n<li>B收到重复的M1后，也直接丢弃重复的M1。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"3-ARQ协议\"><a href=\"#3-ARQ协议\" class=\"headerlink\" title=\"3. ARQ协议\"></a>3. ARQ协议</h2><p>即自动重传请求 ARQ 协议(Automatic Repeat reQuest )，停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重转时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为自动重传请求ARQ。</p>\n<p><strong>优点：</strong> 简单</p>\n<p><strong>缺点：</strong> 信道利用率低</p>\n<h2 id=\"4-连续ARQ协议\"><a href=\"#4-连续ARQ协议\" class=\"headerlink\" title=\"4. 连续ARQ协议\"></a>4. 连续ARQ协议</h2><p>连续 ARQ 协议可提高信道利用率。发送方维持一个发送窗口，凡位于发送窗口内的分组可以连续发送出去，而不需要等待对方确认。接收方一般采用累计确认，对按序到达的最后一个分组发送确认，表明到这个分组为止的所有分组都已经正确收到了。</p>\n<p><strong>优点：</strong> 信道利用率高，容易实现，即使确认丢失，也不必重传。</p>\n<p><strong>缺点：</strong> 不能向发送方反映出接收方已经正确收到的所有分组的信息。 比如：发送方发送了 5条 消息，中间第三条丢失（3号），这时接收方只能对前两个发送确认。发送方无法知道后三个分组的下落，而只好把后三个全部重传一次。这也叫 Go-Back-N（回退 N），表示需要退回来重传已经发送过的 N 个消息。</p>\n<h2 id=\"5-流量控制\"><a href=\"#5-流量控制\" class=\"headerlink\" title=\"5. 流量控制\"></a>5. 流量控制</h2><ul>\n<li>滑动窗口（Sliding window）是一种流量控制技术。早期的网络通信中，通信双方不会考虑网络的拥挤情况直接发送数据。由于大家不知道网络拥塞状况，同时发送数据，导致中间节点阻塞掉包，谁也发不了数据，所以就有了滑动窗口机制来解决此问题。</li>\n<li>TCP 中采用滑动窗口来进行传输控制，滑动窗口的大小意味着接收方还有多大的缓冲区可以用于接收数据。发送方可以通过滑动窗口的大小来确定应该发送多少字节的数据。当滑动窗口为 0 时，发送方一般不能再发送数据报，但有两种情况除外，一种情况是可以发送紧急数据，例如，允许用户终止在远端机上的运行进程。另一种情况是发送方可以发送一个 1 字节的数据报来通知接收方重新声明它希望接收的下一字节及发送方的滑动窗口大小。</li>\n<li><strong>TCP 利用滑动窗口实现流量控制的机制。</strong></li>\n<li><strong>流量控制是为了控制发送方发送速率，保证接收方来得及接收。</strong></li>\n<li>接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。</li>\n</ul>\n<h2 id=\"6-拥塞控制\"><a href=\"#6-拥塞控制\" class=\"headerlink\" title=\"6. 拥塞控制\"></a>6. 拥塞控制</h2><p><strong>防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。</strong></p>\n<p> 拥塞：即对资源的需求超过了可用的资源。若网络中许多资源同时供应不足，网络的性能就要明显变坏，整个网络的吞吐量随之负荷的增大而下降 </p>\n<p>拥塞控制所要做的都有一个<strong>前提：网络能够承受现有的网络负荷。</strong>拥塞控制是一个<strong>全局性的过程</strong>，涉及到所有的主机、路由器，以及与降低网络传输性能有关的所有因素。</p>\n<p>几种拥塞控制方法</p>\n<p>​    慢开始( slow-start )、拥塞避免( congestion avoidance )、快重传( fast retransmit )和快恢复( fast recovery )。</p>\n<p><strong>慢开始和拥塞避免</strong></p>\n<p>​    发送方维持一个拥塞窗口 cwnd ( congestion window )的状态变量。拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化。发送方让自己的发送窗口等于拥塞。</p>\n<p>​    发送方控制拥塞窗口的原则是：只要网络没有出现拥塞，拥塞窗口就再增大一些，以便把更多的分组发送出去。但只要网络出现拥塞，拥塞窗口就减小一些，以减少注入到网络中的分组数。</p>\n<p> <strong>慢开始算法：</strong>当主机开始发送数据时，如果立即所大量数据字节注入到网络，那么就有可能引起网络拥塞，因为现在并不清楚网络的负荷情况。因此，较好的方法是 先探测一下，即由小到大逐渐增大发送窗口，也就是说，由小到大逐渐增大拥塞窗口数值。 </p>\n<p><strong>拥塞避免算法：</strong>让拥塞窗口cwnd缓慢地增大，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍。这样拥塞窗口cwnd按线性规律缓慢增长，比慢开始算法的拥塞窗口增长速率缓慢得多。 </p>\n<p><strong>快重传与快恢复</strong></p>\n<p> 在 TCP/IP 中，快速重传和恢复（fast retransmit and recovery，FRR）是一种拥塞控制算法，它能快速恢复丢失的数据包。没有 FRR，如果数据包丢失了，TCP 将会使用定时器来要求传输暂停。在暂停的这段时间内，没有新的或复制的数据包被发送。有了 FRR，如果接收机接收到一个不按顺序的数据段，它会立即给发送机发送一个重复确认。如果发送机接收到三个重复确认，它会假定确认件指出的数据段丢失了，并立即重传这些丢失的数据段。有了 FRR，就不会因为重传时要求的暂停被耽误。 　当有单独的数据包丢失时，快速重传和恢复（FRR）能最有效地工作。当有多个数据信息包在某一段很短的时间内丢失时，它则不能很有效地工作。  </p>\n<h2 id=\"7-参考\"><a href=\"#7-参考\" class=\"headerlink\" title=\"7.参考\"></a>7.参考</h2><p><code>https://blog.csdn.net/liuchenxia8/article/details/80428157</code></p>\n<p><code>https://blog.csdn.net/yangbodong22011/article/details/48473183</code></p>"},{"title":"Synchronize和Volatile底层实现原理","abbrlink":"cf1a701a","date":"2019-01-08T14:00:00.000Z","_content":"\n最近在看`并发编程的艺术`这本书，希望加深对并发这块的理解。毕竟并发相关还是十分重要的。本文主要是关于`第二章Java并发机制的底层实现原理`的相关笔记。主要包括`volatile`,`synchronized`,`原子操作`等实现原理的分析。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 上下文切换\n\n**多线程**\n\n即使是单核处理器也支持多线程执行代码，CPU通过给每个线程分配CPU时间片来实现这个机制。\n\n**什么是上下文切换**\n\nCPU通过时间片分配算法来循环执行任务，当前任务执行一个时间片后会切换到下一个任务。但是，在切换前会保存上一个任务的状态，以便下次切换回这个任务时，可以再加载这个任务的状态。\n\n所以任务从保存到再加载的过程就是一次上下文切换。\n\n**上下文切换也会影响多线程的执行速度**\n\n因为线程有创建和上下文切换的开销，所以有时候并发不一定比串行快。\n\n**减少上下文切换的办法**\n\n减少上下文切换的方法有无锁并发编程、CAS算法、使用最少线程和使用协程。\n\n- 无锁并发编程。多线程竞争锁时，会引起上下文切换，所以多线程处理数据时，可以用一\n  些办法来避免使用锁，如将数据的ID按照Hash算法取模分段，不同的线程处理不同段的数据。\n- CAS算法。Java的Atomic包使用CAS算法来更新数据，而不需要加锁。\n- 使用最少线程。避免创建不需要的线程，比如任务很少，但是创建了很多线程来处理，这\n  样会造成大量线程都处于等待状态。\n- 协程：在单线程里实现多任务的调度，并在单线程里维持多个任务间的切换。\n\n## 2. volatile关键字\n\n**如果一个字段被声明成volatile，Java线程内存模型确保所有线程看到这个变量的值是一致的。**\n\n有volatile变量修饰的共享变量进行写操作的时候会多出第二行汇编代码，其中就包括了`Lock前缀`.Lock前缀的指令在多核处理器下会引发了两件事情。\n\n**1）将当前处理器缓存行的数据写回到系统内存。**\n\nLock前缀指令导致在执行指令期间，声言处理器的LOCK#信号。在多处理器环境中，LOCK#信号确保在声言该信号期间，处理器可以独占任何共享内存。\n\n如果访问的内存区域已经缓存在处理器内部，则不会声言LOCK#信号。相反，它会锁定这块内存区\n域的缓存并回写到内存，并使用缓存一致性机制来确保修改的原子性，此操作被称为“缓存锁\n定”，`缓存一致性`机制会阻止同时修改由两个以上处理器缓存的内存区域数据。\n\n**2）这个写回内存的操作会使在其他CPU里缓存了该内存地址的数据无效。**\n\n处理器使用嗅探技术保证它的内部缓存、系统内存和其他处理器的缓存的数据在总线上保持一致。如果通过嗅探一个处理器来检测其他处理器打算写内存地址，而这个地址当前处于共享状态，那么正在嗅探的处理器将使它的缓存行无效，在下次访问相同内存地址时，强制执行缓存行填充。\n\n## 3. synchronized原理与应用\n\n**Java SE 1.6中为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁，以及锁的存储结构和升级过程。**\n\nJava中的每一个对象都可以作为锁。具体表现\n为以下3种形式。\n\n- 对于普通同步方法，锁是当前实例对象。\n- 对于静态同步方法，锁是当前类的Class对象。\n- 对于同步方法块，锁是Synchonized括号里配置的对象。\n  当一个线程试图访问同步代码块时，它首先必须得到锁，退出或抛出异常时必须释放锁。\n\n### 3.1 底层实现\n\nJVM基于进入和退出Monitor对象来实现方法同步和代码块同步，但两者的实现细节不一样。\n\n`代码块同步`是使用`monitorenter`和`monitorexit`指令实现的.\n\n而`方法同步`是使用另外一种方式实现的，细节在JVM规范里并没有详细说明。但是，方法的同步同样可以使用这两个指令来实现。\n\nmonitorenter指令是在编译后插入到同步代码块的开始位置，而monitorexit是插入到方法结束处和异常处，JVM要保证每个monitorenter必须有对应的monitorexit与之配对。任何对象都有一个monitor与之关联，当且一个monitor被持有后，它将处于锁定状态。线程执行到monitorenter指令时，将会尝试获取对象所对应的monitor的所有权，即尝试获得对象的锁。\n\n## 3.2 Java对象头\n\nsynchronized用的锁是存在Java对象头里的。\n\njava的对象头由以下三部分组成：\n\n> 1，Mark Word\n>\n> 2，指向类的指针\n>\n> 3，数组长度（只有数组对象才有）\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/art_of_concurrent_coding/java%E5%AF%B9%E8%B1%A1%E5%A4%B4.png)\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/art_of_concurrent_coding/java-mark-work%E5%8F%98%E5%8C%96%E7%8A%B6%E6%80%81.png)\n\n### 3.3 锁的升级与对比\n\nJava SE 1.6中，锁一共有4种状态，级别从低到高依次是：无锁状态、偏向锁状态、轻量级锁状\n态和重量级锁状态，这几个状态会随着竞争情况逐渐升级。\n\n**偏向锁**\n\nHotSpot的作者经过研究发现，大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让线程获得锁的代价更低而引入了偏向锁。\n\n当一个线程访问同步块并获取锁时，会在对象头和栈帧中的锁记录里存储锁偏向的线程ID，以后该线程在进入和退出同步块时不需要进行CAS操作来加锁和解锁，只需简单地测试一下对象头的Mark Word里是否存储着指向当前线程的偏向锁。如果测试成功，表示线程已经获得了锁。如果测试失败，则需要再测试一下Mark Word中偏向锁的标识是否设置成1（表示当前是偏向锁）：如果没有设置，则使用CAS竞争锁；如果设置了，则尝试使用CAS将对象头的偏向锁指向当前线程。\n\n偏向锁解除\n\n偏向锁使用了一种等到竞争出现才释放锁的机制，所以当其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁。偏向锁的撤销，需要等待全局安全点（在这个时间点上没有正在执行的字节码）。它会首先暂停拥有偏向锁的线程，然后检查持有偏向锁的线程是否活着，如果线程不处于活动状态，则将对象头设置成无锁状态；如果线程仍然活着，拥有偏向锁的栈会被执行，遍历偏向对象的锁记录，栈中的锁记录和对象头的Mark Word要么重新偏向于其他线程，要么恢复到无锁或者标记对象不适合作为偏向锁，最后唤醒暂停的线程.\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/art_of_concurrent_coding/java%E5%81%8F%E5%90%91%E9%94%81.png)\n\n**轻量级锁**\n\n（1）轻量级锁加锁\n线程在执行同步块之前，JVM会先在当前线程的栈桢中创建用于存储锁记录的空间，并将对象头中的Mark Word复制到锁记录中，官方称为Displaced Mark Word。然后线程尝试使用CAS将对象头中的Mark Word替换为指向锁记录的指针。如果成功，当前线程获得锁，如果失败，表示其他线程竞争锁，当前线程便尝试使用自旋来获取锁。\n（2）轻量级锁解锁\n轻量级解锁时，会使用原子的CAS操作将Displaced Mark Word替换回到对象头，如果成功，则表示没有竞争发生。如果失败，表示当前锁存在竞争，锁就会膨胀成重量级锁。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/art_of_concurrent_coding/java%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81.png)\n\n**优缺点比较**\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/art_of_concurrent_coding/java%E9%94%81%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9%E6%AF%94%E8%BE%83.png)\n\n## 4. 原子操作的实现原理\n\n原子（atomic）本意是“不能被进一步分割的最小粒子”，而原子操作（atomic operation）意为“不可被中断的一个或一系列操作”。\n\n### 4.1 处理器如何实现原子操作\n\n处理器提供总线锁定和缓存锁定两个机制来保证复杂内存操作的原子性。\n\n**第一个机制是通过总线锁保证原子性。**\n\n所谓总线锁就是使用处理器提供的一个`LOCK＃信号`，当一个处理器在总线上输出此信号时，其他处理器的请求将被阻塞住，那么该处理器可以独占共享内存。\n\n**第二个机制是通过缓存锁定来保证原子性。**\n\n总线锁定的开销比较大，目前处理器在某些场合下使用缓存锁定代替总线锁定来进行优化。\n\n所谓“缓存锁定”是指内存区域如果被缓存在处理器的缓存行中，并且在Lock操作期间被锁定，那么当它执行锁操作回写到内存时，处理器不在总线上声言LOCK＃信号，而是修改内部的内存地址，并允许它的缓存一致性机制来保证操作的原子性，因为`缓存一致性`机制会阻止同时修改由两个以上处理器缓存的内存区域数据，当其他处理器回写已被锁定的缓存行的数据时，会使缓存行无效.\n\n### 4.2 Java如何实现原子操作\n\n**使用循环CAS实现原子操作**\n\nJVM中的CAS操作正是利用了处理器提供的CMPXCHG指令实现的。自旋CAS实现的基本思路就是循环进行CAS操作直到成功为止。\n\n**CAS实现原子操作的三大问题**\n\n1.ABA问题\n\n但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时会发现它的值没有发生变化，但是实际上却变化了。\n\nABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加1。\n\n2.循环时间长开销大\n\n自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。\n\n3.只能保证一个共享变量的原子操作\n\n操作多个共享变量时无法使用CAS操作，这个时候就可以用锁。还有一个取巧的办法，就是把多个共享变量合并成一个共享变量来操作。\n\n**使用锁机制实现原子操作**\n\n锁机制保证了只有获得锁的线程才能够操作锁定的内存区域。除了偏向锁，JVM实现锁的方式都用了循环CAS，即当一个线程想进入同步块的时候使用循环CAS的方式来获取锁，当它退出同步块的时候使用循环CAS释放锁。\n\n## 参考\n\n本文内容来自Java并发编程的艺术\n\n","source":"_posts/concurrent_art/two-volatile-synchronized.md","raw":"---\ntitle: Synchronize和Volatile底层实现原理\ntags:\n  - Java\ncategories:\n  - Java\nabbrlink: cf1a701a\ndate: 2019-01-08 22:00:00\n---\n\n最近在看`并发编程的艺术`这本书，希望加深对并发这块的理解。毕竟并发相关还是十分重要的。本文主要是关于`第二章Java并发机制的底层实现原理`的相关笔记。主要包括`volatile`,`synchronized`,`原子操作`等实现原理的分析。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 上下文切换\n\n**多线程**\n\n即使是单核处理器也支持多线程执行代码，CPU通过给每个线程分配CPU时间片来实现这个机制。\n\n**什么是上下文切换**\n\nCPU通过时间片分配算法来循环执行任务，当前任务执行一个时间片后会切换到下一个任务。但是，在切换前会保存上一个任务的状态，以便下次切换回这个任务时，可以再加载这个任务的状态。\n\n所以任务从保存到再加载的过程就是一次上下文切换。\n\n**上下文切换也会影响多线程的执行速度**\n\n因为线程有创建和上下文切换的开销，所以有时候并发不一定比串行快。\n\n**减少上下文切换的办法**\n\n减少上下文切换的方法有无锁并发编程、CAS算法、使用最少线程和使用协程。\n\n- 无锁并发编程。多线程竞争锁时，会引起上下文切换，所以多线程处理数据时，可以用一\n  些办法来避免使用锁，如将数据的ID按照Hash算法取模分段，不同的线程处理不同段的数据。\n- CAS算法。Java的Atomic包使用CAS算法来更新数据，而不需要加锁。\n- 使用最少线程。避免创建不需要的线程，比如任务很少，但是创建了很多线程来处理，这\n  样会造成大量线程都处于等待状态。\n- 协程：在单线程里实现多任务的调度，并在单线程里维持多个任务间的切换。\n\n## 2. volatile关键字\n\n**如果一个字段被声明成volatile，Java线程内存模型确保所有线程看到这个变量的值是一致的。**\n\n有volatile变量修饰的共享变量进行写操作的时候会多出第二行汇编代码，其中就包括了`Lock前缀`.Lock前缀的指令在多核处理器下会引发了两件事情。\n\n**1）将当前处理器缓存行的数据写回到系统内存。**\n\nLock前缀指令导致在执行指令期间，声言处理器的LOCK#信号。在多处理器环境中，LOCK#信号确保在声言该信号期间，处理器可以独占任何共享内存。\n\n如果访问的内存区域已经缓存在处理器内部，则不会声言LOCK#信号。相反，它会锁定这块内存区\n域的缓存并回写到内存，并使用缓存一致性机制来确保修改的原子性，此操作被称为“缓存锁\n定”，`缓存一致性`机制会阻止同时修改由两个以上处理器缓存的内存区域数据。\n\n**2）这个写回内存的操作会使在其他CPU里缓存了该内存地址的数据无效。**\n\n处理器使用嗅探技术保证它的内部缓存、系统内存和其他处理器的缓存的数据在总线上保持一致。如果通过嗅探一个处理器来检测其他处理器打算写内存地址，而这个地址当前处于共享状态，那么正在嗅探的处理器将使它的缓存行无效，在下次访问相同内存地址时，强制执行缓存行填充。\n\n## 3. synchronized原理与应用\n\n**Java SE 1.6中为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁，以及锁的存储结构和升级过程。**\n\nJava中的每一个对象都可以作为锁。具体表现\n为以下3种形式。\n\n- 对于普通同步方法，锁是当前实例对象。\n- 对于静态同步方法，锁是当前类的Class对象。\n- 对于同步方法块，锁是Synchonized括号里配置的对象。\n  当一个线程试图访问同步代码块时，它首先必须得到锁，退出或抛出异常时必须释放锁。\n\n### 3.1 底层实现\n\nJVM基于进入和退出Monitor对象来实现方法同步和代码块同步，但两者的实现细节不一样。\n\n`代码块同步`是使用`monitorenter`和`monitorexit`指令实现的.\n\n而`方法同步`是使用另外一种方式实现的，细节在JVM规范里并没有详细说明。但是，方法的同步同样可以使用这两个指令来实现。\n\nmonitorenter指令是在编译后插入到同步代码块的开始位置，而monitorexit是插入到方法结束处和异常处，JVM要保证每个monitorenter必须有对应的monitorexit与之配对。任何对象都有一个monitor与之关联，当且一个monitor被持有后，它将处于锁定状态。线程执行到monitorenter指令时，将会尝试获取对象所对应的monitor的所有权，即尝试获得对象的锁。\n\n## 3.2 Java对象头\n\nsynchronized用的锁是存在Java对象头里的。\n\njava的对象头由以下三部分组成：\n\n> 1，Mark Word\n>\n> 2，指向类的指针\n>\n> 3，数组长度（只有数组对象才有）\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/art_of_concurrent_coding/java%E5%AF%B9%E8%B1%A1%E5%A4%B4.png)\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/art_of_concurrent_coding/java-mark-work%E5%8F%98%E5%8C%96%E7%8A%B6%E6%80%81.png)\n\n### 3.3 锁的升级与对比\n\nJava SE 1.6中，锁一共有4种状态，级别从低到高依次是：无锁状态、偏向锁状态、轻量级锁状\n态和重量级锁状态，这几个状态会随着竞争情况逐渐升级。\n\n**偏向锁**\n\nHotSpot的作者经过研究发现，大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让线程获得锁的代价更低而引入了偏向锁。\n\n当一个线程访问同步块并获取锁时，会在对象头和栈帧中的锁记录里存储锁偏向的线程ID，以后该线程在进入和退出同步块时不需要进行CAS操作来加锁和解锁，只需简单地测试一下对象头的Mark Word里是否存储着指向当前线程的偏向锁。如果测试成功，表示线程已经获得了锁。如果测试失败，则需要再测试一下Mark Word中偏向锁的标识是否设置成1（表示当前是偏向锁）：如果没有设置，则使用CAS竞争锁；如果设置了，则尝试使用CAS将对象头的偏向锁指向当前线程。\n\n偏向锁解除\n\n偏向锁使用了一种等到竞争出现才释放锁的机制，所以当其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁。偏向锁的撤销，需要等待全局安全点（在这个时间点上没有正在执行的字节码）。它会首先暂停拥有偏向锁的线程，然后检查持有偏向锁的线程是否活着，如果线程不处于活动状态，则将对象头设置成无锁状态；如果线程仍然活着，拥有偏向锁的栈会被执行，遍历偏向对象的锁记录，栈中的锁记录和对象头的Mark Word要么重新偏向于其他线程，要么恢复到无锁或者标记对象不适合作为偏向锁，最后唤醒暂停的线程.\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/art_of_concurrent_coding/java%E5%81%8F%E5%90%91%E9%94%81.png)\n\n**轻量级锁**\n\n（1）轻量级锁加锁\n线程在执行同步块之前，JVM会先在当前线程的栈桢中创建用于存储锁记录的空间，并将对象头中的Mark Word复制到锁记录中，官方称为Displaced Mark Word。然后线程尝试使用CAS将对象头中的Mark Word替换为指向锁记录的指针。如果成功，当前线程获得锁，如果失败，表示其他线程竞争锁，当前线程便尝试使用自旋来获取锁。\n（2）轻量级锁解锁\n轻量级解锁时，会使用原子的CAS操作将Displaced Mark Word替换回到对象头，如果成功，则表示没有竞争发生。如果失败，表示当前锁存在竞争，锁就会膨胀成重量级锁。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/art_of_concurrent_coding/java%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81.png)\n\n**优缺点比较**\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/art_of_concurrent_coding/java%E9%94%81%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9%E6%AF%94%E8%BE%83.png)\n\n## 4. 原子操作的实现原理\n\n原子（atomic）本意是“不能被进一步分割的最小粒子”，而原子操作（atomic operation）意为“不可被中断的一个或一系列操作”。\n\n### 4.1 处理器如何实现原子操作\n\n处理器提供总线锁定和缓存锁定两个机制来保证复杂内存操作的原子性。\n\n**第一个机制是通过总线锁保证原子性。**\n\n所谓总线锁就是使用处理器提供的一个`LOCK＃信号`，当一个处理器在总线上输出此信号时，其他处理器的请求将被阻塞住，那么该处理器可以独占共享内存。\n\n**第二个机制是通过缓存锁定来保证原子性。**\n\n总线锁定的开销比较大，目前处理器在某些场合下使用缓存锁定代替总线锁定来进行优化。\n\n所谓“缓存锁定”是指内存区域如果被缓存在处理器的缓存行中，并且在Lock操作期间被锁定，那么当它执行锁操作回写到内存时，处理器不在总线上声言LOCK＃信号，而是修改内部的内存地址，并允许它的缓存一致性机制来保证操作的原子性，因为`缓存一致性`机制会阻止同时修改由两个以上处理器缓存的内存区域数据，当其他处理器回写已被锁定的缓存行的数据时，会使缓存行无效.\n\n### 4.2 Java如何实现原子操作\n\n**使用循环CAS实现原子操作**\n\nJVM中的CAS操作正是利用了处理器提供的CMPXCHG指令实现的。自旋CAS实现的基本思路就是循环进行CAS操作直到成功为止。\n\n**CAS实现原子操作的三大问题**\n\n1.ABA问题\n\n但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时会发现它的值没有发生变化，但是实际上却变化了。\n\nABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加1。\n\n2.循环时间长开销大\n\n自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。\n\n3.只能保证一个共享变量的原子操作\n\n操作多个共享变量时无法使用CAS操作，这个时候就可以用锁。还有一个取巧的办法，就是把多个共享变量合并成一个共享变量来操作。\n\n**使用锁机制实现原子操作**\n\n锁机制保证了只有获得锁的线程才能够操作锁定的内存区域。除了偏向锁，JVM实现锁的方式都用了循环CAS，即当一个线程想进入同步块的时候使用循环CAS的方式来获取锁，当它退出同步块的时候使用循环CAS释放锁。\n\n## 参考\n\n本文内容来自Java并发编程的艺术\n\n","slug":"concurrent_art/two-volatile-synchronized","published":1,"updated":"2019-02-06T01:17:53.174Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv4aa003n0ww47hqbm2t2","content":"<p>最近在看<code>并发编程的艺术</code>这本书，希望加深对并发这块的理解。毕竟并发相关还是十分重要的。本文主要是关于<code>第二章Java并发机制的底层实现原理</code>的相关笔记。主要包括<code>volatile</code>,<code>synchronized</code>,<code>原子操作</code>等实现原理的分析。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-上下文切换\"><a href=\"#1-上下文切换\" class=\"headerlink\" title=\"1. 上下文切换\"></a>1. 上下文切换</h2><p><strong>多线程</strong></p>\n<p>即使是单核处理器也支持多线程执行代码，CPU通过给每个线程分配CPU时间片来实现这个机制。</p>\n<p><strong>什么是上下文切换</strong></p>\n<p>CPU通过时间片分配算法来循环执行任务，当前任务执行一个时间片后会切换到下一个任务。但是，在切换前会保存上一个任务的状态，以便下次切换回这个任务时，可以再加载这个任务的状态。</p>\n<p>所以任务从保存到再加载的过程就是一次上下文切换。</p>\n<p><strong>上下文切换也会影响多线程的执行速度</strong></p>\n<p>因为线程有创建和上下文切换的开销，所以有时候并发不一定比串行快。</p>\n<p><strong>减少上下文切换的办法</strong></p>\n<p>减少上下文切换的方法有无锁并发编程、CAS算法、使用最少线程和使用协程。</p>\n<ul>\n<li>无锁并发编程。多线程竞争锁时，会引起上下文切换，所以多线程处理数据时，可以用一<br>些办法来避免使用锁，如将数据的ID按照Hash算法取模分段，不同的线程处理不同段的数据。</li>\n<li>CAS算法。Java的Atomic包使用CAS算法来更新数据，而不需要加锁。</li>\n<li>使用最少线程。避免创建不需要的线程，比如任务很少，但是创建了很多线程来处理，这<br>样会造成大量线程都处于等待状态。</li>\n<li>协程：在单线程里实现多任务的调度，并在单线程里维持多个任务间的切换。</li>\n</ul>\n<h2 id=\"2-volatile关键字\"><a href=\"#2-volatile关键字\" class=\"headerlink\" title=\"2. volatile关键字\"></a>2. volatile关键字</h2><p><strong>如果一个字段被声明成volatile，Java线程内存模型确保所有线程看到这个变量的值是一致的。</strong></p>\n<p>有volatile变量修饰的共享变量进行写操作的时候会多出第二行汇编代码，其中就包括了<code>Lock前缀</code>.Lock前缀的指令在多核处理器下会引发了两件事情。</p>\n<p><strong>1）将当前处理器缓存行的数据写回到系统内存。</strong></p>\n<p>Lock前缀指令导致在执行指令期间，声言处理器的LOCK#信号。在多处理器环境中，LOCK#信号确保在声言该信号期间，处理器可以独占任何共享内存。</p>\n<p>如果访问的内存区域已经缓存在处理器内部，则不会声言LOCK#信号。相反，它会锁定这块内存区<br>域的缓存并回写到内存，并使用缓存一致性机制来确保修改的原子性，此操作被称为“缓存锁<br>定”，<code>缓存一致性</code>机制会阻止同时修改由两个以上处理器缓存的内存区域数据。</p>\n<p><strong>2）这个写回内存的操作会使在其他CPU里缓存了该内存地址的数据无效。</strong></p>\n<p>处理器使用嗅探技术保证它的内部缓存、系统内存和其他处理器的缓存的数据在总线上保持一致。如果通过嗅探一个处理器来检测其他处理器打算写内存地址，而这个地址当前处于共享状态，那么正在嗅探的处理器将使它的缓存行无效，在下次访问相同内存地址时，强制执行缓存行填充。</p>\n<h2 id=\"3-synchronized原理与应用\"><a href=\"#3-synchronized原理与应用\" class=\"headerlink\" title=\"3. synchronized原理与应用\"></a>3. synchronized原理与应用</h2><p><strong>Java SE 1.6中为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁，以及锁的存储结构和升级过程。</strong></p>\n<p>Java中的每一个对象都可以作为锁。具体表现<br>为以下3种形式。</p>\n<ul>\n<li>对于普通同步方法，锁是当前实例对象。</li>\n<li>对于静态同步方法，锁是当前类的Class对象。</li>\n<li>对于同步方法块，锁是Synchonized括号里配置的对象。<br>当一个线程试图访问同步代码块时，它首先必须得到锁，退出或抛出异常时必须释放锁。</li>\n</ul>\n<h3 id=\"3-1-底层实现\"><a href=\"#3-1-底层实现\" class=\"headerlink\" title=\"3.1 底层实现\"></a>3.1 底层实现</h3><p>JVM基于进入和退出Monitor对象来实现方法同步和代码块同步，但两者的实现细节不一样。</p>\n<p><code>代码块同步</code>是使用<code>monitorenter</code>和<code>monitorexit</code>指令实现的.</p>\n<p>而<code>方法同步</code>是使用另外一种方式实现的，细节在JVM规范里并没有详细说明。但是，方法的同步同样可以使用这两个指令来实现。</p>\n<p>monitorenter指令是在编译后插入到同步代码块的开始位置，而monitorexit是插入到方法结束处和异常处，JVM要保证每个monitorenter必须有对应的monitorexit与之配对。任何对象都有一个monitor与之关联，当且一个monitor被持有后，它将处于锁定状态。线程执行到monitorenter指令时，将会尝试获取对象所对应的monitor的所有权，即尝试获得对象的锁。</p>\n<h2 id=\"3-2-Java对象头\"><a href=\"#3-2-Java对象头\" class=\"headerlink\" title=\"3.2 Java对象头\"></a>3.2 Java对象头</h2><p>synchronized用的锁是存在Java对象头里的。</p>\n<p>java的对象头由以下三部分组成：</p>\n<blockquote>\n<p>1，Mark Word</p>\n<p>2，指向类的指针</p>\n<p>3，数组长度（只有数组对象才有）</p>\n</blockquote>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/art_of_concurrent_coding/java%E5%AF%B9%E8%B1%A1%E5%A4%B4.png\" alt=\"\"></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/art_of_concurrent_coding/java-mark-work%E5%8F%98%E5%8C%96%E7%8A%B6%E6%80%81.png\" alt=\"\"></p>\n<h3 id=\"3-3-锁的升级与对比\"><a href=\"#3-3-锁的升级与对比\" class=\"headerlink\" title=\"3.3 锁的升级与对比\"></a>3.3 锁的升级与对比</h3><p>Java SE 1.6中，锁一共有4种状态，级别从低到高依次是：无锁状态、偏向锁状态、轻量级锁状<br>态和重量级锁状态，这几个状态会随着竞争情况逐渐升级。</p>\n<p><strong>偏向锁</strong></p>\n<p>HotSpot的作者经过研究发现，大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让线程获得锁的代价更低而引入了偏向锁。</p>\n<p>当一个线程访问同步块并获取锁时，会在对象头和栈帧中的锁记录里存储锁偏向的线程ID，以后该线程在进入和退出同步块时不需要进行CAS操作来加锁和解锁，只需简单地测试一下对象头的Mark Word里是否存储着指向当前线程的偏向锁。如果测试成功，表示线程已经获得了锁。如果测试失败，则需要再测试一下Mark Word中偏向锁的标识是否设置成1（表示当前是偏向锁）：如果没有设置，则使用CAS竞争锁；如果设置了，则尝试使用CAS将对象头的偏向锁指向当前线程。</p>\n<p>偏向锁解除</p>\n<p>偏向锁使用了一种等到竞争出现才释放锁的机制，所以当其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁。偏向锁的撤销，需要等待全局安全点（在这个时间点上没有正在执行的字节码）。它会首先暂停拥有偏向锁的线程，然后检查持有偏向锁的线程是否活着，如果线程不处于活动状态，则将对象头设置成无锁状态；如果线程仍然活着，拥有偏向锁的栈会被执行，遍历偏向对象的锁记录，栈中的锁记录和对象头的Mark Word要么重新偏向于其他线程，要么恢复到无锁或者标记对象不适合作为偏向锁，最后唤醒暂停的线程.</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/art_of_concurrent_coding/java%E5%81%8F%E5%90%91%E9%94%81.png\" alt=\"\"></p>\n<p><strong>轻量级锁</strong></p>\n<p>（1）轻量级锁加锁<br>线程在执行同步块之前，JVM会先在当前线程的栈桢中创建用于存储锁记录的空间，并将对象头中的Mark Word复制到锁记录中，官方称为Displaced Mark Word。然后线程尝试使用CAS将对象头中的Mark Word替换为指向锁记录的指针。如果成功，当前线程获得锁，如果失败，表示其他线程竞争锁，当前线程便尝试使用自旋来获取锁。<br>（2）轻量级锁解锁<br>轻量级解锁时，会使用原子的CAS操作将Displaced Mark Word替换回到对象头，如果成功，则表示没有竞争发生。如果失败，表示当前锁存在竞争，锁就会膨胀成重量级锁。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/art_of_concurrent_coding/java%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81.png\" alt=\"\"></p>\n<p><strong>优缺点比较</strong></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/art_of_concurrent_coding/java%E9%94%81%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9%E6%AF%94%E8%BE%83.png\" alt=\"\"></p>\n<h2 id=\"4-原子操作的实现原理\"><a href=\"#4-原子操作的实现原理\" class=\"headerlink\" title=\"4. 原子操作的实现原理\"></a>4. 原子操作的实现原理</h2><p>原子（atomic）本意是“不能被进一步分割的最小粒子”，而原子操作（atomic operation）意为“不可被中断的一个或一系列操作”。</p>\n<h3 id=\"4-1-处理器如何实现原子操作\"><a href=\"#4-1-处理器如何实现原子操作\" class=\"headerlink\" title=\"4.1 处理器如何实现原子操作\"></a>4.1 处理器如何实现原子操作</h3><p>处理器提供总线锁定和缓存锁定两个机制来保证复杂内存操作的原子性。</p>\n<p><strong>第一个机制是通过总线锁保证原子性。</strong></p>\n<p>所谓总线锁就是使用处理器提供的一个<code>LOCK＃信号</code>，当一个处理器在总线上输出此信号时，其他处理器的请求将被阻塞住，那么该处理器可以独占共享内存。</p>\n<p><strong>第二个机制是通过缓存锁定来保证原子性。</strong></p>\n<p>总线锁定的开销比较大，目前处理器在某些场合下使用缓存锁定代替总线锁定来进行优化。</p>\n<p>所谓“缓存锁定”是指内存区域如果被缓存在处理器的缓存行中，并且在Lock操作期间被锁定，那么当它执行锁操作回写到内存时，处理器不在总线上声言LOCK＃信号，而是修改内部的内存地址，并允许它的缓存一致性机制来保证操作的原子性，因为<code>缓存一致性</code>机制会阻止同时修改由两个以上处理器缓存的内存区域数据，当其他处理器回写已被锁定的缓存行的数据时，会使缓存行无效.</p>\n<h3 id=\"4-2-Java如何实现原子操作\"><a href=\"#4-2-Java如何实现原子操作\" class=\"headerlink\" title=\"4.2 Java如何实现原子操作\"></a>4.2 Java如何实现原子操作</h3><p><strong>使用循环CAS实现原子操作</strong></p>\n<p>JVM中的CAS操作正是利用了处理器提供的CMPXCHG指令实现的。自旋CAS实现的基本思路就是循环进行CAS操作直到成功为止。</p>\n<p><strong>CAS实现原子操作的三大问题</strong></p>\n<p>1.ABA问题</p>\n<p>但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时会发现它的值没有发生变化，但是实际上却变化了。</p>\n<p>ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加1。</p>\n<p>2.循环时间长开销大</p>\n<p>自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。</p>\n<p>3.只能保证一个共享变量的原子操作</p>\n<p>操作多个共享变量时无法使用CAS操作，这个时候就可以用锁。还有一个取巧的办法，就是把多个共享变量合并成一个共享变量来操作。</p>\n<p><strong>使用锁机制实现原子操作</strong></p>\n<p>锁机制保证了只有获得锁的线程才能够操作锁定的内存区域。除了偏向锁，JVM实现锁的方式都用了循环CAS，即当一个线程想进入同步块的时候使用循环CAS的方式来获取锁，当它退出同步块的时候使用循环CAS释放锁。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>本文内容来自Java并发编程的艺术</p>\n","site":{"data":{}},"excerpt":"<p>最近在看<code>并发编程的艺术</code>这本书，希望加深对并发这块的理解。毕竟并发相关还是十分重要的。本文主要是关于<code>第二章Java并发机制的底层实现原理</code>的相关笔记。主要包括<code>volatile</code>,<code>synchronized</code>,<code>原子操作</code>等实现原理的分析。</p>","more":"<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-上下文切换\"><a href=\"#1-上下文切换\" class=\"headerlink\" title=\"1. 上下文切换\"></a>1. 上下文切换</h2><p><strong>多线程</strong></p>\n<p>即使是单核处理器也支持多线程执行代码，CPU通过给每个线程分配CPU时间片来实现这个机制。</p>\n<p><strong>什么是上下文切换</strong></p>\n<p>CPU通过时间片分配算法来循环执行任务，当前任务执行一个时间片后会切换到下一个任务。但是，在切换前会保存上一个任务的状态，以便下次切换回这个任务时，可以再加载这个任务的状态。</p>\n<p>所以任务从保存到再加载的过程就是一次上下文切换。</p>\n<p><strong>上下文切换也会影响多线程的执行速度</strong></p>\n<p>因为线程有创建和上下文切换的开销，所以有时候并发不一定比串行快。</p>\n<p><strong>减少上下文切换的办法</strong></p>\n<p>减少上下文切换的方法有无锁并发编程、CAS算法、使用最少线程和使用协程。</p>\n<ul>\n<li>无锁并发编程。多线程竞争锁时，会引起上下文切换，所以多线程处理数据时，可以用一<br>些办法来避免使用锁，如将数据的ID按照Hash算法取模分段，不同的线程处理不同段的数据。</li>\n<li>CAS算法。Java的Atomic包使用CAS算法来更新数据，而不需要加锁。</li>\n<li>使用最少线程。避免创建不需要的线程，比如任务很少，但是创建了很多线程来处理，这<br>样会造成大量线程都处于等待状态。</li>\n<li>协程：在单线程里实现多任务的调度，并在单线程里维持多个任务间的切换。</li>\n</ul>\n<h2 id=\"2-volatile关键字\"><a href=\"#2-volatile关键字\" class=\"headerlink\" title=\"2. volatile关键字\"></a>2. volatile关键字</h2><p><strong>如果一个字段被声明成volatile，Java线程内存模型确保所有线程看到这个变量的值是一致的。</strong></p>\n<p>有volatile变量修饰的共享变量进行写操作的时候会多出第二行汇编代码，其中就包括了<code>Lock前缀</code>.Lock前缀的指令在多核处理器下会引发了两件事情。</p>\n<p><strong>1）将当前处理器缓存行的数据写回到系统内存。</strong></p>\n<p>Lock前缀指令导致在执行指令期间，声言处理器的LOCK#信号。在多处理器环境中，LOCK#信号确保在声言该信号期间，处理器可以独占任何共享内存。</p>\n<p>如果访问的内存区域已经缓存在处理器内部，则不会声言LOCK#信号。相反，它会锁定这块内存区<br>域的缓存并回写到内存，并使用缓存一致性机制来确保修改的原子性，此操作被称为“缓存锁<br>定”，<code>缓存一致性</code>机制会阻止同时修改由两个以上处理器缓存的内存区域数据。</p>\n<p><strong>2）这个写回内存的操作会使在其他CPU里缓存了该内存地址的数据无效。</strong></p>\n<p>处理器使用嗅探技术保证它的内部缓存、系统内存和其他处理器的缓存的数据在总线上保持一致。如果通过嗅探一个处理器来检测其他处理器打算写内存地址，而这个地址当前处于共享状态，那么正在嗅探的处理器将使它的缓存行无效，在下次访问相同内存地址时，强制执行缓存行填充。</p>\n<h2 id=\"3-synchronized原理与应用\"><a href=\"#3-synchronized原理与应用\" class=\"headerlink\" title=\"3. synchronized原理与应用\"></a>3. synchronized原理与应用</h2><p><strong>Java SE 1.6中为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁，以及锁的存储结构和升级过程。</strong></p>\n<p>Java中的每一个对象都可以作为锁。具体表现<br>为以下3种形式。</p>\n<ul>\n<li>对于普通同步方法，锁是当前实例对象。</li>\n<li>对于静态同步方法，锁是当前类的Class对象。</li>\n<li>对于同步方法块，锁是Synchonized括号里配置的对象。<br>当一个线程试图访问同步代码块时，它首先必须得到锁，退出或抛出异常时必须释放锁。</li>\n</ul>\n<h3 id=\"3-1-底层实现\"><a href=\"#3-1-底层实现\" class=\"headerlink\" title=\"3.1 底层实现\"></a>3.1 底层实现</h3><p>JVM基于进入和退出Monitor对象来实现方法同步和代码块同步，但两者的实现细节不一样。</p>\n<p><code>代码块同步</code>是使用<code>monitorenter</code>和<code>monitorexit</code>指令实现的.</p>\n<p>而<code>方法同步</code>是使用另外一种方式实现的，细节在JVM规范里并没有详细说明。但是，方法的同步同样可以使用这两个指令来实现。</p>\n<p>monitorenter指令是在编译后插入到同步代码块的开始位置，而monitorexit是插入到方法结束处和异常处，JVM要保证每个monitorenter必须有对应的monitorexit与之配对。任何对象都有一个monitor与之关联，当且一个monitor被持有后，它将处于锁定状态。线程执行到monitorenter指令时，将会尝试获取对象所对应的monitor的所有权，即尝试获得对象的锁。</p>\n<h2 id=\"3-2-Java对象头\"><a href=\"#3-2-Java对象头\" class=\"headerlink\" title=\"3.2 Java对象头\"></a>3.2 Java对象头</h2><p>synchronized用的锁是存在Java对象头里的。</p>\n<p>java的对象头由以下三部分组成：</p>\n<blockquote>\n<p>1，Mark Word</p>\n<p>2，指向类的指针</p>\n<p>3，数组长度（只有数组对象才有）</p>\n</blockquote>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/art_of_concurrent_coding/java%E5%AF%B9%E8%B1%A1%E5%A4%B4.png\" alt=\"\"></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/art_of_concurrent_coding/java-mark-work%E5%8F%98%E5%8C%96%E7%8A%B6%E6%80%81.png\" alt=\"\"></p>\n<h3 id=\"3-3-锁的升级与对比\"><a href=\"#3-3-锁的升级与对比\" class=\"headerlink\" title=\"3.3 锁的升级与对比\"></a>3.3 锁的升级与对比</h3><p>Java SE 1.6中，锁一共有4种状态，级别从低到高依次是：无锁状态、偏向锁状态、轻量级锁状<br>态和重量级锁状态，这几个状态会随着竞争情况逐渐升级。</p>\n<p><strong>偏向锁</strong></p>\n<p>HotSpot的作者经过研究发现，大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让线程获得锁的代价更低而引入了偏向锁。</p>\n<p>当一个线程访问同步块并获取锁时，会在对象头和栈帧中的锁记录里存储锁偏向的线程ID，以后该线程在进入和退出同步块时不需要进行CAS操作来加锁和解锁，只需简单地测试一下对象头的Mark Word里是否存储着指向当前线程的偏向锁。如果测试成功，表示线程已经获得了锁。如果测试失败，则需要再测试一下Mark Word中偏向锁的标识是否设置成1（表示当前是偏向锁）：如果没有设置，则使用CAS竞争锁；如果设置了，则尝试使用CAS将对象头的偏向锁指向当前线程。</p>\n<p>偏向锁解除</p>\n<p>偏向锁使用了一种等到竞争出现才释放锁的机制，所以当其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁。偏向锁的撤销，需要等待全局安全点（在这个时间点上没有正在执行的字节码）。它会首先暂停拥有偏向锁的线程，然后检查持有偏向锁的线程是否活着，如果线程不处于活动状态，则将对象头设置成无锁状态；如果线程仍然活着，拥有偏向锁的栈会被执行，遍历偏向对象的锁记录，栈中的锁记录和对象头的Mark Word要么重新偏向于其他线程，要么恢复到无锁或者标记对象不适合作为偏向锁，最后唤醒暂停的线程.</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/art_of_concurrent_coding/java%E5%81%8F%E5%90%91%E9%94%81.png\" alt=\"\"></p>\n<p><strong>轻量级锁</strong></p>\n<p>（1）轻量级锁加锁<br>线程在执行同步块之前，JVM会先在当前线程的栈桢中创建用于存储锁记录的空间，并将对象头中的Mark Word复制到锁记录中，官方称为Displaced Mark Word。然后线程尝试使用CAS将对象头中的Mark Word替换为指向锁记录的指针。如果成功，当前线程获得锁，如果失败，表示其他线程竞争锁，当前线程便尝试使用自旋来获取锁。<br>（2）轻量级锁解锁<br>轻量级解锁时，会使用原子的CAS操作将Displaced Mark Word替换回到对象头，如果成功，则表示没有竞争发生。如果失败，表示当前锁存在竞争，锁就会膨胀成重量级锁。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/art_of_concurrent_coding/java%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81.png\" alt=\"\"></p>\n<p><strong>优缺点比较</strong></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/art_of_concurrent_coding/java%E9%94%81%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9%E6%AF%94%E8%BE%83.png\" alt=\"\"></p>\n<h2 id=\"4-原子操作的实现原理\"><a href=\"#4-原子操作的实现原理\" class=\"headerlink\" title=\"4. 原子操作的实现原理\"></a>4. 原子操作的实现原理</h2><p>原子（atomic）本意是“不能被进一步分割的最小粒子”，而原子操作（atomic operation）意为“不可被中断的一个或一系列操作”。</p>\n<h3 id=\"4-1-处理器如何实现原子操作\"><a href=\"#4-1-处理器如何实现原子操作\" class=\"headerlink\" title=\"4.1 处理器如何实现原子操作\"></a>4.1 处理器如何实现原子操作</h3><p>处理器提供总线锁定和缓存锁定两个机制来保证复杂内存操作的原子性。</p>\n<p><strong>第一个机制是通过总线锁保证原子性。</strong></p>\n<p>所谓总线锁就是使用处理器提供的一个<code>LOCK＃信号</code>，当一个处理器在总线上输出此信号时，其他处理器的请求将被阻塞住，那么该处理器可以独占共享内存。</p>\n<p><strong>第二个机制是通过缓存锁定来保证原子性。</strong></p>\n<p>总线锁定的开销比较大，目前处理器在某些场合下使用缓存锁定代替总线锁定来进行优化。</p>\n<p>所谓“缓存锁定”是指内存区域如果被缓存在处理器的缓存行中，并且在Lock操作期间被锁定，那么当它执行锁操作回写到内存时，处理器不在总线上声言LOCK＃信号，而是修改内部的内存地址，并允许它的缓存一致性机制来保证操作的原子性，因为<code>缓存一致性</code>机制会阻止同时修改由两个以上处理器缓存的内存区域数据，当其他处理器回写已被锁定的缓存行的数据时，会使缓存行无效.</p>\n<h3 id=\"4-2-Java如何实现原子操作\"><a href=\"#4-2-Java如何实现原子操作\" class=\"headerlink\" title=\"4.2 Java如何实现原子操作\"></a>4.2 Java如何实现原子操作</h3><p><strong>使用循环CAS实现原子操作</strong></p>\n<p>JVM中的CAS操作正是利用了处理器提供的CMPXCHG指令实现的。自旋CAS实现的基本思路就是循环进行CAS操作直到成功为止。</p>\n<p><strong>CAS实现原子操作的三大问题</strong></p>\n<p>1.ABA问题</p>\n<p>但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时会发现它的值没有发生变化，但是实际上却变化了。</p>\n<p>ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加1。</p>\n<p>2.循环时间长开销大</p>\n<p>自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。</p>\n<p>3.只能保证一个共享变量的原子操作</p>\n<p>操作多个共享变量时无法使用CAS操作，这个时候就可以用锁。还有一个取巧的办法，就是把多个共享变量合并成一个共享变量来操作。</p>\n<p><strong>使用锁机制实现原子操作</strong></p>\n<p>锁机制保证了只有获得锁的线程才能够操作锁定的内存区域。除了偏向锁，JVM实现锁的方式都用了循环CAS，即当一个线程想进入同步块的时候使用循环CAS的方式来获取锁，当它退出同步块的时候使用循环CAS释放锁。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>本文内容来自Java并发编程的艺术</p>"},{"title":"MySQL存储过程入门教程及实例详解","abbrlink":"38c0d2ef","date":"2019-02-13T14:00:00.000Z","_content":"\n存储过程是可编程的函数，在数据库中创建并保存，可以由SQL语句和控制结构组成。\n\n本文主要介绍了MySQL的存储过程，通过语法教学及实例演示详细的叙述了MySQL存储过程的基本使用。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 存储过程简介\n\n**存储过程是可编程的函数，在数据库中创建并保存，可以由SQL语句和控制结构组成**。当想要在不同的应用程序或平台上执行相同的函数，或者封装特定功能时，存储过程是非常有用的。数据库中的存储过程可以看做是对编程中面向对象方法的模拟，它允许控制数据的访问方式。\n\nSQL语句需要先编译然后执行，而存储过程（Stored Procedure）是一组为了完成特定功能的SQL语句集，经编译后存储在数据库中，用户通过指定存储过程的名字并给定参数（如果该存储过程带有参数）来调用执行它。\n\n简单的说，就是一组SQL语句集，功能强大，可以实现一些比较复杂的逻辑功能，类似于JAVA语言中的方法；\n\n> 存储过程跟触发器有点类似，都是一组SQL集，但是存储过程是主动调用的，且功能比触发器更加强大，触发器是某件事触发后自动调用；\n\n## 2. 存储过程的优缺点\n\n### 2.1 优点\n\n- 1.**增强SQL语言的功能和灵活性**：存储过程可以用控制语句编写，有很强的灵活性，可以完成复杂的判断和较复杂的运算。\n- 2.**标准组件式编程**：存储过程被创建后，可以在程序中被多次调用，而不必重新编写该存储过程的SQL语句。而且数据库专业人员可以随时对存储过程进行修改，对应用程序源代码毫无影响。\n- 3.**较快的执行速度**：如果某一操作包含大量的Transaction-SQL代码或分别被多次执行，那么存储过程要比批处理的执行速度快很多。因为存储过程是预编译的。在首次运行一个存储过程时查询，优化器对其进行分析优化，并且给出最终被存储在系统表中的执行计划。而批处理的Transaction-SQL语句在每次运行时都要进行编译和优化，速度相对要慢一些。\n- 4.**减少网络流量**：针对同一个数据库对象的操作（如查询、修改），如果这一操作所涉及的Transaction-SQL语句被组织进存储过程，那么当在客户计算机上调用该存储过程时，网络中传送的只是该调用语句，从而大大减少网络流量并降低了网络负载。\n- 5.**作为一种安全机制来充分利用**： 通过对执行某一存储过程的权限进行限制，能够实现对相应的数据的访问权限的限制，避免了非授权用户对数据的访问，保证了数据的安全。\n\n### 2.2 缺点\n\n- 1.可移植性差\n- 2.对于很简单的sql语句， 存储过程没有优势\n- 3.如果存储过程中不一定会减少网络传输（包含的sql数量并不多， 并且执行很快，就没必要了）\n- 4.如果只有一个用户使用数据库， 那么存储过程对于安全也没什么影响\n- 5.团队开发时需要先统一标准， 否则后期维护是个麻烦\n- 6.在大并发量访问的情况下， 不宜写过多涉及运算的存储过程\n- 7.业务逻辑复杂时， 特别是涉及到对很大的表进行操作的时候， 不如在前端先简化业务逻辑\n\n## 3. 存储过程语法\n\n### 3.1 基本语法\n\n```sql\nCREATE PROCEDURE  过程名([[IN|OUT|INOUT] 参数名 数据类型[,[IN|OUT|INOUT] 参数名 数据类型…]]) [特性 ...] 过程体\n```\n\n\n\n例如：\n\n```sql\n-- 存储过程\n-- 将语句的结束符号从分号;临时改为两个//(可以是自定义) 让编译器把两个\"//\"之间的内容当做存储过程的代码，不会执行这些代码\nDELIMITER // \n-- 创建存储过程 名称为 add_sum\nCREATE PROCEDURE add_sum(IN a INT,IN b INT,OUT c INT)\n-- 过程体开始\nBEGIN\n-- SET 赋值\n SET c=a+b;\n-- 过程体结束\nEND\n//  -- 存储过程结束\nDELIMITER ; -- 将分隔符还原为分号 ；\n-- 调用存储过程\nSET @a=1;\nSET @b=2;\nCALL add_sum(@a,@b,@c);\nSELECT @c AS SUM; -- 输出为3\n```\n\nMySQL默认以\";\"为分隔符，如果没有声明分隔符，则编译器会把存储过程当成SQL语句进行处理，因此编译过程会报错。\n\n所以要事先用`DELIMITER //`声明当前的分隔符，可以自定义。让编译器把两个`//`之间的内容当做存储过程的代码，不会执行这些代码；结束后使用`DELIMITER ;`把分隔符还原。\n\n**MYSQL 存储过程中的关键语法**\n\n声明语句结束符，可以自定义:\n\n```\nDELIMITER $$\n或\nDELIMITER //\n```\n\n声明存储过程:\n\n```\nCREATE PROCEDURE demo_in_parameter(IN p_in int)       \n```\n\n存储过程开始和结束符号:\n\n```\nBEGIN .... END    \n```\n\n变量赋值:\n\n```\nSET @p_in=1  \n```\n\n变量定义:\n\n```\nDECLARE l_int int unsigned default 4000000; \n```\n\n创建mysql存储过程、存储函数:\n\n```\ncreate procedure 存储过程名(参数)\n```\n\n存储过程体:\n\n```\ncreate function 存储函数名(参数)\n```\n\n调用存储过程：\n\n```sql\ncall sp_name[(传参)];\n```\n\n### 3.2 存储过程体\n\n过程体的开始与结束使用`BEGIN`与`END`进行标识。\n\n①如果过程没有参数，也必须在过程名后面写上小括号\n\n　　　　例：`CREATE PROCEDURE sp_name ([proc_parameter[,...]]) ……`\n\n②确保参数的名字不等于列的名字，否则在过程体中，参数名被当做列名来处理\n\n- 存储过程体包含了在过程调用时必须执行的语句，例如：dml、ddl语句，if-then-else和while-do语句、声明变量的declare语句等\n- 过程体格式：以begin开始，以end结束(可嵌套)\n\n```\nBEGIN\n　　BEGIN\n　　　　BEGIN\n　　　　　　statements; \n　　　　END\n　　END\nEND\n```\n\n**注意：** 每个嵌套块及其中的每条语句，必须以分号结束，表示过程体结束的begin-end块(又叫做复合语句compound statement)，则不需要分号。\n\n**为语句块贴标签:**\n\n```\n[begin_label:] BEGIN\n　　[statement_list]\nEND [end_label]\n```\n\n例如：\n\n```sql\nlabel1: BEGIN\n　　label2: BEGIN\n　　　　label3: BEGIN\n　　　　　　statements; \n　　　　END label3 ;\n　　END label2;\nEND label1\n```\n\n标签有两个作用：\n\n- 1、增强代码的可读性\n- 2、在某些语句(例如:leave和iterate语句)，需要用到标签\n\n### 3.3 参数\n\n存储过程根据需要可能会有输入、输出、输入输出参数，如果有多个参数用\",\"分割开。MySQL存储过程的参数用在存储过程的定义，共有三种参数类型,IN,OUT,INOUT:\n\n- **IN**：参数的值必须在调用存储过程时指定，在存储过程中修改该参数的值不能被返回，为默认值\n- **OUT**: 该值可在存储过程内部被改变，并可返回\n- **INOUT**: 调用时指定，并且可被改变和返回\n\n#### 1.IN参数例子\n\n```sql\nDELIMITER //\n  CREATE PROCEDURE in_param(IN p_in int)\n    BEGIN\n    SELECT p_in;\n    SET p_in=2;\n    SELECT p_in;\n    END;\n    //\nDELIMITER ;\n-- 调用\nSET @p_in=1; -- 这里@p_in为1\nCALL in_param(@p_in); -- 这里 修改@p_in值为2\nSELECT @p_in; -- 查询@p_in值依旧为1\n```\n\n**p_in 在存储过程中被修改，但并不影响 @p_id 的值，因为前者为局部变量、后者为全局变量。**\n\n```sql\n-- 此语句的意思就是根据where条件uid=1查询user表，得到的行数存入变量u_count中（给变量赋值）\nselect count(*) into u_count from user where uid=1;\n```\n\n#### 2.OUT参数例子\n\n```sql\n#存储过程\nDELIMITER // -- 将语句的结束符号从分号;临时改为两个//(可以是自定义) 让编译器把两个\"//\"之间的内容当做存储过程的代码，不会执行这些代码\nCREATE PROCEDURE out_param(OUT p_out  INT)\nBEGIN\nSELECT p_out ;\n SET p_out =999;\nEND\n//  -- 存储过程结束\nDELIMITER ; -- 将分隔符还原为分号 ；\nSET @p_out=111;\nCALL out_param(@p_out); -- 因为out是向调用者输出参数，不接收输入的参数，所以存储过程里的p_out为null\nSELECT @p_out; -- 调用了out_param存储过程，输出参数，改变了p_out变量的值\n```\n\n#### 3.INOUT输入参数\n\n```sql\n-- 存储过程\nDELIMITER // -- 将语句的结束符号从分号;临时改为两个//(可以是自定义) 让编译器把两个\"//\"之间的内容当做存储过程的代码，不会执行这些代码\nCREATE PROCEDURE inout_param(INOUT p_inout  INT)\nBEGIN\n SELECT p_inout ;\n SET p_inout =999;\n SELECT p_inout ;\nEND\n//  -- 存储过程结束\nDELIMITER ; -- 将分隔符还原为分号 ；\nSET @p_inout=111;\nCALL inout_param(@p_inout);  -- 能接受输入的值 查询结果为111\nSELECT @p_inout; -- 存储过程修改了值 所以结果为999\n```\n\n**注意：**\n\n1、如果过程没有参数，也必须在过程名后面写上小括号例：\n\n```\nCREATE PROCEDURE sp_name ([proc_parameter[,...]]) ……\n```\n\n2、确保参数的名字不等于列的名字，否则在过程体中，参数名被当做列名来处理\n\n**建议：**\n\n- 输入值使用in参数。\n- 返回值使用out参数。\n- inout参数就尽量的少用。\n\n### 3.4 变量\n\n#### 1变量定义\n\n局部变量声明一定要放在存储过程体的开始：\n\n```\nDECLAREvariable_name [,variable_name...] datatype [DEFAULT value];\n```\n\n其中，datatype 为 MySQL 的数据类型，如: int, float, date,varchar(length)\n\n例如:\n\n```sql\nDECLARE l_int int unsigned default 4000000;  \nDECLARE l_numeric number(8,2) DEFAULT 9.95;  \nDECLARE l_date date DEFAULT '1999-12-31';  \nDECLARE l_datetime datetime DEFAULT '1999-12-31 23:59:59';  \nDECLARE l_varchar varchar(255) DEFAULT 'This will not be padded';`\n```\n\n#### 2 变量赋值\n\n```\nSET 变量名 = 表达式值 [,variable_name = expression ...]\n```\n\n#### 3 用户变量\n\n```sql\nSET @ValueName=value; \n\nSET @uid=123;\n```\n\n**注意:**\n\n- 1、用户变量名一般以@开头\n- 2、滥用用户变量会导致程序难以理解及管理\n\n### 3.5 存储过程控制语句\n\n#### 1. 变量作用域\n\n内部的变量在其作用域范围内享有更高的优先权，当执行到 end。变量时，内部变量消失，此时已经在其作用域外，变量不再可见了，应为在存储过程外再也不能找到这个申明的变量，但是你可以通过 out 参数或者将其值指派给会话变量来保存其值。\n\n#### 2.条件语句\n\n##### 1.if-then-else 语句\n\n```sql\nDROP PROCEDURE IF EXISTS myif;  -- 删除存储过程myif 如果存在\nDELIMITER //\nCREATE PROCEDURE myif(IN a INT)\nBEGIN\nDECLARE msg VARCHAR(30);\nIF a = 0 THEN\n\tSET msg='a is 0';\nELSEIF a = 1 THEN \n\tSET msg='a is 1';\nELSE \n\tSET msg='a is others,not 0 or 1';\nEND IF;\nSELECT msg;\nEND\n//\nDELIMITER ;\n\nCALL myif(2); -- 调用\n```\n\n##### 2.case语句：\n\n```sql\nDROP PROCEDURE IF EXISTS mycase;\nDELIMITER //\nCREATE PROCEDURE mycase(IN a INT)\nBEGIN\nDECLARE msg VARCHAR(30); -- 定义变量\nCASE a\nWHEN 0 THEN\n\tSET msg='a is 0';\nWHEN 1 THEN\n\tSET msg='a is 1';\nELSE  -- 相当于switch中的default\n\tSET msg='a is others,not 0 or 1';\nSELECT msg;\nEND CASE;\nEND \n//\nDELIMITER ;\n\nCALL mycase(1); -- 调用\n```\n\n##### 3.循环语句\n\n###### 1.while ···· end while\n\n```sql\nDROP PROCEDURE IF EXISTS mywhile;\nDELIMITER //\nCREATE PROCEDURE mywhile(IN a INT)\nBEGIN\nDECLARE msg VARCHAR(30);\nWHILE a>1 DO\nINSERT INTO user2 VALUES(NULL,a);  -- 循环往表中插入数据\nSET a=a-1; \t\t\t   -- 每次执行结束a减1\nEND WHILE;\nEND\n//\nDELIMITER ;\nDROP PROCEDURE mywhile;\n\nCALL mywhile(5);\n```\n\n\n\n```sql\nwhile 条件 do\n    --循环体\nendwhile\n```\n\n###### 2.repeat···· end repea\n\n它在执行操作后检查结果，而 while 则是执行前进行检查。\n\n```sql\nDROP PROCEDURE IF EXISTS myrepeat;\nDELIMITER //\nCREATE PROCEDURE myrepeat(IN a INT)\nBEGIN\nREPEAT\n INSERT INTO user2 VALUES(NULL,a);\n SET a=a-1;\n UNTIL a<1\n END REPEAT;\n END\n //\nDELIMITER ;\n \nCALL myrepeat(10);\n```\n\n\n\n```sql\nrepeat\n    -- 循环体\nuntil 循环条件  \nend repeat;\n```\n\n###### 3.loop ·····endloop\n\n-- loop 与 leave,iterate 实现循环  \n-- loop 标志位无条件循环，leave 类似于break 语句，跳出循环，跳出 begin end，iterate 类似于continue ，结束本次循环\n\n```sql\nDROP PROCEDURE IF EXISTS myloop;\nDELIMITER //\nCREATE PROCEDURE myloop(IN a INT)\nBEGIN\nloop_label: LOOP\nINSERT INTO user2 VALUES(NULL,a);\nSET a=a-1;\nIF a<1 THEN\n\tLEAVE loop_label;\nEND IF;\nEND LOOP;\nEND\n//\nDELIMITER ;\n\nCALL myloop(10);\n```\n\n###### 4.LABLES 标号\n\n标号可以用在 begin repeat while 或者 loop 语句前，语句标号只能在合法的语句前面使用。可以跳出循环，使运行指令达到复合语句的最后一步。\n\nITERATE 通过引用复合语句的标号,来从新开始复合语句:\n\n```sql\nDROP PROCEDURE IF EXISTS myiterate;\nDELIMITER //\nCREATE PROCEDURE myiterate(IN a INT)\nBEGIN\nloop_label: LOOP\nIF a<3 THEN\n\tSET a=a+1;\nITERATE loop_label; -- 退出这次循环 继续下一次循环 类似于continue\nEND IF;\nINSERT INTO user2 VALUES(NULL,a);\nSET a=a+1;\nIF a>=5 THEN\n\tLEAVE loop_label;\nEND IF;\nEND LOOP;\nEND\n//\nDELIMITER ;\n\nCALL myiterate(1);\n```\n\n## 4. 存储过程操作语法\n\n#### 4.1 存储过程查询\n\n查看某个数据库下面的存储过程\n\n```sql\n-- 查询数据库中的存储过程\nSELECT * FROM mysql.proc WHERE db='数据库名'; \n\n-- MySQL存储过程和函数的信息存储在information_schema数据库下的Routines表中。通过查询该表的记录查询信息\nSELECT * FROM information_schema.routines WHERE routine_schema='数据库名';\n\n-- 这个语句是MySQL的扩展，它返回子程序的特征，如数据库、名字、类型、创建者及创建和修改日期。PROCEDURE和FUNCTION分别表示查看存储过程和函数\nSHOW PROCEDURE STATUS WHERE db='数据库名'; \n```\n\n查看详细的存储过程\n\n```sql\nSHOW CREATE PROCEDURE 数据库.存储过程名; -- 它返回一个可用来重新创建已命名子程序的确切字符串\n```\n\n#### 4.2 修改删除\n\n```sql\n-- 修改\nALTER {PROCEDURE | FUNCTION} proc_or_func [characterustic...]\n\nALTER PROCEDURE 存储过程名字  \nALTER PROCEDURE inout_param  \n-- 删除\nDROP {PROCEDURE | FUNCTION} [IF EXISTS] proc_name\n\nDROP PROCEDURE  inout_param;\nDROP PROCEDURE IF EXISTS inout_param;\n```\n\n\n\n## 5. 参考\n\n`http://www.runoob.com/w3cnote/mysql-stored-procedure.html`\n\n`https://www.2cto.com/database/201805/746743.html`\n\n`https://www.cnblogs.com/mark-chan/p/5384139.html`","source":"_posts/database/mysql_存储过程.md","raw":"---\ntitle: MySQL存储过程入门教程及实例详解\ntags:\n  - MySQL\ncategories:\n  - MySQL\nabbrlink: 38c0d2ef\ndate: 2019-02-13 22:00:00\n---\n\n存储过程是可编程的函数，在数据库中创建并保存，可以由SQL语句和控制结构组成。\n\n本文主要介绍了MySQL的存储过程，通过语法教学及实例演示详细的叙述了MySQL存储过程的基本使用。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 存储过程简介\n\n**存储过程是可编程的函数，在数据库中创建并保存，可以由SQL语句和控制结构组成**。当想要在不同的应用程序或平台上执行相同的函数，或者封装特定功能时，存储过程是非常有用的。数据库中的存储过程可以看做是对编程中面向对象方法的模拟，它允许控制数据的访问方式。\n\nSQL语句需要先编译然后执行，而存储过程（Stored Procedure）是一组为了完成特定功能的SQL语句集，经编译后存储在数据库中，用户通过指定存储过程的名字并给定参数（如果该存储过程带有参数）来调用执行它。\n\n简单的说，就是一组SQL语句集，功能强大，可以实现一些比较复杂的逻辑功能，类似于JAVA语言中的方法；\n\n> 存储过程跟触发器有点类似，都是一组SQL集，但是存储过程是主动调用的，且功能比触发器更加强大，触发器是某件事触发后自动调用；\n\n## 2. 存储过程的优缺点\n\n### 2.1 优点\n\n- 1.**增强SQL语言的功能和灵活性**：存储过程可以用控制语句编写，有很强的灵活性，可以完成复杂的判断和较复杂的运算。\n- 2.**标准组件式编程**：存储过程被创建后，可以在程序中被多次调用，而不必重新编写该存储过程的SQL语句。而且数据库专业人员可以随时对存储过程进行修改，对应用程序源代码毫无影响。\n- 3.**较快的执行速度**：如果某一操作包含大量的Transaction-SQL代码或分别被多次执行，那么存储过程要比批处理的执行速度快很多。因为存储过程是预编译的。在首次运行一个存储过程时查询，优化器对其进行分析优化，并且给出最终被存储在系统表中的执行计划。而批处理的Transaction-SQL语句在每次运行时都要进行编译和优化，速度相对要慢一些。\n- 4.**减少网络流量**：针对同一个数据库对象的操作（如查询、修改），如果这一操作所涉及的Transaction-SQL语句被组织进存储过程，那么当在客户计算机上调用该存储过程时，网络中传送的只是该调用语句，从而大大减少网络流量并降低了网络负载。\n- 5.**作为一种安全机制来充分利用**： 通过对执行某一存储过程的权限进行限制，能够实现对相应的数据的访问权限的限制，避免了非授权用户对数据的访问，保证了数据的安全。\n\n### 2.2 缺点\n\n- 1.可移植性差\n- 2.对于很简单的sql语句， 存储过程没有优势\n- 3.如果存储过程中不一定会减少网络传输（包含的sql数量并不多， 并且执行很快，就没必要了）\n- 4.如果只有一个用户使用数据库， 那么存储过程对于安全也没什么影响\n- 5.团队开发时需要先统一标准， 否则后期维护是个麻烦\n- 6.在大并发量访问的情况下， 不宜写过多涉及运算的存储过程\n- 7.业务逻辑复杂时， 特别是涉及到对很大的表进行操作的时候， 不如在前端先简化业务逻辑\n\n## 3. 存储过程语法\n\n### 3.1 基本语法\n\n```sql\nCREATE PROCEDURE  过程名([[IN|OUT|INOUT] 参数名 数据类型[,[IN|OUT|INOUT] 参数名 数据类型…]]) [特性 ...] 过程体\n```\n\n\n\n例如：\n\n```sql\n-- 存储过程\n-- 将语句的结束符号从分号;临时改为两个//(可以是自定义) 让编译器把两个\"//\"之间的内容当做存储过程的代码，不会执行这些代码\nDELIMITER // \n-- 创建存储过程 名称为 add_sum\nCREATE PROCEDURE add_sum(IN a INT,IN b INT,OUT c INT)\n-- 过程体开始\nBEGIN\n-- SET 赋值\n SET c=a+b;\n-- 过程体结束\nEND\n//  -- 存储过程结束\nDELIMITER ; -- 将分隔符还原为分号 ；\n-- 调用存储过程\nSET @a=1;\nSET @b=2;\nCALL add_sum(@a,@b,@c);\nSELECT @c AS SUM; -- 输出为3\n```\n\nMySQL默认以\";\"为分隔符，如果没有声明分隔符，则编译器会把存储过程当成SQL语句进行处理，因此编译过程会报错。\n\n所以要事先用`DELIMITER //`声明当前的分隔符，可以自定义。让编译器把两个`//`之间的内容当做存储过程的代码，不会执行这些代码；结束后使用`DELIMITER ;`把分隔符还原。\n\n**MYSQL 存储过程中的关键语法**\n\n声明语句结束符，可以自定义:\n\n```\nDELIMITER $$\n或\nDELIMITER //\n```\n\n声明存储过程:\n\n```\nCREATE PROCEDURE demo_in_parameter(IN p_in int)       \n```\n\n存储过程开始和结束符号:\n\n```\nBEGIN .... END    \n```\n\n变量赋值:\n\n```\nSET @p_in=1  \n```\n\n变量定义:\n\n```\nDECLARE l_int int unsigned default 4000000; \n```\n\n创建mysql存储过程、存储函数:\n\n```\ncreate procedure 存储过程名(参数)\n```\n\n存储过程体:\n\n```\ncreate function 存储函数名(参数)\n```\n\n调用存储过程：\n\n```sql\ncall sp_name[(传参)];\n```\n\n### 3.2 存储过程体\n\n过程体的开始与结束使用`BEGIN`与`END`进行标识。\n\n①如果过程没有参数，也必须在过程名后面写上小括号\n\n　　　　例：`CREATE PROCEDURE sp_name ([proc_parameter[,...]]) ……`\n\n②确保参数的名字不等于列的名字，否则在过程体中，参数名被当做列名来处理\n\n- 存储过程体包含了在过程调用时必须执行的语句，例如：dml、ddl语句，if-then-else和while-do语句、声明变量的declare语句等\n- 过程体格式：以begin开始，以end结束(可嵌套)\n\n```\nBEGIN\n　　BEGIN\n　　　　BEGIN\n　　　　　　statements; \n　　　　END\n　　END\nEND\n```\n\n**注意：** 每个嵌套块及其中的每条语句，必须以分号结束，表示过程体结束的begin-end块(又叫做复合语句compound statement)，则不需要分号。\n\n**为语句块贴标签:**\n\n```\n[begin_label:] BEGIN\n　　[statement_list]\nEND [end_label]\n```\n\n例如：\n\n```sql\nlabel1: BEGIN\n　　label2: BEGIN\n　　　　label3: BEGIN\n　　　　　　statements; \n　　　　END label3 ;\n　　END label2;\nEND label1\n```\n\n标签有两个作用：\n\n- 1、增强代码的可读性\n- 2、在某些语句(例如:leave和iterate语句)，需要用到标签\n\n### 3.3 参数\n\n存储过程根据需要可能会有输入、输出、输入输出参数，如果有多个参数用\",\"分割开。MySQL存储过程的参数用在存储过程的定义，共有三种参数类型,IN,OUT,INOUT:\n\n- **IN**：参数的值必须在调用存储过程时指定，在存储过程中修改该参数的值不能被返回，为默认值\n- **OUT**: 该值可在存储过程内部被改变，并可返回\n- **INOUT**: 调用时指定，并且可被改变和返回\n\n#### 1.IN参数例子\n\n```sql\nDELIMITER //\n  CREATE PROCEDURE in_param(IN p_in int)\n    BEGIN\n    SELECT p_in;\n    SET p_in=2;\n    SELECT p_in;\n    END;\n    //\nDELIMITER ;\n-- 调用\nSET @p_in=1; -- 这里@p_in为1\nCALL in_param(@p_in); -- 这里 修改@p_in值为2\nSELECT @p_in; -- 查询@p_in值依旧为1\n```\n\n**p_in 在存储过程中被修改，但并不影响 @p_id 的值，因为前者为局部变量、后者为全局变量。**\n\n```sql\n-- 此语句的意思就是根据where条件uid=1查询user表，得到的行数存入变量u_count中（给变量赋值）\nselect count(*) into u_count from user where uid=1;\n```\n\n#### 2.OUT参数例子\n\n```sql\n#存储过程\nDELIMITER // -- 将语句的结束符号从分号;临时改为两个//(可以是自定义) 让编译器把两个\"//\"之间的内容当做存储过程的代码，不会执行这些代码\nCREATE PROCEDURE out_param(OUT p_out  INT)\nBEGIN\nSELECT p_out ;\n SET p_out =999;\nEND\n//  -- 存储过程结束\nDELIMITER ; -- 将分隔符还原为分号 ；\nSET @p_out=111;\nCALL out_param(@p_out); -- 因为out是向调用者输出参数，不接收输入的参数，所以存储过程里的p_out为null\nSELECT @p_out; -- 调用了out_param存储过程，输出参数，改变了p_out变量的值\n```\n\n#### 3.INOUT输入参数\n\n```sql\n-- 存储过程\nDELIMITER // -- 将语句的结束符号从分号;临时改为两个//(可以是自定义) 让编译器把两个\"//\"之间的内容当做存储过程的代码，不会执行这些代码\nCREATE PROCEDURE inout_param(INOUT p_inout  INT)\nBEGIN\n SELECT p_inout ;\n SET p_inout =999;\n SELECT p_inout ;\nEND\n//  -- 存储过程结束\nDELIMITER ; -- 将分隔符还原为分号 ；\nSET @p_inout=111;\nCALL inout_param(@p_inout);  -- 能接受输入的值 查询结果为111\nSELECT @p_inout; -- 存储过程修改了值 所以结果为999\n```\n\n**注意：**\n\n1、如果过程没有参数，也必须在过程名后面写上小括号例：\n\n```\nCREATE PROCEDURE sp_name ([proc_parameter[,...]]) ……\n```\n\n2、确保参数的名字不等于列的名字，否则在过程体中，参数名被当做列名来处理\n\n**建议：**\n\n- 输入值使用in参数。\n- 返回值使用out参数。\n- inout参数就尽量的少用。\n\n### 3.4 变量\n\n#### 1变量定义\n\n局部变量声明一定要放在存储过程体的开始：\n\n```\nDECLAREvariable_name [,variable_name...] datatype [DEFAULT value];\n```\n\n其中，datatype 为 MySQL 的数据类型，如: int, float, date,varchar(length)\n\n例如:\n\n```sql\nDECLARE l_int int unsigned default 4000000;  \nDECLARE l_numeric number(8,2) DEFAULT 9.95;  \nDECLARE l_date date DEFAULT '1999-12-31';  \nDECLARE l_datetime datetime DEFAULT '1999-12-31 23:59:59';  \nDECLARE l_varchar varchar(255) DEFAULT 'This will not be padded';`\n```\n\n#### 2 变量赋值\n\n```\nSET 变量名 = 表达式值 [,variable_name = expression ...]\n```\n\n#### 3 用户变量\n\n```sql\nSET @ValueName=value; \n\nSET @uid=123;\n```\n\n**注意:**\n\n- 1、用户变量名一般以@开头\n- 2、滥用用户变量会导致程序难以理解及管理\n\n### 3.5 存储过程控制语句\n\n#### 1. 变量作用域\n\n内部的变量在其作用域范围内享有更高的优先权，当执行到 end。变量时，内部变量消失，此时已经在其作用域外，变量不再可见了，应为在存储过程外再也不能找到这个申明的变量，但是你可以通过 out 参数或者将其值指派给会话变量来保存其值。\n\n#### 2.条件语句\n\n##### 1.if-then-else 语句\n\n```sql\nDROP PROCEDURE IF EXISTS myif;  -- 删除存储过程myif 如果存在\nDELIMITER //\nCREATE PROCEDURE myif(IN a INT)\nBEGIN\nDECLARE msg VARCHAR(30);\nIF a = 0 THEN\n\tSET msg='a is 0';\nELSEIF a = 1 THEN \n\tSET msg='a is 1';\nELSE \n\tSET msg='a is others,not 0 or 1';\nEND IF;\nSELECT msg;\nEND\n//\nDELIMITER ;\n\nCALL myif(2); -- 调用\n```\n\n##### 2.case语句：\n\n```sql\nDROP PROCEDURE IF EXISTS mycase;\nDELIMITER //\nCREATE PROCEDURE mycase(IN a INT)\nBEGIN\nDECLARE msg VARCHAR(30); -- 定义变量\nCASE a\nWHEN 0 THEN\n\tSET msg='a is 0';\nWHEN 1 THEN\n\tSET msg='a is 1';\nELSE  -- 相当于switch中的default\n\tSET msg='a is others,not 0 or 1';\nSELECT msg;\nEND CASE;\nEND \n//\nDELIMITER ;\n\nCALL mycase(1); -- 调用\n```\n\n##### 3.循环语句\n\n###### 1.while ···· end while\n\n```sql\nDROP PROCEDURE IF EXISTS mywhile;\nDELIMITER //\nCREATE PROCEDURE mywhile(IN a INT)\nBEGIN\nDECLARE msg VARCHAR(30);\nWHILE a>1 DO\nINSERT INTO user2 VALUES(NULL,a);  -- 循环往表中插入数据\nSET a=a-1; \t\t\t   -- 每次执行结束a减1\nEND WHILE;\nEND\n//\nDELIMITER ;\nDROP PROCEDURE mywhile;\n\nCALL mywhile(5);\n```\n\n\n\n```sql\nwhile 条件 do\n    --循环体\nendwhile\n```\n\n###### 2.repeat···· end repea\n\n它在执行操作后检查结果，而 while 则是执行前进行检查。\n\n```sql\nDROP PROCEDURE IF EXISTS myrepeat;\nDELIMITER //\nCREATE PROCEDURE myrepeat(IN a INT)\nBEGIN\nREPEAT\n INSERT INTO user2 VALUES(NULL,a);\n SET a=a-1;\n UNTIL a<1\n END REPEAT;\n END\n //\nDELIMITER ;\n \nCALL myrepeat(10);\n```\n\n\n\n```sql\nrepeat\n    -- 循环体\nuntil 循环条件  \nend repeat;\n```\n\n###### 3.loop ·····endloop\n\n-- loop 与 leave,iterate 实现循环  \n-- loop 标志位无条件循环，leave 类似于break 语句，跳出循环，跳出 begin end，iterate 类似于continue ，结束本次循环\n\n```sql\nDROP PROCEDURE IF EXISTS myloop;\nDELIMITER //\nCREATE PROCEDURE myloop(IN a INT)\nBEGIN\nloop_label: LOOP\nINSERT INTO user2 VALUES(NULL,a);\nSET a=a-1;\nIF a<1 THEN\n\tLEAVE loop_label;\nEND IF;\nEND LOOP;\nEND\n//\nDELIMITER ;\n\nCALL myloop(10);\n```\n\n###### 4.LABLES 标号\n\n标号可以用在 begin repeat while 或者 loop 语句前，语句标号只能在合法的语句前面使用。可以跳出循环，使运行指令达到复合语句的最后一步。\n\nITERATE 通过引用复合语句的标号,来从新开始复合语句:\n\n```sql\nDROP PROCEDURE IF EXISTS myiterate;\nDELIMITER //\nCREATE PROCEDURE myiterate(IN a INT)\nBEGIN\nloop_label: LOOP\nIF a<3 THEN\n\tSET a=a+1;\nITERATE loop_label; -- 退出这次循环 继续下一次循环 类似于continue\nEND IF;\nINSERT INTO user2 VALUES(NULL,a);\nSET a=a+1;\nIF a>=5 THEN\n\tLEAVE loop_label;\nEND IF;\nEND LOOP;\nEND\n//\nDELIMITER ;\n\nCALL myiterate(1);\n```\n\n## 4. 存储过程操作语法\n\n#### 4.1 存储过程查询\n\n查看某个数据库下面的存储过程\n\n```sql\n-- 查询数据库中的存储过程\nSELECT * FROM mysql.proc WHERE db='数据库名'; \n\n-- MySQL存储过程和函数的信息存储在information_schema数据库下的Routines表中。通过查询该表的记录查询信息\nSELECT * FROM information_schema.routines WHERE routine_schema='数据库名';\n\n-- 这个语句是MySQL的扩展，它返回子程序的特征，如数据库、名字、类型、创建者及创建和修改日期。PROCEDURE和FUNCTION分别表示查看存储过程和函数\nSHOW PROCEDURE STATUS WHERE db='数据库名'; \n```\n\n查看详细的存储过程\n\n```sql\nSHOW CREATE PROCEDURE 数据库.存储过程名; -- 它返回一个可用来重新创建已命名子程序的确切字符串\n```\n\n#### 4.2 修改删除\n\n```sql\n-- 修改\nALTER {PROCEDURE | FUNCTION} proc_or_func [characterustic...]\n\nALTER PROCEDURE 存储过程名字  \nALTER PROCEDURE inout_param  \n-- 删除\nDROP {PROCEDURE | FUNCTION} [IF EXISTS] proc_name\n\nDROP PROCEDURE  inout_param;\nDROP PROCEDURE IF EXISTS inout_param;\n```\n\n\n\n## 5. 参考\n\n`http://www.runoob.com/w3cnote/mysql-stored-procedure.html`\n\n`https://www.2cto.com/database/201805/746743.html`\n\n`https://www.cnblogs.com/mark-chan/p/5384139.html`","slug":"database/mysql_存储过程","published":1,"updated":"2019-02-14T13:55:42.344Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv4ad003r0ww4k18mc6jv","content":"<p>存储过程是可编程的函数，在数据库中创建并保存，可以由SQL语句和控制结构组成。</p>\n<p>本文主要介绍了MySQL的存储过程，通过语法教学及实例演示详细的叙述了MySQL存储过程的基本使用。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-存储过程简介\"><a href=\"#1-存储过程简介\" class=\"headerlink\" title=\"1. 存储过程简介\"></a>1. 存储过程简介</h2><p><strong>存储过程是可编程的函数，在数据库中创建并保存，可以由SQL语句和控制结构组成</strong>。当想要在不同的应用程序或平台上执行相同的函数，或者封装特定功能时，存储过程是非常有用的。数据库中的存储过程可以看做是对编程中面向对象方法的模拟，它允许控制数据的访问方式。</p>\n<p>SQL语句需要先编译然后执行，而存储过程（Stored Procedure）是一组为了完成特定功能的SQL语句集，经编译后存储在数据库中，用户通过指定存储过程的名字并给定参数（如果该存储过程带有参数）来调用执行它。</p>\n<p>简单的说，就是一组SQL语句集，功能强大，可以实现一些比较复杂的逻辑功能，类似于JAVA语言中的方法；</p>\n<blockquote>\n<p>存储过程跟触发器有点类似，都是一组SQL集，但是存储过程是主动调用的，且功能比触发器更加强大，触发器是某件事触发后自动调用；</p>\n</blockquote>\n<h2 id=\"2-存储过程的优缺点\"><a href=\"#2-存储过程的优缺点\" class=\"headerlink\" title=\"2. 存储过程的优缺点\"></a>2. 存储过程的优缺点</h2><h3 id=\"2-1-优点\"><a href=\"#2-1-优点\" class=\"headerlink\" title=\"2.1 优点\"></a>2.1 优点</h3><ul>\n<li>1.<strong>增强SQL语言的功能和灵活性</strong>：存储过程可以用控制语句编写，有很强的灵活性，可以完成复杂的判断和较复杂的运算。</li>\n<li>2.<strong>标准组件式编程</strong>：存储过程被创建后，可以在程序中被多次调用，而不必重新编写该存储过程的SQL语句。而且数据库专业人员可以随时对存储过程进行修改，对应用程序源代码毫无影响。</li>\n<li>3.<strong>较快的执行速度</strong>：如果某一操作包含大量的Transaction-SQL代码或分别被多次执行，那么存储过程要比批处理的执行速度快很多。因为存储过程是预编译的。在首次运行一个存储过程时查询，优化器对其进行分析优化，并且给出最终被存储在系统表中的执行计划。而批处理的Transaction-SQL语句在每次运行时都要进行编译和优化，速度相对要慢一些。</li>\n<li>4.<strong>减少网络流量</strong>：针对同一个数据库对象的操作（如查询、修改），如果这一操作所涉及的Transaction-SQL语句被组织进存储过程，那么当在客户计算机上调用该存储过程时，网络中传送的只是该调用语句，从而大大减少网络流量并降低了网络负载。</li>\n<li>5.<strong>作为一种安全机制来充分利用</strong>： 通过对执行某一存储过程的权限进行限制，能够实现对相应的数据的访问权限的限制，避免了非授权用户对数据的访问，保证了数据的安全。</li>\n</ul>\n<h3 id=\"2-2-缺点\"><a href=\"#2-2-缺点\" class=\"headerlink\" title=\"2.2 缺点\"></a>2.2 缺点</h3><ul>\n<li>1.可移植性差</li>\n<li>2.对于很简单的sql语句， 存储过程没有优势</li>\n<li>3.如果存储过程中不一定会减少网络传输（包含的sql数量并不多， 并且执行很快，就没必要了）</li>\n<li>4.如果只有一个用户使用数据库， 那么存储过程对于安全也没什么影响</li>\n<li>5.团队开发时需要先统一标准， 否则后期维护是个麻烦</li>\n<li>6.在大并发量访问的情况下， 不宜写过多涉及运算的存储过程</li>\n<li>7.业务逻辑复杂时， 特别是涉及到对很大的表进行操作的时候， 不如在前端先简化业务逻辑</li>\n</ul>\n<h2 id=\"3-存储过程语法\"><a href=\"#3-存储过程语法\" class=\"headerlink\" title=\"3. 存储过程语法\"></a>3. 存储过程语法</h2><h3 id=\"3-1-基本语法\"><a href=\"#3-1-基本语法\" class=\"headerlink\" title=\"3.1 基本语法\"></a>3.1 基本语法</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span>  过程名([[<span class=\"keyword\">IN</span>|<span class=\"keyword\">OUT</span>|INOUT] 参数名 数据类型[,[<span class=\"keyword\">IN</span>|<span class=\"keyword\">OUT</span>|INOUT] 参数名 数据类型…]]) [特性 ...] 过程体</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 存储过程</span></span><br><span class=\"line\"><span class=\"comment\">-- 将语句的结束符号从分号;临时改为两个//(可以是自定义) 让编译器把两个\"//\"之间的内容当做存储过程的代码，不会执行这些代码</span></span><br><span class=\"line\">DELIMITER // </span><br><span class=\"line\"><span class=\"comment\">-- 创建存储过程 名称为 add_sum</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> add_sum(<span class=\"keyword\">IN</span> a <span class=\"built_in\">INT</span>,<span class=\"keyword\">IN</span> b <span class=\"built_in\">INT</span>,<span class=\"keyword\">OUT</span> c <span class=\"built_in\">INT</span>)</span><br><span class=\"line\"><span class=\"comment\">-- 过程体开始</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"><span class=\"comment\">-- SET 赋值</span></span><br><span class=\"line\"> <span class=\"keyword\">SET</span> c=a+b;</span><br><span class=\"line\"><span class=\"comment\">-- 过程体结束</span></span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\">//  <span class=\"comment\">-- 存储过程结束</span></span><br><span class=\"line\">DELIMITER ; <span class=\"comment\">-- 将分隔符还原为分号 ；</span></span><br><span class=\"line\"><span class=\"comment\">-- 调用存储过程</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> @a=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">SET</span> @b=<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">CALL</span> add_sum(@a,@b,@c);</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> @c <span class=\"keyword\">AS</span> <span class=\"keyword\">SUM</span>; <span class=\"comment\">-- 输出为3</span></span><br></pre></td></tr></table></figure>\n<p>MySQL默认以”;”为分隔符，如果没有声明分隔符，则编译器会把存储过程当成SQL语句进行处理，因此编译过程会报错。</p>\n<p>所以要事先用<code>DELIMITER //</code>声明当前的分隔符，可以自定义。让编译器把两个<code>//</code>之间的内容当做存储过程的代码，不会执行这些代码；结束后使用<code>DELIMITER ;</code>把分隔符还原。</p>\n<p><strong>MYSQL 存储过程中的关键语法</strong></p>\n<p>声明语句结束符，可以自定义:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER $$</span><br><span class=\"line\">或</span><br><span class=\"line\">DELIMITER //</span><br></pre></td></tr></table></figure>\n<p>声明存储过程:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE PROCEDURE demo_in_parameter(IN p_in int)</span><br></pre></td></tr></table></figure>\n<p>存储过程开始和结束符号:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BEGIN .... END</span><br></pre></td></tr></table></figure>\n<p>变量赋值:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET @p_in=1</span><br></pre></td></tr></table></figure>\n<p>变量定义:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE l_int int unsigned default 4000000;</span><br></pre></td></tr></table></figure>\n<p>创建mysql存储过程、存储函数:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create procedure 存储过程名(参数)</span><br></pre></td></tr></table></figure>\n<p>存储过程体:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create function 存储函数名(参数)</span><br></pre></td></tr></table></figure>\n<p>调用存储过程：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">call</span> sp_name[(传参)];</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-存储过程体\"><a href=\"#3-2-存储过程体\" class=\"headerlink\" title=\"3.2 存储过程体\"></a>3.2 存储过程体</h3><p>过程体的开始与结束使用<code>BEGIN</code>与<code>END</code>进行标识。</p>\n<p>①如果过程没有参数，也必须在过程名后面写上小括号</p>\n<p>　　　　例：<code>CREATE PROCEDURE sp_name ([proc_parameter[,...]]) ……</code></p>\n<p>②确保参数的名字不等于列的名字，否则在过程体中，参数名被当做列名来处理</p>\n<ul>\n<li>存储过程体包含了在过程调用时必须执行的语句，例如：dml、ddl语句，if-then-else和while-do语句、声明变量的declare语句等</li>\n<li>过程体格式：以begin开始，以end结束(可嵌套)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BEGIN</span><br><span class=\"line\">　　BEGIN</span><br><span class=\"line\">　　　　BEGIN</span><br><span class=\"line\">　　　　　　statements; </span><br><span class=\"line\">　　　　END</span><br><span class=\"line\">　　END</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong> 每个嵌套块及其中的每条语句，必须以分号结束，表示过程体结束的begin-end块(又叫做复合语句compound statement)，则不需要分号。</p>\n<p><strong>为语句块贴标签:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[begin_label:] BEGIN</span><br><span class=\"line\">　　[statement_list]</span><br><span class=\"line\">END [end_label]</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">label1: <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">　　label2: <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">　　　　label3: <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">　　　　　　statements; </span><br><span class=\"line\">　　　　<span class=\"keyword\">END</span> label3 ;</span><br><span class=\"line\">　　<span class=\"keyword\">END</span> label2;</span><br><span class=\"line\"><span class=\"keyword\">END</span> label1</span><br></pre></td></tr></table></figure>\n<p>标签有两个作用：</p>\n<ul>\n<li>1、增强代码的可读性</li>\n<li>2、在某些语句(例如:leave和iterate语句)，需要用到标签</li>\n</ul>\n<h3 id=\"3-3-参数\"><a href=\"#3-3-参数\" class=\"headerlink\" title=\"3.3 参数\"></a>3.3 参数</h3><p>存储过程根据需要可能会有输入、输出、输入输出参数，如果有多个参数用”,”分割开。MySQL存储过程的参数用在存储过程的定义，共有三种参数类型,IN,OUT,INOUT:</p>\n<ul>\n<li><strong>IN</strong>：参数的值必须在调用存储过程时指定，在存储过程中修改该参数的值不能被返回，为默认值</li>\n<li><strong>OUT</strong>: 该值可在存储过程内部被改变，并可返回</li>\n<li><strong>INOUT</strong>: 调用时指定，并且可被改变和返回</li>\n</ul>\n<h4 id=\"1-IN参数例子\"><a href=\"#1-IN参数例子\" class=\"headerlink\" title=\"1.IN参数例子\"></a>1.IN参数例子</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER //</span><br><span class=\"line\">  <span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> in_param(<span class=\"keyword\">IN</span> p_in <span class=\"built_in\">int</span>)</span><br><span class=\"line\">    <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> p_in;</span><br><span class=\"line\">    <span class=\"keyword\">SET</span> p_in=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> p_in;</span><br><span class=\"line\">    <span class=\"keyword\">END</span>;</span><br><span class=\"line\">    //</span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"><span class=\"comment\">-- 调用</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> @p_in=<span class=\"number\">1</span>; <span class=\"comment\">-- 这里@p_in为1</span></span><br><span class=\"line\"><span class=\"keyword\">CALL</span> in_param(@p_in); <span class=\"comment\">-- 这里 修改@p_in值为2</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> @p_in; <span class=\"comment\">-- 查询@p_in值依旧为1</span></span><br></pre></td></tr></table></figure>\n<p><strong>p_in 在存储过程中被修改，但并不影响 @p_id 的值，因为前者为局部变量、后者为全局变量。</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 此语句的意思就是根据where条件uid=1查询user表，得到的行数存入变量u_count中（给变量赋值）</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">into</span> u_count <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> uid=<span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-OUT参数例子\"><a href=\"#2-OUT参数例子\" class=\"headerlink\" title=\"2.OUT参数例子\"></a>2.OUT参数例子</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#存储过程</span></span><br><span class=\"line\">DELIMITER // <span class=\"comment\">-- 将语句的结束符号从分号;临时改为两个//(可以是自定义) 让编译器把两个\"//\"之间的内容当做存储过程的代码，不会执行这些代码</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> out_param(<span class=\"keyword\">OUT</span> p_out  <span class=\"built_in\">INT</span>)</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> p_out ;</span><br><span class=\"line\"> <span class=\"keyword\">SET</span> p_out =<span class=\"number\">999</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\">//  <span class=\"comment\">-- 存储过程结束</span></span><br><span class=\"line\">DELIMITER ; <span class=\"comment\">-- 将分隔符还原为分号 ；</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> @p_out=<span class=\"number\">111</span>;</span><br><span class=\"line\"><span class=\"keyword\">CALL</span> out_param(@p_out); <span class=\"comment\">-- 因为out是向调用者输出参数，不接收输入的参数，所以存储过程里的p_out为null</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> @p_out; <span class=\"comment\">-- 调用了out_param存储过程，输出参数，改变了p_out变量的值</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-INOUT输入参数\"><a href=\"#3-INOUT输入参数\" class=\"headerlink\" title=\"3.INOUT输入参数\"></a>3.INOUT输入参数</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 存储过程</span></span><br><span class=\"line\">DELIMITER // <span class=\"comment\">-- 将语句的结束符号从分号;临时改为两个//(可以是自定义) 让编译器把两个\"//\"之间的内容当做存储过程的代码，不会执行这些代码</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> inout_param(INOUT p_inout  <span class=\"built_in\">INT</span>)</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"> <span class=\"keyword\">SELECT</span> p_inout ;</span><br><span class=\"line\"> <span class=\"keyword\">SET</span> p_inout =<span class=\"number\">999</span>;</span><br><span class=\"line\"> <span class=\"keyword\">SELECT</span> p_inout ;</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\">//  <span class=\"comment\">-- 存储过程结束</span></span><br><span class=\"line\">DELIMITER ; <span class=\"comment\">-- 将分隔符还原为分号 ；</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> @p_inout=<span class=\"number\">111</span>;</span><br><span class=\"line\"><span class=\"keyword\">CALL</span> inout_param(@p_inout);  <span class=\"comment\">-- 能接受输入的值 查询结果为111</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> @p_inout; <span class=\"comment\">-- 存储过程修改了值 所以结果为999</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong></p>\n<p>1、如果过程没有参数，也必须在过程名后面写上小括号例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE PROCEDURE sp_name ([proc_parameter[,...]]) ……</span><br></pre></td></tr></table></figure>\n<p>2、确保参数的名字不等于列的名字，否则在过程体中，参数名被当做列名来处理</p>\n<p><strong>建议：</strong></p>\n<ul>\n<li>输入值使用in参数。</li>\n<li>返回值使用out参数。</li>\n<li>inout参数就尽量的少用。</li>\n</ul>\n<h3 id=\"3-4-变量\"><a href=\"#3-4-变量\" class=\"headerlink\" title=\"3.4 变量\"></a>3.4 变量</h3><h4 id=\"1变量定义\"><a href=\"#1变量定义\" class=\"headerlink\" title=\"1变量定义\"></a>1变量定义</h4><p>局部变量声明一定要放在存储过程体的开始：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLAREvariable_name [,variable_name...] datatype [DEFAULT value];</span><br></pre></td></tr></table></figure>\n<p>其中，datatype 为 MySQL 的数据类型，如: int, float, date,varchar(length)</p>\n<p>例如:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span> l_int <span class=\"built_in\">int</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">default</span> <span class=\"number\">4000000</span>;  </span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span> l_numeric <span class=\"built_in\">number</span>(<span class=\"number\">8</span>,<span class=\"number\">2</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"number\">9.95</span>;  </span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span> l_date <span class=\"built_in\">date</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'1999-12-31'</span>;  </span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span> l_datetime datetime <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'1999-12-31 23:59:59'</span>;  </span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span> l_varchar <span class=\"built_in\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'This will not be padded'</span>;`</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-变量赋值\"><a href=\"#2-变量赋值\" class=\"headerlink\" title=\"2 变量赋值\"></a>2 变量赋值</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET 变量名 = 表达式值 [,variable_name = expression ...]</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-用户变量\"><a href=\"#3-用户变量\" class=\"headerlink\" title=\"3 用户变量\"></a>3 用户变量</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span> @ValueName=<span class=\"keyword\">value</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SET</span> @uid=<span class=\"number\">123</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>注意:</strong></p>\n<ul>\n<li>1、用户变量名一般以@开头</li>\n<li>2、滥用用户变量会导致程序难以理解及管理</li>\n</ul>\n<h3 id=\"3-5-存储过程控制语句\"><a href=\"#3-5-存储过程控制语句\" class=\"headerlink\" title=\"3.5 存储过程控制语句\"></a>3.5 存储过程控制语句</h3><h4 id=\"1-变量作用域\"><a href=\"#1-变量作用域\" class=\"headerlink\" title=\"1. 变量作用域\"></a>1. 变量作用域</h4><p>内部的变量在其作用域范围内享有更高的优先权，当执行到 end。变量时，内部变量消失，此时已经在其作用域外，变量不再可见了，应为在存储过程外再也不能找到这个申明的变量，但是你可以通过 out 参数或者将其值指派给会话变量来保存其值。</p>\n<h4 id=\"2-条件语句\"><a href=\"#2-条件语句\" class=\"headerlink\" title=\"2.条件语句\"></a>2.条件语句</h4><h5 id=\"1-if-then-else-语句\"><a href=\"#1-if-then-else-语句\" class=\"headerlink\" title=\"1.if-then-else 语句\"></a>1.if-then-else 语句</h5><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> myif;  <span class=\"comment\">-- 删除存储过程myif 如果存在</span></span><br><span class=\"line\">DELIMITER //</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> myif(<span class=\"keyword\">IN</span> a <span class=\"built_in\">INT</span>)</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span> msg <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>);</span><br><span class=\"line\">IF a = 0 THEN</span><br><span class=\"line\">\t<span class=\"keyword\">SET</span> msg=<span class=\"string\">'a is 0'</span>;</span><br><span class=\"line\">ELSEIF a = 1 THEN </span><br><span class=\"line\">\t<span class=\"keyword\">SET</span> msg=<span class=\"string\">'a is 1'</span>;</span><br><span class=\"line\">ELSE </span><br><span class=\"line\">\t<span class=\"keyword\">SET</span> msg=<span class=\"string\">'a is others,not 0 or 1'</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">IF</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> msg;</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\">//</span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CALL</span> myif(<span class=\"number\">2</span>); <span class=\"comment\">-- 调用</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"2-case语句：\"><a href=\"#2-case语句：\" class=\"headerlink\" title=\"2.case语句：\"></a>2.case语句：</h5><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> mycase;</span><br><span class=\"line\">DELIMITER //</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> mycase(<span class=\"keyword\">IN</span> a <span class=\"built_in\">INT</span>)</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span> msg <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>); <span class=\"comment\">-- 定义变量</span></span><br><span class=\"line\">CASE a</span><br><span class=\"line\">WHEN 0 THEN</span><br><span class=\"line\">\t<span class=\"keyword\">SET</span> msg=<span class=\"string\">'a is 0'</span>;</span><br><span class=\"line\">WHEN 1 THEN</span><br><span class=\"line\">\t<span class=\"keyword\">SET</span> msg=<span class=\"string\">'a is 1'</span>;</span><br><span class=\"line\">ELSE  <span class=\"comment\">-- 相当于switch中的default</span></span><br><span class=\"line\">\t<span class=\"keyword\">SET</span> msg=<span class=\"string\">'a is others,not 0 or 1'</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> msg;</span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">CASE</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span> </span><br><span class=\"line\">//</span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CALL</span> mycase(<span class=\"number\">1</span>); <span class=\"comment\">-- 调用</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"3-循环语句\"><a href=\"#3-循环语句\" class=\"headerlink\" title=\"3.循环语句\"></a>3.循环语句</h5><h6 id=\"1-while-····-end-while\"><a href=\"#1-while-····-end-while\" class=\"headerlink\" title=\"1.while ···· end while\"></a>1.while ···· end while</h6><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> mywhile;</span><br><span class=\"line\">DELIMITER //</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> mywhile(<span class=\"keyword\">IN</span> a <span class=\"built_in\">INT</span>)</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span> msg <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>);</span><br><span class=\"line\">WHILE a&gt;1 DO</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> user2 <span class=\"keyword\">VALUES</span>(<span class=\"literal\">NULL</span>,a);  <span class=\"comment\">-- 循环往表中插入数据</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> a=a<span class=\"number\">-1</span>; \t\t\t   <span class=\"comment\">-- 每次执行结束a减1</span></span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">WHILE</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\">//</span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> mywhile;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CALL</span> mywhile(<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while 条件 <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"comment\">--循环体</span></span><br><span class=\"line\">endwhile</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-repeat····-end-repea\"><a href=\"#2-repeat····-end-repea\" class=\"headerlink\" title=\"2.repeat···· end repea\"></a>2.repeat···· end repea</h6><p>它在执行操作后检查结果，而 while 则是执行前进行检查。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> myrepeat;</span><br><span class=\"line\">DELIMITER //</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> myrepeat(<span class=\"keyword\">IN</span> a <span class=\"built_in\">INT</span>)</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"><span class=\"keyword\">REPEAT</span></span><br><span class=\"line\"> <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> user2 <span class=\"keyword\">VALUES</span>(<span class=\"literal\">NULL</span>,a);</span><br><span class=\"line\"> <span class=\"keyword\">SET</span> a=a<span class=\"number\">-1</span>;</span><br><span class=\"line\"> UNTIL a&lt;1</span><br><span class=\"line\"> <span class=\"keyword\">END</span> <span class=\"keyword\">REPEAT</span>;</span><br><span class=\"line\"> <span class=\"keyword\">END</span></span><br><span class=\"line\"> //</span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">CALL</span> myrepeat(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repeat</span><br><span class=\"line\">    <span class=\"comment\">-- 循环体</span></span><br><span class=\"line\">until 循环条件  </span><br><span class=\"line\"><span class=\"keyword\">end</span> <span class=\"keyword\">repeat</span>;</span><br></pre></td></tr></table></figure>\n<h6 id=\"3-loop-·····endloop\"><a href=\"#3-loop-·····endloop\" class=\"headerlink\" title=\"3.loop ·····endloop\"></a>3.loop ·····endloop</h6><p>– loop 与 leave,iterate 实现循环<br>– loop 标志位无条件循环，leave 类似于break 语句，跳出循环，跳出 begin end，iterate 类似于continue ，结束本次循环</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> myloop;</span><br><span class=\"line\">DELIMITER //</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> myloop(<span class=\"keyword\">IN</span> a <span class=\"built_in\">INT</span>)</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">loop_label: <span class=\"keyword\">LOOP</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> user2 <span class=\"keyword\">VALUES</span>(<span class=\"literal\">NULL</span>,a);</span><br><span class=\"line\"><span class=\"keyword\">SET</span> a=a<span class=\"number\">-1</span>;</span><br><span class=\"line\">IF a&lt;1 THEN</span><br><span class=\"line\">\tLEAVE loop_label;</span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">IF</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">LOOP</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\">//</span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CALL</span> myloop(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<h6 id=\"4-LABLES-标号\"><a href=\"#4-LABLES-标号\" class=\"headerlink\" title=\"4.LABLES 标号\"></a>4.LABLES 标号</h6><p>标号可以用在 begin repeat while 或者 loop 语句前，语句标号只能在合法的语句前面使用。可以跳出循环，使运行指令达到复合语句的最后一步。</p>\n<p>ITERATE 通过引用复合语句的标号,来从新开始复合语句:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> myiterate;</span><br><span class=\"line\">DELIMITER //</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> myiterate(<span class=\"keyword\">IN</span> a <span class=\"built_in\">INT</span>)</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">loop_label: <span class=\"keyword\">LOOP</span></span><br><span class=\"line\"><span class=\"keyword\">IF</span> a&lt;<span class=\"number\">3</span> <span class=\"keyword\">THEN</span></span><br><span class=\"line\">\t<span class=\"keyword\">SET</span> a=a+<span class=\"number\">1</span>;</span><br><span class=\"line\">ITERATE loop_label; <span class=\"comment\">-- 退出这次循环 继续下一次循环 类似于continue</span></span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">IF</span>;</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> user2 <span class=\"keyword\">VALUES</span>(<span class=\"literal\">NULL</span>,a);</span><br><span class=\"line\"><span class=\"keyword\">SET</span> a=a+<span class=\"number\">1</span>;</span><br><span class=\"line\">IF a&gt;=5 THEN</span><br><span class=\"line\">\tLEAVE loop_label;</span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">IF</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">LOOP</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\">//</span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CALL</span> myiterate(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-存储过程操作语法\"><a href=\"#4-存储过程操作语法\" class=\"headerlink\" title=\"4. 存储过程操作语法\"></a>4. 存储过程操作语法</h2><h4 id=\"4-1-存储过程查询\"><a href=\"#4-1-存储过程查询\" class=\"headerlink\" title=\"4.1 存储过程查询\"></a>4.1 存储过程查询</h4><p>查看某个数据库下面的存储过程</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查询数据库中的存储过程</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> mysql.proc <span class=\"keyword\">WHERE</span> db=<span class=\"string\">'数据库名'</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- MySQL存储过程和函数的信息存储在information_schema数据库下的Routines表中。通过查询该表的记录查询信息</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> information_schema.routines <span class=\"keyword\">WHERE</span> routine_schema=<span class=\"string\">'数据库名'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 这个语句是MySQL的扩展，它返回子程序的特征，如数据库、名字、类型、创建者及创建和修改日期。PROCEDURE和FUNCTION分别表示查看存储过程和函数</span></span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">PROCEDURE</span> <span class=\"keyword\">STATUS</span> <span class=\"keyword\">WHERE</span> db=<span class=\"string\">'数据库名'</span>;</span><br></pre></td></tr></table></figure>\n<p>查看详细的存储过程</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> 数据库.存储过程名; <span class=\"comment\">-- 它返回一个可用来重新创建已命名子程序的确切字符串</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2-修改删除\"><a href=\"#4-2-修改删除\" class=\"headerlink\" title=\"4.2 修改删除\"></a>4.2 修改删除</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 修改</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> &#123;<span class=\"keyword\">PROCEDURE</span> | <span class=\"keyword\">FUNCTION</span>&#125; proc_or_func [characterustic...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">PROCEDURE</span> 存储过程名字  </span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">PROCEDURE</span> inout_param  </span><br><span class=\"line\"><span class=\"comment\">-- 删除</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> &#123;<span class=\"keyword\">PROCEDURE</span> | <span class=\"keyword\">FUNCTION</span>&#125; [<span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span>] proc_name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span>  inout_param;</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> inout_param;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-参考\"><a href=\"#5-参考\" class=\"headerlink\" title=\"5. 参考\"></a>5. 参考</h2><p><code>http://www.runoob.com/w3cnote/mysql-stored-procedure.html</code></p>\n<p><code>https://www.2cto.com/database/201805/746743.html</code></p>\n<p><code>https://www.cnblogs.com/mark-chan/p/5384139.html</code></p>\n","site":{"data":{}},"excerpt":"<p>存储过程是可编程的函数，在数据库中创建并保存，可以由SQL语句和控制结构组成。</p>\n<p>本文主要介绍了MySQL的存储过程，通过语法教学及实例演示详细的叙述了MySQL存储过程的基本使用。</p>","more":"<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-存储过程简介\"><a href=\"#1-存储过程简介\" class=\"headerlink\" title=\"1. 存储过程简介\"></a>1. 存储过程简介</h2><p><strong>存储过程是可编程的函数，在数据库中创建并保存，可以由SQL语句和控制结构组成</strong>。当想要在不同的应用程序或平台上执行相同的函数，或者封装特定功能时，存储过程是非常有用的。数据库中的存储过程可以看做是对编程中面向对象方法的模拟，它允许控制数据的访问方式。</p>\n<p>SQL语句需要先编译然后执行，而存储过程（Stored Procedure）是一组为了完成特定功能的SQL语句集，经编译后存储在数据库中，用户通过指定存储过程的名字并给定参数（如果该存储过程带有参数）来调用执行它。</p>\n<p>简单的说，就是一组SQL语句集，功能强大，可以实现一些比较复杂的逻辑功能，类似于JAVA语言中的方法；</p>\n<blockquote>\n<p>存储过程跟触发器有点类似，都是一组SQL集，但是存储过程是主动调用的，且功能比触发器更加强大，触发器是某件事触发后自动调用；</p>\n</blockquote>\n<h2 id=\"2-存储过程的优缺点\"><a href=\"#2-存储过程的优缺点\" class=\"headerlink\" title=\"2. 存储过程的优缺点\"></a>2. 存储过程的优缺点</h2><h3 id=\"2-1-优点\"><a href=\"#2-1-优点\" class=\"headerlink\" title=\"2.1 优点\"></a>2.1 优点</h3><ul>\n<li>1.<strong>增强SQL语言的功能和灵活性</strong>：存储过程可以用控制语句编写，有很强的灵活性，可以完成复杂的判断和较复杂的运算。</li>\n<li>2.<strong>标准组件式编程</strong>：存储过程被创建后，可以在程序中被多次调用，而不必重新编写该存储过程的SQL语句。而且数据库专业人员可以随时对存储过程进行修改，对应用程序源代码毫无影响。</li>\n<li>3.<strong>较快的执行速度</strong>：如果某一操作包含大量的Transaction-SQL代码或分别被多次执行，那么存储过程要比批处理的执行速度快很多。因为存储过程是预编译的。在首次运行一个存储过程时查询，优化器对其进行分析优化，并且给出最终被存储在系统表中的执行计划。而批处理的Transaction-SQL语句在每次运行时都要进行编译和优化，速度相对要慢一些。</li>\n<li>4.<strong>减少网络流量</strong>：针对同一个数据库对象的操作（如查询、修改），如果这一操作所涉及的Transaction-SQL语句被组织进存储过程，那么当在客户计算机上调用该存储过程时，网络中传送的只是该调用语句，从而大大减少网络流量并降低了网络负载。</li>\n<li>5.<strong>作为一种安全机制来充分利用</strong>： 通过对执行某一存储过程的权限进行限制，能够实现对相应的数据的访问权限的限制，避免了非授权用户对数据的访问，保证了数据的安全。</li>\n</ul>\n<h3 id=\"2-2-缺点\"><a href=\"#2-2-缺点\" class=\"headerlink\" title=\"2.2 缺点\"></a>2.2 缺点</h3><ul>\n<li>1.可移植性差</li>\n<li>2.对于很简单的sql语句， 存储过程没有优势</li>\n<li>3.如果存储过程中不一定会减少网络传输（包含的sql数量并不多， 并且执行很快，就没必要了）</li>\n<li>4.如果只有一个用户使用数据库， 那么存储过程对于安全也没什么影响</li>\n<li>5.团队开发时需要先统一标准， 否则后期维护是个麻烦</li>\n<li>6.在大并发量访问的情况下， 不宜写过多涉及运算的存储过程</li>\n<li>7.业务逻辑复杂时， 特别是涉及到对很大的表进行操作的时候， 不如在前端先简化业务逻辑</li>\n</ul>\n<h2 id=\"3-存储过程语法\"><a href=\"#3-存储过程语法\" class=\"headerlink\" title=\"3. 存储过程语法\"></a>3. 存储过程语法</h2><h3 id=\"3-1-基本语法\"><a href=\"#3-1-基本语法\" class=\"headerlink\" title=\"3.1 基本语法\"></a>3.1 基本语法</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span>  过程名([[<span class=\"keyword\">IN</span>|<span class=\"keyword\">OUT</span>|INOUT] 参数名 数据类型[,[<span class=\"keyword\">IN</span>|<span class=\"keyword\">OUT</span>|INOUT] 参数名 数据类型…]]) [特性 ...] 过程体</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 存储过程</span></span><br><span class=\"line\"><span class=\"comment\">-- 将语句的结束符号从分号;临时改为两个//(可以是自定义) 让编译器把两个\"//\"之间的内容当做存储过程的代码，不会执行这些代码</span></span><br><span class=\"line\">DELIMITER // </span><br><span class=\"line\"><span class=\"comment\">-- 创建存储过程 名称为 add_sum</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> add_sum(<span class=\"keyword\">IN</span> a <span class=\"built_in\">INT</span>,<span class=\"keyword\">IN</span> b <span class=\"built_in\">INT</span>,<span class=\"keyword\">OUT</span> c <span class=\"built_in\">INT</span>)</span><br><span class=\"line\"><span class=\"comment\">-- 过程体开始</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"><span class=\"comment\">-- SET 赋值</span></span><br><span class=\"line\"> <span class=\"keyword\">SET</span> c=a+b;</span><br><span class=\"line\"><span class=\"comment\">-- 过程体结束</span></span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\">//  <span class=\"comment\">-- 存储过程结束</span></span><br><span class=\"line\">DELIMITER ; <span class=\"comment\">-- 将分隔符还原为分号 ；</span></span><br><span class=\"line\"><span class=\"comment\">-- 调用存储过程</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> @a=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">SET</span> @b=<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">CALL</span> add_sum(@a,@b,@c);</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> @c <span class=\"keyword\">AS</span> <span class=\"keyword\">SUM</span>; <span class=\"comment\">-- 输出为3</span></span><br></pre></td></tr></table></figure>\n<p>MySQL默认以”;”为分隔符，如果没有声明分隔符，则编译器会把存储过程当成SQL语句进行处理，因此编译过程会报错。</p>\n<p>所以要事先用<code>DELIMITER //</code>声明当前的分隔符，可以自定义。让编译器把两个<code>//</code>之间的内容当做存储过程的代码，不会执行这些代码；结束后使用<code>DELIMITER ;</code>把分隔符还原。</p>\n<p><strong>MYSQL 存储过程中的关键语法</strong></p>\n<p>声明语句结束符，可以自定义:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER $$</span><br><span class=\"line\">或</span><br><span class=\"line\">DELIMITER //</span><br></pre></td></tr></table></figure>\n<p>声明存储过程:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE PROCEDURE demo_in_parameter(IN p_in int)</span><br></pre></td></tr></table></figure>\n<p>存储过程开始和结束符号:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BEGIN .... END</span><br></pre></td></tr></table></figure>\n<p>变量赋值:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET @p_in=1</span><br></pre></td></tr></table></figure>\n<p>变量定义:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE l_int int unsigned default 4000000;</span><br></pre></td></tr></table></figure>\n<p>创建mysql存储过程、存储函数:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create procedure 存储过程名(参数)</span><br></pre></td></tr></table></figure>\n<p>存储过程体:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create function 存储函数名(参数)</span><br></pre></td></tr></table></figure>\n<p>调用存储过程：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">call</span> sp_name[(传参)];</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-存储过程体\"><a href=\"#3-2-存储过程体\" class=\"headerlink\" title=\"3.2 存储过程体\"></a>3.2 存储过程体</h3><p>过程体的开始与结束使用<code>BEGIN</code>与<code>END</code>进行标识。</p>\n<p>①如果过程没有参数，也必须在过程名后面写上小括号</p>\n<p>　　　　例：<code>CREATE PROCEDURE sp_name ([proc_parameter[,...]]) ……</code></p>\n<p>②确保参数的名字不等于列的名字，否则在过程体中，参数名被当做列名来处理</p>\n<ul>\n<li>存储过程体包含了在过程调用时必须执行的语句，例如：dml、ddl语句，if-then-else和while-do语句、声明变量的declare语句等</li>\n<li>过程体格式：以begin开始，以end结束(可嵌套)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BEGIN</span><br><span class=\"line\">　　BEGIN</span><br><span class=\"line\">　　　　BEGIN</span><br><span class=\"line\">　　　　　　statements; </span><br><span class=\"line\">　　　　END</span><br><span class=\"line\">　　END</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong> 每个嵌套块及其中的每条语句，必须以分号结束，表示过程体结束的begin-end块(又叫做复合语句compound statement)，则不需要分号。</p>\n<p><strong>为语句块贴标签:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[begin_label:] BEGIN</span><br><span class=\"line\">　　[statement_list]</span><br><span class=\"line\">END [end_label]</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">label1: <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">　　label2: <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">　　　　label3: <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">　　　　　　statements; </span><br><span class=\"line\">　　　　<span class=\"keyword\">END</span> label3 ;</span><br><span class=\"line\">　　<span class=\"keyword\">END</span> label2;</span><br><span class=\"line\"><span class=\"keyword\">END</span> label1</span><br></pre></td></tr></table></figure>\n<p>标签有两个作用：</p>\n<ul>\n<li>1、增强代码的可读性</li>\n<li>2、在某些语句(例如:leave和iterate语句)，需要用到标签</li>\n</ul>\n<h3 id=\"3-3-参数\"><a href=\"#3-3-参数\" class=\"headerlink\" title=\"3.3 参数\"></a>3.3 参数</h3><p>存储过程根据需要可能会有输入、输出、输入输出参数，如果有多个参数用”,”分割开。MySQL存储过程的参数用在存储过程的定义，共有三种参数类型,IN,OUT,INOUT:</p>\n<ul>\n<li><strong>IN</strong>：参数的值必须在调用存储过程时指定，在存储过程中修改该参数的值不能被返回，为默认值</li>\n<li><strong>OUT</strong>: 该值可在存储过程内部被改变，并可返回</li>\n<li><strong>INOUT</strong>: 调用时指定，并且可被改变和返回</li>\n</ul>\n<h4 id=\"1-IN参数例子\"><a href=\"#1-IN参数例子\" class=\"headerlink\" title=\"1.IN参数例子\"></a>1.IN参数例子</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER //</span><br><span class=\"line\">  <span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> in_param(<span class=\"keyword\">IN</span> p_in <span class=\"built_in\">int</span>)</span><br><span class=\"line\">    <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> p_in;</span><br><span class=\"line\">    <span class=\"keyword\">SET</span> p_in=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> p_in;</span><br><span class=\"line\">    <span class=\"keyword\">END</span>;</span><br><span class=\"line\">    //</span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"><span class=\"comment\">-- 调用</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> @p_in=<span class=\"number\">1</span>; <span class=\"comment\">-- 这里@p_in为1</span></span><br><span class=\"line\"><span class=\"keyword\">CALL</span> in_param(@p_in); <span class=\"comment\">-- 这里 修改@p_in值为2</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> @p_in; <span class=\"comment\">-- 查询@p_in值依旧为1</span></span><br></pre></td></tr></table></figure>\n<p><strong>p_in 在存储过程中被修改，但并不影响 @p_id 的值，因为前者为局部变量、后者为全局变量。</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 此语句的意思就是根据where条件uid=1查询user表，得到的行数存入变量u_count中（给变量赋值）</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">into</span> u_count <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> uid=<span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-OUT参数例子\"><a href=\"#2-OUT参数例子\" class=\"headerlink\" title=\"2.OUT参数例子\"></a>2.OUT参数例子</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#存储过程</span></span><br><span class=\"line\">DELIMITER // <span class=\"comment\">-- 将语句的结束符号从分号;临时改为两个//(可以是自定义) 让编译器把两个\"//\"之间的内容当做存储过程的代码，不会执行这些代码</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> out_param(<span class=\"keyword\">OUT</span> p_out  <span class=\"built_in\">INT</span>)</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> p_out ;</span><br><span class=\"line\"> <span class=\"keyword\">SET</span> p_out =<span class=\"number\">999</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\">//  <span class=\"comment\">-- 存储过程结束</span></span><br><span class=\"line\">DELIMITER ; <span class=\"comment\">-- 将分隔符还原为分号 ；</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> @p_out=<span class=\"number\">111</span>;</span><br><span class=\"line\"><span class=\"keyword\">CALL</span> out_param(@p_out); <span class=\"comment\">-- 因为out是向调用者输出参数，不接收输入的参数，所以存储过程里的p_out为null</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> @p_out; <span class=\"comment\">-- 调用了out_param存储过程，输出参数，改变了p_out变量的值</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-INOUT输入参数\"><a href=\"#3-INOUT输入参数\" class=\"headerlink\" title=\"3.INOUT输入参数\"></a>3.INOUT输入参数</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 存储过程</span></span><br><span class=\"line\">DELIMITER // <span class=\"comment\">-- 将语句的结束符号从分号;临时改为两个//(可以是自定义) 让编译器把两个\"//\"之间的内容当做存储过程的代码，不会执行这些代码</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> inout_param(INOUT p_inout  <span class=\"built_in\">INT</span>)</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"> <span class=\"keyword\">SELECT</span> p_inout ;</span><br><span class=\"line\"> <span class=\"keyword\">SET</span> p_inout =<span class=\"number\">999</span>;</span><br><span class=\"line\"> <span class=\"keyword\">SELECT</span> p_inout ;</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\">//  <span class=\"comment\">-- 存储过程结束</span></span><br><span class=\"line\">DELIMITER ; <span class=\"comment\">-- 将分隔符还原为分号 ；</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> @p_inout=<span class=\"number\">111</span>;</span><br><span class=\"line\"><span class=\"keyword\">CALL</span> inout_param(@p_inout);  <span class=\"comment\">-- 能接受输入的值 查询结果为111</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> @p_inout; <span class=\"comment\">-- 存储过程修改了值 所以结果为999</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong></p>\n<p>1、如果过程没有参数，也必须在过程名后面写上小括号例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE PROCEDURE sp_name ([proc_parameter[,...]]) ……</span><br></pre></td></tr></table></figure>\n<p>2、确保参数的名字不等于列的名字，否则在过程体中，参数名被当做列名来处理</p>\n<p><strong>建议：</strong></p>\n<ul>\n<li>输入值使用in参数。</li>\n<li>返回值使用out参数。</li>\n<li>inout参数就尽量的少用。</li>\n</ul>\n<h3 id=\"3-4-变量\"><a href=\"#3-4-变量\" class=\"headerlink\" title=\"3.4 变量\"></a>3.4 变量</h3><h4 id=\"1变量定义\"><a href=\"#1变量定义\" class=\"headerlink\" title=\"1变量定义\"></a>1变量定义</h4><p>局部变量声明一定要放在存储过程体的开始：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLAREvariable_name [,variable_name...] datatype [DEFAULT value];</span><br></pre></td></tr></table></figure>\n<p>其中，datatype 为 MySQL 的数据类型，如: int, float, date,varchar(length)</p>\n<p>例如:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span> l_int <span class=\"built_in\">int</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">default</span> <span class=\"number\">4000000</span>;  </span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span> l_numeric <span class=\"built_in\">number</span>(<span class=\"number\">8</span>,<span class=\"number\">2</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"number\">9.95</span>;  </span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span> l_date <span class=\"built_in\">date</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'1999-12-31'</span>;  </span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span> l_datetime datetime <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'1999-12-31 23:59:59'</span>;  </span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span> l_varchar <span class=\"built_in\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'This will not be padded'</span>;`</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-变量赋值\"><a href=\"#2-变量赋值\" class=\"headerlink\" title=\"2 变量赋值\"></a>2 变量赋值</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET 变量名 = 表达式值 [,variable_name = expression ...]</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-用户变量\"><a href=\"#3-用户变量\" class=\"headerlink\" title=\"3 用户变量\"></a>3 用户变量</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span> @ValueName=<span class=\"keyword\">value</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SET</span> @uid=<span class=\"number\">123</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>注意:</strong></p>\n<ul>\n<li>1、用户变量名一般以@开头</li>\n<li>2、滥用用户变量会导致程序难以理解及管理</li>\n</ul>\n<h3 id=\"3-5-存储过程控制语句\"><a href=\"#3-5-存储过程控制语句\" class=\"headerlink\" title=\"3.5 存储过程控制语句\"></a>3.5 存储过程控制语句</h3><h4 id=\"1-变量作用域\"><a href=\"#1-变量作用域\" class=\"headerlink\" title=\"1. 变量作用域\"></a>1. 变量作用域</h4><p>内部的变量在其作用域范围内享有更高的优先权，当执行到 end。变量时，内部变量消失，此时已经在其作用域外，变量不再可见了，应为在存储过程外再也不能找到这个申明的变量，但是你可以通过 out 参数或者将其值指派给会话变量来保存其值。</p>\n<h4 id=\"2-条件语句\"><a href=\"#2-条件语句\" class=\"headerlink\" title=\"2.条件语句\"></a>2.条件语句</h4><h5 id=\"1-if-then-else-语句\"><a href=\"#1-if-then-else-语句\" class=\"headerlink\" title=\"1.if-then-else 语句\"></a>1.if-then-else 语句</h5><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> myif;  <span class=\"comment\">-- 删除存储过程myif 如果存在</span></span><br><span class=\"line\">DELIMITER //</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> myif(<span class=\"keyword\">IN</span> a <span class=\"built_in\">INT</span>)</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span> msg <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>);</span><br><span class=\"line\">IF a = 0 THEN</span><br><span class=\"line\">\t<span class=\"keyword\">SET</span> msg=<span class=\"string\">'a is 0'</span>;</span><br><span class=\"line\">ELSEIF a = 1 THEN </span><br><span class=\"line\">\t<span class=\"keyword\">SET</span> msg=<span class=\"string\">'a is 1'</span>;</span><br><span class=\"line\">ELSE </span><br><span class=\"line\">\t<span class=\"keyword\">SET</span> msg=<span class=\"string\">'a is others,not 0 or 1'</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">IF</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> msg;</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\">//</span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CALL</span> myif(<span class=\"number\">2</span>); <span class=\"comment\">-- 调用</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"2-case语句：\"><a href=\"#2-case语句：\" class=\"headerlink\" title=\"2.case语句：\"></a>2.case语句：</h5><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> mycase;</span><br><span class=\"line\">DELIMITER //</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> mycase(<span class=\"keyword\">IN</span> a <span class=\"built_in\">INT</span>)</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span> msg <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>); <span class=\"comment\">-- 定义变量</span></span><br><span class=\"line\">CASE a</span><br><span class=\"line\">WHEN 0 THEN</span><br><span class=\"line\">\t<span class=\"keyword\">SET</span> msg=<span class=\"string\">'a is 0'</span>;</span><br><span class=\"line\">WHEN 1 THEN</span><br><span class=\"line\">\t<span class=\"keyword\">SET</span> msg=<span class=\"string\">'a is 1'</span>;</span><br><span class=\"line\">ELSE  <span class=\"comment\">-- 相当于switch中的default</span></span><br><span class=\"line\">\t<span class=\"keyword\">SET</span> msg=<span class=\"string\">'a is others,not 0 or 1'</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> msg;</span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">CASE</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span> </span><br><span class=\"line\">//</span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CALL</span> mycase(<span class=\"number\">1</span>); <span class=\"comment\">-- 调用</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"3-循环语句\"><a href=\"#3-循环语句\" class=\"headerlink\" title=\"3.循环语句\"></a>3.循环语句</h5><h6 id=\"1-while-····-end-while\"><a href=\"#1-while-····-end-while\" class=\"headerlink\" title=\"1.while ···· end while\"></a>1.while ···· end while</h6><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> mywhile;</span><br><span class=\"line\">DELIMITER //</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> mywhile(<span class=\"keyword\">IN</span> a <span class=\"built_in\">INT</span>)</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span> msg <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>);</span><br><span class=\"line\">WHILE a&gt;1 DO</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> user2 <span class=\"keyword\">VALUES</span>(<span class=\"literal\">NULL</span>,a);  <span class=\"comment\">-- 循环往表中插入数据</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> a=a<span class=\"number\">-1</span>; \t\t\t   <span class=\"comment\">-- 每次执行结束a减1</span></span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">WHILE</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\">//</span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> mywhile;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CALL</span> mywhile(<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while 条件 <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"comment\">--循环体</span></span><br><span class=\"line\">endwhile</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-repeat····-end-repea\"><a href=\"#2-repeat····-end-repea\" class=\"headerlink\" title=\"2.repeat···· end repea\"></a>2.repeat···· end repea</h6><p>它在执行操作后检查结果，而 while 则是执行前进行检查。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> myrepeat;</span><br><span class=\"line\">DELIMITER //</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> myrepeat(<span class=\"keyword\">IN</span> a <span class=\"built_in\">INT</span>)</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"><span class=\"keyword\">REPEAT</span></span><br><span class=\"line\"> <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> user2 <span class=\"keyword\">VALUES</span>(<span class=\"literal\">NULL</span>,a);</span><br><span class=\"line\"> <span class=\"keyword\">SET</span> a=a<span class=\"number\">-1</span>;</span><br><span class=\"line\"> UNTIL a&lt;1</span><br><span class=\"line\"> <span class=\"keyword\">END</span> <span class=\"keyword\">REPEAT</span>;</span><br><span class=\"line\"> <span class=\"keyword\">END</span></span><br><span class=\"line\"> //</span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">CALL</span> myrepeat(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repeat</span><br><span class=\"line\">    <span class=\"comment\">-- 循环体</span></span><br><span class=\"line\">until 循环条件  </span><br><span class=\"line\"><span class=\"keyword\">end</span> <span class=\"keyword\">repeat</span>;</span><br></pre></td></tr></table></figure>\n<h6 id=\"3-loop-·····endloop\"><a href=\"#3-loop-·····endloop\" class=\"headerlink\" title=\"3.loop ·····endloop\"></a>3.loop ·····endloop</h6><p>– loop 与 leave,iterate 实现循环<br>– loop 标志位无条件循环，leave 类似于break 语句，跳出循环，跳出 begin end，iterate 类似于continue ，结束本次循环</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> myloop;</span><br><span class=\"line\">DELIMITER //</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> myloop(<span class=\"keyword\">IN</span> a <span class=\"built_in\">INT</span>)</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">loop_label: <span class=\"keyword\">LOOP</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> user2 <span class=\"keyword\">VALUES</span>(<span class=\"literal\">NULL</span>,a);</span><br><span class=\"line\"><span class=\"keyword\">SET</span> a=a<span class=\"number\">-1</span>;</span><br><span class=\"line\">IF a&lt;1 THEN</span><br><span class=\"line\">\tLEAVE loop_label;</span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">IF</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">LOOP</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\">//</span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CALL</span> myloop(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<h6 id=\"4-LABLES-标号\"><a href=\"#4-LABLES-标号\" class=\"headerlink\" title=\"4.LABLES 标号\"></a>4.LABLES 标号</h6><p>标号可以用在 begin repeat while 或者 loop 语句前，语句标号只能在合法的语句前面使用。可以跳出循环，使运行指令达到复合语句的最后一步。</p>\n<p>ITERATE 通过引用复合语句的标号,来从新开始复合语句:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> myiterate;</span><br><span class=\"line\">DELIMITER //</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> myiterate(<span class=\"keyword\">IN</span> a <span class=\"built_in\">INT</span>)</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">loop_label: <span class=\"keyword\">LOOP</span></span><br><span class=\"line\"><span class=\"keyword\">IF</span> a&lt;<span class=\"number\">3</span> <span class=\"keyword\">THEN</span></span><br><span class=\"line\">\t<span class=\"keyword\">SET</span> a=a+<span class=\"number\">1</span>;</span><br><span class=\"line\">ITERATE loop_label; <span class=\"comment\">-- 退出这次循环 继续下一次循环 类似于continue</span></span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">IF</span>;</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> user2 <span class=\"keyword\">VALUES</span>(<span class=\"literal\">NULL</span>,a);</span><br><span class=\"line\"><span class=\"keyword\">SET</span> a=a+<span class=\"number\">1</span>;</span><br><span class=\"line\">IF a&gt;=5 THEN</span><br><span class=\"line\">\tLEAVE loop_label;</span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">IF</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">LOOP</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\">//</span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CALL</span> myiterate(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-存储过程操作语法\"><a href=\"#4-存储过程操作语法\" class=\"headerlink\" title=\"4. 存储过程操作语法\"></a>4. 存储过程操作语法</h2><h4 id=\"4-1-存储过程查询\"><a href=\"#4-1-存储过程查询\" class=\"headerlink\" title=\"4.1 存储过程查询\"></a>4.1 存储过程查询</h4><p>查看某个数据库下面的存储过程</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查询数据库中的存储过程</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> mysql.proc <span class=\"keyword\">WHERE</span> db=<span class=\"string\">'数据库名'</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- MySQL存储过程和函数的信息存储在information_schema数据库下的Routines表中。通过查询该表的记录查询信息</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> information_schema.routines <span class=\"keyword\">WHERE</span> routine_schema=<span class=\"string\">'数据库名'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 这个语句是MySQL的扩展，它返回子程序的特征，如数据库、名字、类型、创建者及创建和修改日期。PROCEDURE和FUNCTION分别表示查看存储过程和函数</span></span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">PROCEDURE</span> <span class=\"keyword\">STATUS</span> <span class=\"keyword\">WHERE</span> db=<span class=\"string\">'数据库名'</span>;</span><br></pre></td></tr></table></figure>\n<p>查看详细的存储过程</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> 数据库.存储过程名; <span class=\"comment\">-- 它返回一个可用来重新创建已命名子程序的确切字符串</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2-修改删除\"><a href=\"#4-2-修改删除\" class=\"headerlink\" title=\"4.2 修改删除\"></a>4.2 修改删除</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 修改</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> &#123;<span class=\"keyword\">PROCEDURE</span> | <span class=\"keyword\">FUNCTION</span>&#125; proc_or_func [characterustic...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">PROCEDURE</span> 存储过程名字  </span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">PROCEDURE</span> inout_param  </span><br><span class=\"line\"><span class=\"comment\">-- 删除</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> &#123;<span class=\"keyword\">PROCEDURE</span> | <span class=\"keyword\">FUNCTION</span>&#125; [<span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span>] proc_name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span>  inout_param;</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> inout_param;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-参考\"><a href=\"#5-参考\" class=\"headerlink\" title=\"5. 参考\"></a>5. 参考</h2><p><code>http://www.runoob.com/w3cnote/mysql-stored-procedure.html</code></p>\n<p><code>https://www.2cto.com/database/201805/746743.html</code></p>\n<p><code>https://www.cnblogs.com/mark-chan/p/5384139.html</code></p>"},{"title":"Java设计模式(九)---享元模式","abbrlink":"34e634e7","date":"2018-10-22T14:00:00.000Z","_content":"\n本文主要介绍了Java23种设计模式中的享元模式，并结合实例描述了享元模式的具体实现，具体优缺点和单例模式的对比。\n\n<!--more-->\n\n> **Java设计模式系列文章目录**\n>\n> [Java设计模式(一)---单例模式](https://www.lixueduan.com/posts/53093.html)\n>\n> [Java设计模式(二)---工厂模式](https://www.lixueduan.com/posts/34710.html)\n>\n> [Java设计模式(三)---建造者模式](https://www.lixueduan.com/posts/52453.html)\n>\n> [Java设计模式(四)---原型模式](https://www.lixueduan.com/posts/24b6c0e4.html)\n>\n> [Java设计模式(五)---适配器模式](https://www.lixueduan.com/posts/f444ac9.html)\n>\n> [Java设计模式(六)---装饰者模式](https://www.lixueduan.com/posts/75903408.html)\n>\n> [Java设计模式(七)---代理模式](https://www.lixueduan.com/posts/ae2a93bd.html)\n>\n> [Java设计模式(八)---外观模式](https://www.lixueduan.com/posts/22a51705.html)\n>\n> [Java设计模式(九)---享元模式](https://www.lixueduan.com/posts/34e634e7.html)\n>\n> [Java设计模式(十)---策略模式](https://www.lixueduan.com/posts/a7982bdc.html)\n>\n> [Java设计模式(十一)---模板方法模式](https://www.lixueduan.com/posts/57ae709c.html)\n>\n> [Java设计模式(十二)---观察者模式](https://www.lixueduan.com/posts/48bcf013.html)\n>\n> [Java设计模式(十三)---组合模式](https://www.lixueduan.com/posts/a340063f.html)\n>\n> ........\n>\n> Demo下载--> [Github](https://github.com/illusorycloud/design-pattern)\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 享元模式介绍\n\n享元模式：“享”就是分享之意，指一物被众人共享，而这也正是该模式的终旨所在。\n\n> 享元模式有点类似于单例模式，都是只生成一个对象来被共享使用。存储这些共享实例对象的地方称为**享元池** 。享元对象能做到共享的关键是区分了**内部状态(Intrinsic State)**和**外部状态(Extrinsic State)**。\n>\n>  **内部状态是存储在享元对象内部并且不会随环境改变而改变的状态，内部状态可以共享**。如围棋中的的黑棋白棋，不会随外部环境的变化而变化，无论在任何环境下黑棋始终是黑棋。\n>\n> **外部状态是随环境改变而改变的、不可以共享的状态**。享元对象的外部状态通常由客户端保存，并在享元对象被创建之后，需要使用的时候再传入到享元对象内部。比如每颗棋子的位置是不同的。\n\n围棋中的黑棋和白棋可以是共享的对象，不用每次都创建一个新的对象。这样就只需要创建黑棋和白棋两个对象了。颜色是不会变得，所以是内部状态。落下得位置是随机的，所以作为外部状态。\n\n![pure](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/nine-flyweight-pure.png)\n\n## 2. 单纯享元模式\n\n　　在单纯的享元模式中，所有的享元对象都是可以共享的。\n\n　　单纯享元模式所涉及到的角色如下：\n\n　　●　　**抽象享元(Flyweight)角色 ：**给出一个抽象接口，以规定出所有具体享元角色需要实现的方法。\n\n　　●　　**具体享元(ConcreteFlyweight)角色：**实现抽象享元角色所规定出的接口。如果有内蕴状态的话，必须负责为内蕴状态提供存储空间。\n\n　　**●　　享元工厂(FlyweightFactory)角色** ：本角色负责创建和管理享元角色。本角色必须保证享元对象可以被系统适当地共享。当一个客户端对象调用一个享元对象的时候，享元工厂角色会检查系统中是否已经有一个符合要求的享元对象。如果已经有了，享元工厂角色就应当提供这个已有的享元对象；如果系统中没有一个适当的享元对象的话，享元工厂角色就应当创建一个合适的享元对象。\n\n```java\n/**\n * 单纯享元模式 抽象享元角色\n *\n * @author illusoryCloud\n */\npublic interface Ball {\n    /**\n     * 简单的show方法\n     * 根据传入的参数(外蕴状态)不同而产生不同的表现\n     *\n     * @param color 外蕴状态\n     */\n    void show(String color);\n}\n\n/**\n * 单纯享元模式 具体享元角色\n * 内蕴状态为type 即球的类型 由构造方法传入\n * 外蕴状态为color 即球的颜色 作为show()方法的参数传入\n *\n * @author illusoryCloud\n */\npublic class ConcreteBall implements Ball {\n    private String type;\n\n    public ConcreteBall(String type) {\n        this.type = type;\n    }\n\n    @Override\n    public void show(String color) {\n        System.out.println(\"这是一个：\" + color + \"的\" + type);\n    }\n} \n\n/**\n * 单纯享元模式 享元工厂角色\n *\n * @author illusoryCloud\n */\npublic class BallFactory {\n    /**\n     * 将对象存在map中\n     */\n    private static Map<String, Ball> factory = new HashMap<>();\n\n    /**\n     * 获取单纯享元角色\n     *\n     * @param type 内蕴状态\n     * @return 具体享元角色\n     */\n    public Ball getBall(String type) {\n        Ball ball = factory.get(type);\n        if (ball == null) {\n            //如果对象不存在则创建一个新的对象\n            ball = new ConcreteBall(type);\n            //把这个新的Flyweight对象添加到缓存中\n            factory.put(type, ball);\n        }\n        return ball;\n    }\n\n    /**\n     * 静态内部类 单例模式\n     */\n    private BallFactory() {\n    }\n\n    private static class SingletonHolder {\n        private static final BallFactory INSTANCE = new BallFactory();\n    }\n\n    public  static BallFactory getInstance() {\n        return SingletonHolder.INSTANCE;\n    }\n}\n/**\n * 单纯享元模式 测试类\n *\n * @author illusoryCloud\n */\npublic class PureTest {\n    /**\n     * 当客户端需要单纯享元对象的时候，需要调用享元工厂的factory()方法，\n     * 并传入所需的单纯享元对象的内蕴状态，由工厂方法产生所需要的享元对象。\n     */\n    @Test\n    public void flyWeightTest() {\n        BallFactory ballFactory = BallFactory.getInstance();\n        Ball basketball = ballFactory.getBall(\"篮球\");\n        Ball football = ballFactory.getBall(\"足球\");\n        basketball.show(\"红色\");\n        basketball.show(\"黄色\");\n        football.show(\"黑色\");\n        football.show(\"白色\");\n        Ball basketball2 = ballFactory.getBall(\"篮球\");\n        Ball football2 = ballFactory.getBall(\"足球\");\n        //true 都是同一个对象\n        System.out.println(basketball.equals(basketball2));\n        //true\n        System.out.println(football.equals(football2));\n\n    }\n}\n//输出\n这是一个：红色的篮球\n这是一个：黄色的篮球\n这是一个：黑色的足球\n这是一个：白色的足球\ntrue\ntrue\n```\n\n## 3. 复合享元模式\n\n　　在单纯享元模式中，所有的享元对象都是单纯享元对象，也就是说都是可以直接共享的。还有一种较为复杂的情况，将一些单纯享元使用合成模式加以复合，形成复合享元对象。这样的复合享元对象本身不能共享，但是它们可以分解成单纯享元对象，而后者则可以共享。\n\n![composite](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/nine-flyweight-composite.png)\n\n　　复合享元角色所涉及到的角色如下：\n\n　　●　　**抽象享元(Flyweight)角色 ：**给出一个抽象接口，以规定出所有具体享元角色需要实现的方法。\n\n　　●　　**具体享元(ConcreteFlyweight)角色：**实现抽象享元角色所规定出的接口。如果有内蕴状态的话，必须负责为内蕴状态提供存储空间。\n\n　　**●　  复合享元(ConcreteCompositeFlyweight)角色** ：复合享元角色所代表的对象是不可以共享的，但是一个复合享元对象可以分解成为多个本身是单纯享元对象的组合。复合享元角色又称作不可共享的享元对象。\n\n　　**●　  享元工厂(FlyweightFactory)角色** ：本角 色负责创建和管理享元角色。本角色必须保证享元对象可以被系统适当地共享。当一个客户端对象调用一个享元对象的时候，享元工厂角色会检查系统中是否已经有 一个符合要求的享元对象。如果已经有了，享元工厂角色就应当提供这个已有的享元对象；如果系统中没有一个适当的享元对象的话，享元工厂角色就应当创建一个 合适的享元对象。\n\n```java\n/**\n * 复合享元模式 复合享元角色\n *\n * @author illusoryCloud\n */\npublic class CompositeBall implements Ball {\n    /**\n     * 复合享元角色内部包含多个单纯享元角色\n     */\n    private Map<String, Ball> composite = new HashMap<>();\n\n    /**\n     * 增加一个新的单纯享元对象到集合中\n     */\n    public void add(String type, Ball ball) {\n        composite.put(type, ball);\n    }\n\n    /**\n     * 遍历的方式挨个调用内部单纯享元角色的show方法\n     *\n     * @param color 外蕴状态\n     */\n    @Override\n    public void show(String color) {\n        Set<String> strings = composite.keySet();\n        for (String type : strings) {\n            Ball ball = composite.get(type);\n            ball.show(color);\n        }\n    }\n}\n\n/**\n * 复合享元模式 复合工厂角色\n *\n * @author illusoryCloud\n */\npublic class CompositeFactory {\n    private Map<String, Ball> factory = new HashMap<String, Ball>();\n\n    /**\n     * 获取复合享元\n     *\n     * @param types 类型集合\n     * @return 复合享元对象 包含多个单纯享元对象\n     */\n    public Ball getComposite(List<String> types) {\n        CompositeBall composteBall = new CompositeBall();\n\n        for (String type : types) {\n            composteBall.add(type, getPure(type));\n        }\n\n        return composteBall;\n    }\n\n    /**\n     * 获取单纯享元角色\n     *\n     * @param type 内蕴状态\n     * @return 具体享元角色\n     */\n    public Ball getPure(String type) {\n        Ball ball = factory.get(type);\n        if (ball == null) {\n            //如果对象不存在则创建一个新的对象\n            ball = new ConcreteBall(type);\n            //把这个新的Flyweight对象添加到缓存中\n            factory.put(type, ball);\n        }\n        return ball;\n    }\n\n    /**\n     * 静态内部类 单例模式\n     */\n    private CompositeFactory() {\n    }\n\n    private static class SingletonHolder {\n        private static final CompositeFactory INSTANCE = new CompositeFactory();\n    }\n\n    public static CompositeFactory getInstance() {\n        return CompositeFactory.SingletonHolder.INSTANCE;\n    }\n}\n\n/**\n * 单纯享元模式 测试类\n *\n * @author illusoryCloud\n */\npublic class CompositeTest {\n    /**\n     * 当客户端需要单纯享元对象的时候，需要调用享元工厂的factory()方法，\n     * 并传入所需的单纯享元对象的内蕴状态，由工厂方法产生所需要的享元对象。\n     */\n    @Test\n    public void flyWeightTest() {\n        CompositeFactory compositeFactory = CompositeFactory.getInstance();\n        Ball pure = compositeFactory.getPure(\"篮球\");\n        Ball pure2 = compositeFactory.getPure(\"篮球\");\n        pure.show(\"红色\");\n        List<String> types = Arrays.asList(\"篮球\", \"足球\", \"排球\");\n        Ball composite = compositeFactory.getComposite(types);\n        Ball composite2 = compositeFactory.getComposite(types);\n        composite.show(\"蓝色\");\n        //false 复合享元角色不相同\n        System.out.println(composite.equals(composite2));\n        //true 单纯享元角色相同\n        System.out.println(pure.equals(pure2));\n    }\n}\n//输出\n这是一个：红色的篮球\n这是一个：蓝色的足球\n这是一个：蓝色的篮球\n这是一个：蓝色的排球\nfalse\ntrue\n```\n\n## 4. 总结\n\n**享元模式的核心在于享元工厂类，享元工厂类的作用在于提供一个用于存储享元对象的享元池，用户需要对象时，首先从享元池中获取，如果享元池中不存在，则创建一个新的享元对象返回给用户，并在享元池中保存该新增对象。**\n\n**优点**：\n\n节约系统的开销，可以少创建对象。\n外部状态不会影响内部状态，可以在不同环境下进行共享哦。\n**缺点**：\n\n享元模式使逻辑变得更加复杂，需要将享元对象分出内部状态和外部状态。\n\n并且为了使对象可以共享，外部状态在很多情况下是必须有的，当读取外部状态时明显会增加运行时间。\n\n**享元模式使用的场景**：\n\n当我们项目中创建很多对象，而且这些对象存在许多相同模块，这时，我们可以将这些相同的模块提取出来采用享元模式生成单一对象，再使用这个对象与之前的诸多对象进行配合使用，这样无疑会节省很多空间。\n\n**与单例模式的区别**：\n\n享元模式的目的是共享，避免多次创建耗费资源，减少不会要额内存消耗 。\n\n单例模式的目的是限制创建多个对象以避免冲突等 。\n\n## 5. 参考\n\n`http://blog.csdn.net/lovelion>`\n\n`https://blog.csdn.net/Hmily_hui/article/details/80917975`","source":"_posts/design_pattern/nine-flyweight.md","raw":"---\ntitle: Java设计模式(九)---享元模式\ntags:\n  - 设计模式\ncategories:\n  - 设计模式\nabbrlink: 34e634e7\ndate: 2018-10-22 22:00:00\n---\n\n本文主要介绍了Java23种设计模式中的享元模式，并结合实例描述了享元模式的具体实现，具体优缺点和单例模式的对比。\n\n<!--more-->\n\n> **Java设计模式系列文章目录**\n>\n> [Java设计模式(一)---单例模式](https://www.lixueduan.com/posts/53093.html)\n>\n> [Java设计模式(二)---工厂模式](https://www.lixueduan.com/posts/34710.html)\n>\n> [Java设计模式(三)---建造者模式](https://www.lixueduan.com/posts/52453.html)\n>\n> [Java设计模式(四)---原型模式](https://www.lixueduan.com/posts/24b6c0e4.html)\n>\n> [Java设计模式(五)---适配器模式](https://www.lixueduan.com/posts/f444ac9.html)\n>\n> [Java设计模式(六)---装饰者模式](https://www.lixueduan.com/posts/75903408.html)\n>\n> [Java设计模式(七)---代理模式](https://www.lixueduan.com/posts/ae2a93bd.html)\n>\n> [Java设计模式(八)---外观模式](https://www.lixueduan.com/posts/22a51705.html)\n>\n> [Java设计模式(九)---享元模式](https://www.lixueduan.com/posts/34e634e7.html)\n>\n> [Java设计模式(十)---策略模式](https://www.lixueduan.com/posts/a7982bdc.html)\n>\n> [Java设计模式(十一)---模板方法模式](https://www.lixueduan.com/posts/57ae709c.html)\n>\n> [Java设计模式(十二)---观察者模式](https://www.lixueduan.com/posts/48bcf013.html)\n>\n> [Java设计模式(十三)---组合模式](https://www.lixueduan.com/posts/a340063f.html)\n>\n> ........\n>\n> Demo下载--> [Github](https://github.com/illusorycloud/design-pattern)\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 享元模式介绍\n\n享元模式：“享”就是分享之意，指一物被众人共享，而这也正是该模式的终旨所在。\n\n> 享元模式有点类似于单例模式，都是只生成一个对象来被共享使用。存储这些共享实例对象的地方称为**享元池** 。享元对象能做到共享的关键是区分了**内部状态(Intrinsic State)**和**外部状态(Extrinsic State)**。\n>\n>  **内部状态是存储在享元对象内部并且不会随环境改变而改变的状态，内部状态可以共享**。如围棋中的的黑棋白棋，不会随外部环境的变化而变化，无论在任何环境下黑棋始终是黑棋。\n>\n> **外部状态是随环境改变而改变的、不可以共享的状态**。享元对象的外部状态通常由客户端保存，并在享元对象被创建之后，需要使用的时候再传入到享元对象内部。比如每颗棋子的位置是不同的。\n\n围棋中的黑棋和白棋可以是共享的对象，不用每次都创建一个新的对象。这样就只需要创建黑棋和白棋两个对象了。颜色是不会变得，所以是内部状态。落下得位置是随机的，所以作为外部状态。\n\n![pure](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/nine-flyweight-pure.png)\n\n## 2. 单纯享元模式\n\n　　在单纯的享元模式中，所有的享元对象都是可以共享的。\n\n　　单纯享元模式所涉及到的角色如下：\n\n　　●　　**抽象享元(Flyweight)角色 ：**给出一个抽象接口，以规定出所有具体享元角色需要实现的方法。\n\n　　●　　**具体享元(ConcreteFlyweight)角色：**实现抽象享元角色所规定出的接口。如果有内蕴状态的话，必须负责为内蕴状态提供存储空间。\n\n　　**●　　享元工厂(FlyweightFactory)角色** ：本角色负责创建和管理享元角色。本角色必须保证享元对象可以被系统适当地共享。当一个客户端对象调用一个享元对象的时候，享元工厂角色会检查系统中是否已经有一个符合要求的享元对象。如果已经有了，享元工厂角色就应当提供这个已有的享元对象；如果系统中没有一个适当的享元对象的话，享元工厂角色就应当创建一个合适的享元对象。\n\n```java\n/**\n * 单纯享元模式 抽象享元角色\n *\n * @author illusoryCloud\n */\npublic interface Ball {\n    /**\n     * 简单的show方法\n     * 根据传入的参数(外蕴状态)不同而产生不同的表现\n     *\n     * @param color 外蕴状态\n     */\n    void show(String color);\n}\n\n/**\n * 单纯享元模式 具体享元角色\n * 内蕴状态为type 即球的类型 由构造方法传入\n * 外蕴状态为color 即球的颜色 作为show()方法的参数传入\n *\n * @author illusoryCloud\n */\npublic class ConcreteBall implements Ball {\n    private String type;\n\n    public ConcreteBall(String type) {\n        this.type = type;\n    }\n\n    @Override\n    public void show(String color) {\n        System.out.println(\"这是一个：\" + color + \"的\" + type);\n    }\n} \n\n/**\n * 单纯享元模式 享元工厂角色\n *\n * @author illusoryCloud\n */\npublic class BallFactory {\n    /**\n     * 将对象存在map中\n     */\n    private static Map<String, Ball> factory = new HashMap<>();\n\n    /**\n     * 获取单纯享元角色\n     *\n     * @param type 内蕴状态\n     * @return 具体享元角色\n     */\n    public Ball getBall(String type) {\n        Ball ball = factory.get(type);\n        if (ball == null) {\n            //如果对象不存在则创建一个新的对象\n            ball = new ConcreteBall(type);\n            //把这个新的Flyweight对象添加到缓存中\n            factory.put(type, ball);\n        }\n        return ball;\n    }\n\n    /**\n     * 静态内部类 单例模式\n     */\n    private BallFactory() {\n    }\n\n    private static class SingletonHolder {\n        private static final BallFactory INSTANCE = new BallFactory();\n    }\n\n    public  static BallFactory getInstance() {\n        return SingletonHolder.INSTANCE;\n    }\n}\n/**\n * 单纯享元模式 测试类\n *\n * @author illusoryCloud\n */\npublic class PureTest {\n    /**\n     * 当客户端需要单纯享元对象的时候，需要调用享元工厂的factory()方法，\n     * 并传入所需的单纯享元对象的内蕴状态，由工厂方法产生所需要的享元对象。\n     */\n    @Test\n    public void flyWeightTest() {\n        BallFactory ballFactory = BallFactory.getInstance();\n        Ball basketball = ballFactory.getBall(\"篮球\");\n        Ball football = ballFactory.getBall(\"足球\");\n        basketball.show(\"红色\");\n        basketball.show(\"黄色\");\n        football.show(\"黑色\");\n        football.show(\"白色\");\n        Ball basketball2 = ballFactory.getBall(\"篮球\");\n        Ball football2 = ballFactory.getBall(\"足球\");\n        //true 都是同一个对象\n        System.out.println(basketball.equals(basketball2));\n        //true\n        System.out.println(football.equals(football2));\n\n    }\n}\n//输出\n这是一个：红色的篮球\n这是一个：黄色的篮球\n这是一个：黑色的足球\n这是一个：白色的足球\ntrue\ntrue\n```\n\n## 3. 复合享元模式\n\n　　在单纯享元模式中，所有的享元对象都是单纯享元对象，也就是说都是可以直接共享的。还有一种较为复杂的情况，将一些单纯享元使用合成模式加以复合，形成复合享元对象。这样的复合享元对象本身不能共享，但是它们可以分解成单纯享元对象，而后者则可以共享。\n\n![composite](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/nine-flyweight-composite.png)\n\n　　复合享元角色所涉及到的角色如下：\n\n　　●　　**抽象享元(Flyweight)角色 ：**给出一个抽象接口，以规定出所有具体享元角色需要实现的方法。\n\n　　●　　**具体享元(ConcreteFlyweight)角色：**实现抽象享元角色所规定出的接口。如果有内蕴状态的话，必须负责为内蕴状态提供存储空间。\n\n　　**●　  复合享元(ConcreteCompositeFlyweight)角色** ：复合享元角色所代表的对象是不可以共享的，但是一个复合享元对象可以分解成为多个本身是单纯享元对象的组合。复合享元角色又称作不可共享的享元对象。\n\n　　**●　  享元工厂(FlyweightFactory)角色** ：本角 色负责创建和管理享元角色。本角色必须保证享元对象可以被系统适当地共享。当一个客户端对象调用一个享元对象的时候，享元工厂角色会检查系统中是否已经有 一个符合要求的享元对象。如果已经有了，享元工厂角色就应当提供这个已有的享元对象；如果系统中没有一个适当的享元对象的话，享元工厂角色就应当创建一个 合适的享元对象。\n\n```java\n/**\n * 复合享元模式 复合享元角色\n *\n * @author illusoryCloud\n */\npublic class CompositeBall implements Ball {\n    /**\n     * 复合享元角色内部包含多个单纯享元角色\n     */\n    private Map<String, Ball> composite = new HashMap<>();\n\n    /**\n     * 增加一个新的单纯享元对象到集合中\n     */\n    public void add(String type, Ball ball) {\n        composite.put(type, ball);\n    }\n\n    /**\n     * 遍历的方式挨个调用内部单纯享元角色的show方法\n     *\n     * @param color 外蕴状态\n     */\n    @Override\n    public void show(String color) {\n        Set<String> strings = composite.keySet();\n        for (String type : strings) {\n            Ball ball = composite.get(type);\n            ball.show(color);\n        }\n    }\n}\n\n/**\n * 复合享元模式 复合工厂角色\n *\n * @author illusoryCloud\n */\npublic class CompositeFactory {\n    private Map<String, Ball> factory = new HashMap<String, Ball>();\n\n    /**\n     * 获取复合享元\n     *\n     * @param types 类型集合\n     * @return 复合享元对象 包含多个单纯享元对象\n     */\n    public Ball getComposite(List<String> types) {\n        CompositeBall composteBall = new CompositeBall();\n\n        for (String type : types) {\n            composteBall.add(type, getPure(type));\n        }\n\n        return composteBall;\n    }\n\n    /**\n     * 获取单纯享元角色\n     *\n     * @param type 内蕴状态\n     * @return 具体享元角色\n     */\n    public Ball getPure(String type) {\n        Ball ball = factory.get(type);\n        if (ball == null) {\n            //如果对象不存在则创建一个新的对象\n            ball = new ConcreteBall(type);\n            //把这个新的Flyweight对象添加到缓存中\n            factory.put(type, ball);\n        }\n        return ball;\n    }\n\n    /**\n     * 静态内部类 单例模式\n     */\n    private CompositeFactory() {\n    }\n\n    private static class SingletonHolder {\n        private static final CompositeFactory INSTANCE = new CompositeFactory();\n    }\n\n    public static CompositeFactory getInstance() {\n        return CompositeFactory.SingletonHolder.INSTANCE;\n    }\n}\n\n/**\n * 单纯享元模式 测试类\n *\n * @author illusoryCloud\n */\npublic class CompositeTest {\n    /**\n     * 当客户端需要单纯享元对象的时候，需要调用享元工厂的factory()方法，\n     * 并传入所需的单纯享元对象的内蕴状态，由工厂方法产生所需要的享元对象。\n     */\n    @Test\n    public void flyWeightTest() {\n        CompositeFactory compositeFactory = CompositeFactory.getInstance();\n        Ball pure = compositeFactory.getPure(\"篮球\");\n        Ball pure2 = compositeFactory.getPure(\"篮球\");\n        pure.show(\"红色\");\n        List<String> types = Arrays.asList(\"篮球\", \"足球\", \"排球\");\n        Ball composite = compositeFactory.getComposite(types);\n        Ball composite2 = compositeFactory.getComposite(types);\n        composite.show(\"蓝色\");\n        //false 复合享元角色不相同\n        System.out.println(composite.equals(composite2));\n        //true 单纯享元角色相同\n        System.out.println(pure.equals(pure2));\n    }\n}\n//输出\n这是一个：红色的篮球\n这是一个：蓝色的足球\n这是一个：蓝色的篮球\n这是一个：蓝色的排球\nfalse\ntrue\n```\n\n## 4. 总结\n\n**享元模式的核心在于享元工厂类，享元工厂类的作用在于提供一个用于存储享元对象的享元池，用户需要对象时，首先从享元池中获取，如果享元池中不存在，则创建一个新的享元对象返回给用户，并在享元池中保存该新增对象。**\n\n**优点**：\n\n节约系统的开销，可以少创建对象。\n外部状态不会影响内部状态，可以在不同环境下进行共享哦。\n**缺点**：\n\n享元模式使逻辑变得更加复杂，需要将享元对象分出内部状态和外部状态。\n\n并且为了使对象可以共享，外部状态在很多情况下是必须有的，当读取外部状态时明显会增加运行时间。\n\n**享元模式使用的场景**：\n\n当我们项目中创建很多对象，而且这些对象存在许多相同模块，这时，我们可以将这些相同的模块提取出来采用享元模式生成单一对象，再使用这个对象与之前的诸多对象进行配合使用，这样无疑会节省很多空间。\n\n**与单例模式的区别**：\n\n享元模式的目的是共享，避免多次创建耗费资源，减少不会要额内存消耗 。\n\n单例模式的目的是限制创建多个对象以避免冲突等 。\n\n## 5. 参考\n\n`http://blog.csdn.net/lovelion>`\n\n`https://blog.csdn.net/Hmily_hui/article/details/80917975`","slug":"design_pattern/nine-flyweight","published":1,"updated":"2019-03-04T15:35:25.343Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv4af003u0ww4ginlh25d","content":"<p>本文主要介绍了Java23种设计模式中的享元模式，并结合实例描述了享元模式的具体实现，具体优缺点和单例模式的对比。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p><strong>Java设计模式系列文章目录</strong></p>\n<p><a href=\"https://www.lixueduan.com/posts/53093.html\">Java设计模式(一)—单例模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34710.html\">Java设计模式(二)—工厂模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/52453.html\">Java设计模式(三)—建造者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/24b6c0e4.html\">Java设计模式(四)—原型模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/f444ac9.html\">Java设计模式(五)—适配器模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/75903408.html\">Java设计模式(六)—装饰者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/ae2a93bd.html\">Java设计模式(七)—代理模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/22a51705.html\">Java设计模式(八)—外观模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34e634e7.html\">Java设计模式(九)—享元模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a7982bdc.html\">Java设计模式(十)—策略模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/57ae709c.html\">Java设计模式(十一)—模板方法模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/48bcf013.html\">Java设计模式(十二)—观察者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a340063f.html\">Java设计模式(十三)—组合模式</a></p>\n<p>……..</p>\n<p>Demo下载–&gt; <a href=\"https://github.com/illusorycloud/design-pattern\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-享元模式介绍\"><a href=\"#1-享元模式介绍\" class=\"headerlink\" title=\"1. 享元模式介绍\"></a>1. 享元模式介绍</h2><p>享元模式：“享”就是分享之意，指一物被众人共享，而这也正是该模式的终旨所在。</p>\n<blockquote>\n<p>享元模式有点类似于单例模式，都是只生成一个对象来被共享使用。存储这些共享实例对象的地方称为<strong>享元池</strong> 。享元对象能做到共享的关键是区分了<strong>内部状态(Intrinsic State)</strong>和<strong>外部状态(Extrinsic State)</strong>。</p>\n<p> <strong>内部状态是存储在享元对象内部并且不会随环境改变而改变的状态，内部状态可以共享</strong>。如围棋中的的黑棋白棋，不会随外部环境的变化而变化，无论在任何环境下黑棋始终是黑棋。</p>\n<p><strong>外部状态是随环境改变而改变的、不可以共享的状态</strong>。享元对象的外部状态通常由客户端保存，并在享元对象被创建之后，需要使用的时候再传入到享元对象内部。比如每颗棋子的位置是不同的。</p>\n</blockquote>\n<p>围棋中的黑棋和白棋可以是共享的对象，不用每次都创建一个新的对象。这样就只需要创建黑棋和白棋两个对象了。颜色是不会变得，所以是内部状态。落下得位置是随机的，所以作为外部状态。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/nine-flyweight-pure.png\" alt=\"pure\"></p>\n<h2 id=\"2-单纯享元模式\"><a href=\"#2-单纯享元模式\" class=\"headerlink\" title=\"2. 单纯享元模式\"></a>2. 单纯享元模式</h2><p>　　在单纯的享元模式中，所有的享元对象都是可以共享的。</p>\n<p>　　单纯享元模式所涉及到的角色如下：</p>\n<p>　　●　　<strong>抽象享元(Flyweight)角色 ：</strong>给出一个抽象接口，以规定出所有具体享元角色需要实现的方法。</p>\n<p>　　●　　<strong>具体享元(ConcreteFlyweight)角色：</strong>实现抽象享元角色所规定出的接口。如果有内蕴状态的话，必须负责为内蕴状态提供存储空间。</p>\n<p>　　<strong>●　　享元工厂(FlyweightFactory)角色</strong> ：本角色负责创建和管理享元角色。本角色必须保证享元对象可以被系统适当地共享。当一个客户端对象调用一个享元对象的时候，享元工厂角色会检查系统中是否已经有一个符合要求的享元对象。如果已经有了，享元工厂角色就应当提供这个已有的享元对象；如果系统中没有一个适当的享元对象的话，享元工厂角色就应当创建一个合适的享元对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 单纯享元模式 抽象享元角色</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Ball</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 简单的show方法</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据传入的参数(外蕴状态)不同而产生不同的表现</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> color 外蕴状态</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(String color)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 单纯享元模式 具体享元角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 内蕴状态为type 即球的类型 由构造方法传入</span></span><br><span class=\"line\"><span class=\"comment\"> * 外蕴状态为color 即球的颜色 作为show()方法的参数传入</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteBall</span> <span class=\"keyword\">implements</span> <span class=\"title\">Ball</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String type;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConcreteBall</span><span class=\"params\">(String type)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.type = type;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(String color)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"这是一个：\"</span> + color + <span class=\"string\">\"的\"</span> + type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 单纯享元模式 享元工厂角色</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BallFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将对象存在map中</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;String, Ball&gt; factory = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取单纯享元角色</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> type 内蕴状态</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 具体享元角色</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Ball <span class=\"title\">getBall</span><span class=\"params\">(String type)</span> </span>&#123;</span><br><span class=\"line\">        Ball ball = factory.get(type);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ball == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果对象不存在则创建一个新的对象</span></span><br><span class=\"line\">            ball = <span class=\"keyword\">new</span> ConcreteBall(type);</span><br><span class=\"line\">            <span class=\"comment\">//把这个新的Flyweight对象添加到缓存中</span></span><br><span class=\"line\">            factory.put(type, ball);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ball;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 静态内部类 单例模式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">BallFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> BallFactory INSTANCE = <span class=\"keyword\">new</span> BallFactory();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">static</span> BallFactory <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 单纯享元模式 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PureTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当客户端需要单纯享元对象的时候，需要调用享元工厂的factory()方法，</span></span><br><span class=\"line\"><span class=\"comment\">     * 并传入所需的单纯享元对象的内蕴状态，由工厂方法产生所需要的享元对象。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">flyWeightTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        BallFactory ballFactory = BallFactory.getInstance();</span><br><span class=\"line\">        Ball basketball = ballFactory.getBall(<span class=\"string\">\"篮球\"</span>);</span><br><span class=\"line\">        Ball football = ballFactory.getBall(<span class=\"string\">\"足球\"</span>);</span><br><span class=\"line\">        basketball.show(<span class=\"string\">\"红色\"</span>);</span><br><span class=\"line\">        basketball.show(<span class=\"string\">\"黄色\"</span>);</span><br><span class=\"line\">        football.show(<span class=\"string\">\"黑色\"</span>);</span><br><span class=\"line\">        football.show(<span class=\"string\">\"白色\"</span>);</span><br><span class=\"line\">        Ball basketball2 = ballFactory.getBall(<span class=\"string\">\"篮球\"</span>);</span><br><span class=\"line\">        Ball football2 = ballFactory.getBall(<span class=\"string\">\"足球\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//true 都是同一个对象</span></span><br><span class=\"line\">        System.out.println(basketball.equals(basketball2));</span><br><span class=\"line\">        <span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(football.equals(football2));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\">这是一个：红色的篮球</span><br><span class=\"line\">这是一个：黄色的篮球</span><br><span class=\"line\">这是一个：黑色的足球</span><br><span class=\"line\">这是一个：白色的足球</span><br><span class=\"line\"><span class=\"keyword\">true</span></span><br><span class=\"line\"><span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-复合享元模式\"><a href=\"#3-复合享元模式\" class=\"headerlink\" title=\"3. 复合享元模式\"></a>3. 复合享元模式</h2><p>　　在单纯享元模式中，所有的享元对象都是单纯享元对象，也就是说都是可以直接共享的。还有一种较为复杂的情况，将一些单纯享元使用合成模式加以复合，形成复合享元对象。这样的复合享元对象本身不能共享，但是它们可以分解成单纯享元对象，而后者则可以共享。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/nine-flyweight-composite.png\" alt=\"composite\"></p>\n<p>　　复合享元角色所涉及到的角色如下：</p>\n<p>　　●　　<strong>抽象享元(Flyweight)角色 ：</strong>给出一个抽象接口，以规定出所有具体享元角色需要实现的方法。</p>\n<p>　　●　　<strong>具体享元(ConcreteFlyweight)角色：</strong>实现抽象享元角色所规定出的接口。如果有内蕴状态的话，必须负责为内蕴状态提供存储空间。</p>\n<p>　　<strong>●　  复合享元(ConcreteCompositeFlyweight)角色</strong> ：复合享元角色所代表的对象是不可以共享的，但是一个复合享元对象可以分解成为多个本身是单纯享元对象的组合。复合享元角色又称作不可共享的享元对象。</p>\n<p>　　<strong>●　  享元工厂(FlyweightFactory)角色</strong> ：本角 色负责创建和管理享元角色。本角色必须保证享元对象可以被系统适当地共享。当一个客户端对象调用一个享元对象的时候，享元工厂角色会检查系统中是否已经有 一个符合要求的享元对象。如果已经有了，享元工厂角色就应当提供这个已有的享元对象；如果系统中没有一个适当的享元对象的话，享元工厂角色就应当创建一个 合适的享元对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 复合享元模式 复合享元角色</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CompositeBall</span> <span class=\"keyword\">implements</span> <span class=\"title\">Ball</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 复合享元角色内部包含多个单纯享元角色</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, Ball&gt; composite = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 增加一个新的单纯享元对象到集合中</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(String type, Ball ball)</span> </span>&#123;</span><br><span class=\"line\">        composite.put(type, ball);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 遍历的方式挨个调用内部单纯享元角色的show方法</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> color 外蕴状态</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(String color)</span> </span>&#123;</span><br><span class=\"line\">        Set&lt;String&gt; strings = composite.keySet();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String type : strings) &#123;</span><br><span class=\"line\">            Ball ball = composite.get(type);</span><br><span class=\"line\">            ball.show(color);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 复合享元模式 复合工厂角色</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CompositeFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, Ball&gt; factory = <span class=\"keyword\">new</span> HashMap&lt;String, Ball&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取复合享元</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> types 类型集合</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 复合享元对象 包含多个单纯享元对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Ball <span class=\"title\">getComposite</span><span class=\"params\">(List&lt;String&gt; types)</span> </span>&#123;</span><br><span class=\"line\">        CompositeBall composteBall = <span class=\"keyword\">new</span> CompositeBall();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String type : types) &#123;</span><br><span class=\"line\">            composteBall.add(type, getPure(type));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> composteBall;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取单纯享元角色</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> type 内蕴状态</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 具体享元角色</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Ball <span class=\"title\">getPure</span><span class=\"params\">(String type)</span> </span>&#123;</span><br><span class=\"line\">        Ball ball = factory.get(type);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ball == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果对象不存在则创建一个新的对象</span></span><br><span class=\"line\">            ball = <span class=\"keyword\">new</span> ConcreteBall(type);</span><br><span class=\"line\">            <span class=\"comment\">//把这个新的Flyweight对象添加到缓存中</span></span><br><span class=\"line\">            factory.put(type, ball);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ball;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 静态内部类 单例模式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">CompositeFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> CompositeFactory INSTANCE = <span class=\"keyword\">new</span> CompositeFactory();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CompositeFactory <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> CompositeFactory.SingletonHolder.INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 单纯享元模式 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CompositeTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当客户端需要单纯享元对象的时候，需要调用享元工厂的factory()方法，</span></span><br><span class=\"line\"><span class=\"comment\">     * 并传入所需的单纯享元对象的内蕴状态，由工厂方法产生所需要的享元对象。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">flyWeightTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        CompositeFactory compositeFactory = CompositeFactory.getInstance();</span><br><span class=\"line\">        Ball pure = compositeFactory.getPure(<span class=\"string\">\"篮球\"</span>);</span><br><span class=\"line\">        Ball pure2 = compositeFactory.getPure(<span class=\"string\">\"篮球\"</span>);</span><br><span class=\"line\">        pure.show(<span class=\"string\">\"红色\"</span>);</span><br><span class=\"line\">        List&lt;String&gt; types = Arrays.asList(<span class=\"string\">\"篮球\"</span>, <span class=\"string\">\"足球\"</span>, <span class=\"string\">\"排球\"</span>);</span><br><span class=\"line\">        Ball composite = compositeFactory.getComposite(types);</span><br><span class=\"line\">        Ball composite2 = compositeFactory.getComposite(types);</span><br><span class=\"line\">        composite.show(<span class=\"string\">\"蓝色\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//false 复合享元角色不相同</span></span><br><span class=\"line\">        System.out.println(composite.equals(composite2));</span><br><span class=\"line\">        <span class=\"comment\">//true 单纯享元角色相同</span></span><br><span class=\"line\">        System.out.println(pure.equals(pure2));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\">这是一个：红色的篮球</span><br><span class=\"line\">这是一个：蓝色的足球</span><br><span class=\"line\">这是一个：蓝色的篮球</span><br><span class=\"line\">这是一个：蓝色的排球</span><br><span class=\"line\"><span class=\"keyword\">false</span></span><br><span class=\"line\"><span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h2><p><strong>享元模式的核心在于享元工厂类，享元工厂类的作用在于提供一个用于存储享元对象的享元池，用户需要对象时，首先从享元池中获取，如果享元池中不存在，则创建一个新的享元对象返回给用户，并在享元池中保存该新增对象。</strong></p>\n<p><strong>优点</strong>：</p>\n<p>节约系统的开销，可以少创建对象。<br>外部状态不会影响内部状态，可以在不同环境下进行共享哦。<br><strong>缺点</strong>：</p>\n<p>享元模式使逻辑变得更加复杂，需要将享元对象分出内部状态和外部状态。</p>\n<p>并且为了使对象可以共享，外部状态在很多情况下是必须有的，当读取外部状态时明显会增加运行时间。</p>\n<p><strong>享元模式使用的场景</strong>：</p>\n<p>当我们项目中创建很多对象，而且这些对象存在许多相同模块，这时，我们可以将这些相同的模块提取出来采用享元模式生成单一对象，再使用这个对象与之前的诸多对象进行配合使用，这样无疑会节省很多空间。</p>\n<p><strong>与单例模式的区别</strong>：</p>\n<p>享元模式的目的是共享，避免多次创建耗费资源，减少不会要额内存消耗 。</p>\n<p>单例模式的目的是限制创建多个对象以避免冲突等 。</p>\n<h2 id=\"5-参考\"><a href=\"#5-参考\" class=\"headerlink\" title=\"5. 参考\"></a>5. 参考</h2><p><code>http://blog.csdn.net/lovelion&gt;</code></p>\n<p><code>https://blog.csdn.net/Hmily_hui/article/details/80917975</code></p>\n","site":{"data":{}},"excerpt":"<p>本文主要介绍了Java23种设计模式中的享元模式，并结合实例描述了享元模式的具体实现，具体优缺点和单例模式的对比。</p>","more":"<blockquote>\n<p><strong>Java设计模式系列文章目录</strong></p>\n<p><a href=\"https://www.lixueduan.com/posts/53093.html\">Java设计模式(一)—单例模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34710.html\">Java设计模式(二)—工厂模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/52453.html\">Java设计模式(三)—建造者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/24b6c0e4.html\">Java设计模式(四)—原型模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/f444ac9.html\">Java设计模式(五)—适配器模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/75903408.html\">Java设计模式(六)—装饰者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/ae2a93bd.html\">Java设计模式(七)—代理模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/22a51705.html\">Java设计模式(八)—外观模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34e634e7.html\">Java设计模式(九)—享元模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a7982bdc.html\">Java设计模式(十)—策略模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/57ae709c.html\">Java设计模式(十一)—模板方法模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/48bcf013.html\">Java设计模式(十二)—观察者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a340063f.html\">Java设计模式(十三)—组合模式</a></p>\n<p>……..</p>\n<p>Demo下载–&gt; <a href=\"https://github.com/illusorycloud/design-pattern\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-享元模式介绍\"><a href=\"#1-享元模式介绍\" class=\"headerlink\" title=\"1. 享元模式介绍\"></a>1. 享元模式介绍</h2><p>享元模式：“享”就是分享之意，指一物被众人共享，而这也正是该模式的终旨所在。</p>\n<blockquote>\n<p>享元模式有点类似于单例模式，都是只生成一个对象来被共享使用。存储这些共享实例对象的地方称为<strong>享元池</strong> 。享元对象能做到共享的关键是区分了<strong>内部状态(Intrinsic State)</strong>和<strong>外部状态(Extrinsic State)</strong>。</p>\n<p> <strong>内部状态是存储在享元对象内部并且不会随环境改变而改变的状态，内部状态可以共享</strong>。如围棋中的的黑棋白棋，不会随外部环境的变化而变化，无论在任何环境下黑棋始终是黑棋。</p>\n<p><strong>外部状态是随环境改变而改变的、不可以共享的状态</strong>。享元对象的外部状态通常由客户端保存，并在享元对象被创建之后，需要使用的时候再传入到享元对象内部。比如每颗棋子的位置是不同的。</p>\n</blockquote>\n<p>围棋中的黑棋和白棋可以是共享的对象，不用每次都创建一个新的对象。这样就只需要创建黑棋和白棋两个对象了。颜色是不会变得，所以是内部状态。落下得位置是随机的，所以作为外部状态。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/nine-flyweight-pure.png\" alt=\"pure\"></p>\n<h2 id=\"2-单纯享元模式\"><a href=\"#2-单纯享元模式\" class=\"headerlink\" title=\"2. 单纯享元模式\"></a>2. 单纯享元模式</h2><p>　　在单纯的享元模式中，所有的享元对象都是可以共享的。</p>\n<p>　　单纯享元模式所涉及到的角色如下：</p>\n<p>　　●　　<strong>抽象享元(Flyweight)角色 ：</strong>给出一个抽象接口，以规定出所有具体享元角色需要实现的方法。</p>\n<p>　　●　　<strong>具体享元(ConcreteFlyweight)角色：</strong>实现抽象享元角色所规定出的接口。如果有内蕴状态的话，必须负责为内蕴状态提供存储空间。</p>\n<p>　　<strong>●　　享元工厂(FlyweightFactory)角色</strong> ：本角色负责创建和管理享元角色。本角色必须保证享元对象可以被系统适当地共享。当一个客户端对象调用一个享元对象的时候，享元工厂角色会检查系统中是否已经有一个符合要求的享元对象。如果已经有了，享元工厂角色就应当提供这个已有的享元对象；如果系统中没有一个适当的享元对象的话，享元工厂角色就应当创建一个合适的享元对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 单纯享元模式 抽象享元角色</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Ball</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 简单的show方法</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据传入的参数(外蕴状态)不同而产生不同的表现</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> color 外蕴状态</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(String color)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 单纯享元模式 具体享元角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 内蕴状态为type 即球的类型 由构造方法传入</span></span><br><span class=\"line\"><span class=\"comment\"> * 外蕴状态为color 即球的颜色 作为show()方法的参数传入</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteBall</span> <span class=\"keyword\">implements</span> <span class=\"title\">Ball</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String type;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConcreteBall</span><span class=\"params\">(String type)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.type = type;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(String color)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"这是一个：\"</span> + color + <span class=\"string\">\"的\"</span> + type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 单纯享元模式 享元工厂角色</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BallFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将对象存在map中</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;String, Ball&gt; factory = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取单纯享元角色</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> type 内蕴状态</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 具体享元角色</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Ball <span class=\"title\">getBall</span><span class=\"params\">(String type)</span> </span>&#123;</span><br><span class=\"line\">        Ball ball = factory.get(type);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ball == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果对象不存在则创建一个新的对象</span></span><br><span class=\"line\">            ball = <span class=\"keyword\">new</span> ConcreteBall(type);</span><br><span class=\"line\">            <span class=\"comment\">//把这个新的Flyweight对象添加到缓存中</span></span><br><span class=\"line\">            factory.put(type, ball);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ball;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 静态内部类 单例模式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">BallFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> BallFactory INSTANCE = <span class=\"keyword\">new</span> BallFactory();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">static</span> BallFactory <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 单纯享元模式 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PureTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当客户端需要单纯享元对象的时候，需要调用享元工厂的factory()方法，</span></span><br><span class=\"line\"><span class=\"comment\">     * 并传入所需的单纯享元对象的内蕴状态，由工厂方法产生所需要的享元对象。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">flyWeightTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        BallFactory ballFactory = BallFactory.getInstance();</span><br><span class=\"line\">        Ball basketball = ballFactory.getBall(<span class=\"string\">\"篮球\"</span>);</span><br><span class=\"line\">        Ball football = ballFactory.getBall(<span class=\"string\">\"足球\"</span>);</span><br><span class=\"line\">        basketball.show(<span class=\"string\">\"红色\"</span>);</span><br><span class=\"line\">        basketball.show(<span class=\"string\">\"黄色\"</span>);</span><br><span class=\"line\">        football.show(<span class=\"string\">\"黑色\"</span>);</span><br><span class=\"line\">        football.show(<span class=\"string\">\"白色\"</span>);</span><br><span class=\"line\">        Ball basketball2 = ballFactory.getBall(<span class=\"string\">\"篮球\"</span>);</span><br><span class=\"line\">        Ball football2 = ballFactory.getBall(<span class=\"string\">\"足球\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//true 都是同一个对象</span></span><br><span class=\"line\">        System.out.println(basketball.equals(basketball2));</span><br><span class=\"line\">        <span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(football.equals(football2));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\">这是一个：红色的篮球</span><br><span class=\"line\">这是一个：黄色的篮球</span><br><span class=\"line\">这是一个：黑色的足球</span><br><span class=\"line\">这是一个：白色的足球</span><br><span class=\"line\"><span class=\"keyword\">true</span></span><br><span class=\"line\"><span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-复合享元模式\"><a href=\"#3-复合享元模式\" class=\"headerlink\" title=\"3. 复合享元模式\"></a>3. 复合享元模式</h2><p>　　在单纯享元模式中，所有的享元对象都是单纯享元对象，也就是说都是可以直接共享的。还有一种较为复杂的情况，将一些单纯享元使用合成模式加以复合，形成复合享元对象。这样的复合享元对象本身不能共享，但是它们可以分解成单纯享元对象，而后者则可以共享。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/nine-flyweight-composite.png\" alt=\"composite\"></p>\n<p>　　复合享元角色所涉及到的角色如下：</p>\n<p>　　●　　<strong>抽象享元(Flyweight)角色 ：</strong>给出一个抽象接口，以规定出所有具体享元角色需要实现的方法。</p>\n<p>　　●　　<strong>具体享元(ConcreteFlyweight)角色：</strong>实现抽象享元角色所规定出的接口。如果有内蕴状态的话，必须负责为内蕴状态提供存储空间。</p>\n<p>　　<strong>●　  复合享元(ConcreteCompositeFlyweight)角色</strong> ：复合享元角色所代表的对象是不可以共享的，但是一个复合享元对象可以分解成为多个本身是单纯享元对象的组合。复合享元角色又称作不可共享的享元对象。</p>\n<p>　　<strong>●　  享元工厂(FlyweightFactory)角色</strong> ：本角 色负责创建和管理享元角色。本角色必须保证享元对象可以被系统适当地共享。当一个客户端对象调用一个享元对象的时候，享元工厂角色会检查系统中是否已经有 一个符合要求的享元对象。如果已经有了，享元工厂角色就应当提供这个已有的享元对象；如果系统中没有一个适当的享元对象的话，享元工厂角色就应当创建一个 合适的享元对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 复合享元模式 复合享元角色</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CompositeBall</span> <span class=\"keyword\">implements</span> <span class=\"title\">Ball</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 复合享元角色内部包含多个单纯享元角色</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, Ball&gt; composite = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 增加一个新的单纯享元对象到集合中</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(String type, Ball ball)</span> </span>&#123;</span><br><span class=\"line\">        composite.put(type, ball);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 遍历的方式挨个调用内部单纯享元角色的show方法</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> color 外蕴状态</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(String color)</span> </span>&#123;</span><br><span class=\"line\">        Set&lt;String&gt; strings = composite.keySet();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String type : strings) &#123;</span><br><span class=\"line\">            Ball ball = composite.get(type);</span><br><span class=\"line\">            ball.show(color);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 复合享元模式 复合工厂角色</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CompositeFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, Ball&gt; factory = <span class=\"keyword\">new</span> HashMap&lt;String, Ball&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取复合享元</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> types 类型集合</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 复合享元对象 包含多个单纯享元对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Ball <span class=\"title\">getComposite</span><span class=\"params\">(List&lt;String&gt; types)</span> </span>&#123;</span><br><span class=\"line\">        CompositeBall composteBall = <span class=\"keyword\">new</span> CompositeBall();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String type : types) &#123;</span><br><span class=\"line\">            composteBall.add(type, getPure(type));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> composteBall;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取单纯享元角色</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> type 内蕴状态</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 具体享元角色</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Ball <span class=\"title\">getPure</span><span class=\"params\">(String type)</span> </span>&#123;</span><br><span class=\"line\">        Ball ball = factory.get(type);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ball == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果对象不存在则创建一个新的对象</span></span><br><span class=\"line\">            ball = <span class=\"keyword\">new</span> ConcreteBall(type);</span><br><span class=\"line\">            <span class=\"comment\">//把这个新的Flyweight对象添加到缓存中</span></span><br><span class=\"line\">            factory.put(type, ball);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ball;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 静态内部类 单例模式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">CompositeFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> CompositeFactory INSTANCE = <span class=\"keyword\">new</span> CompositeFactory();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CompositeFactory <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> CompositeFactory.SingletonHolder.INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 单纯享元模式 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CompositeTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当客户端需要单纯享元对象的时候，需要调用享元工厂的factory()方法，</span></span><br><span class=\"line\"><span class=\"comment\">     * 并传入所需的单纯享元对象的内蕴状态，由工厂方法产生所需要的享元对象。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">flyWeightTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        CompositeFactory compositeFactory = CompositeFactory.getInstance();</span><br><span class=\"line\">        Ball pure = compositeFactory.getPure(<span class=\"string\">\"篮球\"</span>);</span><br><span class=\"line\">        Ball pure2 = compositeFactory.getPure(<span class=\"string\">\"篮球\"</span>);</span><br><span class=\"line\">        pure.show(<span class=\"string\">\"红色\"</span>);</span><br><span class=\"line\">        List&lt;String&gt; types = Arrays.asList(<span class=\"string\">\"篮球\"</span>, <span class=\"string\">\"足球\"</span>, <span class=\"string\">\"排球\"</span>);</span><br><span class=\"line\">        Ball composite = compositeFactory.getComposite(types);</span><br><span class=\"line\">        Ball composite2 = compositeFactory.getComposite(types);</span><br><span class=\"line\">        composite.show(<span class=\"string\">\"蓝色\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//false 复合享元角色不相同</span></span><br><span class=\"line\">        System.out.println(composite.equals(composite2));</span><br><span class=\"line\">        <span class=\"comment\">//true 单纯享元角色相同</span></span><br><span class=\"line\">        System.out.println(pure.equals(pure2));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\">这是一个：红色的篮球</span><br><span class=\"line\">这是一个：蓝色的足球</span><br><span class=\"line\">这是一个：蓝色的篮球</span><br><span class=\"line\">这是一个：蓝色的排球</span><br><span class=\"line\"><span class=\"keyword\">false</span></span><br><span class=\"line\"><span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h2><p><strong>享元模式的核心在于享元工厂类，享元工厂类的作用在于提供一个用于存储享元对象的享元池，用户需要对象时，首先从享元池中获取，如果享元池中不存在，则创建一个新的享元对象返回给用户，并在享元池中保存该新增对象。</strong></p>\n<p><strong>优点</strong>：</p>\n<p>节约系统的开销，可以少创建对象。<br>外部状态不会影响内部状态，可以在不同环境下进行共享哦。<br><strong>缺点</strong>：</p>\n<p>享元模式使逻辑变得更加复杂，需要将享元对象分出内部状态和外部状态。</p>\n<p>并且为了使对象可以共享，外部状态在很多情况下是必须有的，当读取外部状态时明显会增加运行时间。</p>\n<p><strong>享元模式使用的场景</strong>：</p>\n<p>当我们项目中创建很多对象，而且这些对象存在许多相同模块，这时，我们可以将这些相同的模块提取出来采用享元模式生成单一对象，再使用这个对象与之前的诸多对象进行配合使用，这样无疑会节省很多空间。</p>\n<p><strong>与单例模式的区别</strong>：</p>\n<p>享元模式的目的是共享，避免多次创建耗费资源，减少不会要额内存消耗 。</p>\n<p>单例模式的目的是限制创建多个对象以避免冲突等 。</p>\n<h2 id=\"5-参考\"><a href=\"#5-参考\" class=\"headerlink\" title=\"5. 参考\"></a>5. 参考</h2><p><code>http://blog.csdn.net/lovelion&gt;</code></p>\n<p><code>https://blog.csdn.net/Hmily_hui/article/details/80917975</code></p>"},{"title":"Java设计模式(一)---单例模式","abbrlink":53093,"date":"2018-10-08T14:00:00.000Z","_content":"\n本文主要介绍了设计模式的六大原则，并结合实例描述了各种单例模式的具体实现和性能分析测试。包括：`饿汉式`、`静态内部类`、`懒汉式`、`双重校验锁`、`枚举`等。\n\n<!--more-->\n\n> **Java设计模式系列文章目录**\n>\n> [Java设计模式(一)---单例模式](https://www.lixueduan.com/posts/53093.html)\n>\n> [Java设计模式(二)---工厂模式](https://www.lixueduan.com/posts/34710.html)\n>\n> [Java设计模式(三)---建造者模式](https://www.lixueduan.com/posts/52453.html)\n>\n> [Java设计模式(四)---原型模式](https://www.lixueduan.com/posts/24b6c0e4.html)\n>\n> [Java设计模式(五)---适配器模式](https://www.lixueduan.com/posts/f444ac9.html)\n>\n> [Java设计模式(六)---装饰者模式](https://www.lixueduan.com/posts/75903408.html)\n>\n> [Java设计模式(七)---代理模式](https://www.lixueduan.com/posts/ae2a93bd.html)\n>\n> [Java设计模式(八)---外观模式](https://www.lixueduan.com/posts/22a51705.html)\n>\n> [Java设计模式(九)---享元模式](https://www.lixueduan.com/posts/34e634e7.html)\n>\n> [Java设计模式(十)---策略模式](https://www.lixueduan.com/posts/a7982bdc.html)\n>\n> [Java设计模式(十一)---模板方法模式](https://www.lixueduan.com/posts/57ae709c.html)\n>\n> [Java设计模式(十二)---观察者模式](https://www.lixueduan.com/posts/48bcf013.html)\n>\n> [Java设计模式(十三)---组合模式](https://www.lixueduan.com/posts/a340063f.html)\n>\n> ........\n>\n> Demo下载--> [Github](https://github.com/illusorycloud/design-pattern)\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 设计模式的六大原则\n\n**1、开闭原则（Open Close Principle）**\n\n> 开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。\n\n**2、里氏代换原则（Liskov Substitution Principle）**\n\n> 其官方描述比较抽象，可自行百度。实际上可以这样理解：\n>\n> （1）子类的能力必须大于等于父类，即父类可以使用的方法，子类都可以使用。\n>\n> （2）返回值也是同样的道理。假设一个父类方法返回一个List，子类返回一个ArrayList，这当然可以。如果父类方法返回一个ArrayList，子类返回一个List，就说不通了。这里子类返回值的能力是比父类小的。\n>\n> （3）还有抛出异常的情况。任何子类方法可以声明抛出父类方法声明异常的子类。而不能声明抛出父类没有声明的异常。\n\n**3、依赖倒转原则（Dependence Inversion Principle）**\n\n> 这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。\n\n**4、接口隔离原则（Interface Segregation Principle）**\n\n> 这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。\n\n**5、迪米特法则（最少知道原则）（Demeter Principle）**\n\n> 为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。\n\n**6、合成复用原则（Composite Reuse Principle）**\n\n> 原则是尽量使用合成/聚合的方式，而不是使用继承。\n\nJava 中一般认为有 23 种设计模式，总体来说设计模式分为三大类：\n\n`创建型模式`，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。\n\n`结构型模式`，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。\n\n`行为型模式`，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录\n\n模式、状态模式、访问者模式、中介者模式、解释器模式。\n\n比较常用的有：工厂方法模式、抽象工厂模式、单例模式、建造者模式、适配器模式、代理模式、享元模式、策略模式、观察者模式。\n\n## 2. 单例模式\n\n### 2.1 单利模式介绍\n\n**作用**：保证一个类仅有一个实例，并提供一个访问它的全局访问点。\n\n**主要解决**：一个全局使用的类频繁地创建与销毁。\n\n**优点**： 1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例。 2、避免对资源的多重占用（比如写文件操作）。\n\n**缺点**：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。\n\n**应用场景：** 1.配置文件访问类，不用每次使用时都new一个 2.数据库连接池 保证项目中只有一个连接池存在。\n\n### 2.2 单利模式实现\n\n#### 1. 饿汉式\n\n```java\n/**\n *  饿汉式\n * @author illusoryCloud\n */\npublic class FirstSingleton {\n    /**\n     * 类变量在类准备阶段就初始化了然后放在<clinit>构造方法中\n     * 一旦外部调用了静态方法，那么就会初始化完成。\n     * 一个类的<clinit>只会执行一次 保证多线程情况下不会创建多个实例\n     */\n    private static final FirstSingleton INSTANCE =new FirstSingleton();\n\n    /**\n     *\n     * 构造函数私有化\n     */\n    private FirstSingleton(){}\n\n    /**\n     *  提供公共方法以获取实例对象\n     * @return instance 实例对象\n     */\n    public static FirstSingleton getInstance(){\n        return INSTANCE ;\n    }\n}\n```\n\n这种方式实现的单例：类加载时就创建实例。由`classloder`保证了线程安全。\n\n#### 2. 静态内部类\n\n```java\n/**\n * 静态内部类方式\n *\n * @author illusoryCloud\n */\npublic class SecondSingleton {\n\n    private static class SingletonHolder {\n        /**\n         * 静态变量类加载时才会被创建 且只会创建一次\n         */\n        private static final SecondSingleton INSTANCE = new SecondSingleton();\n    }\n\n    private SecondSingleton() {\n    }\n\n    public static SecondSingleton getInstance() {\n        return SingletonHolder.INSTANCE;\n    }\n}\n```\n\n这种方式实现的单例：实现了`lazy loading` 使用时才创建实例，由`classloder`保证了线程安全。\n\n**饿汉式/静态内部类是如何保证线程安全的：**\n\n在《深入理解JAVA虚拟机》中，有这么一句话:\n\n>  虚拟机会保证一个类的`<clinit>()`方法在多线程环境中被正确地加锁、同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的`<clinit>()`方法，其他线程都需要阻塞等待，直到活动线程执行`<clinit>()`方法完毕。\n\n#### 3. 懒汉式\n\n```java\n/**\n * 懒汉式\n *\n * @author illusoryCloud\n */\npublic class ThirdSingleton {\n\n    private static ThirdSingleton instance;\n\n    private ThirdSingleton() {\n    }\n\n    /**\n     * synchronized 保证线程安全 但效率低\n     *\n     * @return instance单例对象\n     */\n    public static synchronized ThirdSingleton getInstance() {\n        if (instance == null) {\n            instance = new ThirdSingleton();\n        }\n        return instance;\n    }\n\n}\n```\n\n这种方式实现的单例：实现了`lazy loading` 使用时才创建实例。`synchronized`保证了线程安全，但效率低。\n\n#### 4. 双重校验锁\n\n```java\n/**\n * 双重校验锁式\n *\n * @author illusoryCloud\n */\npublic class FourSingleton {\n    /**\n     * volatile关键字禁止指令重排序\n     * 保证多线程下不会获取到未完全初始化的实例\n     * 详细请阅读：https://www.lixueduan.com/posts/e7cef119.html\n     */\n    private static volatile FourSingleton instance;\n\n    private FourSingleton() {\n    }\n\n    /**\n     * 双重if校验 缩小synchronized代码块范围\n     * 若instance不为空 就可直接return\n     *\n     * @return instance 实例对象\n     */\n    public static FourSingleton getInstance() {\n        if (instance == null) {\n            synchronized (FourSingleton.class) {\n                if (instance == null) {\n                    //非原子操作\n                    instance = new FourSingleton();\n                }\n            }\n        }\n        return instance;\n    }\n}\n```\n\n这种方式实现的单例：实现了`lazy loading` 使用时才创建实例。`synchronized`保证了线程安全，`volatile`禁止指令重排序保证了多线程获取时不为空，但要JDK1.5以上才行。详细信息请阅读[volatile关键字在单例模式(双重校验锁)中的作用](https://www.lixueduan.com/posts/e7cef119.html)\n\n#### 5. 枚举\n\n```java\n/**\n * 枚举式\n * 序列化及反序列化安全\n * @author illusoryCloud\n */\npublic enum FiveSingleton {\n    //定义一个枚举的元素，它就是 singleton 的一个实例\n    INSTANCE;\n    public void doSomeThing(FiveSingleton instance) {\n        System.out.println(\"枚举方式实现单例\");\n    }\n\n}\npublic class Test {\n\n\tpublic static void main(String[] args) {\n\t\tSingleton singleton = Singleton.INSTANCE;\n\t\tsingleton.doSomeThing();//output:枚举方法实现单例\n\n\t}\n}\n```\n\n这种方式也是《Effective Java 》以及《Java与模式》的作者推荐的方式。\n\n`静态内部类`和`双重校验锁`已经这么优秀了为什么还要有第五种`枚举式`呢？\n\n**因为前面4种都存在一个序列化和反序列化时的安全问题。将单例对象序列化后，在反序列化时会重新创建一个单例对象，违背了单例模式的初衷**。而枚举式单例则没有这个问题，具体信息查看：[枚举式单例模式与序列化](https://www.lixueduan.com)\n\n## 3. 性能测试\n\n五种单例实现方式，在100个线程下，每个线程访问1千万次实例的用时.\n\n| Tables | 实现方式   | 用时(毫秒) |\n| ------ | ---------- | ---------- |\n| 1      | 饿汉式     | 13         |\n| 2      | 懒汉式     | 10778      |\n| 3      | 双重检查   | 15         |\n| 4      | 静态内部类 | 14         |\n| 5      | 枚举       | 12         |\n\n(*注意:由于不同电脑之间的性能差异，测试的结果可能不同)\n\n根据不同场合选择具体的实现方式，一般情况下我是使用的**静态内部类**或者**DCL双重校验锁**方式。\n\n## 4. 总结\n\n**为什么要使用单例模式？什么场景适合使用单例模式?单例模式有什么好处**\n\n* 1.单例模式能够保证一个类仅有唯一的实例，避免创建多个实例。并提供一个全局访问点，优化和共享资源访问。\n* 2.当一个对象需要频繁创建和销毁时使用单例模式能节省系统资源。\n\n**应用场景：**\n\n* 1.配置文件访问类，不用每次使用时都new一个\n\n*  2.数据库连接池 保证项目中只有一个连接池存在。\n\n**单例模式的缺点：**\n\n* 单例模式一般没有接口，扩展很困难，若要扩展只能修改代码。\n\n**单例模式在Java中的应用**\n\n```java\npublic class Runtime {\n    private static Runtime currentRuntime = new Runtime();\n\n    /**\n     * Returns the runtime object associated with the current Java application.\n     * Most of the methods of class <code>Runtime</code> are instance \n     * methods and must be invoked with respect to the current runtime object. \n     * \n     * @return  the <code>Runtime</code> object associated with the current\n     *          Java application.\n     */\n    public static Runtime getRuntime() { \n    return currentRuntime;\n    }\n\n    /** Don't let anyone else instantiate this class */\n    private Runtime() {}\n\n    ...\n}\n```\n\n## 5. 参考\n\n`http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html`\n\n`https://blog.csdn.net/qq_22706515/article/details/74202814`","source":"_posts/design_pattern/one-singleton.md","raw":"---\ntitle: Java设计模式(一)---单例模式\ntags:\n  - Java\n  - 设计模式\ncategories:\n  - 设计模式\nabbrlink: 53093\ndate: 2018-10-08 22:00:00\n---\n\n本文主要介绍了设计模式的六大原则，并结合实例描述了各种单例模式的具体实现和性能分析测试。包括：`饿汉式`、`静态内部类`、`懒汉式`、`双重校验锁`、`枚举`等。\n\n<!--more-->\n\n> **Java设计模式系列文章目录**\n>\n> [Java设计模式(一)---单例模式](https://www.lixueduan.com/posts/53093.html)\n>\n> [Java设计模式(二)---工厂模式](https://www.lixueduan.com/posts/34710.html)\n>\n> [Java设计模式(三)---建造者模式](https://www.lixueduan.com/posts/52453.html)\n>\n> [Java设计模式(四)---原型模式](https://www.lixueduan.com/posts/24b6c0e4.html)\n>\n> [Java设计模式(五)---适配器模式](https://www.lixueduan.com/posts/f444ac9.html)\n>\n> [Java设计模式(六)---装饰者模式](https://www.lixueduan.com/posts/75903408.html)\n>\n> [Java设计模式(七)---代理模式](https://www.lixueduan.com/posts/ae2a93bd.html)\n>\n> [Java设计模式(八)---外观模式](https://www.lixueduan.com/posts/22a51705.html)\n>\n> [Java设计模式(九)---享元模式](https://www.lixueduan.com/posts/34e634e7.html)\n>\n> [Java设计模式(十)---策略模式](https://www.lixueduan.com/posts/a7982bdc.html)\n>\n> [Java设计模式(十一)---模板方法模式](https://www.lixueduan.com/posts/57ae709c.html)\n>\n> [Java设计模式(十二)---观察者模式](https://www.lixueduan.com/posts/48bcf013.html)\n>\n> [Java设计模式(十三)---组合模式](https://www.lixueduan.com/posts/a340063f.html)\n>\n> ........\n>\n> Demo下载--> [Github](https://github.com/illusorycloud/design-pattern)\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 设计模式的六大原则\n\n**1、开闭原则（Open Close Principle）**\n\n> 开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。\n\n**2、里氏代换原则（Liskov Substitution Principle）**\n\n> 其官方描述比较抽象，可自行百度。实际上可以这样理解：\n>\n> （1）子类的能力必须大于等于父类，即父类可以使用的方法，子类都可以使用。\n>\n> （2）返回值也是同样的道理。假设一个父类方法返回一个List，子类返回一个ArrayList，这当然可以。如果父类方法返回一个ArrayList，子类返回一个List，就说不通了。这里子类返回值的能力是比父类小的。\n>\n> （3）还有抛出异常的情况。任何子类方法可以声明抛出父类方法声明异常的子类。而不能声明抛出父类没有声明的异常。\n\n**3、依赖倒转原则（Dependence Inversion Principle）**\n\n> 这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。\n\n**4、接口隔离原则（Interface Segregation Principle）**\n\n> 这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。\n\n**5、迪米特法则（最少知道原则）（Demeter Principle）**\n\n> 为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。\n\n**6、合成复用原则（Composite Reuse Principle）**\n\n> 原则是尽量使用合成/聚合的方式，而不是使用继承。\n\nJava 中一般认为有 23 种设计模式，总体来说设计模式分为三大类：\n\n`创建型模式`，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。\n\n`结构型模式`，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。\n\n`行为型模式`，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录\n\n模式、状态模式、访问者模式、中介者模式、解释器模式。\n\n比较常用的有：工厂方法模式、抽象工厂模式、单例模式、建造者模式、适配器模式、代理模式、享元模式、策略模式、观察者模式。\n\n## 2. 单例模式\n\n### 2.1 单利模式介绍\n\n**作用**：保证一个类仅有一个实例，并提供一个访问它的全局访问点。\n\n**主要解决**：一个全局使用的类频繁地创建与销毁。\n\n**优点**： 1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例。 2、避免对资源的多重占用（比如写文件操作）。\n\n**缺点**：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。\n\n**应用场景：** 1.配置文件访问类，不用每次使用时都new一个 2.数据库连接池 保证项目中只有一个连接池存在。\n\n### 2.2 单利模式实现\n\n#### 1. 饿汉式\n\n```java\n/**\n *  饿汉式\n * @author illusoryCloud\n */\npublic class FirstSingleton {\n    /**\n     * 类变量在类准备阶段就初始化了然后放在<clinit>构造方法中\n     * 一旦外部调用了静态方法，那么就会初始化完成。\n     * 一个类的<clinit>只会执行一次 保证多线程情况下不会创建多个实例\n     */\n    private static final FirstSingleton INSTANCE =new FirstSingleton();\n\n    /**\n     *\n     * 构造函数私有化\n     */\n    private FirstSingleton(){}\n\n    /**\n     *  提供公共方法以获取实例对象\n     * @return instance 实例对象\n     */\n    public static FirstSingleton getInstance(){\n        return INSTANCE ;\n    }\n}\n```\n\n这种方式实现的单例：类加载时就创建实例。由`classloder`保证了线程安全。\n\n#### 2. 静态内部类\n\n```java\n/**\n * 静态内部类方式\n *\n * @author illusoryCloud\n */\npublic class SecondSingleton {\n\n    private static class SingletonHolder {\n        /**\n         * 静态变量类加载时才会被创建 且只会创建一次\n         */\n        private static final SecondSingleton INSTANCE = new SecondSingleton();\n    }\n\n    private SecondSingleton() {\n    }\n\n    public static SecondSingleton getInstance() {\n        return SingletonHolder.INSTANCE;\n    }\n}\n```\n\n这种方式实现的单例：实现了`lazy loading` 使用时才创建实例，由`classloder`保证了线程安全。\n\n**饿汉式/静态内部类是如何保证线程安全的：**\n\n在《深入理解JAVA虚拟机》中，有这么一句话:\n\n>  虚拟机会保证一个类的`<clinit>()`方法在多线程环境中被正确地加锁、同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的`<clinit>()`方法，其他线程都需要阻塞等待，直到活动线程执行`<clinit>()`方法完毕。\n\n#### 3. 懒汉式\n\n```java\n/**\n * 懒汉式\n *\n * @author illusoryCloud\n */\npublic class ThirdSingleton {\n\n    private static ThirdSingleton instance;\n\n    private ThirdSingleton() {\n    }\n\n    /**\n     * synchronized 保证线程安全 但效率低\n     *\n     * @return instance单例对象\n     */\n    public static synchronized ThirdSingleton getInstance() {\n        if (instance == null) {\n            instance = new ThirdSingleton();\n        }\n        return instance;\n    }\n\n}\n```\n\n这种方式实现的单例：实现了`lazy loading` 使用时才创建实例。`synchronized`保证了线程安全，但效率低。\n\n#### 4. 双重校验锁\n\n```java\n/**\n * 双重校验锁式\n *\n * @author illusoryCloud\n */\npublic class FourSingleton {\n    /**\n     * volatile关键字禁止指令重排序\n     * 保证多线程下不会获取到未完全初始化的实例\n     * 详细请阅读：https://www.lixueduan.com/posts/e7cef119.html\n     */\n    private static volatile FourSingleton instance;\n\n    private FourSingleton() {\n    }\n\n    /**\n     * 双重if校验 缩小synchronized代码块范围\n     * 若instance不为空 就可直接return\n     *\n     * @return instance 实例对象\n     */\n    public static FourSingleton getInstance() {\n        if (instance == null) {\n            synchronized (FourSingleton.class) {\n                if (instance == null) {\n                    //非原子操作\n                    instance = new FourSingleton();\n                }\n            }\n        }\n        return instance;\n    }\n}\n```\n\n这种方式实现的单例：实现了`lazy loading` 使用时才创建实例。`synchronized`保证了线程安全，`volatile`禁止指令重排序保证了多线程获取时不为空，但要JDK1.5以上才行。详细信息请阅读[volatile关键字在单例模式(双重校验锁)中的作用](https://www.lixueduan.com/posts/e7cef119.html)\n\n#### 5. 枚举\n\n```java\n/**\n * 枚举式\n * 序列化及反序列化安全\n * @author illusoryCloud\n */\npublic enum FiveSingleton {\n    //定义一个枚举的元素，它就是 singleton 的一个实例\n    INSTANCE;\n    public void doSomeThing(FiveSingleton instance) {\n        System.out.println(\"枚举方式实现单例\");\n    }\n\n}\npublic class Test {\n\n\tpublic static void main(String[] args) {\n\t\tSingleton singleton = Singleton.INSTANCE;\n\t\tsingleton.doSomeThing();//output:枚举方法实现单例\n\n\t}\n}\n```\n\n这种方式也是《Effective Java 》以及《Java与模式》的作者推荐的方式。\n\n`静态内部类`和`双重校验锁`已经这么优秀了为什么还要有第五种`枚举式`呢？\n\n**因为前面4种都存在一个序列化和反序列化时的安全问题。将单例对象序列化后，在反序列化时会重新创建一个单例对象，违背了单例模式的初衷**。而枚举式单例则没有这个问题，具体信息查看：[枚举式单例模式与序列化](https://www.lixueduan.com)\n\n## 3. 性能测试\n\n五种单例实现方式，在100个线程下，每个线程访问1千万次实例的用时.\n\n| Tables | 实现方式   | 用时(毫秒) |\n| ------ | ---------- | ---------- |\n| 1      | 饿汉式     | 13         |\n| 2      | 懒汉式     | 10778      |\n| 3      | 双重检查   | 15         |\n| 4      | 静态内部类 | 14         |\n| 5      | 枚举       | 12         |\n\n(*注意:由于不同电脑之间的性能差异，测试的结果可能不同)\n\n根据不同场合选择具体的实现方式，一般情况下我是使用的**静态内部类**或者**DCL双重校验锁**方式。\n\n## 4. 总结\n\n**为什么要使用单例模式？什么场景适合使用单例模式?单例模式有什么好处**\n\n* 1.单例模式能够保证一个类仅有唯一的实例，避免创建多个实例。并提供一个全局访问点，优化和共享资源访问。\n* 2.当一个对象需要频繁创建和销毁时使用单例模式能节省系统资源。\n\n**应用场景：**\n\n* 1.配置文件访问类，不用每次使用时都new一个\n\n*  2.数据库连接池 保证项目中只有一个连接池存在。\n\n**单例模式的缺点：**\n\n* 单例模式一般没有接口，扩展很困难，若要扩展只能修改代码。\n\n**单例模式在Java中的应用**\n\n```java\npublic class Runtime {\n    private static Runtime currentRuntime = new Runtime();\n\n    /**\n     * Returns the runtime object associated with the current Java application.\n     * Most of the methods of class <code>Runtime</code> are instance \n     * methods and must be invoked with respect to the current runtime object. \n     * \n     * @return  the <code>Runtime</code> object associated with the current\n     *          Java application.\n     */\n    public static Runtime getRuntime() { \n    return currentRuntime;\n    }\n\n    /** Don't let anyone else instantiate this class */\n    private Runtime() {}\n\n    ...\n}\n```\n\n## 5. 参考\n\n`http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html`\n\n`https://blog.csdn.net/qq_22706515/article/details/74202814`","slug":"design_pattern/one-singleton","published":1,"updated":"2019-03-04T15:43:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv4al003z0ww4u4rqxb62","content":"<p>本文主要介绍了设计模式的六大原则，并结合实例描述了各种单例模式的具体实现和性能分析测试。包括：<code>饿汉式</code>、<code>静态内部类</code>、<code>懒汉式</code>、<code>双重校验锁</code>、<code>枚举</code>等。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p><strong>Java设计模式系列文章目录</strong></p>\n<p><a href=\"https://www.lixueduan.com/posts/53093.html\">Java设计模式(一)—单例模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34710.html\">Java设计模式(二)—工厂模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/52453.html\">Java设计模式(三)—建造者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/24b6c0e4.html\">Java设计模式(四)—原型模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/f444ac9.html\">Java设计模式(五)—适配器模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/75903408.html\">Java设计模式(六)—装饰者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/ae2a93bd.html\">Java设计模式(七)—代理模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/22a51705.html\">Java设计模式(八)—外观模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34e634e7.html\">Java设计模式(九)—享元模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a7982bdc.html\">Java设计模式(十)—策略模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/57ae709c.html\">Java设计模式(十一)—模板方法模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/48bcf013.html\">Java设计模式(十二)—观察者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a340063f.html\">Java设计模式(十三)—组合模式</a></p>\n<p>……..</p>\n<p>Demo下载–&gt; <a href=\"https://github.com/illusorycloud/design-pattern\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-设计模式的六大原则\"><a href=\"#1-设计模式的六大原则\" class=\"headerlink\" title=\"1. 设计模式的六大原则\"></a>1. 设计模式的六大原则</h2><p><strong>1、开闭原则（Open Close Principle）</strong></p>\n<blockquote>\n<p>开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。</p>\n</blockquote>\n<p><strong>2、里氏代换原则（Liskov Substitution Principle）</strong></p>\n<blockquote>\n<p>其官方描述比较抽象，可自行百度。实际上可以这样理解：</p>\n<p>（1）子类的能力必须大于等于父类，即父类可以使用的方法，子类都可以使用。</p>\n<p>（2）返回值也是同样的道理。假设一个父类方法返回一个List，子类返回一个ArrayList，这当然可以。如果父类方法返回一个ArrayList，子类返回一个List，就说不通了。这里子类返回值的能力是比父类小的。</p>\n<p>（3）还有抛出异常的情况。任何子类方法可以声明抛出父类方法声明异常的子类。而不能声明抛出父类没有声明的异常。</p>\n</blockquote>\n<p><strong>3、依赖倒转原则（Dependence Inversion Principle）</strong></p>\n<blockquote>\n<p>这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。</p>\n</blockquote>\n<p><strong>4、接口隔离原则（Interface Segregation Principle）</strong></p>\n<blockquote>\n<p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。</p>\n</blockquote>\n<p><strong>5、迪米特法则（最少知道原则）（Demeter Principle）</strong></p>\n<blockquote>\n<p>为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。</p>\n</blockquote>\n<p><strong>6、合成复用原则（Composite Reuse Principle）</strong></p>\n<blockquote>\n<p>原则是尽量使用合成/聚合的方式，而不是使用继承。</p>\n</blockquote>\n<p>Java 中一般认为有 23 种设计模式，总体来说设计模式分为三大类：</p>\n<p><code>创建型模式</code>，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</p>\n<p><code>结构型模式</code>，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</p>\n<p><code>行为型模式</code>，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录</p>\n<p>模式、状态模式、访问者模式、中介者模式、解释器模式。</p>\n<p>比较常用的有：工厂方法模式、抽象工厂模式、单例模式、建造者模式、适配器模式、代理模式、享元模式、策略模式、观察者模式。</p>\n<h2 id=\"2-单例模式\"><a href=\"#2-单例模式\" class=\"headerlink\" title=\"2. 单例模式\"></a>2. 单例模式</h2><h3 id=\"2-1-单利模式介绍\"><a href=\"#2-1-单利模式介绍\" class=\"headerlink\" title=\"2.1 单利模式介绍\"></a>2.1 单利模式介绍</h3><p><strong>作用</strong>：保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>\n<p><strong>主要解决</strong>：一个全局使用的类频繁地创建与销毁。</p>\n<p><strong>优点</strong>： 1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例。 2、避免对资源的多重占用（比如写文件操作）。</p>\n<p><strong>缺点</strong>：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</p>\n<p><strong>应用场景：</strong> 1.配置文件访问类，不用每次使用时都new一个 2.数据库连接池 保证项目中只有一个连接池存在。</p>\n<h3 id=\"2-2-单利模式实现\"><a href=\"#2-2-单利模式实现\" class=\"headerlink\" title=\"2.2 单利模式实现\"></a>2.2 单利模式实现</h3><h4 id=\"1-饿汉式\"><a href=\"#1-饿汉式\" class=\"headerlink\" title=\"1. 饿汉式\"></a>1. 饿汉式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  饿汉式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FirstSingleton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 类变量在类准备阶段就初始化了然后放在&lt;clinit&gt;构造方法中</span></span><br><span class=\"line\"><span class=\"comment\">     * 一旦外部调用了静态方法，那么就会初始化完成。</span></span><br><span class=\"line\"><span class=\"comment\">     * 一个类的&lt;clinit&gt;只会执行一次 保证多线程情况下不会创建多个实例</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> FirstSingleton INSTANCE =<span class=\"keyword\">new</span> FirstSingleton();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * 构造函数私有化</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">FirstSingleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  提供公共方法以获取实例对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> instance 实例对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> FirstSingleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> INSTANCE ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方式实现的单例：类加载时就创建实例。由<code>classloder</code>保证了线程安全。</p>\n<h4 id=\"2-静态内部类\"><a href=\"#2-静态内部类\" class=\"headerlink\" title=\"2. 静态内部类\"></a>2. 静态内部类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 静态内部类方式</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecondSingleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 静态变量类加载时才会被创建 且只会创建一次</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SecondSingleton INSTANCE = <span class=\"keyword\">new</span> SecondSingleton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SecondSingleton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SecondSingleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方式实现的单例：实现了<code>lazy loading</code> 使用时才创建实例，由<code>classloder</code>保证了线程安全。</p>\n<p><strong>饿汉式/静态内部类是如何保证线程安全的：</strong></p>\n<p>在《深入理解JAVA虚拟机》中，有这么一句话:</p>\n<blockquote>\n<p> 虚拟机会保证一个类的<code>&lt;clinit&gt;()</code>方法在多线程环境中被正确地加锁、同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的<code>&lt;clinit&gt;()</code>方法，其他线程都需要阻塞等待，直到活动线程执行<code>&lt;clinit&gt;()</code>方法完毕。</p>\n</blockquote>\n<h4 id=\"3-懒汉式\"><a href=\"#3-懒汉式\" class=\"headerlink\" title=\"3. 懒汉式\"></a>3. 懒汉式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 懒汉式</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThirdSingleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ThirdSingleton instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ThirdSingleton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * synchronized 保证线程安全 但效率低</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> instance单例对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> ThirdSingleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> ThirdSingleton();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方式实现的单例：实现了<code>lazy loading</code> 使用时才创建实例。<code>synchronized</code>保证了线程安全，但效率低。</p>\n<h4 id=\"4-双重校验锁\"><a href=\"#4-双重校验锁\" class=\"headerlink\" title=\"4. 双重校验锁\"></a>4. 双重校验锁</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 双重校验锁式</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FourSingleton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * volatile关键字禁止指令重排序</span></span><br><span class=\"line\"><span class=\"comment\">     * 保证多线程下不会获取到未完全初始化的实例</span></span><br><span class=\"line\"><span class=\"comment\">     * 详细请阅读：https://www.lixueduan.com/posts/e7cef119.html</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> FourSingleton instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">FourSingleton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 双重if校验 缩小synchronized代码块范围</span></span><br><span class=\"line\"><span class=\"comment\">     * 若instance不为空 就可直接return</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> instance 实例对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> FourSingleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (FourSingleton.class) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//非原子操作</span></span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> FourSingleton();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方式实现的单例：实现了<code>lazy loading</code> 使用时才创建实例。<code>synchronized</code>保证了线程安全，<code>volatile</code>禁止指令重排序保证了多线程获取时不为空，但要JDK1.5以上才行。详细信息请阅读<a href=\"https://www.lixueduan.com/posts/e7cef119.html\">volatile关键字在单例模式(双重校验锁)中的作用</a></p>\n<h4 id=\"5-枚举\"><a href=\"#5-枚举\" class=\"headerlink\" title=\"5. 枚举\"></a>5. 枚举</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 枚举式</span></span><br><span class=\"line\"><span class=\"comment\"> * 序列化及反序列化安全</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> FiveSingleton &#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义一个枚举的元素，它就是 singleton 的一个实例</span></span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomeThing</span><span class=\"params\">(FiveSingleton instance)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"枚举方式实现单例\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSingleton singleton = Singleton.INSTANCE;</span><br><span class=\"line\">\t\tsingleton.doSomeThing();<span class=\"comment\">//output:枚举方法实现单例</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方式也是《Effective Java 》以及《Java与模式》的作者推荐的方式。</p>\n<p><code>静态内部类</code>和<code>双重校验锁</code>已经这么优秀了为什么还要有第五种<code>枚举式</code>呢？</p>\n<p><strong>因为前面4种都存在一个序列化和反序列化时的安全问题。将单例对象序列化后，在反序列化时会重新创建一个单例对象，违背了单例模式的初衷</strong>。而枚举式单例则没有这个问题，具体信息查看：<a href=\"https://www.lixueduan.com\">枚举式单例模式与序列化</a></p>\n<h2 id=\"3-性能测试\"><a href=\"#3-性能测试\" class=\"headerlink\" title=\"3. 性能测试\"></a>3. 性能测试</h2><p>五种单例实现方式，在100个线程下，每个线程访问1千万次实例的用时.</p>\n<table>\n<thead>\n<tr>\n<th>Tables</th>\n<th>实现方式</th>\n<th>用时(毫秒)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>饿汉式</td>\n<td>13</td>\n</tr>\n<tr>\n<td>2</td>\n<td>懒汉式</td>\n<td>10778</td>\n</tr>\n<tr>\n<td>3</td>\n<td>双重检查</td>\n<td>15</td>\n</tr>\n<tr>\n<td>4</td>\n<td>静态内部类</td>\n<td>14</td>\n</tr>\n<tr>\n<td>5</td>\n<td>枚举</td>\n<td>12</td>\n</tr>\n</tbody>\n</table>\n<p>(*注意:由于不同电脑之间的性能差异，测试的结果可能不同)</p>\n<p>根据不同场合选择具体的实现方式，一般情况下我是使用的<strong>静态内部类</strong>或者<strong>DCL双重校验锁</strong>方式。</p>\n<h2 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h2><p><strong>为什么要使用单例模式？什么场景适合使用单例模式?单例模式有什么好处</strong></p>\n<ul>\n<li>1.单例模式能够保证一个类仅有唯一的实例，避免创建多个实例。并提供一个全局访问点，优化和共享资源访问。</li>\n<li>2.当一个对象需要频繁创建和销毁时使用单例模式能节省系统资源。</li>\n</ul>\n<p><strong>应用场景：</strong></p>\n<ul>\n<li><p>1.配置文件访问类，不用每次使用时都new一个</p>\n</li>\n<li><p>2.数据库连接池 保证项目中只有一个连接池存在。</p>\n</li>\n</ul>\n<p><strong>单例模式的缺点：</strong></p>\n<ul>\n<li>单例模式一般没有接口，扩展很困难，若要扩展只能修改代码。</li>\n</ul>\n<p><strong>单例模式在Java中的应用</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Runtime</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Runtime currentRuntime = <span class=\"keyword\">new</span> Runtime();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the runtime object associated with the current Java application.</span></span><br><span class=\"line\"><span class=\"comment\">     * Most of the methods of class &lt;code&gt;Runtime&lt;/code&gt; are instance </span></span><br><span class=\"line\"><span class=\"comment\">     * methods and must be invoked with respect to the current runtime object. </span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span>  the &lt;code&gt;Runtime&lt;/code&gt; object associated with the current</span></span><br><span class=\"line\"><span class=\"comment\">     *          Java application.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Runtime <span class=\"title\">getRuntime</span><span class=\"params\">()</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> currentRuntime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Don't let anyone else instantiate this class */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Runtime</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-参考\"><a href=\"#5-参考\" class=\"headerlink\" title=\"5. 参考\"></a>5. 参考</h2><p><code>http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html</code></p>\n<p><code>https://blog.csdn.net/qq_22706515/article/details/74202814</code></p>\n","site":{"data":{}},"excerpt":"<p>本文主要介绍了设计模式的六大原则，并结合实例描述了各种单例模式的具体实现和性能分析测试。包括：<code>饿汉式</code>、<code>静态内部类</code>、<code>懒汉式</code>、<code>双重校验锁</code>、<code>枚举</code>等。</p>","more":"<blockquote>\n<p><strong>Java设计模式系列文章目录</strong></p>\n<p><a href=\"https://www.lixueduan.com/posts/53093.html\">Java设计模式(一)—单例模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34710.html\">Java设计模式(二)—工厂模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/52453.html\">Java设计模式(三)—建造者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/24b6c0e4.html\">Java设计模式(四)—原型模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/f444ac9.html\">Java设计模式(五)—适配器模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/75903408.html\">Java设计模式(六)—装饰者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/ae2a93bd.html\">Java设计模式(七)—代理模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/22a51705.html\">Java设计模式(八)—外观模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34e634e7.html\">Java设计模式(九)—享元模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a7982bdc.html\">Java设计模式(十)—策略模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/57ae709c.html\">Java设计模式(十一)—模板方法模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/48bcf013.html\">Java设计模式(十二)—观察者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a340063f.html\">Java设计模式(十三)—组合模式</a></p>\n<p>……..</p>\n<p>Demo下载–&gt; <a href=\"https://github.com/illusorycloud/design-pattern\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-设计模式的六大原则\"><a href=\"#1-设计模式的六大原则\" class=\"headerlink\" title=\"1. 设计模式的六大原则\"></a>1. 设计模式的六大原则</h2><p><strong>1、开闭原则（Open Close Principle）</strong></p>\n<blockquote>\n<p>开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。</p>\n</blockquote>\n<p><strong>2、里氏代换原则（Liskov Substitution Principle）</strong></p>\n<blockquote>\n<p>其官方描述比较抽象，可自行百度。实际上可以这样理解：</p>\n<p>（1）子类的能力必须大于等于父类，即父类可以使用的方法，子类都可以使用。</p>\n<p>（2）返回值也是同样的道理。假设一个父类方法返回一个List，子类返回一个ArrayList，这当然可以。如果父类方法返回一个ArrayList，子类返回一个List，就说不通了。这里子类返回值的能力是比父类小的。</p>\n<p>（3）还有抛出异常的情况。任何子类方法可以声明抛出父类方法声明异常的子类。而不能声明抛出父类没有声明的异常。</p>\n</blockquote>\n<p><strong>3、依赖倒转原则（Dependence Inversion Principle）</strong></p>\n<blockquote>\n<p>这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。</p>\n</blockquote>\n<p><strong>4、接口隔离原则（Interface Segregation Principle）</strong></p>\n<blockquote>\n<p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。</p>\n</blockquote>\n<p><strong>5、迪米特法则（最少知道原则）（Demeter Principle）</strong></p>\n<blockquote>\n<p>为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。</p>\n</blockquote>\n<p><strong>6、合成复用原则（Composite Reuse Principle）</strong></p>\n<blockquote>\n<p>原则是尽量使用合成/聚合的方式，而不是使用继承。</p>\n</blockquote>\n<p>Java 中一般认为有 23 种设计模式，总体来说设计模式分为三大类：</p>\n<p><code>创建型模式</code>，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</p>\n<p><code>结构型模式</code>，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</p>\n<p><code>行为型模式</code>，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录</p>\n<p>模式、状态模式、访问者模式、中介者模式、解释器模式。</p>\n<p>比较常用的有：工厂方法模式、抽象工厂模式、单例模式、建造者模式、适配器模式、代理模式、享元模式、策略模式、观察者模式。</p>\n<h2 id=\"2-单例模式\"><a href=\"#2-单例模式\" class=\"headerlink\" title=\"2. 单例模式\"></a>2. 单例模式</h2><h3 id=\"2-1-单利模式介绍\"><a href=\"#2-1-单利模式介绍\" class=\"headerlink\" title=\"2.1 单利模式介绍\"></a>2.1 单利模式介绍</h3><p><strong>作用</strong>：保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>\n<p><strong>主要解决</strong>：一个全局使用的类频繁地创建与销毁。</p>\n<p><strong>优点</strong>： 1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例。 2、避免对资源的多重占用（比如写文件操作）。</p>\n<p><strong>缺点</strong>：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</p>\n<p><strong>应用场景：</strong> 1.配置文件访问类，不用每次使用时都new一个 2.数据库连接池 保证项目中只有一个连接池存在。</p>\n<h3 id=\"2-2-单利模式实现\"><a href=\"#2-2-单利模式实现\" class=\"headerlink\" title=\"2.2 单利模式实现\"></a>2.2 单利模式实现</h3><h4 id=\"1-饿汉式\"><a href=\"#1-饿汉式\" class=\"headerlink\" title=\"1. 饿汉式\"></a>1. 饿汉式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  饿汉式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FirstSingleton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 类变量在类准备阶段就初始化了然后放在&lt;clinit&gt;构造方法中</span></span><br><span class=\"line\"><span class=\"comment\">     * 一旦外部调用了静态方法，那么就会初始化完成。</span></span><br><span class=\"line\"><span class=\"comment\">     * 一个类的&lt;clinit&gt;只会执行一次 保证多线程情况下不会创建多个实例</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> FirstSingleton INSTANCE =<span class=\"keyword\">new</span> FirstSingleton();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * 构造函数私有化</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">FirstSingleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  提供公共方法以获取实例对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> instance 实例对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> FirstSingleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> INSTANCE ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方式实现的单例：类加载时就创建实例。由<code>classloder</code>保证了线程安全。</p>\n<h4 id=\"2-静态内部类\"><a href=\"#2-静态内部类\" class=\"headerlink\" title=\"2. 静态内部类\"></a>2. 静态内部类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 静态内部类方式</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecondSingleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 静态变量类加载时才会被创建 且只会创建一次</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SecondSingleton INSTANCE = <span class=\"keyword\">new</span> SecondSingleton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SecondSingleton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SecondSingleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方式实现的单例：实现了<code>lazy loading</code> 使用时才创建实例，由<code>classloder</code>保证了线程安全。</p>\n<p><strong>饿汉式/静态内部类是如何保证线程安全的：</strong></p>\n<p>在《深入理解JAVA虚拟机》中，有这么一句话:</p>\n<blockquote>\n<p> 虚拟机会保证一个类的<code>&lt;clinit&gt;()</code>方法在多线程环境中被正确地加锁、同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的<code>&lt;clinit&gt;()</code>方法，其他线程都需要阻塞等待，直到活动线程执行<code>&lt;clinit&gt;()</code>方法完毕。</p>\n</blockquote>\n<h4 id=\"3-懒汉式\"><a href=\"#3-懒汉式\" class=\"headerlink\" title=\"3. 懒汉式\"></a>3. 懒汉式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 懒汉式</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThirdSingleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ThirdSingleton instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ThirdSingleton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * synchronized 保证线程安全 但效率低</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> instance单例对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> ThirdSingleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> ThirdSingleton();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方式实现的单例：实现了<code>lazy loading</code> 使用时才创建实例。<code>synchronized</code>保证了线程安全，但效率低。</p>\n<h4 id=\"4-双重校验锁\"><a href=\"#4-双重校验锁\" class=\"headerlink\" title=\"4. 双重校验锁\"></a>4. 双重校验锁</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 双重校验锁式</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FourSingleton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * volatile关键字禁止指令重排序</span></span><br><span class=\"line\"><span class=\"comment\">     * 保证多线程下不会获取到未完全初始化的实例</span></span><br><span class=\"line\"><span class=\"comment\">     * 详细请阅读：https://www.lixueduan.com/posts/e7cef119.html</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> FourSingleton instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">FourSingleton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 双重if校验 缩小synchronized代码块范围</span></span><br><span class=\"line\"><span class=\"comment\">     * 若instance不为空 就可直接return</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> instance 实例对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> FourSingleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (FourSingleton.class) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//非原子操作</span></span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> FourSingleton();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方式实现的单例：实现了<code>lazy loading</code> 使用时才创建实例。<code>synchronized</code>保证了线程安全，<code>volatile</code>禁止指令重排序保证了多线程获取时不为空，但要JDK1.5以上才行。详细信息请阅读<a href=\"https://www.lixueduan.com/posts/e7cef119.html\">volatile关键字在单例模式(双重校验锁)中的作用</a></p>\n<h4 id=\"5-枚举\"><a href=\"#5-枚举\" class=\"headerlink\" title=\"5. 枚举\"></a>5. 枚举</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 枚举式</span></span><br><span class=\"line\"><span class=\"comment\"> * 序列化及反序列化安全</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> FiveSingleton &#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义一个枚举的元素，它就是 singleton 的一个实例</span></span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomeThing</span><span class=\"params\">(FiveSingleton instance)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"枚举方式实现单例\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSingleton singleton = Singleton.INSTANCE;</span><br><span class=\"line\">\t\tsingleton.doSomeThing();<span class=\"comment\">//output:枚举方法实现单例</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方式也是《Effective Java 》以及《Java与模式》的作者推荐的方式。</p>\n<p><code>静态内部类</code>和<code>双重校验锁</code>已经这么优秀了为什么还要有第五种<code>枚举式</code>呢？</p>\n<p><strong>因为前面4种都存在一个序列化和反序列化时的安全问题。将单例对象序列化后，在反序列化时会重新创建一个单例对象，违背了单例模式的初衷</strong>。而枚举式单例则没有这个问题，具体信息查看：<a href=\"https://www.lixueduan.com\">枚举式单例模式与序列化</a></p>\n<h2 id=\"3-性能测试\"><a href=\"#3-性能测试\" class=\"headerlink\" title=\"3. 性能测试\"></a>3. 性能测试</h2><p>五种单例实现方式，在100个线程下，每个线程访问1千万次实例的用时.</p>\n<table>\n<thead>\n<tr>\n<th>Tables</th>\n<th>实现方式</th>\n<th>用时(毫秒)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>饿汉式</td>\n<td>13</td>\n</tr>\n<tr>\n<td>2</td>\n<td>懒汉式</td>\n<td>10778</td>\n</tr>\n<tr>\n<td>3</td>\n<td>双重检查</td>\n<td>15</td>\n</tr>\n<tr>\n<td>4</td>\n<td>静态内部类</td>\n<td>14</td>\n</tr>\n<tr>\n<td>5</td>\n<td>枚举</td>\n<td>12</td>\n</tr>\n</tbody>\n</table>\n<p>(*注意:由于不同电脑之间的性能差异，测试的结果可能不同)</p>\n<p>根据不同场合选择具体的实现方式，一般情况下我是使用的<strong>静态内部类</strong>或者<strong>DCL双重校验锁</strong>方式。</p>\n<h2 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h2><p><strong>为什么要使用单例模式？什么场景适合使用单例模式?单例模式有什么好处</strong></p>\n<ul>\n<li>1.单例模式能够保证一个类仅有唯一的实例，避免创建多个实例。并提供一个全局访问点，优化和共享资源访问。</li>\n<li>2.当一个对象需要频繁创建和销毁时使用单例模式能节省系统资源。</li>\n</ul>\n<p><strong>应用场景：</strong></p>\n<ul>\n<li><p>1.配置文件访问类，不用每次使用时都new一个</p>\n</li>\n<li><p>2.数据库连接池 保证项目中只有一个连接池存在。</p>\n</li>\n</ul>\n<p><strong>单例模式的缺点：</strong></p>\n<ul>\n<li>单例模式一般没有接口，扩展很困难，若要扩展只能修改代码。</li>\n</ul>\n<p><strong>单例模式在Java中的应用</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Runtime</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Runtime currentRuntime = <span class=\"keyword\">new</span> Runtime();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the runtime object associated with the current Java application.</span></span><br><span class=\"line\"><span class=\"comment\">     * Most of the methods of class &lt;code&gt;Runtime&lt;/code&gt; are instance </span></span><br><span class=\"line\"><span class=\"comment\">     * methods and must be invoked with respect to the current runtime object. </span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span>  the &lt;code&gt;Runtime&lt;/code&gt; object associated with the current</span></span><br><span class=\"line\"><span class=\"comment\">     *          Java application.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Runtime <span class=\"title\">getRuntime</span><span class=\"params\">()</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> currentRuntime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Don't let anyone else instantiate this class */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Runtime</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-参考\"><a href=\"#5-参考\" class=\"headerlink\" title=\"5. 参考\"></a>5. 参考</h2><p><code>http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html</code></p>\n<p><code>https://blog.csdn.net/qq_22706515/article/details/74202814</code></p>"},{"title":"Java设计模式(七)---代理模式","abbrlink":"ae2a93bd","date":"2018-10-19T14:00:00.000Z","_content":"\n本文主要介绍了Java23种设计模式中的代理模式，并结合实例描述了各种代理模式的具体实现和对比。包括：`JDK静态代理`，`JDK动态代理`，`cglib动态代理`.\n\n<!--more-->\n\n> **Java设计模式系列文章目录**\n>\n> [Java设计模式(一)---单例模式](https://www.lixueduan.com/posts/53093.html)\n>\n> [Java设计模式(二)---工厂模式](https://www.lixueduan.com/posts/34710.html)\n>\n> [Java设计模式(三)---建造者模式](https://www.lixueduan.com/posts/52453.html)\n>\n> [Java设计模式(四)---原型模式](https://www.lixueduan.com/posts/24b6c0e4.html)\n>\n> [Java设计模式(五)---适配器模式](https://www.lixueduan.com/posts/f444ac9.html)\n>\n> [Java设计模式(六)---装饰者模式](https://www.lixueduan.com/posts/75903408.html)\n>\n> [Java设计模式(七)---代理模式](https://www.lixueduan.com/posts/ae2a93bd.html)\n>\n> [Java设计模式(八)---外观模式](https://www.lixueduan.com/posts/22a51705.html)\n>\n> [Java设计模式(九)---享元模式](https://www.lixueduan.com/posts/34e634e7.html)\n>\n> [Java设计模式(十)---策略模式](https://www.lixueduan.com/posts/a7982bdc.html)\n>\n> [Java设计模式(十一)---模板方法模式](https://www.lixueduan.com/posts/57ae709c.html)\n>\n> [Java设计模式(十二)---观察者模式](https://www.lixueduan.com/posts/48bcf013.html)\n>\n> [Java设计模式(十三)---组合模式](https://www.lixueduan.com/posts/a340063f.html)\n>\n> ........\n>\n> Demo下载--> [Github](https://github.com/illusorycloud/design-pattern)\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 简介\n\n> **给某一对象提供一个代理对象，并由代理对象控制对原对象的引用**。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/seven-proxy.png)\n\n**代理模式的结构**\n\n有些情况下，一个客户不想或者不能够直接引用一个对象，可以通过代理对象在客户端和目标对象之间起到中介作用。代理模式中的角色有：\n\n1、**抽象对象角色**\n\n声明了目标对象和代理对象的共同接口，这样一来在任何可以使用目标对象的地方都可以使用代理对象\n\n2、**目标对象角色**\n\n定义了代理对象所代表的目标对象\n\n3、**代理对象角色**\n\n代理对象内部含有目标对象的引用，从而可以在任何时候操作目标对象；代理对象提供一个与目标对象相同的接口，以便可以在任何时候替代目标对象\n\n## 2. 静态代理\n\n```\n由程序员创建或特定工具自动生成源代码，也就是在编译时就已经将接口，被代理类，代理类等确定下来。在程序运行之前，代理类的.class文件就已经生成。\n\n代理类和被代理类必须实现同一个接口\n```\n\n```java\n/**\n * 抽象对象角色\n *\n * @author illusoryCloud\n */\npublic interface Human {\n    void work();\n}\n\n/**\n * 目标对象角色\n *\n * @author illusoryCloud\n */\npublic class Singer implements Human {\n    @Override\n    public void work() {\n        System.out.println(\"歌手在唱歌~\");\n    }\n}\n\n/**\n * 代理对象角色\n *\n * @author illusoryCloud\n */\npublic class ProxyMan implements Human {\n    /**\n     * 持有目标对象的引用\n     */\n    private Human human;\n\n    /**\n     * 通过构造方法注入\n     *\n     * @param human 目标对象\n     */\n    public ProxyMan(Human human) {\n        this.human = human;\n    }\n\n    @Override\n    public void work() {\n        System.out.println(\"经纪人为歌手安排好时间~\");\n        human.work();\n        System.out.println(\"经纪人为歌手联系下一场演出~\");\n    }\n}\n\n      /**\n * 静态代理模式 测试类\n *\n * @author illusoryCloud\n */\npublic class StaticProxyTest {\n    @Test\n    public void staticProxyTest() {\n        Human singer = new ProxyMan(new Singer());\n        singer.work();\n    }\n}\n   //输出结果\n经纪人为歌手安排好时间~\n歌手在唱歌~\n经纪人为歌手联系下一场演出~\n```\n\n## 3. JDK动态代理\n\n>  代理类在程序运行时创建的代理方式被成为动态代理。\n\n### 1. 具体实现\n\n```java\n/**\n * 回调方法\n *\n * @author illusoryCloud\n */\npublic class MyInvocationHandler implements InvocationHandler {\n    public static final String PROXY_METHOD = \"work\";\n    /**\n     * 持有一个被代理对象的引用\n     */\n    private Human human;\n\n    public MyInvocationHandler(Human human) {\n        this.human = human;\n    }\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        // 判断是否是需要代理的方法\n        if (PROXY_METHOD.equals(method.getName())) {\n            System.out.println(\"经纪人为歌手安排好时间~\");\n            Object invoke = method.invoke(human, args);\n            System.out.println(\"经纪人为歌手联系下一场演出~\");\n            return invoke;\n        } else {\n            return null;\n        }\n    }\n}\n/**\n * JDK动态代理 测试类\n *\n * @author illusoryCloud\n */\npublic class JDKProxyTest {\n    @Test\n    public void JDKProxyTest() {\n        Singer singer = new Singer();\n        //参数1：类加载器 参数2：被代理类实现的接口 参数3：回调 由自己实现\n        Human human = (Human) Proxy.newProxyInstance(singer.getClass().getClassLoader()\n                , singer.getClass().getInterfaces()\n                , new MyInvocationHandler(singer));\n        human.work();\n    }\n}\n\n```\n\n### 2. InvocationHandler\n\n`InvocationHandler`是一个接口，官方文档解释说，每个代理的实例都有一个与之关联的 `InvocationHandler `实现类，如果代理的方法被调用，那么代理便会通知和转发给内部的 `InvocationHandler` 实现类，由它决定处理。\n\n```java\npublic interface InvocationHandler {\n    public Object invoke(Object proxy, Method method, Object[] args)\n        throws Throwable;\n}\n```\n\n接口内部只是一个 `invoke()` 方法，正是这个方法决定了怎么样处理代理传递过来的方法调用。对代理对象的增强就在这里进行。实现该接口 重写此方法 可以用匿名内部类或者直接用生成代理的那个类实现该接口。\n\n**方法参数**\n\n* 1.proxy 代理对象\n\n* 2.method 代理对象调用的方法\n\n* 3.args 调用的方法中的参数\n\n**因为`Proxy `动态产生的代理会调用` InvocationHandler`实现类，所以` InvocationHandler`是实际执行者**。\n\n ### 3. 生成代理对象\n `   Proxy.newProxyInstance(classLoader, interfaces, dynamicInvocationHandler);`\n\n**方法参数**\n\n* 1.classLoader 类加载器,**告诉虚拟机用哪个字节码加载器加载内存中创建出来的字节码文件** 一般是application类加载器.(增强哪个对象就写哪个类的类加载器)\n* 2.interfaces  字节码数组 **告诉虚拟机内存中正在你被创建的字节码文件中应该有哪些方法**(被代理类实现的所有接口的字节码数组 )\n* 3.一个InvocationHandler对象,表示的是当我这个动态代理对象在调用方法的时候，会关联到哪一个InvocationHandler对象上,**告诉虚拟机字节码上的那些方法如何处理 （用户自定义增强操作等 写在实现InvocationHandler接口的那个类中**.\n\n**小结：** \n\n* 1.通过 `Proxy.newProxyInstance(classLoader, interfaces, dynamicInvocationHandler);`生成代理对象\n* 2.创建`InvocationHandler`接口实现类 重写invoke方法 实现具体的方法增强\n* 3.调用对象的方法最后都是调用InvocationHandler接口的invoke方法\n* 4.只能增强接口中有的方法\n\n## 4. CGLIB动态代理\n\nJDK代理要求被代理的类必须实现接口，有很强的局限性。\n\n而CGLIB动态代理则没有此类强制性要求。简单的说，**CGLIB会让生成的代理类继承被代理类，并在代理类中对代理方法进行强化处理(前置处理、后置处理等)**。在CGLIB底层，其实是借助了ASM这个非常强大的Java字节码生成框架。\n\n**cglib原理**\n\n**通过字节码技术为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑。由于是通过子类来代理父类，因此不能代理被final字段修饰的方法。**\n\n>  需要引入两个jar包\n>\n> cglib-3.2.10.jar  //cglib包\n>\n> asm-7.0.jar    //底层用到的asm包\n\n```java\n/**\n * 被代理类 没有实现接口 无法使用JDK动态代理\n *\n * @author illusoryCloud\n */\npublic class Dancer {\n    public void dance() {\n        System.out.println(\"跳舞者翩翩起舞~\");\n    }\n}\n/**\n * @author illusoryCloud\n */\npublic class MyMethodInterceptor implements MethodInterceptor {\n    public static final String PROXY_METHOD = \"work\";\n\n    /**\n     * @param o           cglib生成的代理对象\n     * @param method      目标对象的方法\n     * @param objects     方法入参\n     * @param methodProxy 代理方法\n     * @return 返回值\n     * @throws Throwable 异常\n     */\n    @Override\n    public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {\n        System.out.println(\"经纪人为舞蹈演员安排好时间~\");\n        //注意 这里是invokeSuper  若是invoke则会循环调用最终堆栈溢出\n        Object o1 = methodProxy.invokeSuper(o, objects);\n        System.out.println(\"经纪人为舞蹈演员联系下一场演出~\");\n        return o1;\n\n    }\n}\n/**\n * CGLib动态代理 测试类\n *\n * @author illusoryCloud\n */\npublic class CglibProxyTest {\n    @Test\n    public void cglibProxyTest(){\n        Enhancer enhancer=new Enhancer();\n        //设置父类 即被代理类 cglib是通过生成子类的方式来代理的\n        enhancer.setSuperclass(Dancer.class);\n        //设置回调\n        enhancer.setCallback(new MyMethodInterceptor());\n        Dancer dancer= (Dancer) enhancer.create();\n        dancer.dance();\n    }\n}\n```\n\n## 5. 代理模式比较\n\n| 代理方式      | 实现                                                         | 优点                                                         | 缺点                                                         | 特点                                                       |\n| ------------- | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ | ---------------------------------------------------------- |\n| JDK静态代理   | 代理类与委托类实现同一接口，并且在代理类中需要硬编码接口     | 实现简单，容易理解                                           | 代理类需要硬编码接口，在实际应用中可能会导致重复编码，浪费存储空间并且效率很低 | 好像没啥特点                                               |\n| JDK动态代理   | 代理类与委托类实现同一接口，主要是通过代理类实现InvocationHandler并重写invoke方法来进行动态代理的，在invoke方法中将对方法进行增强处理 | 不需要硬编码接口，代码复用率高                               | 只能够代理实现了接口的委托类                                 | 底层使用反射机制进行方法的调用                             |\n| CGLIB动态代理 | 代理类将委托类作为自己的父类并为其中的非final委托方法创建两个方法，一个是与委托方法签名相同的方法，它在方法中会通过super调用委托方法；另一个是代理类独有的方法。在代理方法中，它会判断是否存在实现了MethodInterceptor接口的对象，若存在则将调用intercept方法对委托方法进行代理 | 可以在运行时对类或者是接口进行增强操作，且委托类无需实现接口 | 不能对final类以及final方法进行代理                           | 底层将方法全部存入一个数组中，通过数组索引直接进行方法调用 |\n\n\n\n## 6. 参考\n\n`https://www.cnblogs.com/xrq730/p/4907999.html`","source":"_posts/design_pattern/seven-proxy.md","raw":"---\ntitle: Java设计模式(七)---代理模式\ntags:\n  - 设计模式\ncategories:\n  - 设计模式\nabbrlink: ae2a93bd\ndate: 2018-10-19 22:00:00\n---\n\n本文主要介绍了Java23种设计模式中的代理模式，并结合实例描述了各种代理模式的具体实现和对比。包括：`JDK静态代理`，`JDK动态代理`，`cglib动态代理`.\n\n<!--more-->\n\n> **Java设计模式系列文章目录**\n>\n> [Java设计模式(一)---单例模式](https://www.lixueduan.com/posts/53093.html)\n>\n> [Java设计模式(二)---工厂模式](https://www.lixueduan.com/posts/34710.html)\n>\n> [Java设计模式(三)---建造者模式](https://www.lixueduan.com/posts/52453.html)\n>\n> [Java设计模式(四)---原型模式](https://www.lixueduan.com/posts/24b6c0e4.html)\n>\n> [Java设计模式(五)---适配器模式](https://www.lixueduan.com/posts/f444ac9.html)\n>\n> [Java设计模式(六)---装饰者模式](https://www.lixueduan.com/posts/75903408.html)\n>\n> [Java设计模式(七)---代理模式](https://www.lixueduan.com/posts/ae2a93bd.html)\n>\n> [Java设计模式(八)---外观模式](https://www.lixueduan.com/posts/22a51705.html)\n>\n> [Java设计模式(九)---享元模式](https://www.lixueduan.com/posts/34e634e7.html)\n>\n> [Java设计模式(十)---策略模式](https://www.lixueduan.com/posts/a7982bdc.html)\n>\n> [Java设计模式(十一)---模板方法模式](https://www.lixueduan.com/posts/57ae709c.html)\n>\n> [Java设计模式(十二)---观察者模式](https://www.lixueduan.com/posts/48bcf013.html)\n>\n> [Java设计模式(十三)---组合模式](https://www.lixueduan.com/posts/a340063f.html)\n>\n> ........\n>\n> Demo下载--> [Github](https://github.com/illusorycloud/design-pattern)\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 简介\n\n> **给某一对象提供一个代理对象，并由代理对象控制对原对象的引用**。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/seven-proxy.png)\n\n**代理模式的结构**\n\n有些情况下，一个客户不想或者不能够直接引用一个对象，可以通过代理对象在客户端和目标对象之间起到中介作用。代理模式中的角色有：\n\n1、**抽象对象角色**\n\n声明了目标对象和代理对象的共同接口，这样一来在任何可以使用目标对象的地方都可以使用代理对象\n\n2、**目标对象角色**\n\n定义了代理对象所代表的目标对象\n\n3、**代理对象角色**\n\n代理对象内部含有目标对象的引用，从而可以在任何时候操作目标对象；代理对象提供一个与目标对象相同的接口，以便可以在任何时候替代目标对象\n\n## 2. 静态代理\n\n```\n由程序员创建或特定工具自动生成源代码，也就是在编译时就已经将接口，被代理类，代理类等确定下来。在程序运行之前，代理类的.class文件就已经生成。\n\n代理类和被代理类必须实现同一个接口\n```\n\n```java\n/**\n * 抽象对象角色\n *\n * @author illusoryCloud\n */\npublic interface Human {\n    void work();\n}\n\n/**\n * 目标对象角色\n *\n * @author illusoryCloud\n */\npublic class Singer implements Human {\n    @Override\n    public void work() {\n        System.out.println(\"歌手在唱歌~\");\n    }\n}\n\n/**\n * 代理对象角色\n *\n * @author illusoryCloud\n */\npublic class ProxyMan implements Human {\n    /**\n     * 持有目标对象的引用\n     */\n    private Human human;\n\n    /**\n     * 通过构造方法注入\n     *\n     * @param human 目标对象\n     */\n    public ProxyMan(Human human) {\n        this.human = human;\n    }\n\n    @Override\n    public void work() {\n        System.out.println(\"经纪人为歌手安排好时间~\");\n        human.work();\n        System.out.println(\"经纪人为歌手联系下一场演出~\");\n    }\n}\n\n      /**\n * 静态代理模式 测试类\n *\n * @author illusoryCloud\n */\npublic class StaticProxyTest {\n    @Test\n    public void staticProxyTest() {\n        Human singer = new ProxyMan(new Singer());\n        singer.work();\n    }\n}\n   //输出结果\n经纪人为歌手安排好时间~\n歌手在唱歌~\n经纪人为歌手联系下一场演出~\n```\n\n## 3. JDK动态代理\n\n>  代理类在程序运行时创建的代理方式被成为动态代理。\n\n### 1. 具体实现\n\n```java\n/**\n * 回调方法\n *\n * @author illusoryCloud\n */\npublic class MyInvocationHandler implements InvocationHandler {\n    public static final String PROXY_METHOD = \"work\";\n    /**\n     * 持有一个被代理对象的引用\n     */\n    private Human human;\n\n    public MyInvocationHandler(Human human) {\n        this.human = human;\n    }\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        // 判断是否是需要代理的方法\n        if (PROXY_METHOD.equals(method.getName())) {\n            System.out.println(\"经纪人为歌手安排好时间~\");\n            Object invoke = method.invoke(human, args);\n            System.out.println(\"经纪人为歌手联系下一场演出~\");\n            return invoke;\n        } else {\n            return null;\n        }\n    }\n}\n/**\n * JDK动态代理 测试类\n *\n * @author illusoryCloud\n */\npublic class JDKProxyTest {\n    @Test\n    public void JDKProxyTest() {\n        Singer singer = new Singer();\n        //参数1：类加载器 参数2：被代理类实现的接口 参数3：回调 由自己实现\n        Human human = (Human) Proxy.newProxyInstance(singer.getClass().getClassLoader()\n                , singer.getClass().getInterfaces()\n                , new MyInvocationHandler(singer));\n        human.work();\n    }\n}\n\n```\n\n### 2. InvocationHandler\n\n`InvocationHandler`是一个接口，官方文档解释说，每个代理的实例都有一个与之关联的 `InvocationHandler `实现类，如果代理的方法被调用，那么代理便会通知和转发给内部的 `InvocationHandler` 实现类，由它决定处理。\n\n```java\npublic interface InvocationHandler {\n    public Object invoke(Object proxy, Method method, Object[] args)\n        throws Throwable;\n}\n```\n\n接口内部只是一个 `invoke()` 方法，正是这个方法决定了怎么样处理代理传递过来的方法调用。对代理对象的增强就在这里进行。实现该接口 重写此方法 可以用匿名内部类或者直接用生成代理的那个类实现该接口。\n\n**方法参数**\n\n* 1.proxy 代理对象\n\n* 2.method 代理对象调用的方法\n\n* 3.args 调用的方法中的参数\n\n**因为`Proxy `动态产生的代理会调用` InvocationHandler`实现类，所以` InvocationHandler`是实际执行者**。\n\n ### 3. 生成代理对象\n `   Proxy.newProxyInstance(classLoader, interfaces, dynamicInvocationHandler);`\n\n**方法参数**\n\n* 1.classLoader 类加载器,**告诉虚拟机用哪个字节码加载器加载内存中创建出来的字节码文件** 一般是application类加载器.(增强哪个对象就写哪个类的类加载器)\n* 2.interfaces  字节码数组 **告诉虚拟机内存中正在你被创建的字节码文件中应该有哪些方法**(被代理类实现的所有接口的字节码数组 )\n* 3.一个InvocationHandler对象,表示的是当我这个动态代理对象在调用方法的时候，会关联到哪一个InvocationHandler对象上,**告诉虚拟机字节码上的那些方法如何处理 （用户自定义增强操作等 写在实现InvocationHandler接口的那个类中**.\n\n**小结：** \n\n* 1.通过 `Proxy.newProxyInstance(classLoader, interfaces, dynamicInvocationHandler);`生成代理对象\n* 2.创建`InvocationHandler`接口实现类 重写invoke方法 实现具体的方法增强\n* 3.调用对象的方法最后都是调用InvocationHandler接口的invoke方法\n* 4.只能增强接口中有的方法\n\n## 4. CGLIB动态代理\n\nJDK代理要求被代理的类必须实现接口，有很强的局限性。\n\n而CGLIB动态代理则没有此类强制性要求。简单的说，**CGLIB会让生成的代理类继承被代理类，并在代理类中对代理方法进行强化处理(前置处理、后置处理等)**。在CGLIB底层，其实是借助了ASM这个非常强大的Java字节码生成框架。\n\n**cglib原理**\n\n**通过字节码技术为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑。由于是通过子类来代理父类，因此不能代理被final字段修饰的方法。**\n\n>  需要引入两个jar包\n>\n> cglib-3.2.10.jar  //cglib包\n>\n> asm-7.0.jar    //底层用到的asm包\n\n```java\n/**\n * 被代理类 没有实现接口 无法使用JDK动态代理\n *\n * @author illusoryCloud\n */\npublic class Dancer {\n    public void dance() {\n        System.out.println(\"跳舞者翩翩起舞~\");\n    }\n}\n/**\n * @author illusoryCloud\n */\npublic class MyMethodInterceptor implements MethodInterceptor {\n    public static final String PROXY_METHOD = \"work\";\n\n    /**\n     * @param o           cglib生成的代理对象\n     * @param method      目标对象的方法\n     * @param objects     方法入参\n     * @param methodProxy 代理方法\n     * @return 返回值\n     * @throws Throwable 异常\n     */\n    @Override\n    public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {\n        System.out.println(\"经纪人为舞蹈演员安排好时间~\");\n        //注意 这里是invokeSuper  若是invoke则会循环调用最终堆栈溢出\n        Object o1 = methodProxy.invokeSuper(o, objects);\n        System.out.println(\"经纪人为舞蹈演员联系下一场演出~\");\n        return o1;\n\n    }\n}\n/**\n * CGLib动态代理 测试类\n *\n * @author illusoryCloud\n */\npublic class CglibProxyTest {\n    @Test\n    public void cglibProxyTest(){\n        Enhancer enhancer=new Enhancer();\n        //设置父类 即被代理类 cglib是通过生成子类的方式来代理的\n        enhancer.setSuperclass(Dancer.class);\n        //设置回调\n        enhancer.setCallback(new MyMethodInterceptor());\n        Dancer dancer= (Dancer) enhancer.create();\n        dancer.dance();\n    }\n}\n```\n\n## 5. 代理模式比较\n\n| 代理方式      | 实现                                                         | 优点                                                         | 缺点                                                         | 特点                                                       |\n| ------------- | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ | ---------------------------------------------------------- |\n| JDK静态代理   | 代理类与委托类实现同一接口，并且在代理类中需要硬编码接口     | 实现简单，容易理解                                           | 代理类需要硬编码接口，在实际应用中可能会导致重复编码，浪费存储空间并且效率很低 | 好像没啥特点                                               |\n| JDK动态代理   | 代理类与委托类实现同一接口，主要是通过代理类实现InvocationHandler并重写invoke方法来进行动态代理的，在invoke方法中将对方法进行增强处理 | 不需要硬编码接口，代码复用率高                               | 只能够代理实现了接口的委托类                                 | 底层使用反射机制进行方法的调用                             |\n| CGLIB动态代理 | 代理类将委托类作为自己的父类并为其中的非final委托方法创建两个方法，一个是与委托方法签名相同的方法，它在方法中会通过super调用委托方法；另一个是代理类独有的方法。在代理方法中，它会判断是否存在实现了MethodInterceptor接口的对象，若存在则将调用intercept方法对委托方法进行代理 | 可以在运行时对类或者是接口进行增强操作，且委托类无需实现接口 | 不能对final类以及final方法进行代理                           | 底层将方法全部存入一个数组中，通过数组索引直接进行方法调用 |\n\n\n\n## 6. 参考\n\n`https://www.cnblogs.com/xrq730/p/4907999.html`","slug":"design_pattern/seven-proxy","published":1,"updated":"2019-03-04T15:34:56.557Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv4aq00420ww4kuaxlj1x","content":"<p>本文主要介绍了Java23种设计模式中的代理模式，并结合实例描述了各种代理模式的具体实现和对比。包括：<code>JDK静态代理</code>，<code>JDK动态代理</code>，<code>cglib动态代理</code>.</p>\n<a id=\"more\"></a>\n<blockquote>\n<p><strong>Java设计模式系列文章目录</strong></p>\n<p><a href=\"https://www.lixueduan.com/posts/53093.html\">Java设计模式(一)—单例模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34710.html\">Java设计模式(二)—工厂模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/52453.html\">Java设计模式(三)—建造者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/24b6c0e4.html\">Java设计模式(四)—原型模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/f444ac9.html\">Java设计模式(五)—适配器模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/75903408.html\">Java设计模式(六)—装饰者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/ae2a93bd.html\">Java设计模式(七)—代理模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/22a51705.html\">Java设计模式(八)—外观模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34e634e7.html\">Java设计模式(九)—享元模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a7982bdc.html\">Java设计模式(十)—策略模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/57ae709c.html\">Java设计模式(十一)—模板方法模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/48bcf013.html\">Java设计模式(十二)—观察者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a340063f.html\">Java设计模式(十三)—组合模式</a></p>\n<p>……..</p>\n<p>Demo下载–&gt; <a href=\"https://github.com/illusorycloud/design-pattern\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><blockquote>\n<p><strong>给某一对象提供一个代理对象，并由代理对象控制对原对象的引用</strong>。</p>\n</blockquote>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/seven-proxy.png\" alt=\"\"></p>\n<p><strong>代理模式的结构</strong></p>\n<p>有些情况下，一个客户不想或者不能够直接引用一个对象，可以通过代理对象在客户端和目标对象之间起到中介作用。代理模式中的角色有：</p>\n<p>1、<strong>抽象对象角色</strong></p>\n<p>声明了目标对象和代理对象的共同接口，这样一来在任何可以使用目标对象的地方都可以使用代理对象</p>\n<p>2、<strong>目标对象角色</strong></p>\n<p>定义了代理对象所代表的目标对象</p>\n<p>3、<strong>代理对象角色</strong></p>\n<p>代理对象内部含有目标对象的引用，从而可以在任何时候操作目标对象；代理对象提供一个与目标对象相同的接口，以便可以在任何时候替代目标对象</p>\n<h2 id=\"2-静态代理\"><a href=\"#2-静态代理\" class=\"headerlink\" title=\"2. 静态代理\"></a>2. 静态代理</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">由程序员创建或特定工具自动生成源代码，也就是在编译时就已经将接口，被代理类，代理类等确定下来。在程序运行之前，代理类的.class文件就已经生成。</span><br><span class=\"line\"></span><br><span class=\"line\">代理类和被代理类必须实现同一个接口</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象对象角色</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Human</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 目标对象角色</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Human</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"歌手在唱歌~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 代理对象角色</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyMan</span> <span class=\"keyword\">implements</span> <span class=\"title\">Human</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 持有目标对象的引用</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Human human;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过构造方法注入</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> human 目标对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProxyMan</span><span class=\"params\">(Human human)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.human = human;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"经纪人为歌手安排好时间~\"</span>);</span><br><span class=\"line\">        human.work();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"经纪人为歌手联系下一场演出~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 静态代理模式 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticProxyTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">staticProxyTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Human singer = <span class=\"keyword\">new</span> ProxyMan(<span class=\"keyword\">new</span> Singer());</span><br><span class=\"line\">        singer.work();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">   <span class=\"comment\">//输出结果</span></span><br><span class=\"line\">经纪人为歌手安排好时间~</span><br><span class=\"line\">歌手在唱歌~</span><br><span class=\"line\">经纪人为歌手联系下一场演出~</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-JDK动态代理\"><a href=\"#3-JDK动态代理\" class=\"headerlink\" title=\"3. JDK动态代理\"></a>3. JDK动态代理</h2><blockquote>\n<p> 代理类在程序运行时创建的代理方式被成为动态代理。</p>\n</blockquote>\n<h3 id=\"1-具体实现\"><a href=\"#1-具体实现\" class=\"headerlink\" title=\"1. 具体实现\"></a>1. 具体实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 回调方法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyInvocationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String PROXY_METHOD = <span class=\"string\">\"work\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 持有一个被代理对象的引用</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Human human;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyInvocationHandler</span><span class=\"params\">(Human human)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.human = human;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否是需要代理的方法</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (PROXY_METHOD.equals(method.getName())) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"经纪人为歌手安排好时间~\"</span>);</span><br><span class=\"line\">            Object invoke = method.invoke(human, args);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"经纪人为歌手联系下一场演出~\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> invoke;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * JDK动态代理 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JDKProxyTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">JDKProxyTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Singer singer = <span class=\"keyword\">new</span> Singer();</span><br><span class=\"line\">        <span class=\"comment\">//参数1：类加载器 参数2：被代理类实现的接口 参数3：回调 由自己实现</span></span><br><span class=\"line\">        Human human = (Human) Proxy.newProxyInstance(singer.getClass().getClassLoader()</span><br><span class=\"line\">                , singer.getClass().getInterfaces()</span><br><span class=\"line\">                , <span class=\"keyword\">new</span> MyInvocationHandler(singer));</span><br><span class=\"line\">        human.work();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-InvocationHandler\"><a href=\"#2-InvocationHandler\" class=\"headerlink\" title=\"2. InvocationHandler\"></a>2. InvocationHandler</h3><p><code>InvocationHandler</code>是一个接口，官方文档解释说，每个代理的实例都有一个与之关联的 <code>InvocationHandler</code>实现类，如果代理的方法被调用，那么代理便会通知和转发给内部的 <code>InvocationHandler</code> 实现类，由它决定处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> Throwable</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接口内部只是一个 <code>invoke()</code> 方法，正是这个方法决定了怎么样处理代理传递过来的方法调用。对代理对象的增强就在这里进行。实现该接口 重写此方法 可以用匿名内部类或者直接用生成代理的那个类实现该接口。</p>\n<p><strong>方法参数</strong></p>\n<ul>\n<li><p>1.proxy 代理对象</p>\n</li>\n<li><p>2.method 代理对象调用的方法</p>\n</li>\n<li><p>3.args 调用的方法中的参数</p>\n</li>\n</ul>\n<p><strong>因为<code>Proxy</code>动态产生的代理会调用<code>InvocationHandler</code>实现类，所以<code>InvocationHandler</code>是实际执行者</strong>。</p>\n<h3 id=\"3-生成代理对象\"><a href=\"#3-生成代理对象\" class=\"headerlink\" title=\"3. 生成代理对象\"></a>3. 生成代理对象</h3><p> <code>Proxy.newProxyInstance(classLoader, interfaces, dynamicInvocationHandler);</code></p>\n<p><strong>方法参数</strong></p>\n<ul>\n<li>1.classLoader 类加载器,<strong>告诉虚拟机用哪个字节码加载器加载内存中创建出来的字节码文件</strong> 一般是application类加载器.(增强哪个对象就写哪个类的类加载器)</li>\n<li>2.interfaces  字节码数组 <strong>告诉虚拟机内存中正在你被创建的字节码文件中应该有哪些方法</strong>(被代理类实现的所有接口的字节码数组 )</li>\n<li>3.一个InvocationHandler对象,表示的是当我这个动态代理对象在调用方法的时候，会关联到哪一个InvocationHandler对象上,<strong>告诉虚拟机字节码上的那些方法如何处理 （用户自定义增强操作等 写在实现InvocationHandler接口的那个类中</strong>.</li>\n</ul>\n<p><strong>小结：</strong> </p>\n<ul>\n<li>1.通过 <code>Proxy.newProxyInstance(classLoader, interfaces, dynamicInvocationHandler);</code>生成代理对象</li>\n<li>2.创建<code>InvocationHandler</code>接口实现类 重写invoke方法 实现具体的方法增强</li>\n<li>3.调用对象的方法最后都是调用InvocationHandler接口的invoke方法</li>\n<li>4.只能增强接口中有的方法</li>\n</ul>\n<h2 id=\"4-CGLIB动态代理\"><a href=\"#4-CGLIB动态代理\" class=\"headerlink\" title=\"4. CGLIB动态代理\"></a>4. CGLIB动态代理</h2><p>JDK代理要求被代理的类必须实现接口，有很强的局限性。</p>\n<p>而CGLIB动态代理则没有此类强制性要求。简单的说，<strong>CGLIB会让生成的代理类继承被代理类，并在代理类中对代理方法进行强化处理(前置处理、后置处理等)</strong>。在CGLIB底层，其实是借助了ASM这个非常强大的Java字节码生成框架。</p>\n<p><strong>cglib原理</strong></p>\n<p><strong>通过字节码技术为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑。由于是通过子类来代理父类，因此不能代理被final字段修饰的方法。</strong></p>\n<blockquote>\n<p> 需要引入两个jar包</p>\n<p>cglib-3.2.10.jar  //cglib包</p>\n<p>asm-7.0.jar    //底层用到的asm包</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 被代理类 没有实现接口 无法使用JDK动态代理</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dancer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"跳舞者翩翩起舞~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyMethodInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">MethodInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String PROXY_METHOD = <span class=\"string\">\"work\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> o           cglib生成的代理对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> method      目标对象的方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> objects     方法入参</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> methodProxy 代理方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 返回值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Throwable 异常</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"经纪人为舞蹈演员安排好时间~\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//注意 这里是invokeSuper  若是invoke则会循环调用最终堆栈溢出</span></span><br><span class=\"line\">        Object o1 = methodProxy.invokeSuper(o, objects);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"经纪人为舞蹈演员联系下一场演出~\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o1;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * CGLib动态代理 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CglibProxyTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">cglibProxyTest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Enhancer enhancer=<span class=\"keyword\">new</span> Enhancer();</span><br><span class=\"line\">        <span class=\"comment\">//设置父类 即被代理类 cglib是通过生成子类的方式来代理的</span></span><br><span class=\"line\">        enhancer.setSuperclass(Dancer.class);</span><br><span class=\"line\">        <span class=\"comment\">//设置回调</span></span><br><span class=\"line\">        enhancer.setCallback(<span class=\"keyword\">new</span> MyMethodInterceptor());</span><br><span class=\"line\">        Dancer dancer= (Dancer) enhancer.create();</span><br><span class=\"line\">        dancer.dance();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-代理模式比较\"><a href=\"#5-代理模式比较\" class=\"headerlink\" title=\"5. 代理模式比较\"></a>5. 代理模式比较</h2><table>\n<thead>\n<tr>\n<th>代理方式</th>\n<th>实现</th>\n<th>优点</th>\n<th>缺点</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>JDK静态代理</td>\n<td>代理类与委托类实现同一接口，并且在代理类中需要硬编码接口</td>\n<td>实现简单，容易理解</td>\n<td>代理类需要硬编码接口，在实际应用中可能会导致重复编码，浪费存储空间并且效率很低</td>\n<td>好像没啥特点</td>\n</tr>\n<tr>\n<td>JDK动态代理</td>\n<td>代理类与委托类实现同一接口，主要是通过代理类实现InvocationHandler并重写invoke方法来进行动态代理的，在invoke方法中将对方法进行增强处理</td>\n<td>不需要硬编码接口，代码复用率高</td>\n<td>只能够代理实现了接口的委托类</td>\n<td>底层使用反射机制进行方法的调用</td>\n</tr>\n<tr>\n<td>CGLIB动态代理</td>\n<td>代理类将委托类作为自己的父类并为其中的非final委托方法创建两个方法，一个是与委托方法签名相同的方法，它在方法中会通过super调用委托方法；另一个是代理类独有的方法。在代理方法中，它会判断是否存在实现了MethodInterceptor接口的对象，若存在则将调用intercept方法对委托方法进行代理</td>\n<td>可以在运行时对类或者是接口进行增强操作，且委托类无需实现接口</td>\n<td>不能对final类以及final方法进行代理</td>\n<td>底层将方法全部存入一个数组中，通过数组索引直接进行方法调用</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"6-参考\"><a href=\"#6-参考\" class=\"headerlink\" title=\"6. 参考\"></a>6. 参考</h2><p><code>https://www.cnblogs.com/xrq730/p/4907999.html</code></p>\n","site":{"data":{}},"excerpt":"<p>本文主要介绍了Java23种设计模式中的代理模式，并结合实例描述了各种代理模式的具体实现和对比。包括：<code>JDK静态代理</code>，<code>JDK动态代理</code>，<code>cglib动态代理</code>.</p>","more":"<blockquote>\n<p><strong>Java设计模式系列文章目录</strong></p>\n<p><a href=\"https://www.lixueduan.com/posts/53093.html\">Java设计模式(一)—单例模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34710.html\">Java设计模式(二)—工厂模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/52453.html\">Java设计模式(三)—建造者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/24b6c0e4.html\">Java设计模式(四)—原型模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/f444ac9.html\">Java设计模式(五)—适配器模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/75903408.html\">Java设计模式(六)—装饰者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/ae2a93bd.html\">Java设计模式(七)—代理模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/22a51705.html\">Java设计模式(八)—外观模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34e634e7.html\">Java设计模式(九)—享元模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a7982bdc.html\">Java设计模式(十)—策略模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/57ae709c.html\">Java设计模式(十一)—模板方法模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/48bcf013.html\">Java设计模式(十二)—观察者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a340063f.html\">Java设计模式(十三)—组合模式</a></p>\n<p>……..</p>\n<p>Demo下载–&gt; <a href=\"https://github.com/illusorycloud/design-pattern\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><blockquote>\n<p><strong>给某一对象提供一个代理对象，并由代理对象控制对原对象的引用</strong>。</p>\n</blockquote>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/seven-proxy.png\" alt=\"\"></p>\n<p><strong>代理模式的结构</strong></p>\n<p>有些情况下，一个客户不想或者不能够直接引用一个对象，可以通过代理对象在客户端和目标对象之间起到中介作用。代理模式中的角色有：</p>\n<p>1、<strong>抽象对象角色</strong></p>\n<p>声明了目标对象和代理对象的共同接口，这样一来在任何可以使用目标对象的地方都可以使用代理对象</p>\n<p>2、<strong>目标对象角色</strong></p>\n<p>定义了代理对象所代表的目标对象</p>\n<p>3、<strong>代理对象角色</strong></p>\n<p>代理对象内部含有目标对象的引用，从而可以在任何时候操作目标对象；代理对象提供一个与目标对象相同的接口，以便可以在任何时候替代目标对象</p>\n<h2 id=\"2-静态代理\"><a href=\"#2-静态代理\" class=\"headerlink\" title=\"2. 静态代理\"></a>2. 静态代理</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">由程序员创建或特定工具自动生成源代码，也就是在编译时就已经将接口，被代理类，代理类等确定下来。在程序运行之前，代理类的.class文件就已经生成。</span><br><span class=\"line\"></span><br><span class=\"line\">代理类和被代理类必须实现同一个接口</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象对象角色</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Human</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 目标对象角色</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Human</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"歌手在唱歌~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 代理对象角色</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyMan</span> <span class=\"keyword\">implements</span> <span class=\"title\">Human</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 持有目标对象的引用</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Human human;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过构造方法注入</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> human 目标对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProxyMan</span><span class=\"params\">(Human human)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.human = human;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"经纪人为歌手安排好时间~\"</span>);</span><br><span class=\"line\">        human.work();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"经纪人为歌手联系下一场演出~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 静态代理模式 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticProxyTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">staticProxyTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Human singer = <span class=\"keyword\">new</span> ProxyMan(<span class=\"keyword\">new</span> Singer());</span><br><span class=\"line\">        singer.work();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">   <span class=\"comment\">//输出结果</span></span><br><span class=\"line\">经纪人为歌手安排好时间~</span><br><span class=\"line\">歌手在唱歌~</span><br><span class=\"line\">经纪人为歌手联系下一场演出~</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-JDK动态代理\"><a href=\"#3-JDK动态代理\" class=\"headerlink\" title=\"3. JDK动态代理\"></a>3. JDK动态代理</h2><blockquote>\n<p> 代理类在程序运行时创建的代理方式被成为动态代理。</p>\n</blockquote>\n<h3 id=\"1-具体实现\"><a href=\"#1-具体实现\" class=\"headerlink\" title=\"1. 具体实现\"></a>1. 具体实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 回调方法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyInvocationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String PROXY_METHOD = <span class=\"string\">\"work\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 持有一个被代理对象的引用</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Human human;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyInvocationHandler</span><span class=\"params\">(Human human)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.human = human;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否是需要代理的方法</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (PROXY_METHOD.equals(method.getName())) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"经纪人为歌手安排好时间~\"</span>);</span><br><span class=\"line\">            Object invoke = method.invoke(human, args);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"经纪人为歌手联系下一场演出~\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> invoke;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * JDK动态代理 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JDKProxyTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">JDKProxyTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Singer singer = <span class=\"keyword\">new</span> Singer();</span><br><span class=\"line\">        <span class=\"comment\">//参数1：类加载器 参数2：被代理类实现的接口 参数3：回调 由自己实现</span></span><br><span class=\"line\">        Human human = (Human) Proxy.newProxyInstance(singer.getClass().getClassLoader()</span><br><span class=\"line\">                , singer.getClass().getInterfaces()</span><br><span class=\"line\">                , <span class=\"keyword\">new</span> MyInvocationHandler(singer));</span><br><span class=\"line\">        human.work();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-InvocationHandler\"><a href=\"#2-InvocationHandler\" class=\"headerlink\" title=\"2. InvocationHandler\"></a>2. InvocationHandler</h3><p><code>InvocationHandler</code>是一个接口，官方文档解释说，每个代理的实例都有一个与之关联的 <code>InvocationHandler</code>实现类，如果代理的方法被调用，那么代理便会通知和转发给内部的 <code>InvocationHandler</code> 实现类，由它决定处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> Throwable</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接口内部只是一个 <code>invoke()</code> 方法，正是这个方法决定了怎么样处理代理传递过来的方法调用。对代理对象的增强就在这里进行。实现该接口 重写此方法 可以用匿名内部类或者直接用生成代理的那个类实现该接口。</p>\n<p><strong>方法参数</strong></p>\n<ul>\n<li><p>1.proxy 代理对象</p>\n</li>\n<li><p>2.method 代理对象调用的方法</p>\n</li>\n<li><p>3.args 调用的方法中的参数</p>\n</li>\n</ul>\n<p><strong>因为<code>Proxy</code>动态产生的代理会调用<code>InvocationHandler</code>实现类，所以<code>InvocationHandler</code>是实际执行者</strong>。</p>\n<h3 id=\"3-生成代理对象\"><a href=\"#3-生成代理对象\" class=\"headerlink\" title=\"3. 生成代理对象\"></a>3. 生成代理对象</h3><p> <code>Proxy.newProxyInstance(classLoader, interfaces, dynamicInvocationHandler);</code></p>\n<p><strong>方法参数</strong></p>\n<ul>\n<li>1.classLoader 类加载器,<strong>告诉虚拟机用哪个字节码加载器加载内存中创建出来的字节码文件</strong> 一般是application类加载器.(增强哪个对象就写哪个类的类加载器)</li>\n<li>2.interfaces  字节码数组 <strong>告诉虚拟机内存中正在你被创建的字节码文件中应该有哪些方法</strong>(被代理类实现的所有接口的字节码数组 )</li>\n<li>3.一个InvocationHandler对象,表示的是当我这个动态代理对象在调用方法的时候，会关联到哪一个InvocationHandler对象上,<strong>告诉虚拟机字节码上的那些方法如何处理 （用户自定义增强操作等 写在实现InvocationHandler接口的那个类中</strong>.</li>\n</ul>\n<p><strong>小结：</strong> </p>\n<ul>\n<li>1.通过 <code>Proxy.newProxyInstance(classLoader, interfaces, dynamicInvocationHandler);</code>生成代理对象</li>\n<li>2.创建<code>InvocationHandler</code>接口实现类 重写invoke方法 实现具体的方法增强</li>\n<li>3.调用对象的方法最后都是调用InvocationHandler接口的invoke方法</li>\n<li>4.只能增强接口中有的方法</li>\n</ul>\n<h2 id=\"4-CGLIB动态代理\"><a href=\"#4-CGLIB动态代理\" class=\"headerlink\" title=\"4. CGLIB动态代理\"></a>4. CGLIB动态代理</h2><p>JDK代理要求被代理的类必须实现接口，有很强的局限性。</p>\n<p>而CGLIB动态代理则没有此类强制性要求。简单的说，<strong>CGLIB会让生成的代理类继承被代理类，并在代理类中对代理方法进行强化处理(前置处理、后置处理等)</strong>。在CGLIB底层，其实是借助了ASM这个非常强大的Java字节码生成框架。</p>\n<p><strong>cglib原理</strong></p>\n<p><strong>通过字节码技术为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑。由于是通过子类来代理父类，因此不能代理被final字段修饰的方法。</strong></p>\n<blockquote>\n<p> 需要引入两个jar包</p>\n<p>cglib-3.2.10.jar  //cglib包</p>\n<p>asm-7.0.jar    //底层用到的asm包</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 被代理类 没有实现接口 无法使用JDK动态代理</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dancer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"跳舞者翩翩起舞~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyMethodInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">MethodInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String PROXY_METHOD = <span class=\"string\">\"work\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> o           cglib生成的代理对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> method      目标对象的方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> objects     方法入参</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> methodProxy 代理方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 返回值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Throwable 异常</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"经纪人为舞蹈演员安排好时间~\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//注意 这里是invokeSuper  若是invoke则会循环调用最终堆栈溢出</span></span><br><span class=\"line\">        Object o1 = methodProxy.invokeSuper(o, objects);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"经纪人为舞蹈演员联系下一场演出~\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o1;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * CGLib动态代理 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CglibProxyTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">cglibProxyTest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Enhancer enhancer=<span class=\"keyword\">new</span> Enhancer();</span><br><span class=\"line\">        <span class=\"comment\">//设置父类 即被代理类 cglib是通过生成子类的方式来代理的</span></span><br><span class=\"line\">        enhancer.setSuperclass(Dancer.class);</span><br><span class=\"line\">        <span class=\"comment\">//设置回调</span></span><br><span class=\"line\">        enhancer.setCallback(<span class=\"keyword\">new</span> MyMethodInterceptor());</span><br><span class=\"line\">        Dancer dancer= (Dancer) enhancer.create();</span><br><span class=\"line\">        dancer.dance();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-代理模式比较\"><a href=\"#5-代理模式比较\" class=\"headerlink\" title=\"5. 代理模式比较\"></a>5. 代理模式比较</h2><table>\n<thead>\n<tr>\n<th>代理方式</th>\n<th>实现</th>\n<th>优点</th>\n<th>缺点</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>JDK静态代理</td>\n<td>代理类与委托类实现同一接口，并且在代理类中需要硬编码接口</td>\n<td>实现简单，容易理解</td>\n<td>代理类需要硬编码接口，在实际应用中可能会导致重复编码，浪费存储空间并且效率很低</td>\n<td>好像没啥特点</td>\n</tr>\n<tr>\n<td>JDK动态代理</td>\n<td>代理类与委托类实现同一接口，主要是通过代理类实现InvocationHandler并重写invoke方法来进行动态代理的，在invoke方法中将对方法进行增强处理</td>\n<td>不需要硬编码接口，代码复用率高</td>\n<td>只能够代理实现了接口的委托类</td>\n<td>底层使用反射机制进行方法的调用</td>\n</tr>\n<tr>\n<td>CGLIB动态代理</td>\n<td>代理类将委托类作为自己的父类并为其中的非final委托方法创建两个方法，一个是与委托方法签名相同的方法，它在方法中会通过super调用委托方法；另一个是代理类独有的方法。在代理方法中，它会判断是否存在实现了MethodInterceptor接口的对象，若存在则将调用intercept方法对委托方法进行代理</td>\n<td>可以在运行时对类或者是接口进行增强操作，且委托类无需实现接口</td>\n<td>不能对final类以及final方法进行代理</td>\n<td>底层将方法全部存入一个数组中，通过数组索引直接进行方法调用</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"6-参考\"><a href=\"#6-参考\" class=\"headerlink\" title=\"6. 参考\"></a>6. 参考</h2><p><code>https://www.cnblogs.com/xrq730/p/4907999.html</code></p>"},{"title":"Java设计模式(三)---建造者模式","abbrlink":52453,"date":"2018-10-12T14:00:00.000Z","_content":"\n本文主要介绍了Java23种设计模式中的`建造者模式`，并结合实例描述了建造者模式的具体实现和优缺点及建造者模式和工厂模式的差别分析等。\n\n<!--more-->\n\n> **Java设计模式系列文章目录**\n>\n> [Java设计模式(一)---单例模式](https://www.lixueduan.com/posts/53093.html)\n>\n> [Java设计模式(二)---工厂模式](https://www.lixueduan.com/posts/34710.html)\n>\n> [Java设计模式(三)---建造者模式](https://www.lixueduan.com/posts/52453.html)\n>\n> [Java设计模式(四)---原型模式](https://www.lixueduan.com/posts/24b6c0e4.html)\n>\n> [Java设计模式(五)---适配器模式](https://www.lixueduan.com/posts/f444ac9.html)\n>\n> [Java设计模式(六)---装饰者模式](https://www.lixueduan.com/posts/75903408.html)\n>\n> [Java设计模式(七)---代理模式](https://www.lixueduan.com/posts/ae2a93bd.html)\n>\n> [Java设计模式(八)---外观模式](https://www.lixueduan.com/posts/22a51705.html)\n>\n> [Java设计模式(九)---享元模式](https://www.lixueduan.com/posts/34e634e7.html)\n>\n> [Java设计模式(十)---策略模式](https://www.lixueduan.com/posts/a7982bdc.html)\n>\n> [Java设计模式(十一)---模板方法模式](https://www.lixueduan.com/posts/57ae709c.html)\n>\n> [Java设计模式(十二)---观察者模式](https://www.lixueduan.com/posts/48bcf013.html)\n>\n> [Java设计模式(十三)---组合模式](https://www.lixueduan.com/posts/a340063f.html)\n>\n> ........\n>\n> Demo下载--> [Github](https://github.com/illusorycloud/design-pattern)\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 简介\n\n> 建造者模式是将一个复杂的对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/three-builder.jpg)\n\n建造者模式通常包括下面几个角色：\n\n（1） `Builder`：给出一个抽象接口，以规范产品对象的各个组成成分的建造。这个接口规定要实现复杂对象的哪些部分的创建，并不涉及具体的对象部件的创建。\n\n（2） `ConcreteBuilder`：实现Builder接口，针对不同的商业逻辑，具体化复杂对象的各部分的创建。 在建造过程完成后，提供产品的实例。\n\n（3）`Director`：调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建或按某种顺序创建。\n\n（4）`Product`：要创建的复杂对象\n\n## 2. 实现\n\n### 2.1 常见写法\n\n以创建一个Person为例：\n\nProduct（要创建的对象）：\n\n```java\n\npackage builder.first;\n\nimport java.util.Date;\n\n/**\n * 构建的消息对象\n * 普通对象\n *\n * @author illusoryCloud\n */\npublic class Message {\n    /**\n     * 标题\n     */\n    private String title;\n    /**\n     * 内容\n     */\n    private String content;\n    /**\n     * 发送者\n     */\n    private String from;\n    /**\n     * 接收者\n     */\n    private String to;\n    /**\n     * 时间\n     */\n    private Date time;\n\n    public String getTitle() {\n        return title;\n    }\n\n    public void setTitle(String title) {\n        this.title = title;\n    }\n\n    public String getContent() {\n        return content;\n    }\n\n    public void setContent(String content) {\n        this.content = content;\n    }\n\n    public String getFrom() {\n        return from;\n    }\n\n    public void setFrom(String from) {\n        this.from = from;\n    }\n\n    public String getTo() {\n        return to;\n    }\n\n    public void setTo(String to) {\n        this.to = to;\n    }\n\n    public Date getTime() {\n        return time;\n    }\n\n    public void setTime(Date time) {\n        this.time = time;\n    }\n\n    @Override\n    public String toString() {\n        return \"Message{\" +\n                \"title='\" + title + '\\'' +\n                \", content='\" + content + '\\'' +\n                \", from='\" + from + '\\'' +\n                \", to='\" + to + '\\'' +\n                \", time=\" + time +\n                '}';\n    }\n}\n```\n\nBuilder（给出一个抽象接口，以规范产品对象的各个组成成分的建造 ）\n\n```java\n\n/**\n * Builder接口 建造对象的标准\n */\npublic interface Builder {\n    void setTitle();\n    void setContent();\n    void setFrom();\n    void setTo();\n    void setTime();\n    Message build();\n}\n\n```\n\nConcreteBuilder（实现Builder接口，针对不同的商业逻辑，具体化复杂对象的各部分的创建）\n\n```java\n/**\n * 具体的建造对象类 实现了Builder接口\n * 可以根据不同需求有不同的实现\n *\n * @author illusoryCloud\n */\npublic class CommonMessageBuilder implements Builder {\n    private Message message;\n\n    public CommonMessageBuilder() {\n        this.message = new Message();\n    }\n\n    @Override\n    public void setTitle() {\n        message.setTitle(\"常见的标题\");\n    }\n\n    @Override\n    public void setContent() {\n        message.setContent(\"普通的内容\");\n    }\n\n    @Override\n    public void setFrom() {\n        message.setFrom(\"未知的发送者\");\n    }\n\n    @Override\n    public void setTo() {\n        message.setTo(\"未知的接收者\");\n    }\n\n    @Override\n    public void setTime() {\n        message.setTime(new Date());\n    }\n\n    @Override\n    public Message build() {\n        return this.message;\n    }\n}\n```\n\n\n\n```java\n\n/**\n * 具体的建造对象类 实现了Builder接口\n * 可以根据不同需求有不同的实现\n *\n * @author illusoryCloud\n */\npublic class OthersMessageBuilder implements Builder {\n    private Message message;\n\n    public OthersMessageBuilder() {\n        this.message = new Message();\n    }\n\n    @Override\n    public void setTitle() {\n        message.setTitle(\"不寻常的标题\");\n    }\n\n    @Override\n    public void setContent() {\n        message.setContent(\"奇怪的内容\");\n    }\n\n    @Override\n    public void setFrom() {\n        message.setFrom(\"神秘的发送者\");\n    }\n\n    @Override\n    public void setTo() {\n        message.setTo(\"诡异的接收者\");\n    }\n\n    @Override\n    public void setTime() {\n        message.setTime(new Date());\n    }\n\n    @Override\n    public Message build() {\n        return this.message;\n    }\n}\n\n```\n\n\n\nDirector（调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建 ）\n\n```java\n/** 指导者\n *只负责保证对象各部分完整创建\n * @author illusoryCloud\n */\npublic class Dreator {\n    /**\n     *\n     * @param builder 参数是只要实现了Builder接口的类都可以\n     * @return\n     */\n    public Message createMessage(Builder builder) {\n        builder.setTitle();\n        builder.setContent();\n        builder.setFrom();\n        builder.setTo();\n        builder.setTime();\n        return builder.build();\n    }\n}\n\n```\n\n测试\n\n```java\npublic class Test {\n    @org.junit.jupiter.api.Test\n    public void testBuilder() {\n        Message commonMessage = new Dreator().createMessage(new CommonMessageBuilder());\n        Message othersMessage = new Dreator().createMessage(new OthersMessageBuilder());\n        System.out.println(commonMessage);\n        System.out.println(othersMessage);\n    }\n}\n```\n\n### 2.2 静态内部类方式\n\n静态内部类写法。\n\n```java\n\n\n/**\n * 构建的消息对象\n * 有个静态内部类\n *\n * @author illusoryCloud\n */\npublic class Message {\n    /**\n     * 标题\n     */\n    private String title;\n    /**\n     * 内容\n     */\n    private String content;\n    /**\n     * 发送者\n     */\n    private String from;\n    /**\n     * 接收者\n     */\n    private String to;\n    /**\n     * 时间\n     */\n    private Date time;\n\n\n    @Override\n    public String toString() {\n        return \"Message{\" +\n                \"title='\" + title + '\\'' +\n                \", content='\" + content + '\\'' +\n                \", from='\" + from + '\\'' +\n                \", to='\" + to + '\\'' +\n                \", time=\" + time +\n                '}';\n    }\n\n\n    public static Builder newBuilder() {\n        return new Builder();\n    }\n\n    /**\n     * 静态内部类 builder\n     */\n    public static class Builder {\n        /**\n         * 设置默认值\n         */\n        private String title = \"未命名\";\n        private String content = \"暂无内容\";\n        private String from = \"unknow\";\n        private String to = \"unknow\";\n        private Date time = new Date();\n\n        /**\n         * 设置消息标题\n         *\n         * @param title 要设置的标题\n         * @return 返回Builder对象 以达到链式调用\n         */\n        public Builder setTitle(String title) {\n            this.title = title;\n            return this;\n        }\n\n        public Builder setContent(String content) {\n            this.content = content;\n            return this;\n        }\n\n        public Builder setFrom(String from) {\n            this.from = from;\n            return this;\n        }\n\n        public Builder setTo(String to) {\n            this.to = to;\n            return this;\n        }\n\n        public Builder setTime(Date time) {\n            this.time = time;\n            return this;\n        }\n\n        public Message build() {\n            Message message = new Message();\n            message.title = title;\n            message.content = content;\n            message.from = from;\n            message.to = to;\n            message.time = time;\n            return message;\n        }\n\n    }\n}\n\n```\n\n测试类\n\n```java\n/**\n * 建造者模式 测试类\n *\n * @author illusoryCloud\n */\npublic class Test {\n    @org.junit.jupiter.api.Test\n    public void testBuilder() {\n        Message build = Message.newBuilder().setTitle(\"这是消息标题\")\n                .setContent(\"这是消息内容\")\n                .setFrom(\"这是消息发送者\")\n                .setTo(\"这是消息接收者\")\n                .setTime(new Date())\n                .Build();\n        System.out.println(build.toString());\n    }\n}\n```\n\n\n\n## 3. 总结\n\n**建造者模式优点：**\n\n1.将对象本身与对象的创建过程解耦，使得相同的创建过程可以创建不同的对象。\n\n2.可以更加精细地控制产品的创建过程\n\n3.增加新的具体建造者无须修改原有类库的代码，符合开闭原则 \n\n**与工厂模式的区别：**\n\n工厂模式注重的是整体对象的创建方法，只为了获取对象，关注整体\n\n建造者模式注重的是部件构建的过程，旨在通过一步一步地精确构造创建出一个复杂的对象，关注细节。建造者模式一般用来创建**更为复杂的对象**\n\n## 4. 参考\n\n`https://blog.csdn.net/zhuhuitao_struggle/article/details/80489572`\n\n","source":"_posts/design_pattern/three-builder.md","raw":"---\ntitle: Java设计模式(三)---建造者模式\ntags:\n  - 设计模式\ncategories:\n  - 设计模式\nabbrlink: 52453\ndate: 2018-10-12 22:00:00\n---\n\n本文主要介绍了Java23种设计模式中的`建造者模式`，并结合实例描述了建造者模式的具体实现和优缺点及建造者模式和工厂模式的差别分析等。\n\n<!--more-->\n\n> **Java设计模式系列文章目录**\n>\n> [Java设计模式(一)---单例模式](https://www.lixueduan.com/posts/53093.html)\n>\n> [Java设计模式(二)---工厂模式](https://www.lixueduan.com/posts/34710.html)\n>\n> [Java设计模式(三)---建造者模式](https://www.lixueduan.com/posts/52453.html)\n>\n> [Java设计模式(四)---原型模式](https://www.lixueduan.com/posts/24b6c0e4.html)\n>\n> [Java设计模式(五)---适配器模式](https://www.lixueduan.com/posts/f444ac9.html)\n>\n> [Java设计模式(六)---装饰者模式](https://www.lixueduan.com/posts/75903408.html)\n>\n> [Java设计模式(七)---代理模式](https://www.lixueduan.com/posts/ae2a93bd.html)\n>\n> [Java设计模式(八)---外观模式](https://www.lixueduan.com/posts/22a51705.html)\n>\n> [Java设计模式(九)---享元模式](https://www.lixueduan.com/posts/34e634e7.html)\n>\n> [Java设计模式(十)---策略模式](https://www.lixueduan.com/posts/a7982bdc.html)\n>\n> [Java设计模式(十一)---模板方法模式](https://www.lixueduan.com/posts/57ae709c.html)\n>\n> [Java设计模式(十二)---观察者模式](https://www.lixueduan.com/posts/48bcf013.html)\n>\n> [Java设计模式(十三)---组合模式](https://www.lixueduan.com/posts/a340063f.html)\n>\n> ........\n>\n> Demo下载--> [Github](https://github.com/illusorycloud/design-pattern)\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 简介\n\n> 建造者模式是将一个复杂的对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/three-builder.jpg)\n\n建造者模式通常包括下面几个角色：\n\n（1） `Builder`：给出一个抽象接口，以规范产品对象的各个组成成分的建造。这个接口规定要实现复杂对象的哪些部分的创建，并不涉及具体的对象部件的创建。\n\n（2） `ConcreteBuilder`：实现Builder接口，针对不同的商业逻辑，具体化复杂对象的各部分的创建。 在建造过程完成后，提供产品的实例。\n\n（3）`Director`：调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建或按某种顺序创建。\n\n（4）`Product`：要创建的复杂对象\n\n## 2. 实现\n\n### 2.1 常见写法\n\n以创建一个Person为例：\n\nProduct（要创建的对象）：\n\n```java\n\npackage builder.first;\n\nimport java.util.Date;\n\n/**\n * 构建的消息对象\n * 普通对象\n *\n * @author illusoryCloud\n */\npublic class Message {\n    /**\n     * 标题\n     */\n    private String title;\n    /**\n     * 内容\n     */\n    private String content;\n    /**\n     * 发送者\n     */\n    private String from;\n    /**\n     * 接收者\n     */\n    private String to;\n    /**\n     * 时间\n     */\n    private Date time;\n\n    public String getTitle() {\n        return title;\n    }\n\n    public void setTitle(String title) {\n        this.title = title;\n    }\n\n    public String getContent() {\n        return content;\n    }\n\n    public void setContent(String content) {\n        this.content = content;\n    }\n\n    public String getFrom() {\n        return from;\n    }\n\n    public void setFrom(String from) {\n        this.from = from;\n    }\n\n    public String getTo() {\n        return to;\n    }\n\n    public void setTo(String to) {\n        this.to = to;\n    }\n\n    public Date getTime() {\n        return time;\n    }\n\n    public void setTime(Date time) {\n        this.time = time;\n    }\n\n    @Override\n    public String toString() {\n        return \"Message{\" +\n                \"title='\" + title + '\\'' +\n                \", content='\" + content + '\\'' +\n                \", from='\" + from + '\\'' +\n                \", to='\" + to + '\\'' +\n                \", time=\" + time +\n                '}';\n    }\n}\n```\n\nBuilder（给出一个抽象接口，以规范产品对象的各个组成成分的建造 ）\n\n```java\n\n/**\n * Builder接口 建造对象的标准\n */\npublic interface Builder {\n    void setTitle();\n    void setContent();\n    void setFrom();\n    void setTo();\n    void setTime();\n    Message build();\n}\n\n```\n\nConcreteBuilder（实现Builder接口，针对不同的商业逻辑，具体化复杂对象的各部分的创建）\n\n```java\n/**\n * 具体的建造对象类 实现了Builder接口\n * 可以根据不同需求有不同的实现\n *\n * @author illusoryCloud\n */\npublic class CommonMessageBuilder implements Builder {\n    private Message message;\n\n    public CommonMessageBuilder() {\n        this.message = new Message();\n    }\n\n    @Override\n    public void setTitle() {\n        message.setTitle(\"常见的标题\");\n    }\n\n    @Override\n    public void setContent() {\n        message.setContent(\"普通的内容\");\n    }\n\n    @Override\n    public void setFrom() {\n        message.setFrom(\"未知的发送者\");\n    }\n\n    @Override\n    public void setTo() {\n        message.setTo(\"未知的接收者\");\n    }\n\n    @Override\n    public void setTime() {\n        message.setTime(new Date());\n    }\n\n    @Override\n    public Message build() {\n        return this.message;\n    }\n}\n```\n\n\n\n```java\n\n/**\n * 具体的建造对象类 实现了Builder接口\n * 可以根据不同需求有不同的实现\n *\n * @author illusoryCloud\n */\npublic class OthersMessageBuilder implements Builder {\n    private Message message;\n\n    public OthersMessageBuilder() {\n        this.message = new Message();\n    }\n\n    @Override\n    public void setTitle() {\n        message.setTitle(\"不寻常的标题\");\n    }\n\n    @Override\n    public void setContent() {\n        message.setContent(\"奇怪的内容\");\n    }\n\n    @Override\n    public void setFrom() {\n        message.setFrom(\"神秘的发送者\");\n    }\n\n    @Override\n    public void setTo() {\n        message.setTo(\"诡异的接收者\");\n    }\n\n    @Override\n    public void setTime() {\n        message.setTime(new Date());\n    }\n\n    @Override\n    public Message build() {\n        return this.message;\n    }\n}\n\n```\n\n\n\nDirector（调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建 ）\n\n```java\n/** 指导者\n *只负责保证对象各部分完整创建\n * @author illusoryCloud\n */\npublic class Dreator {\n    /**\n     *\n     * @param builder 参数是只要实现了Builder接口的类都可以\n     * @return\n     */\n    public Message createMessage(Builder builder) {\n        builder.setTitle();\n        builder.setContent();\n        builder.setFrom();\n        builder.setTo();\n        builder.setTime();\n        return builder.build();\n    }\n}\n\n```\n\n测试\n\n```java\npublic class Test {\n    @org.junit.jupiter.api.Test\n    public void testBuilder() {\n        Message commonMessage = new Dreator().createMessage(new CommonMessageBuilder());\n        Message othersMessage = new Dreator().createMessage(new OthersMessageBuilder());\n        System.out.println(commonMessage);\n        System.out.println(othersMessage);\n    }\n}\n```\n\n### 2.2 静态内部类方式\n\n静态内部类写法。\n\n```java\n\n\n/**\n * 构建的消息对象\n * 有个静态内部类\n *\n * @author illusoryCloud\n */\npublic class Message {\n    /**\n     * 标题\n     */\n    private String title;\n    /**\n     * 内容\n     */\n    private String content;\n    /**\n     * 发送者\n     */\n    private String from;\n    /**\n     * 接收者\n     */\n    private String to;\n    /**\n     * 时间\n     */\n    private Date time;\n\n\n    @Override\n    public String toString() {\n        return \"Message{\" +\n                \"title='\" + title + '\\'' +\n                \", content='\" + content + '\\'' +\n                \", from='\" + from + '\\'' +\n                \", to='\" + to + '\\'' +\n                \", time=\" + time +\n                '}';\n    }\n\n\n    public static Builder newBuilder() {\n        return new Builder();\n    }\n\n    /**\n     * 静态内部类 builder\n     */\n    public static class Builder {\n        /**\n         * 设置默认值\n         */\n        private String title = \"未命名\";\n        private String content = \"暂无内容\";\n        private String from = \"unknow\";\n        private String to = \"unknow\";\n        private Date time = new Date();\n\n        /**\n         * 设置消息标题\n         *\n         * @param title 要设置的标题\n         * @return 返回Builder对象 以达到链式调用\n         */\n        public Builder setTitle(String title) {\n            this.title = title;\n            return this;\n        }\n\n        public Builder setContent(String content) {\n            this.content = content;\n            return this;\n        }\n\n        public Builder setFrom(String from) {\n            this.from = from;\n            return this;\n        }\n\n        public Builder setTo(String to) {\n            this.to = to;\n            return this;\n        }\n\n        public Builder setTime(Date time) {\n            this.time = time;\n            return this;\n        }\n\n        public Message build() {\n            Message message = new Message();\n            message.title = title;\n            message.content = content;\n            message.from = from;\n            message.to = to;\n            message.time = time;\n            return message;\n        }\n\n    }\n}\n\n```\n\n测试类\n\n```java\n/**\n * 建造者模式 测试类\n *\n * @author illusoryCloud\n */\npublic class Test {\n    @org.junit.jupiter.api.Test\n    public void testBuilder() {\n        Message build = Message.newBuilder().setTitle(\"这是消息标题\")\n                .setContent(\"这是消息内容\")\n                .setFrom(\"这是消息发送者\")\n                .setTo(\"这是消息接收者\")\n                .setTime(new Date())\n                .Build();\n        System.out.println(build.toString());\n    }\n}\n```\n\n\n\n## 3. 总结\n\n**建造者模式优点：**\n\n1.将对象本身与对象的创建过程解耦，使得相同的创建过程可以创建不同的对象。\n\n2.可以更加精细地控制产品的创建过程\n\n3.增加新的具体建造者无须修改原有类库的代码，符合开闭原则 \n\n**与工厂模式的区别：**\n\n工厂模式注重的是整体对象的创建方法，只为了获取对象，关注整体\n\n建造者模式注重的是部件构建的过程，旨在通过一步一步地精确构造创建出一个复杂的对象，关注细节。建造者模式一般用来创建**更为复杂的对象**\n\n## 4. 参考\n\n`https://blog.csdn.net/zhuhuitao_struggle/article/details/80489572`\n\n","slug":"design_pattern/three-builder","published":1,"updated":"2019-03-04T15:44:39.535Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv4au00450ww4j8d0p6ci","content":"<p>本文主要介绍了Java23种设计模式中的<code>建造者模式</code>，并结合实例描述了建造者模式的具体实现和优缺点及建造者模式和工厂模式的差别分析等。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p><strong>Java设计模式系列文章目录</strong></p>\n<p><a href=\"https://www.lixueduan.com/posts/53093.html\">Java设计模式(一)—单例模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34710.html\">Java设计模式(二)—工厂模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/52453.html\">Java设计模式(三)—建造者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/24b6c0e4.html\">Java设计模式(四)—原型模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/f444ac9.html\">Java设计模式(五)—适配器模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/75903408.html\">Java设计模式(六)—装饰者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/ae2a93bd.html\">Java设计模式(七)—代理模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/22a51705.html\">Java设计模式(八)—外观模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34e634e7.html\">Java设计模式(九)—享元模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a7982bdc.html\">Java设计模式(十)—策略模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/57ae709c.html\">Java设计模式(十一)—模板方法模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/48bcf013.html\">Java设计模式(十二)—观察者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a340063f.html\">Java设计模式(十三)—组合模式</a></p>\n<p>……..</p>\n<p>Demo下载–&gt; <a href=\"https://github.com/illusorycloud/design-pattern\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><blockquote>\n<p>建造者模式是将一个复杂的对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。。</p>\n</blockquote>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/three-builder.jpg\" alt=\"\"></p>\n<p>建造者模式通常包括下面几个角色：</p>\n<p>（1） <code>Builder</code>：给出一个抽象接口，以规范产品对象的各个组成成分的建造。这个接口规定要实现复杂对象的哪些部分的创建，并不涉及具体的对象部件的创建。</p>\n<p>（2） <code>ConcreteBuilder</code>：实现Builder接口，针对不同的商业逻辑，具体化复杂对象的各部分的创建。 在建造过程完成后，提供产品的实例。</p>\n<p>（3）<code>Director</code>：调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建或按某种顺序创建。</p>\n<p>（4）<code>Product</code>：要创建的复杂对象</p>\n<h2 id=\"2-实现\"><a href=\"#2-实现\" class=\"headerlink\" title=\"2. 实现\"></a>2. 实现</h2><h3 id=\"2-1-常见写法\"><a href=\"#2-1-常见写法\" class=\"headerlink\" title=\"2.1 常见写法\"></a>2.1 常见写法</h3><p>以创建一个Person为例：</p>\n<p>Product（要创建的对象）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> builder.first;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 构建的消息对象</span></span><br><span class=\"line\"><span class=\"comment\"> * 普通对象</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Message</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 标题</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String title;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String content;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 发送者</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String from;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 接收者</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String to;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 时间</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date time;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTitle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> title;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTitle</span><span class=\"params\">(String title)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.title = title;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getContent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContent</span><span class=\"params\">(String content)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.content = content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getFrom</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> from;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFrom</span><span class=\"params\">(String from)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.from = from;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> to;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTo</span><span class=\"params\">(String to)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.to = to;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Date <span class=\"title\">getTime</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> time;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTime</span><span class=\"params\">(Date time)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.time = time;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Message&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"title='\"</span> + title + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", content='\"</span> + content + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", from='\"</span> + from + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", to='\"</span> + to + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", time=\"</span> + time +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Builder（给出一个抽象接口，以规范产品对象的各个组成成分的建造 ）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Builder接口 建造对象的标准</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setTitle</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setContent</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setFrom</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setTo</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setTime</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Message <span class=\"title\">build</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ConcreteBuilder（实现Builder接口，针对不同的商业逻辑，具体化复杂对象的各部分的创建）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体的建造对象类 实现了Builder接口</span></span><br><span class=\"line\"><span class=\"comment\"> * 可以根据不同需求有不同的实现</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommonMessageBuilder</span> <span class=\"keyword\">implements</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Message message;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CommonMessageBuilder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.message = <span class=\"keyword\">new</span> Message();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTitle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        message.setTitle(<span class=\"string\">\"常见的标题\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        message.setContent(<span class=\"string\">\"普通的内容\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFrom</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        message.setFrom(<span class=\"string\">\"未知的发送者\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        message.setTo(<span class=\"string\">\"未知的接收者\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTime</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        message.setTime(<span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Message <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体的建造对象类 实现了Builder接口</span></span><br><span class=\"line\"><span class=\"comment\"> * 可以根据不同需求有不同的实现</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OthersMessageBuilder</span> <span class=\"keyword\">implements</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Message message;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OthersMessageBuilder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.message = <span class=\"keyword\">new</span> Message();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTitle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        message.setTitle(<span class=\"string\">\"不寻常的标题\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        message.setContent(<span class=\"string\">\"奇怪的内容\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFrom</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        message.setFrom(<span class=\"string\">\"神秘的发送者\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        message.setTo(<span class=\"string\">\"诡异的接收者\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTime</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        message.setTime(<span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Message <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Director（调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建 ）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 指导者</span></span><br><span class=\"line\"><span class=\"comment\"> *只负责保证对象各部分完整创建</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dreator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> builder 参数是只要实现了Builder接口的类都可以</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Message <span class=\"title\">createMessage</span><span class=\"params\">(Builder builder)</span> </span>&#123;</span><br><span class=\"line\">        builder.setTitle();</span><br><span class=\"line\">        builder.setContent();</span><br><span class=\"line\">        builder.setFrom();</span><br><span class=\"line\">        builder.setTo();</span><br><span class=\"line\">        builder.setTime();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@org</span>.junit.jupiter.api.Test</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testBuilder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Message commonMessage = <span class=\"keyword\">new</span> Dreator().createMessage(<span class=\"keyword\">new</span> CommonMessageBuilder());</span><br><span class=\"line\">        Message othersMessage = <span class=\"keyword\">new</span> Dreator().createMessage(<span class=\"keyword\">new</span> OthersMessageBuilder());</span><br><span class=\"line\">        System.out.println(commonMessage);</span><br><span class=\"line\">        System.out.println(othersMessage);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-静态内部类方式\"><a href=\"#2-2-静态内部类方式\" class=\"headerlink\" title=\"2.2 静态内部类方式\"></a>2.2 静态内部类方式</h3><p>静态内部类写法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 构建的消息对象</span></span><br><span class=\"line\"><span class=\"comment\"> * 有个静态内部类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Message</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 标题</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String title;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String content;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 发送者</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String from;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 接收者</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String to;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 时间</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date time;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Message&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"title='\"</span> + title + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", content='\"</span> + content + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", from='\"</span> + from + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", to='\"</span> + to + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", time=\"</span> + time +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Builder <span class=\"title\">newBuilder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Builder();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 静态内部类 builder</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 设置默认值</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String title = <span class=\"string\">\"未命名\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String content = <span class=\"string\">\"暂无内容\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String from = <span class=\"string\">\"unknow\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String to = <span class=\"string\">\"unknow\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Date time = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 设置消息标题</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> title 要设置的标题</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@return</span> 返回Builder对象 以达到链式调用</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setTitle</span><span class=\"params\">(String title)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.title = title;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setContent</span><span class=\"params\">(String content)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.content = content;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setFrom</span><span class=\"params\">(String from)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.from = from;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setTo</span><span class=\"params\">(String to)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.to = to;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setTime</span><span class=\"params\">(Date time)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.time = time;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Message <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            Message message = <span class=\"keyword\">new</span> Message();</span><br><span class=\"line\">            message.title = title;</span><br><span class=\"line\">            message.content = content;</span><br><span class=\"line\">            message.from = from;</span><br><span class=\"line\">            message.to = to;</span><br><span class=\"line\">            message.time = time;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 建造者模式 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@org</span>.junit.jupiter.api.Test</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testBuilder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Message build = Message.newBuilder().setTitle(<span class=\"string\">\"这是消息标题\"</span>)</span><br><span class=\"line\">                .setContent(<span class=\"string\">\"这是消息内容\"</span>)</span><br><span class=\"line\">                .setFrom(<span class=\"string\">\"这是消息发送者\"</span>)</span><br><span class=\"line\">                .setTo(<span class=\"string\">\"这是消息接收者\"</span>)</span><br><span class=\"line\">                .setTime(<span class=\"keyword\">new</span> Date())</span><br><span class=\"line\">                .Build();</span><br><span class=\"line\">        System.out.println(build.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h2><p><strong>建造者模式优点：</strong></p>\n<p>1.将对象本身与对象的创建过程解耦，使得相同的创建过程可以创建不同的对象。</p>\n<p>2.可以更加精细地控制产品的创建过程</p>\n<p>3.增加新的具体建造者无须修改原有类库的代码，符合开闭原则 </p>\n<p><strong>与工厂模式的区别：</strong></p>\n<p>工厂模式注重的是整体对象的创建方法，只为了获取对象，关注整体</p>\n<p>建造者模式注重的是部件构建的过程，旨在通过一步一步地精确构造创建出一个复杂的对象，关注细节。建造者模式一般用来创建<strong>更为复杂的对象</strong></p>\n<h2 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4. 参考\"></a>4. 参考</h2><p><code>https://blog.csdn.net/zhuhuitao_struggle/article/details/80489572</code></p>\n","site":{"data":{}},"excerpt":"<p>本文主要介绍了Java23种设计模式中的<code>建造者模式</code>，并结合实例描述了建造者模式的具体实现和优缺点及建造者模式和工厂模式的差别分析等。</p>","more":"<blockquote>\n<p><strong>Java设计模式系列文章目录</strong></p>\n<p><a href=\"https://www.lixueduan.com/posts/53093.html\">Java设计模式(一)—单例模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34710.html\">Java设计模式(二)—工厂模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/52453.html\">Java设计模式(三)—建造者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/24b6c0e4.html\">Java设计模式(四)—原型模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/f444ac9.html\">Java设计模式(五)—适配器模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/75903408.html\">Java设计模式(六)—装饰者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/ae2a93bd.html\">Java设计模式(七)—代理模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/22a51705.html\">Java设计模式(八)—外观模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34e634e7.html\">Java设计模式(九)—享元模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a7982bdc.html\">Java设计模式(十)—策略模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/57ae709c.html\">Java设计模式(十一)—模板方法模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/48bcf013.html\">Java设计模式(十二)—观察者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a340063f.html\">Java设计模式(十三)—组合模式</a></p>\n<p>……..</p>\n<p>Demo下载–&gt; <a href=\"https://github.com/illusorycloud/design-pattern\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><blockquote>\n<p>建造者模式是将一个复杂的对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。。</p>\n</blockquote>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/three-builder.jpg\" alt=\"\"></p>\n<p>建造者模式通常包括下面几个角色：</p>\n<p>（1） <code>Builder</code>：给出一个抽象接口，以规范产品对象的各个组成成分的建造。这个接口规定要实现复杂对象的哪些部分的创建，并不涉及具体的对象部件的创建。</p>\n<p>（2） <code>ConcreteBuilder</code>：实现Builder接口，针对不同的商业逻辑，具体化复杂对象的各部分的创建。 在建造过程完成后，提供产品的实例。</p>\n<p>（3）<code>Director</code>：调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建或按某种顺序创建。</p>\n<p>（4）<code>Product</code>：要创建的复杂对象</p>\n<h2 id=\"2-实现\"><a href=\"#2-实现\" class=\"headerlink\" title=\"2. 实现\"></a>2. 实现</h2><h3 id=\"2-1-常见写法\"><a href=\"#2-1-常见写法\" class=\"headerlink\" title=\"2.1 常见写法\"></a>2.1 常见写法</h3><p>以创建一个Person为例：</p>\n<p>Product（要创建的对象）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> builder.first;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 构建的消息对象</span></span><br><span class=\"line\"><span class=\"comment\"> * 普通对象</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Message</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 标题</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String title;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String content;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 发送者</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String from;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 接收者</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String to;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 时间</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date time;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTitle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> title;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTitle</span><span class=\"params\">(String title)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.title = title;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getContent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContent</span><span class=\"params\">(String content)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.content = content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getFrom</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> from;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFrom</span><span class=\"params\">(String from)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.from = from;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> to;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTo</span><span class=\"params\">(String to)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.to = to;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Date <span class=\"title\">getTime</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> time;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTime</span><span class=\"params\">(Date time)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.time = time;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Message&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"title='\"</span> + title + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", content='\"</span> + content + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", from='\"</span> + from + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", to='\"</span> + to + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", time=\"</span> + time +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Builder（给出一个抽象接口，以规范产品对象的各个组成成分的建造 ）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Builder接口 建造对象的标准</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setTitle</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setContent</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setFrom</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setTo</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setTime</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Message <span class=\"title\">build</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ConcreteBuilder（实现Builder接口，针对不同的商业逻辑，具体化复杂对象的各部分的创建）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体的建造对象类 实现了Builder接口</span></span><br><span class=\"line\"><span class=\"comment\"> * 可以根据不同需求有不同的实现</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommonMessageBuilder</span> <span class=\"keyword\">implements</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Message message;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CommonMessageBuilder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.message = <span class=\"keyword\">new</span> Message();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTitle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        message.setTitle(<span class=\"string\">\"常见的标题\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        message.setContent(<span class=\"string\">\"普通的内容\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFrom</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        message.setFrom(<span class=\"string\">\"未知的发送者\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        message.setTo(<span class=\"string\">\"未知的接收者\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTime</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        message.setTime(<span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Message <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体的建造对象类 实现了Builder接口</span></span><br><span class=\"line\"><span class=\"comment\"> * 可以根据不同需求有不同的实现</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OthersMessageBuilder</span> <span class=\"keyword\">implements</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Message message;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OthersMessageBuilder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.message = <span class=\"keyword\">new</span> Message();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTitle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        message.setTitle(<span class=\"string\">\"不寻常的标题\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        message.setContent(<span class=\"string\">\"奇怪的内容\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFrom</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        message.setFrom(<span class=\"string\">\"神秘的发送者\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        message.setTo(<span class=\"string\">\"诡异的接收者\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTime</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        message.setTime(<span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Message <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Director（调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建 ）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 指导者</span></span><br><span class=\"line\"><span class=\"comment\"> *只负责保证对象各部分完整创建</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dreator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> builder 参数是只要实现了Builder接口的类都可以</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Message <span class=\"title\">createMessage</span><span class=\"params\">(Builder builder)</span> </span>&#123;</span><br><span class=\"line\">        builder.setTitle();</span><br><span class=\"line\">        builder.setContent();</span><br><span class=\"line\">        builder.setFrom();</span><br><span class=\"line\">        builder.setTo();</span><br><span class=\"line\">        builder.setTime();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@org</span>.junit.jupiter.api.Test</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testBuilder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Message commonMessage = <span class=\"keyword\">new</span> Dreator().createMessage(<span class=\"keyword\">new</span> CommonMessageBuilder());</span><br><span class=\"line\">        Message othersMessage = <span class=\"keyword\">new</span> Dreator().createMessage(<span class=\"keyword\">new</span> OthersMessageBuilder());</span><br><span class=\"line\">        System.out.println(commonMessage);</span><br><span class=\"line\">        System.out.println(othersMessage);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-静态内部类方式\"><a href=\"#2-2-静态内部类方式\" class=\"headerlink\" title=\"2.2 静态内部类方式\"></a>2.2 静态内部类方式</h3><p>静态内部类写法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 构建的消息对象</span></span><br><span class=\"line\"><span class=\"comment\"> * 有个静态内部类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Message</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 标题</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String title;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String content;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 发送者</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String from;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 接收者</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String to;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 时间</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date time;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Message&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"title='\"</span> + title + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", content='\"</span> + content + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", from='\"</span> + from + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", to='\"</span> + to + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", time=\"</span> + time +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Builder <span class=\"title\">newBuilder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Builder();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 静态内部类 builder</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 设置默认值</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String title = <span class=\"string\">\"未命名\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String content = <span class=\"string\">\"暂无内容\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String from = <span class=\"string\">\"unknow\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String to = <span class=\"string\">\"unknow\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Date time = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 设置消息标题</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> title 要设置的标题</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@return</span> 返回Builder对象 以达到链式调用</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setTitle</span><span class=\"params\">(String title)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.title = title;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setContent</span><span class=\"params\">(String content)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.content = content;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setFrom</span><span class=\"params\">(String from)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.from = from;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setTo</span><span class=\"params\">(String to)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.to = to;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setTime</span><span class=\"params\">(Date time)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.time = time;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Message <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            Message message = <span class=\"keyword\">new</span> Message();</span><br><span class=\"line\">            message.title = title;</span><br><span class=\"line\">            message.content = content;</span><br><span class=\"line\">            message.from = from;</span><br><span class=\"line\">            message.to = to;</span><br><span class=\"line\">            message.time = time;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 建造者模式 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@org</span>.junit.jupiter.api.Test</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testBuilder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Message build = Message.newBuilder().setTitle(<span class=\"string\">\"这是消息标题\"</span>)</span><br><span class=\"line\">                .setContent(<span class=\"string\">\"这是消息内容\"</span>)</span><br><span class=\"line\">                .setFrom(<span class=\"string\">\"这是消息发送者\"</span>)</span><br><span class=\"line\">                .setTo(<span class=\"string\">\"这是消息接收者\"</span>)</span><br><span class=\"line\">                .setTime(<span class=\"keyword\">new</span> Date())</span><br><span class=\"line\">                .Build();</span><br><span class=\"line\">        System.out.println(build.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h2><p><strong>建造者模式优点：</strong></p>\n<p>1.将对象本身与对象的创建过程解耦，使得相同的创建过程可以创建不同的对象。</p>\n<p>2.可以更加精细地控制产品的创建过程</p>\n<p>3.增加新的具体建造者无须修改原有类库的代码，符合开闭原则 </p>\n<p><strong>与工厂模式的区别：</strong></p>\n<p>工厂模式注重的是整体对象的创建方法，只为了获取对象，关注整体</p>\n<p>建造者模式注重的是部件构建的过程，旨在通过一步一步地精确构造创建出一个复杂的对象，关注细节。建造者模式一般用来创建<strong>更为复杂的对象</strong></p>\n<h2 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4. 参考\"></a>4. 参考</h2><p><code>https://blog.csdn.net/zhuhuitao_struggle/article/details/80489572</code></p>"},{"title":"Java设计模式(二)---工厂模式","abbrlink":34710,"date":"2018-10-10T14:00:00.000Z","_content":"\n本章主要介绍了设计模式中的工厂模式，并结合实例描述了工厂模式的具体实现和使用场景。包括：`普通工厂模式`、`工厂方法模式`、`抽象工厂模式`等。\n\n<!--more-->\n\n> **Java设计模式系列文章目录**\n>\n> [Java设计模式(一)---单例模式](https://www.lixueduan.com/posts/53093.html)\n>\n> [Java设计模式(二)---工厂模式](https://www.lixueduan.com/posts/34710.html)\n>\n> [Java设计模式(三)---建造者模式](https://www.lixueduan.com/posts/52453.html)\n>\n> [Java设计模式(四)---原型模式](https://www.lixueduan.com/posts/24b6c0e4.html)\n>\n> [Java设计模式(五)---适配器模式](https://www.lixueduan.com/posts/f444ac9.html)\n>\n> [Java设计模式(六)---装饰者模式](https://www.lixueduan.com/posts/75903408.html)\n>\n> [Java设计模式(七)---代理模式](https://www.lixueduan.com/posts/ae2a93bd.html)\n>\n> [Java设计模式(八)---外观模式](https://www.lixueduan.com/posts/22a51705.html)\n>\n> [Java设计模式(九)---享元模式](https://www.lixueduan.com/posts/34e634e7.html)\n>\n> [Java设计模式(十)---策略模式](https://www.lixueduan.com/posts/a7982bdc.html)\n>\n> [Java设计模式(十一)---模板方法模式](https://www.lixueduan.com/posts/57ae709c.html)\n>\n> [Java设计模式(十二)---观察者模式](https://www.lixueduan.com/posts/48bcf013.html)\n>\n> [Java设计模式(十三)---组合模式](https://www.lixueduan.com/posts/a340063f.html)\n>\n> ........\n>\n> Demo下载--> [Github](https://github.com/illusorycloud/design-pattern)\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 简介\n\n工厂模式可以分为普通工厂模、工厂方法模式和抽象工厂模式。\n\n**简单工厂模式**：建立一个工厂类，根据传入的参数对实现了同一接口的一些类进行实例的创建。如果传入的字符串错误就不能正确创建对象。\n\n**工厂方法模式**：是对普通工厂方法模式的改进，提供多个工厂方法，分别创建对象。\n\n**抽象工厂模式**：创建多个工厂类，这样一旦需要增加新的功能，直接增加新的工厂类就可以了，不需要修改之前的代码。\n\n**工厂模式优点：**\n\n(1) `解耦 `：把对象的创建和使用的过程分开\n\n(2)`减少重复代码`: 若创建对象的过程很复杂，有一定的代码量，且很多地方都要用到，那么就会有很多重复代码。\n\n(3) `降低维护成本` ：创建过程都由工厂统一管理，发生业务逻辑变化，只需要在工厂里修改即可。\n\n**适用场景**\n\n（1）需要创建的对象较少。\n\n（2）客户端不关心对象的创建过程。\n\n## 2. 简单工厂模式\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/two-easy-factory.png)\n\n```java\n/**\n * 抽象产品类 水果\n */\npublic interface Fruit {\n    void show();\n}\n\n/**\n * 具体产品类\n * 苹果  实现了水果接口\n * @author illusoryCloud\n */\npublic class Apple implements Fruit {\n    @Override\n    public void show() {\n        System.out.println(\"This is Apple\");\n    }\n}\n/**\n * 具体产品类\n * 橘子 实现了水果接口\n * @author illusoryCloud\n */\npublic class Orange implements Fruit {\n    @Override\n    public void show() {\n        System.out.println(\"This is Orange\");\n    }\n}\n/**\n * 工厂类   水果工厂\n * 负责生产各种产品\n *\n * @author illusoryCloud\n */\npublic class FruitFactory {\n    public static final String FRUIT_APPLE = \"Apple\";\n    public static final String FRUIT_ORANGE = \"Orange\";\n\n    public static Fruit creatFruit(String fruit) {\n        if (FRUIT_APPLE.equals(fruit)) {\n            return new Apple();\n        } else if (FRUIT_ORANGE.equals(fruit)) {\n            return new Orange();\n        } else {\n            System.out.println(\"error unknown fruit ~\");\n            return null;\n        }\n    }\n}\n\n\n\n/**\n * 简单工厂模式 测试\n *\n * @author illusoryCloud\n *\n */\npublic class EasyFactoryTest {\n    @Test\n    public void testEasyFactory() {\n        Fruit apple = FruitFactory.creatFruit(FruitFactory.FRUIT_APPLE);\n        if (apple != null) {\n            apple.show();\n        }\n        Fruit orange = FruitFactory.creatFruit(FruitFactory.FRUIT_ORANGE);\n        if (orange != null) {\n            orange.show();\n        }\n    }\n}\n```\n\n\n\n## 3. 工厂方法模式\n\n简单工厂模式中，如果创建对象时传入的字符串出现错误则不能正确创建产品。工厂方法模式为每种产品创建一个工厂，则不会出现这样的问题。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/two-factory-method.png)\n\n```java\n/**\n *  抽象产品工厂类\n * @author illusoryCloud\n */\npublic interface FruitFactory {\n    Fruit create();\n}\n/**\n * 具体产品工厂 实现接口\n * 苹果工厂\n * @author illusoryCloud\n */\npublic class AppleFactory implements FruitFactory {\n    @Override\n    public Fruit create() {\n        return new Apple();\n    }\n}\n/**\n * 具体产品工厂 实现接口\n * 苹果工厂\n * @author illusoryCloud\n */\npublic class AppleFactory implements FruitFactory {\n    @Override\n    public Fruit create() {\n        return new Apple();\n    }\n}\n/**\n * 工厂方法模式 测试类\n *\n * @author illusoryCloud\n */\npublic class FactoryMethodTest {\n    @Test\n    public void factoryMethodTest() {\n        Fruit apple = new AppleFactory().create();\n        apple.show();\n        Fruit orange = new OrangeFactory().create();\n        orange.show();\n    }\n}\n```\n\n## 4. 抽象工厂模式\n\n网上找的一个类图：\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/two-abstract-factory.jpg)\n\n> 工厂方法模式有一个问题就是，类的创建依赖工厂类，也就是说，如果想要拓展程序，必须对工厂类进行修改，这违背了闭包原则，所以，从设计角度考虑，有一定的问题，如何解决？就用到抽象工厂模式，创建多个工厂类，这样一旦需要增加新的功能，直接增加新的工厂类就可以了，不需要修改之前的代码。\n\n```java\n/**\n * 抽象产品类 果汁\n *\n * @author illusoryCloud\n */\npublic interface Juice {\n    void show();\n}\n/**\n * 具体产品类\n * 苹果汁\n *\n * @author illusoryCloud\n */\npublic class AppleJuice implements Juice {\n    @Override\n    public void show() {\n        System.out.println(\"AppleJuice\");\n    }\n}\n\n/**\n * 具体产品类\n * 橘子汁\n *\n * @author illusoryCloud\n */\npublic class OrangeJuice implements Juice {\n    @Override\n    public void show() {\n        System.out.println(\"OrangeJuice\");\n    }\n}\n\n/**\n * 抽象工厂类\n *\n * @author illusoryCloud\n */\npublic interface AbstractFactory {\n    /**\n     * 创建水果\n     *\n     * @return 水果\n     */\n    Fruit createFruit();\n\n    /**\n     * 创建果汁\n     *\n     * @return 果汁\n     */\n    Juice createJuice();\n}\n\n/**\n * 具体工厂类\n * 苹果工厂 生产苹果和苹果汁\n *\n * @author illusoryCloud\n */\npublic class AppleFactory implements AbstractFactory {\n    @Override\n    public Fruit createFruit() {\n        return new Apple();\n    }\n\n    @Override\n    public Juice createJuice() {\n        return new AppleJuice();\n    }\n}\n\n/**\n * 具体工厂类\n * 橘子工厂 生产橘子和橘子汁\n *\n * @author illusoryCloud\n */\npublic class OrangeFactory implements AbstractFactory {\n    @Override\n    public Fruit createFruit() {\n        return new Orange();\n    }\n\n    @Override\n    public Juice createJuice() {\n        return new OrangeJuice();\n    }\n}\n\n/**\n * 抽象工厂模式 测试类\n *\n * @author illusoryCloud\n */\npublic class AbstractFactoryTest {\n    @Test\n    public void abstractFactoryTest() {\n        //苹果产品簇\n        AbstractFactory appleFactory = new AppleFactory();\n        Fruit apple = appleFactory.createFruit();\n        Juice appleJuice = appleFactory.createJuice();\n        //橘子产品簇\n        AbstractFactory orangeFactory = new OrangeFactory();\n        Fruit orange = orangeFactory.createFruit();\n        Juice orangeJuice = orangeFactory.createJuice();\n\n        apple.show();\n        appleJuice.show();\n        orange.show();\n        orangeJuice.show();\n    }\n\n}\n```\n\n**优点**：当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。\n\n**缺点**：产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 工厂里加代码，又要在具体的工厂里面加代码。要增加一个新的系列时比较简单。\n\n例如上面例子中在苹果系列增加一个苹果派就很困难得修改苹果工厂和抽象工厂，但是若增加一个菠萝系列就很简单，只需要添加一个菠萝工厂就行了。\n\n## 5. 总结\n\n**工厂模式的优点？为什么要使用工厂模式**\n\n- 工厂都是用来封装对象的具体创建过程，减少重复代码，降低对象变化时的维护成本，将对象创建过程和使用相解耦。 \n- 工厂方法模式使用继承，抽象工厂使用对象组合；两者利用抽象的原则，将具体的实例化过程延迟到子类。 \n- 工厂利用的最重要和基本的原则——依赖抽象，不要依赖具体类。\n\n**应用场景**\n\n简单工厂：适合创建同一级别的不同对象。\n\n工厂方法：为每种产品提供一个工厂类，通过不同的工厂实例来创建不同的产品。\n\n抽象工厂模式：一个对象族（或是一组没有任何关系的对象）都有相同的约束，则可以使用抽象工厂模式。\n\n**工厂模式在Java中的应用**\n\n`简单工厂模式`\n\nJDK中的简单工厂模式有很多应用，比较典型的比如线程池。我们使用线程池的时候，可以使用ThreadPoolExecutor，根据自己的喜好传入corePoolSize、maximumPoolSize、keepAliveTimem、unit、workQueue、threadFactory、handler这几个参数，new出一个指定的ThreadPoolExecutor出来。\n\n`工厂方法模式`\n\n```java\npublic interface ThreadFactory {\n\n    /**\n     * Constructs a new {@code Thread}.  Implementations may also initialize\n     * priority, name, daemon status, {@code ThreadGroup}, etc.\n     *\n     * @param r a runnable to be executed by new thread instance\n     * @return constructed thread, or {@code null} if the request to\n     *         create a thread is rejected\n     */\n    Thread newThread(Runnable r);\n}\n```\n\n这是一个生产线程的接口,具体的线程工厂可以implements这个接口并实现newThread(Runnable r)方法，来生产具体线程工厂想要生产的线程。\n\n## 6. 参考\n\n`https://blog.csdn.net/d1562901685/article/details/77623237`\n\n`https://www.cnblogs.com/xrq730/p/4905578.html`\n\n","source":"_posts/design_pattern/two-factory.md","raw":"---\ntitle: Java设计模式(二)---工厂模式\ntags:\n  - 设计模式\ncategories:\n  - 设计模式\nabbrlink: 34710\ndate: 2018-10-10 22:00:00\n---\n\n本章主要介绍了设计模式中的工厂模式，并结合实例描述了工厂模式的具体实现和使用场景。包括：`普通工厂模式`、`工厂方法模式`、`抽象工厂模式`等。\n\n<!--more-->\n\n> **Java设计模式系列文章目录**\n>\n> [Java设计模式(一)---单例模式](https://www.lixueduan.com/posts/53093.html)\n>\n> [Java设计模式(二)---工厂模式](https://www.lixueduan.com/posts/34710.html)\n>\n> [Java设计模式(三)---建造者模式](https://www.lixueduan.com/posts/52453.html)\n>\n> [Java设计模式(四)---原型模式](https://www.lixueduan.com/posts/24b6c0e4.html)\n>\n> [Java设计模式(五)---适配器模式](https://www.lixueduan.com/posts/f444ac9.html)\n>\n> [Java设计模式(六)---装饰者模式](https://www.lixueduan.com/posts/75903408.html)\n>\n> [Java设计模式(七)---代理模式](https://www.lixueduan.com/posts/ae2a93bd.html)\n>\n> [Java设计模式(八)---外观模式](https://www.lixueduan.com/posts/22a51705.html)\n>\n> [Java设计模式(九)---享元模式](https://www.lixueduan.com/posts/34e634e7.html)\n>\n> [Java设计模式(十)---策略模式](https://www.lixueduan.com/posts/a7982bdc.html)\n>\n> [Java设计模式(十一)---模板方法模式](https://www.lixueduan.com/posts/57ae709c.html)\n>\n> [Java设计模式(十二)---观察者模式](https://www.lixueduan.com/posts/48bcf013.html)\n>\n> [Java设计模式(十三)---组合模式](https://www.lixueduan.com/posts/a340063f.html)\n>\n> ........\n>\n> Demo下载--> [Github](https://github.com/illusorycloud/design-pattern)\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 简介\n\n工厂模式可以分为普通工厂模、工厂方法模式和抽象工厂模式。\n\n**简单工厂模式**：建立一个工厂类，根据传入的参数对实现了同一接口的一些类进行实例的创建。如果传入的字符串错误就不能正确创建对象。\n\n**工厂方法模式**：是对普通工厂方法模式的改进，提供多个工厂方法，分别创建对象。\n\n**抽象工厂模式**：创建多个工厂类，这样一旦需要增加新的功能，直接增加新的工厂类就可以了，不需要修改之前的代码。\n\n**工厂模式优点：**\n\n(1) `解耦 `：把对象的创建和使用的过程分开\n\n(2)`减少重复代码`: 若创建对象的过程很复杂，有一定的代码量，且很多地方都要用到，那么就会有很多重复代码。\n\n(3) `降低维护成本` ：创建过程都由工厂统一管理，发生业务逻辑变化，只需要在工厂里修改即可。\n\n**适用场景**\n\n（1）需要创建的对象较少。\n\n（2）客户端不关心对象的创建过程。\n\n## 2. 简单工厂模式\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/two-easy-factory.png)\n\n```java\n/**\n * 抽象产品类 水果\n */\npublic interface Fruit {\n    void show();\n}\n\n/**\n * 具体产品类\n * 苹果  实现了水果接口\n * @author illusoryCloud\n */\npublic class Apple implements Fruit {\n    @Override\n    public void show() {\n        System.out.println(\"This is Apple\");\n    }\n}\n/**\n * 具体产品类\n * 橘子 实现了水果接口\n * @author illusoryCloud\n */\npublic class Orange implements Fruit {\n    @Override\n    public void show() {\n        System.out.println(\"This is Orange\");\n    }\n}\n/**\n * 工厂类   水果工厂\n * 负责生产各种产品\n *\n * @author illusoryCloud\n */\npublic class FruitFactory {\n    public static final String FRUIT_APPLE = \"Apple\";\n    public static final String FRUIT_ORANGE = \"Orange\";\n\n    public static Fruit creatFruit(String fruit) {\n        if (FRUIT_APPLE.equals(fruit)) {\n            return new Apple();\n        } else if (FRUIT_ORANGE.equals(fruit)) {\n            return new Orange();\n        } else {\n            System.out.println(\"error unknown fruit ~\");\n            return null;\n        }\n    }\n}\n\n\n\n/**\n * 简单工厂模式 测试\n *\n * @author illusoryCloud\n *\n */\npublic class EasyFactoryTest {\n    @Test\n    public void testEasyFactory() {\n        Fruit apple = FruitFactory.creatFruit(FruitFactory.FRUIT_APPLE);\n        if (apple != null) {\n            apple.show();\n        }\n        Fruit orange = FruitFactory.creatFruit(FruitFactory.FRUIT_ORANGE);\n        if (orange != null) {\n            orange.show();\n        }\n    }\n}\n```\n\n\n\n## 3. 工厂方法模式\n\n简单工厂模式中，如果创建对象时传入的字符串出现错误则不能正确创建产品。工厂方法模式为每种产品创建一个工厂，则不会出现这样的问题。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/two-factory-method.png)\n\n```java\n/**\n *  抽象产品工厂类\n * @author illusoryCloud\n */\npublic interface FruitFactory {\n    Fruit create();\n}\n/**\n * 具体产品工厂 实现接口\n * 苹果工厂\n * @author illusoryCloud\n */\npublic class AppleFactory implements FruitFactory {\n    @Override\n    public Fruit create() {\n        return new Apple();\n    }\n}\n/**\n * 具体产品工厂 实现接口\n * 苹果工厂\n * @author illusoryCloud\n */\npublic class AppleFactory implements FruitFactory {\n    @Override\n    public Fruit create() {\n        return new Apple();\n    }\n}\n/**\n * 工厂方法模式 测试类\n *\n * @author illusoryCloud\n */\npublic class FactoryMethodTest {\n    @Test\n    public void factoryMethodTest() {\n        Fruit apple = new AppleFactory().create();\n        apple.show();\n        Fruit orange = new OrangeFactory().create();\n        orange.show();\n    }\n}\n```\n\n## 4. 抽象工厂模式\n\n网上找的一个类图：\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/two-abstract-factory.jpg)\n\n> 工厂方法模式有一个问题就是，类的创建依赖工厂类，也就是说，如果想要拓展程序，必须对工厂类进行修改，这违背了闭包原则，所以，从设计角度考虑，有一定的问题，如何解决？就用到抽象工厂模式，创建多个工厂类，这样一旦需要增加新的功能，直接增加新的工厂类就可以了，不需要修改之前的代码。\n\n```java\n/**\n * 抽象产品类 果汁\n *\n * @author illusoryCloud\n */\npublic interface Juice {\n    void show();\n}\n/**\n * 具体产品类\n * 苹果汁\n *\n * @author illusoryCloud\n */\npublic class AppleJuice implements Juice {\n    @Override\n    public void show() {\n        System.out.println(\"AppleJuice\");\n    }\n}\n\n/**\n * 具体产品类\n * 橘子汁\n *\n * @author illusoryCloud\n */\npublic class OrangeJuice implements Juice {\n    @Override\n    public void show() {\n        System.out.println(\"OrangeJuice\");\n    }\n}\n\n/**\n * 抽象工厂类\n *\n * @author illusoryCloud\n */\npublic interface AbstractFactory {\n    /**\n     * 创建水果\n     *\n     * @return 水果\n     */\n    Fruit createFruit();\n\n    /**\n     * 创建果汁\n     *\n     * @return 果汁\n     */\n    Juice createJuice();\n}\n\n/**\n * 具体工厂类\n * 苹果工厂 生产苹果和苹果汁\n *\n * @author illusoryCloud\n */\npublic class AppleFactory implements AbstractFactory {\n    @Override\n    public Fruit createFruit() {\n        return new Apple();\n    }\n\n    @Override\n    public Juice createJuice() {\n        return new AppleJuice();\n    }\n}\n\n/**\n * 具体工厂类\n * 橘子工厂 生产橘子和橘子汁\n *\n * @author illusoryCloud\n */\npublic class OrangeFactory implements AbstractFactory {\n    @Override\n    public Fruit createFruit() {\n        return new Orange();\n    }\n\n    @Override\n    public Juice createJuice() {\n        return new OrangeJuice();\n    }\n}\n\n/**\n * 抽象工厂模式 测试类\n *\n * @author illusoryCloud\n */\npublic class AbstractFactoryTest {\n    @Test\n    public void abstractFactoryTest() {\n        //苹果产品簇\n        AbstractFactory appleFactory = new AppleFactory();\n        Fruit apple = appleFactory.createFruit();\n        Juice appleJuice = appleFactory.createJuice();\n        //橘子产品簇\n        AbstractFactory orangeFactory = new OrangeFactory();\n        Fruit orange = orangeFactory.createFruit();\n        Juice orangeJuice = orangeFactory.createJuice();\n\n        apple.show();\n        appleJuice.show();\n        orange.show();\n        orangeJuice.show();\n    }\n\n}\n```\n\n**优点**：当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。\n\n**缺点**：产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 工厂里加代码，又要在具体的工厂里面加代码。要增加一个新的系列时比较简单。\n\n例如上面例子中在苹果系列增加一个苹果派就很困难得修改苹果工厂和抽象工厂，但是若增加一个菠萝系列就很简单，只需要添加一个菠萝工厂就行了。\n\n## 5. 总结\n\n**工厂模式的优点？为什么要使用工厂模式**\n\n- 工厂都是用来封装对象的具体创建过程，减少重复代码，降低对象变化时的维护成本，将对象创建过程和使用相解耦。 \n- 工厂方法模式使用继承，抽象工厂使用对象组合；两者利用抽象的原则，将具体的实例化过程延迟到子类。 \n- 工厂利用的最重要和基本的原则——依赖抽象，不要依赖具体类。\n\n**应用场景**\n\n简单工厂：适合创建同一级别的不同对象。\n\n工厂方法：为每种产品提供一个工厂类，通过不同的工厂实例来创建不同的产品。\n\n抽象工厂模式：一个对象族（或是一组没有任何关系的对象）都有相同的约束，则可以使用抽象工厂模式。\n\n**工厂模式在Java中的应用**\n\n`简单工厂模式`\n\nJDK中的简单工厂模式有很多应用，比较典型的比如线程池。我们使用线程池的时候，可以使用ThreadPoolExecutor，根据自己的喜好传入corePoolSize、maximumPoolSize、keepAliveTimem、unit、workQueue、threadFactory、handler这几个参数，new出一个指定的ThreadPoolExecutor出来。\n\n`工厂方法模式`\n\n```java\npublic interface ThreadFactory {\n\n    /**\n     * Constructs a new {@code Thread}.  Implementations may also initialize\n     * priority, name, daemon status, {@code ThreadGroup}, etc.\n     *\n     * @param r a runnable to be executed by new thread instance\n     * @return constructed thread, or {@code null} if the request to\n     *         create a thread is rejected\n     */\n    Thread newThread(Runnable r);\n}\n```\n\n这是一个生产线程的接口,具体的线程工厂可以implements这个接口并实现newThread(Runnable r)方法，来生产具体线程工厂想要生产的线程。\n\n## 6. 参考\n\n`https://blog.csdn.net/d1562901685/article/details/77623237`\n\n`https://www.cnblogs.com/xrq730/p/4905578.html`\n\n","slug":"design_pattern/two-factory","published":1,"updated":"2019-03-04T15:43:54.081Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv4ay00480ww4408so5uo","content":"<p>本章主要介绍了设计模式中的工厂模式，并结合实例描述了工厂模式的具体实现和使用场景。包括：<code>普通工厂模式</code>、<code>工厂方法模式</code>、<code>抽象工厂模式</code>等。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p><strong>Java设计模式系列文章目录</strong></p>\n<p><a href=\"https://www.lixueduan.com/posts/53093.html\">Java设计模式(一)—单例模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34710.html\">Java设计模式(二)—工厂模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/52453.html\">Java设计模式(三)—建造者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/24b6c0e4.html\">Java设计模式(四)—原型模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/f444ac9.html\">Java设计模式(五)—适配器模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/75903408.html\">Java设计模式(六)—装饰者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/ae2a93bd.html\">Java设计模式(七)—代理模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/22a51705.html\">Java设计模式(八)—外观模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34e634e7.html\">Java设计模式(九)—享元模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a7982bdc.html\">Java设计模式(十)—策略模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/57ae709c.html\">Java设计模式(十一)—模板方法模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/48bcf013.html\">Java设计模式(十二)—观察者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a340063f.html\">Java设计模式(十三)—组合模式</a></p>\n<p>……..</p>\n<p>Demo下载–&gt; <a href=\"https://github.com/illusorycloud/design-pattern\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><p>工厂模式可以分为普通工厂模、工厂方法模式和抽象工厂模式。</p>\n<p><strong>简单工厂模式</strong>：建立一个工厂类，根据传入的参数对实现了同一接口的一些类进行实例的创建。如果传入的字符串错误就不能正确创建对象。</p>\n<p><strong>工厂方法模式</strong>：是对普通工厂方法模式的改进，提供多个工厂方法，分别创建对象。</p>\n<p><strong>抽象工厂模式</strong>：创建多个工厂类，这样一旦需要增加新的功能，直接增加新的工厂类就可以了，不需要修改之前的代码。</p>\n<p><strong>工厂模式优点：</strong></p>\n<p>(1) <code>解耦</code>：把对象的创建和使用的过程分开</p>\n<p>(2)<code>减少重复代码</code>: 若创建对象的过程很复杂，有一定的代码量，且很多地方都要用到，那么就会有很多重复代码。</p>\n<p>(3) <code>降低维护成本</code> ：创建过程都由工厂统一管理，发生业务逻辑变化，只需要在工厂里修改即可。</p>\n<p><strong>适用场景</strong></p>\n<p>（1）需要创建的对象较少。</p>\n<p>（2）客户端不关心对象的创建过程。</p>\n<h2 id=\"2-简单工厂模式\"><a href=\"#2-简单工厂模式\" class=\"headerlink\" title=\"2. 简单工厂模式\"></a>2. 简单工厂模式</h2><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/two-easy-factory.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象产品类 水果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体产品类</span></span><br><span class=\"line\"><span class=\"comment\"> * 苹果  实现了水果接口</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span> <span class=\"keyword\">implements</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"This is Apple\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体产品类</span></span><br><span class=\"line\"><span class=\"comment\"> * 橘子 实现了水果接口</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Orange</span> <span class=\"keyword\">implements</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"This is Orange\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 工厂类   水果工厂</span></span><br><span class=\"line\"><span class=\"comment\"> * 负责生产各种产品</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FruitFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FRUIT_APPLE = <span class=\"string\">\"Apple\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FRUIT_ORANGE = <span class=\"string\">\"Orange\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Fruit <span class=\"title\">creatFruit</span><span class=\"params\">(String fruit)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (FRUIT_APPLE.equals(fruit)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Apple();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (FRUIT_ORANGE.equals(fruit)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Orange();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"error unknown fruit ~\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 简单工厂模式 测试</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EasyFactoryTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testEasyFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Fruit apple = FruitFactory.creatFruit(FruitFactory.FRUIT_APPLE);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (apple != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            apple.show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Fruit orange = FruitFactory.creatFruit(FruitFactory.FRUIT_ORANGE);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (orange != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            orange.show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-工厂方法模式\"><a href=\"#3-工厂方法模式\" class=\"headerlink\" title=\"3. 工厂方法模式\"></a>3. 工厂方法模式</h2><p>简单工厂模式中，如果创建对象时传入的字符串出现错误则不能正确创建产品。工厂方法模式为每种产品创建一个工厂，则不会出现这样的问题。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/two-factory-method.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  抽象产品工厂类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FruitFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Fruit <span class=\"title\">create</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体产品工厂 实现接口</span></span><br><span class=\"line\"><span class=\"comment\"> * 苹果工厂</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppleFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">FruitFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Fruit <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Apple();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体产品工厂 实现接口</span></span><br><span class=\"line\"><span class=\"comment\"> * 苹果工厂</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppleFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">FruitFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Fruit <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Apple();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 工厂方法模式 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactoryMethodTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">factoryMethodTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Fruit apple = <span class=\"keyword\">new</span> AppleFactory().create();</span><br><span class=\"line\">        apple.show();</span><br><span class=\"line\">        Fruit orange = <span class=\"keyword\">new</span> OrangeFactory().create();</span><br><span class=\"line\">        orange.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-抽象工厂模式\"><a href=\"#4-抽象工厂模式\" class=\"headerlink\" title=\"4. 抽象工厂模式\"></a>4. 抽象工厂模式</h2><p>网上找的一个类图：</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/two-abstract-factory.jpg\" alt=\"\"></p>\n<blockquote>\n<p>工厂方法模式有一个问题就是，类的创建依赖工厂类，也就是说，如果想要拓展程序，必须对工厂类进行修改，这违背了闭包原则，所以，从设计角度考虑，有一定的问题，如何解决？就用到抽象工厂模式，创建多个工厂类，这样一旦需要增加新的功能，直接增加新的工厂类就可以了，不需要修改之前的代码。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象产品类 果汁</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Juice</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体产品类</span></span><br><span class=\"line\"><span class=\"comment\"> * 苹果汁</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppleJuice</span> <span class=\"keyword\">implements</span> <span class=\"title\">Juice</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"AppleJuice\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体产品类</span></span><br><span class=\"line\"><span class=\"comment\"> * 橘子汁</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrangeJuice</span> <span class=\"keyword\">implements</span> <span class=\"title\">Juice</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"OrangeJuice\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象工厂类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建水果</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 水果</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">Fruit <span class=\"title\">createFruit</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建果汁</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 果汁</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">Juice <span class=\"title\">createJuice</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体工厂类</span></span><br><span class=\"line\"><span class=\"comment\"> * 苹果工厂 生产苹果和苹果汁</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppleFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Fruit <span class=\"title\">createFruit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Apple();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Juice <span class=\"title\">createJuice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AppleJuice();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体工厂类</span></span><br><span class=\"line\"><span class=\"comment\"> * 橘子工厂 生产橘子和橘子汁</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrangeFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Fruit <span class=\"title\">createFruit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Orange();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Juice <span class=\"title\">createJuice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> OrangeJuice();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象工厂模式 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractFactoryTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">abstractFactoryTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//苹果产品簇</span></span><br><span class=\"line\">        AbstractFactory appleFactory = <span class=\"keyword\">new</span> AppleFactory();</span><br><span class=\"line\">        Fruit apple = appleFactory.createFruit();</span><br><span class=\"line\">        Juice appleJuice = appleFactory.createJuice();</span><br><span class=\"line\">        <span class=\"comment\">//橘子产品簇</span></span><br><span class=\"line\">        AbstractFactory orangeFactory = <span class=\"keyword\">new</span> OrangeFactory();</span><br><span class=\"line\">        Fruit orange = orangeFactory.createFruit();</span><br><span class=\"line\">        Juice orangeJuice = orangeFactory.createJuice();</span><br><span class=\"line\"></span><br><span class=\"line\">        apple.show();</span><br><span class=\"line\">        appleJuice.show();</span><br><span class=\"line\">        orange.show();</span><br><span class=\"line\">        orangeJuice.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>优点</strong>：当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。</p>\n<p><strong>缺点</strong>：产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 工厂里加代码，又要在具体的工厂里面加代码。要增加一个新的系列时比较简单。</p>\n<p>例如上面例子中在苹果系列增加一个苹果派就很困难得修改苹果工厂和抽象工厂，但是若增加一个菠萝系列就很简单，只需要添加一个菠萝工厂就行了。</p>\n<h2 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h2><p><strong>工厂模式的优点？为什么要使用工厂模式</strong></p>\n<ul>\n<li>工厂都是用来封装对象的具体创建过程，减少重复代码，降低对象变化时的维护成本，将对象创建过程和使用相解耦。 </li>\n<li>工厂方法模式使用继承，抽象工厂使用对象组合；两者利用抽象的原则，将具体的实例化过程延迟到子类。 </li>\n<li>工厂利用的最重要和基本的原则——依赖抽象，不要依赖具体类。</li>\n</ul>\n<p><strong>应用场景</strong></p>\n<p>简单工厂：适合创建同一级别的不同对象。</p>\n<p>工厂方法：为每种产品提供一个工厂类，通过不同的工厂实例来创建不同的产品。</p>\n<p>抽象工厂模式：一个对象族（或是一组没有任何关系的对象）都有相同的约束，则可以使用抽象工厂模式。</p>\n<p><strong>工厂模式在Java中的应用</strong></p>\n<p><code>简单工厂模式</code></p>\n<p>JDK中的简单工厂模式有很多应用，比较典型的比如线程池。我们使用线程池的时候，可以使用ThreadPoolExecutor，根据自己的喜好传入corePoolSize、maximumPoolSize、keepAliveTimem、unit、workQueue、threadFactory、handler这几个参数，new出一个指定的ThreadPoolExecutor出来。</p>\n<p><code>工厂方法模式</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ThreadFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Constructs a new &#123;<span class=\"doctag\">@code</span> Thread&#125;.  Implementations may also initialize</span></span><br><span class=\"line\"><span class=\"comment\">     * priority, name, daemon status, &#123;<span class=\"doctag\">@code</span> ThreadGroup&#125;, etc.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> r a runnable to be executed by new thread instance</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> constructed thread, or &#123;<span class=\"doctag\">@code</span> null&#125; if the request to</span></span><br><span class=\"line\"><span class=\"comment\">     *         create a thread is rejected</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">Thread <span class=\"title\">newThread</span><span class=\"params\">(Runnable r)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是一个生产线程的接口,具体的线程工厂可以implements这个接口并实现newThread(Runnable r)方法，来生产具体线程工厂想要生产的线程。</p>\n<h2 id=\"6-参考\"><a href=\"#6-参考\" class=\"headerlink\" title=\"6. 参考\"></a>6. 参考</h2><p><code>https://blog.csdn.net/d1562901685/article/details/77623237</code></p>\n<p><code>https://www.cnblogs.com/xrq730/p/4905578.html</code></p>\n","site":{"data":{}},"excerpt":"<p>本章主要介绍了设计模式中的工厂模式，并结合实例描述了工厂模式的具体实现和使用场景。包括：<code>普通工厂模式</code>、<code>工厂方法模式</code>、<code>抽象工厂模式</code>等。</p>","more":"<blockquote>\n<p><strong>Java设计模式系列文章目录</strong></p>\n<p><a href=\"https://www.lixueduan.com/posts/53093.html\">Java设计模式(一)—单例模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34710.html\">Java设计模式(二)—工厂模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/52453.html\">Java设计模式(三)—建造者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/24b6c0e4.html\">Java设计模式(四)—原型模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/f444ac9.html\">Java设计模式(五)—适配器模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/75903408.html\">Java设计模式(六)—装饰者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/ae2a93bd.html\">Java设计模式(七)—代理模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/22a51705.html\">Java设计模式(八)—外观模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34e634e7.html\">Java设计模式(九)—享元模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a7982bdc.html\">Java设计模式(十)—策略模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/57ae709c.html\">Java设计模式(十一)—模板方法模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/48bcf013.html\">Java设计模式(十二)—观察者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a340063f.html\">Java设计模式(十三)—组合模式</a></p>\n<p>……..</p>\n<p>Demo下载–&gt; <a href=\"https://github.com/illusorycloud/design-pattern\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><p>工厂模式可以分为普通工厂模、工厂方法模式和抽象工厂模式。</p>\n<p><strong>简单工厂模式</strong>：建立一个工厂类，根据传入的参数对实现了同一接口的一些类进行实例的创建。如果传入的字符串错误就不能正确创建对象。</p>\n<p><strong>工厂方法模式</strong>：是对普通工厂方法模式的改进，提供多个工厂方法，分别创建对象。</p>\n<p><strong>抽象工厂模式</strong>：创建多个工厂类，这样一旦需要增加新的功能，直接增加新的工厂类就可以了，不需要修改之前的代码。</p>\n<p><strong>工厂模式优点：</strong></p>\n<p>(1) <code>解耦</code>：把对象的创建和使用的过程分开</p>\n<p>(2)<code>减少重复代码</code>: 若创建对象的过程很复杂，有一定的代码量，且很多地方都要用到，那么就会有很多重复代码。</p>\n<p>(3) <code>降低维护成本</code> ：创建过程都由工厂统一管理，发生业务逻辑变化，只需要在工厂里修改即可。</p>\n<p><strong>适用场景</strong></p>\n<p>（1）需要创建的对象较少。</p>\n<p>（2）客户端不关心对象的创建过程。</p>\n<h2 id=\"2-简单工厂模式\"><a href=\"#2-简单工厂模式\" class=\"headerlink\" title=\"2. 简单工厂模式\"></a>2. 简单工厂模式</h2><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/two-easy-factory.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象产品类 水果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体产品类</span></span><br><span class=\"line\"><span class=\"comment\"> * 苹果  实现了水果接口</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span> <span class=\"keyword\">implements</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"This is Apple\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体产品类</span></span><br><span class=\"line\"><span class=\"comment\"> * 橘子 实现了水果接口</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Orange</span> <span class=\"keyword\">implements</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"This is Orange\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 工厂类   水果工厂</span></span><br><span class=\"line\"><span class=\"comment\"> * 负责生产各种产品</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FruitFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FRUIT_APPLE = <span class=\"string\">\"Apple\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FRUIT_ORANGE = <span class=\"string\">\"Orange\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Fruit <span class=\"title\">creatFruit</span><span class=\"params\">(String fruit)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (FRUIT_APPLE.equals(fruit)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Apple();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (FRUIT_ORANGE.equals(fruit)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Orange();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"error unknown fruit ~\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 简单工厂模式 测试</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EasyFactoryTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testEasyFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Fruit apple = FruitFactory.creatFruit(FruitFactory.FRUIT_APPLE);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (apple != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            apple.show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Fruit orange = FruitFactory.creatFruit(FruitFactory.FRUIT_ORANGE);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (orange != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            orange.show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-工厂方法模式\"><a href=\"#3-工厂方法模式\" class=\"headerlink\" title=\"3. 工厂方法模式\"></a>3. 工厂方法模式</h2><p>简单工厂模式中，如果创建对象时传入的字符串出现错误则不能正确创建产品。工厂方法模式为每种产品创建一个工厂，则不会出现这样的问题。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/two-factory-method.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  抽象产品工厂类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FruitFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Fruit <span class=\"title\">create</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体产品工厂 实现接口</span></span><br><span class=\"line\"><span class=\"comment\"> * 苹果工厂</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppleFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">FruitFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Fruit <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Apple();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体产品工厂 实现接口</span></span><br><span class=\"line\"><span class=\"comment\"> * 苹果工厂</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppleFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">FruitFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Fruit <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Apple();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 工厂方法模式 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactoryMethodTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">factoryMethodTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Fruit apple = <span class=\"keyword\">new</span> AppleFactory().create();</span><br><span class=\"line\">        apple.show();</span><br><span class=\"line\">        Fruit orange = <span class=\"keyword\">new</span> OrangeFactory().create();</span><br><span class=\"line\">        orange.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-抽象工厂模式\"><a href=\"#4-抽象工厂模式\" class=\"headerlink\" title=\"4. 抽象工厂模式\"></a>4. 抽象工厂模式</h2><p>网上找的一个类图：</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/two-abstract-factory.jpg\" alt=\"\"></p>\n<blockquote>\n<p>工厂方法模式有一个问题就是，类的创建依赖工厂类，也就是说，如果想要拓展程序，必须对工厂类进行修改，这违背了闭包原则，所以，从设计角度考虑，有一定的问题，如何解决？就用到抽象工厂模式，创建多个工厂类，这样一旦需要增加新的功能，直接增加新的工厂类就可以了，不需要修改之前的代码。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象产品类 果汁</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Juice</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体产品类</span></span><br><span class=\"line\"><span class=\"comment\"> * 苹果汁</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppleJuice</span> <span class=\"keyword\">implements</span> <span class=\"title\">Juice</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"AppleJuice\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体产品类</span></span><br><span class=\"line\"><span class=\"comment\"> * 橘子汁</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrangeJuice</span> <span class=\"keyword\">implements</span> <span class=\"title\">Juice</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"OrangeJuice\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象工厂类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建水果</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 水果</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">Fruit <span class=\"title\">createFruit</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建果汁</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 果汁</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">Juice <span class=\"title\">createJuice</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体工厂类</span></span><br><span class=\"line\"><span class=\"comment\"> * 苹果工厂 生产苹果和苹果汁</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppleFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Fruit <span class=\"title\">createFruit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Apple();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Juice <span class=\"title\">createJuice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AppleJuice();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体工厂类</span></span><br><span class=\"line\"><span class=\"comment\"> * 橘子工厂 生产橘子和橘子汁</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrangeFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Fruit <span class=\"title\">createFruit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Orange();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Juice <span class=\"title\">createJuice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> OrangeJuice();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象工厂模式 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractFactoryTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">abstractFactoryTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//苹果产品簇</span></span><br><span class=\"line\">        AbstractFactory appleFactory = <span class=\"keyword\">new</span> AppleFactory();</span><br><span class=\"line\">        Fruit apple = appleFactory.createFruit();</span><br><span class=\"line\">        Juice appleJuice = appleFactory.createJuice();</span><br><span class=\"line\">        <span class=\"comment\">//橘子产品簇</span></span><br><span class=\"line\">        AbstractFactory orangeFactory = <span class=\"keyword\">new</span> OrangeFactory();</span><br><span class=\"line\">        Fruit orange = orangeFactory.createFruit();</span><br><span class=\"line\">        Juice orangeJuice = orangeFactory.createJuice();</span><br><span class=\"line\"></span><br><span class=\"line\">        apple.show();</span><br><span class=\"line\">        appleJuice.show();</span><br><span class=\"line\">        orange.show();</span><br><span class=\"line\">        orangeJuice.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>优点</strong>：当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。</p>\n<p><strong>缺点</strong>：产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 工厂里加代码，又要在具体的工厂里面加代码。要增加一个新的系列时比较简单。</p>\n<p>例如上面例子中在苹果系列增加一个苹果派就很困难得修改苹果工厂和抽象工厂，但是若增加一个菠萝系列就很简单，只需要添加一个菠萝工厂就行了。</p>\n<h2 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h2><p><strong>工厂模式的优点？为什么要使用工厂模式</strong></p>\n<ul>\n<li>工厂都是用来封装对象的具体创建过程，减少重复代码，降低对象变化时的维护成本，将对象创建过程和使用相解耦。 </li>\n<li>工厂方法模式使用继承，抽象工厂使用对象组合；两者利用抽象的原则，将具体的实例化过程延迟到子类。 </li>\n<li>工厂利用的最重要和基本的原则——依赖抽象，不要依赖具体类。</li>\n</ul>\n<p><strong>应用场景</strong></p>\n<p>简单工厂：适合创建同一级别的不同对象。</p>\n<p>工厂方法：为每种产品提供一个工厂类，通过不同的工厂实例来创建不同的产品。</p>\n<p>抽象工厂模式：一个对象族（或是一组没有任何关系的对象）都有相同的约束，则可以使用抽象工厂模式。</p>\n<p><strong>工厂模式在Java中的应用</strong></p>\n<p><code>简单工厂模式</code></p>\n<p>JDK中的简单工厂模式有很多应用，比较典型的比如线程池。我们使用线程池的时候，可以使用ThreadPoolExecutor，根据自己的喜好传入corePoolSize、maximumPoolSize、keepAliveTimem、unit、workQueue、threadFactory、handler这几个参数，new出一个指定的ThreadPoolExecutor出来。</p>\n<p><code>工厂方法模式</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ThreadFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Constructs a new &#123;<span class=\"doctag\">@code</span> Thread&#125;.  Implementations may also initialize</span></span><br><span class=\"line\"><span class=\"comment\">     * priority, name, daemon status, &#123;<span class=\"doctag\">@code</span> ThreadGroup&#125;, etc.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> r a runnable to be executed by new thread instance</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> constructed thread, or &#123;<span class=\"doctag\">@code</span> null&#125; if the request to</span></span><br><span class=\"line\"><span class=\"comment\">     *         create a thread is rejected</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">Thread <span class=\"title\">newThread</span><span class=\"params\">(Runnable r)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是一个生产线程的接口,具体的线程工厂可以implements这个接口并实现newThread(Runnable r)方法，来生产具体线程工厂想要生产的线程。</p>\n<h2 id=\"6-参考\"><a href=\"#6-参考\" class=\"headerlink\" title=\"6. 参考\"></a>6. 参考</h2><p><code>https://blog.csdn.net/d1562901685/article/details/77623237</code></p>\n<p><code>https://www.cnblogs.com/xrq730/p/4905578.html</code></p>"},{"title":"Java设计模式(十二)---观察者模式","abbrlink":"48bcf013","date":"2018-10-25T14:00:00.000Z","_content":"\n本文主要介绍了Java23种设计模式中的观察者模式，并结合实例描述了观察者模式的具体实现和优缺点分析。\n\n<!--more-->\n\n> **Java设计模式系列文章目录**\n>\n> [Java设计模式(一)---单例模式](https://www.lixueduan.com/posts/53093.html)\n>\n> [Java设计模式(二)---工厂模式](https://www.lixueduan.com/posts/34710.html)\n>\n> [Java设计模式(三)---建造者模式](https://www.lixueduan.com/posts/52453.html)\n>\n> [Java设计模式(四)---原型模式](https://www.lixueduan.com/posts/24b6c0e4.html)\n>\n> [Java设计模式(五)---适配器模式](https://www.lixueduan.com/posts/f444ac9.html)\n>\n> [Java设计模式(六)---装饰者模式](https://www.lixueduan.com/posts/75903408.html)\n>\n> [Java设计模式(七)---代理模式](https://www.lixueduan.com/posts/ae2a93bd.html)\n>\n> [Java设计模式(八)---外观模式](https://www.lixueduan.com/posts/22a51705.html)\n>\n> [Java设计模式(九)---享元模式](https://www.lixueduan.com/posts/34e634e7.html)\n>\n> [Java设计模式(十)---策略模式](https://www.lixueduan.com/posts/a7982bdc.html)\n>\n> [Java设计模式(十一)---模板方法模式](https://www.lixueduan.com/posts/57ae709c.html)\n>\n> [Java设计模式(十二)---观察者模式](https://www.lixueduan.com/posts/48bcf013.html)\n>\n> [Java设计模式(十三)---组合模式](https://www.lixueduan.com/posts/a340063f.html)\n>\n> ........\n>\n> Demo下载--> [Github](https://github.com/illusorycloud/design-pattern)\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 简介\n\n> 让多个观察者对象同时监听某一个主题对象，这个主题对象在状态上发生变化时，会通知所有观察者对象，使他们能够自动更新自己。\n> 在对象之间定义了一对多的依赖，这样一来，当一个对象改变状态，依赖它的对象会收到通知并自动更新。其实就是发布订阅模式，发布者发布信息，订阅者获取信息，订阅了就能收到信息，没订阅就收不到信息。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/twelve-observer.jpeg)\n\n**该模式包含四个角色**\n\n- **抽象被观察者角色**：也就是一个抽象主题，它把所有对观察者对象的引用保存在一个集合中，每个主题都可以有任意数量的观察者。抽象主题提供一个接口，可以增加和删除观察者角色。一般用一个抽象类和接口来实现。\n- **抽象观察者角色**：为所有的具体观察者定义一个接口，在得到主题通知时更新自己。\n- **具体被观察者角色**：也就是一个具体的主题，在集体主题的内部状态改变时，所有登记过的观察者发出通知。\n- **具体观察者角色**：实现抽象观察者角色所需要的更新接口，一边使本身的状态与制图的状态相协调。\n\n## 2. 代码实现\n\n```java\n/**\n * 抽象观察者角色\n * 定义了一个update()方法，当被观察者调用notifyObservers()方法时，观察者的update()方法会被回调。\n *\n * @author illusoryCloud\n */\npublic interface Observer {\n    /**\n     * 更新消息 由被观察者调用\n     *\n     * @param o       被观察者 即消息来源\n     * @param message 收到的消息\n     */\n    void update(Observable o, Message message);\n}\n/**\n * 抽象被观察者接口\n * 声明了添加、删除、通知观察者方法\n *\n * @author illusoryCloud\n */\npublic class Observable {\n    /**\n     * 被观察者是否有变化\n     * 在通知观察者时做判断 若没有发生变化则不通知\n     */\n    private boolean changed = false;\n    /**\n     * Vector集合 线程安全的\n     * 用于存放已注册的观察者\n     */\n    private Vector<Observer> obs;\n\n    public Observable() {\n        obs = new Vector<>();\n    }\n\n    /**\n     * 注册观察者\n     *\n     * @param o 需要注册的观察者\n     */\n    public synchronized void addObserver(Observer o) {\n        if (o == null) {\n            throw new NullPointerException();\n        }\n        if (!obs.contains(o)) {\n            obs.addElement(o);\n        }\n    }\n\n    /**\n     * 移除观察者\n     *\n     * @param o 被移除的观察者\n     */\n    public synchronized void deleteObserver(java.util.Observer o) {\n        obs.removeElement(o);\n    }\n\n    /**\n     * 发通知\n     */\n    public void notifyObservers() {\n        notifyObservers(null);\n    }\n\n    /**\n     * 循环遍历 通知注册的所有的观察者\n     *\n     * @param message 发送的消息\n     */\n    public void notifyObservers(Message message) {\n        Object[] arrLocal;\n\n        synchronized (this) {\n            //判断若没有变化则直接返回\n            if (!changed) {\n                return;\n            }\n            arrLocal = obs.toArray();\n            clearChanged();\n        }\n\n        for (int i = arrLocal.length - 1; i >= 0; i--) {\n            ((Observer) arrLocal[i]).update(this, message);\n        }\n    }\n\n    /**\n     * 移除所有观察者\n     */\n    public synchronized void deleteObservers() {\n        obs.removeAllElements();\n    }\n\n    /**\n     * set clear has 设置 清除 获取\n     * 观察者状态是否变化 true/false\n     */\n    protected synchronized void setChanged() {\n        changed = true;\n    }\n\n    protected synchronized void clearChanged() {\n        changed = false;\n    }\n\n    public synchronized boolean hasChanged() {\n        return changed;\n    }\n\n    /**\n     * 已注册观察者的个数\n     *\n     * @return count\n     */\n    public synchronized int countObservers() {\n        return obs.size();\n    }\n\n}\n/**\n * 具体观察者角色\n * 实现update方法\n *\n * @author illusoryCloud\n */\npublic class Client implements Observer {\n    private String clientName;\n    private int id;\n\n    public Client(String clientName, int id) {\n        this.clientName = clientName;\n        this.id = id;\n    }\n\n\n    @Override\n    public void update(Observable o, Message message) {\n        System.out.println(id + \"号\" + clientName + \"收到<\" + ((Server)o).getName() + \">推送的消息：\" + message.toString());\n    }\n}\n/**\n * 具体被观察者角色\n *\n * @author illusoryCloud\n */\npublic class Server extends Observable {\n\n    /**\n     * 被观察者name 用于区分多个被观察者\n     */\n    private String name;\n\n    public Server(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public void notifyObservers(Message message) {\n        //发送消息\n        super.notifyObservers(message);\n        //发送后取消change标志\n        clearChanged();\n    }\n    public String getName(){\n        return this.name;\n    }\n}\n/**\n * 观察者模式 测试类\n *\n * @author illusoryCloud\n */\npublic class ObserverTest {\n    @Test\n    void observerTest() {\n        //发送的消息对象\n        Message message = null;\n        //1个被观察者\n        Server s1 = new Server(\"幻境\");\n        Server s2 = new Server(\"云图\");\n        //4个观察者\n        Client c1 = new Client(\"大佬\", 1);\n        Client c2 = new Client(\"萌新\", 2);\n        Client c3 = new Client(\"菜鸟\", 3);\n        Client c4 = new Client(\"咸鱼\", 4);\n        //将4个观察者分别注册到两个被观察者上\n        s1.addObserver(c1);\n        s1.addObserver(c2);\n        s2.addObserver(c3);\n        s2.addObserver(c4);\n        message = Message.newBuilder().setTitle(\"欢迎\")\n                .setContent(\"欢迎关注 <幻境云图>\")\n                .build();\n        //消息变化后 将被观察者设置为已变化状态\n        s1.setChanged();\n        s2.setChanged();\n        //发送消息\n        s1.notifyObservers(message);\n        s2.notifyObservers(message);\n        //再次发送消息无效 因为change=false\n        s1.notifyObservers(message);\n        s2.notifyObservers(message);\n    }\n}\n//输出\n2号萌新收到<幻境>推送的消息：Message{title='欢迎', content='欢迎关注 <幻境云图>'}\n1号大佬收到<幻境>推送的消息：Message{title='欢迎', content='欢迎关注 <幻境云图>'}\n4号咸鱼收到<云图>推送的消息：Message{title='欢迎', content='欢迎关注 <幻境云图>'}\n3号菜鸟收到<云图>推送的消息：Message{title='欢迎', content='欢迎关注 <幻境云图>'}\n```\n\n## 3. 总结\n\n**优点：**\n\n1.降低重复代码，使得代码更清晰、更易读、更易扩展\n\n2.解耦，使得代码可维护性更好，修改代码的时候可以尽量少改地方\n\n**应用场景：**\n\n1.对一个对象状态的更新需要其他对象同步更新\n\n2.对象仅需要将自己的更新通知给其他对象而不需要知道其他对象的细节，如消息推送.\n\n**观察者模式在Java中的应用及解读**\n\nJDK是有直接支持观察者模式的，就是`java.util.Observer`这个接口：\n\n```java\npublic interface Observer {\n    /**\n     * This method is called whenever the observed object is changed. An\n     * application calls an <tt>Observable</tt> object's\n     * <code>notifyObservers</code> method to have all the object's\n     * observers notified of the change.\n     *\n     * @param   o     the observable object.\n     * @param   arg   an argument passed to the <code>notifyObservers</code>\n     *                 method.\n     */\n    void update(Observable o, Object arg);\n}\n```\n\n这就是观察者的接口，定义的观察者只需要实现这个接口就可以了。update()方法，被观察者对象的状态发生变化时，被观察者的notifyObservers()方法就会调用这个方法：\n\n```java\npublic class Observable {\n    private boolean changed = false;\n    private Vector<Observer> obs;\n\n    public Observable() {\n        obs = new Vector<>();\n    }\n    public synchronized void addObserver(Observer o) {\n        if (o == null)\n            throw new NullPointerException();\n        if (!obs.contains(o)) {\n            obs.addElement(o);\n        }\n    }\n\n    public synchronized void deleteObserver(Observer o) {\n        obs.removeElement(o);\n    }\n    public void notifyObservers() {\n        notifyObservers(null);\n    }\n    public void notifyObservers(Object arg) {\n \n        Object[] arrLocal;\n\n        synchronized (this) {\n            if (!changed)\n                return;\n            arrLocal = obs.toArray();\n            clearChanged();\n        }\n\n        for (int i = arrLocal.length-1; i>=0; i--)\n            ((Observer)arrLocal[i]).update(this, arg);\n    }\n\n    public synchronized void deleteObservers() {\n        obs.removeAllElements();\n    }\n    protected synchronized void setChanged() {\n        changed = true;\n    }\n\n    protected synchronized void clearChanged() {\n        changed = false;\n    }\n    public synchronized boolean hasChanged() {\n        return changed;\n    }\n    public synchronized int countObservers() {\n        return obs.size();\n    }\n}\n\n```\n\n这是被观察者的父类，也就是主题对象，用的`Vector`集合,方法也加了`synchronized`关键字，是多线程安全的。\n\n## 4. 参考\n\n`https://www.cnblogs.com/xrq730/p/4908686.html`","source":"_posts/design_pattern/twelve-observer.md","raw":"---\ntitle: Java设计模式(十二)---观察者模式\ntags:\n  - 设计模式\ncategories:\n  - 设计模式\nabbrlink: 48bcf013\ndate: 2018-10-25 22:00:00\n---\n\n本文主要介绍了Java23种设计模式中的观察者模式，并结合实例描述了观察者模式的具体实现和优缺点分析。\n\n<!--more-->\n\n> **Java设计模式系列文章目录**\n>\n> [Java设计模式(一)---单例模式](https://www.lixueduan.com/posts/53093.html)\n>\n> [Java设计模式(二)---工厂模式](https://www.lixueduan.com/posts/34710.html)\n>\n> [Java设计模式(三)---建造者模式](https://www.lixueduan.com/posts/52453.html)\n>\n> [Java设计模式(四)---原型模式](https://www.lixueduan.com/posts/24b6c0e4.html)\n>\n> [Java设计模式(五)---适配器模式](https://www.lixueduan.com/posts/f444ac9.html)\n>\n> [Java设计模式(六)---装饰者模式](https://www.lixueduan.com/posts/75903408.html)\n>\n> [Java设计模式(七)---代理模式](https://www.lixueduan.com/posts/ae2a93bd.html)\n>\n> [Java设计模式(八)---外观模式](https://www.lixueduan.com/posts/22a51705.html)\n>\n> [Java设计模式(九)---享元模式](https://www.lixueduan.com/posts/34e634e7.html)\n>\n> [Java设计模式(十)---策略模式](https://www.lixueduan.com/posts/a7982bdc.html)\n>\n> [Java设计模式(十一)---模板方法模式](https://www.lixueduan.com/posts/57ae709c.html)\n>\n> [Java设计模式(十二)---观察者模式](https://www.lixueduan.com/posts/48bcf013.html)\n>\n> [Java设计模式(十三)---组合模式](https://www.lixueduan.com/posts/a340063f.html)\n>\n> ........\n>\n> Demo下载--> [Github](https://github.com/illusorycloud/design-pattern)\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 简介\n\n> 让多个观察者对象同时监听某一个主题对象，这个主题对象在状态上发生变化时，会通知所有观察者对象，使他们能够自动更新自己。\n> 在对象之间定义了一对多的依赖，这样一来，当一个对象改变状态，依赖它的对象会收到通知并自动更新。其实就是发布订阅模式，发布者发布信息，订阅者获取信息，订阅了就能收到信息，没订阅就收不到信息。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/twelve-observer.jpeg)\n\n**该模式包含四个角色**\n\n- **抽象被观察者角色**：也就是一个抽象主题，它把所有对观察者对象的引用保存在一个集合中，每个主题都可以有任意数量的观察者。抽象主题提供一个接口，可以增加和删除观察者角色。一般用一个抽象类和接口来实现。\n- **抽象观察者角色**：为所有的具体观察者定义一个接口，在得到主题通知时更新自己。\n- **具体被观察者角色**：也就是一个具体的主题，在集体主题的内部状态改变时，所有登记过的观察者发出通知。\n- **具体观察者角色**：实现抽象观察者角色所需要的更新接口，一边使本身的状态与制图的状态相协调。\n\n## 2. 代码实现\n\n```java\n/**\n * 抽象观察者角色\n * 定义了一个update()方法，当被观察者调用notifyObservers()方法时，观察者的update()方法会被回调。\n *\n * @author illusoryCloud\n */\npublic interface Observer {\n    /**\n     * 更新消息 由被观察者调用\n     *\n     * @param o       被观察者 即消息来源\n     * @param message 收到的消息\n     */\n    void update(Observable o, Message message);\n}\n/**\n * 抽象被观察者接口\n * 声明了添加、删除、通知观察者方法\n *\n * @author illusoryCloud\n */\npublic class Observable {\n    /**\n     * 被观察者是否有变化\n     * 在通知观察者时做判断 若没有发生变化则不通知\n     */\n    private boolean changed = false;\n    /**\n     * Vector集合 线程安全的\n     * 用于存放已注册的观察者\n     */\n    private Vector<Observer> obs;\n\n    public Observable() {\n        obs = new Vector<>();\n    }\n\n    /**\n     * 注册观察者\n     *\n     * @param o 需要注册的观察者\n     */\n    public synchronized void addObserver(Observer o) {\n        if (o == null) {\n            throw new NullPointerException();\n        }\n        if (!obs.contains(o)) {\n            obs.addElement(o);\n        }\n    }\n\n    /**\n     * 移除观察者\n     *\n     * @param o 被移除的观察者\n     */\n    public synchronized void deleteObserver(java.util.Observer o) {\n        obs.removeElement(o);\n    }\n\n    /**\n     * 发通知\n     */\n    public void notifyObservers() {\n        notifyObservers(null);\n    }\n\n    /**\n     * 循环遍历 通知注册的所有的观察者\n     *\n     * @param message 发送的消息\n     */\n    public void notifyObservers(Message message) {\n        Object[] arrLocal;\n\n        synchronized (this) {\n            //判断若没有变化则直接返回\n            if (!changed) {\n                return;\n            }\n            arrLocal = obs.toArray();\n            clearChanged();\n        }\n\n        for (int i = arrLocal.length - 1; i >= 0; i--) {\n            ((Observer) arrLocal[i]).update(this, message);\n        }\n    }\n\n    /**\n     * 移除所有观察者\n     */\n    public synchronized void deleteObservers() {\n        obs.removeAllElements();\n    }\n\n    /**\n     * set clear has 设置 清除 获取\n     * 观察者状态是否变化 true/false\n     */\n    protected synchronized void setChanged() {\n        changed = true;\n    }\n\n    protected synchronized void clearChanged() {\n        changed = false;\n    }\n\n    public synchronized boolean hasChanged() {\n        return changed;\n    }\n\n    /**\n     * 已注册观察者的个数\n     *\n     * @return count\n     */\n    public synchronized int countObservers() {\n        return obs.size();\n    }\n\n}\n/**\n * 具体观察者角色\n * 实现update方法\n *\n * @author illusoryCloud\n */\npublic class Client implements Observer {\n    private String clientName;\n    private int id;\n\n    public Client(String clientName, int id) {\n        this.clientName = clientName;\n        this.id = id;\n    }\n\n\n    @Override\n    public void update(Observable o, Message message) {\n        System.out.println(id + \"号\" + clientName + \"收到<\" + ((Server)o).getName() + \">推送的消息：\" + message.toString());\n    }\n}\n/**\n * 具体被观察者角色\n *\n * @author illusoryCloud\n */\npublic class Server extends Observable {\n\n    /**\n     * 被观察者name 用于区分多个被观察者\n     */\n    private String name;\n\n    public Server(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public void notifyObservers(Message message) {\n        //发送消息\n        super.notifyObservers(message);\n        //发送后取消change标志\n        clearChanged();\n    }\n    public String getName(){\n        return this.name;\n    }\n}\n/**\n * 观察者模式 测试类\n *\n * @author illusoryCloud\n */\npublic class ObserverTest {\n    @Test\n    void observerTest() {\n        //发送的消息对象\n        Message message = null;\n        //1个被观察者\n        Server s1 = new Server(\"幻境\");\n        Server s2 = new Server(\"云图\");\n        //4个观察者\n        Client c1 = new Client(\"大佬\", 1);\n        Client c2 = new Client(\"萌新\", 2);\n        Client c3 = new Client(\"菜鸟\", 3);\n        Client c4 = new Client(\"咸鱼\", 4);\n        //将4个观察者分别注册到两个被观察者上\n        s1.addObserver(c1);\n        s1.addObserver(c2);\n        s2.addObserver(c3);\n        s2.addObserver(c4);\n        message = Message.newBuilder().setTitle(\"欢迎\")\n                .setContent(\"欢迎关注 <幻境云图>\")\n                .build();\n        //消息变化后 将被观察者设置为已变化状态\n        s1.setChanged();\n        s2.setChanged();\n        //发送消息\n        s1.notifyObservers(message);\n        s2.notifyObservers(message);\n        //再次发送消息无效 因为change=false\n        s1.notifyObservers(message);\n        s2.notifyObservers(message);\n    }\n}\n//输出\n2号萌新收到<幻境>推送的消息：Message{title='欢迎', content='欢迎关注 <幻境云图>'}\n1号大佬收到<幻境>推送的消息：Message{title='欢迎', content='欢迎关注 <幻境云图>'}\n4号咸鱼收到<云图>推送的消息：Message{title='欢迎', content='欢迎关注 <幻境云图>'}\n3号菜鸟收到<云图>推送的消息：Message{title='欢迎', content='欢迎关注 <幻境云图>'}\n```\n\n## 3. 总结\n\n**优点：**\n\n1.降低重复代码，使得代码更清晰、更易读、更易扩展\n\n2.解耦，使得代码可维护性更好，修改代码的时候可以尽量少改地方\n\n**应用场景：**\n\n1.对一个对象状态的更新需要其他对象同步更新\n\n2.对象仅需要将自己的更新通知给其他对象而不需要知道其他对象的细节，如消息推送.\n\n**观察者模式在Java中的应用及解读**\n\nJDK是有直接支持观察者模式的，就是`java.util.Observer`这个接口：\n\n```java\npublic interface Observer {\n    /**\n     * This method is called whenever the observed object is changed. An\n     * application calls an <tt>Observable</tt> object's\n     * <code>notifyObservers</code> method to have all the object's\n     * observers notified of the change.\n     *\n     * @param   o     the observable object.\n     * @param   arg   an argument passed to the <code>notifyObservers</code>\n     *                 method.\n     */\n    void update(Observable o, Object arg);\n}\n```\n\n这就是观察者的接口，定义的观察者只需要实现这个接口就可以了。update()方法，被观察者对象的状态发生变化时，被观察者的notifyObservers()方法就会调用这个方法：\n\n```java\npublic class Observable {\n    private boolean changed = false;\n    private Vector<Observer> obs;\n\n    public Observable() {\n        obs = new Vector<>();\n    }\n    public synchronized void addObserver(Observer o) {\n        if (o == null)\n            throw new NullPointerException();\n        if (!obs.contains(o)) {\n            obs.addElement(o);\n        }\n    }\n\n    public synchronized void deleteObserver(Observer o) {\n        obs.removeElement(o);\n    }\n    public void notifyObservers() {\n        notifyObservers(null);\n    }\n    public void notifyObservers(Object arg) {\n \n        Object[] arrLocal;\n\n        synchronized (this) {\n            if (!changed)\n                return;\n            arrLocal = obs.toArray();\n            clearChanged();\n        }\n\n        for (int i = arrLocal.length-1; i>=0; i--)\n            ((Observer)arrLocal[i]).update(this, arg);\n    }\n\n    public synchronized void deleteObservers() {\n        obs.removeAllElements();\n    }\n    protected synchronized void setChanged() {\n        changed = true;\n    }\n\n    protected synchronized void clearChanged() {\n        changed = false;\n    }\n    public synchronized boolean hasChanged() {\n        return changed;\n    }\n    public synchronized int countObservers() {\n        return obs.size();\n    }\n}\n\n```\n\n这是被观察者的父类，也就是主题对象，用的`Vector`集合,方法也加了`synchronized`关键字，是多线程安全的。\n\n## 4. 参考\n\n`https://www.cnblogs.com/xrq730/p/4908686.html`","slug":"design_pattern/twelve-observer","published":1,"updated":"2019-03-04T15:36:08.474Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv4b0004b0ww4x2xgoxfo","content":"<p>本文主要介绍了Java23种设计模式中的观察者模式，并结合实例描述了观察者模式的具体实现和优缺点分析。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p><strong>Java设计模式系列文章目录</strong></p>\n<p><a href=\"https://www.lixueduan.com/posts/53093.html\">Java设计模式(一)—单例模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34710.html\">Java设计模式(二)—工厂模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/52453.html\">Java设计模式(三)—建造者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/24b6c0e4.html\">Java设计模式(四)—原型模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/f444ac9.html\">Java设计模式(五)—适配器模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/75903408.html\">Java设计模式(六)—装饰者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/ae2a93bd.html\">Java设计模式(七)—代理模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/22a51705.html\">Java设计模式(八)—外观模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34e634e7.html\">Java设计模式(九)—享元模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a7982bdc.html\">Java设计模式(十)—策略模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/57ae709c.html\">Java设计模式(十一)—模板方法模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/48bcf013.html\">Java设计模式(十二)—观察者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a340063f.html\">Java设计模式(十三)—组合模式</a></p>\n<p>……..</p>\n<p>Demo下载–&gt; <a href=\"https://github.com/illusorycloud/design-pattern\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><blockquote>\n<p>让多个观察者对象同时监听某一个主题对象，这个主题对象在状态上发生变化时，会通知所有观察者对象，使他们能够自动更新自己。<br>在对象之间定义了一对多的依赖，这样一来，当一个对象改变状态，依赖它的对象会收到通知并自动更新。其实就是发布订阅模式，发布者发布信息，订阅者获取信息，订阅了就能收到信息，没订阅就收不到信息。</p>\n</blockquote>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/twelve-observer.jpeg\" alt=\"\"></p>\n<p><strong>该模式包含四个角色</strong></p>\n<ul>\n<li><strong>抽象被观察者角色</strong>：也就是一个抽象主题，它把所有对观察者对象的引用保存在一个集合中，每个主题都可以有任意数量的观察者。抽象主题提供一个接口，可以增加和删除观察者角色。一般用一个抽象类和接口来实现。</li>\n<li><strong>抽象观察者角色</strong>：为所有的具体观察者定义一个接口，在得到主题通知时更新自己。</li>\n<li><strong>具体被观察者角色</strong>：也就是一个具体的主题，在集体主题的内部状态改变时，所有登记过的观察者发出通知。</li>\n<li><strong>具体观察者角色</strong>：实现抽象观察者角色所需要的更新接口，一边使本身的状态与制图的状态相协调。</li>\n</ul>\n<h2 id=\"2-代码实现\"><a href=\"#2-代码实现\" class=\"headerlink\" title=\"2. 代码实现\"></a>2. 代码实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象观察者角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义了一个update()方法，当被观察者调用notifyObservers()方法时，观察者的update()方法会被回调。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 更新消息 由被观察者调用</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> o       被观察者 即消息来源</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> message 收到的消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(Observable o, Message message)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象被观察者接口</span></span><br><span class=\"line\"><span class=\"comment\"> * 声明了添加、删除、通知观察者方法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 被观察者是否有变化</span></span><br><span class=\"line\"><span class=\"comment\">     * 在通知观察者时做判断 若没有发生变化则不通知</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> changed = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Vector集合 线程安全的</span></span><br><span class=\"line\"><span class=\"comment\">     * 用于存放已注册的观察者</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Vector&lt;Observer&gt; obs;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Observable</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        obs = <span class=\"keyword\">new</span> Vector&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注册观察者</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> o 需要注册的观察者</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(Observer o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!obs.contains(o)) &#123;</span><br><span class=\"line\">            obs.addElement(o);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 移除观察者</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> o 被移除的观察者</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteObserver</span><span class=\"params\">(java.util.Observer o)</span> </span>&#123;</span><br><span class=\"line\">        obs.removeElement(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 发通知</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        notifyObservers(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 循环遍历 通知注册的所有的观察者</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> message 发送的消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">(Message message)</span> </span>&#123;</span><br><span class=\"line\">        Object[] arrLocal;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//判断若没有变化则直接返回</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!changed) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arrLocal = obs.toArray();</span><br><span class=\"line\">            clearChanged();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = arrLocal.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            ((Observer) arrLocal[i]).update(<span class=\"keyword\">this</span>, message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 移除所有观察者</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteObservers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        obs.removeAllElements();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * set clear has 设置 清除 获取</span></span><br><span class=\"line\"><span class=\"comment\">     * 观察者状态是否变化 true/false</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">setChanged</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        changed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">clearChanged</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        changed = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasChanged</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> changed;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 已注册观察者的个数</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> count</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">int</span> <span class=\"title\">countObservers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obs.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体观察者角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现update方法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String clientName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Client</span><span class=\"params\">(String clientName, <span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.clientName = clientName;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(Observable o, Message message)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(id + <span class=\"string\">\"号\"</span> + clientName + <span class=\"string\">\"收到&lt;\"</span> + ((Server)o).getName() + <span class=\"string\">\"&gt;推送的消息：\"</span> + message.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体被观察者角色</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 被观察者name 用于区分多个被观察者</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Server</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">(Message message)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//发送消息</span></span><br><span class=\"line\">        <span class=\"keyword\">super</span>.notifyObservers(message);</span><br><span class=\"line\">        <span class=\"comment\">//发送后取消change标志</span></span><br><span class=\"line\">        clearChanged();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 观察者模式 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">observerTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//发送的消息对象</span></span><br><span class=\"line\">        Message message = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//1个被观察者</span></span><br><span class=\"line\">        Server s1 = <span class=\"keyword\">new</span> Server(<span class=\"string\">\"幻境\"</span>);</span><br><span class=\"line\">        Server s2 = <span class=\"keyword\">new</span> Server(<span class=\"string\">\"云图\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//4个观察者</span></span><br><span class=\"line\">        Client c1 = <span class=\"keyword\">new</span> Client(<span class=\"string\">\"大佬\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        Client c2 = <span class=\"keyword\">new</span> Client(<span class=\"string\">\"萌新\"</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        Client c3 = <span class=\"keyword\">new</span> Client(<span class=\"string\">\"菜鸟\"</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">        Client c4 = <span class=\"keyword\">new</span> Client(<span class=\"string\">\"咸鱼\"</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">        <span class=\"comment\">//将4个观察者分别注册到两个被观察者上</span></span><br><span class=\"line\">        s1.addObserver(c1);</span><br><span class=\"line\">        s1.addObserver(c2);</span><br><span class=\"line\">        s2.addObserver(c3);</span><br><span class=\"line\">        s2.addObserver(c4);</span><br><span class=\"line\">        message = Message.newBuilder().setTitle(<span class=\"string\">\"欢迎\"</span>)</span><br><span class=\"line\">                .setContent(<span class=\"string\">\"欢迎关注 &lt;幻境云图&gt;\"</span>)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        <span class=\"comment\">//消息变化后 将被观察者设置为已变化状态</span></span><br><span class=\"line\">        s1.setChanged();</span><br><span class=\"line\">        s2.setChanged();</span><br><span class=\"line\">        <span class=\"comment\">//发送消息</span></span><br><span class=\"line\">        s1.notifyObservers(message);</span><br><span class=\"line\">        s2.notifyObservers(message);</span><br><span class=\"line\">        <span class=\"comment\">//再次发送消息无效 因为change=false</span></span><br><span class=\"line\">        s1.notifyObservers(message);</span><br><span class=\"line\">        s2.notifyObservers(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\"><span class=\"number\">2</span>号萌新收到&lt;幻境&gt;推送的消息：Message&#123;title=<span class=\"string\">'欢迎'</span>, content=<span class=\"string\">'欢迎关注 &lt;幻境云图&gt;'</span>&#125;</span><br><span class=\"line\"><span class=\"number\">1</span>号大佬收到&lt;幻境&gt;推送的消息：Message&#123;title=<span class=\"string\">'欢迎'</span>, content=<span class=\"string\">'欢迎关注 &lt;幻境云图&gt;'</span>&#125;</span><br><span class=\"line\"><span class=\"number\">4</span>号咸鱼收到&lt;云图&gt;推送的消息：Message&#123;title=<span class=\"string\">'欢迎'</span>, content=<span class=\"string\">'欢迎关注 &lt;幻境云图&gt;'</span>&#125;</span><br><span class=\"line\"><span class=\"number\">3</span>号菜鸟收到&lt;云图&gt;推送的消息：Message&#123;title=<span class=\"string\">'欢迎'</span>, content=<span class=\"string\">'欢迎关注 &lt;幻境云图&gt;'</span>&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h2><p><strong>优点：</strong></p>\n<p>1.降低重复代码，使得代码更清晰、更易读、更易扩展</p>\n<p>2.解耦，使得代码可维护性更好，修改代码的时候可以尽量少改地方</p>\n<p><strong>应用场景：</strong></p>\n<p>1.对一个对象状态的更新需要其他对象同步更新</p>\n<p>2.对象仅需要将自己的更新通知给其他对象而不需要知道其他对象的细节，如消息推送.</p>\n<p><strong>观察者模式在Java中的应用及解读</strong></p>\n<p>JDK是有直接支持观察者模式的，就是<code>java.util.Observer</code>这个接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * This method is called whenever the observed object is changed. An</span></span><br><span class=\"line\"><span class=\"comment\">     * application calls an &lt;tt&gt;Observable&lt;/tt&gt; object's</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;code&gt;notifyObservers&lt;/code&gt; method to have all the object's</span></span><br><span class=\"line\"><span class=\"comment\">     * observers notified of the change.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>   o     the observable object.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>   arg   an argument passed to the &lt;code&gt;notifyObservers&lt;/code&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *                 method.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(Observable o, Object arg)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这就是观察者的接口，定义的观察者只需要实现这个接口就可以了。update()方法，被观察者对象的状态发生变化时，被观察者的notifyObservers()方法就会调用这个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> changed = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Vector&lt;Observer&gt; obs;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Observable</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        obs = <span class=\"keyword\">new</span> Vector&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(Observer o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!obs.contains(o)) &#123;</span><br><span class=\"line\">            obs.addElement(o);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteObserver</span><span class=\"params\">(Observer o)</span> </span>&#123;</span><br><span class=\"line\">        obs.removeElement(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        notifyObservers(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">(Object arg)</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        Object[] arrLocal;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!changed)</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            arrLocal = obs.toArray();</span><br><span class=\"line\">            clearChanged();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = arrLocal.length-<span class=\"number\">1</span>; i&gt;=<span class=\"number\">0</span>; i--)</span><br><span class=\"line\">            ((Observer)arrLocal[i]).update(<span class=\"keyword\">this</span>, arg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteObservers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        obs.removeAllElements();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">setChanged</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        changed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">clearChanged</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        changed = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasChanged</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> changed;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">int</span> <span class=\"title\">countObservers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obs.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是被观察者的父类，也就是主题对象，用的<code>Vector</code>集合,方法也加了<code>synchronized</code>关键字，是多线程安全的。</p>\n<h2 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4. 参考\"></a>4. 参考</h2><p><code>https://www.cnblogs.com/xrq730/p/4908686.html</code></p>\n","site":{"data":{}},"excerpt":"<p>本文主要介绍了Java23种设计模式中的观察者模式，并结合实例描述了观察者模式的具体实现和优缺点分析。</p>","more":"<blockquote>\n<p><strong>Java设计模式系列文章目录</strong></p>\n<p><a href=\"https://www.lixueduan.com/posts/53093.html\">Java设计模式(一)—单例模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34710.html\">Java设计模式(二)—工厂模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/52453.html\">Java设计模式(三)—建造者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/24b6c0e4.html\">Java设计模式(四)—原型模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/f444ac9.html\">Java设计模式(五)—适配器模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/75903408.html\">Java设计模式(六)—装饰者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/ae2a93bd.html\">Java设计模式(七)—代理模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/22a51705.html\">Java设计模式(八)—外观模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/34e634e7.html\">Java设计模式(九)—享元模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a7982bdc.html\">Java设计模式(十)—策略模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/57ae709c.html\">Java设计模式(十一)—模板方法模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/48bcf013.html\">Java设计模式(十二)—观察者模式</a></p>\n<p><a href=\"https://www.lixueduan.com/posts/a340063f.html\">Java设计模式(十三)—组合模式</a></p>\n<p>……..</p>\n<p>Demo下载–&gt; <a href=\"https://github.com/illusorycloud/design-pattern\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><blockquote>\n<p>让多个观察者对象同时监听某一个主题对象，这个主题对象在状态上发生变化时，会通知所有观察者对象，使他们能够自动更新自己。<br>在对象之间定义了一对多的依赖，这样一来，当一个对象改变状态，依赖它的对象会收到通知并自动更新。其实就是发布订阅模式，发布者发布信息，订阅者获取信息，订阅了就能收到信息，没订阅就收不到信息。</p>\n</blockquote>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/design_pattern/twelve-observer.jpeg\" alt=\"\"></p>\n<p><strong>该模式包含四个角色</strong></p>\n<ul>\n<li><strong>抽象被观察者角色</strong>：也就是一个抽象主题，它把所有对观察者对象的引用保存在一个集合中，每个主题都可以有任意数量的观察者。抽象主题提供一个接口，可以增加和删除观察者角色。一般用一个抽象类和接口来实现。</li>\n<li><strong>抽象观察者角色</strong>：为所有的具体观察者定义一个接口，在得到主题通知时更新自己。</li>\n<li><strong>具体被观察者角色</strong>：也就是一个具体的主题，在集体主题的内部状态改变时，所有登记过的观察者发出通知。</li>\n<li><strong>具体观察者角色</strong>：实现抽象观察者角色所需要的更新接口，一边使本身的状态与制图的状态相协调。</li>\n</ul>\n<h2 id=\"2-代码实现\"><a href=\"#2-代码实现\" class=\"headerlink\" title=\"2. 代码实现\"></a>2. 代码实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象观察者角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义了一个update()方法，当被观察者调用notifyObservers()方法时，观察者的update()方法会被回调。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 更新消息 由被观察者调用</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> o       被观察者 即消息来源</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> message 收到的消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(Observable o, Message message)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象被观察者接口</span></span><br><span class=\"line\"><span class=\"comment\"> * 声明了添加、删除、通知观察者方法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 被观察者是否有变化</span></span><br><span class=\"line\"><span class=\"comment\">     * 在通知观察者时做判断 若没有发生变化则不通知</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> changed = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Vector集合 线程安全的</span></span><br><span class=\"line\"><span class=\"comment\">     * 用于存放已注册的观察者</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Vector&lt;Observer&gt; obs;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Observable</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        obs = <span class=\"keyword\">new</span> Vector&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注册观察者</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> o 需要注册的观察者</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(Observer o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!obs.contains(o)) &#123;</span><br><span class=\"line\">            obs.addElement(o);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 移除观察者</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> o 被移除的观察者</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteObserver</span><span class=\"params\">(java.util.Observer o)</span> </span>&#123;</span><br><span class=\"line\">        obs.removeElement(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 发通知</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        notifyObservers(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 循环遍历 通知注册的所有的观察者</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> message 发送的消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">(Message message)</span> </span>&#123;</span><br><span class=\"line\">        Object[] arrLocal;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//判断若没有变化则直接返回</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!changed) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arrLocal = obs.toArray();</span><br><span class=\"line\">            clearChanged();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = arrLocal.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            ((Observer) arrLocal[i]).update(<span class=\"keyword\">this</span>, message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 移除所有观察者</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteObservers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        obs.removeAllElements();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * set clear has 设置 清除 获取</span></span><br><span class=\"line\"><span class=\"comment\">     * 观察者状态是否变化 true/false</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">setChanged</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        changed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">clearChanged</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        changed = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasChanged</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> changed;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 已注册观察者的个数</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> count</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">int</span> <span class=\"title\">countObservers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obs.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体观察者角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现update方法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String clientName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Client</span><span class=\"params\">(String clientName, <span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.clientName = clientName;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(Observable o, Message message)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(id + <span class=\"string\">\"号\"</span> + clientName + <span class=\"string\">\"收到&lt;\"</span> + ((Server)o).getName() + <span class=\"string\">\"&gt;推送的消息：\"</span> + message.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体被观察者角色</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 被观察者name 用于区分多个被观察者</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Server</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">(Message message)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//发送消息</span></span><br><span class=\"line\">        <span class=\"keyword\">super</span>.notifyObservers(message);</span><br><span class=\"line\">        <span class=\"comment\">//发送后取消change标志</span></span><br><span class=\"line\">        clearChanged();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 观察者模式 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">observerTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//发送的消息对象</span></span><br><span class=\"line\">        Message message = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//1个被观察者</span></span><br><span class=\"line\">        Server s1 = <span class=\"keyword\">new</span> Server(<span class=\"string\">\"幻境\"</span>);</span><br><span class=\"line\">        Server s2 = <span class=\"keyword\">new</span> Server(<span class=\"string\">\"云图\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//4个观察者</span></span><br><span class=\"line\">        Client c1 = <span class=\"keyword\">new</span> Client(<span class=\"string\">\"大佬\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        Client c2 = <span class=\"keyword\">new</span> Client(<span class=\"string\">\"萌新\"</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        Client c3 = <span class=\"keyword\">new</span> Client(<span class=\"string\">\"菜鸟\"</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">        Client c4 = <span class=\"keyword\">new</span> Client(<span class=\"string\">\"咸鱼\"</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">        <span class=\"comment\">//将4个观察者分别注册到两个被观察者上</span></span><br><span class=\"line\">        s1.addObserver(c1);</span><br><span class=\"line\">        s1.addObserver(c2);</span><br><span class=\"line\">        s2.addObserver(c3);</span><br><span class=\"line\">        s2.addObserver(c4);</span><br><span class=\"line\">        message = Message.newBuilder().setTitle(<span class=\"string\">\"欢迎\"</span>)</span><br><span class=\"line\">                .setContent(<span class=\"string\">\"欢迎关注 &lt;幻境云图&gt;\"</span>)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        <span class=\"comment\">//消息变化后 将被观察者设置为已变化状态</span></span><br><span class=\"line\">        s1.setChanged();</span><br><span class=\"line\">        s2.setChanged();</span><br><span class=\"line\">        <span class=\"comment\">//发送消息</span></span><br><span class=\"line\">        s1.notifyObservers(message);</span><br><span class=\"line\">        s2.notifyObservers(message);</span><br><span class=\"line\">        <span class=\"comment\">//再次发送消息无效 因为change=false</span></span><br><span class=\"line\">        s1.notifyObservers(message);</span><br><span class=\"line\">        s2.notifyObservers(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\"><span class=\"number\">2</span>号萌新收到&lt;幻境&gt;推送的消息：Message&#123;title=<span class=\"string\">'欢迎'</span>, content=<span class=\"string\">'欢迎关注 &lt;幻境云图&gt;'</span>&#125;</span><br><span class=\"line\"><span class=\"number\">1</span>号大佬收到&lt;幻境&gt;推送的消息：Message&#123;title=<span class=\"string\">'欢迎'</span>, content=<span class=\"string\">'欢迎关注 &lt;幻境云图&gt;'</span>&#125;</span><br><span class=\"line\"><span class=\"number\">4</span>号咸鱼收到&lt;云图&gt;推送的消息：Message&#123;title=<span class=\"string\">'欢迎'</span>, content=<span class=\"string\">'欢迎关注 &lt;幻境云图&gt;'</span>&#125;</span><br><span class=\"line\"><span class=\"number\">3</span>号菜鸟收到&lt;云图&gt;推送的消息：Message&#123;title=<span class=\"string\">'欢迎'</span>, content=<span class=\"string\">'欢迎关注 &lt;幻境云图&gt;'</span>&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h2><p><strong>优点：</strong></p>\n<p>1.降低重复代码，使得代码更清晰、更易读、更易扩展</p>\n<p>2.解耦，使得代码可维护性更好，修改代码的时候可以尽量少改地方</p>\n<p><strong>应用场景：</strong></p>\n<p>1.对一个对象状态的更新需要其他对象同步更新</p>\n<p>2.对象仅需要将自己的更新通知给其他对象而不需要知道其他对象的细节，如消息推送.</p>\n<p><strong>观察者模式在Java中的应用及解读</strong></p>\n<p>JDK是有直接支持观察者模式的，就是<code>java.util.Observer</code>这个接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * This method is called whenever the observed object is changed. An</span></span><br><span class=\"line\"><span class=\"comment\">     * application calls an &lt;tt&gt;Observable&lt;/tt&gt; object's</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;code&gt;notifyObservers&lt;/code&gt; method to have all the object's</span></span><br><span class=\"line\"><span class=\"comment\">     * observers notified of the change.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>   o     the observable object.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>   arg   an argument passed to the &lt;code&gt;notifyObservers&lt;/code&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *                 method.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(Observable o, Object arg)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这就是观察者的接口，定义的观察者只需要实现这个接口就可以了。update()方法，被观察者对象的状态发生变化时，被观察者的notifyObservers()方法就会调用这个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> changed = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Vector&lt;Observer&gt; obs;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Observable</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        obs = <span class=\"keyword\">new</span> Vector&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(Observer o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!obs.contains(o)) &#123;</span><br><span class=\"line\">            obs.addElement(o);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteObserver</span><span class=\"params\">(Observer o)</span> </span>&#123;</span><br><span class=\"line\">        obs.removeElement(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        notifyObservers(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">(Object arg)</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        Object[] arrLocal;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!changed)</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            arrLocal = obs.toArray();</span><br><span class=\"line\">            clearChanged();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = arrLocal.length-<span class=\"number\">1</span>; i&gt;=<span class=\"number\">0</span>; i--)</span><br><span class=\"line\">            ((Observer)arrLocal[i]).update(<span class=\"keyword\">this</span>, arg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteObservers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        obs.removeAllElements();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">setChanged</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        changed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">clearChanged</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        changed = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasChanged</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> changed;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">int</span> <span class=\"title\">countObservers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obs.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是被观察者的父类，也就是主题对象，用的<code>Vector</code>集合,方法也加了<code>synchronized</code>关键字，是多线程安全的。</p>\n<h2 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4. 参考\"></a>4. 参考</h2><p><code>https://www.cnblogs.com/xrq730/p/4908686.html</code></p>"},{"title":"Git入门教程","abbrlink":498941,"date":"2019-02-16T04:00:00.000Z","_content":"\n​\t本文主要记录了Git常用的一些命令，和Git基本使用教学，包括了版本库的创建、代码提交、推送、拉取、版本回退、撤销等操作。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 简介\n\n### 1.1 Git简介\n\nGit(读音为/gɪt/。)是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 [1]  Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。\n\n### 1.2 Git工作区概念\n\nGit本地有四个工作区域：`工作目录（Working Directory`）、`暂存区(Stage/Index`)、`版本库(Repository或Commit History)`、`远程仓库(Remote Directory)`。文件在这四个区域之间的转换关系如下：\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/git-work-tree.png)\n\n- **Working Directory**： 工作区，就是你平时存放项目代码的地方，大概就是一个文件夹。\n- **Index / Stage**： 暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息\n- **Repository**： 仓库区（或版本库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本\n- **Remote**： 远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换\n\n### 1.3 工作流程\n\ngit的工作流程一般是这样的：\n\n１、在工作目录中添加、修改文件；\n\n２、将需要进行版本管理的文件放入暂存区域；\n\n３、将暂存区域的文件提交到git仓库。\n\n因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)\n\n### 1.4 文件的四种状态\n\n版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。\n\nGIT不关心文件两个版本之间的具体差别，而是关心文件的整体是否有改变，若文件被改变，在添加提交时就生成文件新版本的快照，而判断文件整体是否改变的方法就是用\n\nSHA-1算法计算文件的校验和。\n\n![img](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/git-file-status.png)\n\n**Untracked:**   未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.\n\n **Unmodify:**   文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified.\n\n​                   如果使用git rm移出版本库, 则成为Untracked文件\n\n  **Modified:** 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过,\n\n​                返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改\n\n​    **Staged:** 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存,\n\n​               文件状态为Modified\n\n 下面的图很好的解释了这四种状态的转变：\n\n![img](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/git-status-change.png)\n\n> 新建文件后 --->Untracked\n>\n> 使用add命令将新建的文件加入到暂存区--->Staged\n>\n> 使用commit命令将暂存区的文件提交到本地仓库--->Unmodified\n>\n> 如果对Unmodified状态的文件进行修改---> modified\n>\n> 如果对Unmodified状态的文件进行remove操作--->Untracked\n\n\n\n## 2. 使用\n\n### 2.1 git配置\n\n使用之前首先要设置账号的。\n\n```shell\ngit config --global user.name  //git中你的用户名 在查看提交历史等地方用到 一般为真实姓名 xxx\ngit config --global user.email //你的邮箱 一般为公司邮箱xxx@xxx.com\n```\n\n查看Git配置信息\n\n```shell\ngit config --list\n```\n\n### 2.2 创建git仓库\n\n#### git init\n\n用 `git init` 在目录中创建新的 Git 仓库。 你可以在任何时候、任何目录中这么做，完全是本地化的。执行后会在当前文件夹中多出一个`.git`文件夹，Git相关信息都在里面。\n\n```shell\n$ git init\nInitialized empty Git repository in C:/Users/13452/Desktop/gitte/.git/\n```\n\n#### git clone\n\n当然，也可以在远程服务器上拉取代码，拷贝一个 Git 仓库到本地\n\n```shell\ngit clone [url]\n例如\ngit clone git@github.com:illusorycloud/design-pattern.git   \n```\n\n### 2.3 代码提交\n\n假如已经通过`git clone`从远程服务器上拉取了一下git仓库到本地了，然后在本地新增了一个`test.txt`文件\n\n#### git status\n\n可以通过`git status` 查看当前文件的状态\n\n由于是新增的文件，还未加入git追踪，所以当前`test.txt`为`Untracked`状态\n\n```shell\n$ git status\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n        test.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\n```\n\n\n\n#### git diff\n\n执行git diff命令来查看文件与之前的区别。\n\n```shell\ngit diff  //查看本地工作区和index区域的文件的区别\ngit diff --cached // 查看Index区域与Repository区域的区别\ngit diff HEAD   //查看所有文件与本地仓库的区别\ngit diff --stat  //只显示摘要而不是全部显示\n```\n\n#### git add\n\n在本地将文件修改完成后`(Working Directory`)使用`git add`命令可将该文件添加到缓存 (`Index`)\n\n```shell\ngit add 文件名  //添加单个文件\ngit add .    //添加所有文件\n\ngit add test.txt   //将test.txt文件添加到Index\n```\n\n#### git commit\n\n在使用 `git add `命令将想要快照的内容写入缓存区， 而执行` git commit `将缓存区内容添加到本地仓库中。(`Repository`)\n\n```shell\ngit commit   //提交Index中的文件 执行后会进入写注释的界面\ngit commit -m\"注释\"   //提交时直接写注释\n\ngit commit -m\"新增test.txt文件\"\n```\n\n#### git push\n\n在执行` git commit `将缓存区内容添加到本地仓库中后，可以使用`git push`将本地的修改推送到服务器上的远程仓库中，这样其他人就可以同步了。\n\n```shell\ngit push [主机名] [分支名]\ngit push origin master  //推送到Orinoco主机的master分支 其中默认的主机名是origin  \n```\n\n#### git reset\n\n撤销命令，git中比较重要的命令之一了。\n\n```shell\ngit reset [恢复等级] [commitId]\n```\n\n##### soft/mixed/hard\n\n`git reset`有三个参数，可以看做是三个恢复等级。\n\n`git reset –soft ` 仅仅将commit回退到了指定的提交 ，只修改`Repository`区域\n`git reset –mixed `用指定的commit覆盖`Repository`区域和`Index区`，之前所有暂存的内容都变为未暂存的状态 (`默认为该参数`)\n\n`git reset –hard `使用指定的commit的内容覆盖`Repository`区域、`Index区`和`工作区`。(**危险！！！ 此操作会丢弃工作区所做的修改！需谨慎！！！**)\n\n##### commidID\n\n表示将要恢复到哪个版本。有如下几种表示法\n\n**HEAD**:表示当前最新的一次提交,`(HEAD^)`表示倒数第二次提交,`(HEAD^^)`表示倒数第三次提交，倒数第100次提交则是`HEAD^^...^^^` 100个`^`,当然不会这么傻，还有另外一种写法`HEAD~100` 就是倒数第100次了。\n\n当然还可以使用具体的`commitID`: \n\n使用`git log`可以查看到提交历史，其中就包含了`commitID`\n\n```shell\n$ git log \n////这个是最新的一次提交的commitId\ncommit 06f1cd144f57c38d6fdbed07616af8ed5d69a9ea(HEAD -> hexo, origin/hexo, origin/HEAD)\nAuthor: lillusory <xueduanli@163.com>\nDate:   Sat Feb 16 17:51:18 2019 +0800\n\n    添加Git工作区概念详解\n\ncommit 8f8908ff3edbba0d24d7eee7682e09d002faee6f   //这个就是commitId\nAuthor: lillusory <xueduanli@163.com>\nDate:   Fri Feb 15 19:10:06 2019 +0800\n\n    fix建造者模式两种写法\n\ncommit 71a44acd12d427f694f554df1d2f26ad59df5978 //这个就是commitId\nAuthor: lillusory <xueduanli@163.com>\nDate:   Fri Feb 15 00:31:33 2019 +0800\n\n    fix 单例模式+Git 常用命令\n\ncommit 099675715979832baa107f9da080bfd38d3d63e0 //这个就是commitId\nAuthor: lillusory <xueduanli@163.com>\nDate:   Thu Feb 14 23:26:10 2019 +0800\n\n```\n\n所以`git reset`有多种写法\n\n```shell\ngit reset HEAD   //Repository和Index恢复到最后一次提交的状态 不影响工作区\ngit reset HEAD test.txt //只恢复test.txt 文件\ngit reset --soft HEAD  //Repository恢复到最后一次提交的状态\ngit reset --hard HEAD  //Repository、Index和工作区都恢复到最后一次提交的状态 丢弃工作区所有内容\ngit reset 099675715979832baa107f9da080bfd38d3d63e0  //恢复到commitID版本 一般不用写完整的commitid 写前几位git就可以分辨出来了\n```\n\n#### git reflog\n\n前面的`git reset`可以恢复到各个版本，但是若恢复到前面的版本了，那么在使用`git log`查看是就找不到后面的提交了，想要恢复到后面的版本时就可以使用`git reflog`查看，该命令可以看到所有的版本改动信息。\n\n```shell\n$ git log\ncommit 86a08a6fbacffcf93f7b4dd94be4a21ca31682c4 (HEAD -> master)\nAuthor: lillusory <xueduanli@163.com>\nDate:   Sat Feb 16 18:29:48 2019 +0800\n\n    新增test.txt\n    \n$ git reflog\n86a08a6 HEAD@{1}: reset: moving to HEAD^\nb9802c7 (HEAD -> master) HEAD@{2}: commit: 添加内容1111\n86a08a6 HEAD@{3}: commit (initial): 新增test.txt\n```\n\n#### git pull\n\n在其他人提交代码后，可以通过`git pull`命令拉取服务器代码到本地。\n\n```shell\ngit pull [主机名] [分支名]\ngit pull origin master  //推送到Orinoco主机的master分支 其中默认的主机名是origin  \n```\n\n### 2.4 分支操作\n\n创建项目后默认在master分支 即主分支 **应保证master分支代码永远是正确的，稳定的，可运行的**\n\n#### 创建分支\n\n实际开发时一般会根据功能创建多个分支\n\n```shell\ngit branch branchName //创建分支branchName\ngit checkout branchName //切换到分支branchName\ngit checkout -b branchName  //创建并切换到分支branchName\n```\n\n#### 合并分支\n\n在新建的分支开发完后需要进行合并，将新的功能代码合并搭到master分支.\n\n```shell\n1.切换到master分支\n\tgit checkout master\n2.把新分支代码合并\n\tgit merge branchName\n```\n\n#### 删除分支\n\n合并完成后即可删除开发时创建的分\n\n```shell\n git branch -d branchName //删除分支branchName\n```\n\n## 3. 常用命令\n\n```shell\n# 新建仓库\ngit init\ngit clone [url]\n\n# 代码提交\ngit add <filename>\ngit commit -m\"注释\"\ngit push \n\n# 版本恢复\ngit reset\n\n# 代码拉取\ngit pull\n\n# 分支操作\ngit branch <branchName>\ngit checkout <branchName>\ngit merge <branchName>\n\n# 信息查看\ngit status\ngit log\ngit reflog\ngit config -l\n```\n\n最后附上一张网上找到的`Git常用命令速查表`\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/git-comand-fast-select.png)\n\n## 4. 参考\n\n`http://www.runoob.com/git/git-basic-operations.html`\n\n`https://www.cnblogs.com/qdhxhz/p/9757390.html`","source":"_posts/git/git-use-guide.md","raw":"---\ntitle: Git入门教程\ntags:\n  - Git\ncategories:\n  - Git\nabbrlink: 498941\ndate: 2019-02-16 12:00:00\n---\n\n​\t本文主要记录了Git常用的一些命令，和Git基本使用教学，包括了版本库的创建、代码提交、推送、拉取、版本回退、撤销等操作。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 简介\n\n### 1.1 Git简介\n\nGit(读音为/gɪt/。)是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 [1]  Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。\n\n### 1.2 Git工作区概念\n\nGit本地有四个工作区域：`工作目录（Working Directory`）、`暂存区(Stage/Index`)、`版本库(Repository或Commit History)`、`远程仓库(Remote Directory)`。文件在这四个区域之间的转换关系如下：\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/git-work-tree.png)\n\n- **Working Directory**： 工作区，就是你平时存放项目代码的地方，大概就是一个文件夹。\n- **Index / Stage**： 暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息\n- **Repository**： 仓库区（或版本库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本\n- **Remote**： 远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换\n\n### 1.3 工作流程\n\ngit的工作流程一般是这样的：\n\n１、在工作目录中添加、修改文件；\n\n２、将需要进行版本管理的文件放入暂存区域；\n\n３、将暂存区域的文件提交到git仓库。\n\n因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)\n\n### 1.4 文件的四种状态\n\n版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。\n\nGIT不关心文件两个版本之间的具体差别，而是关心文件的整体是否有改变，若文件被改变，在添加提交时就生成文件新版本的快照，而判断文件整体是否改变的方法就是用\n\nSHA-1算法计算文件的校验和。\n\n![img](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/git-file-status.png)\n\n**Untracked:**   未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.\n\n **Unmodify:**   文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified.\n\n​                   如果使用git rm移出版本库, 则成为Untracked文件\n\n  **Modified:** 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过,\n\n​                返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改\n\n​    **Staged:** 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存,\n\n​               文件状态为Modified\n\n 下面的图很好的解释了这四种状态的转变：\n\n![img](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/git-status-change.png)\n\n> 新建文件后 --->Untracked\n>\n> 使用add命令将新建的文件加入到暂存区--->Staged\n>\n> 使用commit命令将暂存区的文件提交到本地仓库--->Unmodified\n>\n> 如果对Unmodified状态的文件进行修改---> modified\n>\n> 如果对Unmodified状态的文件进行remove操作--->Untracked\n\n\n\n## 2. 使用\n\n### 2.1 git配置\n\n使用之前首先要设置账号的。\n\n```shell\ngit config --global user.name  //git中你的用户名 在查看提交历史等地方用到 一般为真实姓名 xxx\ngit config --global user.email //你的邮箱 一般为公司邮箱xxx@xxx.com\n```\n\n查看Git配置信息\n\n```shell\ngit config --list\n```\n\n### 2.2 创建git仓库\n\n#### git init\n\n用 `git init` 在目录中创建新的 Git 仓库。 你可以在任何时候、任何目录中这么做，完全是本地化的。执行后会在当前文件夹中多出一个`.git`文件夹，Git相关信息都在里面。\n\n```shell\n$ git init\nInitialized empty Git repository in C:/Users/13452/Desktop/gitte/.git/\n```\n\n#### git clone\n\n当然，也可以在远程服务器上拉取代码，拷贝一个 Git 仓库到本地\n\n```shell\ngit clone [url]\n例如\ngit clone git@github.com:illusorycloud/design-pattern.git   \n```\n\n### 2.3 代码提交\n\n假如已经通过`git clone`从远程服务器上拉取了一下git仓库到本地了，然后在本地新增了一个`test.txt`文件\n\n#### git status\n\n可以通过`git status` 查看当前文件的状态\n\n由于是新增的文件，还未加入git追踪，所以当前`test.txt`为`Untracked`状态\n\n```shell\n$ git status\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n        test.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\n```\n\n\n\n#### git diff\n\n执行git diff命令来查看文件与之前的区别。\n\n```shell\ngit diff  //查看本地工作区和index区域的文件的区别\ngit diff --cached // 查看Index区域与Repository区域的区别\ngit diff HEAD   //查看所有文件与本地仓库的区别\ngit diff --stat  //只显示摘要而不是全部显示\n```\n\n#### git add\n\n在本地将文件修改完成后`(Working Directory`)使用`git add`命令可将该文件添加到缓存 (`Index`)\n\n```shell\ngit add 文件名  //添加单个文件\ngit add .    //添加所有文件\n\ngit add test.txt   //将test.txt文件添加到Index\n```\n\n#### git commit\n\n在使用 `git add `命令将想要快照的内容写入缓存区， 而执行` git commit `将缓存区内容添加到本地仓库中。(`Repository`)\n\n```shell\ngit commit   //提交Index中的文件 执行后会进入写注释的界面\ngit commit -m\"注释\"   //提交时直接写注释\n\ngit commit -m\"新增test.txt文件\"\n```\n\n#### git push\n\n在执行` git commit `将缓存区内容添加到本地仓库中后，可以使用`git push`将本地的修改推送到服务器上的远程仓库中，这样其他人就可以同步了。\n\n```shell\ngit push [主机名] [分支名]\ngit push origin master  //推送到Orinoco主机的master分支 其中默认的主机名是origin  \n```\n\n#### git reset\n\n撤销命令，git中比较重要的命令之一了。\n\n```shell\ngit reset [恢复等级] [commitId]\n```\n\n##### soft/mixed/hard\n\n`git reset`有三个参数，可以看做是三个恢复等级。\n\n`git reset –soft ` 仅仅将commit回退到了指定的提交 ，只修改`Repository`区域\n`git reset –mixed `用指定的commit覆盖`Repository`区域和`Index区`，之前所有暂存的内容都变为未暂存的状态 (`默认为该参数`)\n\n`git reset –hard `使用指定的commit的内容覆盖`Repository`区域、`Index区`和`工作区`。(**危险！！！ 此操作会丢弃工作区所做的修改！需谨慎！！！**)\n\n##### commidID\n\n表示将要恢复到哪个版本。有如下几种表示法\n\n**HEAD**:表示当前最新的一次提交,`(HEAD^)`表示倒数第二次提交,`(HEAD^^)`表示倒数第三次提交，倒数第100次提交则是`HEAD^^...^^^` 100个`^`,当然不会这么傻，还有另外一种写法`HEAD~100` 就是倒数第100次了。\n\n当然还可以使用具体的`commitID`: \n\n使用`git log`可以查看到提交历史，其中就包含了`commitID`\n\n```shell\n$ git log \n////这个是最新的一次提交的commitId\ncommit 06f1cd144f57c38d6fdbed07616af8ed5d69a9ea(HEAD -> hexo, origin/hexo, origin/HEAD)\nAuthor: lillusory <xueduanli@163.com>\nDate:   Sat Feb 16 17:51:18 2019 +0800\n\n    添加Git工作区概念详解\n\ncommit 8f8908ff3edbba0d24d7eee7682e09d002faee6f   //这个就是commitId\nAuthor: lillusory <xueduanli@163.com>\nDate:   Fri Feb 15 19:10:06 2019 +0800\n\n    fix建造者模式两种写法\n\ncommit 71a44acd12d427f694f554df1d2f26ad59df5978 //这个就是commitId\nAuthor: lillusory <xueduanli@163.com>\nDate:   Fri Feb 15 00:31:33 2019 +0800\n\n    fix 单例模式+Git 常用命令\n\ncommit 099675715979832baa107f9da080bfd38d3d63e0 //这个就是commitId\nAuthor: lillusory <xueduanli@163.com>\nDate:   Thu Feb 14 23:26:10 2019 +0800\n\n```\n\n所以`git reset`有多种写法\n\n```shell\ngit reset HEAD   //Repository和Index恢复到最后一次提交的状态 不影响工作区\ngit reset HEAD test.txt //只恢复test.txt 文件\ngit reset --soft HEAD  //Repository恢复到最后一次提交的状态\ngit reset --hard HEAD  //Repository、Index和工作区都恢复到最后一次提交的状态 丢弃工作区所有内容\ngit reset 099675715979832baa107f9da080bfd38d3d63e0  //恢复到commitID版本 一般不用写完整的commitid 写前几位git就可以分辨出来了\n```\n\n#### git reflog\n\n前面的`git reset`可以恢复到各个版本，但是若恢复到前面的版本了，那么在使用`git log`查看是就找不到后面的提交了，想要恢复到后面的版本时就可以使用`git reflog`查看，该命令可以看到所有的版本改动信息。\n\n```shell\n$ git log\ncommit 86a08a6fbacffcf93f7b4dd94be4a21ca31682c4 (HEAD -> master)\nAuthor: lillusory <xueduanli@163.com>\nDate:   Sat Feb 16 18:29:48 2019 +0800\n\n    新增test.txt\n    \n$ git reflog\n86a08a6 HEAD@{1}: reset: moving to HEAD^\nb9802c7 (HEAD -> master) HEAD@{2}: commit: 添加内容1111\n86a08a6 HEAD@{3}: commit (initial): 新增test.txt\n```\n\n#### git pull\n\n在其他人提交代码后，可以通过`git pull`命令拉取服务器代码到本地。\n\n```shell\ngit pull [主机名] [分支名]\ngit pull origin master  //推送到Orinoco主机的master分支 其中默认的主机名是origin  \n```\n\n### 2.4 分支操作\n\n创建项目后默认在master分支 即主分支 **应保证master分支代码永远是正确的，稳定的，可运行的**\n\n#### 创建分支\n\n实际开发时一般会根据功能创建多个分支\n\n```shell\ngit branch branchName //创建分支branchName\ngit checkout branchName //切换到分支branchName\ngit checkout -b branchName  //创建并切换到分支branchName\n```\n\n#### 合并分支\n\n在新建的分支开发完后需要进行合并，将新的功能代码合并搭到master分支.\n\n```shell\n1.切换到master分支\n\tgit checkout master\n2.把新分支代码合并\n\tgit merge branchName\n```\n\n#### 删除分支\n\n合并完成后即可删除开发时创建的分\n\n```shell\n git branch -d branchName //删除分支branchName\n```\n\n## 3. 常用命令\n\n```shell\n# 新建仓库\ngit init\ngit clone [url]\n\n# 代码提交\ngit add <filename>\ngit commit -m\"注释\"\ngit push \n\n# 版本恢复\ngit reset\n\n# 代码拉取\ngit pull\n\n# 分支操作\ngit branch <branchName>\ngit checkout <branchName>\ngit merge <branchName>\n\n# 信息查看\ngit status\ngit log\ngit reflog\ngit config -l\n```\n\n最后附上一张网上找到的`Git常用命令速查表`\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/git-comand-fast-select.png)\n\n## 4. 参考\n\n`http://www.runoob.com/git/git-basic-operations.html`\n\n`https://www.cnblogs.com/qdhxhz/p/9757390.html`","slug":"git/git-use-guide","published":1,"updated":"2019-02-16T12:50:08.327Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv4b3004e0ww4dngeoqa7","content":"<p>​    本文主要记录了Git常用的一些命令，和Git基本使用教学，包括了版本库的创建、代码提交、推送、拉取、版本回退、撤销等操作。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><h3 id=\"1-1-Git简介\"><a href=\"#1-1-Git简介\" class=\"headerlink\" title=\"1.1 Git简介\"></a>1.1 Git简介</h3><p>Git(读音为/gɪt/。)是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 [1]  Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p>\n<h3 id=\"1-2-Git工作区概念\"><a href=\"#1-2-Git工作区概念\" class=\"headerlink\" title=\"1.2 Git工作区概念\"></a>1.2 Git工作区概念</h3><p>Git本地有四个工作区域：<code>工作目录（Working Directory</code>）、<code>暂存区(Stage/Index</code>)、<code>版本库(Repository或Commit History)</code>、<code>远程仓库(Remote Directory)</code>。文件在这四个区域之间的转换关系如下：</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/git-work-tree.png\" alt=\"\"></p>\n<ul>\n<li><strong>Working Directory</strong>： 工作区，就是你平时存放项目代码的地方，大概就是一个文件夹。</li>\n<li><strong>Index / Stage</strong>： 暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li>\n<li><strong>Repository</strong>： 仓库区（或版本库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li>\n<li><strong>Remote</strong>： 远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li>\n</ul>\n<h3 id=\"1-3-工作流程\"><a href=\"#1-3-工作流程\" class=\"headerlink\" title=\"1.3 工作流程\"></a>1.3 工作流程</h3><p>git的工作流程一般是这样的：</p>\n<p>１、在工作目录中添加、修改文件；</p>\n<p>２、将需要进行版本管理的文件放入暂存区域；</p>\n<p>３、将暂存区域的文件提交到git仓库。</p>\n<p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)</p>\n<h3 id=\"1-4-文件的四种状态\"><a href=\"#1-4-文件的四种状态\" class=\"headerlink\" title=\"1.4 文件的四种状态\"></a>1.4 文件的四种状态</h3><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p>\n<p>GIT不关心文件两个版本之间的具体差别，而是关心文件的整体是否有改变，若文件被改变，在添加提交时就生成文件新版本的快照，而判断文件整体是否改变的方法就是用</p>\n<p>SHA-1算法计算文件的校验和。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/git-file-status.png\" alt=\"img\"></p>\n<p><strong>Untracked:</strong>   未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</p>\n<p> <strong>Unmodify:</strong>   文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified.</p>\n<p>​                   如果使用git rm移出版本库, 则成为Untracked文件</p>\n<p>  <strong>Modified:</strong> 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过,</p>\n<p>​                返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改</p>\n<p>​    <strong>Staged:</strong> 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存,</p>\n<p>​               文件状态为Modified</p>\n<p> 下面的图很好的解释了这四种状态的转变：</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/git-status-change.png\" alt=\"img\"></p>\n<blockquote>\n<p>新建文件后 —&gt;Untracked</p>\n<p>使用add命令将新建的文件加入到暂存区—&gt;Staged</p>\n<p>使用commit命令将暂存区的文件提交到本地仓库—&gt;Unmodified</p>\n<p>如果对Unmodified状态的文件进行修改—&gt; modified</p>\n<p>如果对Unmodified状态的文件进行remove操作—&gt;Untracked</p>\n</blockquote>\n<h2 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用\"></a>2. 使用</h2><h3 id=\"2-1-git配置\"><a href=\"#2-1-git配置\" class=\"headerlink\" title=\"2.1 git配置\"></a>2.1 git配置</h3><p>使用之前首先要设置账号的。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name  //git中你的用户名 在查看提交历史等地方用到 一般为真实姓名 xxx</span><br><span class=\"line\">git config --global user.email //你的邮箱 一般为公司邮箱xxx@xxx.com</span><br></pre></td></tr></table></figure>\n<p>查看Git配置信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --list</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-创建git仓库\"><a href=\"#2-2-创建git仓库\" class=\"headerlink\" title=\"2.2 创建git仓库\"></a>2.2 创建git仓库</h3><h4 id=\"git-init\"><a href=\"#git-init\" class=\"headerlink\" title=\"git init\"></a>git init</h4><p>用 <code>git init</code> 在目录中创建新的 Git 仓库。 你可以在任何时候、任何目录中这么做，完全是本地化的。执行后会在当前文件夹中多出一个<code>.git</code>文件夹，Git相关信息都在里面。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git init</span><br><span class=\"line\">Initialized empty Git repository in C:/Users/13452/Desktop/gitte/.git/</span><br></pre></td></tr></table></figure>\n<h4 id=\"git-clone\"><a href=\"#git-clone\" class=\"headerlink\" title=\"git clone\"></a>git clone</h4><p>当然，也可以在远程服务器上拉取代码，拷贝一个 Git 仓库到本地</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone [url]</span><br><span class=\"line\">例如</span><br><span class=\"line\">git clone git@github.com:illusorycloud/design-pattern.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-代码提交\"><a href=\"#2-3-代码提交\" class=\"headerlink\" title=\"2.3 代码提交\"></a>2.3 代码提交</h3><p>假如已经通过<code>git clone</code>从远程服务器上拉取了一下git仓库到本地了，然后在本地新增了一个<code>test.txt</code>文件</p>\n<h4 id=\"git-status\"><a href=\"#git-status\" class=\"headerlink\" title=\"git status\"></a>git status</h4><p>可以通过<code>git status</code> 查看当前文件的状态</p>\n<p>由于是新增的文件，还未加入git追踪，所以当前<code>test.txt</code>为<code>Untracked</code>状态</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\"></span><br><span class=\"line\">No commits yet</span><br><span class=\"line\"></span><br><span class=\"line\">Untracked files:</span><br><span class=\"line\">  (use \"git add &lt;file&gt;...\" to include in what will be committed)</span><br><span class=\"line\"></span><br><span class=\"line\">        test.txt</span><br><span class=\"line\"></span><br><span class=\"line\">nothing added to commit but untracked files present (use \"git add\" to track)</span><br></pre></td></tr></table></figure>\n<h4 id=\"git-diff\"><a href=\"#git-diff\" class=\"headerlink\" title=\"git diff\"></a>git diff</h4><p>执行git diff命令来查看文件与之前的区别。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff  //查看本地工作区和index区域的文件的区别</span><br><span class=\"line\">git diff --cached // 查看Index区域与Repository区域的区别</span><br><span class=\"line\">git diff HEAD   //查看所有文件与本地仓库的区别</span><br><span class=\"line\">git diff --stat  //只显示摘要而不是全部显示</span><br></pre></td></tr></table></figure>\n<h4 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"git add\"></a>git add</h4><p>在本地将文件修改完成后<code>(Working Directory</code>)使用<code>git add</code>命令可将该文件添加到缓存 (<code>Index</code>)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add 文件名  //添加单个文件</span><br><span class=\"line\">git add .    //添加所有文件</span><br><span class=\"line\"></span><br><span class=\"line\">git add test.txt   //将test.txt文件添加到Index</span><br></pre></td></tr></table></figure>\n<h4 id=\"git-commit\"><a href=\"#git-commit\" class=\"headerlink\" title=\"git commit\"></a>git commit</h4><p>在使用 <code>git add</code>命令将想要快照的内容写入缓存区， 而执行<code>git commit</code>将缓存区内容添加到本地仓库中。(<code>Repository</code>)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit   //提交Index中的文件 执行后会进入写注释的界面</span><br><span class=\"line\">git commit -m\"注释\"   //提交时直接写注释</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m\"新增test.txt文件\"</span><br></pre></td></tr></table></figure>\n<h4 id=\"git-push\"><a href=\"#git-push\" class=\"headerlink\" title=\"git push\"></a>git push</h4><p>在执行<code>git commit</code>将缓存区内容添加到本地仓库中后，可以使用<code>git push</code>将本地的修改推送到服务器上的远程仓库中，这样其他人就可以同步了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push [主机名] [分支名]</span><br><span class=\"line\">git push origin master  //推送到Orinoco主机的master分支 其中默认的主机名是origin</span><br></pre></td></tr></table></figure>\n<h4 id=\"git-reset\"><a href=\"#git-reset\" class=\"headerlink\" title=\"git reset\"></a>git reset</h4><p>撤销命令，git中比较重要的命令之一了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset [恢复等级] [commitId]</span><br></pre></td></tr></table></figure>\n<h5 id=\"soft-mixed-hard\"><a href=\"#soft-mixed-hard\" class=\"headerlink\" title=\"soft/mixed/hard\"></a>soft/mixed/hard</h5><p><code>git reset</code>有三个参数，可以看做是三个恢复等级。</p>\n<p><code>git reset –soft</code> 仅仅将commit回退到了指定的提交 ，只修改<code>Repository</code>区域<br><code>git reset –mixed</code>用指定的commit覆盖<code>Repository</code>区域和<code>Index区</code>，之前所有暂存的内容都变为未暂存的状态 (<code>默认为该参数</code>)</p>\n<p><code>git reset –hard</code>使用指定的commit的内容覆盖<code>Repository</code>区域、<code>Index区</code>和<code>工作区</code>。(<strong>危险！！！ 此操作会丢弃工作区所做的修改！需谨慎！！！</strong>)</p>\n<h5 id=\"commidID\"><a href=\"#commidID\" class=\"headerlink\" title=\"commidID\"></a>commidID</h5><p>表示将要恢复到哪个版本。有如下几种表示法</p>\n<p><strong>HEAD</strong>:表示当前最新的一次提交,<code>(HEAD^)</code>表示倒数第二次提交,<code>(HEAD^^)</code>表示倒数第三次提交，倒数第100次提交则是<code>HEAD^^...^^^</code> 100个<code>^</code>,当然不会这么傻，还有另外一种写法<code>HEAD~100</code> 就是倒数第100次了。</p>\n<p>当然还可以使用具体的<code>commitID</code>: </p>\n<p>使用<code>git log</code>可以查看到提交历史，其中就包含了<code>commitID</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git log </span><br><span class=\"line\">////这个是最新的一次提交的commitId</span><br><span class=\"line\">commit 06f1cd144f57c38d6fdbed07616af8ed5d69a9ea(HEAD -&gt; hexo, origin/hexo, origin/HEAD)</span><br><span class=\"line\">Author: lillusory &lt;xueduanli@163.com&gt;</span><br><span class=\"line\">Date:   Sat Feb 16 17:51:18 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    添加Git工作区概念详解</span><br><span class=\"line\"></span><br><span class=\"line\">commit 8f8908ff3edbba0d24d7eee7682e09d002faee6f   //这个就是commitId</span><br><span class=\"line\">Author: lillusory &lt;xueduanli@163.com&gt;</span><br><span class=\"line\">Date:   Fri Feb 15 19:10:06 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    fix建造者模式两种写法</span><br><span class=\"line\"></span><br><span class=\"line\">commit 71a44acd12d427f694f554df1d2f26ad59df5978 //这个就是commitId</span><br><span class=\"line\">Author: lillusory &lt;xueduanli@163.com&gt;</span><br><span class=\"line\">Date:   Fri Feb 15 00:31:33 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    fix 单例模式+Git 常用命令</span><br><span class=\"line\"></span><br><span class=\"line\">commit 099675715979832baa107f9da080bfd38d3d63e0 //这个就是commitId</span><br><span class=\"line\">Author: lillusory &lt;xueduanli@163.com&gt;</span><br><span class=\"line\">Date:   Thu Feb 14 23:26:10 2019 +0800</span><br></pre></td></tr></table></figure>\n<p>所以<code>git reset</code>有多种写法</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset HEAD   //Repository和Index恢复到最后一次提交的状态 不影响工作区</span><br><span class=\"line\">git reset HEAD test.txt //只恢复test.txt 文件</span><br><span class=\"line\">git reset --soft HEAD  //Repository恢复到最后一次提交的状态</span><br><span class=\"line\">git reset --hard HEAD  //Repository、Index和工作区都恢复到最后一次提交的状态 丢弃工作区所有内容</span><br><span class=\"line\">git reset 099675715979832baa107f9da080bfd38d3d63e0  //恢复到commitID版本 一般不用写完整的commitid 写前几位git就可以分辨出来了</span><br></pre></td></tr></table></figure>\n<h4 id=\"git-reflog\"><a href=\"#git-reflog\" class=\"headerlink\" title=\"git reflog\"></a>git reflog</h4><p>前面的<code>git reset</code>可以恢复到各个版本，但是若恢复到前面的版本了，那么在使用<code>git log</code>查看是就找不到后面的提交了，想要恢复到后面的版本时就可以使用<code>git reflog</code>查看，该命令可以看到所有的版本改动信息。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git log</span><br><span class=\"line\">commit 86a08a6fbacffcf93f7b4dd94be4a21ca31682c4 (HEAD -&gt; master)</span><br><span class=\"line\">Author: lillusory &lt;xueduanli@163.com&gt;</span><br><span class=\"line\">Date:   Sat Feb 16 18:29:48 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    新增test.txt</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">$</span> git reflog</span><br><span class=\"line\">86a08a6 HEAD@&#123;1&#125;: reset: moving to HEAD^</span><br><span class=\"line\">b9802c7 (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: 添加内容1111</span><br><span class=\"line\">86a08a6 HEAD@&#123;3&#125;: commit (initial): 新增test.txt</span><br></pre></td></tr></table></figure>\n<h4 id=\"git-pull\"><a href=\"#git-pull\" class=\"headerlink\" title=\"git pull\"></a>git pull</h4><p>在其他人提交代码后，可以通过<code>git pull</code>命令拉取服务器代码到本地。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull [主机名] [分支名]</span><br><span class=\"line\">git pull origin master  //推送到Orinoco主机的master分支 其中默认的主机名是origin</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-4-分支操作\"><a href=\"#2-4-分支操作\" class=\"headerlink\" title=\"2.4 分支操作\"></a>2.4 分支操作</h3><p>创建项目后默认在master分支 即主分支 <strong>应保证master分支代码永远是正确的，稳定的，可运行的</strong></p>\n<h4 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h4><p>实际开发时一般会根据功能创建多个分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch branchName //创建分支branchName</span><br><span class=\"line\">git checkout branchName //切换到分支branchName</span><br><span class=\"line\">git checkout -b branchName  //创建并切换到分支branchName</span><br></pre></td></tr></table></figure>\n<h4 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h4><p>在新建的分支开发完后需要进行合并，将新的功能代码合并搭到master分支.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.切换到master分支</span><br><span class=\"line\">\tgit checkout master</span><br><span class=\"line\">2.把新分支代码合并</span><br><span class=\"line\">\tgit merge branchName</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h4><p>合并完成后即可删除开发时创建的分</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d branchName //删除分支branchName</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-常用命令\"><a href=\"#3-常用命令\" class=\"headerlink\" title=\"3. 常用命令\"></a>3. 常用命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 新建仓库</span><br><span class=\"line\">git init</span><br><span class=\"line\">git clone [url]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 代码提交</span><br><span class=\"line\">git add &lt;filename&gt;</span><br><span class=\"line\">git commit -m\"注释\"</span><br><span class=\"line\">git push </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 版本恢复</span><br><span class=\"line\">git reset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 代码拉取</span><br><span class=\"line\">git pull</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 分支操作</span><br><span class=\"line\">git branch &lt;branchName&gt;</span><br><span class=\"line\">git checkout &lt;branchName&gt;</span><br><span class=\"line\">git merge &lt;branchName&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 信息查看</span><br><span class=\"line\">git status</span><br><span class=\"line\">git log</span><br><span class=\"line\">git reflog</span><br><span class=\"line\">git config -l</span><br></pre></td></tr></table></figure>\n<p>最后附上一张网上找到的<code>Git常用命令速查表</code></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/git-comand-fast-select.png\" alt=\"\"></p>\n<h2 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4. 参考\"></a>4. 参考</h2><p><code>http://www.runoob.com/git/git-basic-operations.html</code></p>\n<p><code>https://www.cnblogs.com/qdhxhz/p/9757390.html</code></p>\n","site":{"data":{}},"excerpt":"<p>​    本文主要记录了Git常用的一些命令，和Git基本使用教学，包括了版本库的创建、代码提交、推送、拉取、版本回退、撤销等操作。</p>","more":"<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><h3 id=\"1-1-Git简介\"><a href=\"#1-1-Git简介\" class=\"headerlink\" title=\"1.1 Git简介\"></a>1.1 Git简介</h3><p>Git(读音为/gɪt/。)是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 [1]  Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p>\n<h3 id=\"1-2-Git工作区概念\"><a href=\"#1-2-Git工作区概念\" class=\"headerlink\" title=\"1.2 Git工作区概念\"></a>1.2 Git工作区概念</h3><p>Git本地有四个工作区域：<code>工作目录（Working Directory</code>）、<code>暂存区(Stage/Index</code>)、<code>版本库(Repository或Commit History)</code>、<code>远程仓库(Remote Directory)</code>。文件在这四个区域之间的转换关系如下：</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/git-work-tree.png\" alt=\"\"></p>\n<ul>\n<li><strong>Working Directory</strong>： 工作区，就是你平时存放项目代码的地方，大概就是一个文件夹。</li>\n<li><strong>Index / Stage</strong>： 暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li>\n<li><strong>Repository</strong>： 仓库区（或版本库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li>\n<li><strong>Remote</strong>： 远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li>\n</ul>\n<h3 id=\"1-3-工作流程\"><a href=\"#1-3-工作流程\" class=\"headerlink\" title=\"1.3 工作流程\"></a>1.3 工作流程</h3><p>git的工作流程一般是这样的：</p>\n<p>１、在工作目录中添加、修改文件；</p>\n<p>２、将需要进行版本管理的文件放入暂存区域；</p>\n<p>３、将暂存区域的文件提交到git仓库。</p>\n<p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)</p>\n<h3 id=\"1-4-文件的四种状态\"><a href=\"#1-4-文件的四种状态\" class=\"headerlink\" title=\"1.4 文件的四种状态\"></a>1.4 文件的四种状态</h3><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p>\n<p>GIT不关心文件两个版本之间的具体差别，而是关心文件的整体是否有改变，若文件被改变，在添加提交时就生成文件新版本的快照，而判断文件整体是否改变的方法就是用</p>\n<p>SHA-1算法计算文件的校验和。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/git-file-status.png\" alt=\"img\"></p>\n<p><strong>Untracked:</strong>   未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</p>\n<p> <strong>Unmodify:</strong>   文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified.</p>\n<p>​                   如果使用git rm移出版本库, 则成为Untracked文件</p>\n<p>  <strong>Modified:</strong> 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过,</p>\n<p>​                返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改</p>\n<p>​    <strong>Staged:</strong> 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存,</p>\n<p>​               文件状态为Modified</p>\n<p> 下面的图很好的解释了这四种状态的转变：</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/git-status-change.png\" alt=\"img\"></p>\n<blockquote>\n<p>新建文件后 —&gt;Untracked</p>\n<p>使用add命令将新建的文件加入到暂存区—&gt;Staged</p>\n<p>使用commit命令将暂存区的文件提交到本地仓库—&gt;Unmodified</p>\n<p>如果对Unmodified状态的文件进行修改—&gt; modified</p>\n<p>如果对Unmodified状态的文件进行remove操作—&gt;Untracked</p>\n</blockquote>\n<h2 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用\"></a>2. 使用</h2><h3 id=\"2-1-git配置\"><a href=\"#2-1-git配置\" class=\"headerlink\" title=\"2.1 git配置\"></a>2.1 git配置</h3><p>使用之前首先要设置账号的。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name  //git中你的用户名 在查看提交历史等地方用到 一般为真实姓名 xxx</span><br><span class=\"line\">git config --global user.email //你的邮箱 一般为公司邮箱xxx@xxx.com</span><br></pre></td></tr></table></figure>\n<p>查看Git配置信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --list</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-创建git仓库\"><a href=\"#2-2-创建git仓库\" class=\"headerlink\" title=\"2.2 创建git仓库\"></a>2.2 创建git仓库</h3><h4 id=\"git-init\"><a href=\"#git-init\" class=\"headerlink\" title=\"git init\"></a>git init</h4><p>用 <code>git init</code> 在目录中创建新的 Git 仓库。 你可以在任何时候、任何目录中这么做，完全是本地化的。执行后会在当前文件夹中多出一个<code>.git</code>文件夹，Git相关信息都在里面。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git init</span><br><span class=\"line\">Initialized empty Git repository in C:/Users/13452/Desktop/gitte/.git/</span><br></pre></td></tr></table></figure>\n<h4 id=\"git-clone\"><a href=\"#git-clone\" class=\"headerlink\" title=\"git clone\"></a>git clone</h4><p>当然，也可以在远程服务器上拉取代码，拷贝一个 Git 仓库到本地</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone [url]</span><br><span class=\"line\">例如</span><br><span class=\"line\">git clone git@github.com:illusorycloud/design-pattern.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-代码提交\"><a href=\"#2-3-代码提交\" class=\"headerlink\" title=\"2.3 代码提交\"></a>2.3 代码提交</h3><p>假如已经通过<code>git clone</code>从远程服务器上拉取了一下git仓库到本地了，然后在本地新增了一个<code>test.txt</code>文件</p>\n<h4 id=\"git-status\"><a href=\"#git-status\" class=\"headerlink\" title=\"git status\"></a>git status</h4><p>可以通过<code>git status</code> 查看当前文件的状态</p>\n<p>由于是新增的文件，还未加入git追踪，所以当前<code>test.txt</code>为<code>Untracked</code>状态</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\"></span><br><span class=\"line\">No commits yet</span><br><span class=\"line\"></span><br><span class=\"line\">Untracked files:</span><br><span class=\"line\">  (use \"git add &lt;file&gt;...\" to include in what will be committed)</span><br><span class=\"line\"></span><br><span class=\"line\">        test.txt</span><br><span class=\"line\"></span><br><span class=\"line\">nothing added to commit but untracked files present (use \"git add\" to track)</span><br></pre></td></tr></table></figure>\n<h4 id=\"git-diff\"><a href=\"#git-diff\" class=\"headerlink\" title=\"git diff\"></a>git diff</h4><p>执行git diff命令来查看文件与之前的区别。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff  //查看本地工作区和index区域的文件的区别</span><br><span class=\"line\">git diff --cached // 查看Index区域与Repository区域的区别</span><br><span class=\"line\">git diff HEAD   //查看所有文件与本地仓库的区别</span><br><span class=\"line\">git diff --stat  //只显示摘要而不是全部显示</span><br></pre></td></tr></table></figure>\n<h4 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"git add\"></a>git add</h4><p>在本地将文件修改完成后<code>(Working Directory</code>)使用<code>git add</code>命令可将该文件添加到缓存 (<code>Index</code>)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add 文件名  //添加单个文件</span><br><span class=\"line\">git add .    //添加所有文件</span><br><span class=\"line\"></span><br><span class=\"line\">git add test.txt   //将test.txt文件添加到Index</span><br></pre></td></tr></table></figure>\n<h4 id=\"git-commit\"><a href=\"#git-commit\" class=\"headerlink\" title=\"git commit\"></a>git commit</h4><p>在使用 <code>git add</code>命令将想要快照的内容写入缓存区， 而执行<code>git commit</code>将缓存区内容添加到本地仓库中。(<code>Repository</code>)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit   //提交Index中的文件 执行后会进入写注释的界面</span><br><span class=\"line\">git commit -m\"注释\"   //提交时直接写注释</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m\"新增test.txt文件\"</span><br></pre></td></tr></table></figure>\n<h4 id=\"git-push\"><a href=\"#git-push\" class=\"headerlink\" title=\"git push\"></a>git push</h4><p>在执行<code>git commit</code>将缓存区内容添加到本地仓库中后，可以使用<code>git push</code>将本地的修改推送到服务器上的远程仓库中，这样其他人就可以同步了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push [主机名] [分支名]</span><br><span class=\"line\">git push origin master  //推送到Orinoco主机的master分支 其中默认的主机名是origin</span><br></pre></td></tr></table></figure>\n<h4 id=\"git-reset\"><a href=\"#git-reset\" class=\"headerlink\" title=\"git reset\"></a>git reset</h4><p>撤销命令，git中比较重要的命令之一了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset [恢复等级] [commitId]</span><br></pre></td></tr></table></figure>\n<h5 id=\"soft-mixed-hard\"><a href=\"#soft-mixed-hard\" class=\"headerlink\" title=\"soft/mixed/hard\"></a>soft/mixed/hard</h5><p><code>git reset</code>有三个参数，可以看做是三个恢复等级。</p>\n<p><code>git reset –soft</code> 仅仅将commit回退到了指定的提交 ，只修改<code>Repository</code>区域<br><code>git reset –mixed</code>用指定的commit覆盖<code>Repository</code>区域和<code>Index区</code>，之前所有暂存的内容都变为未暂存的状态 (<code>默认为该参数</code>)</p>\n<p><code>git reset –hard</code>使用指定的commit的内容覆盖<code>Repository</code>区域、<code>Index区</code>和<code>工作区</code>。(<strong>危险！！！ 此操作会丢弃工作区所做的修改！需谨慎！！！</strong>)</p>\n<h5 id=\"commidID\"><a href=\"#commidID\" class=\"headerlink\" title=\"commidID\"></a>commidID</h5><p>表示将要恢复到哪个版本。有如下几种表示法</p>\n<p><strong>HEAD</strong>:表示当前最新的一次提交,<code>(HEAD^)</code>表示倒数第二次提交,<code>(HEAD^^)</code>表示倒数第三次提交，倒数第100次提交则是<code>HEAD^^...^^^</code> 100个<code>^</code>,当然不会这么傻，还有另外一种写法<code>HEAD~100</code> 就是倒数第100次了。</p>\n<p>当然还可以使用具体的<code>commitID</code>: </p>\n<p>使用<code>git log</code>可以查看到提交历史，其中就包含了<code>commitID</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git log </span><br><span class=\"line\">////这个是最新的一次提交的commitId</span><br><span class=\"line\">commit 06f1cd144f57c38d6fdbed07616af8ed5d69a9ea(HEAD -&gt; hexo, origin/hexo, origin/HEAD)</span><br><span class=\"line\">Author: lillusory &lt;xueduanli@163.com&gt;</span><br><span class=\"line\">Date:   Sat Feb 16 17:51:18 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    添加Git工作区概念详解</span><br><span class=\"line\"></span><br><span class=\"line\">commit 8f8908ff3edbba0d24d7eee7682e09d002faee6f   //这个就是commitId</span><br><span class=\"line\">Author: lillusory &lt;xueduanli@163.com&gt;</span><br><span class=\"line\">Date:   Fri Feb 15 19:10:06 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    fix建造者模式两种写法</span><br><span class=\"line\"></span><br><span class=\"line\">commit 71a44acd12d427f694f554df1d2f26ad59df5978 //这个就是commitId</span><br><span class=\"line\">Author: lillusory &lt;xueduanli@163.com&gt;</span><br><span class=\"line\">Date:   Fri Feb 15 00:31:33 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    fix 单例模式+Git 常用命令</span><br><span class=\"line\"></span><br><span class=\"line\">commit 099675715979832baa107f9da080bfd38d3d63e0 //这个就是commitId</span><br><span class=\"line\">Author: lillusory &lt;xueduanli@163.com&gt;</span><br><span class=\"line\">Date:   Thu Feb 14 23:26:10 2019 +0800</span><br></pre></td></tr></table></figure>\n<p>所以<code>git reset</code>有多种写法</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset HEAD   //Repository和Index恢复到最后一次提交的状态 不影响工作区</span><br><span class=\"line\">git reset HEAD test.txt //只恢复test.txt 文件</span><br><span class=\"line\">git reset --soft HEAD  //Repository恢复到最后一次提交的状态</span><br><span class=\"line\">git reset --hard HEAD  //Repository、Index和工作区都恢复到最后一次提交的状态 丢弃工作区所有内容</span><br><span class=\"line\">git reset 099675715979832baa107f9da080bfd38d3d63e0  //恢复到commitID版本 一般不用写完整的commitid 写前几位git就可以分辨出来了</span><br></pre></td></tr></table></figure>\n<h4 id=\"git-reflog\"><a href=\"#git-reflog\" class=\"headerlink\" title=\"git reflog\"></a>git reflog</h4><p>前面的<code>git reset</code>可以恢复到各个版本，但是若恢复到前面的版本了，那么在使用<code>git log</code>查看是就找不到后面的提交了，想要恢复到后面的版本时就可以使用<code>git reflog</code>查看，该命令可以看到所有的版本改动信息。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git log</span><br><span class=\"line\">commit 86a08a6fbacffcf93f7b4dd94be4a21ca31682c4 (HEAD -&gt; master)</span><br><span class=\"line\">Author: lillusory &lt;xueduanli@163.com&gt;</span><br><span class=\"line\">Date:   Sat Feb 16 18:29:48 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    新增test.txt</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">$</span> git reflog</span><br><span class=\"line\">86a08a6 HEAD@&#123;1&#125;: reset: moving to HEAD^</span><br><span class=\"line\">b9802c7 (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: 添加内容1111</span><br><span class=\"line\">86a08a6 HEAD@&#123;3&#125;: commit (initial): 新增test.txt</span><br></pre></td></tr></table></figure>\n<h4 id=\"git-pull\"><a href=\"#git-pull\" class=\"headerlink\" title=\"git pull\"></a>git pull</h4><p>在其他人提交代码后，可以通过<code>git pull</code>命令拉取服务器代码到本地。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull [主机名] [分支名]</span><br><span class=\"line\">git pull origin master  //推送到Orinoco主机的master分支 其中默认的主机名是origin</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-4-分支操作\"><a href=\"#2-4-分支操作\" class=\"headerlink\" title=\"2.4 分支操作\"></a>2.4 分支操作</h3><p>创建项目后默认在master分支 即主分支 <strong>应保证master分支代码永远是正确的，稳定的，可运行的</strong></p>\n<h4 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h4><p>实际开发时一般会根据功能创建多个分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch branchName //创建分支branchName</span><br><span class=\"line\">git checkout branchName //切换到分支branchName</span><br><span class=\"line\">git checkout -b branchName  //创建并切换到分支branchName</span><br></pre></td></tr></table></figure>\n<h4 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h4><p>在新建的分支开发完后需要进行合并，将新的功能代码合并搭到master分支.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.切换到master分支</span><br><span class=\"line\">\tgit checkout master</span><br><span class=\"line\">2.把新分支代码合并</span><br><span class=\"line\">\tgit merge branchName</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h4><p>合并完成后即可删除开发时创建的分</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d branchName //删除分支branchName</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-常用命令\"><a href=\"#3-常用命令\" class=\"headerlink\" title=\"3. 常用命令\"></a>3. 常用命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 新建仓库</span><br><span class=\"line\">git init</span><br><span class=\"line\">git clone [url]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 代码提交</span><br><span class=\"line\">git add &lt;filename&gt;</span><br><span class=\"line\">git commit -m\"注释\"</span><br><span class=\"line\">git push </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 版本恢复</span><br><span class=\"line\">git reset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 代码拉取</span><br><span class=\"line\">git pull</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 分支操作</span><br><span class=\"line\">git branch &lt;branchName&gt;</span><br><span class=\"line\">git checkout &lt;branchName&gt;</span><br><span class=\"line\">git merge &lt;branchName&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 信息查看</span><br><span class=\"line\">git status</span><br><span class=\"line\">git log</span><br><span class=\"line\">git reflog</span><br><span class=\"line\">git config -l</span><br></pre></td></tr></table></figure>\n<p>最后附上一张网上找到的<code>Git常用命令速查表</code></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/git/git-comand-fast-select.png\" alt=\"\"></p>\n<h2 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4. 参考\"></a>4. 参考</h2><p><code>http://www.runoob.com/git/git-basic-operations.html</code></p>\n<p><code>https://www.cnblogs.com/qdhxhz/p/9757390.html</code></p>"},{"title":"基于Hexo搭建个人博客之（二）--主题优化篇","abbrlink":58273,"date":"2018-12-22T14:00:00.000Z","_content":"\n本章主要包含了博客主题优化相关内容，第三方服务和插件的配置与使用。如：炫酷头像动态背景、链接变色、鼠标点击效果、站点字数、访客数统计等。\n\n<!--more-->\n\n> 这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n>\n\n### 0. 选择主题\n\n你可以点击这里选择你喜欢的[Themes](https://hexo.io/themes/),里面有大量美观的主题 \n\n我这里用的是简约著称的`Next`主题.\n\n- 下载主题\n  - 使用`git`命令下载该主题到本地.\n  - `git clone https://github.com/theme-next/hexo-theme-next themes/next`  \n  - clone成功后,你的Themes文件夹下就会有next主题文件了.\n- Hexo配置文件:\n  - 都叫`_config.yml `\n  - 一份位于站点根目录下，主要包含 Hexo 本身的配置,称为 `站点配置文件`\n  - 另一份位于主题目录下主要用于配置主题相关的选项,称为`主题配置文件`\n- 开启主题\n  - `站点配置文件`进行修改: 将`theme: landscape`修改为 `theme: next` \n\n### 1. 侧边栏头像设置\n\n新版next注意引入了该功能,直接在`主题配置文件`修改即可,如下:\n\n```yml\n# Sidebar Avatar 头像\navatar:\n  url: /images/avatar.gif\n  # 圆形头像\n  rounded: true\n  # 透明度 0~1之间\n  opacity: 1\n  # 头像旋转\n  rotated: true\n```\n\n### 2. 设置个人社交图标链接\n\n直接在`主题配置文件`修改即可,如下:\n\n```yml\n# Social Links. 社交链接 前面为链接地址 后面是图标 \nsocial:\n  GitHub: https://github.com/illusorycloud || github\n  E-Mail: mailto:xueduan.li@gmail.com || envelope\n  #Weibo: https://weibo.com/yourname || weibo\n  #Google: https://plus.google.com/yourname || google\n  #Twitter: https://twitter.com/yourname || twitter\n  #FB Page: https://www.facebook.com/yourname || facebook\n  #VK Group: https://vk.com/yourname || vk\n  #StackOverflow: https://stackoverflow.com/yourname || stack-overflow\n  #YouTube: https://youtube.com/yourname || youtube\n  #Instagram: https://instagram.com/yourname || instagram\n  #Skype: skype:yourname?call|chat || skype\n# 图标配置 \nsocial_icons:\n  #是否显示图标\n  enable: true\n  #是否只显示图标\n  icons_only: false\n  #是否开启图标变化(就是刷新后会变颜色)\n  transition: false\n```\n\n### 3. 添加菜单项\n\n1.先在`主题配置文件`修改\n\n```yml\nmenu:\n  home: / || home\n  about: /about/ || user\n  tags: /tags/ || tags\n  categories: /categories/ || th\n  archives: /archives/ || archive\n  AAAAA: /BBBBB/ || CCC\n其中AAA 为菜单项的名字,BBB是路径,CCC是菜单项显示的图标 \n```\n\n `next` 使用的是 [Font Awesome](http://fontawesome.io/) 提供的图标 ,在这里可以选择自己喜欢的图标.\n\n2.生成上述路径的文件\n\n`git`命令行输入\n\n`hexo new page BBB` --其中BBB替换为具体的名字,会在`站点目录\\source`下新增一个BBB文件夹,文件夹中有一个`index.md`文件，需要在文件头中增加一句`type: XXX`,例如`type: categories`。这样就会在这个页面显示所有的分类了。\n\n3.修改主题文件下的对应语言的配置文件,这里是中文就修改`zh-CN.yml`\n\n```yml\nmenu:\n  home: 首页\n  archives: 归档\n  AAAA : XXXX\nAAA为上边的菜单项名字,XXX为中文的名字\n```\n\n### 4. 添加RSS\n\n- 1.安装插件\n\n  - 首先在Git中运行`npm install --save hexo-generator-feed`命令,安装插件,插件会放在\n\n    `node_modules`文件夹里面.\n\n- 2.修改`站点配置文件`\n\n  - 安装好插件后,打开站点配置文件_config.yml`,在末尾加入以下代码:\n\n```yml\n# Extensions\n## Plugins: http://hexo.io/plugins/\nplugins: hexo-generate-feed\n```\n\n- 3.修改`主题配置文件`\n  - 打开主题配置文件`_config.yml`,找到`rss` 添加配置:`rss: /atom.xml` \n\n### 5. 设置酷炫动态背景\n\nnext主题提供了两种背景可以选择.\n\n- 第一种背景（我是用的这种）\n\n新版本的next主题的话直接在主题配置文件中,找到`canvas-nest` 修改为`canvas-nest: true`,\n\n```yml\n# Canvas-nest\n# Dependencies: https://github.com/theme-next/theme-next-canvas-nest\ncanvas_nest:\n  enable: true\n  onmobile: true # display on mobile or not\n  color: '0,0,255' # RGB values, use ',' to separate\n  opacity: 0.5 # the opacity of line: 0~1\n  zIndex: -1 # z-index property of the background\n  count: 99 # the number of lines\n```\n\n进入theme/next目录\n\n 执行命令`git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest `\n\n- 第二种背景\n\n```yml\n# JavaScript 3D library.\n# Dependencies: https://github.com/theme-next/theme-next-three\n# three_waves\nthree_waves: false\n# canvas_lines\ncanvas_lines: false\n# canvas_sphere\ncanvas_sphere: false\n```\n\n也是需要下载依赖 \n\n1. 进入theme/next目录\n2. 执行命令：`git clone https://github.com/theme-next/theme-next-three source/lib/three`\n\n**4个背景中只能开启一种背景,不然会出错**\n\n### 6. 设置网站logo\n\n把你的图片放在`themes/next/source/images`里 \n\n打开`主题配置文件`_config.yml ,找到字段`favicon:`  都修改为对应路径\n\n```yml\nfavicon:\n  small: /images/favicon-16x16-next.png\n  medium: /images/favicon-32x32-next.png\n  apple_touch_icon: /images/apple-touch-icon-next.png\n  safari_pinned_tab: /images/logo.svg\n```\n\n### 7. 实现点击出现桃心效果\n\n`themes/next/source/js/src`里面 新建一个love.js,\n\n复制下面的代码进去\n\n```javascript\n!function(e,t,a){function n(){c(\".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}\"),o(),r()}function r(){for(var e=0;e<d.length;e++)d[e].alpha<=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=\"left:\"+d[e].x+\"px;top:\"+d[e].y+\"px;opacity:\"+d[e].alpha+\";transform:scale(\"+d[e].scale+\",\"+d[e].scale+\") rotate(45deg);background:\"+d[e].color+\";z-index:99999\");requestAnimationFrame(r)}function o(){var t=\"function\"==typeof e.onclick&&e.onclick;e.onclick=function(e){t&&t(),i(e)}}function i(e){var a=t.createElement(\"div\");a.className=\"heart\",d.push({el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()}),t.body.appendChild(a)}function c(e){var a=t.createElement(\"style\");a.type=\"text/css\";try{a.appendChild(t.createTextNode(e))}catch(t){a.styleSheet.cssText=e}t.getElementsByTagName(\"head\")[0].appendChild(a)}function s(){return\"rgb(\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\")\"}var d=[];e.requestAnimationFrame=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e){setTimeout(e,1e3/60)}}(),n()}(window,document);\n\n```\n\n然后打开`\\themes\\next\\layout\\_layout.swig`文件,在末尾 添加以下代码： \n\n```html\n<!-- 页面点击小红心 -->\n<script type=\"text/javascript\" src=\"/js/src/love.js\"></script>\n```\n\n### 8. 修改文章内链接文本样式\n\n鼠标移动到连接上变颜色\n\n修改文件 `themes\\next\\source\\css\\_common\\components\\post\\post.styl`，在末尾添加如下css样式，：\n\n```css\n// 文章内链接文本样式\n.post-body p a{\n  color: #0593d3;\n  border-bottom: none;\n  border-bottom: 1px solid #0593d3;\n  &:hover {\n    color: #fc6423;\n    border-bottom: none;\n    border-bottom: 1px solid #fc6423;\n  }\n}\n```\n\n### 9. 设置顶部滚动加载条\n\n打开`next\\layout\\_partials\\head`文件，在文件末尾添加以下代码: \n\n```html\n<script src=\"//cdn.bootcss.com/pace/1.0.2/pace.min.js\"></script>\n<link href=\"//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css\" rel=\"stylesheet\">\n<style>\n    .pace .pace-progress {\n        background: #1E92FB; /*进度条颜色*/\n        height: 3px;\n    }\n    .pace .pace-progress-inner {\n         box-shadow: 0 0 10px #1E92FB, 0 0 5px     #1E92FB; /*阴影颜色*/\n    }\n    .pace .pace-activity {\n        border-top-color: #1E92FB;    /*上边框颜色*/\n        border-left-color: #1E92FB;    /*左边框颜色*/\n    }\n</style>\n```\n\n### 10. 在每篇文章末尾统一添加“本文结束”标记\n\n在路径 `\\themes\\next\\layout\\_macro` 中新建 `page-end-tag.swig` 文件,并添加以下内容： \n\n```html\n<!--文字可以自己修改-->\n<div>\n    {% if not is_index %}\n        <div style=\"text-align:center;color: #A2CD5A;font-size:15px;\">------------------本文到此结束<i class=\"fa fa-paw\"></i>感谢您的阅读------------------</div>\n    {% endif %}\n</div>\n```\n\n接着打开`\\themes\\next\\layout\\_macro\\post.swig`文件，在`post-body` 之后， `post-footer` 之前添加下面的代码 \n\n```html\n<div>\n  {% if not is_index %}\n    {% include 'page-end-tag.swig' %}\n  {% endif %}\n</div>\n```\n\n然后打开主题配置文件（`_config.yml`),在末尾添加： \n\n```yml\n# 文章末尾添加“本文结束”标记\npage_end_tag:\n  enabled: true\n```\n\n### 11. 静态资源压缩\n\nHexo自动生成的html中有很多空白的地方,会影响加载速度,所以最好还是压缩一下.\n\n这里使用`hexo-neat`插件来压缩。\n\n- 安装插件\n\n  - `npm install hexo-neat --save`\n\n- 在`站点配置文件`添加配置\n\n  - ```yml\n    # hexo-neat\n    # 博文压缩\n    neat_enable: true\n    # 压缩html\n    neat_html:\n      enable: true\n      exclude:\n      \n    # 压缩css  跳过min.css\n    neat_css:\n      enable: true\n      exclude:\n        - '**/*.min.css'\n        \n    # 压缩js 跳过min.js\n    neat_js:\n      enable: true\n      mangle: true\n      output:\n      compress:\n      exclude:\n        - '**/*.min.js'\n        - '**/jquery.fancybox.pack.js'\n        - '**/index.js'  \n        - '**/love.js'\n    # 压缩博文配置结束\n    ```\n\n- 3.使用 \n\n  - 以后再执行`hexo g`命令时就会自动压缩了\n\n### 12. 主页文章添加阴影效果\n\n打开`\\themes\\next\\source\\css\\_custom\\custom.styl`,向里面加入： \n\n```js\n// 主页文章添加阴影效果\n .post {\n   margin-top: 60px;\n   margin-bottom: 60px;\n   padding: 25px;\n   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);\n   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);\n  }\n```\n\n### 13. 修改文章底部的的标签样式\n\n打开模板文件`/themes/next/layout/_macro/post.swig`，找到`rel=\"tag\">#`字段， 将`# 换成<i class=\"fa fa-tag\"></i>`,其中tag是你选择标签图标的名字,也是可以自定义的 \n\n```html\n<a href=\"{{ url_for(tag.path) }}\" rel=\"tag\"> <i class=\"fa fa-tag\"></i> {{ tag.name }}</a>\n```\n\n### 14. 实现文章字数统计和预计阅读时间 \n\n1.在站点根目录下使用`GitBash`命令安装 `hexo-wordcoun`t插件:\n\n```java\nnpm install hexo-symbols-count-time --save\n```\n\n2.在全局配置文件`_config.yml`中激活插件:\n\n```yml\nsymbols_count_time:\n    symbols: true\n    time: true\n    total_symbols: true\n    total_time: true\n```\n\n3.在主题的配置文件`_config.yml`中进行如下配置:\n\n```yml\n#字数统计\nsymbols_count_time:\n  separated_meta: true\n  item_text_post: true\n  item_text_total: true\n  awl: 4\n  wpm: 275\n```\n\n到此,我们就实现了文章字数统计和预估时间的显示功能\n\n### 15. 在文章底部增加版权信息\n\n修改`主题配置文件`,找到`creative_commons`字段\n\n```yml\n# Creative Commons 4.0 International License.\n# https://creativecommons.org/share-your-work/licensing-types-examples\n# Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero\ncreative_commons:\n  #选择一个License\n  license: by-nc-sa\n  #是否在侧边栏显示\n  sidebar: false  \n  #是否在文章末尾显示\n  post: true   \n```\n\n### 16. 文章置顶\n\n打开文件：`node_modules/hexo-generator-index/lib/generator.js`,将原来的代码用下面的代码替换掉\n\n```js\n'use strict';\nvar pagination = require('hexo-pagination');\nmodule.exports = function(locals){\n  var config = this.config;\n  var posts = locals.posts;\n    posts.data = posts.data.sort(function(a, b) {\n        if(a.top && b.top) { // 两篇文章top都有定义\n            if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排\n            else return b.top - a.top; // 否则按照top值降序排\n        }\n        else if(a.top && !b.top) { // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）\n            return -1;\n        }\n        else if(!a.top && b.top) {\n            return 1;\n        }\n        else return b.date - a.date; // 都没定义按照文章日期降序排\n    });\n  var paginationDir = config.pagination_dir || 'page';\n  return pagination('', posts, {\n    perPage: config.index_generator.per_page,\n    layout: ['index', 'archive'],\n    format: paginationDir + '/%d/',\n    data: {\n      __index: true\n    }\n  });\n};\n```\n\n写文章的时候,在标题加上top值,数值越大排在越前面.\n\n```md\ntag: hexo \ncopyright: true\npassword: xxx\ntop: 150\n```\n\n### 17. 在网站底部加上访问量\n\n**Next主题配置这个就比较方便了**\n\n打开`主题配置文件`，找到如下配置：\n\n```yml\nbusuanzi_count:\n  enable: true\n  total_visitors: true\n  total_visitors_icon: user\n  total_views: true\n  total_views_icon: eye\n  post_views: true\n  post_views_icon: eye\n```\n\n将`enable`的值由`false`改为`true`，便可以看到页脚出现访问量.\n\n另外本地预览时访客数异常是正常的,部署至云端后就不会出现这样的问题.\n\n### 18. 网站搜索功能\n\n1.安装插件\n\n​\t站点目录下执行命令`npm install hexo-generator-searchdb --save`\n\n2.修改`站点配置文件` \n\n```yml\nsearch:\n  path: search.xml\n  field: post\n  format: html\n  limit: 10000\n```\n\n3.修改`主题配置文件`\n\n```yml\n# Local search\n# Dependencies: https://github.com/theme-next/hexo-generator-searchdb\nlocal_search:\n  enable: enable\n  # if auto, trigger search by changing input\n  # if manual, trigger search by pressing enter key or search button\n  trigger: auto\n  # show top n results per article, show all results by setting to -1\n  top_n_per_article: 1\n  # unescape html strings to the readable one\n  unescape: false\n```\n\n重新开启服务后即可看到效果。\n\n### TODO开启留言评论功能\n\n//TODO 待更新\n\n### 参考\n\n[Hexo官方文档](https://hexo.io/zh-cn/docs/)\n\n[Next官方文档](http://theme-next.iissnan.com/)\n\n\n\n\n\n\n\n","source":"_posts/hexo/hexo-blog-config-two.md","raw":"---\ntitle: 基于Hexo搭建个人博客之（二）--主题优化篇\ntags:\n  - Hexo\ncategories:\n  - Hexo\nabbrlink: 58273\ndate: 2018-12-22 22:00:00\n---\n\n本章主要包含了博客主题优化相关内容，第三方服务和插件的配置与使用。如：炫酷头像动态背景、链接变色、鼠标点击效果、站点字数、访客数统计等。\n\n<!--more-->\n\n> 这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n>\n\n### 0. 选择主题\n\n你可以点击这里选择你喜欢的[Themes](https://hexo.io/themes/),里面有大量美观的主题 \n\n我这里用的是简约著称的`Next`主题.\n\n- 下载主题\n  - 使用`git`命令下载该主题到本地.\n  - `git clone https://github.com/theme-next/hexo-theme-next themes/next`  \n  - clone成功后,你的Themes文件夹下就会有next主题文件了.\n- Hexo配置文件:\n  - 都叫`_config.yml `\n  - 一份位于站点根目录下，主要包含 Hexo 本身的配置,称为 `站点配置文件`\n  - 另一份位于主题目录下主要用于配置主题相关的选项,称为`主题配置文件`\n- 开启主题\n  - `站点配置文件`进行修改: 将`theme: landscape`修改为 `theme: next` \n\n### 1. 侧边栏头像设置\n\n新版next注意引入了该功能,直接在`主题配置文件`修改即可,如下:\n\n```yml\n# Sidebar Avatar 头像\navatar:\n  url: /images/avatar.gif\n  # 圆形头像\n  rounded: true\n  # 透明度 0~1之间\n  opacity: 1\n  # 头像旋转\n  rotated: true\n```\n\n### 2. 设置个人社交图标链接\n\n直接在`主题配置文件`修改即可,如下:\n\n```yml\n# Social Links. 社交链接 前面为链接地址 后面是图标 \nsocial:\n  GitHub: https://github.com/illusorycloud || github\n  E-Mail: mailto:xueduan.li@gmail.com || envelope\n  #Weibo: https://weibo.com/yourname || weibo\n  #Google: https://plus.google.com/yourname || google\n  #Twitter: https://twitter.com/yourname || twitter\n  #FB Page: https://www.facebook.com/yourname || facebook\n  #VK Group: https://vk.com/yourname || vk\n  #StackOverflow: https://stackoverflow.com/yourname || stack-overflow\n  #YouTube: https://youtube.com/yourname || youtube\n  #Instagram: https://instagram.com/yourname || instagram\n  #Skype: skype:yourname?call|chat || skype\n# 图标配置 \nsocial_icons:\n  #是否显示图标\n  enable: true\n  #是否只显示图标\n  icons_only: false\n  #是否开启图标变化(就是刷新后会变颜色)\n  transition: false\n```\n\n### 3. 添加菜单项\n\n1.先在`主题配置文件`修改\n\n```yml\nmenu:\n  home: / || home\n  about: /about/ || user\n  tags: /tags/ || tags\n  categories: /categories/ || th\n  archives: /archives/ || archive\n  AAAAA: /BBBBB/ || CCC\n其中AAA 为菜单项的名字,BBB是路径,CCC是菜单项显示的图标 \n```\n\n `next` 使用的是 [Font Awesome](http://fontawesome.io/) 提供的图标 ,在这里可以选择自己喜欢的图标.\n\n2.生成上述路径的文件\n\n`git`命令行输入\n\n`hexo new page BBB` --其中BBB替换为具体的名字,会在`站点目录\\source`下新增一个BBB文件夹,文件夹中有一个`index.md`文件，需要在文件头中增加一句`type: XXX`,例如`type: categories`。这样就会在这个页面显示所有的分类了。\n\n3.修改主题文件下的对应语言的配置文件,这里是中文就修改`zh-CN.yml`\n\n```yml\nmenu:\n  home: 首页\n  archives: 归档\n  AAAA : XXXX\nAAA为上边的菜单项名字,XXX为中文的名字\n```\n\n### 4. 添加RSS\n\n- 1.安装插件\n\n  - 首先在Git中运行`npm install --save hexo-generator-feed`命令,安装插件,插件会放在\n\n    `node_modules`文件夹里面.\n\n- 2.修改`站点配置文件`\n\n  - 安装好插件后,打开站点配置文件_config.yml`,在末尾加入以下代码:\n\n```yml\n# Extensions\n## Plugins: http://hexo.io/plugins/\nplugins: hexo-generate-feed\n```\n\n- 3.修改`主题配置文件`\n  - 打开主题配置文件`_config.yml`,找到`rss` 添加配置:`rss: /atom.xml` \n\n### 5. 设置酷炫动态背景\n\nnext主题提供了两种背景可以选择.\n\n- 第一种背景（我是用的这种）\n\n新版本的next主题的话直接在主题配置文件中,找到`canvas-nest` 修改为`canvas-nest: true`,\n\n```yml\n# Canvas-nest\n# Dependencies: https://github.com/theme-next/theme-next-canvas-nest\ncanvas_nest:\n  enable: true\n  onmobile: true # display on mobile or not\n  color: '0,0,255' # RGB values, use ',' to separate\n  opacity: 0.5 # the opacity of line: 0~1\n  zIndex: -1 # z-index property of the background\n  count: 99 # the number of lines\n```\n\n进入theme/next目录\n\n 执行命令`git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest `\n\n- 第二种背景\n\n```yml\n# JavaScript 3D library.\n# Dependencies: https://github.com/theme-next/theme-next-three\n# three_waves\nthree_waves: false\n# canvas_lines\ncanvas_lines: false\n# canvas_sphere\ncanvas_sphere: false\n```\n\n也是需要下载依赖 \n\n1. 进入theme/next目录\n2. 执行命令：`git clone https://github.com/theme-next/theme-next-three source/lib/three`\n\n**4个背景中只能开启一种背景,不然会出错**\n\n### 6. 设置网站logo\n\n把你的图片放在`themes/next/source/images`里 \n\n打开`主题配置文件`_config.yml ,找到字段`favicon:`  都修改为对应路径\n\n```yml\nfavicon:\n  small: /images/favicon-16x16-next.png\n  medium: /images/favicon-32x32-next.png\n  apple_touch_icon: /images/apple-touch-icon-next.png\n  safari_pinned_tab: /images/logo.svg\n```\n\n### 7. 实现点击出现桃心效果\n\n`themes/next/source/js/src`里面 新建一个love.js,\n\n复制下面的代码进去\n\n```javascript\n!function(e,t,a){function n(){c(\".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}\"),o(),r()}function r(){for(var e=0;e<d.length;e++)d[e].alpha<=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=\"left:\"+d[e].x+\"px;top:\"+d[e].y+\"px;opacity:\"+d[e].alpha+\";transform:scale(\"+d[e].scale+\",\"+d[e].scale+\") rotate(45deg);background:\"+d[e].color+\";z-index:99999\");requestAnimationFrame(r)}function o(){var t=\"function\"==typeof e.onclick&&e.onclick;e.onclick=function(e){t&&t(),i(e)}}function i(e){var a=t.createElement(\"div\");a.className=\"heart\",d.push({el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()}),t.body.appendChild(a)}function c(e){var a=t.createElement(\"style\");a.type=\"text/css\";try{a.appendChild(t.createTextNode(e))}catch(t){a.styleSheet.cssText=e}t.getElementsByTagName(\"head\")[0].appendChild(a)}function s(){return\"rgb(\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\")\"}var d=[];e.requestAnimationFrame=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e){setTimeout(e,1e3/60)}}(),n()}(window,document);\n\n```\n\n然后打开`\\themes\\next\\layout\\_layout.swig`文件,在末尾 添加以下代码： \n\n```html\n<!-- 页面点击小红心 -->\n<script type=\"text/javascript\" src=\"/js/src/love.js\"></script>\n```\n\n### 8. 修改文章内链接文本样式\n\n鼠标移动到连接上变颜色\n\n修改文件 `themes\\next\\source\\css\\_common\\components\\post\\post.styl`，在末尾添加如下css样式，：\n\n```css\n// 文章内链接文本样式\n.post-body p a{\n  color: #0593d3;\n  border-bottom: none;\n  border-bottom: 1px solid #0593d3;\n  &:hover {\n    color: #fc6423;\n    border-bottom: none;\n    border-bottom: 1px solid #fc6423;\n  }\n}\n```\n\n### 9. 设置顶部滚动加载条\n\n打开`next\\layout\\_partials\\head`文件，在文件末尾添加以下代码: \n\n```html\n<script src=\"//cdn.bootcss.com/pace/1.0.2/pace.min.js\"></script>\n<link href=\"//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css\" rel=\"stylesheet\">\n<style>\n    .pace .pace-progress {\n        background: #1E92FB; /*进度条颜色*/\n        height: 3px;\n    }\n    .pace .pace-progress-inner {\n         box-shadow: 0 0 10px #1E92FB, 0 0 5px     #1E92FB; /*阴影颜色*/\n    }\n    .pace .pace-activity {\n        border-top-color: #1E92FB;    /*上边框颜色*/\n        border-left-color: #1E92FB;    /*左边框颜色*/\n    }\n</style>\n```\n\n### 10. 在每篇文章末尾统一添加“本文结束”标记\n\n在路径 `\\themes\\next\\layout\\_macro` 中新建 `page-end-tag.swig` 文件,并添加以下内容： \n\n```html\n<!--文字可以自己修改-->\n<div>\n    {% if not is_index %}\n        <div style=\"text-align:center;color: #A2CD5A;font-size:15px;\">------------------本文到此结束<i class=\"fa fa-paw\"></i>感谢您的阅读------------------</div>\n    {% endif %}\n</div>\n```\n\n接着打开`\\themes\\next\\layout\\_macro\\post.swig`文件，在`post-body` 之后， `post-footer` 之前添加下面的代码 \n\n```html\n<div>\n  {% if not is_index %}\n    {% include 'page-end-tag.swig' %}\n  {% endif %}\n</div>\n```\n\n然后打开主题配置文件（`_config.yml`),在末尾添加： \n\n```yml\n# 文章末尾添加“本文结束”标记\npage_end_tag:\n  enabled: true\n```\n\n### 11. 静态资源压缩\n\nHexo自动生成的html中有很多空白的地方,会影响加载速度,所以最好还是压缩一下.\n\n这里使用`hexo-neat`插件来压缩。\n\n- 安装插件\n\n  - `npm install hexo-neat --save`\n\n- 在`站点配置文件`添加配置\n\n  - ```yml\n    # hexo-neat\n    # 博文压缩\n    neat_enable: true\n    # 压缩html\n    neat_html:\n      enable: true\n      exclude:\n      \n    # 压缩css  跳过min.css\n    neat_css:\n      enable: true\n      exclude:\n        - '**/*.min.css'\n        \n    # 压缩js 跳过min.js\n    neat_js:\n      enable: true\n      mangle: true\n      output:\n      compress:\n      exclude:\n        - '**/*.min.js'\n        - '**/jquery.fancybox.pack.js'\n        - '**/index.js'  \n        - '**/love.js'\n    # 压缩博文配置结束\n    ```\n\n- 3.使用 \n\n  - 以后再执行`hexo g`命令时就会自动压缩了\n\n### 12. 主页文章添加阴影效果\n\n打开`\\themes\\next\\source\\css\\_custom\\custom.styl`,向里面加入： \n\n```js\n// 主页文章添加阴影效果\n .post {\n   margin-top: 60px;\n   margin-bottom: 60px;\n   padding: 25px;\n   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);\n   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);\n  }\n```\n\n### 13. 修改文章底部的的标签样式\n\n打开模板文件`/themes/next/layout/_macro/post.swig`，找到`rel=\"tag\">#`字段， 将`# 换成<i class=\"fa fa-tag\"></i>`,其中tag是你选择标签图标的名字,也是可以自定义的 \n\n```html\n<a href=\"{{ url_for(tag.path) }}\" rel=\"tag\"> <i class=\"fa fa-tag\"></i> {{ tag.name }}</a>\n```\n\n### 14. 实现文章字数统计和预计阅读时间 \n\n1.在站点根目录下使用`GitBash`命令安装 `hexo-wordcoun`t插件:\n\n```java\nnpm install hexo-symbols-count-time --save\n```\n\n2.在全局配置文件`_config.yml`中激活插件:\n\n```yml\nsymbols_count_time:\n    symbols: true\n    time: true\n    total_symbols: true\n    total_time: true\n```\n\n3.在主题的配置文件`_config.yml`中进行如下配置:\n\n```yml\n#字数统计\nsymbols_count_time:\n  separated_meta: true\n  item_text_post: true\n  item_text_total: true\n  awl: 4\n  wpm: 275\n```\n\n到此,我们就实现了文章字数统计和预估时间的显示功能\n\n### 15. 在文章底部增加版权信息\n\n修改`主题配置文件`,找到`creative_commons`字段\n\n```yml\n# Creative Commons 4.0 International License.\n# https://creativecommons.org/share-your-work/licensing-types-examples\n# Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero\ncreative_commons:\n  #选择一个License\n  license: by-nc-sa\n  #是否在侧边栏显示\n  sidebar: false  \n  #是否在文章末尾显示\n  post: true   \n```\n\n### 16. 文章置顶\n\n打开文件：`node_modules/hexo-generator-index/lib/generator.js`,将原来的代码用下面的代码替换掉\n\n```js\n'use strict';\nvar pagination = require('hexo-pagination');\nmodule.exports = function(locals){\n  var config = this.config;\n  var posts = locals.posts;\n    posts.data = posts.data.sort(function(a, b) {\n        if(a.top && b.top) { // 两篇文章top都有定义\n            if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排\n            else return b.top - a.top; // 否则按照top值降序排\n        }\n        else if(a.top && !b.top) { // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）\n            return -1;\n        }\n        else if(!a.top && b.top) {\n            return 1;\n        }\n        else return b.date - a.date; // 都没定义按照文章日期降序排\n    });\n  var paginationDir = config.pagination_dir || 'page';\n  return pagination('', posts, {\n    perPage: config.index_generator.per_page,\n    layout: ['index', 'archive'],\n    format: paginationDir + '/%d/',\n    data: {\n      __index: true\n    }\n  });\n};\n```\n\n写文章的时候,在标题加上top值,数值越大排在越前面.\n\n```md\ntag: hexo \ncopyright: true\npassword: xxx\ntop: 150\n```\n\n### 17. 在网站底部加上访问量\n\n**Next主题配置这个就比较方便了**\n\n打开`主题配置文件`，找到如下配置：\n\n```yml\nbusuanzi_count:\n  enable: true\n  total_visitors: true\n  total_visitors_icon: user\n  total_views: true\n  total_views_icon: eye\n  post_views: true\n  post_views_icon: eye\n```\n\n将`enable`的值由`false`改为`true`，便可以看到页脚出现访问量.\n\n另外本地预览时访客数异常是正常的,部署至云端后就不会出现这样的问题.\n\n### 18. 网站搜索功能\n\n1.安装插件\n\n​\t站点目录下执行命令`npm install hexo-generator-searchdb --save`\n\n2.修改`站点配置文件` \n\n```yml\nsearch:\n  path: search.xml\n  field: post\n  format: html\n  limit: 10000\n```\n\n3.修改`主题配置文件`\n\n```yml\n# Local search\n# Dependencies: https://github.com/theme-next/hexo-generator-searchdb\nlocal_search:\n  enable: enable\n  # if auto, trigger search by changing input\n  # if manual, trigger search by pressing enter key or search button\n  trigger: auto\n  # show top n results per article, show all results by setting to -1\n  top_n_per_article: 1\n  # unescape html strings to the readable one\n  unescape: false\n```\n\n重新开启服务后即可看到效果。\n\n### TODO开启留言评论功能\n\n//TODO 待更新\n\n### 参考\n\n[Hexo官方文档](https://hexo.io/zh-cn/docs/)\n\n[Next官方文档](http://theme-next.iissnan.com/)\n\n\n\n\n\n\n\n","slug":"hexo/hexo-blog-config-two","published":1,"updated":"2019-02-06T01:14:27.604Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv4b5004h0ww46zkqpq8l","content":"<p>本章主要包含了博客主题优化相关内容，第三方服务和插件的配置与使用。如：炫酷头像动态背景、链接变色、鼠标点击效果、站点字数、访客数统计等。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。</p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h3 id=\"0-选择主题\"><a href=\"#0-选择主题\" class=\"headerlink\" title=\"0. 选择主题\"></a>0. 选择主题</h3><p>你可以点击这里选择你喜欢的<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">Themes</a>,里面有大量美观的主题 </p>\n<p>我这里用的是简约著称的<code>Next</code>主题.</p>\n<ul>\n<li>下载主题<ul>\n<li>使用<code>git</code>命令下载该主题到本地.</li>\n<li><code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code>  </li>\n<li>clone成功后,你的Themes文件夹下就会有next主题文件了.</li>\n</ul>\n</li>\n<li>Hexo配置文件:<ul>\n<li>都叫<code>_config.yml</code></li>\n<li>一份位于站点根目录下，主要包含 Hexo 本身的配置,称为 <code>站点配置文件</code></li>\n<li>另一份位于主题目录下主要用于配置主题相关的选项,称为<code>主题配置文件</code></li>\n</ul>\n</li>\n<li>开启主题<ul>\n<li><code>站点配置文件</code>进行修改: 将<code>theme: landscape</code>修改为 <code>theme: next</code> </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-侧边栏头像设置\"><a href=\"#1-侧边栏头像设置\" class=\"headerlink\" title=\"1. 侧边栏头像设置\"></a>1. 侧边栏头像设置</h3><p>新版next注意引入了该功能,直接在<code>主题配置文件</code>修改即可,如下:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Sidebar Avatar 头像</span></span><br><span class=\"line\"><span class=\"attr\">avatar:</span></span><br><span class=\"line\"><span class=\"attr\">  url:</span> <span class=\"string\">/images/avatar.gif</span></span><br><span class=\"line\">  <span class=\"comment\"># 圆形头像</span></span><br><span class=\"line\"><span class=\"attr\">  rounded:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># 透明度 0~1之间</span></span><br><span class=\"line\"><span class=\"attr\">  opacity:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\"># 头像旋转</span></span><br><span class=\"line\"><span class=\"attr\">  rotated:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-设置个人社交图标链接\"><a href=\"#2-设置个人社交图标链接\" class=\"headerlink\" title=\"2. 设置个人社交图标链接\"></a>2. 设置个人社交图标链接</h3><p>直接在<code>主题配置文件</code>修改即可,如下:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Social Links. 社交链接 前面为链接地址 后面是图标 </span></span><br><span class=\"line\"><span class=\"attr\">social:</span></span><br><span class=\"line\"><span class=\"attr\">  GitHub:</span> <span class=\"attr\">https://github.com/illusorycloud</span> <span class=\"string\">||</span> <span class=\"string\">github</span></span><br><span class=\"line\"><span class=\"attr\">  E-Mail:</span> <span class=\"attr\">mailto:xueduan.li@gmail.com</span> <span class=\"string\">||</span> <span class=\"string\">envelope</span></span><br><span class=\"line\">  <span class=\"comment\">#Weibo: https://weibo.com/yourname || weibo</span></span><br><span class=\"line\">  <span class=\"comment\">#Google: https://plus.google.com/yourname || google</span></span><br><span class=\"line\">  <span class=\"comment\">#Twitter: https://twitter.com/yourname || twitter</span></span><br><span class=\"line\">  <span class=\"comment\">#FB Page: https://www.facebook.com/yourname || facebook</span></span><br><span class=\"line\">  <span class=\"comment\">#VK Group: https://vk.com/yourname || vk</span></span><br><span class=\"line\">  <span class=\"comment\">#StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span></span><br><span class=\"line\">  <span class=\"comment\">#YouTube: https://youtube.com/yourname || youtube</span></span><br><span class=\"line\">  <span class=\"comment\">#Instagram: https://instagram.com/yourname || instagram</span></span><br><span class=\"line\">  <span class=\"comment\">#Skype: skype:yourname?call|chat || skype</span></span><br><span class=\"line\"><span class=\"comment\"># 图标配置 </span></span><br><span class=\"line\"><span class=\"attr\">social_icons:</span></span><br><span class=\"line\">  <span class=\"comment\">#是否显示图标</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\">#是否只显示图标</span></span><br><span class=\"line\"><span class=\"attr\">  icons_only:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\">#是否开启图标变化(就是刷新后会变颜色)</span></span><br><span class=\"line\"><span class=\"attr\">  transition:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-添加菜单项\"><a href=\"#3-添加菜单项\" class=\"headerlink\" title=\"3. 添加菜单项\"></a>3. 添加菜单项</h3><p>1.先在<code>主题配置文件</code>修改</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\"><span class=\"attr\">  home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">home</span></span><br><span class=\"line\"><span class=\"attr\">  about:</span> <span class=\"string\">/about/</span> <span class=\"string\">||</span> <span class=\"string\">user</span></span><br><span class=\"line\"><span class=\"attr\">  tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">tags</span></span><br><span class=\"line\"><span class=\"attr\">  categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">th</span></span><br><span class=\"line\"><span class=\"attr\">  archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">archive</span></span><br><span class=\"line\"><span class=\"attr\">  AAAAA:</span> <span class=\"string\">/BBBBB/</span> <span class=\"string\">||</span> <span class=\"string\">CCC</span></span><br><span class=\"line\"><span class=\"string\">其中AAA</span> <span class=\"string\">为菜单项的名字,BBB是路径,CCC是菜单项显示的图标</span></span><br></pre></td></tr></table></figure>\n<p> <code>next</code> 使用的是 <a href=\"http://fontawesome.io/\" target=\"_blank\" rel=\"noopener\">Font Awesome</a> 提供的图标 ,在这里可以选择自己喜欢的图标.</p>\n<p>2.生成上述路径的文件</p>\n<p><code>git</code>命令行输入</p>\n<p><code>hexo new page BBB</code> –其中BBB替换为具体的名字,会在<code>站点目录\\source</code>下新增一个BBB文件夹,文件夹中有一个<code>index.md</code>文件，需要在文件头中增加一句<code>type: XXX</code>,例如<code>type: categories</code>。这样就会在这个页面显示所有的分类了。</p>\n<p>3.修改主题文件下的对应语言的配置文件,这里是中文就修改<code>zh-CN.yml</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\"><span class=\"attr\">  home:</span> <span class=\"string\">首页</span></span><br><span class=\"line\"><span class=\"attr\">  archives:</span> <span class=\"string\">归档</span></span><br><span class=\"line\">  <span class=\"string\">AAAA</span> <span class=\"string\">:</span> <span class=\"string\">XXXX</span></span><br><span class=\"line\"><span class=\"string\">AAA为上边的菜单项名字,XXX为中文的名字</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-添加RSS\"><a href=\"#4-添加RSS\" class=\"headerlink\" title=\"4. 添加RSS\"></a>4. 添加RSS</h3><ul>\n<li><p>1.安装插件</p>\n<ul>\n<li><p>首先在Git中运行<code>npm install --save hexo-generator-feed</code>命令,安装插件,插件会放在</p>\n<p><code>node_modules</code>文件夹里面.</p>\n</li>\n</ul>\n</li>\n<li><p>2.修改<code>站点配置文件</code></p>\n<ul>\n<li>安装好插件后,打开站点配置文件_config.yml`,在末尾加入以下代码:</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: http://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"attr\">plugins:</span> <span class=\"string\">hexo-generate-feed</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>3.修改<code>主题配置文件</code><ul>\n<li>打开主题配置文件<code>_config.yml</code>,找到<code>rss</code> 添加配置:<code>rss: /atom.xml</code> </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-设置酷炫动态背景\"><a href=\"#5-设置酷炫动态背景\" class=\"headerlink\" title=\"5. 设置酷炫动态背景\"></a>5. 设置酷炫动态背景</h3><p>next主题提供了两种背景可以选择.</p>\n<ul>\n<li>第一种背景（我是用的这种）</li>\n</ul>\n<p>新版本的next主题的话直接在主题配置文件中,找到<code>canvas-nest</code> 修改为<code>canvas-nest: true</code>,</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Canvas-nest</span></span><br><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span></span><br><span class=\"line\"><span class=\"attr\">canvas_nest:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  onmobile:</span> <span class=\"literal\">true</span> <span class=\"comment\"># display on mobile or not</span></span><br><span class=\"line\"><span class=\"attr\">  color:</span> <span class=\"string\">'0,0,255'</span> <span class=\"comment\"># RGB values, use ',' to separate</span></span><br><span class=\"line\"><span class=\"attr\">  opacity:</span> <span class=\"number\">0.5</span> <span class=\"comment\"># the opacity of line: 0~1</span></span><br><span class=\"line\"><span class=\"attr\">  zIndex:</span> <span class=\"bullet\">-1</span> <span class=\"comment\"># z-index property of the background</span></span><br><span class=\"line\"><span class=\"attr\">  count:</span> <span class=\"number\">99</span> <span class=\"comment\"># the number of lines</span></span><br></pre></td></tr></table></figure>\n<p>进入theme/next目录</p>\n<p> 执行命令<code>git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest</code></p>\n<ul>\n<li>第二种背景</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># JavaScript 3D library.</span></span><br><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/theme-next/theme-next-three</span></span><br><span class=\"line\"><span class=\"comment\"># three_waves</span></span><br><span class=\"line\"><span class=\"attr\">three_waves:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># canvas_lines</span></span><br><span class=\"line\"><span class=\"attr\">canvas_lines:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># canvas_sphere</span></span><br><span class=\"line\"><span class=\"attr\">canvas_sphere:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>也是需要下载依赖 </p>\n<ol>\n<li>进入theme/next目录</li>\n<li>执行命令：<code>git clone https://github.com/theme-next/theme-next-three source/lib/three</code></li>\n</ol>\n<p><strong>4个背景中只能开启一种背景,不然会出错</strong></p>\n<h3 id=\"6-设置网站logo\"><a href=\"#6-设置网站logo\" class=\"headerlink\" title=\"6. 设置网站logo\"></a>6. 设置网站logo</h3><p>把你的图片放在<code>themes/next/source/images</code>里 </p>\n<p>打开<code>主题配置文件</code>_config.yml ,找到字段<code>favicon:</code>  都修改为对应路径</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">favicon:</span></span><br><span class=\"line\"><span class=\"attr\">  small:</span> <span class=\"string\">/images/favicon-16x16-next.png</span></span><br><span class=\"line\"><span class=\"attr\">  medium:</span> <span class=\"string\">/images/favicon-32x32-next.png</span></span><br><span class=\"line\"><span class=\"attr\">  apple_touch_icon:</span> <span class=\"string\">/images/apple-touch-icon-next.png</span></span><br><span class=\"line\"><span class=\"attr\">  safari_pinned_tab:</span> <span class=\"string\">/images/logo.svg</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"7-实现点击出现桃心效果\"><a href=\"#7-实现点击出现桃心效果\" class=\"headerlink\" title=\"7. 实现点击出现桃心效果\"></a>7. 实现点击出现桃心效果</h3><p><code>themes/next/source/js/src</code>里面 新建一个love.js,</p>\n<p>复制下面的代码进去</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e,t,a</span>)</span>&#123;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">n</span>(<span class=\"params\"></span>)</span>&#123;c(<span class=\"string\">\".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;\"</span>),o(),r()&#125;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">r</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> e=<span class=\"number\">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class=\"number\">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class=\"number\">1</span>)):(d[e].y--,d[e].scale+=<span class=\"number\">.004</span>,d[e].alpha-=<span class=\"number\">.013</span>,d[e].el.style.cssText=<span class=\"string\">\"left:\"</span>+d[e].x+<span class=\"string\">\"px;top:\"</span>+d[e].y+<span class=\"string\">\"px;opacity:\"</span>+d[e].alpha+<span class=\"string\">\";transform:scale(\"</span>+d[e].scale+<span class=\"string\">\",\"</span>+d[e].scale+<span class=\"string\">\") rotate(45deg);background:\"</span>+d[e].color+<span class=\"string\">\";z-index:99999\"</span>);requestAnimationFrame(r)&#125;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">o</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">var</span> t=<span class=\"string\">\"function\"</span>==<span class=\"keyword\">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">i</span>(<span class=\"params\">e</span>)</span>&#123;<span class=\"keyword\">var</span> a=t.createElement(<span class=\"string\">\"div\"</span>);a.className=<span class=\"string\">\"heart\"</span>,d.push(&#123;<span class=\"attr\">el</span>:a,<span class=\"attr\">x</span>:e.clientX<span class=\"number\">-5</span>,<span class=\"attr\">y</span>:e.clientY<span class=\"number\">-5</span>,<span class=\"attr\">scale</span>:<span class=\"number\">1</span>,<span class=\"attr\">alpha</span>:<span class=\"number\">1</span>,<span class=\"attr\">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\">e</span>)</span>&#123;<span class=\"keyword\">var</span> a=t.createElement(<span class=\"string\">\"style\"</span>);a.type=<span class=\"string\">\"text/css\"</span>;<span class=\"keyword\">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class=\"keyword\">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class=\"string\">\"head\"</span>)[<span class=\"number\">0</span>].appendChild(a)&#125;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">s</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span><span class=\"string\">\"rgb(\"</span>+~~(<span class=\"number\">255</span>*<span class=\"built_in\">Math</span>.random())+<span class=\"string\">\",\"</span>+~~(<span class=\"number\">255</span>*<span class=\"built_in\">Math</span>.random())+<span class=\"string\">\",\"</span>+~~(<span class=\"number\">255</span>*<span class=\"built_in\">Math</span>.random())+<span class=\"string\">\")\"</span>&#125;<span class=\"keyword\">var</span> d=[];e.requestAnimationFrame=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;setTimeout(e,<span class=\"number\">1e3</span>/<span class=\"number\">60</span>)&#125;&#125;(),n()&#125;(<span class=\"built_in\">window</span>,<span class=\"built_in\">document</span>);</span><br></pre></td></tr></table></figure>\n<p>然后打开<code>\\themes\\next\\layout\\_layout.swig</code>文件,在末尾 添加以下代码： </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 页面点击小红心 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/js/src/love.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"8-修改文章内链接文本样式\"><a href=\"#8-修改文章内链接文本样式\" class=\"headerlink\" title=\"8. 修改文章内链接文本样式\"></a>8. 修改文章内链接文本样式</h3><p>鼠标移动到连接上变颜色</p>\n<p>修改文件 <code>themes\\next\\source\\css\\_common\\components\\post\\post.styl</code>，在末尾添加如下css样式，：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 文章内链接文本样式</span><br><span class=\"line\"><span class=\"selector-class\">.post-body</span> <span class=\"selector-tag\">p</span> <span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#0593d3</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#0593d3</span>;</span><br><span class=\"line\">  &amp;:hover &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#fc6423</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">border-bottom</span>: <span class=\"selector-tag\">none</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">border-bottom</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#fc6423</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-设置顶部滚动加载条\"><a href=\"#9-设置顶部滚动加载条\" class=\"headerlink\" title=\"9. 设置顶部滚动加载条\"></a>9. 设置顶部滚动加载条</h3><p>打开<code>next\\layout\\_partials\\head</code>文件，在文件末尾添加以下代码: </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//cdn.bootcss.com/pace/1.0.2/pace.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.pace</span> <span class=\"selector-class\">.pace-progress</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#1E92FB</span>; <span class=\"comment\">/*进度条颜色*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">        height: 3px;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.pace</span> <span class=\"selector-class\">.pace-progress-inner</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">         <span class=\"selector-tag\">box-shadow</span>: 0 0 10<span class=\"selector-tag\">px</span> <span class=\"selector-id\">#1E92FB</span>, 0 0 5<span class=\"selector-tag\">px</span>     <span class=\"selector-id\">#1E92FB</span>; <span class=\"comment\">/*阴影颜色*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.pace</span> <span class=\"selector-class\">.pace-activity</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">border-top-color</span>: <span class=\"selector-id\">#1E92FB</span>;    <span class=\"comment\">/*上边框颜色*/</span></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">border-left-color</span>: <span class=\"selector-id\">#1E92FB</span>;    <span class=\"comment\">/*左边框颜色*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"10-在每篇文章末尾统一添加“本文结束”标记\"><a href=\"#10-在每篇文章末尾统一添加“本文结束”标记\" class=\"headerlink\" title=\"10. 在每篇文章末尾统一添加“本文结束”标记\"></a>10. 在每篇文章末尾统一添加“本文结束”标记</h3><p>在路径 <code>\\themes\\next\\layout\\_macro</code> 中新建 <code>page-end-tag.swig</code> 文件,并添加以下内容： </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--文字可以自己修改--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    &#123;% if not is_index %&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"text-align:center;color: #A2CD5A;font-size:15px;\"</span>&gt;</span>------------------本文到此结束<span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-paw\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>感谢您的阅读------------------<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>接着打开<code>\\themes\\next\\layout\\_macro\\post.swig</code>文件，在<code>post-body</code> 之后， <code>post-footer</code> 之前添加下面的代码 </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  &#123;% if not is_index %&#125;</span><br><span class=\"line\">    &#123;% include 'page-end-tag.swig' %&#125;</span><br><span class=\"line\">  &#123;% endif %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后打开主题配置文件（<code>_config.yml</code>),在末尾添加： </p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 文章末尾添加“本文结束”标记</span></span><br><span class=\"line\"><span class=\"attr\">page_end_tag:</span></span><br><span class=\"line\"><span class=\"attr\">  enabled:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"11-静态资源压缩\"><a href=\"#11-静态资源压缩\" class=\"headerlink\" title=\"11. 静态资源压缩\"></a>11. 静态资源压缩</h3><p>Hexo自动生成的html中有很多空白的地方,会影响加载速度,所以最好还是压缩一下.</p>\n<p>这里使用<code>hexo-neat</code>插件来压缩。</p>\n<ul>\n<li><p>安装插件</p>\n<ul>\n<li><code>npm install hexo-neat --save</code></li>\n</ul>\n</li>\n<li><p>在<code>站点配置文件</code>添加配置</p>\n<ul>\n<li><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># hexo-neat</span></span><br><span class=\"line\"><span class=\"comment\"># 博文压缩</span></span><br><span class=\"line\"><span class=\"attr\">neat_enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 压缩html</span></span><br><span class=\"line\"><span class=\"attr\">neat_html:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  exclude:</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 压缩css  跳过min.css</span></span><br><span class=\"line\"><span class=\"attr\">neat_css:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  exclude:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">'**/*.min.css'</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 压缩js 跳过min.js</span></span><br><span class=\"line\"><span class=\"attr\">neat_js:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  mangle:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  output:</span></span><br><span class=\"line\"><span class=\"attr\">  compress:</span></span><br><span class=\"line\"><span class=\"attr\">  exclude:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">'**/*.min.js'</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">'**/jquery.fancybox.pack.js'</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">'**/index.js'</span>  </span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">'**/love.js'</span></span><br><span class=\"line\"><span class=\"comment\"># 压缩博文配置结束</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>3.使用 </p>\n<ul>\n<li>以后再执行<code>hexo g</code>命令时就会自动压缩了</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"12-主页文章添加阴影效果\"><a href=\"#12-主页文章添加阴影效果\" class=\"headerlink\" title=\"12. 主页文章添加阴影效果\"></a>12. 主页文章添加阴影效果</h3><p>打开<code>\\themes\\next\\source\\css\\_custom\\custom.styl</code>,向里面加入： </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 主页文章添加阴影效果</span></span><br><span class=\"line\"> .post &#123;</span><br><span class=\"line\">   margin-top: <span class=\"number\">60</span>px;</span><br><span class=\"line\">   margin-bottom: <span class=\"number\">60</span>px;</span><br><span class=\"line\">   padding: <span class=\"number\">25</span>px;</span><br><span class=\"line\">   -webkit-box-shadow: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">5</span>px rgba(<span class=\"number\">202</span>, <span class=\"number\">203</span>, <span class=\"number\">203</span>, <span class=\"number\">.5</span>);</span><br><span class=\"line\">   -moz-box-shadow: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">5</span>px rgba(<span class=\"number\">202</span>, <span class=\"number\">203</span>, <span class=\"number\">204</span>, <span class=\"number\">.5</span>);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"13-修改文章底部的的标签样式\"><a href=\"#13-修改文章底部的的标签样式\" class=\"headerlink\" title=\"13. 修改文章底部的的标签样式\"></a>13. 修改文章底部的的标签样式</h3><p>打开模板文件<code>/themes/next/layout/_macro/post.swig</code>，找到<code>rel=&quot;tag&quot;&gt;#</code>字段， 将<code># 换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code>,其中tag是你选择标签图标的名字,也是可以自定义的 </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; url_for(tag.path) &#125;&#125;\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"tag\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-tag\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span> &#123;&#123; tag.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"14-实现文章字数统计和预计阅读时间\"><a href=\"#14-实现文章字数统计和预计阅读时间\" class=\"headerlink\" title=\"14. 实现文章字数统计和预计阅读时间\"></a>14. 实现文章字数统计和预计阅读时间</h3><p>1.在站点根目录下使用<code>GitBash</code>命令安装 <code>hexo-wordcoun</code>t插件:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>\n<p>2.在全局配置文件<code>_config.yml</code>中激活插件:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">symbols_count_time:</span></span><br><span class=\"line\"><span class=\"attr\">    symbols:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    time:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    total_symbols:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    total_time:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>3.在主题的配置文件<code>_config.yml</code>中进行如下配置:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#字数统计</span></span><br><span class=\"line\"><span class=\"attr\">symbols_count_time:</span></span><br><span class=\"line\"><span class=\"attr\">  separated_meta:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  item_text_post:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  item_text_total:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  awl:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"attr\">  wpm:</span> <span class=\"number\">275</span></span><br></pre></td></tr></table></figure>\n<p>到此,我们就实现了文章字数统计和预估时间的显示功能</p>\n<h3 id=\"15-在文章底部增加版权信息\"><a href=\"#15-在文章底部增加版权信息\" class=\"headerlink\" title=\"15. 在文章底部增加版权信息\"></a>15. 在文章底部增加版权信息</h3><p>修改<code>主题配置文件</code>,找到<code>creative_commons</code>字段</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Creative Commons 4.0 International License.</span></span><br><span class=\"line\"><span class=\"comment\"># https://creativecommons.org/share-your-work/licensing-types-examples</span></span><br><span class=\"line\"><span class=\"comment\"># Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span></span><br><span class=\"line\"><span class=\"attr\">creative_commons:</span></span><br><span class=\"line\">  <span class=\"comment\">#选择一个License</span></span><br><span class=\"line\"><span class=\"attr\">  license:</span> <span class=\"string\">by-nc-sa</span></span><br><span class=\"line\">  <span class=\"comment\">#是否在侧边栏显示</span></span><br><span class=\"line\"><span class=\"attr\">  sidebar:</span> <span class=\"literal\">false</span>  </span><br><span class=\"line\">  <span class=\"comment\">#是否在文章末尾显示</span></span><br><span class=\"line\"><span class=\"attr\">  post:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"16-文章置顶\"><a href=\"#16-文章置顶\" class=\"headerlink\" title=\"16. 文章置顶\"></a>16. 文章置顶</h3><p>打开文件：<code>node_modules/hexo-generator-index/lib/generator.js</code>,将原来的代码用下面的代码替换掉</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> pagination = <span class=\"built_in\">require</span>(<span class=\"string\">'hexo-pagination'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">locals</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> config = <span class=\"keyword\">this</span>.config;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> posts = locals.posts;</span><br><span class=\"line\">    posts.data = posts.data.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a.top &amp;&amp; b.top) &#123; <span class=\"comment\">// 两篇文章top都有定义</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a.top == b.top) <span class=\"keyword\">return</span> b.date - a.date; <span class=\"comment\">// 若top值一样则按照文章日期降序排</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> b.top - a.top; <span class=\"comment\">// 否则按照top值降序排</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a.top &amp;&amp; !b.top) &#123; <span class=\"comment\">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> b.date - a.date; <span class=\"comment\">// 都没定义按照文章日期降序排</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> paginationDir = config.pagination_dir || <span class=\"string\">'page'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pagination(<span class=\"string\">''</span>, posts, &#123;</span><br><span class=\"line\">    perPage: config.index_generator.per_page,</span><br><span class=\"line\">    layout: [<span class=\"string\">'index'</span>, <span class=\"string\">'archive'</span>],</span><br><span class=\"line\">    format: paginationDir + <span class=\"string\">'/%d/'</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      __index: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>写文章的时候,在标题加上top值,数值越大排在越前面.</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tag: hexo </span><br><span class=\"line\">copyright: true</span><br><span class=\"line\">password: xxx</span><br><span class=\"line\">top: 150</span><br></pre></td></tr></table></figure>\n<h3 id=\"17-在网站底部加上访问量\"><a href=\"#17-在网站底部加上访问量\" class=\"headerlink\" title=\"17. 在网站底部加上访问量\"></a>17. 在网站底部加上访问量</h3><p><strong>Next主题配置这个就比较方便了</strong></p>\n<p>打开<code>主题配置文件</code>，找到如下配置：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">busuanzi_count:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  total_visitors:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  total_visitors_icon:</span> <span class=\"string\">user</span></span><br><span class=\"line\"><span class=\"attr\">  total_views:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  total_views_icon:</span> <span class=\"string\">eye</span></span><br><span class=\"line\"><span class=\"attr\">  post_views:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  post_views_icon:</span> <span class=\"string\">eye</span></span><br></pre></td></tr></table></figure>\n<p>将<code>enable</code>的值由<code>false</code>改为<code>true</code>，便可以看到页脚出现访问量.</p>\n<p>另外本地预览时访客数异常是正常的,部署至云端后就不会出现这样的问题.</p>\n<h3 id=\"18-网站搜索功能\"><a href=\"#18-网站搜索功能\" class=\"headerlink\" title=\"18. 网站搜索功能\"></a>18. 网站搜索功能</h3><p>1.安装插件</p>\n<p>​    站点目录下执行命令<code>npm install hexo-generator-searchdb --save</code></p>\n<p>2.修改<code>站点配置文件</code> </p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">search.xml</span></span><br><span class=\"line\"><span class=\"attr\">  field:</span> <span class=\"string\">post</span></span><br><span class=\"line\"><span class=\"attr\">  format:</span> <span class=\"string\">html</span></span><br><span class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">10000</span></span><br></pre></td></tr></table></figure>\n<p>3.修改<code>主题配置文件</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Local search</span></span><br><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class=\"line\"><span class=\"attr\">local_search:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"string\">enable</span></span><br><span class=\"line\">  <span class=\"comment\"># if auto, trigger search by changing input</span></span><br><span class=\"line\">  <span class=\"comment\"># if manual, trigger search by pressing enter key or search button</span></span><br><span class=\"line\"><span class=\"attr\">  trigger:</span> <span class=\"string\">auto</span></span><br><span class=\"line\">  <span class=\"comment\"># show top n results per article, show all results by setting to -1</span></span><br><span class=\"line\"><span class=\"attr\">  top_n_per_article:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\"># unescape html strings to the readable one</span></span><br><span class=\"line\"><span class=\"attr\">  unescape:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>重新开启服务后即可看到效果。</p>\n<h3 id=\"TODO开启留言评论功能\"><a href=\"#TODO开启留言评论功能\" class=\"headerlink\" title=\"TODO开启留言评论功能\"></a>TODO开启留言评论功能</h3><p>//TODO 待更新</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo官方文档</a></p>\n<p><a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">Next官方文档</a></p>\n","site":{"data":{}},"excerpt":"<p>本章主要包含了博客主题优化相关内容，第三方服务和插件的配置与使用。如：炫酷头像动态背景、链接变色、鼠标点击效果、站点字数、访客数统计等。</p>","more":"<blockquote>\n<p>这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。</p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h3 id=\"0-选择主题\"><a href=\"#0-选择主题\" class=\"headerlink\" title=\"0. 选择主题\"></a>0. 选择主题</h3><p>你可以点击这里选择你喜欢的<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">Themes</a>,里面有大量美观的主题 </p>\n<p>我这里用的是简约著称的<code>Next</code>主题.</p>\n<ul>\n<li>下载主题<ul>\n<li>使用<code>git</code>命令下载该主题到本地.</li>\n<li><code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code>  </li>\n<li>clone成功后,你的Themes文件夹下就会有next主题文件了.</li>\n</ul>\n</li>\n<li>Hexo配置文件:<ul>\n<li>都叫<code>_config.yml</code></li>\n<li>一份位于站点根目录下，主要包含 Hexo 本身的配置,称为 <code>站点配置文件</code></li>\n<li>另一份位于主题目录下主要用于配置主题相关的选项,称为<code>主题配置文件</code></li>\n</ul>\n</li>\n<li>开启主题<ul>\n<li><code>站点配置文件</code>进行修改: 将<code>theme: landscape</code>修改为 <code>theme: next</code> </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-侧边栏头像设置\"><a href=\"#1-侧边栏头像设置\" class=\"headerlink\" title=\"1. 侧边栏头像设置\"></a>1. 侧边栏头像设置</h3><p>新版next注意引入了该功能,直接在<code>主题配置文件</code>修改即可,如下:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Sidebar Avatar 头像</span></span><br><span class=\"line\"><span class=\"attr\">avatar:</span></span><br><span class=\"line\"><span class=\"attr\">  url:</span> <span class=\"string\">/images/avatar.gif</span></span><br><span class=\"line\">  <span class=\"comment\"># 圆形头像</span></span><br><span class=\"line\"><span class=\"attr\">  rounded:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># 透明度 0~1之间</span></span><br><span class=\"line\"><span class=\"attr\">  opacity:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\"># 头像旋转</span></span><br><span class=\"line\"><span class=\"attr\">  rotated:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-设置个人社交图标链接\"><a href=\"#2-设置个人社交图标链接\" class=\"headerlink\" title=\"2. 设置个人社交图标链接\"></a>2. 设置个人社交图标链接</h3><p>直接在<code>主题配置文件</code>修改即可,如下:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Social Links. 社交链接 前面为链接地址 后面是图标 </span></span><br><span class=\"line\"><span class=\"attr\">social:</span></span><br><span class=\"line\"><span class=\"attr\">  GitHub:</span> <span class=\"attr\">https://github.com/illusorycloud</span> <span class=\"string\">||</span> <span class=\"string\">github</span></span><br><span class=\"line\"><span class=\"attr\">  E-Mail:</span> <span class=\"attr\">mailto:xueduan.li@gmail.com</span> <span class=\"string\">||</span> <span class=\"string\">envelope</span></span><br><span class=\"line\">  <span class=\"comment\">#Weibo: https://weibo.com/yourname || weibo</span></span><br><span class=\"line\">  <span class=\"comment\">#Google: https://plus.google.com/yourname || google</span></span><br><span class=\"line\">  <span class=\"comment\">#Twitter: https://twitter.com/yourname || twitter</span></span><br><span class=\"line\">  <span class=\"comment\">#FB Page: https://www.facebook.com/yourname || facebook</span></span><br><span class=\"line\">  <span class=\"comment\">#VK Group: https://vk.com/yourname || vk</span></span><br><span class=\"line\">  <span class=\"comment\">#StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span></span><br><span class=\"line\">  <span class=\"comment\">#YouTube: https://youtube.com/yourname || youtube</span></span><br><span class=\"line\">  <span class=\"comment\">#Instagram: https://instagram.com/yourname || instagram</span></span><br><span class=\"line\">  <span class=\"comment\">#Skype: skype:yourname?call|chat || skype</span></span><br><span class=\"line\"><span class=\"comment\"># 图标配置 </span></span><br><span class=\"line\"><span class=\"attr\">social_icons:</span></span><br><span class=\"line\">  <span class=\"comment\">#是否显示图标</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\">#是否只显示图标</span></span><br><span class=\"line\"><span class=\"attr\">  icons_only:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\">#是否开启图标变化(就是刷新后会变颜色)</span></span><br><span class=\"line\"><span class=\"attr\">  transition:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-添加菜单项\"><a href=\"#3-添加菜单项\" class=\"headerlink\" title=\"3. 添加菜单项\"></a>3. 添加菜单项</h3><p>1.先在<code>主题配置文件</code>修改</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\"><span class=\"attr\">  home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">home</span></span><br><span class=\"line\"><span class=\"attr\">  about:</span> <span class=\"string\">/about/</span> <span class=\"string\">||</span> <span class=\"string\">user</span></span><br><span class=\"line\"><span class=\"attr\">  tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">tags</span></span><br><span class=\"line\"><span class=\"attr\">  categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">th</span></span><br><span class=\"line\"><span class=\"attr\">  archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">archive</span></span><br><span class=\"line\"><span class=\"attr\">  AAAAA:</span> <span class=\"string\">/BBBBB/</span> <span class=\"string\">||</span> <span class=\"string\">CCC</span></span><br><span class=\"line\"><span class=\"string\">其中AAA</span> <span class=\"string\">为菜单项的名字,BBB是路径,CCC是菜单项显示的图标</span></span><br></pre></td></tr></table></figure>\n<p> <code>next</code> 使用的是 <a href=\"http://fontawesome.io/\" target=\"_blank\" rel=\"noopener\">Font Awesome</a> 提供的图标 ,在这里可以选择自己喜欢的图标.</p>\n<p>2.生成上述路径的文件</p>\n<p><code>git</code>命令行输入</p>\n<p><code>hexo new page BBB</code> –其中BBB替换为具体的名字,会在<code>站点目录\\source</code>下新增一个BBB文件夹,文件夹中有一个<code>index.md</code>文件，需要在文件头中增加一句<code>type: XXX</code>,例如<code>type: categories</code>。这样就会在这个页面显示所有的分类了。</p>\n<p>3.修改主题文件下的对应语言的配置文件,这里是中文就修改<code>zh-CN.yml</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\"><span class=\"attr\">  home:</span> <span class=\"string\">首页</span></span><br><span class=\"line\"><span class=\"attr\">  archives:</span> <span class=\"string\">归档</span></span><br><span class=\"line\">  <span class=\"string\">AAAA</span> <span class=\"string\">:</span> <span class=\"string\">XXXX</span></span><br><span class=\"line\"><span class=\"string\">AAA为上边的菜单项名字,XXX为中文的名字</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-添加RSS\"><a href=\"#4-添加RSS\" class=\"headerlink\" title=\"4. 添加RSS\"></a>4. 添加RSS</h3><ul>\n<li><p>1.安装插件</p>\n<ul>\n<li><p>首先在Git中运行<code>npm install --save hexo-generator-feed</code>命令,安装插件,插件会放在</p>\n<p><code>node_modules</code>文件夹里面.</p>\n</li>\n</ul>\n</li>\n<li><p>2.修改<code>站点配置文件</code></p>\n<ul>\n<li>安装好插件后,打开站点配置文件_config.yml`,在末尾加入以下代码:</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: http://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"attr\">plugins:</span> <span class=\"string\">hexo-generate-feed</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>3.修改<code>主题配置文件</code><ul>\n<li>打开主题配置文件<code>_config.yml</code>,找到<code>rss</code> 添加配置:<code>rss: /atom.xml</code> </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-设置酷炫动态背景\"><a href=\"#5-设置酷炫动态背景\" class=\"headerlink\" title=\"5. 设置酷炫动态背景\"></a>5. 设置酷炫动态背景</h3><p>next主题提供了两种背景可以选择.</p>\n<ul>\n<li>第一种背景（我是用的这种）</li>\n</ul>\n<p>新版本的next主题的话直接在主题配置文件中,找到<code>canvas-nest</code> 修改为<code>canvas-nest: true</code>,</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Canvas-nest</span></span><br><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span></span><br><span class=\"line\"><span class=\"attr\">canvas_nest:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  onmobile:</span> <span class=\"literal\">true</span> <span class=\"comment\"># display on mobile or not</span></span><br><span class=\"line\"><span class=\"attr\">  color:</span> <span class=\"string\">'0,0,255'</span> <span class=\"comment\"># RGB values, use ',' to separate</span></span><br><span class=\"line\"><span class=\"attr\">  opacity:</span> <span class=\"number\">0.5</span> <span class=\"comment\"># the opacity of line: 0~1</span></span><br><span class=\"line\"><span class=\"attr\">  zIndex:</span> <span class=\"bullet\">-1</span> <span class=\"comment\"># z-index property of the background</span></span><br><span class=\"line\"><span class=\"attr\">  count:</span> <span class=\"number\">99</span> <span class=\"comment\"># the number of lines</span></span><br></pre></td></tr></table></figure>\n<p>进入theme/next目录</p>\n<p> 执行命令<code>git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest</code></p>\n<ul>\n<li>第二种背景</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># JavaScript 3D library.</span></span><br><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/theme-next/theme-next-three</span></span><br><span class=\"line\"><span class=\"comment\"># three_waves</span></span><br><span class=\"line\"><span class=\"attr\">three_waves:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># canvas_lines</span></span><br><span class=\"line\"><span class=\"attr\">canvas_lines:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># canvas_sphere</span></span><br><span class=\"line\"><span class=\"attr\">canvas_sphere:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>也是需要下载依赖 </p>\n<ol>\n<li>进入theme/next目录</li>\n<li>执行命令：<code>git clone https://github.com/theme-next/theme-next-three source/lib/three</code></li>\n</ol>\n<p><strong>4个背景中只能开启一种背景,不然会出错</strong></p>\n<h3 id=\"6-设置网站logo\"><a href=\"#6-设置网站logo\" class=\"headerlink\" title=\"6. 设置网站logo\"></a>6. 设置网站logo</h3><p>把你的图片放在<code>themes/next/source/images</code>里 </p>\n<p>打开<code>主题配置文件</code>_config.yml ,找到字段<code>favicon:</code>  都修改为对应路径</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">favicon:</span></span><br><span class=\"line\"><span class=\"attr\">  small:</span> <span class=\"string\">/images/favicon-16x16-next.png</span></span><br><span class=\"line\"><span class=\"attr\">  medium:</span> <span class=\"string\">/images/favicon-32x32-next.png</span></span><br><span class=\"line\"><span class=\"attr\">  apple_touch_icon:</span> <span class=\"string\">/images/apple-touch-icon-next.png</span></span><br><span class=\"line\"><span class=\"attr\">  safari_pinned_tab:</span> <span class=\"string\">/images/logo.svg</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"7-实现点击出现桃心效果\"><a href=\"#7-实现点击出现桃心效果\" class=\"headerlink\" title=\"7. 实现点击出现桃心效果\"></a>7. 实现点击出现桃心效果</h3><p><code>themes/next/source/js/src</code>里面 新建一个love.js,</p>\n<p>复制下面的代码进去</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e,t,a</span>)</span>&#123;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">n</span>(<span class=\"params\"></span>)</span>&#123;c(<span class=\"string\">\".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;\"</span>),o(),r()&#125;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">r</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> e=<span class=\"number\">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class=\"number\">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class=\"number\">1</span>)):(d[e].y--,d[e].scale+=<span class=\"number\">.004</span>,d[e].alpha-=<span class=\"number\">.013</span>,d[e].el.style.cssText=<span class=\"string\">\"left:\"</span>+d[e].x+<span class=\"string\">\"px;top:\"</span>+d[e].y+<span class=\"string\">\"px;opacity:\"</span>+d[e].alpha+<span class=\"string\">\";transform:scale(\"</span>+d[e].scale+<span class=\"string\">\",\"</span>+d[e].scale+<span class=\"string\">\") rotate(45deg);background:\"</span>+d[e].color+<span class=\"string\">\";z-index:99999\"</span>);requestAnimationFrame(r)&#125;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">o</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">var</span> t=<span class=\"string\">\"function\"</span>==<span class=\"keyword\">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">i</span>(<span class=\"params\">e</span>)</span>&#123;<span class=\"keyword\">var</span> a=t.createElement(<span class=\"string\">\"div\"</span>);a.className=<span class=\"string\">\"heart\"</span>,d.push(&#123;<span class=\"attr\">el</span>:a,<span class=\"attr\">x</span>:e.clientX<span class=\"number\">-5</span>,<span class=\"attr\">y</span>:e.clientY<span class=\"number\">-5</span>,<span class=\"attr\">scale</span>:<span class=\"number\">1</span>,<span class=\"attr\">alpha</span>:<span class=\"number\">1</span>,<span class=\"attr\">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\">e</span>)</span>&#123;<span class=\"keyword\">var</span> a=t.createElement(<span class=\"string\">\"style\"</span>);a.type=<span class=\"string\">\"text/css\"</span>;<span class=\"keyword\">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class=\"keyword\">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class=\"string\">\"head\"</span>)[<span class=\"number\">0</span>].appendChild(a)&#125;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">s</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span><span class=\"string\">\"rgb(\"</span>+~~(<span class=\"number\">255</span>*<span class=\"built_in\">Math</span>.random())+<span class=\"string\">\",\"</span>+~~(<span class=\"number\">255</span>*<span class=\"built_in\">Math</span>.random())+<span class=\"string\">\",\"</span>+~~(<span class=\"number\">255</span>*<span class=\"built_in\">Math</span>.random())+<span class=\"string\">\")\"</span>&#125;<span class=\"keyword\">var</span> d=[];e.requestAnimationFrame=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;setTimeout(e,<span class=\"number\">1e3</span>/<span class=\"number\">60</span>)&#125;&#125;(),n()&#125;(<span class=\"built_in\">window</span>,<span class=\"built_in\">document</span>);</span><br></pre></td></tr></table></figure>\n<p>然后打开<code>\\themes\\next\\layout\\_layout.swig</code>文件,在末尾 添加以下代码： </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 页面点击小红心 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/js/src/love.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"8-修改文章内链接文本样式\"><a href=\"#8-修改文章内链接文本样式\" class=\"headerlink\" title=\"8. 修改文章内链接文本样式\"></a>8. 修改文章内链接文本样式</h3><p>鼠标移动到连接上变颜色</p>\n<p>修改文件 <code>themes\\next\\source\\css\\_common\\components\\post\\post.styl</code>，在末尾添加如下css样式，：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 文章内链接文本样式</span><br><span class=\"line\"><span class=\"selector-class\">.post-body</span> <span class=\"selector-tag\">p</span> <span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#0593d3</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#0593d3</span>;</span><br><span class=\"line\">  &amp;:hover &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#fc6423</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">border-bottom</span>: <span class=\"selector-tag\">none</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">border-bottom</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#fc6423</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-设置顶部滚动加载条\"><a href=\"#9-设置顶部滚动加载条\" class=\"headerlink\" title=\"9. 设置顶部滚动加载条\"></a>9. 设置顶部滚动加载条</h3><p>打开<code>next\\layout\\_partials\\head</code>文件，在文件末尾添加以下代码: </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//cdn.bootcss.com/pace/1.0.2/pace.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.pace</span> <span class=\"selector-class\">.pace-progress</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#1E92FB</span>; <span class=\"comment\">/*进度条颜色*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">        height: 3px;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.pace</span> <span class=\"selector-class\">.pace-progress-inner</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">         <span class=\"selector-tag\">box-shadow</span>: 0 0 10<span class=\"selector-tag\">px</span> <span class=\"selector-id\">#1E92FB</span>, 0 0 5<span class=\"selector-tag\">px</span>     <span class=\"selector-id\">#1E92FB</span>; <span class=\"comment\">/*阴影颜色*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.pace</span> <span class=\"selector-class\">.pace-activity</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">border-top-color</span>: <span class=\"selector-id\">#1E92FB</span>;    <span class=\"comment\">/*上边框颜色*/</span></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">border-left-color</span>: <span class=\"selector-id\">#1E92FB</span>;    <span class=\"comment\">/*左边框颜色*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"10-在每篇文章末尾统一添加“本文结束”标记\"><a href=\"#10-在每篇文章末尾统一添加“本文结束”标记\" class=\"headerlink\" title=\"10. 在每篇文章末尾统一添加“本文结束”标记\"></a>10. 在每篇文章末尾统一添加“本文结束”标记</h3><p>在路径 <code>\\themes\\next\\layout\\_macro</code> 中新建 <code>page-end-tag.swig</code> 文件,并添加以下内容： </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--文字可以自己修改--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    &#123;% if not is_index %&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"text-align:center;color: #A2CD5A;font-size:15px;\"</span>&gt;</span>------------------本文到此结束<span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-paw\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>感谢您的阅读------------------<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>接着打开<code>\\themes\\next\\layout\\_macro\\post.swig</code>文件，在<code>post-body</code> 之后， <code>post-footer</code> 之前添加下面的代码 </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  &#123;% if not is_index %&#125;</span><br><span class=\"line\">    &#123;% include 'page-end-tag.swig' %&#125;</span><br><span class=\"line\">  &#123;% endif %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后打开主题配置文件（<code>_config.yml</code>),在末尾添加： </p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 文章末尾添加“本文结束”标记</span></span><br><span class=\"line\"><span class=\"attr\">page_end_tag:</span></span><br><span class=\"line\"><span class=\"attr\">  enabled:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"11-静态资源压缩\"><a href=\"#11-静态资源压缩\" class=\"headerlink\" title=\"11. 静态资源压缩\"></a>11. 静态资源压缩</h3><p>Hexo自动生成的html中有很多空白的地方,会影响加载速度,所以最好还是压缩一下.</p>\n<p>这里使用<code>hexo-neat</code>插件来压缩。</p>\n<ul>\n<li><p>安装插件</p>\n<ul>\n<li><code>npm install hexo-neat --save</code></li>\n</ul>\n</li>\n<li><p>在<code>站点配置文件</code>添加配置</p>\n<ul>\n<li><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># hexo-neat</span></span><br><span class=\"line\"><span class=\"comment\"># 博文压缩</span></span><br><span class=\"line\"><span class=\"attr\">neat_enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 压缩html</span></span><br><span class=\"line\"><span class=\"attr\">neat_html:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  exclude:</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 压缩css  跳过min.css</span></span><br><span class=\"line\"><span class=\"attr\">neat_css:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  exclude:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">'**/*.min.css'</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 压缩js 跳过min.js</span></span><br><span class=\"line\"><span class=\"attr\">neat_js:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  mangle:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  output:</span></span><br><span class=\"line\"><span class=\"attr\">  compress:</span></span><br><span class=\"line\"><span class=\"attr\">  exclude:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">'**/*.min.js'</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">'**/jquery.fancybox.pack.js'</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">'**/index.js'</span>  </span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">'**/love.js'</span></span><br><span class=\"line\"><span class=\"comment\"># 压缩博文配置结束</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>3.使用 </p>\n<ul>\n<li>以后再执行<code>hexo g</code>命令时就会自动压缩了</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"12-主页文章添加阴影效果\"><a href=\"#12-主页文章添加阴影效果\" class=\"headerlink\" title=\"12. 主页文章添加阴影效果\"></a>12. 主页文章添加阴影效果</h3><p>打开<code>\\themes\\next\\source\\css\\_custom\\custom.styl</code>,向里面加入： </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 主页文章添加阴影效果</span></span><br><span class=\"line\"> .post &#123;</span><br><span class=\"line\">   margin-top: <span class=\"number\">60</span>px;</span><br><span class=\"line\">   margin-bottom: <span class=\"number\">60</span>px;</span><br><span class=\"line\">   padding: <span class=\"number\">25</span>px;</span><br><span class=\"line\">   -webkit-box-shadow: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">5</span>px rgba(<span class=\"number\">202</span>, <span class=\"number\">203</span>, <span class=\"number\">203</span>, <span class=\"number\">.5</span>);</span><br><span class=\"line\">   -moz-box-shadow: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">5</span>px rgba(<span class=\"number\">202</span>, <span class=\"number\">203</span>, <span class=\"number\">204</span>, <span class=\"number\">.5</span>);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"13-修改文章底部的的标签样式\"><a href=\"#13-修改文章底部的的标签样式\" class=\"headerlink\" title=\"13. 修改文章底部的的标签样式\"></a>13. 修改文章底部的的标签样式</h3><p>打开模板文件<code>/themes/next/layout/_macro/post.swig</code>，找到<code>rel=&quot;tag&quot;&gt;#</code>字段， 将<code># 换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code>,其中tag是你选择标签图标的名字,也是可以自定义的 </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; url_for(tag.path) &#125;&#125;\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"tag\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-tag\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span> &#123;&#123; tag.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"14-实现文章字数统计和预计阅读时间\"><a href=\"#14-实现文章字数统计和预计阅读时间\" class=\"headerlink\" title=\"14. 实现文章字数统计和预计阅读时间\"></a>14. 实现文章字数统计和预计阅读时间</h3><p>1.在站点根目录下使用<code>GitBash</code>命令安装 <code>hexo-wordcoun</code>t插件:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>\n<p>2.在全局配置文件<code>_config.yml</code>中激活插件:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">symbols_count_time:</span></span><br><span class=\"line\"><span class=\"attr\">    symbols:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    time:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    total_symbols:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    total_time:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>3.在主题的配置文件<code>_config.yml</code>中进行如下配置:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#字数统计</span></span><br><span class=\"line\"><span class=\"attr\">symbols_count_time:</span></span><br><span class=\"line\"><span class=\"attr\">  separated_meta:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  item_text_post:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  item_text_total:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  awl:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"attr\">  wpm:</span> <span class=\"number\">275</span></span><br></pre></td></tr></table></figure>\n<p>到此,我们就实现了文章字数统计和预估时间的显示功能</p>\n<h3 id=\"15-在文章底部增加版权信息\"><a href=\"#15-在文章底部增加版权信息\" class=\"headerlink\" title=\"15. 在文章底部增加版权信息\"></a>15. 在文章底部增加版权信息</h3><p>修改<code>主题配置文件</code>,找到<code>creative_commons</code>字段</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Creative Commons 4.0 International License.</span></span><br><span class=\"line\"><span class=\"comment\"># https://creativecommons.org/share-your-work/licensing-types-examples</span></span><br><span class=\"line\"><span class=\"comment\"># Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span></span><br><span class=\"line\"><span class=\"attr\">creative_commons:</span></span><br><span class=\"line\">  <span class=\"comment\">#选择一个License</span></span><br><span class=\"line\"><span class=\"attr\">  license:</span> <span class=\"string\">by-nc-sa</span></span><br><span class=\"line\">  <span class=\"comment\">#是否在侧边栏显示</span></span><br><span class=\"line\"><span class=\"attr\">  sidebar:</span> <span class=\"literal\">false</span>  </span><br><span class=\"line\">  <span class=\"comment\">#是否在文章末尾显示</span></span><br><span class=\"line\"><span class=\"attr\">  post:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"16-文章置顶\"><a href=\"#16-文章置顶\" class=\"headerlink\" title=\"16. 文章置顶\"></a>16. 文章置顶</h3><p>打开文件：<code>node_modules/hexo-generator-index/lib/generator.js</code>,将原来的代码用下面的代码替换掉</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> pagination = <span class=\"built_in\">require</span>(<span class=\"string\">'hexo-pagination'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">locals</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> config = <span class=\"keyword\">this</span>.config;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> posts = locals.posts;</span><br><span class=\"line\">    posts.data = posts.data.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a.top &amp;&amp; b.top) &#123; <span class=\"comment\">// 两篇文章top都有定义</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a.top == b.top) <span class=\"keyword\">return</span> b.date - a.date; <span class=\"comment\">// 若top值一样则按照文章日期降序排</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> b.top - a.top; <span class=\"comment\">// 否则按照top值降序排</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a.top &amp;&amp; !b.top) &#123; <span class=\"comment\">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> b.date - a.date; <span class=\"comment\">// 都没定义按照文章日期降序排</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> paginationDir = config.pagination_dir || <span class=\"string\">'page'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pagination(<span class=\"string\">''</span>, posts, &#123;</span><br><span class=\"line\">    perPage: config.index_generator.per_page,</span><br><span class=\"line\">    layout: [<span class=\"string\">'index'</span>, <span class=\"string\">'archive'</span>],</span><br><span class=\"line\">    format: paginationDir + <span class=\"string\">'/%d/'</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      __index: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>写文章的时候,在标题加上top值,数值越大排在越前面.</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tag: hexo </span><br><span class=\"line\">copyright: true</span><br><span class=\"line\">password: xxx</span><br><span class=\"line\">top: 150</span><br></pre></td></tr></table></figure>\n<h3 id=\"17-在网站底部加上访问量\"><a href=\"#17-在网站底部加上访问量\" class=\"headerlink\" title=\"17. 在网站底部加上访问量\"></a>17. 在网站底部加上访问量</h3><p><strong>Next主题配置这个就比较方便了</strong></p>\n<p>打开<code>主题配置文件</code>，找到如下配置：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">busuanzi_count:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  total_visitors:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  total_visitors_icon:</span> <span class=\"string\">user</span></span><br><span class=\"line\"><span class=\"attr\">  total_views:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  total_views_icon:</span> <span class=\"string\">eye</span></span><br><span class=\"line\"><span class=\"attr\">  post_views:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  post_views_icon:</span> <span class=\"string\">eye</span></span><br></pre></td></tr></table></figure>\n<p>将<code>enable</code>的值由<code>false</code>改为<code>true</code>，便可以看到页脚出现访问量.</p>\n<p>另外本地预览时访客数异常是正常的,部署至云端后就不会出现这样的问题.</p>\n<h3 id=\"18-网站搜索功能\"><a href=\"#18-网站搜索功能\" class=\"headerlink\" title=\"18. 网站搜索功能\"></a>18. 网站搜索功能</h3><p>1.安装插件</p>\n<p>​    站点目录下执行命令<code>npm install hexo-generator-searchdb --save</code></p>\n<p>2.修改<code>站点配置文件</code> </p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">search.xml</span></span><br><span class=\"line\"><span class=\"attr\">  field:</span> <span class=\"string\">post</span></span><br><span class=\"line\"><span class=\"attr\">  format:</span> <span class=\"string\">html</span></span><br><span class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">10000</span></span><br></pre></td></tr></table></figure>\n<p>3.修改<code>主题配置文件</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Local search</span></span><br><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class=\"line\"><span class=\"attr\">local_search:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"string\">enable</span></span><br><span class=\"line\">  <span class=\"comment\"># if auto, trigger search by changing input</span></span><br><span class=\"line\">  <span class=\"comment\"># if manual, trigger search by pressing enter key or search button</span></span><br><span class=\"line\"><span class=\"attr\">  trigger:</span> <span class=\"string\">auto</span></span><br><span class=\"line\">  <span class=\"comment\"># show top n results per article, show all results by setting to -1</span></span><br><span class=\"line\"><span class=\"attr\">  top_n_per_article:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\"># unescape html strings to the readable one</span></span><br><span class=\"line\"><span class=\"attr\">  unescape:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>重新开启服务后即可看到效果。</p>\n<h3 id=\"TODO开启留言评论功能\"><a href=\"#TODO开启留言评论功能\" class=\"headerlink\" title=\"TODO开启留言评论功能\"></a>TODO开启留言评论功能</h3><p>//TODO 待更新</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo官方文档</a></p>\n<p><a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">Next官方文档</a></p>"},{"title":"基于Hexo搭建个人博客之（三）--部署篇","abbrlink":41257,"date":"2018-12-25T04:00:00.000Z","_content":"\n本章主要记录了如何将博客部署至云端，怎么设置个性域名，怎么将自己的网站提交到百度Google。让自己的网站能够出现在各大搜索引擎的具体方法和过程，希望能对大家有帮助。  \n\n<!--more-->\n\n> 这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 购买个性域名\n\n估计大家折腾了这么久也就是为 了拥有一个自己的个性站点,所以强烈建议大家为自己的博客站点配置一个独一无二的个性域名.我这里选择阿里旗下的[万网](https://wanwang.aliyun.com/?spm=5176.8142029.735711.62.f0586d3eFXYcmo)。我的域名是[www.lixueduan.com](https://www.lixueduan.com)\n\n大家可以选择一个自己喜欢的域名。等部署完毕就可以通过域名访问自己的博客了。\n\n**问题：**\n\n- **GithubPages/CodingPages**\n\n  - Github Pages是[Github](https://github.com/)免费提供给开发者的一款托管个人网站的产品。\n  - Coding Pages也是[Coding](https://coding.net/)免费提供给开发者的一款托管个人网站的产品。\n\n- **关于为什么要部署两次**\n\n  > 虽然可以根据自定义域名来访问自己的博客了，但是百度谷歌上都搜索不到，那岂不是很难受`╮(╯▽╰)╭`。\n  >\n  > 所以接下来为了让自己的博客能够被搜索出来，就需要让百度谷歌收录我们的网站。在部署收录过程中发现，**`Github`屏蔽了百度的爬虫**，所以搭建上`GithubPages`的话无法提交至百度，只有Google可以收录。\n  >\n  > 所以为了让百度收录我们网站，就得在Coding上也搭建一个。\n  >\n  > 同时在搭建的过程中发现如果先搭建在Github上，然后再搭建Coding时会出现`DNS解析`冲突。所以需要：**先搭建Coding上的，再搭建Github上的，国外的访问则走`Github`，国内的访问会走`Coding`，完美**\n\n## 2. 部署到CodingPages\n\n### 2.1 注册coding账户 \n\n 点击这里注册Coding](https://coding.net/)\n\n### 2.2 创建新项目\n\n- 注册好后创建一个项目用来部署个人博客，项目路径和项目名称最好和用户名一致\n- ![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-deploy-coding1.png)\n\n### 2.3 开启CodingPages\n\n- ![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-deploy-coding2.png)\n\n 点击Pages服务，然后一键开启。\n\n部署master分支\n\n自定义域名 可以填两个 `www.xxx.com` 和`xxx.com`\n\n绑定自定义域名的时候需要在买域名的地方(我这里是阿里的万网)配置DNS解析\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-coding-dns.png)\n\n```java\n添加两条CNAME解析\n主机记录\n\t一个@，一个www//@就是无前缀，xxx.com, www就是www.xxx.com\n解析路线\n\t默认就行\n记录值\n\tlillusory.coding.me //这里改成自己的\n```\n\n 然后可以开启Https访问。\n\n到这里就可以通过个性域名访问啦。不过现在博客代码还没有`push`到项目里。\n\n### 2.4 Push代码到Coding\n\n**配置SSH key**\n\n首先需要配置一个`SSHkey`，`Git`有`Http`协议和`Git`协议两种。我们这里使用`Git`协议就需要配置一个`SSH key`,等会部署到`Github`上也需要配置这个。\n\n具体配置方法如下：\n\n[Git 配置及SSH key](https://www.lixueduan.com/categories/Git/)\n\n**修改站点配置文件**\n\n这里只配置了Coding，可以先把Github的注释掉\n\n```java\n# Deployment 部署到云端相关配置\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: \n   github: git@github.com:illusorycloud/illusorycloud.github.io.git\n   coding: git@git.coding.net:illusorycloud/illusorycloud.git\n  branch: master\n```\n\n**地址在这里：**\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-deploy-coding3.png)\n\n配置好后，运行`hexo g时就可以把博客部署到Coding上了，也可以通过个性域名访问了。`\n\n## 3. 收录到百度\n\n### 3.1 网站添加\n\n直接百度搜索你的域名,比如我的`www.lixueduan.com` ，如果没有收录就会提示暂未收录，点击`提交网址`。\n\n点击这个链接进入百度站长平台，登录成功后选择`用户中心-->站点管理-->添加网站 \n\n输入自己的网站，如`www.lixueduan.com` 协议头如果开启了`https`就选`https`\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-baidu1-add.png)\n\n### 3.2 网站验证\n\n然后会验证这个网站是不是你的，选CNAME验证\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-baidu2-verfication.png)\n\n然后去域名哪里添加一条解析即可。\n\n记录类型-->`CNAME`\n\n主机记录--->前面那一串`l3rUDBLOMX`\n\n记录值-->后面那个`ziyuan.baidu.com`\n\n其他的都按默认的就行了，添加后别删除，需要一直留着。\n\n### 3.3 站点地图\n\n接下来我们需要生成网站地图`sitemap`,使用sitemap方式向百度提交我们的网址\n\n站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。\n\n- 先安装一下，打开你的hexo博客根目录，分别用下面两个命令来安装针对谷歌和百度的插件\n\n```xml\nnpm install hexo-generator-sitemap --save  #sitemap.xml适合提交给谷歌搜素引擎\nnpm install hexo-generator-baidu-sitemap --save  #baidusitemap.xml适合提交百度搜索引擎\n```\n\n- 在`站点配置文件`中添加如下代码\n\n```xml\nPlugins:\n- hexo-generator-baidu-sitemap\n- hexo-generator-sitemap\n\nbaidusitemap:\n    path: baidusitemap.xml\nsitemap:\n    path: sitemap.xml\n```\n\n在你的博客根目录的public下面发现生成了sitemap.xml以及baidusitemap.xml就表示成功了.\n\n然后将博客重新部署后就可以直接访问站点地图了。如`https://www.lixueduan.com/baidusitemap.xml`\n\n然后将这个`站点地图`提交到百度\n\n`站点管理-->站点属性-->链接提交-->自动提交-->sitemap`\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-baidu3-sitemap.png)\n\n完成后就算是提交成功了，百度比较慢，要好几天才能收录。\n\n## 4. 部署到GitHub\n\n步骤和Coding差不多的。\n\n### 4.1 注册Github账号\n\n[点这里注册Github账号](https://github.com/)\n\n### 4.2 创建新仓库\n\n也是名字必须和用户名一样，必须按照这个格式`username.github.io`，例如`lillusorycloud.github.io`\n\n创建好仓库后找到`Setings`  往下拉，找到`Github Pages`  设置`Custom domain`填下自定义域名，如`www.lixueduan.com`.如果有`Enforce HTTPS `选项也可以勾上。\n\n### 4.3 Push代码到Github\n\n**配置SSH key**\n\n首先需要配置一个`SSHkey`，`Git`有`Http`协议和`Git`协议两种。我们这里使用`Git`协议就需要配置一个`SSH key`,等会部署到`Github`上也需要配置这个。\n\n具体配置方法：\n\n[Git 配置及SSH key](https://www.lixueduan.com/categories/Git/)\n\n**修改站点配置文件**\n\n`repository`中添加一个`github`\n\n```java\n# Deployment 部署到云端相关配置\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: \n    github: git@github.com:illusorycloud/illusorycloud.github.io.git\n    coding: git@git.coding.net:illusorycloud/illusorycloud.git\n  branch: master\n```\n\n配置好后，运行`hexo g时就可以把博客同时部署到Coding和Github上了，也可以通过个性域名访问了。`\n\n## 5. 收录到Google\n\n和百度差不多。\n\n### 5.1 网站添加\n\n首先进入[Google站点平台](https://www.google.com/webmasters/#?modal_active=none)\n\n然后添加资源，注意`http`和`https`\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-add.png)\n\n### 5.2 验证所有权\n\n然后验证所有权,选择DNS供应商\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-verfication1.png)\n\n\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-verfication2.png)\n\n供应商选择其他，然后选择添加CNAME记录，在域名解析中添加一条记录。也是添加后不要删除。\n\n### 5.3 站点地图\n\n验证后就可以添加站点地图了\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-sitemap.png)\n\n提交成功后,我们的站点就已经被Google收录了.大概一天就能收录成功，比百度块一些。\n\n## 6. 总结\n\n本文主要讲了怎么将博客部署到`Coding`和`Github`和怎么让`百度`,`Google`收录我们的网站。\n\n## 7.参考\n\n[Hexo官方文档](https://hexo.io/zh-cn/docs/)\n\n[基于Hexo的个人博客](https://www.jianshu.com/p/cc902b54d493)\n\n[Hex博客搭建](https://blog.csdn.net/qq_35561857/article/details/81590953)\n\n","source":"_posts/hexo/hexo-blog-deploy-three.md","raw":"---\ntitle: 基于Hexo搭建个人博客之（三）--部署篇\ntags:\n  - Hexo\ncategories:\n  - Hexo\nabbrlink: 41257\ndate: 2018-12-25 12:00:00\n---\n\n本章主要记录了如何将博客部署至云端，怎么设置个性域名，怎么将自己的网站提交到百度Google。让自己的网站能够出现在各大搜索引擎的具体方法和过程，希望能对大家有帮助。  \n\n<!--more-->\n\n> 这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。\n>\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 购买个性域名\n\n估计大家折腾了这么久也就是为 了拥有一个自己的个性站点,所以强烈建议大家为自己的博客站点配置一个独一无二的个性域名.我这里选择阿里旗下的[万网](https://wanwang.aliyun.com/?spm=5176.8142029.735711.62.f0586d3eFXYcmo)。我的域名是[www.lixueduan.com](https://www.lixueduan.com)\n\n大家可以选择一个自己喜欢的域名。等部署完毕就可以通过域名访问自己的博客了。\n\n**问题：**\n\n- **GithubPages/CodingPages**\n\n  - Github Pages是[Github](https://github.com/)免费提供给开发者的一款托管个人网站的产品。\n  - Coding Pages也是[Coding](https://coding.net/)免费提供给开发者的一款托管个人网站的产品。\n\n- **关于为什么要部署两次**\n\n  > 虽然可以根据自定义域名来访问自己的博客了，但是百度谷歌上都搜索不到，那岂不是很难受`╮(╯▽╰)╭`。\n  >\n  > 所以接下来为了让自己的博客能够被搜索出来，就需要让百度谷歌收录我们的网站。在部署收录过程中发现，**`Github`屏蔽了百度的爬虫**，所以搭建上`GithubPages`的话无法提交至百度，只有Google可以收录。\n  >\n  > 所以为了让百度收录我们网站，就得在Coding上也搭建一个。\n  >\n  > 同时在搭建的过程中发现如果先搭建在Github上，然后再搭建Coding时会出现`DNS解析`冲突。所以需要：**先搭建Coding上的，再搭建Github上的，国外的访问则走`Github`，国内的访问会走`Coding`，完美**\n\n## 2. 部署到CodingPages\n\n### 2.1 注册coding账户 \n\n 点击这里注册Coding](https://coding.net/)\n\n### 2.2 创建新项目\n\n- 注册好后创建一个项目用来部署个人博客，项目路径和项目名称最好和用户名一致\n- ![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-deploy-coding1.png)\n\n### 2.3 开启CodingPages\n\n- ![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-deploy-coding2.png)\n\n 点击Pages服务，然后一键开启。\n\n部署master分支\n\n自定义域名 可以填两个 `www.xxx.com` 和`xxx.com`\n\n绑定自定义域名的时候需要在买域名的地方(我这里是阿里的万网)配置DNS解析\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-coding-dns.png)\n\n```java\n添加两条CNAME解析\n主机记录\n\t一个@，一个www//@就是无前缀，xxx.com, www就是www.xxx.com\n解析路线\n\t默认就行\n记录值\n\tlillusory.coding.me //这里改成自己的\n```\n\n 然后可以开启Https访问。\n\n到这里就可以通过个性域名访问啦。不过现在博客代码还没有`push`到项目里。\n\n### 2.4 Push代码到Coding\n\n**配置SSH key**\n\n首先需要配置一个`SSHkey`，`Git`有`Http`协议和`Git`协议两种。我们这里使用`Git`协议就需要配置一个`SSH key`,等会部署到`Github`上也需要配置这个。\n\n具体配置方法如下：\n\n[Git 配置及SSH key](https://www.lixueduan.com/categories/Git/)\n\n**修改站点配置文件**\n\n这里只配置了Coding，可以先把Github的注释掉\n\n```java\n# Deployment 部署到云端相关配置\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: \n   github: git@github.com:illusorycloud/illusorycloud.github.io.git\n   coding: git@git.coding.net:illusorycloud/illusorycloud.git\n  branch: master\n```\n\n**地址在这里：**\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-deploy-coding3.png)\n\n配置好后，运行`hexo g时就可以把博客部署到Coding上了，也可以通过个性域名访问了。`\n\n## 3. 收录到百度\n\n### 3.1 网站添加\n\n直接百度搜索你的域名,比如我的`www.lixueduan.com` ，如果没有收录就会提示暂未收录，点击`提交网址`。\n\n点击这个链接进入百度站长平台，登录成功后选择`用户中心-->站点管理-->添加网站 \n\n输入自己的网站，如`www.lixueduan.com` 协议头如果开启了`https`就选`https`\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-baidu1-add.png)\n\n### 3.2 网站验证\n\n然后会验证这个网站是不是你的，选CNAME验证\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-baidu2-verfication.png)\n\n然后去域名哪里添加一条解析即可。\n\n记录类型-->`CNAME`\n\n主机记录--->前面那一串`l3rUDBLOMX`\n\n记录值-->后面那个`ziyuan.baidu.com`\n\n其他的都按默认的就行了，添加后别删除，需要一直留着。\n\n### 3.3 站点地图\n\n接下来我们需要生成网站地图`sitemap`,使用sitemap方式向百度提交我们的网址\n\n站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。\n\n- 先安装一下，打开你的hexo博客根目录，分别用下面两个命令来安装针对谷歌和百度的插件\n\n```xml\nnpm install hexo-generator-sitemap --save  #sitemap.xml适合提交给谷歌搜素引擎\nnpm install hexo-generator-baidu-sitemap --save  #baidusitemap.xml适合提交百度搜索引擎\n```\n\n- 在`站点配置文件`中添加如下代码\n\n```xml\nPlugins:\n- hexo-generator-baidu-sitemap\n- hexo-generator-sitemap\n\nbaidusitemap:\n    path: baidusitemap.xml\nsitemap:\n    path: sitemap.xml\n```\n\n在你的博客根目录的public下面发现生成了sitemap.xml以及baidusitemap.xml就表示成功了.\n\n然后将博客重新部署后就可以直接访问站点地图了。如`https://www.lixueduan.com/baidusitemap.xml`\n\n然后将这个`站点地图`提交到百度\n\n`站点管理-->站点属性-->链接提交-->自动提交-->sitemap`\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-baidu3-sitemap.png)\n\n完成后就算是提交成功了，百度比较慢，要好几天才能收录。\n\n## 4. 部署到GitHub\n\n步骤和Coding差不多的。\n\n### 4.1 注册Github账号\n\n[点这里注册Github账号](https://github.com/)\n\n### 4.2 创建新仓库\n\n也是名字必须和用户名一样，必须按照这个格式`username.github.io`，例如`lillusorycloud.github.io`\n\n创建好仓库后找到`Setings`  往下拉，找到`Github Pages`  设置`Custom domain`填下自定义域名，如`www.lixueduan.com`.如果有`Enforce HTTPS `选项也可以勾上。\n\n### 4.3 Push代码到Github\n\n**配置SSH key**\n\n首先需要配置一个`SSHkey`，`Git`有`Http`协议和`Git`协议两种。我们这里使用`Git`协议就需要配置一个`SSH key`,等会部署到`Github`上也需要配置这个。\n\n具体配置方法：\n\n[Git 配置及SSH key](https://www.lixueduan.com/categories/Git/)\n\n**修改站点配置文件**\n\n`repository`中添加一个`github`\n\n```java\n# Deployment 部署到云端相关配置\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: \n    github: git@github.com:illusorycloud/illusorycloud.github.io.git\n    coding: git@git.coding.net:illusorycloud/illusorycloud.git\n  branch: master\n```\n\n配置好后，运行`hexo g时就可以把博客同时部署到Coding和Github上了，也可以通过个性域名访问了。`\n\n## 5. 收录到Google\n\n和百度差不多。\n\n### 5.1 网站添加\n\n首先进入[Google站点平台](https://www.google.com/webmasters/#?modal_active=none)\n\n然后添加资源，注意`http`和`https`\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-add.png)\n\n### 5.2 验证所有权\n\n然后验证所有权,选择DNS供应商\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-verfication1.png)\n\n\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-verfication2.png)\n\n供应商选择其他，然后选择添加CNAME记录，在域名解析中添加一条记录。也是添加后不要删除。\n\n### 5.3 站点地图\n\n验证后就可以添加站点地图了\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-sitemap.png)\n\n提交成功后,我们的站点就已经被Google收录了.大概一天就能收录成功，比百度块一些。\n\n## 6. 总结\n\n本文主要讲了怎么将博客部署到`Coding`和`Github`和怎么让`百度`,`Google`收录我们的网站。\n\n## 7.参考\n\n[Hexo官方文档](https://hexo.io/zh-cn/docs/)\n\n[基于Hexo的个人博客](https://www.jianshu.com/p/cc902b54d493)\n\n[Hex博客搭建](https://blog.csdn.net/qq_35561857/article/details/81590953)\n\n","slug":"hexo/hexo-blog-deploy-three","published":1,"updated":"2019-02-06T01:14:37.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv4b7004k0ww4b8ulnvb2","content":"<p>本章主要记录了如何将博客部署至云端，怎么设置个性域名，怎么将自己的网站提交到百度Google。让自己的网站能够出现在各大搜索引擎的具体方法和过程，希望能对大家有帮助。  </p>\n<a id=\"more\"></a>\n<blockquote>\n<p>这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。</p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-购买个性域名\"><a href=\"#1-购买个性域名\" class=\"headerlink\" title=\"1. 购买个性域名\"></a>1. 购买个性域名</h2><p>估计大家折腾了这么久也就是为 了拥有一个自己的个性站点,所以强烈建议大家为自己的博客站点配置一个独一无二的个性域名.我这里选择阿里旗下的<a href=\"https://wanwang.aliyun.com/?spm=5176.8142029.735711.62.f0586d3eFXYcmo\" target=\"_blank\" rel=\"noopener\">万网</a>。我的域名是<a href=\"https://www.lixueduan.com\">www.lixueduan.com</a></p>\n<p>大家可以选择一个自己喜欢的域名。等部署完毕就可以通过域名访问自己的博客了。</p>\n<p><strong>问题：</strong></p>\n<ul>\n<li><p><strong>GithubPages/CodingPages</strong></p>\n<ul>\n<li>Github Pages是<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">Github</a>免费提供给开发者的一款托管个人网站的产品。</li>\n<li>Coding Pages也是<a href=\"https://coding.net/\" target=\"_blank\" rel=\"noopener\">Coding</a>免费提供给开发者的一款托管个人网站的产品。</li>\n</ul>\n</li>\n<li><p><strong>关于为什么要部署两次</strong></p>\n<blockquote>\n<p>虽然可以根据自定义域名来访问自己的博客了，但是百度谷歌上都搜索不到，那岂不是很难受<code>╮(╯▽╰)╭</code>。</p>\n<p>所以接下来为了让自己的博客能够被搜索出来，就需要让百度谷歌收录我们的网站。在部署收录过程中发现，<strong><code>Github</code>屏蔽了百度的爬虫</strong>，所以搭建上<code>GithubPages</code>的话无法提交至百度，只有Google可以收录。</p>\n<p>所以为了让百度收录我们网站，就得在Coding上也搭建一个。</p>\n<p>同时在搭建的过程中发现如果先搭建在Github上，然后再搭建Coding时会出现<code>DNS解析</code>冲突。所以需要：<strong>先搭建Coding上的，再搭建Github上的，国外的访问则走<code>Github</code>，国内的访问会走<code>Coding</code>，完美</strong></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"2-部署到CodingPages\"><a href=\"#2-部署到CodingPages\" class=\"headerlink\" title=\"2. 部署到CodingPages\"></a>2. 部署到CodingPages</h2><h3 id=\"2-1-注册coding账户\"><a href=\"#2-1-注册coding账户\" class=\"headerlink\" title=\"2.1 注册coding账户\"></a>2.1 注册coding账户</h3><p> 点击这里注册Coding](<a href=\"https://coding.net/\" target=\"_blank\" rel=\"noopener\">https://coding.net/</a>)</p>\n<h3 id=\"2-2-创建新项目\"><a href=\"#2-2-创建新项目\" class=\"headerlink\" title=\"2.2 创建新项目\"></a>2.2 创建新项目</h3><ul>\n<li>注册好后创建一个项目用来部署个人博客，项目路径和项目名称最好和用户名一致</li>\n<li><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-deploy-coding1.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"2-3-开启CodingPages\"><a href=\"#2-3-开启CodingPages\" class=\"headerlink\" title=\"2.3 开启CodingPages\"></a>2.3 开启CodingPages</h3><ul>\n<li><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-deploy-coding2.png\" alt=\"\"></p>\n<p>点击Pages服务，然后一键开启。</p>\n</li>\n</ul>\n<p>部署master分支</p>\n<p>自定义域名 可以填两个 <code>www.xxx.com</code> 和<code>xxx.com</code></p>\n<p>绑定自定义域名的时候需要在买域名的地方(我这里是阿里的万网)配置DNS解析</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-coding-dns.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">添加两条CNAME解析</span><br><span class=\"line\">主机记录</span><br><span class=\"line\">\t一个@，一个www<span class=\"comment\">//@就是无前缀，xxx.com, www就是www.xxx.com</span></span><br><span class=\"line\">解析路线</span><br><span class=\"line\">\t默认就行</span><br><span class=\"line\">记录值</span><br><span class=\"line\">\tlillusory.coding.me <span class=\"comment\">//这里改成自己的</span></span><br></pre></td></tr></table></figure>\n<p> 然后可以开启Https访问。</p>\n<p>到这里就可以通过个性域名访问啦。不过现在博客代码还没有<code>push</code>到项目里。</p>\n<h3 id=\"2-4-Push代码到Coding\"><a href=\"#2-4-Push代码到Coding\" class=\"headerlink\" title=\"2.4 Push代码到Coding\"></a>2.4 Push代码到Coding</h3><p><strong>配置SSH key</strong></p>\n<p>首先需要配置一个<code>SSHkey</code>，<code>Git</code>有<code>Http</code>协议和<code>Git</code>协议两种。我们这里使用<code>Git</code>协议就需要配置一个<code>SSH key</code>,等会部署到<code>Github</code>上也需要配置这个。</p>\n<p>具体配置方法如下：</p>\n<p><a href=\"https://www.lixueduan.com/categories/Git/\">Git 配置及SSH key</a></p>\n<p><strong>修改站点配置文件</strong></p>\n<p>这里只配置了Coding，可以先把Github的注释掉</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment 部署到云端相关配置</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: </span><br><span class=\"line\">   github: git<span class=\"meta\">@github</span>.com:illusorycloud/illusorycloud.github.io.git</span><br><span class=\"line\">   coding: git<span class=\"meta\">@git</span>.coding.net:illusorycloud/illusorycloud.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p><strong>地址在这里：</strong></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-deploy-coding3.png\" alt=\"\"></p>\n<p>配置好后，运行<code>hexo g时就可以把博客部署到Coding上了，也可以通过个性域名访问了。</code></p>\n<h2 id=\"3-收录到百度\"><a href=\"#3-收录到百度\" class=\"headerlink\" title=\"3. 收录到百度\"></a>3. 收录到百度</h2><h3 id=\"3-1-网站添加\"><a href=\"#3-1-网站添加\" class=\"headerlink\" title=\"3.1 网站添加\"></a>3.1 网站添加</h3><p>直接百度搜索你的域名,比如我的<code>www.lixueduan.com</code> ，如果没有收录就会提示暂未收录，点击<code>提交网址</code>。</p>\n<p>点击这个链接进入百度站长平台，登录成功后选择`用户中心–&gt;站点管理–&gt;添加网站 </p>\n<p>输入自己的网站，如<code>www.lixueduan.com</code> 协议头如果开启了<code>https</code>就选<code>https</code></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-baidu1-add.png\" alt=\"\"></p>\n<h3 id=\"3-2-网站验证\"><a href=\"#3-2-网站验证\" class=\"headerlink\" title=\"3.2 网站验证\"></a>3.2 网站验证</h3><p>然后会验证这个网站是不是你的，选CNAME验证</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-baidu2-verfication.png\" alt=\"\"></p>\n<p>然后去域名哪里添加一条解析即可。</p>\n<p>记录类型–&gt;<code>CNAME</code></p>\n<p>主机记录—&gt;前面那一串<code>l3rUDBLOMX</code></p>\n<p>记录值–&gt;后面那个<code>ziyuan.baidu.com</code></p>\n<p>其他的都按默认的就行了，添加后别删除，需要一直留着。</p>\n<h3 id=\"3-3-站点地图\"><a href=\"#3-3-站点地图\" class=\"headerlink\" title=\"3.3 站点地图\"></a>3.3 站点地图</h3><p>接下来我们需要生成网站地图<code>sitemap</code>,使用sitemap方式向百度提交我们的网址</p>\n<p>站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。</p>\n<ul>\n<li>先安装一下，打开你的hexo博客根目录，分别用下面两个命令来安装针对谷歌和百度的插件</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap --save  #sitemap.xml适合提交给谷歌搜素引擎</span><br><span class=\"line\">npm install hexo-generator-baidu-sitemap --save  #baidusitemap.xml适合提交百度搜索引擎</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在<code>站点配置文件</code>中添加如下代码</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Plugins:</span><br><span class=\"line\">- hexo-generator-baidu-sitemap</span><br><span class=\"line\">- hexo-generator-sitemap</span><br><span class=\"line\"></span><br><span class=\"line\">baidusitemap:</span><br><span class=\"line\">    path: baidusitemap.xml</span><br><span class=\"line\">sitemap:</span><br><span class=\"line\">    path: sitemap.xml</span><br></pre></td></tr></table></figure>\n<p>在你的博客根目录的public下面发现生成了sitemap.xml以及baidusitemap.xml就表示成功了.</p>\n<p>然后将博客重新部署后就可以直接访问站点地图了。如<code>https://www.lixueduan.com/baidusitemap.xml</code></p>\n<p>然后将这个<code>站点地图</code>提交到百度</p>\n<p><code>站点管理--&gt;站点属性--&gt;链接提交--&gt;自动提交--&gt;sitemap</code></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-baidu3-sitemap.png\" alt=\"\"></p>\n<p>完成后就算是提交成功了，百度比较慢，要好几天才能收录。</p>\n<h2 id=\"4-部署到GitHub\"><a href=\"#4-部署到GitHub\" class=\"headerlink\" title=\"4. 部署到GitHub\"></a>4. 部署到GitHub</h2><p>步骤和Coding差不多的。</p>\n<h3 id=\"4-1-注册Github账号\"><a href=\"#4-1-注册Github账号\" class=\"headerlink\" title=\"4.1 注册Github账号\"></a>4.1 注册Github账号</h3><p><a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">点这里注册Github账号</a></p>\n<h3 id=\"4-2-创建新仓库\"><a href=\"#4-2-创建新仓库\" class=\"headerlink\" title=\"4.2 创建新仓库\"></a>4.2 创建新仓库</h3><p>也是名字必须和用户名一样，必须按照这个格式<code>username.github.io</code>，例如<code>lillusorycloud.github.io</code></p>\n<p>创建好仓库后找到<code>Setings</code>  往下拉，找到<code>Github Pages</code>  设置<code>Custom domain</code>填下自定义域名，如<code>www.lixueduan.com</code>.如果有<code>Enforce HTTPS</code>选项也可以勾上。</p>\n<h3 id=\"4-3-Push代码到Github\"><a href=\"#4-3-Push代码到Github\" class=\"headerlink\" title=\"4.3 Push代码到Github\"></a>4.3 Push代码到Github</h3><p><strong>配置SSH key</strong></p>\n<p>首先需要配置一个<code>SSHkey</code>，<code>Git</code>有<code>Http</code>协议和<code>Git</code>协议两种。我们这里使用<code>Git</code>协议就需要配置一个<code>SSH key</code>,等会部署到<code>Github</code>上也需要配置这个。</p>\n<p>具体配置方法：</p>\n<p><a href=\"https://www.lixueduan.com/categories/Git/\">Git 配置及SSH key</a></p>\n<p><strong>修改站点配置文件</strong></p>\n<p><code>repository</code>中添加一个<code>github</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment 部署到云端相关配置</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: </span><br><span class=\"line\">    github: git<span class=\"meta\">@github</span>.com:illusorycloud/illusorycloud.github.io.git</span><br><span class=\"line\">    coding: git<span class=\"meta\">@git</span>.coding.net:illusorycloud/illusorycloud.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>配置好后，运行<code>hexo g时就可以把博客同时部署到Coding和Github上了，也可以通过个性域名访问了。</code></p>\n<h2 id=\"5-收录到Google\"><a href=\"#5-收录到Google\" class=\"headerlink\" title=\"5. 收录到Google\"></a>5. 收录到Google</h2><p>和百度差不多。</p>\n<h3 id=\"5-1-网站添加\"><a href=\"#5-1-网站添加\" class=\"headerlink\" title=\"5.1 网站添加\"></a>5.1 网站添加</h3><p>首先进入<a href=\"https://www.google.com/webmasters/#?modal_active=none\" target=\"_blank\" rel=\"noopener\">Google站点平台</a></p>\n<p>然后添加资源，注意<code>http</code>和<code>https</code></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-add.png\" alt=\"\"></p>\n<h3 id=\"5-2-验证所有权\"><a href=\"#5-2-验证所有权\" class=\"headerlink\" title=\"5.2 验证所有权\"></a>5.2 验证所有权</h3><p>然后验证所有权,选择DNS供应商</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-verfication1.png\" alt=\"\"></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-verfication2.png\" alt=\"\"></p>\n<p>供应商选择其他，然后选择添加CNAME记录，在域名解析中添加一条记录。也是添加后不要删除。</p>\n<h3 id=\"5-3-站点地图\"><a href=\"#5-3-站点地图\" class=\"headerlink\" title=\"5.3 站点地图\"></a>5.3 站点地图</h3><p>验证后就可以添加站点地图了</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-sitemap.png\" alt=\"\"></p>\n<p>提交成功后,我们的站点就已经被Google收录了.大概一天就能收录成功，比百度块一些。</p>\n<h2 id=\"6-总结\"><a href=\"#6-总结\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h2><p>本文主要讲了怎么将博客部署到<code>Coding</code>和<code>Github</code>和怎么让<code>百度</code>,<code>Google</code>收录我们的网站。</p>\n<h2 id=\"7-参考\"><a href=\"#7-参考\" class=\"headerlink\" title=\"7.参考\"></a>7.参考</h2><p><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo官方文档</a></p>\n<p><a href=\"https://www.jianshu.com/p/cc902b54d493\" target=\"_blank\" rel=\"noopener\">基于Hexo的个人博客</a></p>\n<p><a href=\"https://blog.csdn.net/qq_35561857/article/details/81590953\" target=\"_blank\" rel=\"noopener\">Hex博客搭建</a></p>\n","site":{"data":{}},"excerpt":"<p>本章主要记录了如何将博客部署至云端，怎么设置个性域名，怎么将自己的网站提交到百度Google。让自己的网站能够出现在各大搜索引擎的具体方法和过程，希望能对大家有帮助。  </p>","more":"<blockquote>\n<p>这是一个基于Hexo的个人博客的教程，包含了从博客搭建到主题优化，最后部署到云端的全过程。</p>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-购买个性域名\"><a href=\"#1-购买个性域名\" class=\"headerlink\" title=\"1. 购买个性域名\"></a>1. 购买个性域名</h2><p>估计大家折腾了这么久也就是为 了拥有一个自己的个性站点,所以强烈建议大家为自己的博客站点配置一个独一无二的个性域名.我这里选择阿里旗下的<a href=\"https://wanwang.aliyun.com/?spm=5176.8142029.735711.62.f0586d3eFXYcmo\" target=\"_blank\" rel=\"noopener\">万网</a>。我的域名是<a href=\"https://www.lixueduan.com\">www.lixueduan.com</a></p>\n<p>大家可以选择一个自己喜欢的域名。等部署完毕就可以通过域名访问自己的博客了。</p>\n<p><strong>问题：</strong></p>\n<ul>\n<li><p><strong>GithubPages/CodingPages</strong></p>\n<ul>\n<li>Github Pages是<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">Github</a>免费提供给开发者的一款托管个人网站的产品。</li>\n<li>Coding Pages也是<a href=\"https://coding.net/\" target=\"_blank\" rel=\"noopener\">Coding</a>免费提供给开发者的一款托管个人网站的产品。</li>\n</ul>\n</li>\n<li><p><strong>关于为什么要部署两次</strong></p>\n<blockquote>\n<p>虽然可以根据自定义域名来访问自己的博客了，但是百度谷歌上都搜索不到，那岂不是很难受<code>╮(╯▽╰)╭</code>。</p>\n<p>所以接下来为了让自己的博客能够被搜索出来，就需要让百度谷歌收录我们的网站。在部署收录过程中发现，<strong><code>Github</code>屏蔽了百度的爬虫</strong>，所以搭建上<code>GithubPages</code>的话无法提交至百度，只有Google可以收录。</p>\n<p>所以为了让百度收录我们网站，就得在Coding上也搭建一个。</p>\n<p>同时在搭建的过程中发现如果先搭建在Github上，然后再搭建Coding时会出现<code>DNS解析</code>冲突。所以需要：<strong>先搭建Coding上的，再搭建Github上的，国外的访问则走<code>Github</code>，国内的访问会走<code>Coding</code>，完美</strong></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"2-部署到CodingPages\"><a href=\"#2-部署到CodingPages\" class=\"headerlink\" title=\"2. 部署到CodingPages\"></a>2. 部署到CodingPages</h2><h3 id=\"2-1-注册coding账户\"><a href=\"#2-1-注册coding账户\" class=\"headerlink\" title=\"2.1 注册coding账户\"></a>2.1 注册coding账户</h3><p> 点击这里注册Coding](<a href=\"https://coding.net/\" target=\"_blank\" rel=\"noopener\">https://coding.net/</a>)</p>\n<h3 id=\"2-2-创建新项目\"><a href=\"#2-2-创建新项目\" class=\"headerlink\" title=\"2.2 创建新项目\"></a>2.2 创建新项目</h3><ul>\n<li>注册好后创建一个项目用来部署个人博客，项目路径和项目名称最好和用户名一致</li>\n<li><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-deploy-coding1.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"2-3-开启CodingPages\"><a href=\"#2-3-开启CodingPages\" class=\"headerlink\" title=\"2.3 开启CodingPages\"></a>2.3 开启CodingPages</h3><ul>\n<li><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-deploy-coding2.png\" alt=\"\"></p>\n<p>点击Pages服务，然后一键开启。</p>\n</li>\n</ul>\n<p>部署master分支</p>\n<p>自定义域名 可以填两个 <code>www.xxx.com</code> 和<code>xxx.com</code></p>\n<p>绑定自定义域名的时候需要在买域名的地方(我这里是阿里的万网)配置DNS解析</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-coding-dns.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">添加两条CNAME解析</span><br><span class=\"line\">主机记录</span><br><span class=\"line\">\t一个@，一个www<span class=\"comment\">//@就是无前缀，xxx.com, www就是www.xxx.com</span></span><br><span class=\"line\">解析路线</span><br><span class=\"line\">\t默认就行</span><br><span class=\"line\">记录值</span><br><span class=\"line\">\tlillusory.coding.me <span class=\"comment\">//这里改成自己的</span></span><br></pre></td></tr></table></figure>\n<p> 然后可以开启Https访问。</p>\n<p>到这里就可以通过个性域名访问啦。不过现在博客代码还没有<code>push</code>到项目里。</p>\n<h3 id=\"2-4-Push代码到Coding\"><a href=\"#2-4-Push代码到Coding\" class=\"headerlink\" title=\"2.4 Push代码到Coding\"></a>2.4 Push代码到Coding</h3><p><strong>配置SSH key</strong></p>\n<p>首先需要配置一个<code>SSHkey</code>，<code>Git</code>有<code>Http</code>协议和<code>Git</code>协议两种。我们这里使用<code>Git</code>协议就需要配置一个<code>SSH key</code>,等会部署到<code>Github</code>上也需要配置这个。</p>\n<p>具体配置方法如下：</p>\n<p><a href=\"https://www.lixueduan.com/categories/Git/\">Git 配置及SSH key</a></p>\n<p><strong>修改站点配置文件</strong></p>\n<p>这里只配置了Coding，可以先把Github的注释掉</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment 部署到云端相关配置</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: </span><br><span class=\"line\">   github: git<span class=\"meta\">@github</span>.com:illusorycloud/illusorycloud.github.io.git</span><br><span class=\"line\">   coding: git<span class=\"meta\">@git</span>.coding.net:illusorycloud/illusorycloud.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p><strong>地址在这里：</strong></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-deploy-coding3.png\" alt=\"\"></p>\n<p>配置好后，运行<code>hexo g时就可以把博客部署到Coding上了，也可以通过个性域名访问了。</code></p>\n<h2 id=\"3-收录到百度\"><a href=\"#3-收录到百度\" class=\"headerlink\" title=\"3. 收录到百度\"></a>3. 收录到百度</h2><h3 id=\"3-1-网站添加\"><a href=\"#3-1-网站添加\" class=\"headerlink\" title=\"3.1 网站添加\"></a>3.1 网站添加</h3><p>直接百度搜索你的域名,比如我的<code>www.lixueduan.com</code> ，如果没有收录就会提示暂未收录，点击<code>提交网址</code>。</p>\n<p>点击这个链接进入百度站长平台，登录成功后选择`用户中心–&gt;站点管理–&gt;添加网站 </p>\n<p>输入自己的网站，如<code>www.lixueduan.com</code> 协议头如果开启了<code>https</code>就选<code>https</code></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-baidu1-add.png\" alt=\"\"></p>\n<h3 id=\"3-2-网站验证\"><a href=\"#3-2-网站验证\" class=\"headerlink\" title=\"3.2 网站验证\"></a>3.2 网站验证</h3><p>然后会验证这个网站是不是你的，选CNAME验证</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-baidu2-verfication.png\" alt=\"\"></p>\n<p>然后去域名哪里添加一条解析即可。</p>\n<p>记录类型–&gt;<code>CNAME</code></p>\n<p>主机记录—&gt;前面那一串<code>l3rUDBLOMX</code></p>\n<p>记录值–&gt;后面那个<code>ziyuan.baidu.com</code></p>\n<p>其他的都按默认的就行了，添加后别删除，需要一直留着。</p>\n<h3 id=\"3-3-站点地图\"><a href=\"#3-3-站点地图\" class=\"headerlink\" title=\"3.3 站点地图\"></a>3.3 站点地图</h3><p>接下来我们需要生成网站地图<code>sitemap</code>,使用sitemap方式向百度提交我们的网址</p>\n<p>站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。</p>\n<ul>\n<li>先安装一下，打开你的hexo博客根目录，分别用下面两个命令来安装针对谷歌和百度的插件</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap --save  #sitemap.xml适合提交给谷歌搜素引擎</span><br><span class=\"line\">npm install hexo-generator-baidu-sitemap --save  #baidusitemap.xml适合提交百度搜索引擎</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在<code>站点配置文件</code>中添加如下代码</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Plugins:</span><br><span class=\"line\">- hexo-generator-baidu-sitemap</span><br><span class=\"line\">- hexo-generator-sitemap</span><br><span class=\"line\"></span><br><span class=\"line\">baidusitemap:</span><br><span class=\"line\">    path: baidusitemap.xml</span><br><span class=\"line\">sitemap:</span><br><span class=\"line\">    path: sitemap.xml</span><br></pre></td></tr></table></figure>\n<p>在你的博客根目录的public下面发现生成了sitemap.xml以及baidusitemap.xml就表示成功了.</p>\n<p>然后将博客重新部署后就可以直接访问站点地图了。如<code>https://www.lixueduan.com/baidusitemap.xml</code></p>\n<p>然后将这个<code>站点地图</code>提交到百度</p>\n<p><code>站点管理--&gt;站点属性--&gt;链接提交--&gt;自动提交--&gt;sitemap</code></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-baidu3-sitemap.png\" alt=\"\"></p>\n<p>完成后就算是提交成功了，百度比较慢，要好几天才能收录。</p>\n<h2 id=\"4-部署到GitHub\"><a href=\"#4-部署到GitHub\" class=\"headerlink\" title=\"4. 部署到GitHub\"></a>4. 部署到GitHub</h2><p>步骤和Coding差不多的。</p>\n<h3 id=\"4-1-注册Github账号\"><a href=\"#4-1-注册Github账号\" class=\"headerlink\" title=\"4.1 注册Github账号\"></a>4.1 注册Github账号</h3><p><a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">点这里注册Github账号</a></p>\n<h3 id=\"4-2-创建新仓库\"><a href=\"#4-2-创建新仓库\" class=\"headerlink\" title=\"4.2 创建新仓库\"></a>4.2 创建新仓库</h3><p>也是名字必须和用户名一样，必须按照这个格式<code>username.github.io</code>，例如<code>lillusorycloud.github.io</code></p>\n<p>创建好仓库后找到<code>Setings</code>  往下拉，找到<code>Github Pages</code>  设置<code>Custom domain</code>填下自定义域名，如<code>www.lixueduan.com</code>.如果有<code>Enforce HTTPS</code>选项也可以勾上。</p>\n<h3 id=\"4-3-Push代码到Github\"><a href=\"#4-3-Push代码到Github\" class=\"headerlink\" title=\"4.3 Push代码到Github\"></a>4.3 Push代码到Github</h3><p><strong>配置SSH key</strong></p>\n<p>首先需要配置一个<code>SSHkey</code>，<code>Git</code>有<code>Http</code>协议和<code>Git</code>协议两种。我们这里使用<code>Git</code>协议就需要配置一个<code>SSH key</code>,等会部署到<code>Github</code>上也需要配置这个。</p>\n<p>具体配置方法：</p>\n<p><a href=\"https://www.lixueduan.com/categories/Git/\">Git 配置及SSH key</a></p>\n<p><strong>修改站点配置文件</strong></p>\n<p><code>repository</code>中添加一个<code>github</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment 部署到云端相关配置</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: </span><br><span class=\"line\">    github: git<span class=\"meta\">@github</span>.com:illusorycloud/illusorycloud.github.io.git</span><br><span class=\"line\">    coding: git<span class=\"meta\">@git</span>.coding.net:illusorycloud/illusorycloud.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>配置好后，运行<code>hexo g时就可以把博客同时部署到Coding和Github上了，也可以通过个性域名访问了。</code></p>\n<h2 id=\"5-收录到Google\"><a href=\"#5-收录到Google\" class=\"headerlink\" title=\"5. 收录到Google\"></a>5. 收录到Google</h2><p>和百度差不多。</p>\n<h3 id=\"5-1-网站添加\"><a href=\"#5-1-网站添加\" class=\"headerlink\" title=\"5.1 网站添加\"></a>5.1 网站添加</h3><p>首先进入<a href=\"https://www.google.com/webmasters/#?modal_active=none\" target=\"_blank\" rel=\"noopener\">Google站点平台</a></p>\n<p>然后添加资源，注意<code>http</code>和<code>https</code></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-add.png\" alt=\"\"></p>\n<h3 id=\"5-2-验证所有权\"><a href=\"#5-2-验证所有权\" class=\"headerlink\" title=\"5.2 验证所有权\"></a>5.2 验证所有权</h3><p>然后验证所有权,选择DNS供应商</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-verfication1.png\" alt=\"\"></p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-verfication2.png\" alt=\"\"></p>\n<p>供应商选择其他，然后选择添加CNAME记录，在域名解析中添加一条记录。也是添加后不要删除。</p>\n<h3 id=\"5-3-站点地图\"><a href=\"#5-3-站点地图\" class=\"headerlink\" title=\"5.3 站点地图\"></a>5.3 站点地图</h3><p>验证后就可以添加站点地图了</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/hexo/2018-12-28-google-sitemap.png\" alt=\"\"></p>\n<p>提交成功后,我们的站点就已经被Google收录了.大概一天就能收录成功，比百度块一些。</p>\n<h2 id=\"6-总结\"><a href=\"#6-总结\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h2><p>本文主要讲了怎么将博客部署到<code>Coding</code>和<code>Github</code>和怎么让<code>百度</code>,<code>Google</code>收录我们的网站。</p>\n<h2 id=\"7-参考\"><a href=\"#7-参考\" class=\"headerlink\" title=\"7.参考\"></a>7.参考</h2><p><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo官方文档</a></p>\n<p><a href=\"https://www.jianshu.com/p/cc902b54d493\" target=\"_blank\" rel=\"noopener\">基于Hexo的个人博客</a></p>\n<p><a href=\"https://blog.csdn.net/qq_35561857/article/details/81590953\" target=\"_blank\" rel=\"noopener\">Hex博客搭建</a></p>"},{"title":"MVC和三层架构 (集中式)及SSM框架整合","abbrlink":"760fc833","date":"2018-11-26T14:00:00.000Z","_content":"\n本文主要讲了MVC和三层架构的关系，和SSM框架整合教程。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1.三层架构\n\n整体分为三层,`表现层UI`,`业务逻辑层BLL`,`数据访问层DAL`.\n\n- 表现层  Controller  用户界面,负责与用户进行交互 \n- 业务逻辑层  Service   具体的业务操作 \n- 数据访问层   Dao  对数据库进行操作,为上层提供数据   \n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/ssm/3tier.png)\n\n为了更好的降低各层间的耦合度，在三层架构程序设计中，采用面向抽象编程。即上层对下层的调用，是通过接口实现的。而下层对上层的真正服务提供者，是下层接口的实现类。服务标准（接口）是相同的，服务提供者（实现类）可以更换。这就实现了层间的耦合。 \n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/ssm/3tier-interface.png)\n\n\n\n## 2.MVC\n\n MVC全名是Model View Controller，是`模型(model)`－`视图(view)`－`控制器(controller)`的缩写 .\n\n- **Model（模型）** - 模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器。\n- **View（视图）** - 视图代表模型包含的数据的可视化。\n- **Controller（控制器）** - 控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/ssm/mvc.png)\n\n## 3.MVC与三层架构\n\n- 经典三层架构和MVC的关系？----->\t他们是两个毫无相关的东西\n  - 经典三层架构是一种分层思想，将开发模式分为了这三层\n  - MVC是一种设计模式，目的是让HTML代码和业务逻辑代码分开，让代码看起来更加清晰，便于开发\n\n![mvc和三层架构](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/ssm/3tier-mvc.jpg)\n\n\n\n## 4.SSM框架和三层架构\n\nSSM即SpringMVC、Spring、Mybatis三个框架。它们在三层架构中所处的位置是不同的，即它们在三层架构中的功能各不相同，各司其职。\n\n- SpringMVC：作为View层的实现者，完成用户的请求接收功能。SpringMVC的Controller作为整个应用的控制器，完成用户请求的转发及对用户的响应。\n- MyBatis：作为 Dao层的实现者，完成对数据库的增、删、改、查功能。\n- Spring：以整个应用大管家的身份出现。整个应用中所有的Bean的生命周期行为，均由Spring来管理。即整个应用中所有对象的创建、初始化、销毁，及对象间关联关系的维护，均由Spring进行管理。\n\n ![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/ssm/3tier-ssm.jpg)\n\n## 5.SSM框架配置\n\n### 5.1 目录\n\n- Controller \n\n  - springmvc.xml\n    - 包扫描--controller\n    - 注解驱动\n    - 视图解析器\n  - web.xml\n    - DispatcherServlet\n    - 监听器\n\n- Service\n\n  - applicationContext-service.xml\n    - 包扫描--service\n  - applicationContext-trans.xml\n    - 事务管理器\n    - 通知\n    - 切面\n\n- Dao\n\n  - SqlMapConfig.xml\n  - applicationContext-dao.xml\n    - dataSource\n    - SqlSessionFactory\n    - 包扫描--mapper\n\n\n### 5.2 springmvc.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:p=\"http://www.springframework.org/schema/p\"\n\txmlns:context=\"http://www.springframework.org/schema/context\"\n\txmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd\n        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\">\n\t<!-- 配置Controller扫描 -->\n\t<context:component-scan base-package=\"com.lillusory.crm.controller\" />\n\t<!-- 加载属性文件-->\n\t<context:property-placeholder location=\"classpath:crm.properties\"/>\n\n\t<!-- 配置注解驱动 -->\n\t<mvc:annotation-driven />\n\n\t<!-- 配置视图解析器 -->\n\t<bean\tclass=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n\t\t<!-- 前缀 -->\n\t\t<property name=\"prefix\" value=\"/WEB-INF/jsp/\" />\n\t\t<!-- 后缀 -->\n\t\t<property name=\"suffix\" value=\".jsp\" />\n\t</bean>\n</beans>\n```\n\n### 5.3 applicationContext-dao\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:context=\"http://www.springframework.org/schema/context\" xmlns:p=\"http://www.springframework.org/schema/p\"\n\txmlns:aop=\"http://www.springframework.org/schema/aop\" xmlns:tx=\"http://www.springframework.org/schema/tx\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\n\thttp://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd\n\thttp://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd\">\n\n<!-- 配置 读取properties文件 jdbc.properties -->\n\t<context:property-placeholder location=\"classpath:jdbc.properties\" />\n\n\t<!-- 配置 数据源 -->\n\t<bean id=\"dataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\n\t\t<property name=\"driverClassName\" value=\"${jdbc.driver}\" />\n\t\t<property name=\"url\" value=\"${jdbc.url}\" />\n\t\t<property name=\"username\" value=\"${jdbc.username}\" />\n\t\t<property name=\"password\" value=\"${jdbc.password}\" />\n\t</bean>\n\n\t<!-- 配置SqlSessionFactory -->\n\t<bean class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n\t\t<!-- 设置MyBatis核心配置文件 -->\n\t\t<property name=\"configLocation\" value=\"classpath:SqlMapConfig.xml\" />\n\t\t<!-- 设置数据源 -->\n\t\t<property name=\"dataSource\" ref=\"dataSource\" />\n\t\t<property name=\"typeAliasesPackage\" value=\"com.lillusory.crm.domain\"></property>\n\t</bean>\n\n\t<!-- 配置Mapper扫描 -->\n\t<bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n\t\t<!-- 设置Mapper扫描包 -->\n\t\t<property name=\"basePackage\" value=\"com.lillusory.crm.mapper\" />\n\t</bean>\n</beans>\n```\n\n### 5.4 applicationContext-service.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:context=\"http://www.springframework.org/schema/context\" xmlns:p=\"http://www.springframework.org/schema/p\"\n\txmlns:aop=\"http://www.springframework.org/schema/aop\" xmlns:tx=\"http://www.springframework.org/schema/tx\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\n\thttp://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd\n\thttp://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd\">\n<!-- 包扫描 -->\n<context:component-scan base-package=\"com.lillusory.crm.service\"/>\n</beans>\n```\n\n### 5.5 applicationContext-trans.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:context=\"http://www.springframework.org/schema/context\" xmlns:p=\"http://www.springframework.org/schema/p\"\n\txmlns:aop=\"http://www.springframework.org/schema/aop\" xmlns:tx=\"http://www.springframework.org/schema/tx\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\n\thttp://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd\n\thttp://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd\">\n\n\t<!-- 事务管理器 -->\n\t<bean id=\"transactionManager\"\tclass=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n\t\t<!-- 数据源 -->\n\t\t<property name=\"dataSource\" ref=\"dataSource\" />\n\t</bean>\n\n\t<!-- 通知 -->\n\t<tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\">\n\t\t<tx:attributes>\n\t\t\t<!-- 传播行为 -->\n\t\t\t<tx:method name=\"save*\" propagation=\"REQUIRED\" />\n\t\t\t<tx:method name=\"insert*\" propagation=\"REQUIRED\" />\n\t\t\t<tx:method name=\"add*\" propagation=\"REQUIRED\" />\n\t\t\t<tx:method name=\"create*\" propagation=\"REQUIRED\" />\n\t\t\t<tx:method name=\"delete*\" propagation=\"REQUIRED\" />\n\t\t\t<tx:method name=\"update*\" propagation=\"REQUIRED\" />\n\t\t\t<tx:method name=\"find*\" propagation=\"SUPPORTS\" read-only=\"true\" />\n\t\t\t<tx:method name=\"select*\" propagation=\"SUPPORTS\" read-only=\"true\" />\n\t\t\t<tx:method name=\"get*\" propagation=\"SUPPORTS\" read-only=\"true\" />\n\t\t\t<tx:method name=\"query*\" propagation=\"SUPPORTS\" read-only=\"true\" />\n\t\t</tx:attributes>\n\t</tx:advice>\n\n\t<!-- 切面 -->\n\t<aop:config>\n\t\t<aop:advisor advice-ref=\"txAdvice\"\n\t\t\tpointcut=\"execution(* com.lillusory.crm.service.*.*(..))\" />\n\t</aop:config>\n</beans>\n```\n\n### 5.6 SqlMapConfig.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n\"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n<!-- 暂时什么都不用配置 -->\n</configuration>\n```\n\n### 5.7 web.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://java.sun.com/xml/ns/javaee\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\" id=\"WebApp_ID\" version=\"2.5\">\n  <display-name>Demo-CRM</display-name>\n  <welcome-file-list>\n    <welcome-file>index.html</welcome-file>\n    <welcome-file>index.htm</welcome-file>\n    <welcome-file>index.jsp</welcome-file>\n    <welcome-file>default.html</welcome-file>\n    <welcome-file>default.htm</welcome-file>\n    <welcome-file>default.jsp</welcome-file>\n  </welcome-file-list>\n  \n  \n  <!-- 配置spring -->\n\t<context-param>\n\t\t<param-name>contextConfigLocation</param-name>\n\t\t<param-value>classpath:spring/applicationContext-*.xml</param-value>\n\t</context-param>\n\n\t<!-- 配置监听器加载spring -->\n\t<listener>\n\t\t<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n\t</listener>\n\n\t<!-- 配置过滤器，解决post的乱码问题 -->\n\t<filter>\n\t\t<filter-name>encoding</filter-name>\t<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>\n\t</filter>\n\t<filter-mapping>\n\t\t<filter-name>encoding</filter-name>\n\t\t<url-pattern>/</url-pattern>\n\t</filter-mapping>\n\n\t<!-- 配置SpringMVC -->\n\t<servlet>\n\t\t<servlet-name>demo-crm</servlet-name>\n\t\t<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n\t\t<init-param>\n\t\t\t<param-name>contextConfigLocation</param-name>\n\t\t\t<param-value>classpath:spring/springmvc.xml</param-value>\n\t\t</init-param>\n\t\t<!-- 配置springmvc什么时候启动，参数必须为整数 -->\n\t\t<!-- 如果为0或者大于0，则springMVC随着容器启动而启动 -->\n\t\t<!-- 如果小于0，则在第一次请求进来的时候启动 -->\n\t\t<load-on-startup>1</load-on-startup>\n\t</servlet>\n\t<servlet-mapping>\n\t\t<servlet-name>demo-crm</servlet-name>\n\t\t<!-- 所有的请求都进入springMVC\n\t\t/        拦截所有除了jsp\n\t\t/* jsp也拦截 \n\t\t -->\n\t\t<url-pattern>*.action</url-pattern>\n\t</servlet-mapping>\n  \n</web-app>\n```\n\n### 5.8其他常用配置\n\n#### jdbc\n\n```properties\njdbc.driver=com.mysql.jdbc.Driver\njdbc.url=jdbc:mysql://localhost:3306/kct?characterEncoding=utf-8\njdbc.username=root\njdbc.password=root\n```\n\n#### log4j\n\n```properties\n# Global logging configuration\nlog4j.rootLogger=debug, stdout\n# Console output...\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n\n```\n\n## 参考\n\n`https://juejin.im/post/5929259b44d90400642194f3`\n\n \n\n","source":"_posts/java/java-mvc.md","raw":"---\ntitle: MVC和三层架构 (集中式)及SSM框架整合\ntags:\n  - Java\ncategories:\n  - Java\nabbrlink: 760fc833\ndate: 2018-11-26 22:00:00\n---\n\n本文主要讲了MVC和三层架构的关系，和SSM框架整合教程。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1.三层架构\n\n整体分为三层,`表现层UI`,`业务逻辑层BLL`,`数据访问层DAL`.\n\n- 表现层  Controller  用户界面,负责与用户进行交互 \n- 业务逻辑层  Service   具体的业务操作 \n- 数据访问层   Dao  对数据库进行操作,为上层提供数据   \n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/ssm/3tier.png)\n\n为了更好的降低各层间的耦合度，在三层架构程序设计中，采用面向抽象编程。即上层对下层的调用，是通过接口实现的。而下层对上层的真正服务提供者，是下层接口的实现类。服务标准（接口）是相同的，服务提供者（实现类）可以更换。这就实现了层间的耦合。 \n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/ssm/3tier-interface.png)\n\n\n\n## 2.MVC\n\n MVC全名是Model View Controller，是`模型(model)`－`视图(view)`－`控制器(controller)`的缩写 .\n\n- **Model（模型）** - 模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器。\n- **View（视图）** - 视图代表模型包含的数据的可视化。\n- **Controller（控制器）** - 控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/ssm/mvc.png)\n\n## 3.MVC与三层架构\n\n- 经典三层架构和MVC的关系？----->\t他们是两个毫无相关的东西\n  - 经典三层架构是一种分层思想，将开发模式分为了这三层\n  - MVC是一种设计模式，目的是让HTML代码和业务逻辑代码分开，让代码看起来更加清晰，便于开发\n\n![mvc和三层架构](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/ssm/3tier-mvc.jpg)\n\n\n\n## 4.SSM框架和三层架构\n\nSSM即SpringMVC、Spring、Mybatis三个框架。它们在三层架构中所处的位置是不同的，即它们在三层架构中的功能各不相同，各司其职。\n\n- SpringMVC：作为View层的实现者，完成用户的请求接收功能。SpringMVC的Controller作为整个应用的控制器，完成用户请求的转发及对用户的响应。\n- MyBatis：作为 Dao层的实现者，完成对数据库的增、删、改、查功能。\n- Spring：以整个应用大管家的身份出现。整个应用中所有的Bean的生命周期行为，均由Spring来管理。即整个应用中所有对象的创建、初始化、销毁，及对象间关联关系的维护，均由Spring进行管理。\n\n ![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/ssm/3tier-ssm.jpg)\n\n## 5.SSM框架配置\n\n### 5.1 目录\n\n- Controller \n\n  - springmvc.xml\n    - 包扫描--controller\n    - 注解驱动\n    - 视图解析器\n  - web.xml\n    - DispatcherServlet\n    - 监听器\n\n- Service\n\n  - applicationContext-service.xml\n    - 包扫描--service\n  - applicationContext-trans.xml\n    - 事务管理器\n    - 通知\n    - 切面\n\n- Dao\n\n  - SqlMapConfig.xml\n  - applicationContext-dao.xml\n    - dataSource\n    - SqlSessionFactory\n    - 包扫描--mapper\n\n\n### 5.2 springmvc.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:p=\"http://www.springframework.org/schema/p\"\n\txmlns:context=\"http://www.springframework.org/schema/context\"\n\txmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd\n        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\">\n\t<!-- 配置Controller扫描 -->\n\t<context:component-scan base-package=\"com.lillusory.crm.controller\" />\n\t<!-- 加载属性文件-->\n\t<context:property-placeholder location=\"classpath:crm.properties\"/>\n\n\t<!-- 配置注解驱动 -->\n\t<mvc:annotation-driven />\n\n\t<!-- 配置视图解析器 -->\n\t<bean\tclass=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n\t\t<!-- 前缀 -->\n\t\t<property name=\"prefix\" value=\"/WEB-INF/jsp/\" />\n\t\t<!-- 后缀 -->\n\t\t<property name=\"suffix\" value=\".jsp\" />\n\t</bean>\n</beans>\n```\n\n### 5.3 applicationContext-dao\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:context=\"http://www.springframework.org/schema/context\" xmlns:p=\"http://www.springframework.org/schema/p\"\n\txmlns:aop=\"http://www.springframework.org/schema/aop\" xmlns:tx=\"http://www.springframework.org/schema/tx\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\n\thttp://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd\n\thttp://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd\">\n\n<!-- 配置 读取properties文件 jdbc.properties -->\n\t<context:property-placeholder location=\"classpath:jdbc.properties\" />\n\n\t<!-- 配置 数据源 -->\n\t<bean id=\"dataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\n\t\t<property name=\"driverClassName\" value=\"${jdbc.driver}\" />\n\t\t<property name=\"url\" value=\"${jdbc.url}\" />\n\t\t<property name=\"username\" value=\"${jdbc.username}\" />\n\t\t<property name=\"password\" value=\"${jdbc.password}\" />\n\t</bean>\n\n\t<!-- 配置SqlSessionFactory -->\n\t<bean class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n\t\t<!-- 设置MyBatis核心配置文件 -->\n\t\t<property name=\"configLocation\" value=\"classpath:SqlMapConfig.xml\" />\n\t\t<!-- 设置数据源 -->\n\t\t<property name=\"dataSource\" ref=\"dataSource\" />\n\t\t<property name=\"typeAliasesPackage\" value=\"com.lillusory.crm.domain\"></property>\n\t</bean>\n\n\t<!-- 配置Mapper扫描 -->\n\t<bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n\t\t<!-- 设置Mapper扫描包 -->\n\t\t<property name=\"basePackage\" value=\"com.lillusory.crm.mapper\" />\n\t</bean>\n</beans>\n```\n\n### 5.4 applicationContext-service.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:context=\"http://www.springframework.org/schema/context\" xmlns:p=\"http://www.springframework.org/schema/p\"\n\txmlns:aop=\"http://www.springframework.org/schema/aop\" xmlns:tx=\"http://www.springframework.org/schema/tx\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\n\thttp://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd\n\thttp://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd\">\n<!-- 包扫描 -->\n<context:component-scan base-package=\"com.lillusory.crm.service\"/>\n</beans>\n```\n\n### 5.5 applicationContext-trans.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:context=\"http://www.springframework.org/schema/context\" xmlns:p=\"http://www.springframework.org/schema/p\"\n\txmlns:aop=\"http://www.springframework.org/schema/aop\" xmlns:tx=\"http://www.springframework.org/schema/tx\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\n\thttp://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd\n\thttp://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd\">\n\n\t<!-- 事务管理器 -->\n\t<bean id=\"transactionManager\"\tclass=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n\t\t<!-- 数据源 -->\n\t\t<property name=\"dataSource\" ref=\"dataSource\" />\n\t</bean>\n\n\t<!-- 通知 -->\n\t<tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\">\n\t\t<tx:attributes>\n\t\t\t<!-- 传播行为 -->\n\t\t\t<tx:method name=\"save*\" propagation=\"REQUIRED\" />\n\t\t\t<tx:method name=\"insert*\" propagation=\"REQUIRED\" />\n\t\t\t<tx:method name=\"add*\" propagation=\"REQUIRED\" />\n\t\t\t<tx:method name=\"create*\" propagation=\"REQUIRED\" />\n\t\t\t<tx:method name=\"delete*\" propagation=\"REQUIRED\" />\n\t\t\t<tx:method name=\"update*\" propagation=\"REQUIRED\" />\n\t\t\t<tx:method name=\"find*\" propagation=\"SUPPORTS\" read-only=\"true\" />\n\t\t\t<tx:method name=\"select*\" propagation=\"SUPPORTS\" read-only=\"true\" />\n\t\t\t<tx:method name=\"get*\" propagation=\"SUPPORTS\" read-only=\"true\" />\n\t\t\t<tx:method name=\"query*\" propagation=\"SUPPORTS\" read-only=\"true\" />\n\t\t</tx:attributes>\n\t</tx:advice>\n\n\t<!-- 切面 -->\n\t<aop:config>\n\t\t<aop:advisor advice-ref=\"txAdvice\"\n\t\t\tpointcut=\"execution(* com.lillusory.crm.service.*.*(..))\" />\n\t</aop:config>\n</beans>\n```\n\n### 5.6 SqlMapConfig.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n\"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n<!-- 暂时什么都不用配置 -->\n</configuration>\n```\n\n### 5.7 web.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://java.sun.com/xml/ns/javaee\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\" id=\"WebApp_ID\" version=\"2.5\">\n  <display-name>Demo-CRM</display-name>\n  <welcome-file-list>\n    <welcome-file>index.html</welcome-file>\n    <welcome-file>index.htm</welcome-file>\n    <welcome-file>index.jsp</welcome-file>\n    <welcome-file>default.html</welcome-file>\n    <welcome-file>default.htm</welcome-file>\n    <welcome-file>default.jsp</welcome-file>\n  </welcome-file-list>\n  \n  \n  <!-- 配置spring -->\n\t<context-param>\n\t\t<param-name>contextConfigLocation</param-name>\n\t\t<param-value>classpath:spring/applicationContext-*.xml</param-value>\n\t</context-param>\n\n\t<!-- 配置监听器加载spring -->\n\t<listener>\n\t\t<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n\t</listener>\n\n\t<!-- 配置过滤器，解决post的乱码问题 -->\n\t<filter>\n\t\t<filter-name>encoding</filter-name>\t<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>\n\t</filter>\n\t<filter-mapping>\n\t\t<filter-name>encoding</filter-name>\n\t\t<url-pattern>/</url-pattern>\n\t</filter-mapping>\n\n\t<!-- 配置SpringMVC -->\n\t<servlet>\n\t\t<servlet-name>demo-crm</servlet-name>\n\t\t<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n\t\t<init-param>\n\t\t\t<param-name>contextConfigLocation</param-name>\n\t\t\t<param-value>classpath:spring/springmvc.xml</param-value>\n\t\t</init-param>\n\t\t<!-- 配置springmvc什么时候启动，参数必须为整数 -->\n\t\t<!-- 如果为0或者大于0，则springMVC随着容器启动而启动 -->\n\t\t<!-- 如果小于0，则在第一次请求进来的时候启动 -->\n\t\t<load-on-startup>1</load-on-startup>\n\t</servlet>\n\t<servlet-mapping>\n\t\t<servlet-name>demo-crm</servlet-name>\n\t\t<!-- 所有的请求都进入springMVC\n\t\t/        拦截所有除了jsp\n\t\t/* jsp也拦截 \n\t\t -->\n\t\t<url-pattern>*.action</url-pattern>\n\t</servlet-mapping>\n  \n</web-app>\n```\n\n### 5.8其他常用配置\n\n#### jdbc\n\n```properties\njdbc.driver=com.mysql.jdbc.Driver\njdbc.url=jdbc:mysql://localhost:3306/kct?characterEncoding=utf-8\njdbc.username=root\njdbc.password=root\n```\n\n#### log4j\n\n```properties\n# Global logging configuration\nlog4j.rootLogger=debug, stdout\n# Console output...\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n\n```\n\n## 参考\n\n`https://juejin.im/post/5929259b44d90400642194f3`\n\n \n\n","slug":"java/java-mvc","published":1,"updated":"2019-02-06T01:12:46.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv4b9004n0ww4zaiotpng","content":"<p>本文主要讲了MVC和三层架构的关系，和SSM框架整合教程。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-三层架构\"><a href=\"#1-三层架构\" class=\"headerlink\" title=\"1.三层架构\"></a>1.三层架构</h2><p>整体分为三层,<code>表现层UI</code>,<code>业务逻辑层BLL</code>,<code>数据访问层DAL</code>.</p>\n<ul>\n<li>表现层  Controller  用户界面,负责与用户进行交互 </li>\n<li>业务逻辑层  Service   具体的业务操作 </li>\n<li>数据访问层   Dao  对数据库进行操作,为上层提供数据   </li>\n</ul>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/ssm/3tier.png\" alt=\"\"></p>\n<p>为了更好的降低各层间的耦合度，在三层架构程序设计中，采用面向抽象编程。即上层对下层的调用，是通过接口实现的。而下层对上层的真正服务提供者，是下层接口的实现类。服务标准（接口）是相同的，服务提供者（实现类）可以更换。这就实现了层间的耦合。 </p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/ssm/3tier-interface.png\" alt=\"\"></p>\n<h2 id=\"2-MVC\"><a href=\"#2-MVC\" class=\"headerlink\" title=\"2.MVC\"></a>2.MVC</h2><p> MVC全名是Model View Controller，是<code>模型(model)</code>－<code>视图(view)</code>－<code>控制器(controller)</code>的缩写 .</p>\n<ul>\n<li><strong>Model（模型）</strong> - 模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器。</li>\n<li><strong>View（视图）</strong> - 视图代表模型包含的数据的可视化。</li>\n<li><strong>Controller（控制器）</strong> - 控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开。</li>\n</ul>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/ssm/mvc.png\" alt=\"\"></p>\n<h2 id=\"3-MVC与三层架构\"><a href=\"#3-MVC与三层架构\" class=\"headerlink\" title=\"3.MVC与三层架构\"></a>3.MVC与三层架构</h2><ul>\n<li>经典三层架构和MVC的关系？—–&gt;    他们是两个毫无相关的东西<ul>\n<li>经典三层架构是一种分层思想，将开发模式分为了这三层</li>\n<li>MVC是一种设计模式，目的是让HTML代码和业务逻辑代码分开，让代码看起来更加清晰，便于开发</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/ssm/3tier-mvc.jpg\" alt=\"mvc和三层架构\"></p>\n<h2 id=\"4-SSM框架和三层架构\"><a href=\"#4-SSM框架和三层架构\" class=\"headerlink\" title=\"4.SSM框架和三层架构\"></a>4.SSM框架和三层架构</h2><p>SSM即SpringMVC、Spring、Mybatis三个框架。它们在三层架构中所处的位置是不同的，即它们在三层架构中的功能各不相同，各司其职。</p>\n<ul>\n<li>SpringMVC：作为View层的实现者，完成用户的请求接收功能。SpringMVC的Controller作为整个应用的控制器，完成用户请求的转发及对用户的响应。</li>\n<li>MyBatis：作为 Dao层的实现者，完成对数据库的增、删、改、查功能。</li>\n<li><p>Spring：以整个应用大管家的身份出现。整个应用中所有的Bean的生命周期行为，均由Spring来管理。即整个应用中所有对象的创建、初始化、销毁，及对象间关联关系的维护，均由Spring进行管理。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/ssm/3tier-ssm.jpg\" alt=\"\"></p>\n</li>\n</ul>\n<h2 id=\"5-SSM框架配置\"><a href=\"#5-SSM框架配置\" class=\"headerlink\" title=\"5.SSM框架配置\"></a>5.SSM框架配置</h2><h3 id=\"5-1-目录\"><a href=\"#5-1-目录\" class=\"headerlink\" title=\"5.1 目录\"></a>5.1 目录</h3><ul>\n<li><p>Controller </p>\n<ul>\n<li>springmvc.xml<ul>\n<li>包扫描–controller</li>\n<li>注解驱动</li>\n<li>视图解析器</li>\n</ul>\n</li>\n<li>web.xml<ul>\n<li>DispatcherServlet</li>\n<li>监听器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Service</p>\n<ul>\n<li>applicationContext-service.xml<ul>\n<li>包扫描–service</li>\n</ul>\n</li>\n<li>applicationContext-trans.xml<ul>\n<li>事务管理器</li>\n<li>通知</li>\n<li>切面</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Dao</p>\n<ul>\n<li>SqlMapConfig.xml</li>\n<li>applicationContext-dao.xml<ul>\n<li>dataSource</li>\n<li>SqlSessionFactory</li>\n<li>包扫描–mapper</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-2-springmvc-xml\"><a href=\"#5-2-springmvc-xml\" class=\"headerlink\" title=\"5.2 springmvc.xml\"></a>5.2 springmvc.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns:p</span>=<span class=\"string\">\"http://www.springframework.org/schema/p\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 配置Controller扫描 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.lillusory.crm.controller\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 加载属性文件--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:crm.properties\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 配置注解驱动 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span>\t<span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 前缀 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"prefix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"/WEB-INF/jsp/\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 后缀 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suffix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".jsp\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-3-applicationContext-dao\"><a href=\"#5-3-applicationContext-dao\" class=\"headerlink\" title=\"5.3 applicationContext-dao\"></a>5.3 applicationContext-dao</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span> <span class=\"attr\">xmlns:p</span>=<span class=\"string\">\"http://www.springframework.org/schema/p\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span> <span class=\"attr\">xmlns:tx</span>=<span class=\"string\">\"http://www.springframework.org/schema/tx\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\thttp://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\thttp://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 配置 读取properties文件 jdbc.properties --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:jdbc.properties\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 配置 数据源 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.druid.pool.DruidDataSource\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.driver&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.url&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.username&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.password&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 配置SqlSessionFactory --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.SqlSessionFactoryBean\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 设置MyBatis核心配置文件 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"configLocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:SqlMapConfig.xml\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 设置数据源 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"typeAliasesPackage\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.lillusory.crm.domain\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 配置Mapper扫描 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.mapper.MapperScannerConfigurer\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 设置Mapper扫描包 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"basePackage\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.lillusory.crm.mapper\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-4-applicationContext-service-xml\"><a href=\"#5-4-applicationContext-service-xml\" class=\"headerlink\" title=\"5.4 applicationContext-service.xml\"></a>5.4 applicationContext-service.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span> <span class=\"attr\">xmlns:p</span>=<span class=\"string\">\"http://www.springframework.org/schema/p\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span> <span class=\"attr\">xmlns:tx</span>=<span class=\"string\">\"http://www.springframework.org/schema/tx\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\thttp://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\thttp://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 包扫描 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.lillusory.crm.service\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-5-applicationContext-trans-xml\"><a href=\"#5-5-applicationContext-trans-xml\" class=\"headerlink\" title=\"5.5 applicationContext-trans.xml\"></a>5.5 applicationContext-trans.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span> <span class=\"attr\">xmlns:p</span>=<span class=\"string\">\"http://www.springframework.org/schema/p\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span> <span class=\"attr\">xmlns:tx</span>=<span class=\"string\">\"http://www.springframework.org/schema/tx\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\thttp://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\thttp://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 事务管理器 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionManager\"</span>\t<span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 数据源 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 通知 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">tx:advice</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">\"transactionManager\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 传播行为 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"save*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"insert*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"add*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"create*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"delete*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"update*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"find*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"SUPPORTS\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"select*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"SUPPORTS\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"get*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"SUPPORTS\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"query*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"SUPPORTS\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">tx:advice</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 切面 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">\"txAdvice\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">pointcut</span>=<span class=\"string\">\"execution(* com.lillusory.crm.service.*.*(..))\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-6-SqlMapConfig-xml\"><a href=\"#5-6-SqlMapConfig-xml\" class=\"headerlink\" title=\"5.6 SqlMapConfig.xml\"></a>5.6 SqlMapConfig.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 暂时什么都不用配置 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-7-web-xml\"><a href=\"#5-7-web-xml\" class=\"headerlink\" title=\"5.7 web.xml\"></a>5.7 web.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee\"</span> <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"WebApp_ID\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"2.5\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">display-name</span>&gt;</span>Demo-CRM<span class=\"tag\">&lt;/<span class=\"name\">display-name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">welcome-file-list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>index.html<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>index.htm<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>index.jsp<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>default.html<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>default.htm<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>default.jsp<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">welcome-file-list</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 配置spring --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:spring/applicationContext-*.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 配置监听器加载spring --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 配置过滤器，解决post的乱码问题 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>encoding<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span>\t<span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>encoding<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 配置SpringMVC --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>demo-crm<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:spring/springmvc.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 配置springmvc什么时候启动，参数必须为整数 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 如果为0或者大于0，则springMVC随着容器启动而启动 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 如果小于0，则在第一次请求进来的时候启动 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>demo-crm<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 所有的请求都进入springMVC</span></span><br><span class=\"line\"><span class=\"comment\">\t\t/        拦截所有除了jsp</span></span><br><span class=\"line\"><span class=\"comment\">\t\t/* jsp也拦截 </span></span><br><span class=\"line\"><span class=\"comment\">\t\t --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.action<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-8其他常用配置\"><a href=\"#5-8其他常用配置\" class=\"headerlink\" title=\"5.8其他常用配置\"></a>5.8其他常用配置</h3><h4 id=\"jdbc\"><a href=\"#jdbc\" class=\"headerlink\" title=\"jdbc\"></a>jdbc</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class=\"line\">jdbc.url=jdbc:mysql://localhost:3306/kct?characterEncoding=utf-8</span><br><span class=\"line\">jdbc.username=root</span><br><span class=\"line\">jdbc.password=root</span><br></pre></td></tr></table></figure>\n<h4 id=\"log4j\"><a href=\"#log4j\" class=\"headerlink\" title=\"log4j\"></a>log4j</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Global logging configuration</span><br><span class=\"line\">log4j.rootLogger=debug, stdout</span><br><span class=\"line\"># Console output...</span><br><span class=\"line\">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class=\"line\">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><code>https://juejin.im/post/5929259b44d90400642194f3</code></p>\n","site":{"data":{}},"excerpt":"<p>本文主要讲了MVC和三层架构的关系，和SSM框架整合教程。</p>","more":"<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-三层架构\"><a href=\"#1-三层架构\" class=\"headerlink\" title=\"1.三层架构\"></a>1.三层架构</h2><p>整体分为三层,<code>表现层UI</code>,<code>业务逻辑层BLL</code>,<code>数据访问层DAL</code>.</p>\n<ul>\n<li>表现层  Controller  用户界面,负责与用户进行交互 </li>\n<li>业务逻辑层  Service   具体的业务操作 </li>\n<li>数据访问层   Dao  对数据库进行操作,为上层提供数据   </li>\n</ul>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/ssm/3tier.png\" alt=\"\"></p>\n<p>为了更好的降低各层间的耦合度，在三层架构程序设计中，采用面向抽象编程。即上层对下层的调用，是通过接口实现的。而下层对上层的真正服务提供者，是下层接口的实现类。服务标准（接口）是相同的，服务提供者（实现类）可以更换。这就实现了层间的耦合。 </p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/ssm/3tier-interface.png\" alt=\"\"></p>\n<h2 id=\"2-MVC\"><a href=\"#2-MVC\" class=\"headerlink\" title=\"2.MVC\"></a>2.MVC</h2><p> MVC全名是Model View Controller，是<code>模型(model)</code>－<code>视图(view)</code>－<code>控制器(controller)</code>的缩写 .</p>\n<ul>\n<li><strong>Model（模型）</strong> - 模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器。</li>\n<li><strong>View（视图）</strong> - 视图代表模型包含的数据的可视化。</li>\n<li><strong>Controller（控制器）</strong> - 控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开。</li>\n</ul>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/ssm/mvc.png\" alt=\"\"></p>\n<h2 id=\"3-MVC与三层架构\"><a href=\"#3-MVC与三层架构\" class=\"headerlink\" title=\"3.MVC与三层架构\"></a>3.MVC与三层架构</h2><ul>\n<li>经典三层架构和MVC的关系？—–&gt;    他们是两个毫无相关的东西<ul>\n<li>经典三层架构是一种分层思想，将开发模式分为了这三层</li>\n<li>MVC是一种设计模式，目的是让HTML代码和业务逻辑代码分开，让代码看起来更加清晰，便于开发</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/ssm/3tier-mvc.jpg\" alt=\"mvc和三层架构\"></p>\n<h2 id=\"4-SSM框架和三层架构\"><a href=\"#4-SSM框架和三层架构\" class=\"headerlink\" title=\"4.SSM框架和三层架构\"></a>4.SSM框架和三层架构</h2><p>SSM即SpringMVC、Spring、Mybatis三个框架。它们在三层架构中所处的位置是不同的，即它们在三层架构中的功能各不相同，各司其职。</p>\n<ul>\n<li>SpringMVC：作为View层的实现者，完成用户的请求接收功能。SpringMVC的Controller作为整个应用的控制器，完成用户请求的转发及对用户的响应。</li>\n<li>MyBatis：作为 Dao层的实现者，完成对数据库的增、删、改、查功能。</li>\n<li><p>Spring：以整个应用大管家的身份出现。整个应用中所有的Bean的生命周期行为，均由Spring来管理。即整个应用中所有对象的创建、初始化、销毁，及对象间关联关系的维护，均由Spring进行管理。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/ssm/3tier-ssm.jpg\" alt=\"\"></p>\n</li>\n</ul>\n<h2 id=\"5-SSM框架配置\"><a href=\"#5-SSM框架配置\" class=\"headerlink\" title=\"5.SSM框架配置\"></a>5.SSM框架配置</h2><h3 id=\"5-1-目录\"><a href=\"#5-1-目录\" class=\"headerlink\" title=\"5.1 目录\"></a>5.1 目录</h3><ul>\n<li><p>Controller </p>\n<ul>\n<li>springmvc.xml<ul>\n<li>包扫描–controller</li>\n<li>注解驱动</li>\n<li>视图解析器</li>\n</ul>\n</li>\n<li>web.xml<ul>\n<li>DispatcherServlet</li>\n<li>监听器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Service</p>\n<ul>\n<li>applicationContext-service.xml<ul>\n<li>包扫描–service</li>\n</ul>\n</li>\n<li>applicationContext-trans.xml<ul>\n<li>事务管理器</li>\n<li>通知</li>\n<li>切面</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Dao</p>\n<ul>\n<li>SqlMapConfig.xml</li>\n<li>applicationContext-dao.xml<ul>\n<li>dataSource</li>\n<li>SqlSessionFactory</li>\n<li>包扫描–mapper</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-2-springmvc-xml\"><a href=\"#5-2-springmvc-xml\" class=\"headerlink\" title=\"5.2 springmvc.xml\"></a>5.2 springmvc.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns:p</span>=<span class=\"string\">\"http://www.springframework.org/schema/p\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 配置Controller扫描 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.lillusory.crm.controller\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 加载属性文件--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:crm.properties\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 配置注解驱动 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span>\t<span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 前缀 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"prefix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"/WEB-INF/jsp/\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 后缀 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suffix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".jsp\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-3-applicationContext-dao\"><a href=\"#5-3-applicationContext-dao\" class=\"headerlink\" title=\"5.3 applicationContext-dao\"></a>5.3 applicationContext-dao</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span> <span class=\"attr\">xmlns:p</span>=<span class=\"string\">\"http://www.springframework.org/schema/p\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span> <span class=\"attr\">xmlns:tx</span>=<span class=\"string\">\"http://www.springframework.org/schema/tx\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\thttp://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\thttp://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 配置 读取properties文件 jdbc.properties --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:jdbc.properties\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 配置 数据源 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.druid.pool.DruidDataSource\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.driver&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.url&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.username&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.password&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 配置SqlSessionFactory --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.SqlSessionFactoryBean\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 设置MyBatis核心配置文件 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"configLocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:SqlMapConfig.xml\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 设置数据源 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"typeAliasesPackage\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.lillusory.crm.domain\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 配置Mapper扫描 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.mapper.MapperScannerConfigurer\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 设置Mapper扫描包 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"basePackage\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.lillusory.crm.mapper\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-4-applicationContext-service-xml\"><a href=\"#5-4-applicationContext-service-xml\" class=\"headerlink\" title=\"5.4 applicationContext-service.xml\"></a>5.4 applicationContext-service.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span> <span class=\"attr\">xmlns:p</span>=<span class=\"string\">\"http://www.springframework.org/schema/p\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span> <span class=\"attr\">xmlns:tx</span>=<span class=\"string\">\"http://www.springframework.org/schema/tx\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\thttp://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\thttp://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 包扫描 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.lillusory.crm.service\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-5-applicationContext-trans-xml\"><a href=\"#5-5-applicationContext-trans-xml\" class=\"headerlink\" title=\"5.5 applicationContext-trans.xml\"></a>5.5 applicationContext-trans.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span> <span class=\"attr\">xmlns:p</span>=<span class=\"string\">\"http://www.springframework.org/schema/p\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span> <span class=\"attr\">xmlns:tx</span>=<span class=\"string\">\"http://www.springframework.org/schema/tx\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\thttp://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\thttp://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 事务管理器 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionManager\"</span>\t<span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 数据源 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 通知 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">tx:advice</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">\"transactionManager\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 传播行为 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"save*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"insert*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"add*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"create*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"delete*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"update*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"find*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"SUPPORTS\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"select*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"SUPPORTS\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"get*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"SUPPORTS\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"query*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"SUPPORTS\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">tx:advice</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 切面 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">\"txAdvice\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">pointcut</span>=<span class=\"string\">\"execution(* com.lillusory.crm.service.*.*(..))\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-6-SqlMapConfig-xml\"><a href=\"#5-6-SqlMapConfig-xml\" class=\"headerlink\" title=\"5.6 SqlMapConfig.xml\"></a>5.6 SqlMapConfig.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 暂时什么都不用配置 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-7-web-xml\"><a href=\"#5-7-web-xml\" class=\"headerlink\" title=\"5.7 web.xml\"></a>5.7 web.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee\"</span> <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"WebApp_ID\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"2.5\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">display-name</span>&gt;</span>Demo-CRM<span class=\"tag\">&lt;/<span class=\"name\">display-name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">welcome-file-list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>index.html<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>index.htm<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>index.jsp<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>default.html<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>default.htm<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>default.jsp<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">welcome-file-list</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 配置spring --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:spring/applicationContext-*.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 配置监听器加载spring --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 配置过滤器，解决post的乱码问题 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>encoding<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span>\t<span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>encoding<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 配置SpringMVC --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>demo-crm<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:spring/springmvc.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 配置springmvc什么时候启动，参数必须为整数 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 如果为0或者大于0，则springMVC随着容器启动而启动 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 如果小于0，则在第一次请求进来的时候启动 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>demo-crm<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 所有的请求都进入springMVC</span></span><br><span class=\"line\"><span class=\"comment\">\t\t/        拦截所有除了jsp</span></span><br><span class=\"line\"><span class=\"comment\">\t\t/* jsp也拦截 </span></span><br><span class=\"line\"><span class=\"comment\">\t\t --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.action<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-8其他常用配置\"><a href=\"#5-8其他常用配置\" class=\"headerlink\" title=\"5.8其他常用配置\"></a>5.8其他常用配置</h3><h4 id=\"jdbc\"><a href=\"#jdbc\" class=\"headerlink\" title=\"jdbc\"></a>jdbc</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class=\"line\">jdbc.url=jdbc:mysql://localhost:3306/kct?characterEncoding=utf-8</span><br><span class=\"line\">jdbc.username=root</span><br><span class=\"line\">jdbc.password=root</span><br></pre></td></tr></table></figure>\n<h4 id=\"log4j\"><a href=\"#log4j\" class=\"headerlink\" title=\"log4j\"></a>log4j</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Global logging configuration</span><br><span class=\"line\">log4j.rootLogger=debug, stdout</span><br><span class=\"line\"># Console output...</span><br><span class=\"line\">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class=\"line\">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><code>https://juejin.im/post/5929259b44d90400642194f3</code></p>"},{"title":"几种常见排序算法的Java实现","abbrlink":"82240bb6","date":"2019-02-12T14:00:00.000Z","_content":"\n本文主要记录了几种常见的排序算法的Java实现，如`冒泡排序`、`快速排序`、`直接插入排序`、`希尔排序`、`选择排序`等等。\n在学数据结构与算法时的部分记录，感觉很难╮(╯▽╰)╭，还需继续努力。\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n# 1. 冒泡排序\n\n将序列中所有元素两两比较，将最大的放在最后面。\n\n将剩余序列中所有元素两两比较，将最大的放在最后面。\n\n重复第二步，直到只剩下一个数。\n\n```java\n    /**\n     * 冒泡排序：两两比较，大者交换位置,则每一轮循环结束后最大的数就会移动到最后.\n     * 时间复杂度为O(n²) 空间复杂度为O(1)\n     */\n    private static void bubbleSort(int[] arr) {\n        //外层循环length-1次\n        for (int i = 0; i < arr.length-1; i++) { \n            //外层每循环一次最后都会排好一个数\n            //所以内层循环length-1-i次\n            for (int j = 0; j < arr.length - 1 - i; j++) {  \n                if (arr[j] > arr[j + 1]) {\n                    int temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n                }\n            }\n        }\n    }\n```\n\n# 2. 快速排序\n\n快速排序（Quicksort）是对冒泡排序的一种改进，借用了分治的思想，由C. A. R. Hoare在1962年提出。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列.\n\n**具体步骤**\n\n快速排序使用分治策略来把一个序列（list）分为两个子序列（sub-lists）。\n\n- ①. 从数列中挑出一个元素，称为”基准”（pivot）。\n- ②. 重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。\n- ③. 递归地（recursively）把小于基准值元素的子数列和大于基准值元素的子数列排序。\n\n递归到最底部时，数列的大小是零或一，也就是已经排序好了。这个算法一定会结束，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。\n\n```java\n  /**\n     * 快速排序\n     * 时间复杂度为O(nlogn) 空间复杂度为O(1)\n     */\n    public static void quickSort(int[] arr, int start, int end) {\n        if (start < end) {\n            int baseNum = arr[start];//选基准值\n            int midNum;//记录中间值\n            int left = start;//左指针\n            int right = end;//右指针\n            while(left<right){\n                while ((arr[left] < baseNum) && left < end) {\n                    left++;\n                }\n                while ((arr[right] > baseNum) && right > start) {\n                    right--;\n                }\n                if (left <= right) {\n                    midNum = arr[left];\n                    arr[left] = arr[right];\n                    arr[right] = midNum;\n                    left++;\n                    right--;\n                }\n            }\n            if (start < right) {\n                quickSort(arr, start, right);\n            }\n            if (end > left) {\n                quickSort(arr, left, end);\n            }\n        }\n    }\n```\n\n# 3. 直接插入排序\n\n直接插入排序（Straight Insertion Sorting）的基本思想：将数组中的所有元素依次跟前面已经排好的元素相比较，如果选择的元素比已排序的元素小，则交换，直到全部元素都比较过为止。 \n\n首先设定插入次数，即循环次数，for(int i=1;i<length;i++)，1个数的那次不用插入。\n\n设定插入数和得到已经排好序列的最后一个数的位数。insertNum和j=i-1。\n\n从最后一个数开始向前循环，如果插入数小于当前数，就将当前数向后移动一位。\n\n将当前数放置到空着的位置，即j+1。\n\n```java\n    /**\n     * 直接插入排序\n     * 时间复杂度O(n²) 空间复杂度O(1)\n     */\n    public static void straightInsertion(int[] arr) {\n        int current;//要插入的数\n        for (int i = 1; i < arr.length; i++) {  //从1开始 第一次一个数不需要排序\n            current = arr[i];\n            int j = i - 1;//序列元素个数\n            while (j >= 0 && arr[j] > current) {//从后往前循环，将大于当前插入数的向后移动\n                arr[j + 1] = arr[j];//元素向后移动\n                j--;\n            }\n            arr[j + 1] = current;//找到位置，插入当前元素\n        }\n    }\n```\n\n# 4. 希尔排序\n\n是插入排序的一种高速而稳定的改进版本。\n\n希尔排序是先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。\n\n```java\n    /**\n     * 希尔排序\n     * 时间复杂度O(n²) 空间复杂度O(1)\n     */\n    public static void shellSort(int[] arr) {\n        int gap = arr.length / 2;\n        for (; gap > 0; gap = gap / 2) {\n            //不断缩小gap，直到1为止\n            for (int j = 0; (j + gap) < arr.length; j++) { \n                //使用当前gap进行组内插入排序\n                for (int k = 0; (k + gap) < arr.length; k += gap) { \n                    if (arr[k] > arr[k + gap]) { \n                        //交换操作\n                        int temp = arr[k];\n                        arr[k] = arr[k + gap];\n                        arr[k + gap] = temp;\n                    }\n                }\n            }\n        }\n    }\n```\n\n# 5. 选择排序\n\n遍历整个序列，将最小的数放在最前面。\n\n遍历剩下的序列，将最小的数放在最前面。\n\n重复第二步，直到只剩下一个数。\n\n```java\n    /**\n     * 选择排序\n     * 时间复杂度O(n²) 空间复杂度O(1)\n     */\n    public static void selectSort(int[] arr) {\n        for (int i = 0; i < arr.length; i++) { //循环次数\n            int min = arr[i];//等会用来放最小值\n            int index = i;//用来放最小值的索引\n            for (int j = i + 1; j < arr.length; j++) { //找到最小值\n                if (arr[j] < min) {\n                    min = arr[j];\n                    index = j;\n                }\n            }\n            //内层循环结束后进行交换\n            arr[index] = arr[i];//当前值放到最小值所在位置\n            arr[i] = min;//当前位置放最小值\n        }\n    }\n```\n\n# 6. 堆排序\n\n对简单选择排序的优化。\n\n将序列构建成大顶堆。\n\n将根节点与最后一个节点交换，然后断开最后一个节点。\n\n重复第一、二步，直到所有节点断开。\n\n```java\npublic  void heapSort(int[] a){\n           int len=a.length;\n           //循环建堆  \n           for(int i=0;i<len-1;i++){\n               //建堆  \n               buildMaxHeap(a,len-1-i);\n               //交换堆顶和最后一个元素  \n               swap(a,0,len-1-i);\n           }\n       }\n        //交换方法\n       private  void swap(int[] data, int i, int j) {\n           int tmp=data[i];\n           data[i]=data[j];\n           data[j]=tmp;\n       }\n       //对data数组从0到lastIndex建大顶堆  \n       private void buildMaxHeap(int[] data, int lastIndex) {\n           //从lastIndex处节点（最后一个节点）的父节点开始  \n           for(int i=(lastIndex-1)/2;i>=0;i--){\n               //k保存正在判断的节点  \n               int k=i;\n               //如果当前k节点的子节点存在  \n               while(k*2+1<=lastIndex){\n                   //k节点的左子节点的索引  \n                   int biggerIndex=2*k+1;\n                   //如果biggerIndex小于lastIndex，即biggerIndex+1代表的k节点的右子节点存在  \n                   if(biggerIndex<lastIndex){\n                       //若果右子节点的值较大  \n                       if(data[biggerIndex]<data[biggerIndex+1]){\n                           //biggerIndex总是记录较大子节点的索引  \n                           biggerIndex++;\n                       }\n                   }\n                   //如果k节点的值小于其较大的子节点的值  \n                   if(data[k]<data[biggerIndex]){\n                       //交换他们  \n                       swap(data,k,biggerIndex);\n                       //将biggerIndex赋予k，开始while循环的下一次循环，重新保证k节点的值大于其左右子节点的值  \n                       k=biggerIndex;\n                   }else{\n                       break;\n                   }\n               }\n           }\n       }\n```\n\n# 7. 归并排序\n\n速度仅次于快速排序，内存少的时候使用，可以进行并行计算的时候使用。\n\n选择相邻两个数组成一个有序序列。\n\n选择相邻的两个有序序列组成一个有序序列。\n\n重复第二步，直到全部组成一个有序序列。\n\n```java\npublic  void mergeSort(int[] a, int left, int right) {  \n           int t = 1;// 每组元素个数  \n           int size = right - left + 1;  \n           while (t < size) {  \n               int s = t;// 本次循环每组元素个数  \n               t = 2 * s;  \n               int i = left;  \n               while (i + (t - 1) < size) {  \n                   merge(a, i, i + (s - 1), i + (t - 1));  \n                   i += t;  \n               }  \n               if (i + (s - 1) < right)  \n                   merge(a, i, i + (s - 1), right);  \n           }  \n        }  \n       \n        private static void merge(int[] data, int p, int q, int r) {  \n           int[] B = new int[data.length];  \n           int s = p;  \n           int t = q + 1;  \n           int k = p;  \n           while (s <= q && t <= r) {  \n               if (data[s] <= data[t]) {  \n                   B[k] = data[s];  \n                   s++;  \n               } else {  \n                   B[k] = data[t];  \n                   t++;  \n               }  \n               k++;  \n           }  \n           if (s == q + 1)  \n               B[k++] = data[t++];  \n           else  \n               B[k++] = data[s++];  \n           for (int i = p; i <= r; i++)  \n               data[i] = B[i];  \n        }\n```\n\n# 8. 基数排序\n\n用于大量数，很长的数进行排序时。\n\n将所有的数的个位数取出，按照个位数进行排序，构成一个序列。\n\n将新构成的所有的数的十位数取出，按照十位数进行排序，构成一个序列。\n\n```java\npublic void baseSort(int[] a) {\n               //首先确定排序的趟数;    \n               int max = a[0];\n               for (int i = 1; i < a.length; i++) {\n                   if (a[i] > max) {\n                       max = a[i];\n                   }\n               }\n               int time = 0;\n               //判断位数;    \n               while (max > 0) {\n                   max /= 10;\n                   time++;\n               }\n               //建立10个队列;    \n               List<ArrayList<Integer>> queue = new ArrayList<ArrayList<Integer>>();\n               for (int i = 0; i < 10; i++) {\n                   ArrayList<Integer> queue1 = new ArrayList<Integer>();\n                   queue.add(queue1);\n               }\n               //进行time次分配和收集;    \n               for (int i = 0; i < time; i++) {\n                   //分配数组元素;    \n                   for (int j = 0; j < a.length; j++) {\n                       //得到数字的第time+1位数;  \n                       int x = a[j] % (int) Math.pow(10, i + 1) / (int) Math.pow(10, i);\n                       ArrayList<Integer> queue2 = queue.get(x);\n                       queue2.add(a[j]);\n                       queue.set(x, queue2);\n                   }\n                   int count = 0;//元素计数器;    \n                   //收集队列元素;    \n                   for (int k = 0; k < 10; k++) {\n                       while (queue.get(k).size() > 0) {\n                           ArrayList<Integer> queue3 = queue.get(k);\n                           a[count] = queue3.get(0);\n                           queue3.remove(0);\n                           count++;\n                       }\n                   }\n               }\n        }\n```\n\n# 9. 总结\n\n| 排序法    | 平均时间 | 最小时间 | 最大时间    | 稳定度 | 额外空间 | 备注                          |\n| --------- | -------- | -------- | ----------- | ------ | -------- | ----------------------------- |\n| 冒泡排序  | O(n2)    | O(n)     | O(n2)       | 稳定   | O(1)     | n小时较好                     |\n| 选择排序  | O(n2)    | O(n2)    | O(n2)       | 不稳定 | O(1)     | n小时较好                     |\n| 插入排序  | O(n2)    | O(n)     | O(n2)       | 稳定   | O(1)     | 大部分已排序时较好            |\n| 基数排序  | O(logRB) | O(n)     | O(logRB)    | 稳定   | O(n)     | B是真数(0-9)，R是基数(个十百) |\n| Shell排序 | O(nlogn) | -        | O(ns) 1<s<2 | 不稳定 | O(1)     | s是所选分组                   |\n| 快速排序  | O(nlogn) | O(n2)    | O(n2)       | 不稳定 | O(logn)  | n大时较好                     |\n| 归并排序  | O(nlogn) | O(nlogn) | O(nlogn)    | 稳定   | O(n)     | 要求稳定性时较好              |\n| 堆排序    | O(nlogn) | O(nlogn) | O(nlogn)    | 不稳定 | O(1)     | n大时较好                     |\n\n# 参考\n\n`https://www.cnblogs.com/shixiangwan/p/6724292.html`","source":"_posts/java/java-sorts.md","raw":"---\ntitle: 几种常见排序算法的Java实现\ntags:\n  - Java\ncategories:\n  - Java\nabbrlink: 82240bb6\ndate: 2019-02-12 22:00:00\n---\n\n本文主要记录了几种常见的排序算法的Java实现，如`冒泡排序`、`快速排序`、`直接插入排序`、`希尔排序`、`选择排序`等等。\n在学数据结构与算法时的部分记录，感觉很难╮(╯▽╰)╭，还需继续努力。\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n# 1. 冒泡排序\n\n将序列中所有元素两两比较，将最大的放在最后面。\n\n将剩余序列中所有元素两两比较，将最大的放在最后面。\n\n重复第二步，直到只剩下一个数。\n\n```java\n    /**\n     * 冒泡排序：两两比较，大者交换位置,则每一轮循环结束后最大的数就会移动到最后.\n     * 时间复杂度为O(n²) 空间复杂度为O(1)\n     */\n    private static void bubbleSort(int[] arr) {\n        //外层循环length-1次\n        for (int i = 0; i < arr.length-1; i++) { \n            //外层每循环一次最后都会排好一个数\n            //所以内层循环length-1-i次\n            for (int j = 0; j < arr.length - 1 - i; j++) {  \n                if (arr[j] > arr[j + 1]) {\n                    int temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n                }\n            }\n        }\n    }\n```\n\n# 2. 快速排序\n\n快速排序（Quicksort）是对冒泡排序的一种改进，借用了分治的思想，由C. A. R. Hoare在1962年提出。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列.\n\n**具体步骤**\n\n快速排序使用分治策略来把一个序列（list）分为两个子序列（sub-lists）。\n\n- ①. 从数列中挑出一个元素，称为”基准”（pivot）。\n- ②. 重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。\n- ③. 递归地（recursively）把小于基准值元素的子数列和大于基准值元素的子数列排序。\n\n递归到最底部时，数列的大小是零或一，也就是已经排序好了。这个算法一定会结束，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。\n\n```java\n  /**\n     * 快速排序\n     * 时间复杂度为O(nlogn) 空间复杂度为O(1)\n     */\n    public static void quickSort(int[] arr, int start, int end) {\n        if (start < end) {\n            int baseNum = arr[start];//选基准值\n            int midNum;//记录中间值\n            int left = start;//左指针\n            int right = end;//右指针\n            while(left<right){\n                while ((arr[left] < baseNum) && left < end) {\n                    left++;\n                }\n                while ((arr[right] > baseNum) && right > start) {\n                    right--;\n                }\n                if (left <= right) {\n                    midNum = arr[left];\n                    arr[left] = arr[right];\n                    arr[right] = midNum;\n                    left++;\n                    right--;\n                }\n            }\n            if (start < right) {\n                quickSort(arr, start, right);\n            }\n            if (end > left) {\n                quickSort(arr, left, end);\n            }\n        }\n    }\n```\n\n# 3. 直接插入排序\n\n直接插入排序（Straight Insertion Sorting）的基本思想：将数组中的所有元素依次跟前面已经排好的元素相比较，如果选择的元素比已排序的元素小，则交换，直到全部元素都比较过为止。 \n\n首先设定插入次数，即循环次数，for(int i=1;i<length;i++)，1个数的那次不用插入。\n\n设定插入数和得到已经排好序列的最后一个数的位数。insertNum和j=i-1。\n\n从最后一个数开始向前循环，如果插入数小于当前数，就将当前数向后移动一位。\n\n将当前数放置到空着的位置，即j+1。\n\n```java\n    /**\n     * 直接插入排序\n     * 时间复杂度O(n²) 空间复杂度O(1)\n     */\n    public static void straightInsertion(int[] arr) {\n        int current;//要插入的数\n        for (int i = 1; i < arr.length; i++) {  //从1开始 第一次一个数不需要排序\n            current = arr[i];\n            int j = i - 1;//序列元素个数\n            while (j >= 0 && arr[j] > current) {//从后往前循环，将大于当前插入数的向后移动\n                arr[j + 1] = arr[j];//元素向后移动\n                j--;\n            }\n            arr[j + 1] = current;//找到位置，插入当前元素\n        }\n    }\n```\n\n# 4. 希尔排序\n\n是插入排序的一种高速而稳定的改进版本。\n\n希尔排序是先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。\n\n```java\n    /**\n     * 希尔排序\n     * 时间复杂度O(n²) 空间复杂度O(1)\n     */\n    public static void shellSort(int[] arr) {\n        int gap = arr.length / 2;\n        for (; gap > 0; gap = gap / 2) {\n            //不断缩小gap，直到1为止\n            for (int j = 0; (j + gap) < arr.length; j++) { \n                //使用当前gap进行组内插入排序\n                for (int k = 0; (k + gap) < arr.length; k += gap) { \n                    if (arr[k] > arr[k + gap]) { \n                        //交换操作\n                        int temp = arr[k];\n                        arr[k] = arr[k + gap];\n                        arr[k + gap] = temp;\n                    }\n                }\n            }\n        }\n    }\n```\n\n# 5. 选择排序\n\n遍历整个序列，将最小的数放在最前面。\n\n遍历剩下的序列，将最小的数放在最前面。\n\n重复第二步，直到只剩下一个数。\n\n```java\n    /**\n     * 选择排序\n     * 时间复杂度O(n²) 空间复杂度O(1)\n     */\n    public static void selectSort(int[] arr) {\n        for (int i = 0; i < arr.length; i++) { //循环次数\n            int min = arr[i];//等会用来放最小值\n            int index = i;//用来放最小值的索引\n            for (int j = i + 1; j < arr.length; j++) { //找到最小值\n                if (arr[j] < min) {\n                    min = arr[j];\n                    index = j;\n                }\n            }\n            //内层循环结束后进行交换\n            arr[index] = arr[i];//当前值放到最小值所在位置\n            arr[i] = min;//当前位置放最小值\n        }\n    }\n```\n\n# 6. 堆排序\n\n对简单选择排序的优化。\n\n将序列构建成大顶堆。\n\n将根节点与最后一个节点交换，然后断开最后一个节点。\n\n重复第一、二步，直到所有节点断开。\n\n```java\npublic  void heapSort(int[] a){\n           int len=a.length;\n           //循环建堆  \n           for(int i=0;i<len-1;i++){\n               //建堆  \n               buildMaxHeap(a,len-1-i);\n               //交换堆顶和最后一个元素  \n               swap(a,0,len-1-i);\n           }\n       }\n        //交换方法\n       private  void swap(int[] data, int i, int j) {\n           int tmp=data[i];\n           data[i]=data[j];\n           data[j]=tmp;\n       }\n       //对data数组从0到lastIndex建大顶堆  \n       private void buildMaxHeap(int[] data, int lastIndex) {\n           //从lastIndex处节点（最后一个节点）的父节点开始  \n           for(int i=(lastIndex-1)/2;i>=0;i--){\n               //k保存正在判断的节点  \n               int k=i;\n               //如果当前k节点的子节点存在  \n               while(k*2+1<=lastIndex){\n                   //k节点的左子节点的索引  \n                   int biggerIndex=2*k+1;\n                   //如果biggerIndex小于lastIndex，即biggerIndex+1代表的k节点的右子节点存在  \n                   if(biggerIndex<lastIndex){\n                       //若果右子节点的值较大  \n                       if(data[biggerIndex]<data[biggerIndex+1]){\n                           //biggerIndex总是记录较大子节点的索引  \n                           biggerIndex++;\n                       }\n                   }\n                   //如果k节点的值小于其较大的子节点的值  \n                   if(data[k]<data[biggerIndex]){\n                       //交换他们  \n                       swap(data,k,biggerIndex);\n                       //将biggerIndex赋予k，开始while循环的下一次循环，重新保证k节点的值大于其左右子节点的值  \n                       k=biggerIndex;\n                   }else{\n                       break;\n                   }\n               }\n           }\n       }\n```\n\n# 7. 归并排序\n\n速度仅次于快速排序，内存少的时候使用，可以进行并行计算的时候使用。\n\n选择相邻两个数组成一个有序序列。\n\n选择相邻的两个有序序列组成一个有序序列。\n\n重复第二步，直到全部组成一个有序序列。\n\n```java\npublic  void mergeSort(int[] a, int left, int right) {  \n           int t = 1;// 每组元素个数  \n           int size = right - left + 1;  \n           while (t < size) {  \n               int s = t;// 本次循环每组元素个数  \n               t = 2 * s;  \n               int i = left;  \n               while (i + (t - 1) < size) {  \n                   merge(a, i, i + (s - 1), i + (t - 1));  \n                   i += t;  \n               }  \n               if (i + (s - 1) < right)  \n                   merge(a, i, i + (s - 1), right);  \n           }  \n        }  \n       \n        private static void merge(int[] data, int p, int q, int r) {  \n           int[] B = new int[data.length];  \n           int s = p;  \n           int t = q + 1;  \n           int k = p;  \n           while (s <= q && t <= r) {  \n               if (data[s] <= data[t]) {  \n                   B[k] = data[s];  \n                   s++;  \n               } else {  \n                   B[k] = data[t];  \n                   t++;  \n               }  \n               k++;  \n           }  \n           if (s == q + 1)  \n               B[k++] = data[t++];  \n           else  \n               B[k++] = data[s++];  \n           for (int i = p; i <= r; i++)  \n               data[i] = B[i];  \n        }\n```\n\n# 8. 基数排序\n\n用于大量数，很长的数进行排序时。\n\n将所有的数的个位数取出，按照个位数进行排序，构成一个序列。\n\n将新构成的所有的数的十位数取出，按照十位数进行排序，构成一个序列。\n\n```java\npublic void baseSort(int[] a) {\n               //首先确定排序的趟数;    \n               int max = a[0];\n               for (int i = 1; i < a.length; i++) {\n                   if (a[i] > max) {\n                       max = a[i];\n                   }\n               }\n               int time = 0;\n               //判断位数;    \n               while (max > 0) {\n                   max /= 10;\n                   time++;\n               }\n               //建立10个队列;    \n               List<ArrayList<Integer>> queue = new ArrayList<ArrayList<Integer>>();\n               for (int i = 0; i < 10; i++) {\n                   ArrayList<Integer> queue1 = new ArrayList<Integer>();\n                   queue.add(queue1);\n               }\n               //进行time次分配和收集;    \n               for (int i = 0; i < time; i++) {\n                   //分配数组元素;    \n                   for (int j = 0; j < a.length; j++) {\n                       //得到数字的第time+1位数;  \n                       int x = a[j] % (int) Math.pow(10, i + 1) / (int) Math.pow(10, i);\n                       ArrayList<Integer> queue2 = queue.get(x);\n                       queue2.add(a[j]);\n                       queue.set(x, queue2);\n                   }\n                   int count = 0;//元素计数器;    \n                   //收集队列元素;    \n                   for (int k = 0; k < 10; k++) {\n                       while (queue.get(k).size() > 0) {\n                           ArrayList<Integer> queue3 = queue.get(k);\n                           a[count] = queue3.get(0);\n                           queue3.remove(0);\n                           count++;\n                       }\n                   }\n               }\n        }\n```\n\n# 9. 总结\n\n| 排序法    | 平均时间 | 最小时间 | 最大时间    | 稳定度 | 额外空间 | 备注                          |\n| --------- | -------- | -------- | ----------- | ------ | -------- | ----------------------------- |\n| 冒泡排序  | O(n2)    | O(n)     | O(n2)       | 稳定   | O(1)     | n小时较好                     |\n| 选择排序  | O(n2)    | O(n2)    | O(n2)       | 不稳定 | O(1)     | n小时较好                     |\n| 插入排序  | O(n2)    | O(n)     | O(n2)       | 稳定   | O(1)     | 大部分已排序时较好            |\n| 基数排序  | O(logRB) | O(n)     | O(logRB)    | 稳定   | O(n)     | B是真数(0-9)，R是基数(个十百) |\n| Shell排序 | O(nlogn) | -        | O(ns) 1<s<2 | 不稳定 | O(1)     | s是所选分组                   |\n| 快速排序  | O(nlogn) | O(n2)    | O(n2)       | 不稳定 | O(logn)  | n大时较好                     |\n| 归并排序  | O(nlogn) | O(nlogn) | O(nlogn)    | 稳定   | O(n)     | 要求稳定性时较好              |\n| 堆排序    | O(nlogn) | O(nlogn) | O(nlogn)    | 不稳定 | O(1)     | n大时较好                     |\n\n# 参考\n\n`https://www.cnblogs.com/shixiangwan/p/6724292.html`","slug":"java/java-sorts","published":1,"updated":"2019-02-12T15:25:05.178Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv4bc004q0ww4tq1vcvlf","content":"<p>本文主要记录了几种常见的排序算法的Java实现，如<code>冒泡排序</code>、<code>快速排序</code>、<code>直接插入排序</code>、<code>希尔排序</code>、<code>选择排序</code>等等。<br>在学数据结构与算法时的部分记录，感觉很难╮(╯▽╰)╭，还需继续努力。<br><a id=\"more\"></a></p>\n<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h1 id=\"1-冒泡排序\"><a href=\"#1-冒泡排序\" class=\"headerlink\" title=\"1. 冒泡排序\"></a>1. 冒泡排序</h1><p>将序列中所有元素两两比较，将最大的放在最后面。</p>\n<p>将剩余序列中所有元素两两比较，将最大的放在最后面。</p>\n<p>重复第二步，直到只剩下一个数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 冒泡排序：两两比较，大者交换位置,则每一轮循环结束后最大的数就会移动到最后.</span></span><br><span class=\"line\"><span class=\"comment\"> * 时间复杂度为O(n²) 空间复杂度为O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//外层循环length-1次</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length-<span class=\"number\">1</span>; i++) &#123; </span><br><span class=\"line\">        <span class=\"comment\">//外层每循环一次最后都会排好一个数</span></span><br><span class=\"line\">        <span class=\"comment\">//所以内层循环length-1-i次</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; arr.length - <span class=\"number\">1</span> - i; j++) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp = arr[j];</span><br><span class=\"line\">                arr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                arr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-快速排序\"><a href=\"#2-快速排序\" class=\"headerlink\" title=\"2. 快速排序\"></a>2. 快速排序</h1><p>快速排序（Quicksort）是对冒泡排序的一种改进，借用了分治的思想，由C. A. R. Hoare在1962年提出。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列.</p>\n<p><strong>具体步骤</strong></p>\n<p>快速排序使用分治策略来把一个序列（list）分为两个子序列（sub-lists）。</p>\n<ul>\n<li>①. 从数列中挑出一个元素，称为”基准”（pivot）。</li>\n<li>②. 重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</li>\n<li>③. 递归地（recursively）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li>\n</ul>\n<p>递归到最底部时，数列的大小是零或一，也就是已经排序好了。这个算法一定会结束，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 快速排序</span></span><br><span class=\"line\"><span class=\"comment\">   * 时间复杂度为O(nlogn) 空间复杂度为O(1)</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (start &lt; end) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">int</span> baseNum = arr[start];<span class=\"comment\">//选基准值</span></span><br><span class=\"line\">          <span class=\"keyword\">int</span> midNum;<span class=\"comment\">//记录中间值</span></span><br><span class=\"line\">          <span class=\"keyword\">int</span> left = start;<span class=\"comment\">//左指针</span></span><br><span class=\"line\">          <span class=\"keyword\">int</span> right = end;<span class=\"comment\">//右指针</span></span><br><span class=\"line\">          <span class=\"keyword\">while</span>(left&lt;right)&#123;</span><br><span class=\"line\">              <span class=\"keyword\">while</span> ((arr[left] &lt; baseNum) &amp;&amp; left &lt; end) &#123;</span><br><span class=\"line\">                  left++;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">while</span> ((arr[right] &gt; baseNum) &amp;&amp; right &gt; start) &#123;</span><br><span class=\"line\">                  right--;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (left &lt;= right) &#123;</span><br><span class=\"line\">                  midNum = arr[left];</span><br><span class=\"line\">                  arr[left] = arr[right];</span><br><span class=\"line\">                  arr[right] = midNum;</span><br><span class=\"line\">                  left++;</span><br><span class=\"line\">                  right--;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (start &lt; right) &#123;</span><br><span class=\"line\">              quickSort(arr, start, right);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (end &gt; left) &#123;</span><br><span class=\"line\">              quickSort(arr, left, end);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-直接插入排序\"><a href=\"#3-直接插入排序\" class=\"headerlink\" title=\"3. 直接插入排序\"></a>3. 直接插入排序</h1><p>直接插入排序（Straight Insertion Sorting）的基本思想：将数组中的所有元素依次跟前面已经排好的元素相比较，如果选择的元素比已排序的元素小，则交换，直到全部元素都比较过为止。 </p>\n<p>首先设定插入次数，即循环次数，for(int i=1;i&lt;length;i++)，1个数的那次不用插入。</p>\n<p>设定插入数和得到已经排好序列的最后一个数的位数。insertNum和j=i-1。</p>\n<p>从最后一个数开始向前循环，如果插入数小于当前数，就将当前数向后移动一位。</p>\n<p>将当前数放置到空着的位置，即j+1。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 直接插入排序</span></span><br><span class=\"line\"><span class=\"comment\"> * 时间复杂度O(n²) 空间复杂度O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">straightInsertion</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> current;<span class=\"comment\">//要插入的数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;  <span class=\"comment\">//从1开始 第一次一个数不需要排序</span></span><br><span class=\"line\">        current = arr[i];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = i - <span class=\"number\">1</span>;<span class=\"comment\">//序列元素个数</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &gt; current) &#123;<span class=\"comment\">//从后往前循环，将大于当前插入数的向后移动</span></span><br><span class=\"line\">            arr[j + <span class=\"number\">1</span>] = arr[j];<span class=\"comment\">//元素向后移动</span></span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[j + <span class=\"number\">1</span>] = current;<span class=\"comment\">//找到位置，插入当前元素</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-希尔排序\"><a href=\"#4-希尔排序\" class=\"headerlink\" title=\"4. 希尔排序\"></a>4. 希尔排序</h1><p>是插入排序的一种高速而稳定的改进版本。</p>\n<p>希尔排序是先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 希尔排序</span></span><br><span class=\"line\"><span class=\"comment\"> * 时间复杂度O(n²) 空间复杂度O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shellSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> gap = arr.length / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; gap &gt; <span class=\"number\">0</span>; gap = gap / <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//不断缩小gap，直到1为止</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; (j + gap) &lt; arr.length; j++) &#123; </span><br><span class=\"line\">            <span class=\"comment\">//使用当前gap进行组内插入排序</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; (k + gap) &lt; arr.length; k += gap) &#123; </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[k] &gt; arr[k + gap]) &#123; </span><br><span class=\"line\">                    <span class=\"comment\">//交换操作</span></span><br><span class=\"line\">                    <span class=\"keyword\">int</span> temp = arr[k];</span><br><span class=\"line\">                    arr[k] = arr[k + gap];</span><br><span class=\"line\">                    arr[k + gap] = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-选择排序\"><a href=\"#5-选择排序\" class=\"headerlink\" title=\"5. 选择排序\"></a>5. 选择排序</h1><p>遍历整个序列，将最小的数放在最前面。</p>\n<p>遍历剩下的序列，将最小的数放在最前面。</p>\n<p>重复第二步，直到只剩下一个数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 选择排序</span></span><br><span class=\"line\"><span class=\"comment\"> * 时间复杂度O(n²) 空间复杂度O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">selectSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123; <span class=\"comment\">//循环次数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> min = arr[i];<span class=\"comment\">//等会用来放最小值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = i;<span class=\"comment\">//用来放最小值的索引</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; arr.length; j++) &#123; <span class=\"comment\">//找到最小值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &lt; min) &#123;</span><br><span class=\"line\">                min = arr[j];</span><br><span class=\"line\">                index = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//内层循环结束后进行交换</span></span><br><span class=\"line\">        arr[index] = arr[i];<span class=\"comment\">//当前值放到最小值所在位置</span></span><br><span class=\"line\">        arr[i] = min;<span class=\"comment\">//当前位置放最小值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-堆排序\"><a href=\"#6-堆排序\" class=\"headerlink\" title=\"6. 堆排序\"></a>6. 堆排序</h1><p>对简单选择排序的优化。</p>\n<p>将序列构建成大顶堆。</p>\n<p>将根节点与最后一个节点交换，然后断开最后一个节点。</p>\n<p>重复第一、二步，直到所有节点断开。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">heapSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span></span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">int</span> len=a.length;</span><br><span class=\"line\">           <span class=\"comment\">//循环建堆  </span></span><br><span class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;len-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">               <span class=\"comment\">//建堆  </span></span><br><span class=\"line\">               buildMaxHeap(a,len-<span class=\"number\">1</span>-i);</span><br><span class=\"line\">               <span class=\"comment\">//交换堆顶和最后一个元素  </span></span><br><span class=\"line\">               swap(a,<span class=\"number\">0</span>,len-<span class=\"number\">1</span>-i);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">        <span class=\"comment\">//交换方法</span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">private</span>  <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] data, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">int</span> tmp=data[i];</span><br><span class=\"line\">           data[i]=data[j];</span><br><span class=\"line\">           data[j]=tmp;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">//对data数组从0到lastIndex建大顶堆  </span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">buildMaxHeap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] data, <span class=\"keyword\">int</span> lastIndex)</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"comment\">//从lastIndex处节点（最后一个节点）的父节点开始  </span></span><br><span class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=(lastIndex-<span class=\"number\">1</span>)/<span class=\"number\">2</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">               <span class=\"comment\">//k保存正在判断的节点  </span></span><br><span class=\"line\">               <span class=\"keyword\">int</span> k=i;</span><br><span class=\"line\">               <span class=\"comment\">//如果当前k节点的子节点存在  </span></span><br><span class=\"line\">               <span class=\"keyword\">while</span>(k*<span class=\"number\">2</span>+<span class=\"number\">1</span>&lt;=lastIndex)&#123;</span><br><span class=\"line\">                   <span class=\"comment\">//k节点的左子节点的索引  </span></span><br><span class=\"line\">                   <span class=\"keyword\">int</span> biggerIndex=<span class=\"number\">2</span>*k+<span class=\"number\">1</span>;</span><br><span class=\"line\">                   <span class=\"comment\">//如果biggerIndex小于lastIndex，即biggerIndex+1代表的k节点的右子节点存在  </span></span><br><span class=\"line\">                   <span class=\"keyword\">if</span>(biggerIndex&lt;lastIndex)&#123;</span><br><span class=\"line\">                       <span class=\"comment\">//若果右子节点的值较大  </span></span><br><span class=\"line\">                       <span class=\"keyword\">if</span>(data[biggerIndex]&lt;data[biggerIndex+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                           <span class=\"comment\">//biggerIndex总是记录较大子节点的索引  </span></span><br><span class=\"line\">                           biggerIndex++;</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                   <span class=\"comment\">//如果k节点的值小于其较大的子节点的值  </span></span><br><span class=\"line\">                   <span class=\"keyword\">if</span>(data[k]&lt;data[biggerIndex])&#123;</span><br><span class=\"line\">                       <span class=\"comment\">//交换他们  </span></span><br><span class=\"line\">                       swap(data,k,biggerIndex);</span><br><span class=\"line\">                       <span class=\"comment\">//将biggerIndex赋予k，开始while循环的下一次循环，重新保证k节点的值大于其左右子节点的值  </span></span><br><span class=\"line\">                       k=biggerIndex;</span><br><span class=\"line\">                   &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                       <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"7-归并排序\"><a href=\"#7-归并排序\" class=\"headerlink\" title=\"7. 归并排序\"></a>7. 归并排序</h1><p>速度仅次于快速排序，内存少的时候使用，可以进行并行计算的时候使用。</p>\n<p>选择相邻两个数组成一个有序序列。</p>\n<p>选择相邻的两个有序序列组成一个有序序列。</p>\n<p>重复第二步，直到全部组成一个有序序列。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">mergeSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;  </span><br><span class=\"line\">           <span class=\"keyword\">int</span> t = <span class=\"number\">1</span>;<span class=\"comment\">// 每组元素个数  </span></span><br><span class=\"line\">           <span class=\"keyword\">int</span> size = right - left + <span class=\"number\">1</span>;  </span><br><span class=\"line\">           <span class=\"keyword\">while</span> (t &lt; size) &#123;  </span><br><span class=\"line\">               <span class=\"keyword\">int</span> s = t;<span class=\"comment\">// 本次循环每组元素个数  </span></span><br><span class=\"line\">               t = <span class=\"number\">2</span> * s;  </span><br><span class=\"line\">               <span class=\"keyword\">int</span> i = left;  </span><br><span class=\"line\">               <span class=\"keyword\">while</span> (i + (t - <span class=\"number\">1</span>) &lt; size) &#123;  </span><br><span class=\"line\">                   merge(a, i, i + (s - <span class=\"number\">1</span>), i + (t - <span class=\"number\">1</span>));  </span><br><span class=\"line\">                   i += t;  </span><br><span class=\"line\">               &#125;  </span><br><span class=\"line\">               <span class=\"keyword\">if</span> (i + (s - <span class=\"number\">1</span>) &lt; right)  </span><br><span class=\"line\">                   merge(a, i, i + (s - <span class=\"number\">1</span>), right);  </span><br><span class=\"line\">           &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span>[] data, <span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q, <span class=\"keyword\">int</span> r)</span> </span>&#123;  </span><br><span class=\"line\">           <span class=\"keyword\">int</span>[] B = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[data.length];  </span><br><span class=\"line\">           <span class=\"keyword\">int</span> s = p;  </span><br><span class=\"line\">           <span class=\"keyword\">int</span> t = q + <span class=\"number\">1</span>;  </span><br><span class=\"line\">           <span class=\"keyword\">int</span> k = p;  </span><br><span class=\"line\">           <span class=\"keyword\">while</span> (s &lt;= q &amp;&amp; t &lt;= r) &#123;  </span><br><span class=\"line\">               <span class=\"keyword\">if</span> (data[s] &lt;= data[t]) &#123;  </span><br><span class=\"line\">                   B[k] = data[s];  </span><br><span class=\"line\">                   s++;  </span><br><span class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">                   B[k] = data[t];  </span><br><span class=\"line\">                   t++;  </span><br><span class=\"line\">               &#125;  </span><br><span class=\"line\">               k++;  </span><br><span class=\"line\">           &#125;  </span><br><span class=\"line\">           <span class=\"keyword\">if</span> (s == q + <span class=\"number\">1</span>)  </span><br><span class=\"line\">               B[k++] = data[t++];  </span><br><span class=\"line\">           <span class=\"keyword\">else</span>  </span><br><span class=\"line\">               B[k++] = data[s++];  </span><br><span class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = p; i &lt;= r; i++)  </span><br><span class=\"line\">               data[i] = B[i];  </span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"8-基数排序\"><a href=\"#8-基数排序\" class=\"headerlink\" title=\"8. 基数排序\"></a>8. 基数排序</h1><p>用于大量数，很长的数进行排序时。</p>\n<p>将所有的数的个位数取出，按照个位数进行排序，构成一个序列。</p>\n<p>将新构成的所有的数的十位数取出，按照十位数进行排序，构成一个序列。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">baseSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</span><br><span class=\"line\">               <span class=\"comment\">//首先确定排序的趟数;    </span></span><br><span class=\"line\">               <span class=\"keyword\">int</span> max = a[<span class=\"number\">0</span>];</span><br><span class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (a[i] &gt; max) &#123;</span><br><span class=\"line\">                       max = a[i];</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">int</span> time = <span class=\"number\">0</span>;</span><br><span class=\"line\">               <span class=\"comment\">//判断位数;    </span></span><br><span class=\"line\">               <span class=\"keyword\">while</span> (max &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                   max /= <span class=\"number\">10</span>;</span><br><span class=\"line\">                   time++;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"comment\">//建立10个队列;    </span></span><br><span class=\"line\">               List&lt;ArrayList&lt;Integer&gt;&gt; queue = <span class=\"keyword\">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                   ArrayList&lt;Integer&gt; queue1 = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">                   queue.add(queue1);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"comment\">//进行time次分配和收集;    </span></span><br><span class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; time; i++) &#123;</span><br><span class=\"line\">                   <span class=\"comment\">//分配数组元素;    </span></span><br><span class=\"line\">                   <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; a.length; j++) &#123;</span><br><span class=\"line\">                       <span class=\"comment\">//得到数字的第time+1位数;  </span></span><br><span class=\"line\">                       <span class=\"keyword\">int</span> x = a[j] % (<span class=\"keyword\">int</span>) Math.pow(<span class=\"number\">10</span>, i + <span class=\"number\">1</span>) / (<span class=\"keyword\">int</span>) Math.pow(<span class=\"number\">10</span>, i);</span><br><span class=\"line\">                       ArrayList&lt;Integer&gt; queue2 = queue.get(x);</span><br><span class=\"line\">                       queue2.add(a[j]);</span><br><span class=\"line\">                       queue.set(x, queue2);</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                   <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;<span class=\"comment\">//元素计数器;    </span></span><br><span class=\"line\">                   <span class=\"comment\">//收集队列元素;    </span></span><br><span class=\"line\">                   <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">10</span>; k++) &#123;</span><br><span class=\"line\">                       <span class=\"keyword\">while</span> (queue.get(k).size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                           ArrayList&lt;Integer&gt; queue3 = queue.get(k);</span><br><span class=\"line\">                           a[count] = queue3.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">                           queue3.remove(<span class=\"number\">0</span>);</span><br><span class=\"line\">                           count++;</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"9-总结\"><a href=\"#9-总结\" class=\"headerlink\" title=\"9. 总结\"></a>9. 总结</h1><table>\n<thead>\n<tr>\n<th>排序法</th>\n<th>平均时间</th>\n<th>最小时间</th>\n<th>最大时间</th>\n<th>稳定度</th>\n<th>额外空间</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>冒泡排序</td>\n<td>O(n2)</td>\n<td>O(n)</td>\n<td>O(n2)</td>\n<td>稳定</td>\n<td>O(1)</td>\n<td>n小时较好</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>O(n2)</td>\n<td>O(n2)</td>\n<td>O(n2)</td>\n<td>不稳定</td>\n<td>O(1)</td>\n<td>n小时较好</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>O(n2)</td>\n<td>O(n)</td>\n<td>O(n2)</td>\n<td>稳定</td>\n<td>O(1)</td>\n<td>大部分已排序时较好</td>\n</tr>\n<tr>\n<td>基数排序</td>\n<td>O(logRB)</td>\n<td>O(n)</td>\n<td>O(logRB)</td>\n<td>稳定</td>\n<td>O(n)</td>\n<td>B是真数(0-9)，R是基数(个十百)</td>\n</tr>\n<tr>\n<td>Shell排序</td>\n<td>O(nlogn)</td>\n<td>-</td>\n<td>O(ns) 1&lt;s&lt;2</td>\n<td>不稳定</td>\n<td>O(1)</td>\n<td>s是所选分组</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>O(nlogn)</td>\n<td>O(n2)</td>\n<td>O(n2)</td>\n<td>不稳定</td>\n<td>O(logn)</td>\n<td>n大时较好</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>稳定</td>\n<td>O(n)</td>\n<td>要求稳定性时较好</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>不稳定</td>\n<td>O(1)</td>\n<td>n大时较好</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><code>https://www.cnblogs.com/shixiangwan/p/6724292.html</code></p>\n","site":{"data":{}},"excerpt":"<p>本文主要记录了几种常见的排序算法的Java实现，如<code>冒泡排序</code>、<code>快速排序</code>、<code>直接插入排序</code>、<code>希尔排序</code>、<code>选择排序</code>等等。<br>在学数据结构与算法时的部分记录，感觉很难╮(╯▽╰)╭，还需继续努力。<br>","more":"</p>\n<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h1 id=\"1-冒泡排序\"><a href=\"#1-冒泡排序\" class=\"headerlink\" title=\"1. 冒泡排序\"></a>1. 冒泡排序</h1><p>将序列中所有元素两两比较，将最大的放在最后面。</p>\n<p>将剩余序列中所有元素两两比较，将最大的放在最后面。</p>\n<p>重复第二步，直到只剩下一个数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 冒泡排序：两两比较，大者交换位置,则每一轮循环结束后最大的数就会移动到最后.</span></span><br><span class=\"line\"><span class=\"comment\"> * 时间复杂度为O(n²) 空间复杂度为O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//外层循环length-1次</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length-<span class=\"number\">1</span>; i++) &#123; </span><br><span class=\"line\">        <span class=\"comment\">//外层每循环一次最后都会排好一个数</span></span><br><span class=\"line\">        <span class=\"comment\">//所以内层循环length-1-i次</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; arr.length - <span class=\"number\">1</span> - i; j++) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp = arr[j];</span><br><span class=\"line\">                arr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                arr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-快速排序\"><a href=\"#2-快速排序\" class=\"headerlink\" title=\"2. 快速排序\"></a>2. 快速排序</h1><p>快速排序（Quicksort）是对冒泡排序的一种改进，借用了分治的思想，由C. A. R. Hoare在1962年提出。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列.</p>\n<p><strong>具体步骤</strong></p>\n<p>快速排序使用分治策略来把一个序列（list）分为两个子序列（sub-lists）。</p>\n<ul>\n<li>①. 从数列中挑出一个元素，称为”基准”（pivot）。</li>\n<li>②. 重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</li>\n<li>③. 递归地（recursively）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li>\n</ul>\n<p>递归到最底部时，数列的大小是零或一，也就是已经排序好了。这个算法一定会结束，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 快速排序</span></span><br><span class=\"line\"><span class=\"comment\">   * 时间复杂度为O(nlogn) 空间复杂度为O(1)</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (start &lt; end) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">int</span> baseNum = arr[start];<span class=\"comment\">//选基准值</span></span><br><span class=\"line\">          <span class=\"keyword\">int</span> midNum;<span class=\"comment\">//记录中间值</span></span><br><span class=\"line\">          <span class=\"keyword\">int</span> left = start;<span class=\"comment\">//左指针</span></span><br><span class=\"line\">          <span class=\"keyword\">int</span> right = end;<span class=\"comment\">//右指针</span></span><br><span class=\"line\">          <span class=\"keyword\">while</span>(left&lt;right)&#123;</span><br><span class=\"line\">              <span class=\"keyword\">while</span> ((arr[left] &lt; baseNum) &amp;&amp; left &lt; end) &#123;</span><br><span class=\"line\">                  left++;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">while</span> ((arr[right] &gt; baseNum) &amp;&amp; right &gt; start) &#123;</span><br><span class=\"line\">                  right--;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (left &lt;= right) &#123;</span><br><span class=\"line\">                  midNum = arr[left];</span><br><span class=\"line\">                  arr[left] = arr[right];</span><br><span class=\"line\">                  arr[right] = midNum;</span><br><span class=\"line\">                  left++;</span><br><span class=\"line\">                  right--;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (start &lt; right) &#123;</span><br><span class=\"line\">              quickSort(arr, start, right);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (end &gt; left) &#123;</span><br><span class=\"line\">              quickSort(arr, left, end);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-直接插入排序\"><a href=\"#3-直接插入排序\" class=\"headerlink\" title=\"3. 直接插入排序\"></a>3. 直接插入排序</h1><p>直接插入排序（Straight Insertion Sorting）的基本思想：将数组中的所有元素依次跟前面已经排好的元素相比较，如果选择的元素比已排序的元素小，则交换，直到全部元素都比较过为止。 </p>\n<p>首先设定插入次数，即循环次数，for(int i=1;i&lt;length;i++)，1个数的那次不用插入。</p>\n<p>设定插入数和得到已经排好序列的最后一个数的位数。insertNum和j=i-1。</p>\n<p>从最后一个数开始向前循环，如果插入数小于当前数，就将当前数向后移动一位。</p>\n<p>将当前数放置到空着的位置，即j+1。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 直接插入排序</span></span><br><span class=\"line\"><span class=\"comment\"> * 时间复杂度O(n²) 空间复杂度O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">straightInsertion</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> current;<span class=\"comment\">//要插入的数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;  <span class=\"comment\">//从1开始 第一次一个数不需要排序</span></span><br><span class=\"line\">        current = arr[i];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = i - <span class=\"number\">1</span>;<span class=\"comment\">//序列元素个数</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &gt; current) &#123;<span class=\"comment\">//从后往前循环，将大于当前插入数的向后移动</span></span><br><span class=\"line\">            arr[j + <span class=\"number\">1</span>] = arr[j];<span class=\"comment\">//元素向后移动</span></span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[j + <span class=\"number\">1</span>] = current;<span class=\"comment\">//找到位置，插入当前元素</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-希尔排序\"><a href=\"#4-希尔排序\" class=\"headerlink\" title=\"4. 希尔排序\"></a>4. 希尔排序</h1><p>是插入排序的一种高速而稳定的改进版本。</p>\n<p>希尔排序是先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 希尔排序</span></span><br><span class=\"line\"><span class=\"comment\"> * 时间复杂度O(n²) 空间复杂度O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shellSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> gap = arr.length / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; gap &gt; <span class=\"number\">0</span>; gap = gap / <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//不断缩小gap，直到1为止</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; (j + gap) &lt; arr.length; j++) &#123; </span><br><span class=\"line\">            <span class=\"comment\">//使用当前gap进行组内插入排序</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; (k + gap) &lt; arr.length; k += gap) &#123; </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[k] &gt; arr[k + gap]) &#123; </span><br><span class=\"line\">                    <span class=\"comment\">//交换操作</span></span><br><span class=\"line\">                    <span class=\"keyword\">int</span> temp = arr[k];</span><br><span class=\"line\">                    arr[k] = arr[k + gap];</span><br><span class=\"line\">                    arr[k + gap] = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-选择排序\"><a href=\"#5-选择排序\" class=\"headerlink\" title=\"5. 选择排序\"></a>5. 选择排序</h1><p>遍历整个序列，将最小的数放在最前面。</p>\n<p>遍历剩下的序列，将最小的数放在最前面。</p>\n<p>重复第二步，直到只剩下一个数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 选择排序</span></span><br><span class=\"line\"><span class=\"comment\"> * 时间复杂度O(n²) 空间复杂度O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">selectSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123; <span class=\"comment\">//循环次数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> min = arr[i];<span class=\"comment\">//等会用来放最小值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = i;<span class=\"comment\">//用来放最小值的索引</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; arr.length; j++) &#123; <span class=\"comment\">//找到最小值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &lt; min) &#123;</span><br><span class=\"line\">                min = arr[j];</span><br><span class=\"line\">                index = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//内层循环结束后进行交换</span></span><br><span class=\"line\">        arr[index] = arr[i];<span class=\"comment\">//当前值放到最小值所在位置</span></span><br><span class=\"line\">        arr[i] = min;<span class=\"comment\">//当前位置放最小值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-堆排序\"><a href=\"#6-堆排序\" class=\"headerlink\" title=\"6. 堆排序\"></a>6. 堆排序</h1><p>对简单选择排序的优化。</p>\n<p>将序列构建成大顶堆。</p>\n<p>将根节点与最后一个节点交换，然后断开最后一个节点。</p>\n<p>重复第一、二步，直到所有节点断开。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">heapSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span></span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">int</span> len=a.length;</span><br><span class=\"line\">           <span class=\"comment\">//循环建堆  </span></span><br><span class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;len-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">               <span class=\"comment\">//建堆  </span></span><br><span class=\"line\">               buildMaxHeap(a,len-<span class=\"number\">1</span>-i);</span><br><span class=\"line\">               <span class=\"comment\">//交换堆顶和最后一个元素  </span></span><br><span class=\"line\">               swap(a,<span class=\"number\">0</span>,len-<span class=\"number\">1</span>-i);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">        <span class=\"comment\">//交换方法</span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">private</span>  <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] data, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">int</span> tmp=data[i];</span><br><span class=\"line\">           data[i]=data[j];</span><br><span class=\"line\">           data[j]=tmp;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">//对data数组从0到lastIndex建大顶堆  </span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">buildMaxHeap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] data, <span class=\"keyword\">int</span> lastIndex)</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"comment\">//从lastIndex处节点（最后一个节点）的父节点开始  </span></span><br><span class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=(lastIndex-<span class=\"number\">1</span>)/<span class=\"number\">2</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">               <span class=\"comment\">//k保存正在判断的节点  </span></span><br><span class=\"line\">               <span class=\"keyword\">int</span> k=i;</span><br><span class=\"line\">               <span class=\"comment\">//如果当前k节点的子节点存在  </span></span><br><span class=\"line\">               <span class=\"keyword\">while</span>(k*<span class=\"number\">2</span>+<span class=\"number\">1</span>&lt;=lastIndex)&#123;</span><br><span class=\"line\">                   <span class=\"comment\">//k节点的左子节点的索引  </span></span><br><span class=\"line\">                   <span class=\"keyword\">int</span> biggerIndex=<span class=\"number\">2</span>*k+<span class=\"number\">1</span>;</span><br><span class=\"line\">                   <span class=\"comment\">//如果biggerIndex小于lastIndex，即biggerIndex+1代表的k节点的右子节点存在  </span></span><br><span class=\"line\">                   <span class=\"keyword\">if</span>(biggerIndex&lt;lastIndex)&#123;</span><br><span class=\"line\">                       <span class=\"comment\">//若果右子节点的值较大  </span></span><br><span class=\"line\">                       <span class=\"keyword\">if</span>(data[biggerIndex]&lt;data[biggerIndex+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                           <span class=\"comment\">//biggerIndex总是记录较大子节点的索引  </span></span><br><span class=\"line\">                           biggerIndex++;</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                   <span class=\"comment\">//如果k节点的值小于其较大的子节点的值  </span></span><br><span class=\"line\">                   <span class=\"keyword\">if</span>(data[k]&lt;data[biggerIndex])&#123;</span><br><span class=\"line\">                       <span class=\"comment\">//交换他们  </span></span><br><span class=\"line\">                       swap(data,k,biggerIndex);</span><br><span class=\"line\">                       <span class=\"comment\">//将biggerIndex赋予k，开始while循环的下一次循环，重新保证k节点的值大于其左右子节点的值  </span></span><br><span class=\"line\">                       k=biggerIndex;</span><br><span class=\"line\">                   &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                       <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"7-归并排序\"><a href=\"#7-归并排序\" class=\"headerlink\" title=\"7. 归并排序\"></a>7. 归并排序</h1><p>速度仅次于快速排序，内存少的时候使用，可以进行并行计算的时候使用。</p>\n<p>选择相邻两个数组成一个有序序列。</p>\n<p>选择相邻的两个有序序列组成一个有序序列。</p>\n<p>重复第二步，直到全部组成一个有序序列。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">mergeSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;  </span><br><span class=\"line\">           <span class=\"keyword\">int</span> t = <span class=\"number\">1</span>;<span class=\"comment\">// 每组元素个数  </span></span><br><span class=\"line\">           <span class=\"keyword\">int</span> size = right - left + <span class=\"number\">1</span>;  </span><br><span class=\"line\">           <span class=\"keyword\">while</span> (t &lt; size) &#123;  </span><br><span class=\"line\">               <span class=\"keyword\">int</span> s = t;<span class=\"comment\">// 本次循环每组元素个数  </span></span><br><span class=\"line\">               t = <span class=\"number\">2</span> * s;  </span><br><span class=\"line\">               <span class=\"keyword\">int</span> i = left;  </span><br><span class=\"line\">               <span class=\"keyword\">while</span> (i + (t - <span class=\"number\">1</span>) &lt; size) &#123;  </span><br><span class=\"line\">                   merge(a, i, i + (s - <span class=\"number\">1</span>), i + (t - <span class=\"number\">1</span>));  </span><br><span class=\"line\">                   i += t;  </span><br><span class=\"line\">               &#125;  </span><br><span class=\"line\">               <span class=\"keyword\">if</span> (i + (s - <span class=\"number\">1</span>) &lt; right)  </span><br><span class=\"line\">                   merge(a, i, i + (s - <span class=\"number\">1</span>), right);  </span><br><span class=\"line\">           &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span>[] data, <span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q, <span class=\"keyword\">int</span> r)</span> </span>&#123;  </span><br><span class=\"line\">           <span class=\"keyword\">int</span>[] B = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[data.length];  </span><br><span class=\"line\">           <span class=\"keyword\">int</span> s = p;  </span><br><span class=\"line\">           <span class=\"keyword\">int</span> t = q + <span class=\"number\">1</span>;  </span><br><span class=\"line\">           <span class=\"keyword\">int</span> k = p;  </span><br><span class=\"line\">           <span class=\"keyword\">while</span> (s &lt;= q &amp;&amp; t &lt;= r) &#123;  </span><br><span class=\"line\">               <span class=\"keyword\">if</span> (data[s] &lt;= data[t]) &#123;  </span><br><span class=\"line\">                   B[k] = data[s];  </span><br><span class=\"line\">                   s++;  </span><br><span class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">                   B[k] = data[t];  </span><br><span class=\"line\">                   t++;  </span><br><span class=\"line\">               &#125;  </span><br><span class=\"line\">               k++;  </span><br><span class=\"line\">           &#125;  </span><br><span class=\"line\">           <span class=\"keyword\">if</span> (s == q + <span class=\"number\">1</span>)  </span><br><span class=\"line\">               B[k++] = data[t++];  </span><br><span class=\"line\">           <span class=\"keyword\">else</span>  </span><br><span class=\"line\">               B[k++] = data[s++];  </span><br><span class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = p; i &lt;= r; i++)  </span><br><span class=\"line\">               data[i] = B[i];  </span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"8-基数排序\"><a href=\"#8-基数排序\" class=\"headerlink\" title=\"8. 基数排序\"></a>8. 基数排序</h1><p>用于大量数，很长的数进行排序时。</p>\n<p>将所有的数的个位数取出，按照个位数进行排序，构成一个序列。</p>\n<p>将新构成的所有的数的十位数取出，按照十位数进行排序，构成一个序列。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">baseSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</span><br><span class=\"line\">               <span class=\"comment\">//首先确定排序的趟数;    </span></span><br><span class=\"line\">               <span class=\"keyword\">int</span> max = a[<span class=\"number\">0</span>];</span><br><span class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (a[i] &gt; max) &#123;</span><br><span class=\"line\">                       max = a[i];</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">int</span> time = <span class=\"number\">0</span>;</span><br><span class=\"line\">               <span class=\"comment\">//判断位数;    </span></span><br><span class=\"line\">               <span class=\"keyword\">while</span> (max &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                   max /= <span class=\"number\">10</span>;</span><br><span class=\"line\">                   time++;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"comment\">//建立10个队列;    </span></span><br><span class=\"line\">               List&lt;ArrayList&lt;Integer&gt;&gt; queue = <span class=\"keyword\">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                   ArrayList&lt;Integer&gt; queue1 = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">                   queue.add(queue1);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"comment\">//进行time次分配和收集;    </span></span><br><span class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; time; i++) &#123;</span><br><span class=\"line\">                   <span class=\"comment\">//分配数组元素;    </span></span><br><span class=\"line\">                   <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; a.length; j++) &#123;</span><br><span class=\"line\">                       <span class=\"comment\">//得到数字的第time+1位数;  </span></span><br><span class=\"line\">                       <span class=\"keyword\">int</span> x = a[j] % (<span class=\"keyword\">int</span>) Math.pow(<span class=\"number\">10</span>, i + <span class=\"number\">1</span>) / (<span class=\"keyword\">int</span>) Math.pow(<span class=\"number\">10</span>, i);</span><br><span class=\"line\">                       ArrayList&lt;Integer&gt; queue2 = queue.get(x);</span><br><span class=\"line\">                       queue2.add(a[j]);</span><br><span class=\"line\">                       queue.set(x, queue2);</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                   <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;<span class=\"comment\">//元素计数器;    </span></span><br><span class=\"line\">                   <span class=\"comment\">//收集队列元素;    </span></span><br><span class=\"line\">                   <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">10</span>; k++) &#123;</span><br><span class=\"line\">                       <span class=\"keyword\">while</span> (queue.get(k).size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                           ArrayList&lt;Integer&gt; queue3 = queue.get(k);</span><br><span class=\"line\">                           a[count] = queue3.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">                           queue3.remove(<span class=\"number\">0</span>);</span><br><span class=\"line\">                           count++;</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"9-总结\"><a href=\"#9-总结\" class=\"headerlink\" title=\"9. 总结\"></a>9. 总结</h1><table>\n<thead>\n<tr>\n<th>排序法</th>\n<th>平均时间</th>\n<th>最小时间</th>\n<th>最大时间</th>\n<th>稳定度</th>\n<th>额外空间</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>冒泡排序</td>\n<td>O(n2)</td>\n<td>O(n)</td>\n<td>O(n2)</td>\n<td>稳定</td>\n<td>O(1)</td>\n<td>n小时较好</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>O(n2)</td>\n<td>O(n2)</td>\n<td>O(n2)</td>\n<td>不稳定</td>\n<td>O(1)</td>\n<td>n小时较好</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>O(n2)</td>\n<td>O(n)</td>\n<td>O(n2)</td>\n<td>稳定</td>\n<td>O(1)</td>\n<td>大部分已排序时较好</td>\n</tr>\n<tr>\n<td>基数排序</td>\n<td>O(logRB)</td>\n<td>O(n)</td>\n<td>O(logRB)</td>\n<td>稳定</td>\n<td>O(n)</td>\n<td>B是真数(0-9)，R是基数(个十百)</td>\n</tr>\n<tr>\n<td>Shell排序</td>\n<td>O(nlogn)</td>\n<td>-</td>\n<td>O(ns) 1&lt;s&lt;2</td>\n<td>不稳定</td>\n<td>O(1)</td>\n<td>s是所选分组</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>O(nlogn)</td>\n<td>O(n2)</td>\n<td>O(n2)</td>\n<td>不稳定</td>\n<td>O(logn)</td>\n<td>n大时较好</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>稳定</td>\n<td>O(n)</td>\n<td>要求稳定性时较好</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>不稳定</td>\n<td>O(1)</td>\n<td>n大时较好</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><code>https://www.cnblogs.com/shixiangwan/p/6724292.html</code></p>"},{"title":"Java运行时数据区","abbrlink":"9806100a","date":"2019-02-02T14:00:00.000Z","_content":"\n本文主要讲的是Java运行时数据区，包括线程私有的`程序计数器`，`虚拟机栈`，`本地方法栈`和线程共享的`堆`，`方法区`等。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n![Java运行时数据区](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/jvm/runtime-data-areas.png)\n\n**线程私有的**：`程序计数器` 、`虚拟机栈`、`本地方法栈`\n\n**线程共享的**： `堆`、`方法区 `\n\n### 1.1 程序计数器\n\n程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。\n\n**字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完。**\n\n另外，**为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。**\n\n**程序计数器主要有两个作用：**\n\n1. 字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。\n2. 在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。\n\n**注意：程序计数器是唯一一个不会出现OutOfMemoryError的内存区域，它的生命周期随着线程的创建而创建，随着线程的结束而死亡。**\n\n### 1.2 虚拟机栈\n\n**Java虚拟机栈也是线程私有的，它的生命周期和线程相同，描述的是 Java 方法执行的内存模型。**\n\n**Java 内存可以粗糙的区分为堆内存（Heap）和栈内存(Stack),其中栈就是现在说的虚拟机栈，或者说是虚拟机栈中局部变量表部分。** \n\nJava虚拟机栈是由一个个`栈帧`组成，而每个栈帧中都拥有：`局部变量表`、`操作数栈`、`动态链接`、`方法出口`。\n\n每个方法在执行时都会创建一个栈帧,每一个方法从调用到执行完成的过程就是一个栈帧在虚拟机中的入栈到出栈的过程。\n\n#### 局部变量表\n\n存放了编译时期可知的各种基本类型（Boolean，byte，char,short,int.float.long,double）、对象引用（reference类型）和returnAddress（指向了一条字节码指令的地址）。`局部变量表的创建是在方法被执行的时候,随着栈帧的创建而创建`.而且,`局部变量表的大小在编译时期就可以确定下来了`,在创建的时候只需要分配实现规定好的大小即可.此外,在`方法运行过程中局部变量表的大小是不会发生改变的`。\n\n#### 操作数栈\n\n后进先出LIFO，最大深度由编译期确定。栈帧刚建立时，操作数栈为空，执行方法操作时，操作数栈用于存放JVM从局部变量表复制的常量或者变量，提供提取，及结果入栈，也用于存放调用方法需要的参数及接受方法返回的结果。\n操作数栈可以存放一个jvm中定义的任意数据类型的值。在任意时刻，操作数栈都一个固定的栈深度，基本类型除了long、double占用两个深度，其它占用一个深度.\n\n#### 动态链接\n\n每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接。Class文件的常量池中存在有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用为参数。这些符号引用，一部分会在类加载阶段或第一次使用的时候转化为直接引用（如final、static域等），称为静态解析，另一部分将在每一次的运行期间转化为直接引用，这部分称为动态连接。\n\n#### 方法返回地址\n\n当一个方法被执行后，有两种方式退出该方法：执行引擎遇到了任意一个方法返回的字节码指令或遇到了异常，并且该异常没有在方法体内得到处理。无论采用何种退出方式，在方法退出之后，都需要返回到方法被调用的位置，程序才能继续执行。方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层方法的执行状态。一般来说，方法正常退出时，调用者的PC计数器的值就可以作为返回地址，栈帧中很可能保存了这个计数器值，而方法异常退出时，返回地址是要通过异常处理器来确定的，栈帧中一般不会保存这部分信息。\n\n方法退出的过程实际上等同于把当前栈帧出栈，因此退出时可能执行的操作有：恢复上层方法的局部变量表和操作数栈，如果有返回值，则把它压入调用者栈帧的操作数栈中，调整PC计数器的值以指向方法调用指令后面的一条指令。\n\n**Java 虚拟机栈会出现两种异常：StackOverFlowError 和 OutOfMemoryError。**\n\n- **StackOverFlowError：** 若Java虚拟机栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前Java虚拟机栈的最大深度的时候，就抛出StackOverFlowError异常。\n- **OutOfMemoryError：** 若 Java 虚拟机栈的内存大小允许动态扩展，且当线程请求栈时内存用完了，无法再动态扩展了，此时抛出OutOfMemoryError异常。\n\nJava 虚拟机栈也是线程私有的，每个线程都有各自的Java虚拟机栈，而且随着线程的创建而创建，随着线程的死亡而死亡。\n\n### 1.3 本地方法栈\n\n和虚拟机栈所发挥的作用非常相似，区别是： **虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。** 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。\n\n本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。\n\n方法执行完毕后相应的栈帧也会出栈并释放内存空间，也会出现 StackOverFlowError 和 OutOfMemoryError 两种异常。\n\n### 1.4 堆\n\nJava 虚拟机所管理的内存中最大的一块，Java 堆是所有线程共享的一块内存区域，在虚拟机启动时创建。**此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。**Java虚拟机规范中说的是：所有的对象实例以及数组都要在堆上分配内存。但是随着`JIT(just in time)编译器`的发展与`逃逸分析`技术的成熟，`栈上分配`，`标量替换`优化技术将会导致一些微妙的变化，所有对象都分配在堆上也变得不是那么绝对了。\n\nJava 堆是垃圾收集器管理的主要区域，因此也被称作`GC堆（Garbage Collected Heap）`**.从垃圾回收的角度，由于现在收集器基本都采用分代垃圾收集算法，所以Java堆还可以细分为：`新生代`和`老年代`：再细致一点有：`Eden空间`、`From Survivor空间`、`To Survivor空间`等。**进一步划分的目的是更好地回收内存，或者更快地分配内存。**\n\n### 1.5 方法区\n\n**方法区与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的`类信息`、`常量`、`静态变量`、`即时编译器编译后的代码`等数据。**\n\n**虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做 Non-Heap（非堆），目的应该是与 Java 堆区分开来。**\n\nHotSpot 虚拟机中方法区也常被称为 **“永久代”**，本质上两者并不等价。仅仅是因为 HotSpot 虚拟机设计团队用永久代来实现方法区而已，这样 HotSpot 虚拟机的垃圾收集器就可以像管理 Java 堆一样管理这部分内存了。但是这并不是一个好主意，因为这样更容易遇到内存溢出问题。\n\n**相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入方法区后就“永久存在”了。**\n\n### 1.6 常量池\n\n#### 全局字符串池\n\n全局字符串池里的内容是在类加载完成，经过验证，**准备阶段之后**在堆中生成字符串对象实例，然后将该字符串对象实例的引用值存到string pool中（记住：string pool中存的是引用值而不是具体的实例对象，具体的实例对象是在堆中开辟的一块空间存放的。）。 在HotSpot VM里实现的string pool功能的是一个StringTable类，它是一个哈希表，里面存的是驻留字符串(也就是我们常说的用双引号括起来的)的引用（而不是驻留字符串实例本身），也就是说在堆中的某些字符串实例被这个StringTable引用之后就等同被赋予了”驻留字符串”的身份。这个StringTable在每个HotSpot VM的实例只有一份，被所有的类共享。\n\n#### 静态常量池\n\n也叫`class文件常量池（class constant pool）`,Class文件中除了有类的版本，字段，方法，接口等描述信息外还有一项信息是`常量池`,用于存放编译期生成的各种`字面量`和`符号引用`，这部分内容将在`类加载后`进入方法区的`运行时常量池`。\n\n `字面量`就是我们所说的常量概念，如文本字符串、被声明为final的常量值等。\n\n `符号引用`是一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可（它与直接引用区分一下，直接引用一般是指向方法区的本地指针，相对偏移量或是一个能间接定位到目标的句柄）。一般包括下面三类常量：\n\n- 类和接口的全限定名\n- 字段的名称和描述符\n- 方法的名称和描述符\n\n#### 运行时常量池\n\n`运行时常量池`是`方法区`的一部分。Class文件中除了有类的版本，字段，方法，接口等描述信息外还有一项信息是`常量池`,用于存放编译期生成的各种`字面量`和`符号引用`，这部分内容将在`类加载后`进入方法区的`运行时常量池`。\n\n既然运行时常量池时方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出 OutOfMemoryError 异常。\n\n**JDK1.7及之后版本的 JVM 已经将运行时常量池从方法区中移了出来，在 Java 堆（Heap）中开辟了一块区域存放运行时常量池。**\n\n**JDK1.8后放在一个独立空间里面，叫做“元空间”** \n\njvm在执行某个类的时候，必须经过`加载`、`连接`、`初始化`，而连接又包括`验证`、`准备`、`解析`三个阶段。而当类加载到内存中后，jvm就会将class常量池中的内容存放到运行时常量池中，由此可知，`运行时常量池也是每个类都有一个`。在上面我也说了，`class常量池中存的是字面量和符号引用`，也就是说他们存的并不是对象的实例，而是对象的符号引用值。而经过`解析（resolve）`之后，也就是把符号引用替换为直接引用，解析的过程会去查询全局字符串池，也就是我们上面所说的StringTable，以保证运行时常量池所引用的字符串与全局字符串池中所引用的是一致的。\n\n#### 小结\n\n- 1.全局常量池在每个VM中只有一份，存放的是字符串常量的引用值。\n- 2.class常量池是在编译的时候每个class都有的，在编译阶段，存放的是常量的符号引用。\n- 3.运行时常量池是在类加载完成之后，将每个class常量池中的符号引用值转存到运行时常量池中，也就是说，每个class都有一个运行时常量池，类在解析之后，将符号引用替换成直接引用，与全局常量池中的引用值保持一致。\n\n### 1.7 直接内存\n\n直接内存并不是虚拟机运行时数据区的一部分，但是也频繁被用到，也可能导致OOM,虚拟机内存+直接内存超过物理内存时。\n\n在JDK1.4出现的NIO类中引入了一个基于Channel和Buffer的IO方式，它可以直接使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作，能在一些场合中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。\n\n### 参考\n\n《深入理解Java虚拟机》\n\n`https://blog.csdn.net/qq_26222859/article/details/73135660`","source":"_posts/jvm/jvm-runtime-area.md","raw":"---\ntitle: Java运行时数据区\ntags:\n  - JVM\ncategories:\n  - JVM\nabbrlink: 9806100a\ndate: 2019-02-02 22:00:00\n---\n\n本文主要讲的是Java运行时数据区，包括线程私有的`程序计数器`，`虚拟机栈`，`本地方法栈`和线程共享的`堆`，`方法区`等。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n![Java运行时数据区](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/jvm/runtime-data-areas.png)\n\n**线程私有的**：`程序计数器` 、`虚拟机栈`、`本地方法栈`\n\n**线程共享的**： `堆`、`方法区 `\n\n### 1.1 程序计数器\n\n程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。\n\n**字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完。**\n\n另外，**为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。**\n\n**程序计数器主要有两个作用：**\n\n1. 字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。\n2. 在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。\n\n**注意：程序计数器是唯一一个不会出现OutOfMemoryError的内存区域，它的生命周期随着线程的创建而创建，随着线程的结束而死亡。**\n\n### 1.2 虚拟机栈\n\n**Java虚拟机栈也是线程私有的，它的生命周期和线程相同，描述的是 Java 方法执行的内存模型。**\n\n**Java 内存可以粗糙的区分为堆内存（Heap）和栈内存(Stack),其中栈就是现在说的虚拟机栈，或者说是虚拟机栈中局部变量表部分。** \n\nJava虚拟机栈是由一个个`栈帧`组成，而每个栈帧中都拥有：`局部变量表`、`操作数栈`、`动态链接`、`方法出口`。\n\n每个方法在执行时都会创建一个栈帧,每一个方法从调用到执行完成的过程就是一个栈帧在虚拟机中的入栈到出栈的过程。\n\n#### 局部变量表\n\n存放了编译时期可知的各种基本类型（Boolean，byte，char,short,int.float.long,double）、对象引用（reference类型）和returnAddress（指向了一条字节码指令的地址）。`局部变量表的创建是在方法被执行的时候,随着栈帧的创建而创建`.而且,`局部变量表的大小在编译时期就可以确定下来了`,在创建的时候只需要分配实现规定好的大小即可.此外,在`方法运行过程中局部变量表的大小是不会发生改变的`。\n\n#### 操作数栈\n\n后进先出LIFO，最大深度由编译期确定。栈帧刚建立时，操作数栈为空，执行方法操作时，操作数栈用于存放JVM从局部变量表复制的常量或者变量，提供提取，及结果入栈，也用于存放调用方法需要的参数及接受方法返回的结果。\n操作数栈可以存放一个jvm中定义的任意数据类型的值。在任意时刻，操作数栈都一个固定的栈深度，基本类型除了long、double占用两个深度，其它占用一个深度.\n\n#### 动态链接\n\n每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接。Class文件的常量池中存在有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用为参数。这些符号引用，一部分会在类加载阶段或第一次使用的时候转化为直接引用（如final、static域等），称为静态解析，另一部分将在每一次的运行期间转化为直接引用，这部分称为动态连接。\n\n#### 方法返回地址\n\n当一个方法被执行后，有两种方式退出该方法：执行引擎遇到了任意一个方法返回的字节码指令或遇到了异常，并且该异常没有在方法体内得到处理。无论采用何种退出方式，在方法退出之后，都需要返回到方法被调用的位置，程序才能继续执行。方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层方法的执行状态。一般来说，方法正常退出时，调用者的PC计数器的值就可以作为返回地址，栈帧中很可能保存了这个计数器值，而方法异常退出时，返回地址是要通过异常处理器来确定的，栈帧中一般不会保存这部分信息。\n\n方法退出的过程实际上等同于把当前栈帧出栈，因此退出时可能执行的操作有：恢复上层方法的局部变量表和操作数栈，如果有返回值，则把它压入调用者栈帧的操作数栈中，调整PC计数器的值以指向方法调用指令后面的一条指令。\n\n**Java 虚拟机栈会出现两种异常：StackOverFlowError 和 OutOfMemoryError。**\n\n- **StackOverFlowError：** 若Java虚拟机栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前Java虚拟机栈的最大深度的时候，就抛出StackOverFlowError异常。\n- **OutOfMemoryError：** 若 Java 虚拟机栈的内存大小允许动态扩展，且当线程请求栈时内存用完了，无法再动态扩展了，此时抛出OutOfMemoryError异常。\n\nJava 虚拟机栈也是线程私有的，每个线程都有各自的Java虚拟机栈，而且随着线程的创建而创建，随着线程的死亡而死亡。\n\n### 1.3 本地方法栈\n\n和虚拟机栈所发挥的作用非常相似，区别是： **虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。** 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。\n\n本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。\n\n方法执行完毕后相应的栈帧也会出栈并释放内存空间，也会出现 StackOverFlowError 和 OutOfMemoryError 两种异常。\n\n### 1.4 堆\n\nJava 虚拟机所管理的内存中最大的一块，Java 堆是所有线程共享的一块内存区域，在虚拟机启动时创建。**此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。**Java虚拟机规范中说的是：所有的对象实例以及数组都要在堆上分配内存。但是随着`JIT(just in time)编译器`的发展与`逃逸分析`技术的成熟，`栈上分配`，`标量替换`优化技术将会导致一些微妙的变化，所有对象都分配在堆上也变得不是那么绝对了。\n\nJava 堆是垃圾收集器管理的主要区域，因此也被称作`GC堆（Garbage Collected Heap）`**.从垃圾回收的角度，由于现在收集器基本都采用分代垃圾收集算法，所以Java堆还可以细分为：`新生代`和`老年代`：再细致一点有：`Eden空间`、`From Survivor空间`、`To Survivor空间`等。**进一步划分的目的是更好地回收内存，或者更快地分配内存。**\n\n### 1.5 方法区\n\n**方法区与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的`类信息`、`常量`、`静态变量`、`即时编译器编译后的代码`等数据。**\n\n**虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做 Non-Heap（非堆），目的应该是与 Java 堆区分开来。**\n\nHotSpot 虚拟机中方法区也常被称为 **“永久代”**，本质上两者并不等价。仅仅是因为 HotSpot 虚拟机设计团队用永久代来实现方法区而已，这样 HotSpot 虚拟机的垃圾收集器就可以像管理 Java 堆一样管理这部分内存了。但是这并不是一个好主意，因为这样更容易遇到内存溢出问题。\n\n**相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入方法区后就“永久存在”了。**\n\n### 1.6 常量池\n\n#### 全局字符串池\n\n全局字符串池里的内容是在类加载完成，经过验证，**准备阶段之后**在堆中生成字符串对象实例，然后将该字符串对象实例的引用值存到string pool中（记住：string pool中存的是引用值而不是具体的实例对象，具体的实例对象是在堆中开辟的一块空间存放的。）。 在HotSpot VM里实现的string pool功能的是一个StringTable类，它是一个哈希表，里面存的是驻留字符串(也就是我们常说的用双引号括起来的)的引用（而不是驻留字符串实例本身），也就是说在堆中的某些字符串实例被这个StringTable引用之后就等同被赋予了”驻留字符串”的身份。这个StringTable在每个HotSpot VM的实例只有一份，被所有的类共享。\n\n#### 静态常量池\n\n也叫`class文件常量池（class constant pool）`,Class文件中除了有类的版本，字段，方法，接口等描述信息外还有一项信息是`常量池`,用于存放编译期生成的各种`字面量`和`符号引用`，这部分内容将在`类加载后`进入方法区的`运行时常量池`。\n\n `字面量`就是我们所说的常量概念，如文本字符串、被声明为final的常量值等。\n\n `符号引用`是一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可（它与直接引用区分一下，直接引用一般是指向方法区的本地指针，相对偏移量或是一个能间接定位到目标的句柄）。一般包括下面三类常量：\n\n- 类和接口的全限定名\n- 字段的名称和描述符\n- 方法的名称和描述符\n\n#### 运行时常量池\n\n`运行时常量池`是`方法区`的一部分。Class文件中除了有类的版本，字段，方法，接口等描述信息外还有一项信息是`常量池`,用于存放编译期生成的各种`字面量`和`符号引用`，这部分内容将在`类加载后`进入方法区的`运行时常量池`。\n\n既然运行时常量池时方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出 OutOfMemoryError 异常。\n\n**JDK1.7及之后版本的 JVM 已经将运行时常量池从方法区中移了出来，在 Java 堆（Heap）中开辟了一块区域存放运行时常量池。**\n\n**JDK1.8后放在一个独立空间里面，叫做“元空间”** \n\njvm在执行某个类的时候，必须经过`加载`、`连接`、`初始化`，而连接又包括`验证`、`准备`、`解析`三个阶段。而当类加载到内存中后，jvm就会将class常量池中的内容存放到运行时常量池中，由此可知，`运行时常量池也是每个类都有一个`。在上面我也说了，`class常量池中存的是字面量和符号引用`，也就是说他们存的并不是对象的实例，而是对象的符号引用值。而经过`解析（resolve）`之后，也就是把符号引用替换为直接引用，解析的过程会去查询全局字符串池，也就是我们上面所说的StringTable，以保证运行时常量池所引用的字符串与全局字符串池中所引用的是一致的。\n\n#### 小结\n\n- 1.全局常量池在每个VM中只有一份，存放的是字符串常量的引用值。\n- 2.class常量池是在编译的时候每个class都有的，在编译阶段，存放的是常量的符号引用。\n- 3.运行时常量池是在类加载完成之后，将每个class常量池中的符号引用值转存到运行时常量池中，也就是说，每个class都有一个运行时常量池，类在解析之后，将符号引用替换成直接引用，与全局常量池中的引用值保持一致。\n\n### 1.7 直接内存\n\n直接内存并不是虚拟机运行时数据区的一部分，但是也频繁被用到，也可能导致OOM,虚拟机内存+直接内存超过物理内存时。\n\n在JDK1.4出现的NIO类中引入了一个基于Channel和Buffer的IO方式，它可以直接使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作，能在一些场合中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。\n\n### 参考\n\n《深入理解Java虚拟机》\n\n`https://blog.csdn.net/qq_26222859/article/details/73135660`","slug":"jvm/jvm-runtime-area","published":1,"updated":"2019-02-07T06:41:30.278Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv4bf004t0ww4jdsiyp7x","content":"<p>本文主要讲的是Java运行时数据区，包括线程私有的<code>程序计数器</code>，<code>虚拟机栈</code>，<code>本地方法栈</code>和线程共享的<code>堆</code>，<code>方法区</code>等。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/jvm/runtime-data-areas.png\" alt=\"Java运行时数据区\"></p>\n<p><strong>线程私有的</strong>：<code>程序计数器</code> 、<code>虚拟机栈</code>、<code>本地方法栈</code></p>\n<p><strong>线程共享的</strong>： <code>堆</code>、<code>方法区</code></p>\n<h3 id=\"1-1-程序计数器\"><a href=\"#1-1-程序计数器\" class=\"headerlink\" title=\"1.1 程序计数器\"></a>1.1 程序计数器</h3><p>程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。</p>\n<p><strong>字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完。</strong></p>\n<p>另外，<strong>为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。</strong></p>\n<p><strong>程序计数器主要有两个作用：</strong></p>\n<ol>\n<li>字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。</li>\n<li>在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。</li>\n</ol>\n<p><strong>注意：程序计数器是唯一一个不会出现OutOfMemoryError的内存区域，它的生命周期随着线程的创建而创建，随着线程的结束而死亡。</strong></p>\n<h3 id=\"1-2-虚拟机栈\"><a href=\"#1-2-虚拟机栈\" class=\"headerlink\" title=\"1.2 虚拟机栈\"></a>1.2 虚拟机栈</h3><p><strong>Java虚拟机栈也是线程私有的，它的生命周期和线程相同，描述的是 Java 方法执行的内存模型。</strong></p>\n<p><strong>Java 内存可以粗糙的区分为堆内存（Heap）和栈内存(Stack),其中栈就是现在说的虚拟机栈，或者说是虚拟机栈中局部变量表部分。</strong> </p>\n<p>Java虚拟机栈是由一个个<code>栈帧</code>组成，而每个栈帧中都拥有：<code>局部变量表</code>、<code>操作数栈</code>、<code>动态链接</code>、<code>方法出口</code>。</p>\n<p>每个方法在执行时都会创建一个栈帧,每一个方法从调用到执行完成的过程就是一个栈帧在虚拟机中的入栈到出栈的过程。</p>\n<h4 id=\"局部变量表\"><a href=\"#局部变量表\" class=\"headerlink\" title=\"局部变量表\"></a>局部变量表</h4><p>存放了编译时期可知的各种基本类型（Boolean，byte，char,short,int.float.long,double）、对象引用（reference类型）和returnAddress（指向了一条字节码指令的地址）。<code>局部变量表的创建是在方法被执行的时候,随着栈帧的创建而创建</code>.而且,<code>局部变量表的大小在编译时期就可以确定下来了</code>,在创建的时候只需要分配实现规定好的大小即可.此外,在<code>方法运行过程中局部变量表的大小是不会发生改变的</code>。</p>\n<h4 id=\"操作数栈\"><a href=\"#操作数栈\" class=\"headerlink\" title=\"操作数栈\"></a>操作数栈</h4><p>后进先出LIFO，最大深度由编译期确定。栈帧刚建立时，操作数栈为空，执行方法操作时，操作数栈用于存放JVM从局部变量表复制的常量或者变量，提供提取，及结果入栈，也用于存放调用方法需要的参数及接受方法返回的结果。<br>操作数栈可以存放一个jvm中定义的任意数据类型的值。在任意时刻，操作数栈都一个固定的栈深度，基本类型除了long、double占用两个深度，其它占用一个深度.</p>\n<h4 id=\"动态链接\"><a href=\"#动态链接\" class=\"headerlink\" title=\"动态链接\"></a>动态链接</h4><p>每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接。Class文件的常量池中存在有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用为参数。这些符号引用，一部分会在类加载阶段或第一次使用的时候转化为直接引用（如final、static域等），称为静态解析，另一部分将在每一次的运行期间转化为直接引用，这部分称为动态连接。</p>\n<h4 id=\"方法返回地址\"><a href=\"#方法返回地址\" class=\"headerlink\" title=\"方法返回地址\"></a>方法返回地址</h4><p>当一个方法被执行后，有两种方式退出该方法：执行引擎遇到了任意一个方法返回的字节码指令或遇到了异常，并且该异常没有在方法体内得到处理。无论采用何种退出方式，在方法退出之后，都需要返回到方法被调用的位置，程序才能继续执行。方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层方法的执行状态。一般来说，方法正常退出时，调用者的PC计数器的值就可以作为返回地址，栈帧中很可能保存了这个计数器值，而方法异常退出时，返回地址是要通过异常处理器来确定的，栈帧中一般不会保存这部分信息。</p>\n<p>方法退出的过程实际上等同于把当前栈帧出栈，因此退出时可能执行的操作有：恢复上层方法的局部变量表和操作数栈，如果有返回值，则把它压入调用者栈帧的操作数栈中，调整PC计数器的值以指向方法调用指令后面的一条指令。</p>\n<p><strong>Java 虚拟机栈会出现两种异常：StackOverFlowError 和 OutOfMemoryError。</strong></p>\n<ul>\n<li><strong>StackOverFlowError：</strong> 若Java虚拟机栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前Java虚拟机栈的最大深度的时候，就抛出StackOverFlowError异常。</li>\n<li><strong>OutOfMemoryError：</strong> 若 Java 虚拟机栈的内存大小允许动态扩展，且当线程请求栈时内存用完了，无法再动态扩展了，此时抛出OutOfMemoryError异常。</li>\n</ul>\n<p>Java 虚拟机栈也是线程私有的，每个线程都有各自的Java虚拟机栈，而且随着线程的创建而创建，随着线程的死亡而死亡。</p>\n<h3 id=\"1-3-本地方法栈\"><a href=\"#1-3-本地方法栈\" class=\"headerlink\" title=\"1.3 本地方法栈\"></a>1.3 本地方法栈</h3><p>和虚拟机栈所发挥的作用非常相似，区别是： <strong>虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。</strong> 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。</p>\n<p>本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。</p>\n<p>方法执行完毕后相应的栈帧也会出栈并释放内存空间，也会出现 StackOverFlowError 和 OutOfMemoryError 两种异常。</p>\n<h3 id=\"1-4-堆\"><a href=\"#1-4-堆\" class=\"headerlink\" title=\"1.4 堆\"></a>1.4 堆</h3><p>Java 虚拟机所管理的内存中最大的一块，Java 堆是所有线程共享的一块内存区域，在虚拟机启动时创建。<strong>此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。</strong>Java虚拟机规范中说的是：所有的对象实例以及数组都要在堆上分配内存。但是随着<code>JIT(just in time)编译器</code>的发展与<code>逃逸分析</code>技术的成熟，<code>栈上分配</code>，<code>标量替换</code>优化技术将会导致一些微妙的变化，所有对象都分配在堆上也变得不是那么绝对了。</p>\n<p>Java 堆是垃圾收集器管理的主要区域，因此也被称作<code>GC堆（Garbage Collected Heap）</code><strong>.从垃圾回收的角度，由于现在收集器基本都采用分代垃圾收集算法，所以Java堆还可以细分为：<code>新生代</code>和<code>老年代</code>：再细致一点有：<code>Eden空间</code>、<code>From Survivor空间</code>、<code>To Survivor空间</code>等。</strong>进一步划分的目的是更好地回收内存，或者更快地分配内存。**</p>\n<h3 id=\"1-5-方法区\"><a href=\"#1-5-方法区\" class=\"headerlink\" title=\"1.5 方法区\"></a>1.5 方法区</h3><p><strong>方法区与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的<code>类信息</code>、<code>常量</code>、<code>静态变量</code>、<code>即时编译器编译后的代码</code>等数据。</strong></p>\n<p><strong>虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做 Non-Heap（非堆），目的应该是与 Java 堆区分开来。</strong></p>\n<p>HotSpot 虚拟机中方法区也常被称为 <strong>“永久代”</strong>，本质上两者并不等价。仅仅是因为 HotSpot 虚拟机设计团队用永久代来实现方法区而已，这样 HotSpot 虚拟机的垃圾收集器就可以像管理 Java 堆一样管理这部分内存了。但是这并不是一个好主意，因为这样更容易遇到内存溢出问题。</p>\n<p><strong>相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入方法区后就“永久存在”了。</strong></p>\n<h3 id=\"1-6-常量池\"><a href=\"#1-6-常量池\" class=\"headerlink\" title=\"1.6 常量池\"></a>1.6 常量池</h3><h4 id=\"全局字符串池\"><a href=\"#全局字符串池\" class=\"headerlink\" title=\"全局字符串池\"></a>全局字符串池</h4><p>全局字符串池里的内容是在类加载完成，经过验证，<strong>准备阶段之后</strong>在堆中生成字符串对象实例，然后将该字符串对象实例的引用值存到string pool中（记住：string pool中存的是引用值而不是具体的实例对象，具体的实例对象是在堆中开辟的一块空间存放的。）。 在HotSpot VM里实现的string pool功能的是一个StringTable类，它是一个哈希表，里面存的是驻留字符串(也就是我们常说的用双引号括起来的)的引用（而不是驻留字符串实例本身），也就是说在堆中的某些字符串实例被这个StringTable引用之后就等同被赋予了”驻留字符串”的身份。这个StringTable在每个HotSpot VM的实例只有一份，被所有的类共享。</p>\n<h4 id=\"静态常量池\"><a href=\"#静态常量池\" class=\"headerlink\" title=\"静态常量池\"></a>静态常量池</h4><p>也叫<code>class文件常量池（class constant pool）</code>,Class文件中除了有类的版本，字段，方法，接口等描述信息外还有一项信息是<code>常量池</code>,用于存放编译期生成的各种<code>字面量</code>和<code>符号引用</code>，这部分内容将在<code>类加载后</code>进入方法区的<code>运行时常量池</code>。</p>\n<p> <code>字面量</code>就是我们所说的常量概念，如文本字符串、被声明为final的常量值等。</p>\n<p> <code>符号引用</code>是一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可（它与直接引用区分一下，直接引用一般是指向方法区的本地指针，相对偏移量或是一个能间接定位到目标的句柄）。一般包括下面三类常量：</p>\n<ul>\n<li>类和接口的全限定名</li>\n<li>字段的名称和描述符</li>\n<li>方法的名称和描述符</li>\n</ul>\n<h4 id=\"运行时常量池\"><a href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"></a>运行时常量池</h4><p><code>运行时常量池</code>是<code>方法区</code>的一部分。Class文件中除了有类的版本，字段，方法，接口等描述信息外还有一项信息是<code>常量池</code>,用于存放编译期生成的各种<code>字面量</code>和<code>符号引用</code>，这部分内容将在<code>类加载后</code>进入方法区的<code>运行时常量池</code>。</p>\n<p>既然运行时常量池时方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出 OutOfMemoryError 异常。</p>\n<p><strong>JDK1.7及之后版本的 JVM 已经将运行时常量池从方法区中移了出来，在 Java 堆（Heap）中开辟了一块区域存放运行时常量池。</strong></p>\n<p><strong>JDK1.8后放在一个独立空间里面，叫做“元空间”</strong> </p>\n<p>jvm在执行某个类的时候，必须经过<code>加载</code>、<code>连接</code>、<code>初始化</code>，而连接又包括<code>验证</code>、<code>准备</code>、<code>解析</code>三个阶段。而当类加载到内存中后，jvm就会将class常量池中的内容存放到运行时常量池中，由此可知，<code>运行时常量池也是每个类都有一个</code>。在上面我也说了，<code>class常量池中存的是字面量和符号引用</code>，也就是说他们存的并不是对象的实例，而是对象的符号引用值。而经过<code>解析（resolve）</code>之后，也就是把符号引用替换为直接引用，解析的过程会去查询全局字符串池，也就是我们上面所说的StringTable，以保证运行时常量池所引用的字符串与全局字符串池中所引用的是一致的。</p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ul>\n<li>1.全局常量池在每个VM中只有一份，存放的是字符串常量的引用值。</li>\n<li>2.class常量池是在编译的时候每个class都有的，在编译阶段，存放的是常量的符号引用。</li>\n<li>3.运行时常量池是在类加载完成之后，将每个class常量池中的符号引用值转存到运行时常量池中，也就是说，每个class都有一个运行时常量池，类在解析之后，将符号引用替换成直接引用，与全局常量池中的引用值保持一致。</li>\n</ul>\n<h3 id=\"1-7-直接内存\"><a href=\"#1-7-直接内存\" class=\"headerlink\" title=\"1.7 直接内存\"></a>1.7 直接内存</h3><p>直接内存并不是虚拟机运行时数据区的一部分，但是也频繁被用到，也可能导致OOM,虚拟机内存+直接内存超过物理内存时。</p>\n<p>在JDK1.4出现的NIO类中引入了一个基于Channel和Buffer的IO方式，它可以直接使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作，能在一些场合中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>《深入理解Java虚拟机》</p>\n<p><code>https://blog.csdn.net/qq_26222859/article/details/73135660</code></p>\n","site":{"data":{}},"excerpt":"<p>本文主要讲的是Java运行时数据区，包括线程私有的<code>程序计数器</code>，<code>虚拟机栈</code>，<code>本地方法栈</code>和线程共享的<code>堆</code>，<code>方法区</code>等。</p>","more":"<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/jvm/runtime-data-areas.png\" alt=\"Java运行时数据区\"></p>\n<p><strong>线程私有的</strong>：<code>程序计数器</code> 、<code>虚拟机栈</code>、<code>本地方法栈</code></p>\n<p><strong>线程共享的</strong>： <code>堆</code>、<code>方法区</code></p>\n<h3 id=\"1-1-程序计数器\"><a href=\"#1-1-程序计数器\" class=\"headerlink\" title=\"1.1 程序计数器\"></a>1.1 程序计数器</h3><p>程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。</p>\n<p><strong>字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完。</strong></p>\n<p>另外，<strong>为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。</strong></p>\n<p><strong>程序计数器主要有两个作用：</strong></p>\n<ol>\n<li>字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。</li>\n<li>在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。</li>\n</ol>\n<p><strong>注意：程序计数器是唯一一个不会出现OutOfMemoryError的内存区域，它的生命周期随着线程的创建而创建，随着线程的结束而死亡。</strong></p>\n<h3 id=\"1-2-虚拟机栈\"><a href=\"#1-2-虚拟机栈\" class=\"headerlink\" title=\"1.2 虚拟机栈\"></a>1.2 虚拟机栈</h3><p><strong>Java虚拟机栈也是线程私有的，它的生命周期和线程相同，描述的是 Java 方法执行的内存模型。</strong></p>\n<p><strong>Java 内存可以粗糙的区分为堆内存（Heap）和栈内存(Stack),其中栈就是现在说的虚拟机栈，或者说是虚拟机栈中局部变量表部分。</strong> </p>\n<p>Java虚拟机栈是由一个个<code>栈帧</code>组成，而每个栈帧中都拥有：<code>局部变量表</code>、<code>操作数栈</code>、<code>动态链接</code>、<code>方法出口</code>。</p>\n<p>每个方法在执行时都会创建一个栈帧,每一个方法从调用到执行完成的过程就是一个栈帧在虚拟机中的入栈到出栈的过程。</p>\n<h4 id=\"局部变量表\"><a href=\"#局部变量表\" class=\"headerlink\" title=\"局部变量表\"></a>局部变量表</h4><p>存放了编译时期可知的各种基本类型（Boolean，byte，char,short,int.float.long,double）、对象引用（reference类型）和returnAddress（指向了一条字节码指令的地址）。<code>局部变量表的创建是在方法被执行的时候,随着栈帧的创建而创建</code>.而且,<code>局部变量表的大小在编译时期就可以确定下来了</code>,在创建的时候只需要分配实现规定好的大小即可.此外,在<code>方法运行过程中局部变量表的大小是不会发生改变的</code>。</p>\n<h4 id=\"操作数栈\"><a href=\"#操作数栈\" class=\"headerlink\" title=\"操作数栈\"></a>操作数栈</h4><p>后进先出LIFO，最大深度由编译期确定。栈帧刚建立时，操作数栈为空，执行方法操作时，操作数栈用于存放JVM从局部变量表复制的常量或者变量，提供提取，及结果入栈，也用于存放调用方法需要的参数及接受方法返回的结果。<br>操作数栈可以存放一个jvm中定义的任意数据类型的值。在任意时刻，操作数栈都一个固定的栈深度，基本类型除了long、double占用两个深度，其它占用一个深度.</p>\n<h4 id=\"动态链接\"><a href=\"#动态链接\" class=\"headerlink\" title=\"动态链接\"></a>动态链接</h4><p>每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接。Class文件的常量池中存在有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用为参数。这些符号引用，一部分会在类加载阶段或第一次使用的时候转化为直接引用（如final、static域等），称为静态解析，另一部分将在每一次的运行期间转化为直接引用，这部分称为动态连接。</p>\n<h4 id=\"方法返回地址\"><a href=\"#方法返回地址\" class=\"headerlink\" title=\"方法返回地址\"></a>方法返回地址</h4><p>当一个方法被执行后，有两种方式退出该方法：执行引擎遇到了任意一个方法返回的字节码指令或遇到了异常，并且该异常没有在方法体内得到处理。无论采用何种退出方式，在方法退出之后，都需要返回到方法被调用的位置，程序才能继续执行。方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层方法的执行状态。一般来说，方法正常退出时，调用者的PC计数器的值就可以作为返回地址，栈帧中很可能保存了这个计数器值，而方法异常退出时，返回地址是要通过异常处理器来确定的，栈帧中一般不会保存这部分信息。</p>\n<p>方法退出的过程实际上等同于把当前栈帧出栈，因此退出时可能执行的操作有：恢复上层方法的局部变量表和操作数栈，如果有返回值，则把它压入调用者栈帧的操作数栈中，调整PC计数器的值以指向方法调用指令后面的一条指令。</p>\n<p><strong>Java 虚拟机栈会出现两种异常：StackOverFlowError 和 OutOfMemoryError。</strong></p>\n<ul>\n<li><strong>StackOverFlowError：</strong> 若Java虚拟机栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前Java虚拟机栈的最大深度的时候，就抛出StackOverFlowError异常。</li>\n<li><strong>OutOfMemoryError：</strong> 若 Java 虚拟机栈的内存大小允许动态扩展，且当线程请求栈时内存用完了，无法再动态扩展了，此时抛出OutOfMemoryError异常。</li>\n</ul>\n<p>Java 虚拟机栈也是线程私有的，每个线程都有各自的Java虚拟机栈，而且随着线程的创建而创建，随着线程的死亡而死亡。</p>\n<h3 id=\"1-3-本地方法栈\"><a href=\"#1-3-本地方法栈\" class=\"headerlink\" title=\"1.3 本地方法栈\"></a>1.3 本地方法栈</h3><p>和虚拟机栈所发挥的作用非常相似，区别是： <strong>虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。</strong> 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。</p>\n<p>本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。</p>\n<p>方法执行完毕后相应的栈帧也会出栈并释放内存空间，也会出现 StackOverFlowError 和 OutOfMemoryError 两种异常。</p>\n<h3 id=\"1-4-堆\"><a href=\"#1-4-堆\" class=\"headerlink\" title=\"1.4 堆\"></a>1.4 堆</h3><p>Java 虚拟机所管理的内存中最大的一块，Java 堆是所有线程共享的一块内存区域，在虚拟机启动时创建。<strong>此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。</strong>Java虚拟机规范中说的是：所有的对象实例以及数组都要在堆上分配内存。但是随着<code>JIT(just in time)编译器</code>的发展与<code>逃逸分析</code>技术的成熟，<code>栈上分配</code>，<code>标量替换</code>优化技术将会导致一些微妙的变化，所有对象都分配在堆上也变得不是那么绝对了。</p>\n<p>Java 堆是垃圾收集器管理的主要区域，因此也被称作<code>GC堆（Garbage Collected Heap）</code><strong>.从垃圾回收的角度，由于现在收集器基本都采用分代垃圾收集算法，所以Java堆还可以细分为：<code>新生代</code>和<code>老年代</code>：再细致一点有：<code>Eden空间</code>、<code>From Survivor空间</code>、<code>To Survivor空间</code>等。</strong>进一步划分的目的是更好地回收内存，或者更快地分配内存。**</p>\n<h3 id=\"1-5-方法区\"><a href=\"#1-5-方法区\" class=\"headerlink\" title=\"1.5 方法区\"></a>1.5 方法区</h3><p><strong>方法区与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的<code>类信息</code>、<code>常量</code>、<code>静态变量</code>、<code>即时编译器编译后的代码</code>等数据。</strong></p>\n<p><strong>虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做 Non-Heap（非堆），目的应该是与 Java 堆区分开来。</strong></p>\n<p>HotSpot 虚拟机中方法区也常被称为 <strong>“永久代”</strong>，本质上两者并不等价。仅仅是因为 HotSpot 虚拟机设计团队用永久代来实现方法区而已，这样 HotSpot 虚拟机的垃圾收集器就可以像管理 Java 堆一样管理这部分内存了。但是这并不是一个好主意，因为这样更容易遇到内存溢出问题。</p>\n<p><strong>相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入方法区后就“永久存在”了。</strong></p>\n<h3 id=\"1-6-常量池\"><a href=\"#1-6-常量池\" class=\"headerlink\" title=\"1.6 常量池\"></a>1.6 常量池</h3><h4 id=\"全局字符串池\"><a href=\"#全局字符串池\" class=\"headerlink\" title=\"全局字符串池\"></a>全局字符串池</h4><p>全局字符串池里的内容是在类加载完成，经过验证，<strong>准备阶段之后</strong>在堆中生成字符串对象实例，然后将该字符串对象实例的引用值存到string pool中（记住：string pool中存的是引用值而不是具体的实例对象，具体的实例对象是在堆中开辟的一块空间存放的。）。 在HotSpot VM里实现的string pool功能的是一个StringTable类，它是一个哈希表，里面存的是驻留字符串(也就是我们常说的用双引号括起来的)的引用（而不是驻留字符串实例本身），也就是说在堆中的某些字符串实例被这个StringTable引用之后就等同被赋予了”驻留字符串”的身份。这个StringTable在每个HotSpot VM的实例只有一份，被所有的类共享。</p>\n<h4 id=\"静态常量池\"><a href=\"#静态常量池\" class=\"headerlink\" title=\"静态常量池\"></a>静态常量池</h4><p>也叫<code>class文件常量池（class constant pool）</code>,Class文件中除了有类的版本，字段，方法，接口等描述信息外还有一项信息是<code>常量池</code>,用于存放编译期生成的各种<code>字面量</code>和<code>符号引用</code>，这部分内容将在<code>类加载后</code>进入方法区的<code>运行时常量池</code>。</p>\n<p> <code>字面量</code>就是我们所说的常量概念，如文本字符串、被声明为final的常量值等。</p>\n<p> <code>符号引用</code>是一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可（它与直接引用区分一下，直接引用一般是指向方法区的本地指针，相对偏移量或是一个能间接定位到目标的句柄）。一般包括下面三类常量：</p>\n<ul>\n<li>类和接口的全限定名</li>\n<li>字段的名称和描述符</li>\n<li>方法的名称和描述符</li>\n</ul>\n<h4 id=\"运行时常量池\"><a href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"></a>运行时常量池</h4><p><code>运行时常量池</code>是<code>方法区</code>的一部分。Class文件中除了有类的版本，字段，方法，接口等描述信息外还有一项信息是<code>常量池</code>,用于存放编译期生成的各种<code>字面量</code>和<code>符号引用</code>，这部分内容将在<code>类加载后</code>进入方法区的<code>运行时常量池</code>。</p>\n<p>既然运行时常量池时方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出 OutOfMemoryError 异常。</p>\n<p><strong>JDK1.7及之后版本的 JVM 已经将运行时常量池从方法区中移了出来，在 Java 堆（Heap）中开辟了一块区域存放运行时常量池。</strong></p>\n<p><strong>JDK1.8后放在一个独立空间里面，叫做“元空间”</strong> </p>\n<p>jvm在执行某个类的时候，必须经过<code>加载</code>、<code>连接</code>、<code>初始化</code>，而连接又包括<code>验证</code>、<code>准备</code>、<code>解析</code>三个阶段。而当类加载到内存中后，jvm就会将class常量池中的内容存放到运行时常量池中，由此可知，<code>运行时常量池也是每个类都有一个</code>。在上面我也说了，<code>class常量池中存的是字面量和符号引用</code>，也就是说他们存的并不是对象的实例，而是对象的符号引用值。而经过<code>解析（resolve）</code>之后，也就是把符号引用替换为直接引用，解析的过程会去查询全局字符串池，也就是我们上面所说的StringTable，以保证运行时常量池所引用的字符串与全局字符串池中所引用的是一致的。</p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ul>\n<li>1.全局常量池在每个VM中只有一份，存放的是字符串常量的引用值。</li>\n<li>2.class常量池是在编译的时候每个class都有的，在编译阶段，存放的是常量的符号引用。</li>\n<li>3.运行时常量池是在类加载完成之后，将每个class常量池中的符号引用值转存到运行时常量池中，也就是说，每个class都有一个运行时常量池，类在解析之后，将符号引用替换成直接引用，与全局常量池中的引用值保持一致。</li>\n</ul>\n<h3 id=\"1-7-直接内存\"><a href=\"#1-7-直接内存\" class=\"headerlink\" title=\"1.7 直接内存\"></a>1.7 直接内存</h3><p>直接内存并不是虚拟机运行时数据区的一部分，但是也频繁被用到，也可能导致OOM,虚拟机内存+直接内存超过物理内存时。</p>\n<p>在JDK1.4出现的NIO类中引入了一个基于Channel和Buffer的IO方式，它可以直接使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作，能在一些场合中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>《深入理解Java虚拟机》</p>\n<p><code>https://blog.csdn.net/qq_26222859/article/details/73135660</code></p>"},{"title":"Nginx入门教程(三)---日志文件切割","abbrlink":"3ebafd31","date":"2019-03-03T14:00:00.000Z","_content":"\n本章主要对Nginx服务器的日志文件分析，包括`日志文件切割`与`cron定时任务`语法详解。\n\n<!-- more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 日志文件\n\n再看一下Nginx目录结构\n\n```nginx\n/usr/local/nginx\n\t\t\t--conf\t配置文件\n\t\t\t--html  网页文件\n\t\t\t--logs  日志文件\n\t\t\t--sbin  主要二进制文件\n```\n\n### 1.1 查看日志\n\n前面看了`conf配置文件`，这里看下`logs日志文件`;\n\n```nginx\n/usr/local/nginx/logs\n\t\t-- access.log #访问日志\n \t\t-- error.log  #错误日志\n \t\t-- nginx.pid  #存放Nginx当前进程的pid\n```\n\n`nginx.pid` 存放Nginx当前进程的pid\n\n```nginx\n[root@localhost logs]# cat nginx.pid\n98830\n[root@localhost logs]# ps aux|grep nginx\nroot      98830  0.0  0.0  20552   616 ?        Ss   09:57   0:00 nginx: master process /usr/local/nginx/sbin/nginx\nnobody    98831  0.0  0.1  23088  1636 ?        S    09:57   0:00 nginx: worker process\nroot     105254  0.0  0.0 112708   976 pts/1    R+   11:02   0:00 grep --color=auto nginx\n```\n\n`access.log` 访问日志\n\n```nginx\n[root@localhost logs]# tail -f -n 20  access.log\n\n192.168.5.199 - - [04/Mar/2019:10:02:10 +0800] \"GET / HTTP/1.1\" 200 612 \"-\" \"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36\"\n192.168.5.199 - - [04/Mar/2019:10:02:10 +0800] \"GET /favicon.ico HTTP/1.1\" 404 555 \"http://192.168.5.154/\" \"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36\"\n```\n\n### 1.2 日志分割\n\nNginx日志都会存在一个文件里，随着时间推移，这个日志文件会变得非常大，分析的时候很难操作，所以需要对日志文件进行分割，可以根据访问量来进行选择：如按照天分割、或者半天、小时等。\n\n建议使用shell脚本方式进行切割日志 。\n\n#### 1. 编写脚本\n\n脚本如下：\n\n```shell\n#!/bin/sh\n#根路径\nBASE_DIR=/usr/local/nginx\n#最开始的日志文件名\nBASE_FILE_NAME_ACCESS=access.log\nBASE_FILE_NAME_ERROR=error.log\nBASE_FILE_NAME_PID=nginx.pid\n#默认日志存放路径\nDEFAULT_PATH=$BASE_DIR/logs\n#日志备份根路径\nBASE_BAK_PATH=$BASE_DIR/datalogs\n\nBAK_PATH_ACCESS=$BASE_BAK_PATH/access\nBAK_PATH_ERROR=$BASE_BAK_PATH/error\n\n#默认日志文件路径+文件名\nDEFAULT_FILE_ACCESS=$DEFAULT_PATH/$BASE_FILE_NAME_ACCESS\nDEFAULT_FILE_ERROR=$DEFAULT_PATH/$BASE_FILE_NAME_ERROR\n#备份时间\nBAK_TIME=`/bin/date -d yesterday +%Y%m%d%H%M`\n#备份文件 路径+文件名\nBAK_FILE_ACCESS=$BAK_PATH_ACCESS/$BAK_TIME-$BASE_FILE_NAME_ACCESS\nBAK_FILE_ERROR=$BAK_PATH_ERROR/$BAK_TIME-$BASE_FILE_NAME_ERROR\n        \n# 打印一下备份文件 \necho access.log备份成功：$BAK_FILE_ACCESS\necho error.log备份成功：$BAK_FILE_ERROR\n\n#移动文件\nmv $DEFAULT_FILE_ACCESS $BAK_FILE_ACCESS\nmv $DEFAULT_FILE_ERROR $BAK_FILE_ERROR\n\n#向nginx主进程发信号重新打开日志\nkill -USR1 `cat $DEFAULT_PATH/$BASE_FILE_NAME_PID`\n\n```\n\n 其实很简单，主要步骤如下：\n\n- 1.移动日志文件：这里已经将日志文件移动到``datalogs`目录下了，但Nginx还是会继续往这里面写日志\n- 2.发送`USR1`命令：告诉Nginx把日志写到``Nginx.conf`中配置的那个文件中，这里会重新生成日志文件\n\n具体如下：\n\n- **第一步**:就是重命名日志文件，不用担心重命名后nginx找不到日志文件而丢失日志。在你未重新打开原名字的日志文件前(即执行第二步之前)，nginx还是会向你重命名的文件写日志，Linux是靠`文件描述符`而不是`文件名`定位文件。\n- **第二步**:向nginx主进程发送`USR1信号`。nginx主进程接到信号后会从配置文件中读取日志文件名称，重新打开日志文件(以配置文件中的日志名称命名)，并以工作进程的用户作为日志文件的所有者。重新打开日志文后，nginx主进程会关闭重名的日志文件并通知工作进程使用新打开的日志文件。(就不会继续写到前面备份的那个文件中了)工作进程立刻打开新的日志文件并关闭重名名的日志文件。然后你就可以处理旧的日志文件了。\n\n#### 2. 赋权\n\n```nginx\n[root@localhost sbin]# chmod 777 log.sh \n```\n\n将`log.sh`脚本设置为可执行文件\n\n#### 3. 执行\n\n设置一个定时任务用于周期性的执行该脚本\n\n`cron`是一个linux下的定时执行工具，可以在无需人工干预的情况下运行作业。\n\n```shell\nservice crond start   //启动服务\n\nservice crond stop    //关闭服务\n\nservice crond restart  //重启服务\n\nservice crond reload  //重新载入配置\n\nservice crond status  //查看服务状态 \n```\n\n**设置定时任务**：\n\n```nginx\n[root@localhost datalogs]# crontab -e\n\n*/1 * * * * sh /usr/local/nginx/sbin/log.sh\n```\n\n`*/1 * * * *`： 为定时时间 这里为了测试 是设置的每分钟执行一次；\n\n`0 2 * * * ` :每天凌晨两点执行\n\n`sh` ：为任务类型 这里是一个sh脚本\n\n`/usr/local/nginx/sbin/log.sh` ：为脚本路径\n\n#### 4. Nginx信号量\n\nNginx支持以下几种信号选项：\n\n* **TERM，INT** :  快速关闭\n* **QUIT** ：从容关闭（优雅的关闭进程,即等请求结束后再关闭)\n* **HUP** ：平滑重启，重新加载配置文件 （平滑重启，修改配置文件之后不用重启服务器。直接kill -PUT 进程号即可）\n* **USR1** ：重新读取日志文件，在切割日志时用途较大（停止写入老日志文件，打开新日志文件，之所以这样是因为老日志文件就算修改的文件名，由于inode的原因，nginx还会一直往老的日志文件写入数据） \n* **USR2** ：平滑升级可执行程序  ，nginx升级时候用                           　　　　 \n* **WINCH** ：从容关闭工作进程 \n\n## 2.cron表达式\n\n### 2.1 基本语法\n\n　cron表达式代表一个时间的集合，使用6个空格分隔的字段表示：\n\n| 字段名            | 是否必须 | 允许的值        | 允许的特定字符 |\n| ----------------- | -------- | --------------- | -------------- |\n| 秒(Seconds)       | 是       | 0-59            | * / , -        |\n| 分(Minute)        | 是       | 0-59            | * / , -        |\n| 时(Hours)         | 是       | 0-23            | * / , -        |\n| 日(Day of month)  | 是       | 1-31            | * / , - ?      |\n| 月(Month)         | 是       | 1-12 或 JAN-DEC | * / , -        |\n| 星期(Day of week) | 否       | 0-6 或 SUM-SAT  | * / , - ?      |\n\n注：月(Month)和星期(Day of week)字段的值不区分大小写，如：SUN、Sun 和 sun 是一样的。 \n\n**星期字段没提供相当于`*`**\n\n**一般只需要写5位就行了。即 `分 时 日 月 周`**\n\n```java\n # ┌───────────── min (0 - 59)\n # │ ┌────────────── hour (0 - 23)\n # │ │ ┌─────────────── day of month (1 - 31)\n # │ │ │ ┌──────────────── month (1 - 12)\n # │ │ │ │ ┌───────────────── day of week (0 - 6) (0 to 6 are Sunday to\n # │ │ │ │ │                  Saturday, or use names; 7 is also Sunday)\n # │ │ │ │ │\n # │ │ │ │ │\n # * * * * *  command to execute\n```\n\n### 2.2 特定字符\n\n- **星号(*)**:表示 cron 表达式能匹配该字段的所有值。如在第2个字段使用星号(hour)，表示每小时\n- **斜线(/)**:表示增长间隔，如第1个字段(minutes) 值是 `3/1`，表示每小时的第3分钟开始执行一次，之后每隔1分钟执行一次（1,2,3,4....59都执行一次）\n- **逗号(,)**:用于枚举值，如第6个字段值是 MON,WED,FRI，表示 星期一、三、五 执行。\n- **连字号(-)**:表示一个范围，如第3个字段的值为 9-17 表示 9am 到 5pm 之间每个小时（包括9和17）\n- **问号(?)**:只用于 日(Day of month) 和 星期(Day of week)，表示不指定值，可以用于代替 *\n\n## 3. 参考\n\n`https://www.cnblogs.com/crazylqy/p/6891929.html`\n\n`http://www.runoob.com/linux/nginx-install-setup.html`","source":"_posts/nginx/three-logs.md","raw":"---\ntitle: Nginx入门教程(三)---日志文件切割\ntags:\n  - Nginx\ncategories:\n  - Nginx\nabbrlink: 3ebafd31\ndate: 2019-03-03 22:00:00\n---\n\n本章主要对Nginx服务器的日志文件分析，包括`日志文件切割`与`cron定时任务`语法详解。\n\n<!-- more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 日志文件\n\n再看一下Nginx目录结构\n\n```nginx\n/usr/local/nginx\n\t\t\t--conf\t配置文件\n\t\t\t--html  网页文件\n\t\t\t--logs  日志文件\n\t\t\t--sbin  主要二进制文件\n```\n\n### 1.1 查看日志\n\n前面看了`conf配置文件`，这里看下`logs日志文件`;\n\n```nginx\n/usr/local/nginx/logs\n\t\t-- access.log #访问日志\n \t\t-- error.log  #错误日志\n \t\t-- nginx.pid  #存放Nginx当前进程的pid\n```\n\n`nginx.pid` 存放Nginx当前进程的pid\n\n```nginx\n[root@localhost logs]# cat nginx.pid\n98830\n[root@localhost logs]# ps aux|grep nginx\nroot      98830  0.0  0.0  20552   616 ?        Ss   09:57   0:00 nginx: master process /usr/local/nginx/sbin/nginx\nnobody    98831  0.0  0.1  23088  1636 ?        S    09:57   0:00 nginx: worker process\nroot     105254  0.0  0.0 112708   976 pts/1    R+   11:02   0:00 grep --color=auto nginx\n```\n\n`access.log` 访问日志\n\n```nginx\n[root@localhost logs]# tail -f -n 20  access.log\n\n192.168.5.199 - - [04/Mar/2019:10:02:10 +0800] \"GET / HTTP/1.1\" 200 612 \"-\" \"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36\"\n192.168.5.199 - - [04/Mar/2019:10:02:10 +0800] \"GET /favicon.ico HTTP/1.1\" 404 555 \"http://192.168.5.154/\" \"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36\"\n```\n\n### 1.2 日志分割\n\nNginx日志都会存在一个文件里，随着时间推移，这个日志文件会变得非常大，分析的时候很难操作，所以需要对日志文件进行分割，可以根据访问量来进行选择：如按照天分割、或者半天、小时等。\n\n建议使用shell脚本方式进行切割日志 。\n\n#### 1. 编写脚本\n\n脚本如下：\n\n```shell\n#!/bin/sh\n#根路径\nBASE_DIR=/usr/local/nginx\n#最开始的日志文件名\nBASE_FILE_NAME_ACCESS=access.log\nBASE_FILE_NAME_ERROR=error.log\nBASE_FILE_NAME_PID=nginx.pid\n#默认日志存放路径\nDEFAULT_PATH=$BASE_DIR/logs\n#日志备份根路径\nBASE_BAK_PATH=$BASE_DIR/datalogs\n\nBAK_PATH_ACCESS=$BASE_BAK_PATH/access\nBAK_PATH_ERROR=$BASE_BAK_PATH/error\n\n#默认日志文件路径+文件名\nDEFAULT_FILE_ACCESS=$DEFAULT_PATH/$BASE_FILE_NAME_ACCESS\nDEFAULT_FILE_ERROR=$DEFAULT_PATH/$BASE_FILE_NAME_ERROR\n#备份时间\nBAK_TIME=`/bin/date -d yesterday +%Y%m%d%H%M`\n#备份文件 路径+文件名\nBAK_FILE_ACCESS=$BAK_PATH_ACCESS/$BAK_TIME-$BASE_FILE_NAME_ACCESS\nBAK_FILE_ERROR=$BAK_PATH_ERROR/$BAK_TIME-$BASE_FILE_NAME_ERROR\n        \n# 打印一下备份文件 \necho access.log备份成功：$BAK_FILE_ACCESS\necho error.log备份成功：$BAK_FILE_ERROR\n\n#移动文件\nmv $DEFAULT_FILE_ACCESS $BAK_FILE_ACCESS\nmv $DEFAULT_FILE_ERROR $BAK_FILE_ERROR\n\n#向nginx主进程发信号重新打开日志\nkill -USR1 `cat $DEFAULT_PATH/$BASE_FILE_NAME_PID`\n\n```\n\n 其实很简单，主要步骤如下：\n\n- 1.移动日志文件：这里已经将日志文件移动到``datalogs`目录下了，但Nginx还是会继续往这里面写日志\n- 2.发送`USR1`命令：告诉Nginx把日志写到``Nginx.conf`中配置的那个文件中，这里会重新生成日志文件\n\n具体如下：\n\n- **第一步**:就是重命名日志文件，不用担心重命名后nginx找不到日志文件而丢失日志。在你未重新打开原名字的日志文件前(即执行第二步之前)，nginx还是会向你重命名的文件写日志，Linux是靠`文件描述符`而不是`文件名`定位文件。\n- **第二步**:向nginx主进程发送`USR1信号`。nginx主进程接到信号后会从配置文件中读取日志文件名称，重新打开日志文件(以配置文件中的日志名称命名)，并以工作进程的用户作为日志文件的所有者。重新打开日志文后，nginx主进程会关闭重名的日志文件并通知工作进程使用新打开的日志文件。(就不会继续写到前面备份的那个文件中了)工作进程立刻打开新的日志文件并关闭重名名的日志文件。然后你就可以处理旧的日志文件了。\n\n#### 2. 赋权\n\n```nginx\n[root@localhost sbin]# chmod 777 log.sh \n```\n\n将`log.sh`脚本设置为可执行文件\n\n#### 3. 执行\n\n设置一个定时任务用于周期性的执行该脚本\n\n`cron`是一个linux下的定时执行工具，可以在无需人工干预的情况下运行作业。\n\n```shell\nservice crond start   //启动服务\n\nservice crond stop    //关闭服务\n\nservice crond restart  //重启服务\n\nservice crond reload  //重新载入配置\n\nservice crond status  //查看服务状态 \n```\n\n**设置定时任务**：\n\n```nginx\n[root@localhost datalogs]# crontab -e\n\n*/1 * * * * sh /usr/local/nginx/sbin/log.sh\n```\n\n`*/1 * * * *`： 为定时时间 这里为了测试 是设置的每分钟执行一次；\n\n`0 2 * * * ` :每天凌晨两点执行\n\n`sh` ：为任务类型 这里是一个sh脚本\n\n`/usr/local/nginx/sbin/log.sh` ：为脚本路径\n\n#### 4. Nginx信号量\n\nNginx支持以下几种信号选项：\n\n* **TERM，INT** :  快速关闭\n* **QUIT** ：从容关闭（优雅的关闭进程,即等请求结束后再关闭)\n* **HUP** ：平滑重启，重新加载配置文件 （平滑重启，修改配置文件之后不用重启服务器。直接kill -PUT 进程号即可）\n* **USR1** ：重新读取日志文件，在切割日志时用途较大（停止写入老日志文件，打开新日志文件，之所以这样是因为老日志文件就算修改的文件名，由于inode的原因，nginx还会一直往老的日志文件写入数据） \n* **USR2** ：平滑升级可执行程序  ，nginx升级时候用                           　　　　 \n* **WINCH** ：从容关闭工作进程 \n\n## 2.cron表达式\n\n### 2.1 基本语法\n\n　cron表达式代表一个时间的集合，使用6个空格分隔的字段表示：\n\n| 字段名            | 是否必须 | 允许的值        | 允许的特定字符 |\n| ----------------- | -------- | --------------- | -------------- |\n| 秒(Seconds)       | 是       | 0-59            | * / , -        |\n| 分(Minute)        | 是       | 0-59            | * / , -        |\n| 时(Hours)         | 是       | 0-23            | * / , -        |\n| 日(Day of month)  | 是       | 1-31            | * / , - ?      |\n| 月(Month)         | 是       | 1-12 或 JAN-DEC | * / , -        |\n| 星期(Day of week) | 否       | 0-6 或 SUM-SAT  | * / , - ?      |\n\n注：月(Month)和星期(Day of week)字段的值不区分大小写，如：SUN、Sun 和 sun 是一样的。 \n\n**星期字段没提供相当于`*`**\n\n**一般只需要写5位就行了。即 `分 时 日 月 周`**\n\n```java\n # ┌───────────── min (0 - 59)\n # │ ┌────────────── hour (0 - 23)\n # │ │ ┌─────────────── day of month (1 - 31)\n # │ │ │ ┌──────────────── month (1 - 12)\n # │ │ │ │ ┌───────────────── day of week (0 - 6) (0 to 6 are Sunday to\n # │ │ │ │ │                  Saturday, or use names; 7 is also Sunday)\n # │ │ │ │ │\n # │ │ │ │ │\n # * * * * *  command to execute\n```\n\n### 2.2 特定字符\n\n- **星号(*)**:表示 cron 表达式能匹配该字段的所有值。如在第2个字段使用星号(hour)，表示每小时\n- **斜线(/)**:表示增长间隔，如第1个字段(minutes) 值是 `3/1`，表示每小时的第3分钟开始执行一次，之后每隔1分钟执行一次（1,2,3,4....59都执行一次）\n- **逗号(,)**:用于枚举值，如第6个字段值是 MON,WED,FRI，表示 星期一、三、五 执行。\n- **连字号(-)**:表示一个范围，如第3个字段的值为 9-17 表示 9am 到 5pm 之间每个小时（包括9和17）\n- **问号(?)**:只用于 日(Day of month) 和 星期(Day of week)，表示不指定值，可以用于代替 *\n\n## 3. 参考\n\n`https://www.cnblogs.com/crazylqy/p/6891929.html`\n\n`http://www.runoob.com/linux/nginx-install-setup.html`","slug":"nginx/three-logs","published":1,"updated":"2019-03-04T14:54:12.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv4bj004w0ww432z13ks3","content":"<p>本章主要对Nginx服务器的日志文件分析，包括<code>日志文件切割</code>与<code>cron定时任务</code>语法详解。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-日志文件\"><a href=\"#1-日志文件\" class=\"headerlink\" title=\"1. 日志文件\"></a>1. 日志文件</h2><p>再看一下Nginx目录结构</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/nginx</span><br><span class=\"line\">\t\t\t--conf\t配置文件</span><br><span class=\"line\">\t\t\t--html  网页文件</span><br><span class=\"line\">\t\t\t--logs  日志文件</span><br><span class=\"line\">\t\t\t--sbin  主要二进制文件</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-1-查看日志\"><a href=\"#1-1-查看日志\" class=\"headerlink\" title=\"1.1 查看日志\"></a>1.1 查看日志</h3><p>前面看了<code>conf配置文件</code>，这里看下<code>logs日志文件</code>;</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/nginx/logs</span><br><span class=\"line\">\t\t-- access.log #访问日志</span><br><span class=\"line\"> \t\t-- error.log  #错误日志</span><br><span class=\"line\"> \t\t-- nginx.pid  #存放Nginx当前进程的pid</span><br></pre></td></tr></table></figure>\n<p><code>nginx.pid</code> 存放Nginx当前进程的pid</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost logs]# cat nginx.pid</span><br><span class=\"line\">98830</span><br><span class=\"line\">[root@localhost logs]# ps aux|grep nginx</span><br><span class=\"line\"><span class=\"attribute\">root</span>      <span class=\"number\">98830</span>  <span class=\"number\">0</span>.<span class=\"number\">0</span>  <span class=\"number\">0</span>.<span class=\"number\">0</span>  <span class=\"number\">20552</span>   <span class=\"number\">616</span> ?        Ss   <span class=\"number\">09</span>:<span class=\"number\">57</span>   <span class=\"number\">0</span>:<span class=\"number\">00</span> nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nobody    <span class=\"number\">98831</span>  <span class=\"number\">0</span>.<span class=\"number\">0</span>  <span class=\"number\">0</span>.<span class=\"number\">1</span>  <span class=\"number\">23088</span>  <span class=\"number\">1636</span> ?        S    <span class=\"number\">09</span>:<span class=\"number\">57</span>   <span class=\"number\">0</span>:<span class=\"number\">00</span> nginx: worker process</span><br><span class=\"line\">root     <span class=\"number\">105254</span>  <span class=\"number\">0</span>.<span class=\"number\">0</span>  <span class=\"number\">0</span>.<span class=\"number\">0</span> <span class=\"number\">112708</span>   <span class=\"number\">976</span> pts/<span class=\"number\">1</span>    R+   <span class=\"number\">11</span>:<span class=\"number\">02</span>   <span class=\"number\">0</span>:<span class=\"number\">00</span> grep --color=auto nginx</span><br></pre></td></tr></table></figure>\n<p><code>access.log</code> 访问日志</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost logs]# tail -f -n 20  access.log</span><br><span class=\"line\"></span><br><span class=\"line\">192.168.5.199 - - [04/Mar/2019:10:02:10 +0800] \"GET / HTTP/1.1\" 200 612 \"-\" \"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36\"</span><br><span class=\"line\">192.168.5.199 - - [04/Mar/2019:10:02:10 +0800] \"GET /favicon.ico HTTP/1.1\" 404 555 \"http://192.168.5.154/\" \"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-日志分割\"><a href=\"#1-2-日志分割\" class=\"headerlink\" title=\"1.2 日志分割\"></a>1.2 日志分割</h3><p>Nginx日志都会存在一个文件里，随着时间推移，这个日志文件会变得非常大，分析的时候很难操作，所以需要对日志文件进行分割，可以根据访问量来进行选择：如按照天分割、或者半天、小时等。</p>\n<p>建议使用shell脚本方式进行切割日志 。</p>\n<h4 id=\"1-编写脚本\"><a href=\"#1-编写脚本\" class=\"headerlink\" title=\"1. 编写脚本\"></a>1. 编写脚本</h4><p>脚本如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>!/bin/sh</span><br><span class=\"line\"><span class=\"meta\">#</span>根路径</span><br><span class=\"line\">BASE_DIR=/usr/local/nginx</span><br><span class=\"line\"><span class=\"meta\">#</span>最开始的日志文件名</span><br><span class=\"line\">BASE_FILE_NAME_ACCESS=access.log</span><br><span class=\"line\">BASE_FILE_NAME_ERROR=error.log</span><br><span class=\"line\">BASE_FILE_NAME_PID=nginx.pid</span><br><span class=\"line\"><span class=\"meta\">#</span>默认日志存放路径</span><br><span class=\"line\">DEFAULT_PATH=$BASE_DIR/logs</span><br><span class=\"line\"><span class=\"meta\">#</span>日志备份根路径</span><br><span class=\"line\">BASE_BAK_PATH=$BASE_DIR/datalogs</span><br><span class=\"line\"></span><br><span class=\"line\">BAK_PATH_ACCESS=$BASE_BAK_PATH/access</span><br><span class=\"line\">BAK_PATH_ERROR=$BASE_BAK_PATH/error</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span>默认日志文件路径+文件名</span><br><span class=\"line\">DEFAULT_FILE_ACCESS=$DEFAULT_PATH/$BASE_FILE_NAME_ACCESS</span><br><span class=\"line\">DEFAULT_FILE_ERROR=$DEFAULT_PATH/$BASE_FILE_NAME_ERROR</span><br><span class=\"line\"><span class=\"meta\">#</span>备份时间</span><br><span class=\"line\">BAK_TIME=`/bin/date -d yesterday +%Y%m%d%H%M`</span><br><span class=\"line\"><span class=\"meta\">#</span>备份文件 路径+文件名</span><br><span class=\"line\">BAK_FILE_ACCESS=$BAK_PATH_ACCESS/$BAK_TIME-$BASE_FILE_NAME_ACCESS</span><br><span class=\"line\">BAK_FILE_ERROR=$BAK_PATH_ERROR/$BAK_TIME-$BASE_FILE_NAME_ERROR</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"meta\">#</span> 打印一下备份文件 </span><br><span class=\"line\">echo access.log备份成功：$BAK_FILE_ACCESS</span><br><span class=\"line\">echo error.log备份成功：$BAK_FILE_ERROR</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span>移动文件</span><br><span class=\"line\">mv $DEFAULT_FILE_ACCESS $BAK_FILE_ACCESS</span><br><span class=\"line\">mv $DEFAULT_FILE_ERROR $BAK_FILE_ERROR</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span>向nginx主进程发信号重新打开日志</span><br><span class=\"line\">kill -USR1 `cat $DEFAULT_PATH/$BASE_FILE_NAME_PID`</span><br></pre></td></tr></table></figure>\n<p> 其实很简单，主要步骤如下：</p>\n<ul>\n<li>1.移动日志文件：这里已经将日志文件移动到<code></code>datalogs`目录下了，但Nginx还是会继续往这里面写日志</li>\n<li>2.发送<code>USR1</code>命令：告诉Nginx把日志写到<code></code>Nginx.conf`中配置的那个文件中，这里会重新生成日志文件</li>\n</ul>\n<p>具体如下：</p>\n<ul>\n<li><strong>第一步</strong>:就是重命名日志文件，不用担心重命名后nginx找不到日志文件而丢失日志。在你未重新打开原名字的日志文件前(即执行第二步之前)，nginx还是会向你重命名的文件写日志，Linux是靠<code>文件描述符</code>而不是<code>文件名</code>定位文件。</li>\n<li><strong>第二步</strong>:向nginx主进程发送<code>USR1信号</code>。nginx主进程接到信号后会从配置文件中读取日志文件名称，重新打开日志文件(以配置文件中的日志名称命名)，并以工作进程的用户作为日志文件的所有者。重新打开日志文后，nginx主进程会关闭重名的日志文件并通知工作进程使用新打开的日志文件。(就不会继续写到前面备份的那个文件中了)工作进程立刻打开新的日志文件并关闭重名名的日志文件。然后你就可以处理旧的日志文件了。</li>\n</ul>\n<h4 id=\"2-赋权\"><a href=\"#2-赋权\" class=\"headerlink\" title=\"2. 赋权\"></a>2. 赋权</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost sbin]# chmod 777 log.sh</span><br></pre></td></tr></table></figure>\n<p>将<code>log.sh</code>脚本设置为可执行文件</p>\n<h4 id=\"3-执行\"><a href=\"#3-执行\" class=\"headerlink\" title=\"3. 执行\"></a>3. 执行</h4><p>设置一个定时任务用于周期性的执行该脚本</p>\n<p><code>cron</code>是一个linux下的定时执行工具，可以在无需人工干预的情况下运行作业。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service crond start   //启动服务</span><br><span class=\"line\"></span><br><span class=\"line\">service crond stop    //关闭服务</span><br><span class=\"line\"></span><br><span class=\"line\">service crond restart  //重启服务</span><br><span class=\"line\"></span><br><span class=\"line\">service crond reload  //重新载入配置</span><br><span class=\"line\"></span><br><span class=\"line\">service crond status  //查看服务状态</span><br></pre></td></tr></table></figure>\n<p><strong>设置定时任务</strong>：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost datalogs]# crontab -e</span><br><span class=\"line\"></span><br><span class=\"line\">*/1 * * * * sh /usr/local/nginx/sbin/log.sh</span><br></pre></td></tr></table></figure>\n<p><code>*/1 * * * *</code>： 为定时时间 这里为了测试 是设置的每分钟执行一次；</p>\n<p><code>0 2 * * *</code> :每天凌晨两点执行</p>\n<p><code>sh</code> ：为任务类型 这里是一个sh脚本</p>\n<p><code>/usr/local/nginx/sbin/log.sh</code> ：为脚本路径</p>\n<h4 id=\"4-Nginx信号量\"><a href=\"#4-Nginx信号量\" class=\"headerlink\" title=\"4. Nginx信号量\"></a>4. Nginx信号量</h4><p>Nginx支持以下几种信号选项：</p>\n<ul>\n<li><strong>TERM，INT</strong> :  快速关闭</li>\n<li><strong>QUIT</strong> ：从容关闭（优雅的关闭进程,即等请求结束后再关闭)</li>\n<li><strong>HUP</strong> ：平滑重启，重新加载配置文件 （平滑重启，修改配置文件之后不用重启服务器。直接kill -PUT 进程号即可）</li>\n<li><strong>USR1</strong> ：重新读取日志文件，在切割日志时用途较大（停止写入老日志文件，打开新日志文件，之所以这样是因为老日志文件就算修改的文件名，由于inode的原因，nginx还会一直往老的日志文件写入数据） </li>\n<li><strong>USR2</strong> ：平滑升级可执行程序  ，nginx升级时候用                           　　　　 </li>\n<li><strong>WINCH</strong> ：从容关闭工作进程 </li>\n</ul>\n<h2 id=\"2-cron表达式\"><a href=\"#2-cron表达式\" class=\"headerlink\" title=\"2.cron表达式\"></a>2.cron表达式</h2><h3 id=\"2-1-基本语法\"><a href=\"#2-1-基本语法\" class=\"headerlink\" title=\"2.1 基本语法\"></a>2.1 基本语法</h3><p>　cron表达式代表一个时间的集合，使用6个空格分隔的字段表示：</p>\n<table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>是否必须</th>\n<th>允许的值</th>\n<th>允许的特定字符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>秒(Seconds)</td>\n<td>是</td>\n<td>0-59</td>\n<td>* / , -</td>\n</tr>\n<tr>\n<td>分(Minute)</td>\n<td>是</td>\n<td>0-59</td>\n<td>* / , -</td>\n</tr>\n<tr>\n<td>时(Hours)</td>\n<td>是</td>\n<td>0-23</td>\n<td>* / , -</td>\n</tr>\n<tr>\n<td>日(Day of month)</td>\n<td>是</td>\n<td>1-31</td>\n<td>* / , - ?</td>\n</tr>\n<tr>\n<td>月(Month)</td>\n<td>是</td>\n<td>1-12 或 JAN-DEC</td>\n<td>* / , -</td>\n</tr>\n<tr>\n<td>星期(Day of week)</td>\n<td>否</td>\n<td>0-6 或 SUM-SAT</td>\n<td>* / , - ?</td>\n</tr>\n</tbody>\n</table>\n<p>注：月(Month)和星期(Day of week)字段的值不区分大小写，如：SUN、Sun 和 sun 是一样的。 </p>\n<p><strong>星期字段没提供相当于<code>*</code></strong></p>\n<p><strong>一般只需要写5位就行了。即 <code>分 时 日 月 周</code></strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ┌───────────── min (0 - 59)</span><br><span class=\"line\"># │ ┌────────────── hour (0 - 23)</span><br><span class=\"line\"># │ │ ┌─────────────── day of month (1 - 31)</span><br><span class=\"line\"># │ │ │ ┌──────────────── month (1 - 12)</span><br><span class=\"line\"># │ │ │ │ ┌───────────────── day of week (0 - 6) (0 to 6 are Sunday to</span><br><span class=\"line\"># │ │ │ │ │                  Saturday, or use names; 7 is also Sunday)</span><br><span class=\"line\"># │ │ │ │ │</span><br><span class=\"line\"># │ │ │ │ │</span><br><span class=\"line\"># * * * * *  command to execute</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-特定字符\"><a href=\"#2-2-特定字符\" class=\"headerlink\" title=\"2.2 特定字符\"></a>2.2 特定字符</h3><ul>\n<li><strong>星号(*)</strong>:表示 cron 表达式能匹配该字段的所有值。如在第2个字段使用星号(hour)，表示每小时</li>\n<li><strong>斜线(/)</strong>:表示增长间隔，如第1个字段(minutes) 值是 <code>3/1</code>，表示每小时的第3分钟开始执行一次，之后每隔1分钟执行一次（1,2,3,4….59都执行一次）</li>\n<li><strong>逗号(,)</strong>:用于枚举值，如第6个字段值是 MON,WED,FRI，表示 星期一、三、五 执行。</li>\n<li><strong>连字号(-)</strong>:表示一个范围，如第3个字段的值为 9-17 表示 9am 到 5pm 之间每个小时（包括9和17）</li>\n<li><strong>问号(?)</strong>:只用于 日(Day of month) 和 星期(Day of week)，表示不指定值，可以用于代替 *</li>\n</ul>\n<h2 id=\"3-参考\"><a href=\"#3-参考\" class=\"headerlink\" title=\"3. 参考\"></a>3. 参考</h2><p><code>https://www.cnblogs.com/crazylqy/p/6891929.html</code></p>\n<p><code>http://www.runoob.com/linux/nginx-install-setup.html</code></p>\n","site":{"data":{}},"excerpt":"<p>本章主要对Nginx服务器的日志文件分析，包括<code>日志文件切割</code>与<code>cron定时任务</code>语法详解。</p>","more":"<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-日志文件\"><a href=\"#1-日志文件\" class=\"headerlink\" title=\"1. 日志文件\"></a>1. 日志文件</h2><p>再看一下Nginx目录结构</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/nginx</span><br><span class=\"line\">\t\t\t--conf\t配置文件</span><br><span class=\"line\">\t\t\t--html  网页文件</span><br><span class=\"line\">\t\t\t--logs  日志文件</span><br><span class=\"line\">\t\t\t--sbin  主要二进制文件</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-1-查看日志\"><a href=\"#1-1-查看日志\" class=\"headerlink\" title=\"1.1 查看日志\"></a>1.1 查看日志</h3><p>前面看了<code>conf配置文件</code>，这里看下<code>logs日志文件</code>;</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/nginx/logs</span><br><span class=\"line\">\t\t-- access.log #访问日志</span><br><span class=\"line\"> \t\t-- error.log  #错误日志</span><br><span class=\"line\"> \t\t-- nginx.pid  #存放Nginx当前进程的pid</span><br></pre></td></tr></table></figure>\n<p><code>nginx.pid</code> 存放Nginx当前进程的pid</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost logs]# cat nginx.pid</span><br><span class=\"line\">98830</span><br><span class=\"line\">[root@localhost logs]# ps aux|grep nginx</span><br><span class=\"line\"><span class=\"attribute\">root</span>      <span class=\"number\">98830</span>  <span class=\"number\">0</span>.<span class=\"number\">0</span>  <span class=\"number\">0</span>.<span class=\"number\">0</span>  <span class=\"number\">20552</span>   <span class=\"number\">616</span> ?        Ss   <span class=\"number\">09</span>:<span class=\"number\">57</span>   <span class=\"number\">0</span>:<span class=\"number\">00</span> nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nobody    <span class=\"number\">98831</span>  <span class=\"number\">0</span>.<span class=\"number\">0</span>  <span class=\"number\">0</span>.<span class=\"number\">1</span>  <span class=\"number\">23088</span>  <span class=\"number\">1636</span> ?        S    <span class=\"number\">09</span>:<span class=\"number\">57</span>   <span class=\"number\">0</span>:<span class=\"number\">00</span> nginx: worker process</span><br><span class=\"line\">root     <span class=\"number\">105254</span>  <span class=\"number\">0</span>.<span class=\"number\">0</span>  <span class=\"number\">0</span>.<span class=\"number\">0</span> <span class=\"number\">112708</span>   <span class=\"number\">976</span> pts/<span class=\"number\">1</span>    R+   <span class=\"number\">11</span>:<span class=\"number\">02</span>   <span class=\"number\">0</span>:<span class=\"number\">00</span> grep --color=auto nginx</span><br></pre></td></tr></table></figure>\n<p><code>access.log</code> 访问日志</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost logs]# tail -f -n 20  access.log</span><br><span class=\"line\"></span><br><span class=\"line\">192.168.5.199 - - [04/Mar/2019:10:02:10 +0800] \"GET / HTTP/1.1\" 200 612 \"-\" \"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36\"</span><br><span class=\"line\">192.168.5.199 - - [04/Mar/2019:10:02:10 +0800] \"GET /favicon.ico HTTP/1.1\" 404 555 \"http://192.168.5.154/\" \"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-日志分割\"><a href=\"#1-2-日志分割\" class=\"headerlink\" title=\"1.2 日志分割\"></a>1.2 日志分割</h3><p>Nginx日志都会存在一个文件里，随着时间推移，这个日志文件会变得非常大，分析的时候很难操作，所以需要对日志文件进行分割，可以根据访问量来进行选择：如按照天分割、或者半天、小时等。</p>\n<p>建议使用shell脚本方式进行切割日志 。</p>\n<h4 id=\"1-编写脚本\"><a href=\"#1-编写脚本\" class=\"headerlink\" title=\"1. 编写脚本\"></a>1. 编写脚本</h4><p>脚本如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>!/bin/sh</span><br><span class=\"line\"><span class=\"meta\">#</span>根路径</span><br><span class=\"line\">BASE_DIR=/usr/local/nginx</span><br><span class=\"line\"><span class=\"meta\">#</span>最开始的日志文件名</span><br><span class=\"line\">BASE_FILE_NAME_ACCESS=access.log</span><br><span class=\"line\">BASE_FILE_NAME_ERROR=error.log</span><br><span class=\"line\">BASE_FILE_NAME_PID=nginx.pid</span><br><span class=\"line\"><span class=\"meta\">#</span>默认日志存放路径</span><br><span class=\"line\">DEFAULT_PATH=$BASE_DIR/logs</span><br><span class=\"line\"><span class=\"meta\">#</span>日志备份根路径</span><br><span class=\"line\">BASE_BAK_PATH=$BASE_DIR/datalogs</span><br><span class=\"line\"></span><br><span class=\"line\">BAK_PATH_ACCESS=$BASE_BAK_PATH/access</span><br><span class=\"line\">BAK_PATH_ERROR=$BASE_BAK_PATH/error</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span>默认日志文件路径+文件名</span><br><span class=\"line\">DEFAULT_FILE_ACCESS=$DEFAULT_PATH/$BASE_FILE_NAME_ACCESS</span><br><span class=\"line\">DEFAULT_FILE_ERROR=$DEFAULT_PATH/$BASE_FILE_NAME_ERROR</span><br><span class=\"line\"><span class=\"meta\">#</span>备份时间</span><br><span class=\"line\">BAK_TIME=`/bin/date -d yesterday +%Y%m%d%H%M`</span><br><span class=\"line\"><span class=\"meta\">#</span>备份文件 路径+文件名</span><br><span class=\"line\">BAK_FILE_ACCESS=$BAK_PATH_ACCESS/$BAK_TIME-$BASE_FILE_NAME_ACCESS</span><br><span class=\"line\">BAK_FILE_ERROR=$BAK_PATH_ERROR/$BAK_TIME-$BASE_FILE_NAME_ERROR</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"meta\">#</span> 打印一下备份文件 </span><br><span class=\"line\">echo access.log备份成功：$BAK_FILE_ACCESS</span><br><span class=\"line\">echo error.log备份成功：$BAK_FILE_ERROR</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span>移动文件</span><br><span class=\"line\">mv $DEFAULT_FILE_ACCESS $BAK_FILE_ACCESS</span><br><span class=\"line\">mv $DEFAULT_FILE_ERROR $BAK_FILE_ERROR</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span>向nginx主进程发信号重新打开日志</span><br><span class=\"line\">kill -USR1 `cat $DEFAULT_PATH/$BASE_FILE_NAME_PID`</span><br></pre></td></tr></table></figure>\n<p> 其实很简单，主要步骤如下：</p>\n<ul>\n<li>1.移动日志文件：这里已经将日志文件移动到<code></code>datalogs`目录下了，但Nginx还是会继续往这里面写日志</li>\n<li>2.发送<code>USR1</code>命令：告诉Nginx把日志写到<code></code>Nginx.conf`中配置的那个文件中，这里会重新生成日志文件</li>\n</ul>\n<p>具体如下：</p>\n<ul>\n<li><strong>第一步</strong>:就是重命名日志文件，不用担心重命名后nginx找不到日志文件而丢失日志。在你未重新打开原名字的日志文件前(即执行第二步之前)，nginx还是会向你重命名的文件写日志，Linux是靠<code>文件描述符</code>而不是<code>文件名</code>定位文件。</li>\n<li><strong>第二步</strong>:向nginx主进程发送<code>USR1信号</code>。nginx主进程接到信号后会从配置文件中读取日志文件名称，重新打开日志文件(以配置文件中的日志名称命名)，并以工作进程的用户作为日志文件的所有者。重新打开日志文后，nginx主进程会关闭重名的日志文件并通知工作进程使用新打开的日志文件。(就不会继续写到前面备份的那个文件中了)工作进程立刻打开新的日志文件并关闭重名名的日志文件。然后你就可以处理旧的日志文件了。</li>\n</ul>\n<h4 id=\"2-赋权\"><a href=\"#2-赋权\" class=\"headerlink\" title=\"2. 赋权\"></a>2. 赋权</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost sbin]# chmod 777 log.sh</span><br></pre></td></tr></table></figure>\n<p>将<code>log.sh</code>脚本设置为可执行文件</p>\n<h4 id=\"3-执行\"><a href=\"#3-执行\" class=\"headerlink\" title=\"3. 执行\"></a>3. 执行</h4><p>设置一个定时任务用于周期性的执行该脚本</p>\n<p><code>cron</code>是一个linux下的定时执行工具，可以在无需人工干预的情况下运行作业。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service crond start   //启动服务</span><br><span class=\"line\"></span><br><span class=\"line\">service crond stop    //关闭服务</span><br><span class=\"line\"></span><br><span class=\"line\">service crond restart  //重启服务</span><br><span class=\"line\"></span><br><span class=\"line\">service crond reload  //重新载入配置</span><br><span class=\"line\"></span><br><span class=\"line\">service crond status  //查看服务状态</span><br></pre></td></tr></table></figure>\n<p><strong>设置定时任务</strong>：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost datalogs]# crontab -e</span><br><span class=\"line\"></span><br><span class=\"line\">*/1 * * * * sh /usr/local/nginx/sbin/log.sh</span><br></pre></td></tr></table></figure>\n<p><code>*/1 * * * *</code>： 为定时时间 这里为了测试 是设置的每分钟执行一次；</p>\n<p><code>0 2 * * *</code> :每天凌晨两点执行</p>\n<p><code>sh</code> ：为任务类型 这里是一个sh脚本</p>\n<p><code>/usr/local/nginx/sbin/log.sh</code> ：为脚本路径</p>\n<h4 id=\"4-Nginx信号量\"><a href=\"#4-Nginx信号量\" class=\"headerlink\" title=\"4. Nginx信号量\"></a>4. Nginx信号量</h4><p>Nginx支持以下几种信号选项：</p>\n<ul>\n<li><strong>TERM，INT</strong> :  快速关闭</li>\n<li><strong>QUIT</strong> ：从容关闭（优雅的关闭进程,即等请求结束后再关闭)</li>\n<li><strong>HUP</strong> ：平滑重启，重新加载配置文件 （平滑重启，修改配置文件之后不用重启服务器。直接kill -PUT 进程号即可）</li>\n<li><strong>USR1</strong> ：重新读取日志文件，在切割日志时用途较大（停止写入老日志文件，打开新日志文件，之所以这样是因为老日志文件就算修改的文件名，由于inode的原因，nginx还会一直往老的日志文件写入数据） </li>\n<li><strong>USR2</strong> ：平滑升级可执行程序  ，nginx升级时候用                           　　　　 </li>\n<li><strong>WINCH</strong> ：从容关闭工作进程 </li>\n</ul>\n<h2 id=\"2-cron表达式\"><a href=\"#2-cron表达式\" class=\"headerlink\" title=\"2.cron表达式\"></a>2.cron表达式</h2><h3 id=\"2-1-基本语法\"><a href=\"#2-1-基本语法\" class=\"headerlink\" title=\"2.1 基本语法\"></a>2.1 基本语法</h3><p>　cron表达式代表一个时间的集合，使用6个空格分隔的字段表示：</p>\n<table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>是否必须</th>\n<th>允许的值</th>\n<th>允许的特定字符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>秒(Seconds)</td>\n<td>是</td>\n<td>0-59</td>\n<td>* / , -</td>\n</tr>\n<tr>\n<td>分(Minute)</td>\n<td>是</td>\n<td>0-59</td>\n<td>* / , -</td>\n</tr>\n<tr>\n<td>时(Hours)</td>\n<td>是</td>\n<td>0-23</td>\n<td>* / , -</td>\n</tr>\n<tr>\n<td>日(Day of month)</td>\n<td>是</td>\n<td>1-31</td>\n<td>* / , - ?</td>\n</tr>\n<tr>\n<td>月(Month)</td>\n<td>是</td>\n<td>1-12 或 JAN-DEC</td>\n<td>* / , -</td>\n</tr>\n<tr>\n<td>星期(Day of week)</td>\n<td>否</td>\n<td>0-6 或 SUM-SAT</td>\n<td>* / , - ?</td>\n</tr>\n</tbody>\n</table>\n<p>注：月(Month)和星期(Day of week)字段的值不区分大小写，如：SUN、Sun 和 sun 是一样的。 </p>\n<p><strong>星期字段没提供相当于<code>*</code></strong></p>\n<p><strong>一般只需要写5位就行了。即 <code>分 时 日 月 周</code></strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ┌───────────── min (0 - 59)</span><br><span class=\"line\"># │ ┌────────────── hour (0 - 23)</span><br><span class=\"line\"># │ │ ┌─────────────── day of month (1 - 31)</span><br><span class=\"line\"># │ │ │ ┌──────────────── month (1 - 12)</span><br><span class=\"line\"># │ │ │ │ ┌───────────────── day of week (0 - 6) (0 to 6 are Sunday to</span><br><span class=\"line\"># │ │ │ │ │                  Saturday, or use names; 7 is also Sunday)</span><br><span class=\"line\"># │ │ │ │ │</span><br><span class=\"line\"># │ │ │ │ │</span><br><span class=\"line\"># * * * * *  command to execute</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-特定字符\"><a href=\"#2-2-特定字符\" class=\"headerlink\" title=\"2.2 特定字符\"></a>2.2 特定字符</h3><ul>\n<li><strong>星号(*)</strong>:表示 cron 表达式能匹配该字段的所有值。如在第2个字段使用星号(hour)，表示每小时</li>\n<li><strong>斜线(/)</strong>:表示增长间隔，如第1个字段(minutes) 值是 <code>3/1</code>，表示每小时的第3分钟开始执行一次，之后每隔1分钟执行一次（1,2,3,4….59都执行一次）</li>\n<li><strong>逗号(,)</strong>:用于枚举值，如第6个字段值是 MON,WED,FRI，表示 星期一、三、五 执行。</li>\n<li><strong>连字号(-)</strong>:表示一个范围，如第3个字段的值为 9-17 表示 9am 到 5pm 之间每个小时（包括9和17）</li>\n<li><strong>问号(?)</strong>:只用于 日(Day of month) 和 星期(Day of week)，表示不指定值，可以用于代替 *</li>\n</ul>\n<h2 id=\"3-参考\"><a href=\"#3-参考\" class=\"headerlink\" title=\"3. 参考\"></a>3. 参考</h2><p><code>https://www.cnblogs.com/crazylqy/p/6891929.html</code></p>\n<p><code>http://www.runoob.com/linux/nginx-install-setup.html</code></p>"},{"title":"idea下打包SpringBoot项目并部署到Linux服务器","abbrlink":"144a69f9","date":"2019-02-22T14:00:00.000Z","_content":"\n本文主要记录了如何在idea下打包SpringBoot项目并部署到云服务器，包括jar包和war包两种方式。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 创建项目\n\n首先简单创建一个`hello word`\n\n代码如下：\n\n```java\n/**\n * 简单的controller\n *\n * @author illusoryCloud\n */\n@RestController\npublic class HelloController {\n    @RequestMapping(value = \"/hello\")\n    public String showHello() {\n        return \"hello illusoryCloud\";\n    }\n}\n\n/**\n * SpringBoot启动类\n *\n * @author illusoryCloud\n */\n@SpringBootApplication\npublic class HelloApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(HelloApplication.class, args);\n    }\n\n}\n```\n\n\n\n## 2. 打包\n\n### 2.1 jar包和war包区别\n\n- SpringBoot默认支持很多模板引擎，但是JSP只能够在War中使用\n- 无论是Jar还是War都能够使用嵌套容器，`java -jar`来独立运行\n- 但只有war才能部署到外部容器中\n\n### 2.2 jar包\n\n**SpringBoot官方推荐打成jar包，服务器上有`JDK 1.8`以上环境就可以直接运行**\n\n#### 1.修改pom.xml文件\n\n选择打包方式为jar\n\n```xml\n    <groupId>com.illusory</groupId>\n    <artifactId>hello</artifactId>\n    <version>0.0.1-SNAPSHOT</version>    <!--版本号-->\n    <name>hello</name>   \t\t <!--打出来的包的名字 hello-0.0.1-SNAPSHOT.jar-->\n    <description>Demo project for Spring Boot</description>\n    <packaging>jar</packaging>  \t\t  <!--打包方式jar/war-->\n```\n\n#### 2. 打包\n\n然后用maven打包。\n\n![SpringBoot打包](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/springboot/project-package.png)\n\n```java\n[INFO] --- maven-jar-plugin:3.1.1:jar (default-jar) @ hello ---\n[INFO] Building jar: D:\\lillusory\\MyProjects\\hello\\target\\hello-0.0.1-SNAPSHOT.jar\n[INFO] \n[INFO] --- spring-boot-maven-plugin:2.1.3.RELEASE:repackage (repackage) @ hello ---\n[INFO] Replacing main artifact with repackaged archive\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  23.922 s\n[INFO] Finished at: 2019-02-22T20:35:40+08:00\n[INFO] ------------------------------------------------------------------------\n```\n\n日志中可以看到打出来的包在`D:\\lillusory\\MyProjects\\hello\\target\\hello-0.0.1-SNAPSHOT.jar`\n\n#### 3. 测试\n\nSpringBoot内置了一个Tomcat，可以直接`java -jar jarName`运行。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/springboot/jar-run.png)\n\n浏览器访问`http://localhost:8080/hello`出现`hello illusoryCloud`说明运行起来了。\n\n这里的端口号是`application.yml`全局配置文件中配置的端口号。\n\n### 2.3 war包\n\n同时也可以打成war包然后用服务器上的Tomcat启动。\n\n#### 1.修改pom.xml\n\n```xml\n    <groupId>com.illusory</groupId>\n    <artifactId>hello</artifactId>\n    <version>0.0.1-SNAPSHOT</version>    <!--版本号-->\n    <name>hello</name>   \t\t <!--打出来的包的名字 hello-0.0.1-SNAPSHOT.jar-->\n    <description>Demo project for Spring Boot</description>\n    <packaging>war</packaging>  \t\t  <!--打包方式jar/war-->\n<!--外置tomcat启动-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-tomcat</artifactId>\n            <scope>provided</scope>\n        </dependency>\n\n```\n\n**maven中的`  <scope>provided</scope>`表示这个jar包在编译测试等地方是需要的，但是打包不会一起打包进去，这也避免了此类构件当部署到目标容器后产生包依赖冲突**。由于SpringBoot内置了Tomcat所以这里需要重新配置一下，防止冲突。\n\n#### 2.改造启动类\n\n**SpringBoot 内置的Tomcat能认识自己的启动项,而外部tomcat是不认识的**\n\n所以需要修改启动类。即继承`SpringBootServletInitializer`类实现`configure`方法\n\n```java\n/**\n * SpringBoot启动类\n * 打成war包时需要改造 继承SpringBootServletInitializer实现configure方法\n * 打jar包则不需要\n *\n * @author illusoryCloud\n */\n@SpringBootApplication\npublic class HelloApplication extends SpringBootServletInitializer {\n    @Override\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {\n       //这里的HelloApplication是SpringBoot的启动类\n        return builder.sources(HelloApplication.class);\n    }\n\n    public static void main(String[] args) {\n        SpringApplication.run(HelloApplication.class, args);\n    }\n\n}\n\n```\n\n#### 3. 打包\n\n和上面打包的方式一样的\n\n```java\n[INFO] Packaging webapp\n[INFO] Assembling webapp [hello] in [D:\\lillusory\\MyProjects\\hello\\target\\hello-0.0.1-SNAPSHOT]\n[INFO] Processing war project\n[INFO] Webapp assembled in [472 msecs]\n[INFO] Building war: D:\\lillusory\\MyProjects\\hello\\target\\hello-0.0.1-SNAPSHOT.war\n[INFO] --- spring-boot-maven-plugin:2.1.3.RELEASE:repackage (repackage) @ hello ---\n[INFO] Replacing main artifact with repackaged archive\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:00 min\n[INFO] Finished at: 2019-02-22T21:10:10+08:00\n[INFO] ------------------------------------------------------------------------\n```\n\n可以看到打出来的war包在`D:\\lillusory\\MyProjects\\hello\\target\\hello-0.0.1-SNAPSHOT.war`\n\n#### 4. 测试\n\n先在电脑上测试一下(Windows环境下)\n\n将war包复制到`Tomcat`的`webapps`文件夹下\n\n然后找到`bin`目录下的`startup.bat`启动Tomcat，项目就会自动启动了。\n\n浏览器访问`http://localhost:8080/hello-0.0.1-SNAPSHOT/hello` 出现`hello illusoryCloud`说明ok的。\n\n这里`hello-0.0.1-SNAPSHOT`就是war包的名称，Tomcat启动时会自动解压war包然后启动项目。\n\n这里的端口号和`application.yml`全局配置文件中配置的端口号没有关系，是Tomcat中配置的。\n\n在`Tomcat\\conf\\server.xml`这个文件中，默认也是8080。\n\n**问题**\n\n我这里启动的时候出现了一个问题\n\n`Caused by: java.lang.NoClassDefFoundError: javax/el/ELManager `\n\n最后找到原因是**tomcat提供的`el-api.jar` 和项目里面的el-api.jar冲突**;\n\n这时候你需要去找到自己电脑上用的el-api的版本,copy到tomcat的lib目录下,覆盖原来的jar包.\n\n我的在`IntelliJ IDEA 2018.3\\lib\\rt\\jasper2.1\\el-api.jar`这个目录下\n\n我看网上说是和Tomcat版本有关系，我这里是`7.0.52`\n\n**Tomcat日志**\n\n若是还有其他问题的话可以查看Tomcat日志。在`tomcat\\logs\\catalina.2019-02-22.log`这个文件中。\n\n## 3. 部署\n\n### 3.1 jar包\n\n首先将文件上传到服务器上，服务器上有安装JDK8及以上的版本就可以直接运行。\n\n[Linux下JDK的安装及配置点这里](https://www.lixueduan.com/posts/54978294.html)\n\n#### 1. 前台运行\n\n```shell\n$ java -jar hello-0.0.1-SNAPSHOT.jar\n```\n\n但是这样运行的话是在前台运行，当前窗口关闭后就停止了,或者是运行时没法切出去执行其他任务.\n\n#### 2. 后台运行\n\n```shell\n$ nohup java -jar hello-0.0.1-SNAPSHOT.jar >temp.txt &\n\n//nohup 意思是不挂断运行命令,当账户退出或终端关闭时,程序仍然运行\n//这种方法会把日志文件输入到你指定的文件中(temp.txt)\n//在哪个目录下运行的该日志文件就会在哪个目录下，没有指定具体文件则会自动创建(nohup.out)\n//& 表示后台运行\n```\n\n#### 3. 问题\n\n执行以上命令后出现下面的提示\n\n```shell\nnohup: ignoring input and redirecting stderr to stdout\n忽略输出 将错误输出重定向到标准输出\n```\n\n**原因**\n\n`Linux`中`0`、`1`和`2`分别表示`标准输`入、`标准输出`和`标准错误信息输出`，可以用来指定需要重定向的标准输入或输出。在一般使用时，默认的是标准输出，即1。\n\n例如：`2>temp.txt`  就是将错误信息写入temp.txt 标准输出还是显示在屏幕上。\n\n另外，也可以实现0，1，2之间的重定向。`2>&1`：将错误信息重定向到标准输出。\n\nLinux下还有一个特殊的文件`/dev/null`，它就像一个无底洞，所有重定向到它的信息都会消失得无影无踪。\n\n如果想要`正常输出和错误信息都不显示`，则要把标准输出和标准错误都重定向到`/dev/null`， 例如：\n\n `1>/dev/null 2>/dev/null`\n\n**解决办法**\n\n所以最后的命令就是\n\n```shell\n  nohup java -jar hello-0.0.1-SNAPSHOT.jar >temp.txt 2>&1&\n```\n\n```shell\n[root@localhost software]# nohup java -jar hello-0.0.1-SNAPSHOT.jar >temp.txt 2>&1&\n[1] 22804\n// 成功启动 pid为22804\n```\n\n#### 4. 测试\n\n首先查看服务器的IP\n\n```shell\n[root@localhost software]# ip addr\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host \n       valid_lft forever preferred_lft forever\n2: ens33: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\n    link/ether 00:0c:29:8a:48:7d brd ff:ff:ff:ff:ff:ff\n    inet 192.168.1.111/24 brd 192.168.1.255 scope global noprefixroute ens33\n       valid_lft forever preferred_lft forever\n    inet6 fe80::20c:29ff:fe8a:487d/64 scope link \n       valid_lft forever preferred_lft forever\n3: virbr0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default qlen 1000\n    link/ether 52:54:00:8e:d5:31 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0\n       valid_lft forever preferred_lft forever\n4: virbr0-nic: <BROADCAST,MULTICAST> mtu 1500 qdisc pfifo_fast master virbr0 state DOWN group default qlen 1000\n    link/ether 52:54:00:8e:d5:31 brd ff:ff:ff:ff:ff:ff\n\n```\n\n然后浏览器访问`http://192.168.1.111:8080/hello`出现`hello illusoryCloud`说明成功了。\n\n**记得关闭防火墙或者开放8080端口**\n\n#### 5. 相关Linux命令\n\n* jobs命令和 fg命令\n\n```shell\n$ jobs\n//那么就会列出所有后台执行的作业，并且每个作业前面都有个编号。\n[root@localhost software]# jobs\n[1]+  Running    nohup java -jar hello-0.0.1-SNAPSHOT.jar > temp.txt 2>&1 &\n//如果想将某个作业调回前台控制，只需要 fg + 编号即可。\n$ fg 1\n```\n\n- 查看某端口占用的线程的pid\n\n```shell\nnetstat -nlp |grep :8080\n```\n\n* kill\n\n```shell\nkill pid\n```\n\n### 3.2 war包\n\nwar包运行和在windows上运行其实一样的，也是**先将war包copy到Tomcat的webapps目录下，然后启动Tomcat，如果上面测试出现jar包冲突的话这里也需要替换**。\n\n[Linux下Tomcat安装及配置点这里](https://www.lixueduan.com/posts/54978294.html)\n\n#### 启动Tomcat\n\n进入`Tomcat\\bin`目录执行`./startup.sh`即可\n\n```shell\n[root@localhost bin]# ./startup.sh \nUsing CATALINA_BASE:   /usr/local/tomcat\nUsing CATALINA_HOME:   /usr/local/tomcat\nUsing CATALINA_TMPDIR: /usr/local/tomcat/temp\nUsing JRE_HOME:        /usr/local/jdk8\nUsing CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar\nTomcat started.\n```\n\n浏览器访问`http://192.168.1.111:8080/hello-0.0.1-SNAPSHOT/hello`出现`hello illusoryCloud`说明是没问题的。\n\n## 4. 参考\n\n`https://blog.csdn.net/qq_22638399/article/details/81506448`\n\n`https://blog.csdn.net/c1481118216/article/details/53010963`\n\n`https://blog.csdn.net/qq_14853889/article/details/80026885`","source":"_posts/springboot/package-deploy-jar-.md","raw":"---\ntitle: idea下打包SpringBoot项目并部署到Linux服务器\ntags:\n  - SpringBoot\ncategories:\n  - SpringBoot\nabbrlink: 144a69f9\ndate: 2019-02-22 22:00:00\n---\n\n本文主要记录了如何在idea下打包SpringBoot项目并部署到云服务器，包括jar包和war包两种方式。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 创建项目\n\n首先简单创建一个`hello word`\n\n代码如下：\n\n```java\n/**\n * 简单的controller\n *\n * @author illusoryCloud\n */\n@RestController\npublic class HelloController {\n    @RequestMapping(value = \"/hello\")\n    public String showHello() {\n        return \"hello illusoryCloud\";\n    }\n}\n\n/**\n * SpringBoot启动类\n *\n * @author illusoryCloud\n */\n@SpringBootApplication\npublic class HelloApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(HelloApplication.class, args);\n    }\n\n}\n```\n\n\n\n## 2. 打包\n\n### 2.1 jar包和war包区别\n\n- SpringBoot默认支持很多模板引擎，但是JSP只能够在War中使用\n- 无论是Jar还是War都能够使用嵌套容器，`java -jar`来独立运行\n- 但只有war才能部署到外部容器中\n\n### 2.2 jar包\n\n**SpringBoot官方推荐打成jar包，服务器上有`JDK 1.8`以上环境就可以直接运行**\n\n#### 1.修改pom.xml文件\n\n选择打包方式为jar\n\n```xml\n    <groupId>com.illusory</groupId>\n    <artifactId>hello</artifactId>\n    <version>0.0.1-SNAPSHOT</version>    <!--版本号-->\n    <name>hello</name>   \t\t <!--打出来的包的名字 hello-0.0.1-SNAPSHOT.jar-->\n    <description>Demo project for Spring Boot</description>\n    <packaging>jar</packaging>  \t\t  <!--打包方式jar/war-->\n```\n\n#### 2. 打包\n\n然后用maven打包。\n\n![SpringBoot打包](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/springboot/project-package.png)\n\n```java\n[INFO] --- maven-jar-plugin:3.1.1:jar (default-jar) @ hello ---\n[INFO] Building jar: D:\\lillusory\\MyProjects\\hello\\target\\hello-0.0.1-SNAPSHOT.jar\n[INFO] \n[INFO] --- spring-boot-maven-plugin:2.1.3.RELEASE:repackage (repackage) @ hello ---\n[INFO] Replacing main artifact with repackaged archive\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  23.922 s\n[INFO] Finished at: 2019-02-22T20:35:40+08:00\n[INFO] ------------------------------------------------------------------------\n```\n\n日志中可以看到打出来的包在`D:\\lillusory\\MyProjects\\hello\\target\\hello-0.0.1-SNAPSHOT.jar`\n\n#### 3. 测试\n\nSpringBoot内置了一个Tomcat，可以直接`java -jar jarName`运行。\n\n![](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/springboot/jar-run.png)\n\n浏览器访问`http://localhost:8080/hello`出现`hello illusoryCloud`说明运行起来了。\n\n这里的端口号是`application.yml`全局配置文件中配置的端口号。\n\n### 2.3 war包\n\n同时也可以打成war包然后用服务器上的Tomcat启动。\n\n#### 1.修改pom.xml\n\n```xml\n    <groupId>com.illusory</groupId>\n    <artifactId>hello</artifactId>\n    <version>0.0.1-SNAPSHOT</version>    <!--版本号-->\n    <name>hello</name>   \t\t <!--打出来的包的名字 hello-0.0.1-SNAPSHOT.jar-->\n    <description>Demo project for Spring Boot</description>\n    <packaging>war</packaging>  \t\t  <!--打包方式jar/war-->\n<!--外置tomcat启动-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-tomcat</artifactId>\n            <scope>provided</scope>\n        </dependency>\n\n```\n\n**maven中的`  <scope>provided</scope>`表示这个jar包在编译测试等地方是需要的，但是打包不会一起打包进去，这也避免了此类构件当部署到目标容器后产生包依赖冲突**。由于SpringBoot内置了Tomcat所以这里需要重新配置一下，防止冲突。\n\n#### 2.改造启动类\n\n**SpringBoot 内置的Tomcat能认识自己的启动项,而外部tomcat是不认识的**\n\n所以需要修改启动类。即继承`SpringBootServletInitializer`类实现`configure`方法\n\n```java\n/**\n * SpringBoot启动类\n * 打成war包时需要改造 继承SpringBootServletInitializer实现configure方法\n * 打jar包则不需要\n *\n * @author illusoryCloud\n */\n@SpringBootApplication\npublic class HelloApplication extends SpringBootServletInitializer {\n    @Override\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {\n       //这里的HelloApplication是SpringBoot的启动类\n        return builder.sources(HelloApplication.class);\n    }\n\n    public static void main(String[] args) {\n        SpringApplication.run(HelloApplication.class, args);\n    }\n\n}\n\n```\n\n#### 3. 打包\n\n和上面打包的方式一样的\n\n```java\n[INFO] Packaging webapp\n[INFO] Assembling webapp [hello] in [D:\\lillusory\\MyProjects\\hello\\target\\hello-0.0.1-SNAPSHOT]\n[INFO] Processing war project\n[INFO] Webapp assembled in [472 msecs]\n[INFO] Building war: D:\\lillusory\\MyProjects\\hello\\target\\hello-0.0.1-SNAPSHOT.war\n[INFO] --- spring-boot-maven-plugin:2.1.3.RELEASE:repackage (repackage) @ hello ---\n[INFO] Replacing main artifact with repackaged archive\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:00 min\n[INFO] Finished at: 2019-02-22T21:10:10+08:00\n[INFO] ------------------------------------------------------------------------\n```\n\n可以看到打出来的war包在`D:\\lillusory\\MyProjects\\hello\\target\\hello-0.0.1-SNAPSHOT.war`\n\n#### 4. 测试\n\n先在电脑上测试一下(Windows环境下)\n\n将war包复制到`Tomcat`的`webapps`文件夹下\n\n然后找到`bin`目录下的`startup.bat`启动Tomcat，项目就会自动启动了。\n\n浏览器访问`http://localhost:8080/hello-0.0.1-SNAPSHOT/hello` 出现`hello illusoryCloud`说明ok的。\n\n这里`hello-0.0.1-SNAPSHOT`就是war包的名称，Tomcat启动时会自动解压war包然后启动项目。\n\n这里的端口号和`application.yml`全局配置文件中配置的端口号没有关系，是Tomcat中配置的。\n\n在`Tomcat\\conf\\server.xml`这个文件中，默认也是8080。\n\n**问题**\n\n我这里启动的时候出现了一个问题\n\n`Caused by: java.lang.NoClassDefFoundError: javax/el/ELManager `\n\n最后找到原因是**tomcat提供的`el-api.jar` 和项目里面的el-api.jar冲突**;\n\n这时候你需要去找到自己电脑上用的el-api的版本,copy到tomcat的lib目录下,覆盖原来的jar包.\n\n我的在`IntelliJ IDEA 2018.3\\lib\\rt\\jasper2.1\\el-api.jar`这个目录下\n\n我看网上说是和Tomcat版本有关系，我这里是`7.0.52`\n\n**Tomcat日志**\n\n若是还有其他问题的话可以查看Tomcat日志。在`tomcat\\logs\\catalina.2019-02-22.log`这个文件中。\n\n## 3. 部署\n\n### 3.1 jar包\n\n首先将文件上传到服务器上，服务器上有安装JDK8及以上的版本就可以直接运行。\n\n[Linux下JDK的安装及配置点这里](https://www.lixueduan.com/posts/54978294.html)\n\n#### 1. 前台运行\n\n```shell\n$ java -jar hello-0.0.1-SNAPSHOT.jar\n```\n\n但是这样运行的话是在前台运行，当前窗口关闭后就停止了,或者是运行时没法切出去执行其他任务.\n\n#### 2. 后台运行\n\n```shell\n$ nohup java -jar hello-0.0.1-SNAPSHOT.jar >temp.txt &\n\n//nohup 意思是不挂断运行命令,当账户退出或终端关闭时,程序仍然运行\n//这种方法会把日志文件输入到你指定的文件中(temp.txt)\n//在哪个目录下运行的该日志文件就会在哪个目录下，没有指定具体文件则会自动创建(nohup.out)\n//& 表示后台运行\n```\n\n#### 3. 问题\n\n执行以上命令后出现下面的提示\n\n```shell\nnohup: ignoring input and redirecting stderr to stdout\n忽略输出 将错误输出重定向到标准输出\n```\n\n**原因**\n\n`Linux`中`0`、`1`和`2`分别表示`标准输`入、`标准输出`和`标准错误信息输出`，可以用来指定需要重定向的标准输入或输出。在一般使用时，默认的是标准输出，即1。\n\n例如：`2>temp.txt`  就是将错误信息写入temp.txt 标准输出还是显示在屏幕上。\n\n另外，也可以实现0，1，2之间的重定向。`2>&1`：将错误信息重定向到标准输出。\n\nLinux下还有一个特殊的文件`/dev/null`，它就像一个无底洞，所有重定向到它的信息都会消失得无影无踪。\n\n如果想要`正常输出和错误信息都不显示`，则要把标准输出和标准错误都重定向到`/dev/null`， 例如：\n\n `1>/dev/null 2>/dev/null`\n\n**解决办法**\n\n所以最后的命令就是\n\n```shell\n  nohup java -jar hello-0.0.1-SNAPSHOT.jar >temp.txt 2>&1&\n```\n\n```shell\n[root@localhost software]# nohup java -jar hello-0.0.1-SNAPSHOT.jar >temp.txt 2>&1&\n[1] 22804\n// 成功启动 pid为22804\n```\n\n#### 4. 测试\n\n首先查看服务器的IP\n\n```shell\n[root@localhost software]# ip addr\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host \n       valid_lft forever preferred_lft forever\n2: ens33: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\n    link/ether 00:0c:29:8a:48:7d brd ff:ff:ff:ff:ff:ff\n    inet 192.168.1.111/24 brd 192.168.1.255 scope global noprefixroute ens33\n       valid_lft forever preferred_lft forever\n    inet6 fe80::20c:29ff:fe8a:487d/64 scope link \n       valid_lft forever preferred_lft forever\n3: virbr0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default qlen 1000\n    link/ether 52:54:00:8e:d5:31 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0\n       valid_lft forever preferred_lft forever\n4: virbr0-nic: <BROADCAST,MULTICAST> mtu 1500 qdisc pfifo_fast master virbr0 state DOWN group default qlen 1000\n    link/ether 52:54:00:8e:d5:31 brd ff:ff:ff:ff:ff:ff\n\n```\n\n然后浏览器访问`http://192.168.1.111:8080/hello`出现`hello illusoryCloud`说明成功了。\n\n**记得关闭防火墙或者开放8080端口**\n\n#### 5. 相关Linux命令\n\n* jobs命令和 fg命令\n\n```shell\n$ jobs\n//那么就会列出所有后台执行的作业，并且每个作业前面都有个编号。\n[root@localhost software]# jobs\n[1]+  Running    nohup java -jar hello-0.0.1-SNAPSHOT.jar > temp.txt 2>&1 &\n//如果想将某个作业调回前台控制，只需要 fg + 编号即可。\n$ fg 1\n```\n\n- 查看某端口占用的线程的pid\n\n```shell\nnetstat -nlp |grep :8080\n```\n\n* kill\n\n```shell\nkill pid\n```\n\n### 3.2 war包\n\nwar包运行和在windows上运行其实一样的，也是**先将war包copy到Tomcat的webapps目录下，然后启动Tomcat，如果上面测试出现jar包冲突的话这里也需要替换**。\n\n[Linux下Tomcat安装及配置点这里](https://www.lixueduan.com/posts/54978294.html)\n\n#### 启动Tomcat\n\n进入`Tomcat\\bin`目录执行`./startup.sh`即可\n\n```shell\n[root@localhost bin]# ./startup.sh \nUsing CATALINA_BASE:   /usr/local/tomcat\nUsing CATALINA_HOME:   /usr/local/tomcat\nUsing CATALINA_TMPDIR: /usr/local/tomcat/temp\nUsing JRE_HOME:        /usr/local/jdk8\nUsing CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar\nTomcat started.\n```\n\n浏览器访问`http://192.168.1.111:8080/hello-0.0.1-SNAPSHOT/hello`出现`hello illusoryCloud`说明是没问题的。\n\n## 4. 参考\n\n`https://blog.csdn.net/qq_22638399/article/details/81506448`\n\n`https://blog.csdn.net/c1481118216/article/details/53010963`\n\n`https://blog.csdn.net/qq_14853889/article/details/80026885`","slug":"springboot/package-deploy-jar-","published":1,"updated":"2019-02-22T14:51:15.076Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv4bn00510ww4gxs89ey4","content":"<p>本文主要记录了如何在idea下打包SpringBoot项目并部署到云服务器，包括jar包和war包两种方式。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-创建项目\"><a href=\"#1-创建项目\" class=\"headerlink\" title=\"1. 创建项目\"></a>1. 创建项目</h2><p>首先简单创建一个<code>hello word</code></p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 简单的controller</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">showHello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"hello illusoryCloud\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * SpringBoot启动类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(HelloApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-打包\"><a href=\"#2-打包\" class=\"headerlink\" title=\"2. 打包\"></a>2. 打包</h2><h3 id=\"2-1-jar包和war包区别\"><a href=\"#2-1-jar包和war包区别\" class=\"headerlink\" title=\"2.1 jar包和war包区别\"></a>2.1 jar包和war包区别</h3><ul>\n<li>SpringBoot默认支持很多模板引擎，但是JSP只能够在War中使用</li>\n<li>无论是Jar还是War都能够使用嵌套容器，<code>java -jar</code>来独立运行</li>\n<li>但只有war才能部署到外部容器中</li>\n</ul>\n<h3 id=\"2-2-jar包\"><a href=\"#2-2-jar包\" class=\"headerlink\" title=\"2.2 jar包\"></a>2.2 jar包</h3><p><strong>SpringBoot官方推荐打成jar包，服务器上有<code>JDK 1.8</code>以上环境就可以直接运行</strong></p>\n<h4 id=\"1-修改pom-xml文件\"><a href=\"#1-修改pom-xml文件\" class=\"headerlink\" title=\"1.修改pom.xml文件\"></a>1.修改pom.xml文件</h4><p>选择打包方式为jar</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.illusory<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>    <span class=\"comment\">&lt;!--版本号--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>   \t\t <span class=\"comment\">&lt;!--打出来的包的名字 hello-0.0.1-SNAPSHOT.jar--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Demo project for Spring Boot<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span>  \t\t  <span class=\"comment\">&lt;!--打包方式jar/war--&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-打包-1\"><a href=\"#2-打包-1\" class=\"headerlink\" title=\"2. 打包\"></a>2. 打包</h4><p>然后用maven打包。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/springboot/project-package.png\" alt=\"SpringBoot打包\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[INFO] --- maven-jar-plugin:<span class=\"number\">3.1</span>.1:jar (<span class=\"keyword\">default</span>-jar) @ hello ---</span><br><span class=\"line\">[INFO] Building jar: D:\\lillusory\\MyProjects\\hello\\target\\hello-<span class=\"number\">0.0</span>.1-SNAPSHOT.jar</span><br><span class=\"line\">[INFO] </span><br><span class=\"line\">[INFO] --- spring-boot-maven-plugin:<span class=\"number\">2.1</span>.3.RELEASE:repackage (repackage) @ hello ---</span><br><span class=\"line\">[INFO] Replacing main artifact with repackaged archive</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] BUILD SUCCESS</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Total time:  <span class=\"number\">23.922</span> s</span><br><span class=\"line\">[INFO] Finished at: <span class=\"number\">2019</span>-<span class=\"number\">02</span>-<span class=\"number\">22</span>T20:<span class=\"number\">35</span>:<span class=\"number\">40</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span></span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>\n<p>日志中可以看到打出来的包在<code>D:\\lillusory\\MyProjects\\hello\\target\\hello-0.0.1-SNAPSHOT.jar</code></p>\n<h4 id=\"3-测试\"><a href=\"#3-测试\" class=\"headerlink\" title=\"3. 测试\"></a>3. 测试</h4><p>SpringBoot内置了一个Tomcat，可以直接<code>java -jar jarName</code>运行。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/springboot/jar-run.png\" alt=\"\"></p>\n<p>浏览器访问<code>http://localhost:8080/hello</code>出现<code>hello illusoryCloud</code>说明运行起来了。</p>\n<p>这里的端口号是<code>application.yml</code>全局配置文件中配置的端口号。</p>\n<h3 id=\"2-3-war包\"><a href=\"#2-3-war包\" class=\"headerlink\" title=\"2.3 war包\"></a>2.3 war包</h3><p>同时也可以打成war包然后用服务器上的Tomcat启动。</p>\n<h4 id=\"1-修改pom-xml\"><a href=\"#1-修改pom-xml\" class=\"headerlink\" title=\"1.修改pom.xml\"></a>1.修改pom.xml</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.illusory<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>    <span class=\"comment\">&lt;!--版本号--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>   \t\t <span class=\"comment\">&lt;!--打出来的包的名字 hello-0.0.1-SNAPSHOT.jar--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Demo project for Spring Boot<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span>  \t\t  <span class=\"comment\">&lt;!--打包方式jar/war--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--外置tomcat启动--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>maven中的<code>&lt;scope&gt;provided&lt;/scope&gt;</code>表示这个jar包在编译测试等地方是需要的，但是打包不会一起打包进去，这也避免了此类构件当部署到目标容器后产生包依赖冲突</strong>。由于SpringBoot内置了Tomcat所以这里需要重新配置一下，防止冲突。</p>\n<h4 id=\"2-改造启动类\"><a href=\"#2-改造启动类\" class=\"headerlink\" title=\"2.改造启动类\"></a>2.改造启动类</h4><p><strong>SpringBoot 内置的Tomcat能认识自己的启动项,而外部tomcat是不认识的</strong></p>\n<p>所以需要修改启动类。即继承<code>SpringBootServletInitializer</code>类实现<code>configure</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * SpringBoot启动类</span></span><br><span class=\"line\"><span class=\"comment\"> * 打成war包时需要改造 继承SpringBootServletInitializer实现configure方法</span></span><br><span class=\"line\"><span class=\"comment\"> * 打jar包则不需要</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">SpringBootServletInitializer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> SpringApplicationBuilder <span class=\"title\">configure</span><span class=\"params\">(SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//这里的HelloApplication是SpringBoot的启动类</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.sources(HelloApplication.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(HelloApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-打包\"><a href=\"#3-打包\" class=\"headerlink\" title=\"3. 打包\"></a>3. 打包</h4><p>和上面打包的方式一样的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[INFO] Packaging webapp</span><br><span class=\"line\">[INFO] Assembling webapp [hello] in [D:\\lillusory\\MyProjects\\hello\\target\\hello-<span class=\"number\">0.0</span>.1-SNAPSHOT]</span><br><span class=\"line\">[INFO] Processing war project</span><br><span class=\"line\">[INFO] Webapp assembled in [<span class=\"number\">472</span> msecs]</span><br><span class=\"line\">[INFO] Building war: D:\\lillusory\\MyProjects\\hello\\target\\hello-<span class=\"number\">0.0</span>.1-SNAPSHOT.war</span><br><span class=\"line\">[INFO] --- spring-boot-maven-plugin:<span class=\"number\">2.1</span>.3.RELEASE:repackage (repackage) @ hello ---</span><br><span class=\"line\">[INFO] Replacing main artifact with repackaged archive</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] BUILD SUCCESS</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Total time:  <span class=\"number\">01</span>:<span class=\"number\">00</span> min</span><br><span class=\"line\">[INFO] Finished at: <span class=\"number\">2019</span>-<span class=\"number\">02</span>-<span class=\"number\">22</span>T21:<span class=\"number\">10</span>:<span class=\"number\">10</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span></span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>\n<p>可以看到打出来的war包在<code>D:\\lillusory\\MyProjects\\hello\\target\\hello-0.0.1-SNAPSHOT.war</code></p>\n<h4 id=\"4-测试\"><a href=\"#4-测试\" class=\"headerlink\" title=\"4. 测试\"></a>4. 测试</h4><p>先在电脑上测试一下(Windows环境下)</p>\n<p>将war包复制到<code>Tomcat</code>的<code>webapps</code>文件夹下</p>\n<p>然后找到<code>bin</code>目录下的<code>startup.bat</code>启动Tomcat，项目就会自动启动了。</p>\n<p>浏览器访问<code>http://localhost:8080/hello-0.0.1-SNAPSHOT/hello</code> 出现<code>hello illusoryCloud</code>说明ok的。</p>\n<p>这里<code>hello-0.0.1-SNAPSHOT</code>就是war包的名称，Tomcat启动时会自动解压war包然后启动项目。</p>\n<p>这里的端口号和<code>application.yml</code>全局配置文件中配置的端口号没有关系，是Tomcat中配置的。</p>\n<p>在<code>Tomcat\\conf\\server.xml</code>这个文件中，默认也是8080。</p>\n<p><strong>问题</strong></p>\n<p>我这里启动的时候出现了一个问题</p>\n<p><code>Caused by: java.lang.NoClassDefFoundError: javax/el/ELManager</code></p>\n<p>最后找到原因是<strong>tomcat提供的<code>el-api.jar</code> 和项目里面的el-api.jar冲突</strong>;</p>\n<p>这时候你需要去找到自己电脑上用的el-api的版本,copy到tomcat的lib目录下,覆盖原来的jar包.</p>\n<p>我的在<code>IntelliJ IDEA 2018.3\\lib\\rt\\jasper2.1\\el-api.jar</code>这个目录下</p>\n<p>我看网上说是和Tomcat版本有关系，我这里是<code>7.0.52</code></p>\n<p><strong>Tomcat日志</strong></p>\n<p>若是还有其他问题的话可以查看Tomcat日志。在<code>tomcat\\logs\\catalina.2019-02-22.log</code>这个文件中。</p>\n<h2 id=\"3-部署\"><a href=\"#3-部署\" class=\"headerlink\" title=\"3. 部署\"></a>3. 部署</h2><h3 id=\"3-1-jar包\"><a href=\"#3-1-jar包\" class=\"headerlink\" title=\"3.1 jar包\"></a>3.1 jar包</h3><p>首先将文件上传到服务器上，服务器上有安装JDK8及以上的版本就可以直接运行。</p>\n<p><a href=\"https://www.lixueduan.com/posts/54978294.html\">Linux下JDK的安装及配置点这里</a></p>\n<h4 id=\"1-前台运行\"><a href=\"#1-前台运行\" class=\"headerlink\" title=\"1. 前台运行\"></a>1. 前台运行</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> java -jar hello-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>\n<p>但是这样运行的话是在前台运行，当前窗口关闭后就停止了,或者是运行时没法切出去执行其他任务.</p>\n<h4 id=\"2-后台运行\"><a href=\"#2-后台运行\" class=\"headerlink\" title=\"2. 后台运行\"></a>2. 后台运行</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> nohup java -jar hello-0.0.1-SNAPSHOT.jar &gt;temp.txt &amp;</span><br><span class=\"line\"></span><br><span class=\"line\">//nohup 意思是不挂断运行命令,当账户退出或终端关闭时,程序仍然运行</span><br><span class=\"line\">//这种方法会把日志文件输入到你指定的文件中(temp.txt)</span><br><span class=\"line\">//在哪个目录下运行的该日志文件就会在哪个目录下，没有指定具体文件则会自动创建(nohup.out)</span><br><span class=\"line\">//&amp; 表示后台运行</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-问题\"><a href=\"#3-问题\" class=\"headerlink\" title=\"3. 问题\"></a>3. 问题</h4><p>执行以上命令后出现下面的提示</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup: ignoring input and redirecting stderr to stdout</span><br><span class=\"line\">忽略输出 将错误输出重定向到标准输出</span><br></pre></td></tr></table></figure>\n<p><strong>原因</strong></p>\n<p><code>Linux</code>中<code>0</code>、<code>1</code>和<code>2</code>分别表示<code>标准输</code>入、<code>标准输出</code>和<code>标准错误信息输出</code>，可以用来指定需要重定向的标准输入或输出。在一般使用时，默认的是标准输出，即1。</p>\n<p>例如：<code>2&gt;temp.txt</code>  就是将错误信息写入temp.txt 标准输出还是显示在屏幕上。</p>\n<p>另外，也可以实现0，1，2之间的重定向。<code>2&gt;&amp;1</code>：将错误信息重定向到标准输出。</p>\n<p>Linux下还有一个特殊的文件<code>/dev/null</code>，它就像一个无底洞，所有重定向到它的信息都会消失得无影无踪。</p>\n<p>如果想要<code>正常输出和错误信息都不显示</code>，则要把标准输出和标准错误都重定向到<code>/dev/null</code>， 例如：</p>\n<p> <code>1&gt;/dev/null 2&gt;/dev/null</code></p>\n<p><strong>解决办法</strong></p>\n<p>所以最后的命令就是</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup java -jar hello-0.0.1-SNAPSHOT.jar &gt;temp.txt 2&gt;&amp;1&amp;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost software]# nohup java -jar hello-0.0.1-SNAPSHOT.jar &gt;temp.txt 2&gt;&amp;1&amp;</span><br><span class=\"line\">[1] 22804</span><br><span class=\"line\">// 成功启动 pid为22804</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-测试-1\"><a href=\"#4-测试-1\" class=\"headerlink\" title=\"4. 测试\"></a>4. 测试</h4><p>首先查看服务器的IP</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost software]# ip addr</span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 ::1/128 scope host </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class=\"line\">    link/ether 00:0c:29:8a:48:7d brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 192.168.1.111/24 brd 192.168.1.255 scope global noprefixroute ens33</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::20c:29ff:fe8a:487d/64 scope link </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">3: virbr0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default qlen 1000</span><br><span class=\"line\">    link/ether 52:54:00:8e:d5:31 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">4: virbr0-nic: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast master virbr0 state DOWN group default qlen 1000</span><br><span class=\"line\">    link/ether 52:54:00:8e:d5:31 brd ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></table></figure>\n<p>然后浏览器访问<code>http://192.168.1.111:8080/hello</code>出现<code>hello illusoryCloud</code>说明成功了。</p>\n<p><strong>记得关闭防火墙或者开放8080端口</strong></p>\n<h4 id=\"5-相关Linux命令\"><a href=\"#5-相关Linux命令\" class=\"headerlink\" title=\"5. 相关Linux命令\"></a>5. 相关Linux命令</h4><ul>\n<li>jobs命令和 fg命令</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> jobs</span><br><span class=\"line\">//那么就会列出所有后台执行的作业，并且每个作业前面都有个编号。</span><br><span class=\"line\">[root@localhost software]# jobs</span><br><span class=\"line\">[1]+  Running    nohup java -jar hello-0.0.1-SNAPSHOT.jar &gt; temp.txt 2&gt;&amp;1 &amp;</span><br><span class=\"line\">//如果想将某个作业调回前台控制，只需要 fg + 编号即可。</span><br><span class=\"line\"><span class=\"meta\">$</span> fg 1</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看某端口占用的线程的pid</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -nlp |grep :8080</span><br></pre></td></tr></table></figure>\n<ul>\n<li>kill</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill pid</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-war包\"><a href=\"#3-2-war包\" class=\"headerlink\" title=\"3.2 war包\"></a>3.2 war包</h3><p>war包运行和在windows上运行其实一样的，也是<strong>先将war包copy到Tomcat的webapps目录下，然后启动Tomcat，如果上面测试出现jar包冲突的话这里也需要替换</strong>。</p>\n<p><a href=\"https://www.lixueduan.com/posts/54978294.html\">Linux下Tomcat安装及配置点这里</a></p>\n<h4 id=\"启动Tomcat\"><a href=\"#启动Tomcat\" class=\"headerlink\" title=\"启动Tomcat\"></a>启动Tomcat</h4><p>进入<code>Tomcat\\bin</code>目录执行<code>./startup.sh</code>即可</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost bin]# ./startup.sh </span><br><span class=\"line\">Using CATALINA_BASE:   /usr/local/tomcat</span><br><span class=\"line\">Using CATALINA_HOME:   /usr/local/tomcat</span><br><span class=\"line\">Using CATALINA_TMPDIR: /usr/local/tomcat/temp</span><br><span class=\"line\">Using JRE_HOME:        /usr/local/jdk8</span><br><span class=\"line\">Using CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar</span><br><span class=\"line\">Tomcat started.</span><br></pre></td></tr></table></figure>\n<p>浏览器访问<code>http://192.168.1.111:8080/hello-0.0.1-SNAPSHOT/hello</code>出现<code>hello illusoryCloud</code>说明是没问题的。</p>\n<h2 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4. 参考\"></a>4. 参考</h2><p><code>https://blog.csdn.net/qq_22638399/article/details/81506448</code></p>\n<p><code>https://blog.csdn.net/c1481118216/article/details/53010963</code></p>\n<p><code>https://blog.csdn.net/qq_14853889/article/details/80026885</code></p>\n","site":{"data":{}},"excerpt":"<p>本文主要记录了如何在idea下打包SpringBoot项目并部署到云服务器，包括jar包和war包两种方式。</p>","more":"<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-创建项目\"><a href=\"#1-创建项目\" class=\"headerlink\" title=\"1. 创建项目\"></a>1. 创建项目</h2><p>首先简单创建一个<code>hello word</code></p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 简单的controller</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">showHello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"hello illusoryCloud\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * SpringBoot启动类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(HelloApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-打包\"><a href=\"#2-打包\" class=\"headerlink\" title=\"2. 打包\"></a>2. 打包</h2><h3 id=\"2-1-jar包和war包区别\"><a href=\"#2-1-jar包和war包区别\" class=\"headerlink\" title=\"2.1 jar包和war包区别\"></a>2.1 jar包和war包区别</h3><ul>\n<li>SpringBoot默认支持很多模板引擎，但是JSP只能够在War中使用</li>\n<li>无论是Jar还是War都能够使用嵌套容器，<code>java -jar</code>来独立运行</li>\n<li>但只有war才能部署到外部容器中</li>\n</ul>\n<h3 id=\"2-2-jar包\"><a href=\"#2-2-jar包\" class=\"headerlink\" title=\"2.2 jar包\"></a>2.2 jar包</h3><p><strong>SpringBoot官方推荐打成jar包，服务器上有<code>JDK 1.8</code>以上环境就可以直接运行</strong></p>\n<h4 id=\"1-修改pom-xml文件\"><a href=\"#1-修改pom-xml文件\" class=\"headerlink\" title=\"1.修改pom.xml文件\"></a>1.修改pom.xml文件</h4><p>选择打包方式为jar</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.illusory<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>    <span class=\"comment\">&lt;!--版本号--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>   \t\t <span class=\"comment\">&lt;!--打出来的包的名字 hello-0.0.1-SNAPSHOT.jar--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Demo project for Spring Boot<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span>  \t\t  <span class=\"comment\">&lt;!--打包方式jar/war--&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-打包-1\"><a href=\"#2-打包-1\" class=\"headerlink\" title=\"2. 打包\"></a>2. 打包</h4><p>然后用maven打包。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/springboot/project-package.png\" alt=\"SpringBoot打包\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[INFO] --- maven-jar-plugin:<span class=\"number\">3.1</span>.1:jar (<span class=\"keyword\">default</span>-jar) @ hello ---</span><br><span class=\"line\">[INFO] Building jar: D:\\lillusory\\MyProjects\\hello\\target\\hello-<span class=\"number\">0.0</span>.1-SNAPSHOT.jar</span><br><span class=\"line\">[INFO] </span><br><span class=\"line\">[INFO] --- spring-boot-maven-plugin:<span class=\"number\">2.1</span>.3.RELEASE:repackage (repackage) @ hello ---</span><br><span class=\"line\">[INFO] Replacing main artifact with repackaged archive</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] BUILD SUCCESS</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Total time:  <span class=\"number\">23.922</span> s</span><br><span class=\"line\">[INFO] Finished at: <span class=\"number\">2019</span>-<span class=\"number\">02</span>-<span class=\"number\">22</span>T20:<span class=\"number\">35</span>:<span class=\"number\">40</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span></span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>\n<p>日志中可以看到打出来的包在<code>D:\\lillusory\\MyProjects\\hello\\target\\hello-0.0.1-SNAPSHOT.jar</code></p>\n<h4 id=\"3-测试\"><a href=\"#3-测试\" class=\"headerlink\" title=\"3. 测试\"></a>3. 测试</h4><p>SpringBoot内置了一个Tomcat，可以直接<code>java -jar jarName</code>运行。</p>\n<p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/springboot/jar-run.png\" alt=\"\"></p>\n<p>浏览器访问<code>http://localhost:8080/hello</code>出现<code>hello illusoryCloud</code>说明运行起来了。</p>\n<p>这里的端口号是<code>application.yml</code>全局配置文件中配置的端口号。</p>\n<h3 id=\"2-3-war包\"><a href=\"#2-3-war包\" class=\"headerlink\" title=\"2.3 war包\"></a>2.3 war包</h3><p>同时也可以打成war包然后用服务器上的Tomcat启动。</p>\n<h4 id=\"1-修改pom-xml\"><a href=\"#1-修改pom-xml\" class=\"headerlink\" title=\"1.修改pom.xml\"></a>1.修改pom.xml</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.illusory<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>    <span class=\"comment\">&lt;!--版本号--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>   \t\t <span class=\"comment\">&lt;!--打出来的包的名字 hello-0.0.1-SNAPSHOT.jar--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Demo project for Spring Boot<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span>  \t\t  <span class=\"comment\">&lt;!--打包方式jar/war--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--外置tomcat启动--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>maven中的<code>&lt;scope&gt;provided&lt;/scope&gt;</code>表示这个jar包在编译测试等地方是需要的，但是打包不会一起打包进去，这也避免了此类构件当部署到目标容器后产生包依赖冲突</strong>。由于SpringBoot内置了Tomcat所以这里需要重新配置一下，防止冲突。</p>\n<h4 id=\"2-改造启动类\"><a href=\"#2-改造启动类\" class=\"headerlink\" title=\"2.改造启动类\"></a>2.改造启动类</h4><p><strong>SpringBoot 内置的Tomcat能认识自己的启动项,而外部tomcat是不认识的</strong></p>\n<p>所以需要修改启动类。即继承<code>SpringBootServletInitializer</code>类实现<code>configure</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * SpringBoot启动类</span></span><br><span class=\"line\"><span class=\"comment\"> * 打成war包时需要改造 继承SpringBootServletInitializer实现configure方法</span></span><br><span class=\"line\"><span class=\"comment\"> * 打jar包则不需要</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">SpringBootServletInitializer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> SpringApplicationBuilder <span class=\"title\">configure</span><span class=\"params\">(SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//这里的HelloApplication是SpringBoot的启动类</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.sources(HelloApplication.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(HelloApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-打包\"><a href=\"#3-打包\" class=\"headerlink\" title=\"3. 打包\"></a>3. 打包</h4><p>和上面打包的方式一样的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[INFO] Packaging webapp</span><br><span class=\"line\">[INFO] Assembling webapp [hello] in [D:\\lillusory\\MyProjects\\hello\\target\\hello-<span class=\"number\">0.0</span>.1-SNAPSHOT]</span><br><span class=\"line\">[INFO] Processing war project</span><br><span class=\"line\">[INFO] Webapp assembled in [<span class=\"number\">472</span> msecs]</span><br><span class=\"line\">[INFO] Building war: D:\\lillusory\\MyProjects\\hello\\target\\hello-<span class=\"number\">0.0</span>.1-SNAPSHOT.war</span><br><span class=\"line\">[INFO] --- spring-boot-maven-plugin:<span class=\"number\">2.1</span>.3.RELEASE:repackage (repackage) @ hello ---</span><br><span class=\"line\">[INFO] Replacing main artifact with repackaged archive</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] BUILD SUCCESS</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Total time:  <span class=\"number\">01</span>:<span class=\"number\">00</span> min</span><br><span class=\"line\">[INFO] Finished at: <span class=\"number\">2019</span>-<span class=\"number\">02</span>-<span class=\"number\">22</span>T21:<span class=\"number\">10</span>:<span class=\"number\">10</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span></span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>\n<p>可以看到打出来的war包在<code>D:\\lillusory\\MyProjects\\hello\\target\\hello-0.0.1-SNAPSHOT.war</code></p>\n<h4 id=\"4-测试\"><a href=\"#4-测试\" class=\"headerlink\" title=\"4. 测试\"></a>4. 测试</h4><p>先在电脑上测试一下(Windows环境下)</p>\n<p>将war包复制到<code>Tomcat</code>的<code>webapps</code>文件夹下</p>\n<p>然后找到<code>bin</code>目录下的<code>startup.bat</code>启动Tomcat，项目就会自动启动了。</p>\n<p>浏览器访问<code>http://localhost:8080/hello-0.0.1-SNAPSHOT/hello</code> 出现<code>hello illusoryCloud</code>说明ok的。</p>\n<p>这里<code>hello-0.0.1-SNAPSHOT</code>就是war包的名称，Tomcat启动时会自动解压war包然后启动项目。</p>\n<p>这里的端口号和<code>application.yml</code>全局配置文件中配置的端口号没有关系，是Tomcat中配置的。</p>\n<p>在<code>Tomcat\\conf\\server.xml</code>这个文件中，默认也是8080。</p>\n<p><strong>问题</strong></p>\n<p>我这里启动的时候出现了一个问题</p>\n<p><code>Caused by: java.lang.NoClassDefFoundError: javax/el/ELManager</code></p>\n<p>最后找到原因是<strong>tomcat提供的<code>el-api.jar</code> 和项目里面的el-api.jar冲突</strong>;</p>\n<p>这时候你需要去找到自己电脑上用的el-api的版本,copy到tomcat的lib目录下,覆盖原来的jar包.</p>\n<p>我的在<code>IntelliJ IDEA 2018.3\\lib\\rt\\jasper2.1\\el-api.jar</code>这个目录下</p>\n<p>我看网上说是和Tomcat版本有关系，我这里是<code>7.0.52</code></p>\n<p><strong>Tomcat日志</strong></p>\n<p>若是还有其他问题的话可以查看Tomcat日志。在<code>tomcat\\logs\\catalina.2019-02-22.log</code>这个文件中。</p>\n<h2 id=\"3-部署\"><a href=\"#3-部署\" class=\"headerlink\" title=\"3. 部署\"></a>3. 部署</h2><h3 id=\"3-1-jar包\"><a href=\"#3-1-jar包\" class=\"headerlink\" title=\"3.1 jar包\"></a>3.1 jar包</h3><p>首先将文件上传到服务器上，服务器上有安装JDK8及以上的版本就可以直接运行。</p>\n<p><a href=\"https://www.lixueduan.com/posts/54978294.html\">Linux下JDK的安装及配置点这里</a></p>\n<h4 id=\"1-前台运行\"><a href=\"#1-前台运行\" class=\"headerlink\" title=\"1. 前台运行\"></a>1. 前台运行</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> java -jar hello-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>\n<p>但是这样运行的话是在前台运行，当前窗口关闭后就停止了,或者是运行时没法切出去执行其他任务.</p>\n<h4 id=\"2-后台运行\"><a href=\"#2-后台运行\" class=\"headerlink\" title=\"2. 后台运行\"></a>2. 后台运行</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> nohup java -jar hello-0.0.1-SNAPSHOT.jar &gt;temp.txt &amp;</span><br><span class=\"line\"></span><br><span class=\"line\">//nohup 意思是不挂断运行命令,当账户退出或终端关闭时,程序仍然运行</span><br><span class=\"line\">//这种方法会把日志文件输入到你指定的文件中(temp.txt)</span><br><span class=\"line\">//在哪个目录下运行的该日志文件就会在哪个目录下，没有指定具体文件则会自动创建(nohup.out)</span><br><span class=\"line\">//&amp; 表示后台运行</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-问题\"><a href=\"#3-问题\" class=\"headerlink\" title=\"3. 问题\"></a>3. 问题</h4><p>执行以上命令后出现下面的提示</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup: ignoring input and redirecting stderr to stdout</span><br><span class=\"line\">忽略输出 将错误输出重定向到标准输出</span><br></pre></td></tr></table></figure>\n<p><strong>原因</strong></p>\n<p><code>Linux</code>中<code>0</code>、<code>1</code>和<code>2</code>分别表示<code>标准输</code>入、<code>标准输出</code>和<code>标准错误信息输出</code>，可以用来指定需要重定向的标准输入或输出。在一般使用时，默认的是标准输出，即1。</p>\n<p>例如：<code>2&gt;temp.txt</code>  就是将错误信息写入temp.txt 标准输出还是显示在屏幕上。</p>\n<p>另外，也可以实现0，1，2之间的重定向。<code>2&gt;&amp;1</code>：将错误信息重定向到标准输出。</p>\n<p>Linux下还有一个特殊的文件<code>/dev/null</code>，它就像一个无底洞，所有重定向到它的信息都会消失得无影无踪。</p>\n<p>如果想要<code>正常输出和错误信息都不显示</code>，则要把标准输出和标准错误都重定向到<code>/dev/null</code>， 例如：</p>\n<p> <code>1&gt;/dev/null 2&gt;/dev/null</code></p>\n<p><strong>解决办法</strong></p>\n<p>所以最后的命令就是</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup java -jar hello-0.0.1-SNAPSHOT.jar &gt;temp.txt 2&gt;&amp;1&amp;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost software]# nohup java -jar hello-0.0.1-SNAPSHOT.jar &gt;temp.txt 2&gt;&amp;1&amp;</span><br><span class=\"line\">[1] 22804</span><br><span class=\"line\">// 成功启动 pid为22804</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-测试-1\"><a href=\"#4-测试-1\" class=\"headerlink\" title=\"4. 测试\"></a>4. 测试</h4><p>首先查看服务器的IP</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost software]# ip addr</span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 ::1/128 scope host </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class=\"line\">    link/ether 00:0c:29:8a:48:7d brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 192.168.1.111/24 brd 192.168.1.255 scope global noprefixroute ens33</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::20c:29ff:fe8a:487d/64 scope link </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">3: virbr0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default qlen 1000</span><br><span class=\"line\">    link/ether 52:54:00:8e:d5:31 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">4: virbr0-nic: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast master virbr0 state DOWN group default qlen 1000</span><br><span class=\"line\">    link/ether 52:54:00:8e:d5:31 brd ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></table></figure>\n<p>然后浏览器访问<code>http://192.168.1.111:8080/hello</code>出现<code>hello illusoryCloud</code>说明成功了。</p>\n<p><strong>记得关闭防火墙或者开放8080端口</strong></p>\n<h4 id=\"5-相关Linux命令\"><a href=\"#5-相关Linux命令\" class=\"headerlink\" title=\"5. 相关Linux命令\"></a>5. 相关Linux命令</h4><ul>\n<li>jobs命令和 fg命令</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> jobs</span><br><span class=\"line\">//那么就会列出所有后台执行的作业，并且每个作业前面都有个编号。</span><br><span class=\"line\">[root@localhost software]# jobs</span><br><span class=\"line\">[1]+  Running    nohup java -jar hello-0.0.1-SNAPSHOT.jar &gt; temp.txt 2&gt;&amp;1 &amp;</span><br><span class=\"line\">//如果想将某个作业调回前台控制，只需要 fg + 编号即可。</span><br><span class=\"line\"><span class=\"meta\">$</span> fg 1</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看某端口占用的线程的pid</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -nlp |grep :8080</span><br></pre></td></tr></table></figure>\n<ul>\n<li>kill</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill pid</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-war包\"><a href=\"#3-2-war包\" class=\"headerlink\" title=\"3.2 war包\"></a>3.2 war包</h3><p>war包运行和在windows上运行其实一样的，也是<strong>先将war包copy到Tomcat的webapps目录下，然后启动Tomcat，如果上面测试出现jar包冲突的话这里也需要替换</strong>。</p>\n<p><a href=\"https://www.lixueduan.com/posts/54978294.html\">Linux下Tomcat安装及配置点这里</a></p>\n<h4 id=\"启动Tomcat\"><a href=\"#启动Tomcat\" class=\"headerlink\" title=\"启动Tomcat\"></a>启动Tomcat</h4><p>进入<code>Tomcat\\bin</code>目录执行<code>./startup.sh</code>即可</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost bin]# ./startup.sh </span><br><span class=\"line\">Using CATALINA_BASE:   /usr/local/tomcat</span><br><span class=\"line\">Using CATALINA_HOME:   /usr/local/tomcat</span><br><span class=\"line\">Using CATALINA_TMPDIR: /usr/local/tomcat/temp</span><br><span class=\"line\">Using JRE_HOME:        /usr/local/jdk8</span><br><span class=\"line\">Using CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar</span><br><span class=\"line\">Tomcat started.</span><br></pre></td></tr></table></figure>\n<p>浏览器访问<code>http://192.168.1.111:8080/hello-0.0.1-SNAPSHOT/hello</code>出现<code>hello illusoryCloud</code>说明是没问题的。</p>\n<h2 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4. 参考\"></a>4. 参考</h2><p><code>https://blog.csdn.net/qq_22638399/article/details/81506448</code></p>\n<p><code>https://blog.csdn.net/c1481118216/article/details/53010963</code></p>\n<p><code>https://blog.csdn.net/qq_14853889/article/details/80026885</code></p>"},{"title":"Android事件分发机制详解","abbrlink":"7d3d70a4","date":"2018-08-12T14:00:00.000Z","_content":"\n本文主要记录了Android中的事件分发机制。通过对源码进行分析和实例测试，对Android事件分发机制有了更深的了解。主要为学习Android时的笔记。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 触发过程\n\n### 1.1 点击控件\n\n### 1.2 dispatchTouchEven\n\n一定会执行`dispatchTouchEvent`方法，若当前类没有该方法，则向上往父类查找。\n\n```java\npublic boolean dispatchTouchEvent(MotionEvent event) {\n    if (mOnTouchListener != null && (mViewFlags & ENABLED_MASK) == ENABLED &&\n            mOnTouchListener.onTouch(this, event)) {\n        return true;\n    }\n    return onTouchEvent(event);\n}\n```\n\n* 条件1 mOnTouchListener != null \n\n```java\npublic void setOnTouchListener(OnTouchListener l) {\n    mOnTouchListener = l;\n}\n```\n\n给控件设置监听就会给mOnTouchListener赋值，则条件1成立。\n\n* 条件2 (mViewFlags & ENABLED_MASK) == ENABLED 控件是否是可点击的\n\n* 条件3 mOnTouchListener.onTouch(this, event) 回调onTouch方法，返回true 则成立\n\n**小结：**dispatchTouchEvent 方法中一定会执行onTouch方法，如果onTouch方法返回true 则dispatchTouchEvent方法直接返回true 不会执行if外的 return onTouchEvent(event)。\n\n```java\n       title_bar.setOnTouchListener(new View.OnTouchListener() {\n            @Override\n            public boolean onTouch(View v, MotionEvent event) {\n\t\t\tLog.v(\"Az\",\"onTouch\");\n                return false;\n            }\n        });\n```\n\n在setOnTouchListener时，onTouch方法默认返回false,所以才会执行后面的onTouchEvent方法；\n\n### 1.3 onTouchEvent \n\n```java\npublic boolean onTouchEvent(MotionEvent event) {\n    final int viewFlags = mViewFlags;\n    if ((viewFlags & ENABLED_MASK) == DISABLED) {\n        // A disabled view that is clickable still consumes the touch\n        // events, it just doesn't respond to them.\n        return (((viewFlags & CLICKABLE) == CLICKABLE ||\n                (viewFlags & LONG_CLICKABLE) == LONG_CLICKABLE));\n    }\n    if (mTouchDelegate != null) {\n        if (mTouchDelegate.onTouchEvent(event)) {\n            return true;\n        }\n    }\n    if (((viewFlags & CLICKABLE) == CLICKABLE ||\n            (viewFlags & LONG_CLICKABLE) == LONG_CLICKABLE)) {\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_UP:\n                boolean prepressed = (mPrivateFlags & PREPRESSED) != 0;\n                if ((mPrivateFlags & PRESSED) != 0 || prepressed) {\n                    // take focus if we don't have it already and we should in\n                    // touch mode.\n                    boolean focusTaken = false;\n                    if (isFocusable() && isFocusableInTouchMode() && !isFocused()) {\n                        focusTaken = requestFocus();\n                    }\n                    if (!mHasPerformedLongPress) {\n                        // This is a tap, so remove the longpress check\n                        removeLongPressCallback();\n                        // Only perform take click actions if we were in the pressed state\n                        if (!focusTaken) {\n                            // Use a Runnable and post this rather than calling\n                            // performClick directly. This lets other visual state\n                            // of the view update before click actions start.\n                            if (mPerformClick == null) {\n                                mPerformClick = new PerformClick();\n                            }\n                            if (!post(mPerformClick)) {\n                                performClick();\n                            }\n                        }\n                    }\n                    if (mUnsetPressedState == null) {\n                        mUnsetPressedState = new UnsetPressedState();\n                    }\n                    if (prepressed) {\n                        mPrivateFlags |= PRESSED;\n                        refreshDrawableState();\n                        postDelayed(mUnsetPressedState,\n                                ViewConfiguration.getPressedStateDuration());\n                    } else if (!post(mUnsetPressedState)) {\n                        // If the post failed, unpress right now\n                        mUnsetPressedState.run();\n                    }\n                    removeTapCallback();\n                }\n                break;\n            case MotionEvent.ACTION_DOWN:\n                if (mPendingCheckForTap == null) {\n                    mPendingCheckForTap = new CheckForTap();\n                }\n                mPrivateFlags |= PREPRESSED;\n                mHasPerformedLongPress = false;\n                postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout());\n                break;\n            case MotionEvent.ACTION_CANCEL:\n                mPrivateFlags &= ~PRESSED;\n                refreshDrawableState();\n                removeTapCallback();\n                break;\n            case MotionEvent.ACTION_MOVE:\n                final int x = (int) event.getX();\n                final int y = (int) event.getY();\n                // Be lenient about moving outside of buttons\n                int slop = mTouchSlop;\n                if ((x < 0 - slop) || (x >= getWidth() + slop) ||\n                        (y < 0 - slop) || (y >= getHeight() + slop)) {\n                    // Outside button\n                    removeTapCallback();\n                    if ((mPrivateFlags & PRESSED) != 0) {\n                        // Remove any future long press/tap checks\n                        removeLongPressCallback();\n                        // Need to switch from pressed to not pressed\n                        mPrivateFlags &= ~PRESSED;\n                        refreshDrawableState();\n                    }\n                }\n                break;\n        }\n        return true;\n    }\n    return false;\n}\n\n```\n\n`首先在第14行我们可以看出，如果该控件是可以点击的就会进入到第16行的switch判断中去，而如果当前的事件是抬起手指，则会进入到MotionEvent.ACTION_UP这个case当中。在经过种种判断之后，会执行到第38行的performClick()方法，那我们进入到这个方法里瞧一瞧：` \n\n若当前事件为抬手，则进入performClick方法\n\n```java\npublic boolean performClick() {\n    sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);\n    if (mOnClickListener != null) {\n        playSoundEffect(SoundEffectConstants.CLICK);\n        mOnClickListener.onClick(this);\n        return true;\n    }\n    return false;\n}\n```\n\n如果 mOnClickListener != null 则会执行onClick方法，\n\n```java\npublic void setOnClickListener(OnClickListener l) {\n    if (!isClickable()) {\n        setClickable(true);\n    }\n    mOnClickListener = l;\n}\n```\n\n所以只要给控件设置了点击监听，setOnClickListener就会给mOnClickListener赋值，上面条件就成立，然后回调onClick方法。\n\n到这儿差不多就清楚了分发流程。\n\n`这样View的整个事件分发的流程就让我们搞清楚了！不过别高兴的太早，现在还没结束，还有一个很重要的知识点需要说明，就是touch事件的层级传递。我们都知道如果给一个控件注册了touch事件，每次点击它的时候都会触发一系列的ACTION_DOWN，ACTION_MOVE，ACTION_UP等事件。这里需要注意，如果你在执行ACTION_DOWN的时候返回了false，后面一系列其它的action就不会再得到执行了。简单的说，就是当dispatchTouchEvent在进行事件分发的时候，只有前一个action返回true，才会触发后一个action。` \n\n```java\npublic boolean onTouchEvent(MotionEvent event) { \n    //省略...\nif (((viewFlags & CLICKABLE) == CLICKABLE ||\n                (viewFlags & LONG_CLICKABLE) == LONG_CLICKABLE)) {\n            switch (event.getAction()) {\n                case MotionEvent.ACTION_UP:\n                    break;\n                case MotionEvent.ACTION_DOWN:      \n                    break;\n                case MotionEvent.ACTION_CANCEL:             \n                    break;\n                case MotionEvent.ACTION_MOVE:\n                    break;\n            }\n            return true;\n        }\n}\n```\n\n可以看出在dispatchTouchEvent方法中，onTouch方法返回false,然后执行onTouchEvent方法，在进入if判断后，不管进入那个case,最后都会return true,所以才会执行后续的action.\n\n`**1. onTouch和onTouchEvent有什么区别，又该如何使用？**` \n\n都是dispatchTouchEvent中的方法，onTouch优先级高，若onTouch返回true，就会消费掉当前事件，onTouchEvent就不会执行。\n\n要执行onTouch也需要两个条件，1 给控件设置了触摸监听OnTouchListener ，2该控件是可以点击的。\n\n若控件是非enable的，则不会执行onTouch方法，会执行onTouchEvent，所以想要监听ouTouch事件只能重写onTouchEvent方法来实现。\n\n**小结：**\n\n**控件被点击或触摸后一定会执行dispatchTouchEvent方法（当前类没有则去父类找），如果设置了触摸监听且控件是enable的，就执行onTouch方法 。OnTouch方法返回true则消耗掉本次事件，不执行后面的方法，返回false则执行onTouchEvent方法，如果设置了点击监听且控件是enable的，就在抬手的时候执行onClick方法。**\n\n**给一个控件注册了touch事件，每次点击它的时候都会触发一系列的ACTION_DOWN，ACTION_MOVE，ACTION_UP等事件。当dispatchTouchEvent在进行事件分发的时候，只有前一个action返回true，才会触发后一个action。** \n\n## 2. ViewGroup\n\n`Android中touch事件的传递，绝对是先传递到ViewGroup，再传递到View的` \n\n`上边说只要你触摸了任何控件，就一定会调用该控件的dispatchTouchEvent方法。这个说法没错，只不过还不完整而已。实际情况是，当你点击了某个控件，首先会去调用该控件所在布局的dispatchTouchEvent方法，然后在布局的dispatchTouchEvent方法中找到被点击的相应控件，再去调用该控件的dispatchTouchEvent方法。` \n\nViewGroup的dispatchTouchEvent方法\n\n```java\npublic boolean dispatchTouchEvent(MotionEvent ev) {\n    final int action = ev.getAction();\n    final float xf = ev.getX();\n    final float yf = ev.getY();\n    final float scrolledXFloat = xf + mScrollX;\n    final float scrolledYFloat = yf + mScrollY;\n    final Rect frame = mTempRect;\n    boolean disallowIntercept = (mGroupFlags & FLAG_DISALLOW_INTERCEPT) != 0;\n    if (action == MotionEvent.ACTION_DOWN) {\n        if (mMotionTarget != null) {\n            mMotionTarget = null;\n        }\n        if (disallowIntercept || !onInterceptTouchEvent(ev)) {\n            ev.setAction(MotionEvent.ACTION_DOWN);\n            final int scrolledXInt = (int) scrolledXFloat;\n            final int scrolledYInt = (int) scrolledYFloat;\n            final View[] children = mChildren;\n            final int count = mChildrenCount;\n            for (int i = count - 1; i >= 0; i--) {\n                final View child = children[i];\n                if ((child.mViewFlags & VISIBILITY_MASK) == VISIBLE\n                        || child.getAnimation() != null) {\n                    child.getHitRect(frame);\n                    if (frame.contains(scrolledXInt, scrolledYInt)) {\n                        final float xc = scrolledXFloat - child.mLeft;\n                        final float yc = scrolledYFloat - child.mTop;\n                        ev.setLocation(xc, yc);\n                        child.mPrivateFlags &= ~CANCEL_NEXT_UP_EVENT;\n                        if (child.dispatchTouchEvent(ev))  {\n                            mMotionTarget = child;\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    boolean isUpOrCancel = (action == MotionEvent.ACTION_UP) ||\n            (action == MotionEvent.ACTION_CANCEL);\n    if (isUpOrCancel) {\n        mGroupFlags &= ~FLAG_DISALLOW_INTERCEPT;\n    }\n    final View target = mMotionTarget;\n    if (target == null) {\n        ev.setLocation(xf, yf);\n        if ((mPrivateFlags & CANCEL_NEXT_UP_EVENT) != 0) {\n            ev.setAction(MotionEvent.ACTION_CANCEL);\n            mPrivateFlags &= ~CANCEL_NEXT_UP_EVENT;\n        }\n        return super.dispatchTouchEvent(ev);\n    }\n    if (!disallowIntercept && onInterceptTouchEvent(ev)) {\n        final float xc = scrolledXFloat - (float) target.mLeft;\n        final float yc = scrolledYFloat - (float) target.mTop;\n        mPrivateFlags &= ~CANCEL_NEXT_UP_EVENT;\n        ev.setAction(MotionEvent.ACTION_CANCEL);\n        ev.setLocation(xc, yc);\n        if (!target.dispatchTouchEvent(ev)) {\n        }\n        mMotionTarget = null;\n        return true;\n    }\n    if (isUpOrCancel) {\n        mMotionTarget = null;\n    }\n    final float xc = scrolledXFloat - (float) target.mLeft;\n    final float yc = scrolledYFloat - (float) target.mTop;\n    ev.setLocation(xc, yc);\n    if ((target.mPrivateFlags & CANCEL_NEXT_UP_EVENT) != 0) {\n        ev.setAction(MotionEvent.ACTION_CANCEL);\n        target.mPrivateFlags &= ~CANCEL_NEXT_UP_EVENT;\n        mMotionTarget = null;\n    }\n    return target.dispatchTouchEvent(ev);\n}\n\n```\n\n第二个if语句  if (disallowIntercept || !onInterceptTouchEvent(ev)\n\n第一个条件disallowIntercept 是否禁用掉事件拦截的功能，默认是false 所以是否进入if内部就由第二个条件决定了。 \n\nViewGroup中有一个onInterceptTouchEvent方法  是否拦截触摸事件 默认返回false 即不拦截\n\n```java\npublic boolean onInterceptTouchEvent(MotionEvent ev) {\n    return false;\n}\n```\n\n第二个条件  !onInterceptTouchEvent(ev) 对返回值取反 即返回false不拦截触摸事件时进入if内部，返回true拦截时不进入if内部\n\n```java\n//省略。。。\nif (disallowIntercept || !onInterceptTouchEvent(ev)) {\n            for (int i = count - 1; i >= 0; i--) {//遍历当前ViewGroup下的所有子View\n                if ((child.mViewFlags & VISIBILITY_MASK) == VISIBLE\n                        || child.getAnimation() != null) {\n                    if (frame.contains(scrolledXInt, scrolledYInt)) {//判断当前遍历的View是不是正在点击的View\n                        if (child.dispatchTouchEvent(ev))  {//是则调用子View的dispatchTouchEvent\n                            mMotionTarget = child;\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n```\n\nif内部对子View进行了遍历，最终调用子View的dispatchTouchEvent，然后控件可点击那么dispatchTouchEvent一定会返回true，所以后面的代码就执行不了。\n\n即 ViewGroup 的onInterceptTouchEvent返回false,不拦截触摸事件时，最终会执行子View的dispatchTouchEvent。\n\n ViewGroup 的onInterceptTouchEvent返回true,拦截触摸事件，就不会进入if内部，则会执行到后面的程序\n\n```java\nif (target == null) {\n        ev.setLocation(xf, yf);\n        if ((mPrivateFlags & CANCEL_NEXT_UP_EVENT) != 0) {\n            ev.setAction(MotionEvent.ACTION_CANCEL);\n            mPrivateFlags &= ~CANCEL_NEXT_UP_EVENT;\n        }\n        return super.dispatchTouchEvent(ev);\n    }\n```\n\n可以看到，最后会执行super.dispatchTouchEvent(ev)，执行父类即View的dispatchTouchEvent。\n\nView的dispatchTouchEvent如下：\n\n```java\npublic boolean dispatchTouchEvent(MotionEvent event) {\n    if (mOnTouchListener != null && (mViewFlags & ENABLED_MASK) == ENABLED &&\n            mOnTouchListener.onTouch(this, event)) {\n        return true;\n    }\n    return onTouchEvent(event);\n}\n```\n\n然后又和前面的一样了。执行onTouch或者onTouchEvent。。\n\n## 3. 总结\n\n### 传递顺序\n\n`Activity －> PhoneWindow －> DecorView －> ViewGroup －> … －> View `\n\n通俗语言总结一下，事件来的时候，\n\nActivity会询问Window，Window这个事件你能不能消耗，\n\nWindow一看，你先等等，我去问问DecorView他能不能消耗，\n\nDecorView一看，onInterceptTouchEvent返回false啊，不让我拦截啊，\n\n**(DecorView继承自FrameLayout,FrameLayout是ViewGroup的子类，所以DecorView也是ViewGroup的子类，事件从Activity传到了ViewGroup)**\n\n遍历一下子View吧，问问他们能不能消耗，那个谁，事件按在你的身上了，你看看你能不能消耗，\n\n**假如子View为RelativeLayout**\n\nRelativeLayout一看，也没有让我拦截啊，我也得遍历看看这个事件发生在那个子View上面，\n\n**到这儿事件从ViewGroup传到View上了**\n\n那个TextView,事件在你身上，你能不能消耗了他。TextView一看，消耗不了啊，\n\nRelativeLayout一看TextView消耗不了啊，mFirstTouchTarget==null啊，得，我自己消耗吧，嗯！一看自己的onTouchEvent也消耗不了啊！那个DecorView事件我消耗不了，\n\nDecorView一看自己，我也消耗不了，继续往上传，那个Window啊。事件我消耗不了啊，\n\nWindow再告诉Activity事件消耗不了啊。\n\nActivity还得我自己来啊。调用自己的onTouchEvent，还是消耗不了，算了，不要了。\n\n**最后Activity的onTouchEvent无论返回什么，事件分发都结束。（如果事件在边界范围外默认会返回false）**\n\n## 参考\n\n`https://blog.csdn.net/guolin_blog/article/details/9097463`\n\n`https://blog.csdn.net/guolin_blog/article/details/9153747`","source":"_posts/android/view-click-event.md","raw":"---\ntitle: Android事件分发机制详解\ntags:\n  - Android\ncategories:\n  - Android\nabbrlink: 7d3d70a4\ndate: 2018-08-12 22:00:00\n---\n\n本文主要记录了Android中的事件分发机制。通过对源码进行分析和实例测试，对Android事件分发机制有了更深的了解。主要为学习Android时的笔记。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. 触发过程\n\n### 1.1 点击控件\n\n### 1.2 dispatchTouchEven\n\n一定会执行`dispatchTouchEvent`方法，若当前类没有该方法，则向上往父类查找。\n\n```java\npublic boolean dispatchTouchEvent(MotionEvent event) {\n    if (mOnTouchListener != null && (mViewFlags & ENABLED_MASK) == ENABLED &&\n            mOnTouchListener.onTouch(this, event)) {\n        return true;\n    }\n    return onTouchEvent(event);\n}\n```\n\n* 条件1 mOnTouchListener != null \n\n```java\npublic void setOnTouchListener(OnTouchListener l) {\n    mOnTouchListener = l;\n}\n```\n\n给控件设置监听就会给mOnTouchListener赋值，则条件1成立。\n\n* 条件2 (mViewFlags & ENABLED_MASK) == ENABLED 控件是否是可点击的\n\n* 条件3 mOnTouchListener.onTouch(this, event) 回调onTouch方法，返回true 则成立\n\n**小结：**dispatchTouchEvent 方法中一定会执行onTouch方法，如果onTouch方法返回true 则dispatchTouchEvent方法直接返回true 不会执行if外的 return onTouchEvent(event)。\n\n```java\n       title_bar.setOnTouchListener(new View.OnTouchListener() {\n            @Override\n            public boolean onTouch(View v, MotionEvent event) {\n\t\t\tLog.v(\"Az\",\"onTouch\");\n                return false;\n            }\n        });\n```\n\n在setOnTouchListener时，onTouch方法默认返回false,所以才会执行后面的onTouchEvent方法；\n\n### 1.3 onTouchEvent \n\n```java\npublic boolean onTouchEvent(MotionEvent event) {\n    final int viewFlags = mViewFlags;\n    if ((viewFlags & ENABLED_MASK) == DISABLED) {\n        // A disabled view that is clickable still consumes the touch\n        // events, it just doesn't respond to them.\n        return (((viewFlags & CLICKABLE) == CLICKABLE ||\n                (viewFlags & LONG_CLICKABLE) == LONG_CLICKABLE));\n    }\n    if (mTouchDelegate != null) {\n        if (mTouchDelegate.onTouchEvent(event)) {\n            return true;\n        }\n    }\n    if (((viewFlags & CLICKABLE) == CLICKABLE ||\n            (viewFlags & LONG_CLICKABLE) == LONG_CLICKABLE)) {\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_UP:\n                boolean prepressed = (mPrivateFlags & PREPRESSED) != 0;\n                if ((mPrivateFlags & PRESSED) != 0 || prepressed) {\n                    // take focus if we don't have it already and we should in\n                    // touch mode.\n                    boolean focusTaken = false;\n                    if (isFocusable() && isFocusableInTouchMode() && !isFocused()) {\n                        focusTaken = requestFocus();\n                    }\n                    if (!mHasPerformedLongPress) {\n                        // This is a tap, so remove the longpress check\n                        removeLongPressCallback();\n                        // Only perform take click actions if we were in the pressed state\n                        if (!focusTaken) {\n                            // Use a Runnable and post this rather than calling\n                            // performClick directly. This lets other visual state\n                            // of the view update before click actions start.\n                            if (mPerformClick == null) {\n                                mPerformClick = new PerformClick();\n                            }\n                            if (!post(mPerformClick)) {\n                                performClick();\n                            }\n                        }\n                    }\n                    if (mUnsetPressedState == null) {\n                        mUnsetPressedState = new UnsetPressedState();\n                    }\n                    if (prepressed) {\n                        mPrivateFlags |= PRESSED;\n                        refreshDrawableState();\n                        postDelayed(mUnsetPressedState,\n                                ViewConfiguration.getPressedStateDuration());\n                    } else if (!post(mUnsetPressedState)) {\n                        // If the post failed, unpress right now\n                        mUnsetPressedState.run();\n                    }\n                    removeTapCallback();\n                }\n                break;\n            case MotionEvent.ACTION_DOWN:\n                if (mPendingCheckForTap == null) {\n                    mPendingCheckForTap = new CheckForTap();\n                }\n                mPrivateFlags |= PREPRESSED;\n                mHasPerformedLongPress = false;\n                postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout());\n                break;\n            case MotionEvent.ACTION_CANCEL:\n                mPrivateFlags &= ~PRESSED;\n                refreshDrawableState();\n                removeTapCallback();\n                break;\n            case MotionEvent.ACTION_MOVE:\n                final int x = (int) event.getX();\n                final int y = (int) event.getY();\n                // Be lenient about moving outside of buttons\n                int slop = mTouchSlop;\n                if ((x < 0 - slop) || (x >= getWidth() + slop) ||\n                        (y < 0 - slop) || (y >= getHeight() + slop)) {\n                    // Outside button\n                    removeTapCallback();\n                    if ((mPrivateFlags & PRESSED) != 0) {\n                        // Remove any future long press/tap checks\n                        removeLongPressCallback();\n                        // Need to switch from pressed to not pressed\n                        mPrivateFlags &= ~PRESSED;\n                        refreshDrawableState();\n                    }\n                }\n                break;\n        }\n        return true;\n    }\n    return false;\n}\n\n```\n\n`首先在第14行我们可以看出，如果该控件是可以点击的就会进入到第16行的switch判断中去，而如果当前的事件是抬起手指，则会进入到MotionEvent.ACTION_UP这个case当中。在经过种种判断之后，会执行到第38行的performClick()方法，那我们进入到这个方法里瞧一瞧：` \n\n若当前事件为抬手，则进入performClick方法\n\n```java\npublic boolean performClick() {\n    sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);\n    if (mOnClickListener != null) {\n        playSoundEffect(SoundEffectConstants.CLICK);\n        mOnClickListener.onClick(this);\n        return true;\n    }\n    return false;\n}\n```\n\n如果 mOnClickListener != null 则会执行onClick方法，\n\n```java\npublic void setOnClickListener(OnClickListener l) {\n    if (!isClickable()) {\n        setClickable(true);\n    }\n    mOnClickListener = l;\n}\n```\n\n所以只要给控件设置了点击监听，setOnClickListener就会给mOnClickListener赋值，上面条件就成立，然后回调onClick方法。\n\n到这儿差不多就清楚了分发流程。\n\n`这样View的整个事件分发的流程就让我们搞清楚了！不过别高兴的太早，现在还没结束，还有一个很重要的知识点需要说明，就是touch事件的层级传递。我们都知道如果给一个控件注册了touch事件，每次点击它的时候都会触发一系列的ACTION_DOWN，ACTION_MOVE，ACTION_UP等事件。这里需要注意，如果你在执行ACTION_DOWN的时候返回了false，后面一系列其它的action就不会再得到执行了。简单的说，就是当dispatchTouchEvent在进行事件分发的时候，只有前一个action返回true，才会触发后一个action。` \n\n```java\npublic boolean onTouchEvent(MotionEvent event) { \n    //省略...\nif (((viewFlags & CLICKABLE) == CLICKABLE ||\n                (viewFlags & LONG_CLICKABLE) == LONG_CLICKABLE)) {\n            switch (event.getAction()) {\n                case MotionEvent.ACTION_UP:\n                    break;\n                case MotionEvent.ACTION_DOWN:      \n                    break;\n                case MotionEvent.ACTION_CANCEL:             \n                    break;\n                case MotionEvent.ACTION_MOVE:\n                    break;\n            }\n            return true;\n        }\n}\n```\n\n可以看出在dispatchTouchEvent方法中，onTouch方法返回false,然后执行onTouchEvent方法，在进入if判断后，不管进入那个case,最后都会return true,所以才会执行后续的action.\n\n`**1. onTouch和onTouchEvent有什么区别，又该如何使用？**` \n\n都是dispatchTouchEvent中的方法，onTouch优先级高，若onTouch返回true，就会消费掉当前事件，onTouchEvent就不会执行。\n\n要执行onTouch也需要两个条件，1 给控件设置了触摸监听OnTouchListener ，2该控件是可以点击的。\n\n若控件是非enable的，则不会执行onTouch方法，会执行onTouchEvent，所以想要监听ouTouch事件只能重写onTouchEvent方法来实现。\n\n**小结：**\n\n**控件被点击或触摸后一定会执行dispatchTouchEvent方法（当前类没有则去父类找），如果设置了触摸监听且控件是enable的，就执行onTouch方法 。OnTouch方法返回true则消耗掉本次事件，不执行后面的方法，返回false则执行onTouchEvent方法，如果设置了点击监听且控件是enable的，就在抬手的时候执行onClick方法。**\n\n**给一个控件注册了touch事件，每次点击它的时候都会触发一系列的ACTION_DOWN，ACTION_MOVE，ACTION_UP等事件。当dispatchTouchEvent在进行事件分发的时候，只有前一个action返回true，才会触发后一个action。** \n\n## 2. ViewGroup\n\n`Android中touch事件的传递，绝对是先传递到ViewGroup，再传递到View的` \n\n`上边说只要你触摸了任何控件，就一定会调用该控件的dispatchTouchEvent方法。这个说法没错，只不过还不完整而已。实际情况是，当你点击了某个控件，首先会去调用该控件所在布局的dispatchTouchEvent方法，然后在布局的dispatchTouchEvent方法中找到被点击的相应控件，再去调用该控件的dispatchTouchEvent方法。` \n\nViewGroup的dispatchTouchEvent方法\n\n```java\npublic boolean dispatchTouchEvent(MotionEvent ev) {\n    final int action = ev.getAction();\n    final float xf = ev.getX();\n    final float yf = ev.getY();\n    final float scrolledXFloat = xf + mScrollX;\n    final float scrolledYFloat = yf + mScrollY;\n    final Rect frame = mTempRect;\n    boolean disallowIntercept = (mGroupFlags & FLAG_DISALLOW_INTERCEPT) != 0;\n    if (action == MotionEvent.ACTION_DOWN) {\n        if (mMotionTarget != null) {\n            mMotionTarget = null;\n        }\n        if (disallowIntercept || !onInterceptTouchEvent(ev)) {\n            ev.setAction(MotionEvent.ACTION_DOWN);\n            final int scrolledXInt = (int) scrolledXFloat;\n            final int scrolledYInt = (int) scrolledYFloat;\n            final View[] children = mChildren;\n            final int count = mChildrenCount;\n            for (int i = count - 1; i >= 0; i--) {\n                final View child = children[i];\n                if ((child.mViewFlags & VISIBILITY_MASK) == VISIBLE\n                        || child.getAnimation() != null) {\n                    child.getHitRect(frame);\n                    if (frame.contains(scrolledXInt, scrolledYInt)) {\n                        final float xc = scrolledXFloat - child.mLeft;\n                        final float yc = scrolledYFloat - child.mTop;\n                        ev.setLocation(xc, yc);\n                        child.mPrivateFlags &= ~CANCEL_NEXT_UP_EVENT;\n                        if (child.dispatchTouchEvent(ev))  {\n                            mMotionTarget = child;\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    boolean isUpOrCancel = (action == MotionEvent.ACTION_UP) ||\n            (action == MotionEvent.ACTION_CANCEL);\n    if (isUpOrCancel) {\n        mGroupFlags &= ~FLAG_DISALLOW_INTERCEPT;\n    }\n    final View target = mMotionTarget;\n    if (target == null) {\n        ev.setLocation(xf, yf);\n        if ((mPrivateFlags & CANCEL_NEXT_UP_EVENT) != 0) {\n            ev.setAction(MotionEvent.ACTION_CANCEL);\n            mPrivateFlags &= ~CANCEL_NEXT_UP_EVENT;\n        }\n        return super.dispatchTouchEvent(ev);\n    }\n    if (!disallowIntercept && onInterceptTouchEvent(ev)) {\n        final float xc = scrolledXFloat - (float) target.mLeft;\n        final float yc = scrolledYFloat - (float) target.mTop;\n        mPrivateFlags &= ~CANCEL_NEXT_UP_EVENT;\n        ev.setAction(MotionEvent.ACTION_CANCEL);\n        ev.setLocation(xc, yc);\n        if (!target.dispatchTouchEvent(ev)) {\n        }\n        mMotionTarget = null;\n        return true;\n    }\n    if (isUpOrCancel) {\n        mMotionTarget = null;\n    }\n    final float xc = scrolledXFloat - (float) target.mLeft;\n    final float yc = scrolledYFloat - (float) target.mTop;\n    ev.setLocation(xc, yc);\n    if ((target.mPrivateFlags & CANCEL_NEXT_UP_EVENT) != 0) {\n        ev.setAction(MotionEvent.ACTION_CANCEL);\n        target.mPrivateFlags &= ~CANCEL_NEXT_UP_EVENT;\n        mMotionTarget = null;\n    }\n    return target.dispatchTouchEvent(ev);\n}\n\n```\n\n第二个if语句  if (disallowIntercept || !onInterceptTouchEvent(ev)\n\n第一个条件disallowIntercept 是否禁用掉事件拦截的功能，默认是false 所以是否进入if内部就由第二个条件决定了。 \n\nViewGroup中有一个onInterceptTouchEvent方法  是否拦截触摸事件 默认返回false 即不拦截\n\n```java\npublic boolean onInterceptTouchEvent(MotionEvent ev) {\n    return false;\n}\n```\n\n第二个条件  !onInterceptTouchEvent(ev) 对返回值取反 即返回false不拦截触摸事件时进入if内部，返回true拦截时不进入if内部\n\n```java\n//省略。。。\nif (disallowIntercept || !onInterceptTouchEvent(ev)) {\n            for (int i = count - 1; i >= 0; i--) {//遍历当前ViewGroup下的所有子View\n                if ((child.mViewFlags & VISIBILITY_MASK) == VISIBLE\n                        || child.getAnimation() != null) {\n                    if (frame.contains(scrolledXInt, scrolledYInt)) {//判断当前遍历的View是不是正在点击的View\n                        if (child.dispatchTouchEvent(ev))  {//是则调用子View的dispatchTouchEvent\n                            mMotionTarget = child;\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n```\n\nif内部对子View进行了遍历，最终调用子View的dispatchTouchEvent，然后控件可点击那么dispatchTouchEvent一定会返回true，所以后面的代码就执行不了。\n\n即 ViewGroup 的onInterceptTouchEvent返回false,不拦截触摸事件时，最终会执行子View的dispatchTouchEvent。\n\n ViewGroup 的onInterceptTouchEvent返回true,拦截触摸事件，就不会进入if内部，则会执行到后面的程序\n\n```java\nif (target == null) {\n        ev.setLocation(xf, yf);\n        if ((mPrivateFlags & CANCEL_NEXT_UP_EVENT) != 0) {\n            ev.setAction(MotionEvent.ACTION_CANCEL);\n            mPrivateFlags &= ~CANCEL_NEXT_UP_EVENT;\n        }\n        return super.dispatchTouchEvent(ev);\n    }\n```\n\n可以看到，最后会执行super.dispatchTouchEvent(ev)，执行父类即View的dispatchTouchEvent。\n\nView的dispatchTouchEvent如下：\n\n```java\npublic boolean dispatchTouchEvent(MotionEvent event) {\n    if (mOnTouchListener != null && (mViewFlags & ENABLED_MASK) == ENABLED &&\n            mOnTouchListener.onTouch(this, event)) {\n        return true;\n    }\n    return onTouchEvent(event);\n}\n```\n\n然后又和前面的一样了。执行onTouch或者onTouchEvent。。\n\n## 3. 总结\n\n### 传递顺序\n\n`Activity －> PhoneWindow －> DecorView －> ViewGroup －> … －> View `\n\n通俗语言总结一下，事件来的时候，\n\nActivity会询问Window，Window这个事件你能不能消耗，\n\nWindow一看，你先等等，我去问问DecorView他能不能消耗，\n\nDecorView一看，onInterceptTouchEvent返回false啊，不让我拦截啊，\n\n**(DecorView继承自FrameLayout,FrameLayout是ViewGroup的子类，所以DecorView也是ViewGroup的子类，事件从Activity传到了ViewGroup)**\n\n遍历一下子View吧，问问他们能不能消耗，那个谁，事件按在你的身上了，你看看你能不能消耗，\n\n**假如子View为RelativeLayout**\n\nRelativeLayout一看，也没有让我拦截啊，我也得遍历看看这个事件发生在那个子View上面，\n\n**到这儿事件从ViewGroup传到View上了**\n\n那个TextView,事件在你身上，你能不能消耗了他。TextView一看，消耗不了啊，\n\nRelativeLayout一看TextView消耗不了啊，mFirstTouchTarget==null啊，得，我自己消耗吧，嗯！一看自己的onTouchEvent也消耗不了啊！那个DecorView事件我消耗不了，\n\nDecorView一看自己，我也消耗不了，继续往上传，那个Window啊。事件我消耗不了啊，\n\nWindow再告诉Activity事件消耗不了啊。\n\nActivity还得我自己来啊。调用自己的onTouchEvent，还是消耗不了，算了，不要了。\n\n**最后Activity的onTouchEvent无论返回什么，事件分发都结束。（如果事件在边界范围外默认会返回false）**\n\n## 参考\n\n`https://blog.csdn.net/guolin_blog/article/details/9097463`\n\n`https://blog.csdn.net/guolin_blog/article/details/9153747`","slug":"android/view-click-event","published":1,"updated":"2019-02-06T01:19:36.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv4c8005g0ww42ppi1h81","content":"<p>本文主要记录了Android中的事件分发机制。通过对源码进行分析和实例测试，对Android事件分发机制有了更深的了解。主要为学习Android时的笔记。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-触发过程\"><a href=\"#1-触发过程\" class=\"headerlink\" title=\"1. 触发过程\"></a>1. 触发过程</h2><h3 id=\"1-1-点击控件\"><a href=\"#1-1-点击控件\" class=\"headerlink\" title=\"1.1 点击控件\"></a>1.1 点击控件</h3><h3 id=\"1-2-dispatchTouchEven\"><a href=\"#1-2-dispatchTouchEven\" class=\"headerlink\" title=\"1.2 dispatchTouchEven\"></a>1.2 dispatchTouchEven</h3><p>一定会执行<code>dispatchTouchEvent</code>方法，若当前类没有该方法，则向上往父类查找。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mOnTouchListener != <span class=\"keyword\">null</span> &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED &amp;&amp;</span><br><span class=\"line\">            mOnTouchListener.onTouch(<span class=\"keyword\">this</span>, event)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> onTouchEvent(event);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>条件1 mOnTouchListener != null </li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setOnTouchListener</span><span class=\"params\">(OnTouchListener l)</span> </span>&#123;</span><br><span class=\"line\">    mOnTouchListener = l;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>给控件设置监听就会给mOnTouchListener赋值，则条件1成立。</p>\n<ul>\n<li><p>条件2 (mViewFlags &amp; ENABLED_MASK) == ENABLED 控件是否是可点击的</p>\n</li>\n<li><p>条件3 mOnTouchListener.onTouch(this, event) 回调onTouch方法，返回true 则成立</p>\n</li>\n</ul>\n<p><strong>小结：</strong>dispatchTouchEvent 方法中一定会执行onTouch方法，如果onTouch方法返回true 则dispatchTouchEvent方法直接返回true 不会执行if外的 return onTouchEvent(event)。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    title_bar.setOnTouchListener(<span class=\"keyword\">new</span> View.OnTouchListener() &#123;</span><br><span class=\"line\">         <span class=\"meta\">@Override</span></span><br><span class=\"line\">         <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouch</span><span class=\"params\">(View v, MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">Log.v(<span class=\"string\">\"Az\"</span>,<span class=\"string\">\"onTouch\"</span>);</span><br><span class=\"line\">             <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;);</span><br></pre></td></tr></table></figure>\n<p>在setOnTouchListener时，onTouch方法默认返回false,所以才会执行后面的onTouchEvent方法；</p>\n<h3 id=\"1-3-onTouchEvent\"><a href=\"#1-3-onTouchEvent\" class=\"headerlink\" title=\"1.3 onTouchEvent\"></a>1.3 onTouchEvent</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> viewFlags = mViewFlags;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((viewFlags &amp; ENABLED_MASK) == DISABLED) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// A disabled view that is clickable still consumes the touch</span></span><br><span class=\"line\">        <span class=\"comment\">// events, it just doesn't respond to them.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (((viewFlags &amp; CLICKABLE) == CLICKABLE ||</span><br><span class=\"line\">                (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mTouchDelegate != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mTouchDelegate.onTouchEvent(event)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (((viewFlags &amp; CLICKABLE) == CLICKABLE ||</span><br><span class=\"line\">            (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (event.getAction()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> prepressed = (mPrivateFlags &amp; PREPRESSED) != <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((mPrivateFlags &amp; PRESSED) != <span class=\"number\">0</span> || prepressed) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// take focus if we don't have it already and we should in</span></span><br><span class=\"line\">                    <span class=\"comment\">// touch mode.</span></span><br><span class=\"line\">                    <span class=\"keyword\">boolean</span> focusTaken = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (isFocusable() &amp;&amp; isFocusableInTouchMode() &amp;&amp; !isFocused()) &#123;</span><br><span class=\"line\">                        focusTaken = requestFocus();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!mHasPerformedLongPress) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// This is a tap, so remove the longpress check</span></span><br><span class=\"line\">                        removeLongPressCallback();</span><br><span class=\"line\">                        <span class=\"comment\">// Only perform take click actions if we were in the pressed state</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!focusTaken) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// Use a Runnable and post this rather than calling</span></span><br><span class=\"line\">                            <span class=\"comment\">// performClick directly. This lets other visual state</span></span><br><span class=\"line\">                            <span class=\"comment\">// of the view update before click actions start.</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (mPerformClick == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                                mPerformClick = <span class=\"keyword\">new</span> PerformClick();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (!post(mPerformClick)) &#123;</span><br><span class=\"line\">                                performClick();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (mUnsetPressedState == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        mUnsetPressedState = <span class=\"keyword\">new</span> UnsetPressedState();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (prepressed) &#123;</span><br><span class=\"line\">                        mPrivateFlags |= PRESSED;</span><br><span class=\"line\">                        refreshDrawableState();</span><br><span class=\"line\">                        postDelayed(mUnsetPressedState,</span><br><span class=\"line\">                                ViewConfiguration.getPressedStateDuration());</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!post(mUnsetPressedState)) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// If the post failed, unpress right now</span></span><br><span class=\"line\">                        mUnsetPressedState.run();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    removeTapCallback();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mPendingCheckForTap == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    mPendingCheckForTap = <span class=\"keyword\">new</span> CheckForTap();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                mPrivateFlags |= PREPRESSED;</span><br><span class=\"line\">                mHasPerformedLongPress = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout());</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class=\"line\">                mPrivateFlags &amp;= ~PRESSED;</span><br><span class=\"line\">                refreshDrawableState();</span><br><span class=\"line\">                removeTapCallback();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</span><br><span class=\"line\">                <span class=\"comment\">// Be lenient about moving outside of buttons</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> slop = mTouchSlop;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((x &lt; <span class=\"number\">0</span> - slop) || (x &gt;= getWidth() + slop) ||</span><br><span class=\"line\">                        (y &lt; <span class=\"number\">0</span> - slop) || (y &gt;= getHeight() + slop)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Outside button</span></span><br><span class=\"line\">                    removeTapCallback();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ((mPrivateFlags &amp; PRESSED) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// Remove any future long press/tap checks</span></span><br><span class=\"line\">                        removeLongPressCallback();</span><br><span class=\"line\">                        <span class=\"comment\">// Need to switch from pressed to not pressed</span></span><br><span class=\"line\">                        mPrivateFlags &amp;= ~PRESSED;</span><br><span class=\"line\">                        refreshDrawableState();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>首先在第14行我们可以看出，如果该控件是可以点击的就会进入到第16行的switch判断中去，而如果当前的事件是抬起手指，则会进入到MotionEvent.ACTION_UP这个case当中。在经过种种判断之后，会执行到第38行的performClick()方法，那我们进入到这个方法里瞧一瞧：</code> </p>\n<p>若当前事件为抬手，则进入performClick方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">performClick</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mOnClickListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        playSoundEffect(SoundEffectConstants.CLICK);</span><br><span class=\"line\">        mOnClickListener.onClick(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果 mOnClickListener != null 则会执行onClick方法，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setOnClickListener</span><span class=\"params\">(OnClickListener l)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isClickable()) &#123;</span><br><span class=\"line\">        setClickable(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mOnClickListener = l;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以只要给控件设置了点击监听，setOnClickListener就会给mOnClickListener赋值，上面条件就成立，然后回调onClick方法。</p>\n<p>到这儿差不多就清楚了分发流程。</p>\n<p><code>这样View的整个事件分发的流程就让我们搞清楚了！不过别高兴的太早，现在还没结束，还有一个很重要的知识点需要说明，就是touch事件的层级传递。我们都知道如果给一个控件注册了touch事件，每次点击它的时候都会触发一系列的ACTION_DOWN，ACTION_MOVE，ACTION_UP等事件。这里需要注意，如果你在执行ACTION_DOWN的时候返回了false，后面一系列其它的action就不会再得到执行了。简单的说，就是当dispatchTouchEvent在进行事件分发的时候，只有前一个action返回true，才会触发后一个action。</code> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">//省略...</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (((viewFlags &amp; CLICKABLE) == CLICKABLE ||</span><br><span class=\"line\">                (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (event.getAction()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:      </span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> MotionEvent.ACTION_CANCEL:             </span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出在dispatchTouchEvent方法中，onTouch方法返回false,然后执行onTouchEvent方法，在进入if判断后，不管进入那个case,最后都会return true,所以才会执行后续的action.</p>\n<p><code>**1. onTouch和onTouchEvent有什么区别，又该如何使用？**</code> </p>\n<p>都是dispatchTouchEvent中的方法，onTouch优先级高，若onTouch返回true，就会消费掉当前事件，onTouchEvent就不会执行。</p>\n<p>要执行onTouch也需要两个条件，1 给控件设置了触摸监听OnTouchListener ，2该控件是可以点击的。</p>\n<p>若控件是非enable的，则不会执行onTouch方法，会执行onTouchEvent，所以想要监听ouTouch事件只能重写onTouchEvent方法来实现。</p>\n<p><strong>小结：</strong></p>\n<p><strong>控件被点击或触摸后一定会执行dispatchTouchEvent方法（当前类没有则去父类找），如果设置了触摸监听且控件是enable的，就执行onTouch方法 。OnTouch方法返回true则消耗掉本次事件，不执行后面的方法，返回false则执行onTouchEvent方法，如果设置了点击监听且控件是enable的，就在抬手的时候执行onClick方法。</strong></p>\n<p><strong>给一个控件注册了touch事件，每次点击它的时候都会触发一系列的ACTION_DOWN，ACTION_MOVE，ACTION_UP等事件。当dispatchTouchEvent在进行事件分发的时候，只有前一个action返回true，才会触发后一个action。</strong> </p>\n<h2 id=\"2-ViewGroup\"><a href=\"#2-ViewGroup\" class=\"headerlink\" title=\"2. ViewGroup\"></a>2. ViewGroup</h2><p><code>Android中touch事件的传递，绝对是先传递到ViewGroup，再传递到View的</code> </p>\n<p><code>上边说只要你触摸了任何控件，就一定会调用该控件的dispatchTouchEvent方法。这个说法没错，只不过还不完整而已。实际情况是，当你点击了某个控件，首先会去调用该控件所在布局的dispatchTouchEvent方法，然后在布局的dispatchTouchEvent方法中找到被点击的相应控件，再去调用该控件的dispatchTouchEvent方法。</code> </p>\n<p>ViewGroup的dispatchTouchEvent方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> action = ev.getAction();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> xf = ev.getX();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> yf = ev.getY();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> scrolledXFloat = xf + mScrollX;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> scrolledYFloat = yf + mScrollY;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Rect frame = mTempRect;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (action == MotionEvent.ACTION_DOWN) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mMotionTarget != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mMotionTarget = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (disallowIntercept || !onInterceptTouchEvent(ev)) &#123;</span><br><span class=\"line\">            ev.setAction(MotionEvent.ACTION_DOWN);</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> scrolledXInt = (<span class=\"keyword\">int</span>) scrolledXFloat;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> scrolledYInt = (<span class=\"keyword\">int</span>) scrolledYFloat;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> View[] children = mChildren;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = mChildrenCount;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = count - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> View child = children[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE</span><br><span class=\"line\">                        || child.getAnimation() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    child.getHitRect(frame);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (frame.contains(scrolledXInt, scrolledYInt)) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> xc = scrolledXFloat - child.mLeft;</span><br><span class=\"line\">                        <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> yc = scrolledYFloat - child.mTop;</span><br><span class=\"line\">                        ev.setLocation(xc, yc);</span><br><span class=\"line\">                        child.mPrivateFlags &amp;= ~CANCEL_NEXT_UP_EVENT;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (child.dispatchTouchEvent(ev))  &#123;</span><br><span class=\"line\">                            mMotionTarget = child;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isUpOrCancel = (action == MotionEvent.ACTION_UP) ||</span><br><span class=\"line\">            (action == MotionEvent.ACTION_CANCEL);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isUpOrCancel) &#123;</span><br><span class=\"line\">        mGroupFlags &amp;= ~FLAG_DISALLOW_INTERCEPT;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> View target = mMotionTarget;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        ev.setLocation(xf, yf);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((mPrivateFlags &amp; CANCEL_NEXT_UP_EVENT) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            ev.setAction(MotionEvent.ACTION_CANCEL);</span><br><span class=\"line\">            mPrivateFlags &amp;= ~CANCEL_NEXT_UP_EVENT;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.dispatchTouchEvent(ev);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!disallowIntercept &amp;&amp; onInterceptTouchEvent(ev)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> xc = scrolledXFloat - (<span class=\"keyword\">float</span>) target.mLeft;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> yc = scrolledYFloat - (<span class=\"keyword\">float</span>) target.mTop;</span><br><span class=\"line\">        mPrivateFlags &amp;= ~CANCEL_NEXT_UP_EVENT;</span><br><span class=\"line\">        ev.setAction(MotionEvent.ACTION_CANCEL);</span><br><span class=\"line\">        ev.setLocation(xc, yc);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!target.dispatchTouchEvent(ev)) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mMotionTarget = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isUpOrCancel) &#123;</span><br><span class=\"line\">        mMotionTarget = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> xc = scrolledXFloat - (<span class=\"keyword\">float</span>) target.mLeft;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> yc = scrolledYFloat - (<span class=\"keyword\">float</span>) target.mTop;</span><br><span class=\"line\">    ev.setLocation(xc, yc);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((target.mPrivateFlags &amp; CANCEL_NEXT_UP_EVENT) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        ev.setAction(MotionEvent.ACTION_CANCEL);</span><br><span class=\"line\">        target.mPrivateFlags &amp;= ~CANCEL_NEXT_UP_EVENT;</span><br><span class=\"line\">        mMotionTarget = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target.dispatchTouchEvent(ev);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第二个if语句  if (disallowIntercept || !onInterceptTouchEvent(ev)</p>\n<p>第一个条件disallowIntercept 是否禁用掉事件拦截的功能，默认是false 所以是否进入if内部就由第二个条件决定了。 </p>\n<p>ViewGroup中有一个onInterceptTouchEvent方法  是否拦截触摸事件 默认返回false 即不拦截</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第二个条件  !onInterceptTouchEvent(ev) 对返回值取反 即返回false不拦截触摸事件时进入if内部，返回true拦截时不进入if内部</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//省略。。。</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (disallowIntercept || !onInterceptTouchEvent(ev)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = count - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;<span class=\"comment\">//遍历当前ViewGroup下的所有子View</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE</span><br><span class=\"line\">                        || child.getAnimation() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (frame.contains(scrolledXInt, scrolledYInt)) &#123;<span class=\"comment\">//判断当前遍历的View是不是正在点击的View</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (child.dispatchTouchEvent(ev))  &#123;<span class=\"comment\">//是则调用子View的dispatchTouchEvent</span></span><br><span class=\"line\">                            mMotionTarget = child;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>if内部对子View进行了遍历，最终调用子View的dispatchTouchEvent，然后控件可点击那么dispatchTouchEvent一定会返回true，所以后面的代码就执行不了。</p>\n<p>即 ViewGroup 的onInterceptTouchEvent返回false,不拦截触摸事件时，最终会执行子View的dispatchTouchEvent。</p>\n<p> ViewGroup 的onInterceptTouchEvent返回true,拦截触摸事件，就不会进入if内部，则会执行到后面的程序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (target == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        ev.setLocation(xf, yf);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((mPrivateFlags &amp; CANCEL_NEXT_UP_EVENT) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            ev.setAction(MotionEvent.ACTION_CANCEL);</span><br><span class=\"line\">            mPrivateFlags &amp;= ~CANCEL_NEXT_UP_EVENT;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.dispatchTouchEvent(ev);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，最后会执行super.dispatchTouchEvent(ev)，执行父类即View的dispatchTouchEvent。</p>\n<p>View的dispatchTouchEvent如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mOnTouchListener != <span class=\"keyword\">null</span> &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED &amp;&amp;</span><br><span class=\"line\">            mOnTouchListener.onTouch(<span class=\"keyword\">this</span>, event)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> onTouchEvent(event);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后又和前面的一样了。执行onTouch或者onTouchEvent。。</p>\n<h2 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h2><h3 id=\"传递顺序\"><a href=\"#传递顺序\" class=\"headerlink\" title=\"传递顺序\"></a>传递顺序</h3><p><code>Activity －&gt; PhoneWindow －&gt; DecorView －&gt; ViewGroup －&gt; … －&gt; View</code></p>\n<p>通俗语言总结一下，事件来的时候，</p>\n<p>Activity会询问Window，Window这个事件你能不能消耗，</p>\n<p>Window一看，你先等等，我去问问DecorView他能不能消耗，</p>\n<p>DecorView一看，onInterceptTouchEvent返回false啊，不让我拦截啊，</p>\n<p><strong>(DecorView继承自FrameLayout,FrameLayout是ViewGroup的子类，所以DecorView也是ViewGroup的子类，事件从Activity传到了ViewGroup)</strong></p>\n<p>遍历一下子View吧，问问他们能不能消耗，那个谁，事件按在你的身上了，你看看你能不能消耗，</p>\n<p><strong>假如子View为RelativeLayout</strong></p>\n<p>RelativeLayout一看，也没有让我拦截啊，我也得遍历看看这个事件发生在那个子View上面，</p>\n<p><strong>到这儿事件从ViewGroup传到View上了</strong></p>\n<p>那个TextView,事件在你身上，你能不能消耗了他。TextView一看，消耗不了啊，</p>\n<p>RelativeLayout一看TextView消耗不了啊，mFirstTouchTarget==null啊，得，我自己消耗吧，嗯！一看自己的onTouchEvent也消耗不了啊！那个DecorView事件我消耗不了，</p>\n<p>DecorView一看自己，我也消耗不了，继续往上传，那个Window啊。事件我消耗不了啊，</p>\n<p>Window再告诉Activity事件消耗不了啊。</p>\n<p>Activity还得我自己来啊。调用自己的onTouchEvent，还是消耗不了，算了，不要了。</p>\n<p><strong>最后Activity的onTouchEvent无论返回什么，事件分发都结束。（如果事件在边界范围外默认会返回false）</strong></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><code>https://blog.csdn.net/guolin_blog/article/details/9097463</code></p>\n<p><code>https://blog.csdn.net/guolin_blog/article/details/9153747</code></p>\n","site":{"data":{}},"excerpt":"<p>本文主要记录了Android中的事件分发机制。通过对源码进行分析和实例测试，对Android事件分发机制有了更深的了解。主要为学习Android时的笔记。</p>","more":"<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-触发过程\"><a href=\"#1-触发过程\" class=\"headerlink\" title=\"1. 触发过程\"></a>1. 触发过程</h2><h3 id=\"1-1-点击控件\"><a href=\"#1-1-点击控件\" class=\"headerlink\" title=\"1.1 点击控件\"></a>1.1 点击控件</h3><h3 id=\"1-2-dispatchTouchEven\"><a href=\"#1-2-dispatchTouchEven\" class=\"headerlink\" title=\"1.2 dispatchTouchEven\"></a>1.2 dispatchTouchEven</h3><p>一定会执行<code>dispatchTouchEvent</code>方法，若当前类没有该方法，则向上往父类查找。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mOnTouchListener != <span class=\"keyword\">null</span> &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED &amp;&amp;</span><br><span class=\"line\">            mOnTouchListener.onTouch(<span class=\"keyword\">this</span>, event)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> onTouchEvent(event);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>条件1 mOnTouchListener != null </li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setOnTouchListener</span><span class=\"params\">(OnTouchListener l)</span> </span>&#123;</span><br><span class=\"line\">    mOnTouchListener = l;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>给控件设置监听就会给mOnTouchListener赋值，则条件1成立。</p>\n<ul>\n<li><p>条件2 (mViewFlags &amp; ENABLED_MASK) == ENABLED 控件是否是可点击的</p>\n</li>\n<li><p>条件3 mOnTouchListener.onTouch(this, event) 回调onTouch方法，返回true 则成立</p>\n</li>\n</ul>\n<p><strong>小结：</strong>dispatchTouchEvent 方法中一定会执行onTouch方法，如果onTouch方法返回true 则dispatchTouchEvent方法直接返回true 不会执行if外的 return onTouchEvent(event)。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    title_bar.setOnTouchListener(<span class=\"keyword\">new</span> View.OnTouchListener() &#123;</span><br><span class=\"line\">         <span class=\"meta\">@Override</span></span><br><span class=\"line\">         <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouch</span><span class=\"params\">(View v, MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">Log.v(<span class=\"string\">\"Az\"</span>,<span class=\"string\">\"onTouch\"</span>);</span><br><span class=\"line\">             <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;);</span><br></pre></td></tr></table></figure>\n<p>在setOnTouchListener时，onTouch方法默认返回false,所以才会执行后面的onTouchEvent方法；</p>\n<h3 id=\"1-3-onTouchEvent\"><a href=\"#1-3-onTouchEvent\" class=\"headerlink\" title=\"1.3 onTouchEvent\"></a>1.3 onTouchEvent</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> viewFlags = mViewFlags;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((viewFlags &amp; ENABLED_MASK) == DISABLED) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// A disabled view that is clickable still consumes the touch</span></span><br><span class=\"line\">        <span class=\"comment\">// events, it just doesn't respond to them.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (((viewFlags &amp; CLICKABLE) == CLICKABLE ||</span><br><span class=\"line\">                (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mTouchDelegate != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mTouchDelegate.onTouchEvent(event)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (((viewFlags &amp; CLICKABLE) == CLICKABLE ||</span><br><span class=\"line\">            (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (event.getAction()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> prepressed = (mPrivateFlags &amp; PREPRESSED) != <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((mPrivateFlags &amp; PRESSED) != <span class=\"number\">0</span> || prepressed) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// take focus if we don't have it already and we should in</span></span><br><span class=\"line\">                    <span class=\"comment\">// touch mode.</span></span><br><span class=\"line\">                    <span class=\"keyword\">boolean</span> focusTaken = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (isFocusable() &amp;&amp; isFocusableInTouchMode() &amp;&amp; !isFocused()) &#123;</span><br><span class=\"line\">                        focusTaken = requestFocus();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!mHasPerformedLongPress) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// This is a tap, so remove the longpress check</span></span><br><span class=\"line\">                        removeLongPressCallback();</span><br><span class=\"line\">                        <span class=\"comment\">// Only perform take click actions if we were in the pressed state</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!focusTaken) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// Use a Runnable and post this rather than calling</span></span><br><span class=\"line\">                            <span class=\"comment\">// performClick directly. This lets other visual state</span></span><br><span class=\"line\">                            <span class=\"comment\">// of the view update before click actions start.</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (mPerformClick == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                                mPerformClick = <span class=\"keyword\">new</span> PerformClick();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (!post(mPerformClick)) &#123;</span><br><span class=\"line\">                                performClick();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (mUnsetPressedState == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        mUnsetPressedState = <span class=\"keyword\">new</span> UnsetPressedState();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (prepressed) &#123;</span><br><span class=\"line\">                        mPrivateFlags |= PRESSED;</span><br><span class=\"line\">                        refreshDrawableState();</span><br><span class=\"line\">                        postDelayed(mUnsetPressedState,</span><br><span class=\"line\">                                ViewConfiguration.getPressedStateDuration());</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!post(mUnsetPressedState)) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// If the post failed, unpress right now</span></span><br><span class=\"line\">                        mUnsetPressedState.run();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    removeTapCallback();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mPendingCheckForTap == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    mPendingCheckForTap = <span class=\"keyword\">new</span> CheckForTap();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                mPrivateFlags |= PREPRESSED;</span><br><span class=\"line\">                mHasPerformedLongPress = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout());</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class=\"line\">                mPrivateFlags &amp;= ~PRESSED;</span><br><span class=\"line\">                refreshDrawableState();</span><br><span class=\"line\">                removeTapCallback();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</span><br><span class=\"line\">                <span class=\"comment\">// Be lenient about moving outside of buttons</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> slop = mTouchSlop;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((x &lt; <span class=\"number\">0</span> - slop) || (x &gt;= getWidth() + slop) ||</span><br><span class=\"line\">                        (y &lt; <span class=\"number\">0</span> - slop) || (y &gt;= getHeight() + slop)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Outside button</span></span><br><span class=\"line\">                    removeTapCallback();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ((mPrivateFlags &amp; PRESSED) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// Remove any future long press/tap checks</span></span><br><span class=\"line\">                        removeLongPressCallback();</span><br><span class=\"line\">                        <span class=\"comment\">// Need to switch from pressed to not pressed</span></span><br><span class=\"line\">                        mPrivateFlags &amp;= ~PRESSED;</span><br><span class=\"line\">                        refreshDrawableState();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>首先在第14行我们可以看出，如果该控件是可以点击的就会进入到第16行的switch判断中去，而如果当前的事件是抬起手指，则会进入到MotionEvent.ACTION_UP这个case当中。在经过种种判断之后，会执行到第38行的performClick()方法，那我们进入到这个方法里瞧一瞧：</code> </p>\n<p>若当前事件为抬手，则进入performClick方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">performClick</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mOnClickListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        playSoundEffect(SoundEffectConstants.CLICK);</span><br><span class=\"line\">        mOnClickListener.onClick(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果 mOnClickListener != null 则会执行onClick方法，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setOnClickListener</span><span class=\"params\">(OnClickListener l)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isClickable()) &#123;</span><br><span class=\"line\">        setClickable(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mOnClickListener = l;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以只要给控件设置了点击监听，setOnClickListener就会给mOnClickListener赋值，上面条件就成立，然后回调onClick方法。</p>\n<p>到这儿差不多就清楚了分发流程。</p>\n<p><code>这样View的整个事件分发的流程就让我们搞清楚了！不过别高兴的太早，现在还没结束，还有一个很重要的知识点需要说明，就是touch事件的层级传递。我们都知道如果给一个控件注册了touch事件，每次点击它的时候都会触发一系列的ACTION_DOWN，ACTION_MOVE，ACTION_UP等事件。这里需要注意，如果你在执行ACTION_DOWN的时候返回了false，后面一系列其它的action就不会再得到执行了。简单的说，就是当dispatchTouchEvent在进行事件分发的时候，只有前一个action返回true，才会触发后一个action。</code> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">//省略...</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (((viewFlags &amp; CLICKABLE) == CLICKABLE ||</span><br><span class=\"line\">                (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (event.getAction()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:      </span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> MotionEvent.ACTION_CANCEL:             </span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出在dispatchTouchEvent方法中，onTouch方法返回false,然后执行onTouchEvent方法，在进入if判断后，不管进入那个case,最后都会return true,所以才会执行后续的action.</p>\n<p><code>**1. onTouch和onTouchEvent有什么区别，又该如何使用？**</code> </p>\n<p>都是dispatchTouchEvent中的方法，onTouch优先级高，若onTouch返回true，就会消费掉当前事件，onTouchEvent就不会执行。</p>\n<p>要执行onTouch也需要两个条件，1 给控件设置了触摸监听OnTouchListener ，2该控件是可以点击的。</p>\n<p>若控件是非enable的，则不会执行onTouch方法，会执行onTouchEvent，所以想要监听ouTouch事件只能重写onTouchEvent方法来实现。</p>\n<p><strong>小结：</strong></p>\n<p><strong>控件被点击或触摸后一定会执行dispatchTouchEvent方法（当前类没有则去父类找），如果设置了触摸监听且控件是enable的，就执行onTouch方法 。OnTouch方法返回true则消耗掉本次事件，不执行后面的方法，返回false则执行onTouchEvent方法，如果设置了点击监听且控件是enable的，就在抬手的时候执行onClick方法。</strong></p>\n<p><strong>给一个控件注册了touch事件，每次点击它的时候都会触发一系列的ACTION_DOWN，ACTION_MOVE，ACTION_UP等事件。当dispatchTouchEvent在进行事件分发的时候，只有前一个action返回true，才会触发后一个action。</strong> </p>\n<h2 id=\"2-ViewGroup\"><a href=\"#2-ViewGroup\" class=\"headerlink\" title=\"2. ViewGroup\"></a>2. ViewGroup</h2><p><code>Android中touch事件的传递，绝对是先传递到ViewGroup，再传递到View的</code> </p>\n<p><code>上边说只要你触摸了任何控件，就一定会调用该控件的dispatchTouchEvent方法。这个说法没错，只不过还不完整而已。实际情况是，当你点击了某个控件，首先会去调用该控件所在布局的dispatchTouchEvent方法，然后在布局的dispatchTouchEvent方法中找到被点击的相应控件，再去调用该控件的dispatchTouchEvent方法。</code> </p>\n<p>ViewGroup的dispatchTouchEvent方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> action = ev.getAction();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> xf = ev.getX();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> yf = ev.getY();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> scrolledXFloat = xf + mScrollX;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> scrolledYFloat = yf + mScrollY;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Rect frame = mTempRect;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (action == MotionEvent.ACTION_DOWN) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mMotionTarget != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mMotionTarget = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (disallowIntercept || !onInterceptTouchEvent(ev)) &#123;</span><br><span class=\"line\">            ev.setAction(MotionEvent.ACTION_DOWN);</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> scrolledXInt = (<span class=\"keyword\">int</span>) scrolledXFloat;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> scrolledYInt = (<span class=\"keyword\">int</span>) scrolledYFloat;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> View[] children = mChildren;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = mChildrenCount;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = count - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> View child = children[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE</span><br><span class=\"line\">                        || child.getAnimation() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    child.getHitRect(frame);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (frame.contains(scrolledXInt, scrolledYInt)) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> xc = scrolledXFloat - child.mLeft;</span><br><span class=\"line\">                        <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> yc = scrolledYFloat - child.mTop;</span><br><span class=\"line\">                        ev.setLocation(xc, yc);</span><br><span class=\"line\">                        child.mPrivateFlags &amp;= ~CANCEL_NEXT_UP_EVENT;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (child.dispatchTouchEvent(ev))  &#123;</span><br><span class=\"line\">                            mMotionTarget = child;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isUpOrCancel = (action == MotionEvent.ACTION_UP) ||</span><br><span class=\"line\">            (action == MotionEvent.ACTION_CANCEL);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isUpOrCancel) &#123;</span><br><span class=\"line\">        mGroupFlags &amp;= ~FLAG_DISALLOW_INTERCEPT;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> View target = mMotionTarget;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        ev.setLocation(xf, yf);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((mPrivateFlags &amp; CANCEL_NEXT_UP_EVENT) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            ev.setAction(MotionEvent.ACTION_CANCEL);</span><br><span class=\"line\">            mPrivateFlags &amp;= ~CANCEL_NEXT_UP_EVENT;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.dispatchTouchEvent(ev);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!disallowIntercept &amp;&amp; onInterceptTouchEvent(ev)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> xc = scrolledXFloat - (<span class=\"keyword\">float</span>) target.mLeft;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> yc = scrolledYFloat - (<span class=\"keyword\">float</span>) target.mTop;</span><br><span class=\"line\">        mPrivateFlags &amp;= ~CANCEL_NEXT_UP_EVENT;</span><br><span class=\"line\">        ev.setAction(MotionEvent.ACTION_CANCEL);</span><br><span class=\"line\">        ev.setLocation(xc, yc);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!target.dispatchTouchEvent(ev)) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mMotionTarget = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isUpOrCancel) &#123;</span><br><span class=\"line\">        mMotionTarget = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> xc = scrolledXFloat - (<span class=\"keyword\">float</span>) target.mLeft;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> yc = scrolledYFloat - (<span class=\"keyword\">float</span>) target.mTop;</span><br><span class=\"line\">    ev.setLocation(xc, yc);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((target.mPrivateFlags &amp; CANCEL_NEXT_UP_EVENT) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        ev.setAction(MotionEvent.ACTION_CANCEL);</span><br><span class=\"line\">        target.mPrivateFlags &amp;= ~CANCEL_NEXT_UP_EVENT;</span><br><span class=\"line\">        mMotionTarget = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target.dispatchTouchEvent(ev);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第二个if语句  if (disallowIntercept || !onInterceptTouchEvent(ev)</p>\n<p>第一个条件disallowIntercept 是否禁用掉事件拦截的功能，默认是false 所以是否进入if内部就由第二个条件决定了。 </p>\n<p>ViewGroup中有一个onInterceptTouchEvent方法  是否拦截触摸事件 默认返回false 即不拦截</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第二个条件  !onInterceptTouchEvent(ev) 对返回值取反 即返回false不拦截触摸事件时进入if内部，返回true拦截时不进入if内部</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//省略。。。</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (disallowIntercept || !onInterceptTouchEvent(ev)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = count - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;<span class=\"comment\">//遍历当前ViewGroup下的所有子View</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE</span><br><span class=\"line\">                        || child.getAnimation() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (frame.contains(scrolledXInt, scrolledYInt)) &#123;<span class=\"comment\">//判断当前遍历的View是不是正在点击的View</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (child.dispatchTouchEvent(ev))  &#123;<span class=\"comment\">//是则调用子View的dispatchTouchEvent</span></span><br><span class=\"line\">                            mMotionTarget = child;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>if内部对子View进行了遍历，最终调用子View的dispatchTouchEvent，然后控件可点击那么dispatchTouchEvent一定会返回true，所以后面的代码就执行不了。</p>\n<p>即 ViewGroup 的onInterceptTouchEvent返回false,不拦截触摸事件时，最终会执行子View的dispatchTouchEvent。</p>\n<p> ViewGroup 的onInterceptTouchEvent返回true,拦截触摸事件，就不会进入if内部，则会执行到后面的程序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (target == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        ev.setLocation(xf, yf);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((mPrivateFlags &amp; CANCEL_NEXT_UP_EVENT) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            ev.setAction(MotionEvent.ACTION_CANCEL);</span><br><span class=\"line\">            mPrivateFlags &amp;= ~CANCEL_NEXT_UP_EVENT;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.dispatchTouchEvent(ev);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，最后会执行super.dispatchTouchEvent(ev)，执行父类即View的dispatchTouchEvent。</p>\n<p>View的dispatchTouchEvent如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mOnTouchListener != <span class=\"keyword\">null</span> &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED &amp;&amp;</span><br><span class=\"line\">            mOnTouchListener.onTouch(<span class=\"keyword\">this</span>, event)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> onTouchEvent(event);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后又和前面的一样了。执行onTouch或者onTouchEvent。。</p>\n<h2 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h2><h3 id=\"传递顺序\"><a href=\"#传递顺序\" class=\"headerlink\" title=\"传递顺序\"></a>传递顺序</h3><p><code>Activity －&gt; PhoneWindow －&gt; DecorView －&gt; ViewGroup －&gt; … －&gt; View</code></p>\n<p>通俗语言总结一下，事件来的时候，</p>\n<p>Activity会询问Window，Window这个事件你能不能消耗，</p>\n<p>Window一看，你先等等，我去问问DecorView他能不能消耗，</p>\n<p>DecorView一看，onInterceptTouchEvent返回false啊，不让我拦截啊，</p>\n<p><strong>(DecorView继承自FrameLayout,FrameLayout是ViewGroup的子类，所以DecorView也是ViewGroup的子类，事件从Activity传到了ViewGroup)</strong></p>\n<p>遍历一下子View吧，问问他们能不能消耗，那个谁，事件按在你的身上了，你看看你能不能消耗，</p>\n<p><strong>假如子View为RelativeLayout</strong></p>\n<p>RelativeLayout一看，也没有让我拦截啊，我也得遍历看看这个事件发生在那个子View上面，</p>\n<p><strong>到这儿事件从ViewGroup传到View上了</strong></p>\n<p>那个TextView,事件在你身上，你能不能消耗了他。TextView一看，消耗不了啊，</p>\n<p>RelativeLayout一看TextView消耗不了啊，mFirstTouchTarget==null啊，得，我自己消耗吧，嗯！一看自己的onTouchEvent也消耗不了啊！那个DecorView事件我消耗不了，</p>\n<p>DecorView一看自己，我也消耗不了，继续往上传，那个Window啊。事件我消耗不了啊，</p>\n<p>Window再告诉Activity事件消耗不了啊。</p>\n<p>Activity还得我自己来啊。调用自己的onTouchEvent，还是消耗不了，算了，不要了。</p>\n<p><strong>最后Activity的onTouchEvent无论返回什么，事件分发都结束。（如果事件在边界范围外默认会返回false）</strong></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><code>https://blog.csdn.net/guolin_blog/article/details/9097463</code></p>\n<p><code>https://blog.csdn.net/guolin_blog/article/details/9153747</code></p>"},{"title":"ReentrantLock源码分析","abbrlink":"ef6a0c58","date":"2019-02-24T08:00:00.000Z","_content":"\n本文主要对`ReentrantLock`的源码进行了简单的分析，具体包括`ReentrantLock`的初始化(公平锁和非公平锁)，加锁过程和解锁过程等。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. AbstractQueuedSynchronizer\n\n`ReentrantLock`的实现依赖于`AbstractQueuedSynchronizer`所以需要了解一下`AQS`。\n\n### 1.1 简介\n\n类如其名，`抽象的队列式的同步器`，AQS定义了一套多线程访问共享资源的同步器框架，是`java.util.concurrent`的核心，`CountDownLatch`、`FutureTask`、`Semaphore`、`ReentrantLock`等都有一个内部类是这个抽象类的子类。\n\nAQS定义两种资源共享方式：\n\n- Exclusive: 独占，只有一个线程能执行,如ReentrantLock\n- Share: 共享，多个线程可同时执行，如Semaphore/CountDownLatch\n\n### 1.2 AQS的4个属性\n\n```java\n// 头结点，大概可以看做是当前持有锁的线程\nprivate transient volatile Node head;\n// 阻塞的尾节点，每个新的节点进来，都插入到最后\nprivate transient volatile Node tail;\n//当前锁的状态，0代表没有被占用，大于0代表有线程持有当前锁 \n//是可重入锁 每次获取都活加1\nprivate volatile int state;\n// 代表当前持有独占锁的线程 锁重入时用这个来判断当前线程是否已经拥有了锁\n//继承自AbstractOwnableSynchronizer\nprivate transient Thread exclusiveOwnerThread; \n```\n\n### 1.3 阻塞队列Node节点的属性\n\n![CLH队列](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/source_code/aqs-wait-queue.png)\n\nNode 的数据结构其实也挺简单的，就是 `thread` + `waitStatus` + `pre` + `next` 四个属性而已。\n\n```java\nstatic final class Node {\n    /** Marker to indicate a node is waiting in shared mode */\n    // 标识节点当前在共享模式下\n    static final Node SHARED = new Node();\n    /** Marker to indicate a node is waiting in exclusive mode */\n    // 标识节点当前在独占模式下\n    static final Node EXCLUSIVE = null;\n\n    // ======== 下面的几个int常量是给waitStatus用的 ===========\n    /** waitStatus value to indicate thread has cancelled */\n    // 表示此线程取消了争抢这个锁\n    static final int CANCELLED =  1;\n    /** waitStatus value to indicate successor's thread needs unparking */\n    //被标识为该等待唤醒状态的后继结点，当其前继结点的线程释放了同步锁或被取消，\n    //将会通知该后继结点的线程执行。\n    //就是处于唤醒状态，只要前继结点释放锁，就会通知标识为SIGNAL状态的后继结点的线程执行。\n    static final int SIGNAL    = -1;\n    /** waitStatus value to indicate thread is waiting on condition */\n    //该标识的结点处于等待队列中，结点的线程等待在Condition上,等待其他线程唤醒\n    //当其他线程调用了Condition的signal()方法后，CONDITION状态的结点将\n    //从等待队列转移到同步队列中，等待获取同步锁。\n    static final int CONDITION = -2;\n    /**\n     * waitStatus value to indicate the next acquireShared should\n     * unconditionally propagate\n     */\n    // 与共享模式相关，在共享模式中，该状态标识结点的线程处于可运行状态。\n    static final int PROPAGATE = -3;\n    // =====================================================\n\t// 节点的等待状态\n    // 取值为上面的1、-1、-2、-3，或者0\n    // 这么理解，暂时只需要知道如果这个值 大于0 代表此线程取消了等待，\n    // 也许就是说半天抢不到锁，不抢了，ReentrantLock是可以指定timeouot的\n    //AQS在判断状态时，通过用waitStatus>0表示取消状态，而waitStatus<0表示有效状态。\n    volatile int waitStatus;\n    // 前驱节点的引用\n    volatile Node prev;\n    // 后继节点的引用\n    volatile Node next;\n    // 这个就是线程对象\n    volatile Thread thread;\n\n}\n```\n\n## 2. ReentrantLock的使用\n\n```java\n/**\n * Server层\n * 模拟ReentrantLock使用\n *\n * @author illusoryCloud\n */\npublic class UserServer {\n    /**\n     * 默认是非公平锁 传入参数true则创建的是公平锁\n     */\n    private static ReentrantLock reentrantLock = new ReentrantLock(true);\n\n    public void updateUser() {\n        //加锁 同一时刻只能有一个线程更新User\n        reentrantLock.lock();\n        try {\n\n            //do something\n        } finally {\n            //释放锁放在finally代码块中 保证出现异常等情况也能释放锁\n            reentrantLock.unlock();\n        }\n    }\n}\n```\n\n## 3. ReentrantLock源码分析\n\n### 1. 初始化\n\n`ReentrantLock reentrantLock = new ReentrantLock(true);`\n\n```java\n/**\n *默认是非公平锁\n */\npublic ReentrantLock() {\n    sync = new NonfairSync();\n}\n\npublic ReentrantLock(boolean fair) {\n    sync = fair ? new FairSync() : new NonfairSync();\n}\n```\n\n### 2. 加锁过程\n\n`reentrantLock.lock();`\n\n公平锁实现如下(JDK1.8)：\n\n```java\n    /**\n     * Sync object for fair locks\n     */\n    static final class FairSync extends Sync {\n        private static final long serialVersionUID = -3000897897090466540L;\n\t\t//争锁\n        final void lock() {\n            //1\n            acquire(1);\n        }  \n        \n        /**\n         * Fair version of tryAcquire.  Don't grant access unless\n         * recursive call or no waiters or is first.\n         */\n        protected final boolean tryAcquire(int acquires) {\n            final Thread current = Thread.currentThread();\n            int c = getState();\n            if (c == 0) {\n                if (!hasQueuedPredecessors() &&\n                    compareAndSetState(0, acquires)) {\n                    setExclusiveOwnerThread(current);\n                    return true;\n                }\n            }\n            else if (current == getExclusiveOwnerThread()) {\n                int nextc = c + acquires;\n                if (nextc < 0)\n                    throw new Error(\"Maximum lock count exceeded\");\n                setState(nextc);\n                return true;\n            }\n            return false;\n        }\n    }\n```\n\n`1. acquire(1);`\n\n```java\n    /**\n     * 尝试获取锁\n     */\n    public final void acquire(int arg) {\n        //tryAcquire(1) 首先尝试获取一下锁\n        //若成功则不需要进入等待队列了\n        //1.1\n        if (!tryAcquire(arg) &&\n            //1.2\n            // tryAcquire(arg)没有成功，这个时候需要把当前线程挂起，放到阻塞队列中。\n            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n            //1.3\n            selfInterrupt();\n    }\n```\n\n`1.1 tryAcquire(1)`\n\n```java\n        /**\n         * Fair version of tryAcquire.  Don't grant access unless\n         * recursive call or no waiters or is first.\n         * 尝试直接获取锁，返回值是boolean，代表是否获取到锁\n         * 返回true：1.没有线程在等待锁；2.重入锁，线程本来就持有锁，也就可以理所当然可以直接获取\n         */\n        protected final boolean tryAcquire(int acquires) {\n            //获取当前线程\n            final Thread current = Thread.currentThread();\n            //查看锁的状态\n            int c = getState();\n            //state == 0 此时此刻没有线程持有锁 可以直接获取锁\n            if (c == 0) {\n                //由于是公平锁 则在获取锁之前先看一下队列中还有没有其他等待的线程\n                //讲究先来后到 所以是公平锁  这也是和非公平锁的差别\n                //非公平锁在这里会直接尝试获取锁\n                //1.1.1\n                if (!hasQueuedPredecessors() &&\n                   // 如果没有线程在等待，那就用CAS尝试获取一下锁\n                   // 不成功的话，只能说明几乎同一时刻有个线程抢先获取到了锁\n                   //因为刚才hasQueuedPredecessors判断是前面没有线程在等待的\n                    //1.1.2\n                    compareAndSetState(0, acquires)) {\n                    //获取到锁后把当前线程设置为锁的拥有者\n                    //1.1.3\n                    setExclusiveOwnerThread(current);\n                    //获取锁成功直接返回true\n                    return true;\n                }\n            }\n            //到这里说明当前锁已经被占了\n            //然后判断如果当前线程就是持有锁的线程\n            //那么这次就是锁的重入\n            else if (current == getExclusiveOwnerThread()) {\n                //把state加1\n                int nextc = c + acquires;\n                if (nextc < 0)\n                    throw new Error(\"Maximum lock count exceeded\");\n                //1.1.4\n                setState(nextc);\n                return true;\n            }\n            //上面两个条件都不满足就返回false\n            //获取锁失败了 回到上一个方法继续看\n            return false;\n        }\n```\n\n`1.1.1 hasQueuedPredecessors()`\n\n```java\n/**\n  * 通过判断\"当前线程\"是不是在CLH队列的队首\n  * 来返回AQS中是不是有比“当前线程”等待更久的线程\n  */\npublic final boolean hasQueuedPredecessors() {\n        // The correctness of this depends on head being initialized\n        // before tail and on head.next being accurate if the current\n        // thread is first in queue.\n        Node t = tail; // Read fields in reverse initialization order\n        Node h = head;\n        Node s;\n        return h != t &&\n            ((s = h.next) == null || s.thread != Thread.currentThread());\n    }\n```\n\n`1.1.2 compareAndSetState(0, acquires))`\n\n```java\n/**\n * 通过CAS设置锁的状态\n */     \nprotected final boolean compareAndSetState(int expect, int update) {\n        // See below for intrinsics setup to support this\n        return unsafe.compareAndSwapInt(this, stateOffset, expect, update);\n    }\n```\n\n`1.1.3 setExclusiveOwnerThread(current)`\n\n```java\n/**\n * 设置锁的拥有者\n */     \nprotected final void setExclusiveOwnerThread(Thread thread) {\n        exclusiveOwnerThread = thread;\n    }\n```\n\n`1.1.4 setState(nextc)`\n\n```java\n/**\n * 设置锁的状态\n */    \nprotected final void setState(int newState) {\n        state = newState;\n    }\n```\n\n回到前面的方法\n\n```java\n    /**\n     * 尝试获取锁\n     */\n    public final void acquire(int arg) {\n        //tryAcquire(1) 首先尝试获取一下锁\n        //若成功则不需要进入等待队列了\n        //1.1\n        if (!tryAcquire(arg) &&\n            //1.2\n            // tryAcquire(arg)没有成功，这个时候需要把当前线程挂起，放到阻塞队列中。\n            //addWaiter(Node.EXCLUSIVE) 1.2.1\n            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n            //1.3\n            selfInterrupt();\n    }\n```\n\n`1.1tryAcquire`返回false则继续执行后面的\n\n`1.2acquireQueued(addWaiter(Node.EXCLUSIVE), arg)`\n\n`1.2.1 addWaiter(Node.EXCLUSIVE)`\n\n```java\n/**\n * 此方法的作用是把线程包装成node，同时进入到队列中\n * 参数mode此时是Node.EXCLUSIVE，代表独占模式\n */\n    private Node addWaiter(Node mode) {\n        Node node = new Node(Thread.currentThread(), mode);\n        // Try the fast path of enq; backup to full enq on failure\n        // 以下几行代码想把当前node加到链表的最后面去，也就是进到阻塞队列的最后\n        Node pred = tail;\n\n        // tail!=null --> 队列不为空\n        if (pred != null) { \n            // 设置自己的前驱 为当前的队尾节点\n            node.prev = pred; \n            // 用CAS把自己设置为队尾, 如果成功后，tail == node了\n            //1.2.1.1\n            if (compareAndSetTail(pred, node)) { \n                // 进到这里说明设置成功，当前node==tail, 将自己与之前的队尾相连，\n                // 上面已经有 node.prev = pred\n                // 加上下面这句，也就实现了和之前的尾节点双向连接了\n                pred.next = node;\n                // 线程入队了，可以返回了\n                return node;\n            }\n        }\n        // 仔细看看上面的代码，如果会到这里，\n        // 说明 pred==null(队列是空的) 或者 CAS失败(有线程在竞争入队)\n      \t//1.2.1.2\n        enq(node);\n        return node;\n    }\n```\n\n`1.2.1.1 compareAndSetTail(pred, node)`\n\n```java\n/**\n * 使用CAS设置队列的Tail\n */\nprivate final boolean compareAndSetTail(Node expect, Node update) {\n        return unsafe.compareAndSwapObject(this, tailOffset, expect, update);\n    }\n```\n\n`1.2.1.2enq(node)`\n\n```java\n/**\n * 进入这个方法只有两种可能：1.等待队列为空 2.有线程竞争入队\n * 采用自旋的方式入队\n * CAS设置tail过程中，竞争一次竞争不到，多次竞争，总会排到的\n */\n    private Node enq(final Node node) {\n        //无限循环\n        for (;;) {\n            Node t = tail;\n            // 如果队列是空的就去初始化\n            if (t == null) { // Must initialize\n                // CAS初始化head节点\n                //1.2.1.2.1\n                if (compareAndSetHead(new Node()))\n                // 给后面用：这个时候head节点的waitStatus==0, 看new Node()构造方法就知道了\n                // 这个时候有了head，但是tail还是null，设置一下，\n                // 设置完了以后，继续for循环，下次就到下面的else分支了\n                    tail = head;\n            } else {\n                // 下面几行，和上一个方法 addWaiter 是一样的，\n                // 通过CAS将当前线程排到队尾，有线程竞争的话排不上重复排\n                // 直到成功了才return \n                // 这里return后前面的addWaiter()方法也返回 \n                // 接下来进入acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n                node.prev = t;\n                if (compareAndSetTail(t, node)) {\n                    t.next = node;\n                    return t;\n                }\n            }\n        }\n    }\n\n```\n\n`1.2 acquireQueued(addWaiter(Node.EXCLUSIVE), arg))`\n\n```java\n    /**\n     * 参数node，经过addWaiter(Node.EXCLUSIVE)，此时已经进入阻塞队列\n     * 如果acquireQueued(addWaiter(Node.EXCLUSIVE), arg))返回true的话\n     * 意味着上面这段代码将进入selfInterrupt()，所以正常情况下，下面应该返回false\n     *\n     * 这个方法非常重要，应该说真正的线程挂起，然后被唤醒后去获取锁，都在这个方法里了\n     */\n    final boolean acquireQueued(final Node node, int arg) {\n        boolean failed = true;\n        try {\n            boolean interrupted = false;\n            for (;;) {  //这里无线循环 直到下面的条件满足\n                //获取当前节点的前一个节点 设置为p\n                final Node p = node.predecessor();\n                //p=head说明当前节点是队列的第一个 \n                // 所以当前节点可以去试抢一下锁\n                // enq(node) 方法里面有提到，head是延时初始化的，而且new Node()的时候没有设置任何线程\n                // 也就是说，当前的head可能不属于任何一个线程，所以作为队头，可以去试一试，\n                // tryAcquire已经分析过了,就是简单用CAS试操作一下state\n                if (p == head && tryAcquire(arg)) {\n                    setHead(node);\n                    p.next = null; // help GC\n                    failed = false;\n                    return interrupted;\n                }\n                // 到这里，说明上面的if分支没有成功\n                //要么当前node本来就不是队头\n                // 要么就是tryAcquire(arg)没有抢赢别人\n                //1.2.2\n                if (shouldParkAfterFailedAcquire(p, node) &&\n                    //1.2.3\n                    parkAndCheckInterrupt())\n                    interrupted = true;\n            }\n        } finally {\n            if (failed)\n                cancelAcquire(node);\n        }\n    }\n```\n\n`1.2.2 shouldParkAfterFailedAcquire(p, node)`\n\n```java\n    /**\n     * 进入这里说明抢到锁，这个方法说的是：\"当前线程没有抢到锁，是否需要挂起当前线程？\"\n     * 第一个参数是前驱节点，第二个参数代表当前线程的节点 这里一共有三个规则\n     * 1.如果前继的节点状态为SIGNAL，表明当前节点需要unpark，则返回true 将导致线程阻塞\n     * 2.如果前继节点状态为CANCELLED(ws>0)，说明前置节点已经被放弃，则找到一个非取消的前驱节点        *   返回false，acquireQueued方法的无限循环将递归调用该方法，直至规则1返回true\n     * 3.如果前继节点状态为非SIGNAL、非CANCELLED，则设置前继的状态为SIGNAL\n     *  返回false后进入acquireQueued的无限循环，与规则2同\n     */\n    private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {\n        int ws = pred.waitStatus;\n        // 前驱节点的 waitStatus == -1 ，说明前驱节点状态正常，当前线程需要挂起，直接可以返回true\n        if (ws == Node.SIGNAL)\n            /*\n             * This node has already set status asking a release\n             * to signal it, so it can safely park.\n             */\n            return true;\n\n        // 前驱节点 waitStatus大于0 ，说明前驱节点取消了排队。\n        // 进入阻塞队列排队的线程会被挂起，而唤醒的操作是由前驱节点完成的。\n        // 所以下面这块代码说的是将当前节点的prev指向waitStatus<=0的节点，\n        // 就是为当前节点找一个正常的前驱节点 毕竟当前节点需要等着前驱节点来唤醒\n        if (ws > 0) {\n            /*\n             * Predecessor was cancelled. Skip over predecessors and\n             * indicate retry.\n             */\n            // 这里就在循环直到找到一个waitStatus 不大于 0的前驱节点\n            do { \n                node.prev = pred = pred.prev;\n            } while (pred.waitStatus > 0);\n            pred.next = node;\n        } else {\n            /*\n             * waitStatus must be 0 or PROPAGATE.  Indicate that we\n             * need a signal, but don't park yet.  Caller will need to\n             * retry to make sure it cannot acquire before parking.\n             */\n            // 仔细想想，如果进入到这个分支意味着什么\n            // 前驱节点的waitStatus不等于-1也不大于0，那也就是只可能是0，-2，-3\n            // 这里说明一下：每个新的node入队时，waitStatu都是0\n            // 用CAS将前驱节点的waitStatus设置为Node.SIGNAL(也就是-1)\n            compareAndSetWaitStatus(pred, ws, Node.SIGNAL);\n        }\n        return false;\n    }\n```\n\n`1.2.3  parkAndCheckInterrupt()`\n\n```java\n   /**\n     *这个方法很简单，因为前面返回true，所以需要挂起线程，这个方法就是负责挂起线程的\n     *这里用了LockSupport.park(this)来挂起线程，然后就停在这里了，等待被唤醒\n     */\n    private final boolean parkAndCheckInterrupt() {\n        LockSupport.park(this);\n        return Thread.interrupted();\n    }\n```\n\n### 3. 解锁过程\n\n`reentrantLock.unlock()` 解锁的代码比较相比加锁的要简单不少\n\n```java\n/**\n * 解锁\n */\npublic void unlock() {\n    //1\n    sync.release(1);\n}\n```\n\n`1. sync.release(1)`\n\n```java\n/**\n * 释放锁\n *\n */\n\npublic final boolean release(int arg) {\n   \t//1.1 \n    //这里尝试释放锁如果成功则进入if里面\n    if (tryRelease(arg)) {\n        // h赋值为当前的head节点\n        Node h = head;\n        //如果head节点不是null\n        //并且head节点的waitStatus不等于0 即head节点不是刚初始化的\n        //因为刚初始化是waitStatus是等于0的\n        if (h != null && h.waitStatus != 0)\n            //1.2 \n            //唤醒后继节点\n            unparkSuccessor(h);\n        return true;\n    }\n    return false;\n}\n```\n\n`1.1 tryRelease(1) `\n\n```java\n/**\n * 尝试释放锁\n */\nprotected final boolean tryRelease(int releases) {\n    //可重入锁 所以state可以大于1 每次释放时state减1\n    int c = getState() - releases;\n    //如果当前线程不是拥有锁的线程直接抛出异常 这肯定嘛 都没获取到锁你释放什么\n    if (Thread.currentThread() != getExclusiveOwnerThread())\n        throw new IllegalMonitorStateException();\n    // 是否完全释放锁\n    boolean free = false;\n    // state==0了 说明可以完全释放锁了\n    if (c == 0) {\n        free = true;\n        //把锁的拥有者设置为null\n        setExclusiveOwnerThread(null);\n    }\n    //锁的状态设置为0 即没有被获取\n    setState(c);\n    //到这里 锁已经释放了 \n    //回到上边的release(1)方法\n    return free;\n}\n```\n\n`1.2  unparkSuccessor(h)`\n\n```java\n/**\n * Wakes up node's successor, if one exists.\n * 唤醒后继节点 如果有的话\n * @param node the node 参数node是head头结点\n */\nprivate void unparkSuccessor(Node node) {\n    /*\n     * If status is negative (i.e., possibly needing signal) try\n     * to clear in anticipation of signalling.  It is OK if this\n     * fails or if status is changed by waiting thread.\n     */\n    int ws = node.waitStatus;\n    // 如果head节点当前waitStatus<0, 将其修改为0\n    if (ws < 0)\n        compareAndSetWaitStatus(node, ws, 0);\n    /*\n     * Thread to unpark is held in successor, which is normally\n     * just the next node.  But if cancelled or apparently null,\n     * traverse backwards from tail to find the actual\n     * non-cancelled successor.\n     */\n    // 下面的代码就是唤醒后继节点，但是有可能后继节点取消了等待（waitStatus==1）\n    Node s = node.next;\n  //如果直接后继节点是null或者 waitStatus > 0即取消了等待\n  //那么就直接从队尾往前找，找到waitStatus<=0的所有节点中排在最前面的\n    if (s == null || s.waitStatus > 0) {\n        s = null;\n        // 从后往前找，不必担心中间有节点取消(waitStatus==1)的情况\n        for (Node t = tail; t != null && t != node; t = t.prev)\n            if (t.waitStatus <= 0)\n                s = t;\n    }\n    //如果直接后继节点不是空的就直接唤醒\n    if (s != null)\n        // 唤醒线程\n        LockSupport.unpark(s.thread);\n}\n```\n\n唤醒线程以后，被唤醒的线程将从以下代码中继续往前走：\n\n```java\nprivate final boolean parkAndCheckInterrupt() {\n    LockSupport.park(this); // 刚刚线程被挂起在这里了\n    return Thread.interrupted();\n}\n// 又回到这个方法了：acquireQueued(final Node node, int arg)，这个时候，node的前驱是head了\n```\n\n## 4. 参考\n\n`https://javadoop.com/post/AbstractQueuedSynchronizer#toc0`\n\n`https://blog.csdn.net/chen77716/article/details/6641477`\n\n`https://www.cnblogs.com/waterystone/p/4920797.html`","source":"_posts/source_code/reentrantlock.md","raw":"---\ntitle: ReentrantLock源码分析\ntags:\n  - 源码分析\ncategories:\n  - 源码分析\nabbrlink: ef6a0c58\ndate: 2019-02-24 16:00:00\n---\n\n本文主要对`ReentrantLock`的源码进行了简单的分析，具体包括`ReentrantLock`的初始化(公平锁和非公平锁)，加锁过程和解锁过程等。\n\n<!--more-->\n\n> 更多文章欢迎访问我的个人博客-->[幻境云图](https://www.lixueduan.com/)\n\n## 1. AbstractQueuedSynchronizer\n\n`ReentrantLock`的实现依赖于`AbstractQueuedSynchronizer`所以需要了解一下`AQS`。\n\n### 1.1 简介\n\n类如其名，`抽象的队列式的同步器`，AQS定义了一套多线程访问共享资源的同步器框架，是`java.util.concurrent`的核心，`CountDownLatch`、`FutureTask`、`Semaphore`、`ReentrantLock`等都有一个内部类是这个抽象类的子类。\n\nAQS定义两种资源共享方式：\n\n- Exclusive: 独占，只有一个线程能执行,如ReentrantLock\n- Share: 共享，多个线程可同时执行，如Semaphore/CountDownLatch\n\n### 1.2 AQS的4个属性\n\n```java\n// 头结点，大概可以看做是当前持有锁的线程\nprivate transient volatile Node head;\n// 阻塞的尾节点，每个新的节点进来，都插入到最后\nprivate transient volatile Node tail;\n//当前锁的状态，0代表没有被占用，大于0代表有线程持有当前锁 \n//是可重入锁 每次获取都活加1\nprivate volatile int state;\n// 代表当前持有独占锁的线程 锁重入时用这个来判断当前线程是否已经拥有了锁\n//继承自AbstractOwnableSynchronizer\nprivate transient Thread exclusiveOwnerThread; \n```\n\n### 1.3 阻塞队列Node节点的属性\n\n![CLH队列](https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/source_code/aqs-wait-queue.png)\n\nNode 的数据结构其实也挺简单的，就是 `thread` + `waitStatus` + `pre` + `next` 四个属性而已。\n\n```java\nstatic final class Node {\n    /** Marker to indicate a node is waiting in shared mode */\n    // 标识节点当前在共享模式下\n    static final Node SHARED = new Node();\n    /** Marker to indicate a node is waiting in exclusive mode */\n    // 标识节点当前在独占模式下\n    static final Node EXCLUSIVE = null;\n\n    // ======== 下面的几个int常量是给waitStatus用的 ===========\n    /** waitStatus value to indicate thread has cancelled */\n    // 表示此线程取消了争抢这个锁\n    static final int CANCELLED =  1;\n    /** waitStatus value to indicate successor's thread needs unparking */\n    //被标识为该等待唤醒状态的后继结点，当其前继结点的线程释放了同步锁或被取消，\n    //将会通知该后继结点的线程执行。\n    //就是处于唤醒状态，只要前继结点释放锁，就会通知标识为SIGNAL状态的后继结点的线程执行。\n    static final int SIGNAL    = -1;\n    /** waitStatus value to indicate thread is waiting on condition */\n    //该标识的结点处于等待队列中，结点的线程等待在Condition上,等待其他线程唤醒\n    //当其他线程调用了Condition的signal()方法后，CONDITION状态的结点将\n    //从等待队列转移到同步队列中，等待获取同步锁。\n    static final int CONDITION = -2;\n    /**\n     * waitStatus value to indicate the next acquireShared should\n     * unconditionally propagate\n     */\n    // 与共享模式相关，在共享模式中，该状态标识结点的线程处于可运行状态。\n    static final int PROPAGATE = -3;\n    // =====================================================\n\t// 节点的等待状态\n    // 取值为上面的1、-1、-2、-3，或者0\n    // 这么理解，暂时只需要知道如果这个值 大于0 代表此线程取消了等待，\n    // 也许就是说半天抢不到锁，不抢了，ReentrantLock是可以指定timeouot的\n    //AQS在判断状态时，通过用waitStatus>0表示取消状态，而waitStatus<0表示有效状态。\n    volatile int waitStatus;\n    // 前驱节点的引用\n    volatile Node prev;\n    // 后继节点的引用\n    volatile Node next;\n    // 这个就是线程对象\n    volatile Thread thread;\n\n}\n```\n\n## 2. ReentrantLock的使用\n\n```java\n/**\n * Server层\n * 模拟ReentrantLock使用\n *\n * @author illusoryCloud\n */\npublic class UserServer {\n    /**\n     * 默认是非公平锁 传入参数true则创建的是公平锁\n     */\n    private static ReentrantLock reentrantLock = new ReentrantLock(true);\n\n    public void updateUser() {\n        //加锁 同一时刻只能有一个线程更新User\n        reentrantLock.lock();\n        try {\n\n            //do something\n        } finally {\n            //释放锁放在finally代码块中 保证出现异常等情况也能释放锁\n            reentrantLock.unlock();\n        }\n    }\n}\n```\n\n## 3. ReentrantLock源码分析\n\n### 1. 初始化\n\n`ReentrantLock reentrantLock = new ReentrantLock(true);`\n\n```java\n/**\n *默认是非公平锁\n */\npublic ReentrantLock() {\n    sync = new NonfairSync();\n}\n\npublic ReentrantLock(boolean fair) {\n    sync = fair ? new FairSync() : new NonfairSync();\n}\n```\n\n### 2. 加锁过程\n\n`reentrantLock.lock();`\n\n公平锁实现如下(JDK1.8)：\n\n```java\n    /**\n     * Sync object for fair locks\n     */\n    static final class FairSync extends Sync {\n        private static final long serialVersionUID = -3000897897090466540L;\n\t\t//争锁\n        final void lock() {\n            //1\n            acquire(1);\n        }  \n        \n        /**\n         * Fair version of tryAcquire.  Don't grant access unless\n         * recursive call or no waiters or is first.\n         */\n        protected final boolean tryAcquire(int acquires) {\n            final Thread current = Thread.currentThread();\n            int c = getState();\n            if (c == 0) {\n                if (!hasQueuedPredecessors() &&\n                    compareAndSetState(0, acquires)) {\n                    setExclusiveOwnerThread(current);\n                    return true;\n                }\n            }\n            else if (current == getExclusiveOwnerThread()) {\n                int nextc = c + acquires;\n                if (nextc < 0)\n                    throw new Error(\"Maximum lock count exceeded\");\n                setState(nextc);\n                return true;\n            }\n            return false;\n        }\n    }\n```\n\n`1. acquire(1);`\n\n```java\n    /**\n     * 尝试获取锁\n     */\n    public final void acquire(int arg) {\n        //tryAcquire(1) 首先尝试获取一下锁\n        //若成功则不需要进入等待队列了\n        //1.1\n        if (!tryAcquire(arg) &&\n            //1.2\n            // tryAcquire(arg)没有成功，这个时候需要把当前线程挂起，放到阻塞队列中。\n            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n            //1.3\n            selfInterrupt();\n    }\n```\n\n`1.1 tryAcquire(1)`\n\n```java\n        /**\n         * Fair version of tryAcquire.  Don't grant access unless\n         * recursive call or no waiters or is first.\n         * 尝试直接获取锁，返回值是boolean，代表是否获取到锁\n         * 返回true：1.没有线程在等待锁；2.重入锁，线程本来就持有锁，也就可以理所当然可以直接获取\n         */\n        protected final boolean tryAcquire(int acquires) {\n            //获取当前线程\n            final Thread current = Thread.currentThread();\n            //查看锁的状态\n            int c = getState();\n            //state == 0 此时此刻没有线程持有锁 可以直接获取锁\n            if (c == 0) {\n                //由于是公平锁 则在获取锁之前先看一下队列中还有没有其他等待的线程\n                //讲究先来后到 所以是公平锁  这也是和非公平锁的差别\n                //非公平锁在这里会直接尝试获取锁\n                //1.1.1\n                if (!hasQueuedPredecessors() &&\n                   // 如果没有线程在等待，那就用CAS尝试获取一下锁\n                   // 不成功的话，只能说明几乎同一时刻有个线程抢先获取到了锁\n                   //因为刚才hasQueuedPredecessors判断是前面没有线程在等待的\n                    //1.1.2\n                    compareAndSetState(0, acquires)) {\n                    //获取到锁后把当前线程设置为锁的拥有者\n                    //1.1.3\n                    setExclusiveOwnerThread(current);\n                    //获取锁成功直接返回true\n                    return true;\n                }\n            }\n            //到这里说明当前锁已经被占了\n            //然后判断如果当前线程就是持有锁的线程\n            //那么这次就是锁的重入\n            else if (current == getExclusiveOwnerThread()) {\n                //把state加1\n                int nextc = c + acquires;\n                if (nextc < 0)\n                    throw new Error(\"Maximum lock count exceeded\");\n                //1.1.4\n                setState(nextc);\n                return true;\n            }\n            //上面两个条件都不满足就返回false\n            //获取锁失败了 回到上一个方法继续看\n            return false;\n        }\n```\n\n`1.1.1 hasQueuedPredecessors()`\n\n```java\n/**\n  * 通过判断\"当前线程\"是不是在CLH队列的队首\n  * 来返回AQS中是不是有比“当前线程”等待更久的线程\n  */\npublic final boolean hasQueuedPredecessors() {\n        // The correctness of this depends on head being initialized\n        // before tail and on head.next being accurate if the current\n        // thread is first in queue.\n        Node t = tail; // Read fields in reverse initialization order\n        Node h = head;\n        Node s;\n        return h != t &&\n            ((s = h.next) == null || s.thread != Thread.currentThread());\n    }\n```\n\n`1.1.2 compareAndSetState(0, acquires))`\n\n```java\n/**\n * 通过CAS设置锁的状态\n */     \nprotected final boolean compareAndSetState(int expect, int update) {\n        // See below for intrinsics setup to support this\n        return unsafe.compareAndSwapInt(this, stateOffset, expect, update);\n    }\n```\n\n`1.1.3 setExclusiveOwnerThread(current)`\n\n```java\n/**\n * 设置锁的拥有者\n */     \nprotected final void setExclusiveOwnerThread(Thread thread) {\n        exclusiveOwnerThread = thread;\n    }\n```\n\n`1.1.4 setState(nextc)`\n\n```java\n/**\n * 设置锁的状态\n */    \nprotected final void setState(int newState) {\n        state = newState;\n    }\n```\n\n回到前面的方法\n\n```java\n    /**\n     * 尝试获取锁\n     */\n    public final void acquire(int arg) {\n        //tryAcquire(1) 首先尝试获取一下锁\n        //若成功则不需要进入等待队列了\n        //1.1\n        if (!tryAcquire(arg) &&\n            //1.2\n            // tryAcquire(arg)没有成功，这个时候需要把当前线程挂起，放到阻塞队列中。\n            //addWaiter(Node.EXCLUSIVE) 1.2.1\n            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n            //1.3\n            selfInterrupt();\n    }\n```\n\n`1.1tryAcquire`返回false则继续执行后面的\n\n`1.2acquireQueued(addWaiter(Node.EXCLUSIVE), arg)`\n\n`1.2.1 addWaiter(Node.EXCLUSIVE)`\n\n```java\n/**\n * 此方法的作用是把线程包装成node，同时进入到队列中\n * 参数mode此时是Node.EXCLUSIVE，代表独占模式\n */\n    private Node addWaiter(Node mode) {\n        Node node = new Node(Thread.currentThread(), mode);\n        // Try the fast path of enq; backup to full enq on failure\n        // 以下几行代码想把当前node加到链表的最后面去，也就是进到阻塞队列的最后\n        Node pred = tail;\n\n        // tail!=null --> 队列不为空\n        if (pred != null) { \n            // 设置自己的前驱 为当前的队尾节点\n            node.prev = pred; \n            // 用CAS把自己设置为队尾, 如果成功后，tail == node了\n            //1.2.1.1\n            if (compareAndSetTail(pred, node)) { \n                // 进到这里说明设置成功，当前node==tail, 将自己与之前的队尾相连，\n                // 上面已经有 node.prev = pred\n                // 加上下面这句，也就实现了和之前的尾节点双向连接了\n                pred.next = node;\n                // 线程入队了，可以返回了\n                return node;\n            }\n        }\n        // 仔细看看上面的代码，如果会到这里，\n        // 说明 pred==null(队列是空的) 或者 CAS失败(有线程在竞争入队)\n      \t//1.2.1.2\n        enq(node);\n        return node;\n    }\n```\n\n`1.2.1.1 compareAndSetTail(pred, node)`\n\n```java\n/**\n * 使用CAS设置队列的Tail\n */\nprivate final boolean compareAndSetTail(Node expect, Node update) {\n        return unsafe.compareAndSwapObject(this, tailOffset, expect, update);\n    }\n```\n\n`1.2.1.2enq(node)`\n\n```java\n/**\n * 进入这个方法只有两种可能：1.等待队列为空 2.有线程竞争入队\n * 采用自旋的方式入队\n * CAS设置tail过程中，竞争一次竞争不到，多次竞争，总会排到的\n */\n    private Node enq(final Node node) {\n        //无限循环\n        for (;;) {\n            Node t = tail;\n            // 如果队列是空的就去初始化\n            if (t == null) { // Must initialize\n                // CAS初始化head节点\n                //1.2.1.2.1\n                if (compareAndSetHead(new Node()))\n                // 给后面用：这个时候head节点的waitStatus==0, 看new Node()构造方法就知道了\n                // 这个时候有了head，但是tail还是null，设置一下，\n                // 设置完了以后，继续for循环，下次就到下面的else分支了\n                    tail = head;\n            } else {\n                // 下面几行，和上一个方法 addWaiter 是一样的，\n                // 通过CAS将当前线程排到队尾，有线程竞争的话排不上重复排\n                // 直到成功了才return \n                // 这里return后前面的addWaiter()方法也返回 \n                // 接下来进入acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n                node.prev = t;\n                if (compareAndSetTail(t, node)) {\n                    t.next = node;\n                    return t;\n                }\n            }\n        }\n    }\n\n```\n\n`1.2 acquireQueued(addWaiter(Node.EXCLUSIVE), arg))`\n\n```java\n    /**\n     * 参数node，经过addWaiter(Node.EXCLUSIVE)，此时已经进入阻塞队列\n     * 如果acquireQueued(addWaiter(Node.EXCLUSIVE), arg))返回true的话\n     * 意味着上面这段代码将进入selfInterrupt()，所以正常情况下，下面应该返回false\n     *\n     * 这个方法非常重要，应该说真正的线程挂起，然后被唤醒后去获取锁，都在这个方法里了\n     */\n    final boolean acquireQueued(final Node node, int arg) {\n        boolean failed = true;\n        try {\n            boolean interrupted = false;\n            for (;;) {  //这里无线循环 直到下面的条件满足\n                //获取当前节点的前一个节点 设置为p\n                final Node p = node.predecessor();\n                //p=head说明当前节点是队列的第一个 \n                // 所以当前节点可以去试抢一下锁\n                // enq(node) 方法里面有提到，head是延时初始化的，而且new Node()的时候没有设置任何线程\n                // 也就是说，当前的head可能不属于任何一个线程，所以作为队头，可以去试一试，\n                // tryAcquire已经分析过了,就是简单用CAS试操作一下state\n                if (p == head && tryAcquire(arg)) {\n                    setHead(node);\n                    p.next = null; // help GC\n                    failed = false;\n                    return interrupted;\n                }\n                // 到这里，说明上面的if分支没有成功\n                //要么当前node本来就不是队头\n                // 要么就是tryAcquire(arg)没有抢赢别人\n                //1.2.2\n                if (shouldParkAfterFailedAcquire(p, node) &&\n                    //1.2.3\n                    parkAndCheckInterrupt())\n                    interrupted = true;\n            }\n        } finally {\n            if (failed)\n                cancelAcquire(node);\n        }\n    }\n```\n\n`1.2.2 shouldParkAfterFailedAcquire(p, node)`\n\n```java\n    /**\n     * 进入这里说明抢到锁，这个方法说的是：\"当前线程没有抢到锁，是否需要挂起当前线程？\"\n     * 第一个参数是前驱节点，第二个参数代表当前线程的节点 这里一共有三个规则\n     * 1.如果前继的节点状态为SIGNAL，表明当前节点需要unpark，则返回true 将导致线程阻塞\n     * 2.如果前继节点状态为CANCELLED(ws>0)，说明前置节点已经被放弃，则找到一个非取消的前驱节点        *   返回false，acquireQueued方法的无限循环将递归调用该方法，直至规则1返回true\n     * 3.如果前继节点状态为非SIGNAL、非CANCELLED，则设置前继的状态为SIGNAL\n     *  返回false后进入acquireQueued的无限循环，与规则2同\n     */\n    private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {\n        int ws = pred.waitStatus;\n        // 前驱节点的 waitStatus == -1 ，说明前驱节点状态正常，当前线程需要挂起，直接可以返回true\n        if (ws == Node.SIGNAL)\n            /*\n             * This node has already set status asking a release\n             * to signal it, so it can safely park.\n             */\n            return true;\n\n        // 前驱节点 waitStatus大于0 ，说明前驱节点取消了排队。\n        // 进入阻塞队列排队的线程会被挂起，而唤醒的操作是由前驱节点完成的。\n        // 所以下面这块代码说的是将当前节点的prev指向waitStatus<=0的节点，\n        // 就是为当前节点找一个正常的前驱节点 毕竟当前节点需要等着前驱节点来唤醒\n        if (ws > 0) {\n            /*\n             * Predecessor was cancelled. Skip over predecessors and\n             * indicate retry.\n             */\n            // 这里就在循环直到找到一个waitStatus 不大于 0的前驱节点\n            do { \n                node.prev = pred = pred.prev;\n            } while (pred.waitStatus > 0);\n            pred.next = node;\n        } else {\n            /*\n             * waitStatus must be 0 or PROPAGATE.  Indicate that we\n             * need a signal, but don't park yet.  Caller will need to\n             * retry to make sure it cannot acquire before parking.\n             */\n            // 仔细想想，如果进入到这个分支意味着什么\n            // 前驱节点的waitStatus不等于-1也不大于0，那也就是只可能是0，-2，-3\n            // 这里说明一下：每个新的node入队时，waitStatu都是0\n            // 用CAS将前驱节点的waitStatus设置为Node.SIGNAL(也就是-1)\n            compareAndSetWaitStatus(pred, ws, Node.SIGNAL);\n        }\n        return false;\n    }\n```\n\n`1.2.3  parkAndCheckInterrupt()`\n\n```java\n   /**\n     *这个方法很简单，因为前面返回true，所以需要挂起线程，这个方法就是负责挂起线程的\n     *这里用了LockSupport.park(this)来挂起线程，然后就停在这里了，等待被唤醒\n     */\n    private final boolean parkAndCheckInterrupt() {\n        LockSupport.park(this);\n        return Thread.interrupted();\n    }\n```\n\n### 3. 解锁过程\n\n`reentrantLock.unlock()` 解锁的代码比较相比加锁的要简单不少\n\n```java\n/**\n * 解锁\n */\npublic void unlock() {\n    //1\n    sync.release(1);\n}\n```\n\n`1. sync.release(1)`\n\n```java\n/**\n * 释放锁\n *\n */\n\npublic final boolean release(int arg) {\n   \t//1.1 \n    //这里尝试释放锁如果成功则进入if里面\n    if (tryRelease(arg)) {\n        // h赋值为当前的head节点\n        Node h = head;\n        //如果head节点不是null\n        //并且head节点的waitStatus不等于0 即head节点不是刚初始化的\n        //因为刚初始化是waitStatus是等于0的\n        if (h != null && h.waitStatus != 0)\n            //1.2 \n            //唤醒后继节点\n            unparkSuccessor(h);\n        return true;\n    }\n    return false;\n}\n```\n\n`1.1 tryRelease(1) `\n\n```java\n/**\n * 尝试释放锁\n */\nprotected final boolean tryRelease(int releases) {\n    //可重入锁 所以state可以大于1 每次释放时state减1\n    int c = getState() - releases;\n    //如果当前线程不是拥有锁的线程直接抛出异常 这肯定嘛 都没获取到锁你释放什么\n    if (Thread.currentThread() != getExclusiveOwnerThread())\n        throw new IllegalMonitorStateException();\n    // 是否完全释放锁\n    boolean free = false;\n    // state==0了 说明可以完全释放锁了\n    if (c == 0) {\n        free = true;\n        //把锁的拥有者设置为null\n        setExclusiveOwnerThread(null);\n    }\n    //锁的状态设置为0 即没有被获取\n    setState(c);\n    //到这里 锁已经释放了 \n    //回到上边的release(1)方法\n    return free;\n}\n```\n\n`1.2  unparkSuccessor(h)`\n\n```java\n/**\n * Wakes up node's successor, if one exists.\n * 唤醒后继节点 如果有的话\n * @param node the node 参数node是head头结点\n */\nprivate void unparkSuccessor(Node node) {\n    /*\n     * If status is negative (i.e., possibly needing signal) try\n     * to clear in anticipation of signalling.  It is OK if this\n     * fails or if status is changed by waiting thread.\n     */\n    int ws = node.waitStatus;\n    // 如果head节点当前waitStatus<0, 将其修改为0\n    if (ws < 0)\n        compareAndSetWaitStatus(node, ws, 0);\n    /*\n     * Thread to unpark is held in successor, which is normally\n     * just the next node.  But if cancelled or apparently null,\n     * traverse backwards from tail to find the actual\n     * non-cancelled successor.\n     */\n    // 下面的代码就是唤醒后继节点，但是有可能后继节点取消了等待（waitStatus==1）\n    Node s = node.next;\n  //如果直接后继节点是null或者 waitStatus > 0即取消了等待\n  //那么就直接从队尾往前找，找到waitStatus<=0的所有节点中排在最前面的\n    if (s == null || s.waitStatus > 0) {\n        s = null;\n        // 从后往前找，不必担心中间有节点取消(waitStatus==1)的情况\n        for (Node t = tail; t != null && t != node; t = t.prev)\n            if (t.waitStatus <= 0)\n                s = t;\n    }\n    //如果直接后继节点不是空的就直接唤醒\n    if (s != null)\n        // 唤醒线程\n        LockSupport.unpark(s.thread);\n}\n```\n\n唤醒线程以后，被唤醒的线程将从以下代码中继续往前走：\n\n```java\nprivate final boolean parkAndCheckInterrupt() {\n    LockSupport.park(this); // 刚刚线程被挂起在这里了\n    return Thread.interrupted();\n}\n// 又回到这个方法了：acquireQueued(final Node node, int arg)，这个时候，node的前驱是head了\n```\n\n## 4. 参考\n\n`https://javadoop.com/post/AbstractQueuedSynchronizer#toc0`\n\n`https://blog.csdn.net/chen77716/article/details/6641477`\n\n`https://www.cnblogs.com/waterystone/p/4920797.html`","slug":"source_code/reentrantlock","published":1,"updated":"2019-02-24T08:20:14.810Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsuiv4ca005h0ww48d2226m7","content":"<p>本文主要对<code>ReentrantLock</code>的源码进行了简单的分析，具体包括<code>ReentrantLock</code>的初始化(公平锁和非公平锁)，加锁过程和解锁过程等。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-AbstractQueuedSynchronizer\"><a href=\"#1-AbstractQueuedSynchronizer\" class=\"headerlink\" title=\"1. AbstractQueuedSynchronizer\"></a>1. AbstractQueuedSynchronizer</h2><p><code>ReentrantLock</code>的实现依赖于<code>AbstractQueuedSynchronizer</code>所以需要了解一下<code>AQS</code>。</p>\n<h3 id=\"1-1-简介\"><a href=\"#1-1-简介\" class=\"headerlink\" title=\"1.1 简介\"></a>1.1 简介</h3><p>类如其名，<code>抽象的队列式的同步器</code>，AQS定义了一套多线程访问共享资源的同步器框架，是<code>java.util.concurrent</code>的核心，<code>CountDownLatch</code>、<code>FutureTask</code>、<code>Semaphore</code>、<code>ReentrantLock</code>等都有一个内部类是这个抽象类的子类。</p>\n<p>AQS定义两种资源共享方式：</p>\n<ul>\n<li>Exclusive: 独占，只有一个线程能执行,如ReentrantLock</li>\n<li>Share: 共享，多个线程可同时执行，如Semaphore/CountDownLatch</li>\n</ul>\n<h3 id=\"1-2-AQS的4个属性\"><a href=\"#1-2-AQS的4个属性\" class=\"headerlink\" title=\"1.2 AQS的4个属性\"></a>1.2 AQS的4个属性</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 头结点，大概可以看做是当前持有锁的线程</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> Node head;</span><br><span class=\"line\"><span class=\"comment\">// 阻塞的尾节点，每个新的节点进来，都插入到最后</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> Node tail;</span><br><span class=\"line\"><span class=\"comment\">//当前锁的状态，0代表没有被占用，大于0代表有线程持有当前锁 </span></span><br><span class=\"line\"><span class=\"comment\">//是可重入锁 每次获取都活加1</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> state;</span><br><span class=\"line\"><span class=\"comment\">// 代表当前持有独占锁的线程 锁重入时用这个来判断当前线程是否已经拥有了锁</span></span><br><span class=\"line\"><span class=\"comment\">//继承自AbstractOwnableSynchronizer</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> Thread exclusiveOwnerThread;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3-阻塞队列Node节点的属性\"><a href=\"#1-3-阻塞队列Node节点的属性\" class=\"headerlink\" title=\"1.3 阻塞队列Node节点的属性\"></a>1.3 阻塞队列Node节点的属性</h3><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/source_code/aqs-wait-queue.png\" alt=\"CLH队列\"></p>\n<p>Node 的数据结构其实也挺简单的，就是 <code>thread</code> + <code>waitStatus</code> + <code>pre</code> + <code>next</code> 四个属性而已。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** Marker to indicate a node is waiting in shared mode */</span></span><br><span class=\"line\">    <span class=\"comment\">// 标识节点当前在共享模式下</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Node SHARED = <span class=\"keyword\">new</span> Node();</span><br><span class=\"line\">    <span class=\"comment\">/** Marker to indicate a node is waiting in exclusive mode */</span></span><br><span class=\"line\">    <span class=\"comment\">// 标识节点当前在独占模式下</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Node EXCLUSIVE = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ======== 下面的几个int常量是给waitStatus用的 ===========</span></span><br><span class=\"line\">    <span class=\"comment\">/** waitStatus value to indicate thread has cancelled */</span></span><br><span class=\"line\">    <span class=\"comment\">// 表示此线程取消了争抢这个锁</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CANCELLED =  <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">/** waitStatus value to indicate successor's thread needs unparking */</span></span><br><span class=\"line\">    <span class=\"comment\">//被标识为该等待唤醒状态的后继结点，当其前继结点的线程释放了同步锁或被取消，</span></span><br><span class=\"line\">    <span class=\"comment\">//将会通知该后继结点的线程执行。</span></span><br><span class=\"line\">    <span class=\"comment\">//就是处于唤醒状态，只要前继结点释放锁，就会通知标识为SIGNAL状态的后继结点的线程执行。</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SIGNAL    = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">/** waitStatus value to indicate thread is waiting on condition */</span></span><br><span class=\"line\">    <span class=\"comment\">//该标识的结点处于等待队列中，结点的线程等待在Condition上,等待其他线程唤醒</span></span><br><span class=\"line\">    <span class=\"comment\">//当其他线程调用了Condition的signal()方法后，CONDITION状态的结点将</span></span><br><span class=\"line\">    <span class=\"comment\">//从等待队列转移到同步队列中，等待获取同步锁。</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CONDITION = -<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * waitStatus value to indicate the next acquireShared should</span></span><br><span class=\"line\"><span class=\"comment\">     * unconditionally propagate</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">// 与共享模式相关，在共享模式中，该状态标识结点的线程处于可运行状态。</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PROPAGATE = -<span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"comment\">// =====================================================</span></span><br><span class=\"line\">\t<span class=\"comment\">// 节点的等待状态</span></span><br><span class=\"line\">    <span class=\"comment\">// 取值为上面的1、-1、-2、-3，或者0</span></span><br><span class=\"line\">    <span class=\"comment\">// 这么理解，暂时只需要知道如果这个值 大于0 代表此线程取消了等待，</span></span><br><span class=\"line\">    <span class=\"comment\">// 也许就是说半天抢不到锁，不抢了，ReentrantLock是可以指定timeouot的</span></span><br><span class=\"line\">    <span class=\"comment\">//AQS在判断状态时，通过用waitStatus&gt;0表示取消状态，而waitStatus&lt;0表示有效状态。</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> waitStatus;</span><br><span class=\"line\">    <span class=\"comment\">// 前驱节点的引用</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> Node prev;</span><br><span class=\"line\">    <span class=\"comment\">// 后继节点的引用</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> Node next;</span><br><span class=\"line\">    <span class=\"comment\">// 这个就是线程对象</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> Thread thread;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-ReentrantLock的使用\"><a href=\"#2-ReentrantLock的使用\" class=\"headerlink\" title=\"2. ReentrantLock的使用\"></a>2. ReentrantLock的使用</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Server层</span></span><br><span class=\"line\"><span class=\"comment\"> * 模拟ReentrantLock使用</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 默认是非公平锁 传入参数true则创建的是公平锁</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ReentrantLock reentrantLock = <span class=\"keyword\">new</span> ReentrantLock(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateUser</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//加锁 同一时刻只能有一个线程更新User</span></span><br><span class=\"line\">        reentrantLock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//do something</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//释放锁放在finally代码块中 保证出现异常等情况也能释放锁</span></span><br><span class=\"line\">            reentrantLock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-ReentrantLock源码分析\"><a href=\"#3-ReentrantLock源码分析\" class=\"headerlink\" title=\"3. ReentrantLock源码分析\"></a>3. ReentrantLock源码分析</h2><h3 id=\"1-初始化\"><a href=\"#1-初始化\" class=\"headerlink\" title=\"1. 初始化\"></a>1. 初始化</h3><p><code>ReentrantLock reentrantLock = new ReentrantLock(true);</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *默认是非公平锁</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReentrantLock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    sync = <span class=\"keyword\">new</span> NonfairSync();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReentrantLock</span><span class=\"params\">(<span class=\"keyword\">boolean</span> fair)</span> </span>&#123;</span><br><span class=\"line\">    sync = fair ? <span class=\"keyword\">new</span> FairSync() : <span class=\"keyword\">new</span> NonfairSync();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-加锁过程\"><a href=\"#2-加锁过程\" class=\"headerlink\" title=\"2. 加锁过程\"></a>2. 加锁过程</h3><p><code>reentrantLock.lock();</code></p>\n<p>公平锁实现如下(JDK1.8)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Sync object for fair locks</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FairSync</span> <span class=\"keyword\">extends</span> <span class=\"title\">Sync</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = -<span class=\"number\">3000897897090466540L</span>;</span><br><span class=\"line\"><span class=\"comment\">//争锁</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">//1</span></span><br><span class=\"line\">          acquire(<span class=\"number\">1</span>);</span><br><span class=\"line\">      &#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * Fair version of tryAcquire.  Don't grant access unless</span></span><br><span class=\"line\"><span class=\"comment\">       * recursive call or no waiters or is first.</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryAcquire</span><span class=\"params\">(<span class=\"keyword\">int</span> acquires)</span> </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">final</span> Thread current = Thread.currentThread();</span><br><span class=\"line\">          <span class=\"keyword\">int</span> c = getState();</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class=\"line\">                  compareAndSetState(<span class=\"number\">0</span>, acquires)) &#123;</span><br><span class=\"line\">                  setExclusiveOwnerThread(current);</span><br><span class=\"line\">                  <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">int</span> nextc = c + acquires;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (nextc &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">\"Maximum lock count exceeded\"</span>);</span><br><span class=\"line\">              setState(nextc);</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p><code>1. acquire(1);</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 尝试获取锁</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">acquire</span><span class=\"params\">(<span class=\"keyword\">int</span> arg)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//tryAcquire(1) 首先尝试获取一下锁</span></span><br><span class=\"line\">    <span class=\"comment\">//若成功则不需要进入等待队列了</span></span><br><span class=\"line\">    <span class=\"comment\">//1.1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class=\"line\">        <span class=\"comment\">//1.2</span></span><br><span class=\"line\">        <span class=\"comment\">// tryAcquire(arg)没有成功，这个时候需要把当前线程挂起，放到阻塞队列中。</span></span><br><span class=\"line\">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class=\"line\">        <span class=\"comment\">//1.3</span></span><br><span class=\"line\">        selfInterrupt();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>1.1 tryAcquire(1)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Fair version of tryAcquire.  Don't grant access unless</span></span><br><span class=\"line\"><span class=\"comment\"> * recursive call or no waiters or is first.</span></span><br><span class=\"line\"><span class=\"comment\"> * 尝试直接获取锁，返回值是boolean，代表是否获取到锁</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回true：1.没有线程在等待锁；2.重入锁，线程本来就持有锁，也就可以理所当然可以直接获取</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryAcquire</span><span class=\"params\">(<span class=\"keyword\">int</span> acquires)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取当前线程</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Thread current = Thread.currentThread();</span><br><span class=\"line\">    <span class=\"comment\">//查看锁的状态</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = getState();</span><br><span class=\"line\">    <span class=\"comment\">//state == 0 此时此刻没有线程持有锁 可以直接获取锁</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//由于是公平锁 则在获取锁之前先看一下队列中还有没有其他等待的线程</span></span><br><span class=\"line\">        <span class=\"comment\">//讲究先来后到 所以是公平锁  这也是和非公平锁的差别</span></span><br><span class=\"line\">        <span class=\"comment\">//非公平锁在这里会直接尝试获取锁</span></span><br><span class=\"line\">        <span class=\"comment\">//1.1.1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class=\"line\">           <span class=\"comment\">// 如果没有线程在等待，那就用CAS尝试获取一下锁</span></span><br><span class=\"line\">           <span class=\"comment\">// 不成功的话，只能说明几乎同一时刻有个线程抢先获取到了锁</span></span><br><span class=\"line\">           <span class=\"comment\">//因为刚才hasQueuedPredecessors判断是前面没有线程在等待的</span></span><br><span class=\"line\">            <span class=\"comment\">//1.1.2</span></span><br><span class=\"line\">            compareAndSetState(<span class=\"number\">0</span>, acquires)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取到锁后把当前线程设置为锁的拥有者</span></span><br><span class=\"line\">            <span class=\"comment\">//1.1.3</span></span><br><span class=\"line\">            setExclusiveOwnerThread(current);</span><br><span class=\"line\">            <span class=\"comment\">//获取锁成功直接返回true</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//到这里说明当前锁已经被占了</span></span><br><span class=\"line\">    <span class=\"comment\">//然后判断如果当前线程就是持有锁的线程</span></span><br><span class=\"line\">    <span class=\"comment\">//那么这次就是锁的重入</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//把state加1</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> nextc = c + acquires;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextc &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">\"Maximum lock count exceeded\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//1.1.4</span></span><br><span class=\"line\">        setState(nextc);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//上面两个条件都不满足就返回false</span></span><br><span class=\"line\">    <span class=\"comment\">//获取锁失败了 回到上一个方法继续看</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>1.1.1 hasQueuedPredecessors()</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 通过判断\"当前线程\"是不是在CLH队列的队首</span></span><br><span class=\"line\"><span class=\"comment\">  * 来返回AQS中是不是有比“当前线程”等待更久的线程</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasQueuedPredecessors</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// The correctness of this depends on head being initialized</span></span><br><span class=\"line\">        <span class=\"comment\">// before tail and on head.next being accurate if the current</span></span><br><span class=\"line\">        <span class=\"comment\">// thread is first in queue.</span></span><br><span class=\"line\">        Node t = tail; <span class=\"comment\">// Read fields in reverse initialization order</span></span><br><span class=\"line\">        Node h = head;</span><br><span class=\"line\">        Node s;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> h != t &amp;&amp;</span><br><span class=\"line\">            ((s = h.next) == <span class=\"keyword\">null</span> || s.thread != Thread.currentThread());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><code>1.1.2 compareAndSetState(0, acquires))</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过CAS设置锁的状态</span></span><br><span class=\"line\"><span class=\"comment\"> */</span>     </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSetState</span><span class=\"params\">(<span class=\"keyword\">int</span> expect, <span class=\"keyword\">int</span> update)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// See below for intrinsics setup to support this</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.compareAndSwapInt(<span class=\"keyword\">this</span>, stateOffset, expect, update);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><code>1.1.3 setExclusiveOwnerThread(current)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 设置锁的拥有者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span>     </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setExclusiveOwnerThread</span><span class=\"params\">(Thread thread)</span> </span>&#123;</span><br><span class=\"line\">        exclusiveOwnerThread = thread;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><code>1.1.4 setState(nextc)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 设置锁的状态</span></span><br><span class=\"line\"><span class=\"comment\"> */</span>    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setState</span><span class=\"params\">(<span class=\"keyword\">int</span> newState)</span> </span>&#123;</span><br><span class=\"line\">        state = newState;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>回到前面的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 尝试获取锁</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">acquire</span><span class=\"params\">(<span class=\"keyword\">int</span> arg)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//tryAcquire(1) 首先尝试获取一下锁</span></span><br><span class=\"line\">    <span class=\"comment\">//若成功则不需要进入等待队列了</span></span><br><span class=\"line\">    <span class=\"comment\">//1.1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class=\"line\">        <span class=\"comment\">//1.2</span></span><br><span class=\"line\">        <span class=\"comment\">// tryAcquire(arg)没有成功，这个时候需要把当前线程挂起，放到阻塞队列中。</span></span><br><span class=\"line\">        <span class=\"comment\">//addWaiter(Node.EXCLUSIVE) 1.2.1</span></span><br><span class=\"line\">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class=\"line\">        <span class=\"comment\">//1.3</span></span><br><span class=\"line\">        selfInterrupt();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>1.1tryAcquire</code>返回false则继续执行后面的</p>\n<p><code>1.2acquireQueued(addWaiter(Node.EXCLUSIVE), arg)</code></p>\n<p><code>1.2.1 addWaiter(Node.EXCLUSIVE)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 此方法的作用是把线程包装成node，同时进入到队列中</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数mode此时是Node.EXCLUSIVE，代表独占模式</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">addWaiter</span><span class=\"params\">(Node mode)</span> </span>&#123;</span><br><span class=\"line\">        Node node = <span class=\"keyword\">new</span> Node(Thread.currentThread(), mode);</span><br><span class=\"line\">        <span class=\"comment\">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class=\"line\">        <span class=\"comment\">// 以下几行代码想把当前node加到链表的最后面去，也就是进到阻塞队列的最后</span></span><br><span class=\"line\">        Node pred = tail;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// tail!=null --&gt; 队列不为空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pred != <span class=\"keyword\">null</span>) &#123; </span><br><span class=\"line\">            <span class=\"comment\">// 设置自己的前驱 为当前的队尾节点</span></span><br><span class=\"line\">            node.prev = pred; </span><br><span class=\"line\">            <span class=\"comment\">// 用CAS把自己设置为队尾, 如果成功后，tail == node了</span></span><br><span class=\"line\">            <span class=\"comment\">//1.2.1.1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compareAndSetTail(pred, node)) &#123; </span><br><span class=\"line\">                <span class=\"comment\">// 进到这里说明设置成功，当前node==tail, 将自己与之前的队尾相连，</span></span><br><span class=\"line\">                <span class=\"comment\">// 上面已经有 node.prev = pred</span></span><br><span class=\"line\">                <span class=\"comment\">// 加上下面这句，也就实现了和之前的尾节点双向连接了</span></span><br><span class=\"line\">                pred.next = node;</span><br><span class=\"line\">                <span class=\"comment\">// 线程入队了，可以返回了</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 仔细看看上面的代码，如果会到这里，</span></span><br><span class=\"line\">        <span class=\"comment\">// 说明 pred==null(队列是空的) 或者 CAS失败(有线程在竞争入队)</span></span><br><span class=\"line\">      \t<span class=\"comment\">//1.2.1.2</span></span><br><span class=\"line\">        enq(node);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><code>1.2.1.1 compareAndSetTail(pred, node)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用CAS设置队列的Tail</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSetTail</span><span class=\"params\">(Node expect, Node update)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.compareAndSwapObject(<span class=\"keyword\">this</span>, tailOffset, expect, update);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><code>1.2.1.2enq(node)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 进入这个方法只有两种可能：1.等待队列为空 2.有线程竞争入队</span></span><br><span class=\"line\"><span class=\"comment\"> * 采用自旋的方式入队</span></span><br><span class=\"line\"><span class=\"comment\"> * CAS设置tail过程中，竞争一次竞争不到，多次竞争，总会排到的</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">enq</span><span class=\"params\">(<span class=\"keyword\">final</span> Node node)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//无限循环</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            Node t = tail;</span><br><span class=\"line\">            <span class=\"comment\">// 如果队列是空的就去初始化</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// Must initialize</span></span><br><span class=\"line\">                <span class=\"comment\">// CAS初始化head节点</span></span><br><span class=\"line\">                <span class=\"comment\">//1.2.1.2.1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (compareAndSetHead(<span class=\"keyword\">new</span> Node()))</span><br><span class=\"line\">                <span class=\"comment\">// 给后面用：这个时候head节点的waitStatus==0, 看new Node()构造方法就知道了</span></span><br><span class=\"line\">                <span class=\"comment\">// 这个时候有了head，但是tail还是null，设置一下，</span></span><br><span class=\"line\">                <span class=\"comment\">// 设置完了以后，继续for循环，下次就到下面的else分支了</span></span><br><span class=\"line\">                    tail = head;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 下面几行，和上一个方法 addWaiter 是一样的，</span></span><br><span class=\"line\">                <span class=\"comment\">// 通过CAS将当前线程排到队尾，有线程竞争的话排不上重复排</span></span><br><span class=\"line\">                <span class=\"comment\">// 直到成功了才return </span></span><br><span class=\"line\">                <span class=\"comment\">// 这里return后前面的addWaiter()方法也返回 </span></span><br><span class=\"line\">                <span class=\"comment\">// 接下来进入acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span></span><br><span class=\"line\">                node.prev = t;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class=\"line\">                    t.next = node;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><code>1.2 acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数node，经过addWaiter(Node.EXCLUSIVE)，此时已经进入阻塞队列</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果acquireQueued(addWaiter(Node.EXCLUSIVE), arg))返回true的话</span></span><br><span class=\"line\"><span class=\"comment\"> * 意味着上面这段代码将进入selfInterrupt()，所以正常情况下，下面应该返回false</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 这个方法非常重要，应该说真正的线程挂起，然后被唤醒后去获取锁，都在这个方法里了</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">acquireQueued</span><span class=\"params\">(<span class=\"keyword\">final</span> Node node, <span class=\"keyword\">int</span> arg)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> failed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> interrupted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;  <span class=\"comment\">//这里无线循环 直到下面的条件满足</span></span><br><span class=\"line\">            <span class=\"comment\">//获取当前节点的前一个节点 设置为p</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> Node p = node.predecessor();</span><br><span class=\"line\">            <span class=\"comment\">//p=head说明当前节点是队列的第一个 </span></span><br><span class=\"line\">            <span class=\"comment\">// 所以当前节点可以去试抢一下锁</span></span><br><span class=\"line\">            <span class=\"comment\">// enq(node) 方法里面有提到，head是延时初始化的，而且new Node()的时候没有设置任何线程</span></span><br><span class=\"line\">            <span class=\"comment\">// 也就是说，当前的head可能不属于任何一个线程，所以作为队头，可以去试一试，</span></span><br><span class=\"line\">            <span class=\"comment\">// tryAcquire已经分析过了,就是简单用CAS试操作一下state</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class=\"line\">                setHead(node);</span><br><span class=\"line\">                p.next = <span class=\"keyword\">null</span>; <span class=\"comment\">// help GC</span></span><br><span class=\"line\">                failed = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> interrupted;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 到这里，说明上面的if分支没有成功</span></span><br><span class=\"line\">            <span class=\"comment\">//要么当前node本来就不是队头</span></span><br><span class=\"line\">            <span class=\"comment\">// 要么就是tryAcquire(arg)没有抢赢别人</span></span><br><span class=\"line\">            <span class=\"comment\">//1.2.2</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class=\"line\">                <span class=\"comment\">//1.2.3</span></span><br><span class=\"line\">                parkAndCheckInterrupt())</span><br><span class=\"line\">                interrupted = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (failed)</span><br><span class=\"line\">            cancelAcquire(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>1.2.2 shouldParkAfterFailedAcquire(p, node)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 进入这里说明抢到锁，这个方法说的是：\"当前线程没有抢到锁，是否需要挂起当前线程？\"</span></span><br><span class=\"line\"><span class=\"comment\"> * 第一个参数是前驱节点，第二个参数代表当前线程的节点 这里一共有三个规则</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.如果前继的节点状态为SIGNAL，表明当前节点需要unpark，则返回true 将导致线程阻塞</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.如果前继节点状态为CANCELLED(ws&gt;0)，说明前置节点已经被放弃，则找到一个非取消的前驱节点        *   返回false，acquireQueued方法的无限循环将递归调用该方法，直至规则1返回true</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.如果前继节点状态为非SIGNAL、非CANCELLED，则设置前继的状态为SIGNAL</span></span><br><span class=\"line\"><span class=\"comment\"> *  返回false后进入acquireQueued的无限循环，与规则2同</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldParkAfterFailedAcquire</span><span class=\"params\">(Node pred, Node node)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ws = pred.waitStatus;</span><br><span class=\"line\">    <span class=\"comment\">// 前驱节点的 waitStatus == -1 ，说明前驱节点状态正常，当前线程需要挂起，直接可以返回true</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws == Node.SIGNAL)</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * This node has already set status asking a release</span></span><br><span class=\"line\"><span class=\"comment\">         * to signal it, so it can safely park.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 前驱节点 waitStatus大于0 ，说明前驱节点取消了排队。</span></span><br><span class=\"line\">    <span class=\"comment\">// 进入阻塞队列排队的线程会被挂起，而唤醒的操作是由前驱节点完成的。</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以下面这块代码说的是将当前节点的prev指向waitStatus&lt;=0的节点，</span></span><br><span class=\"line\">    <span class=\"comment\">// 就是为当前节点找一个正常的前驱节点 毕竟当前节点需要等着前驱节点来唤醒</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * Predecessor was cancelled. Skip over predecessors and</span></span><br><span class=\"line\"><span class=\"comment\">         * indicate retry.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"comment\">// 这里就在循环直到找到一个waitStatus 不大于 0的前驱节点</span></span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123; </span><br><span class=\"line\">            node.prev = pred = pred.prev;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (pred.waitStatus &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">        pred.next = node;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * waitStatus must be 0 or PROPAGATE.  Indicate that we</span></span><br><span class=\"line\"><span class=\"comment\">         * need a signal, but don't park yet.  Caller will need to</span></span><br><span class=\"line\"><span class=\"comment\">         * retry to make sure it cannot acquire before parking.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"comment\">// 仔细想想，如果进入到这个分支意味着什么</span></span><br><span class=\"line\">        <span class=\"comment\">// 前驱节点的waitStatus不等于-1也不大于0，那也就是只可能是0，-2，-3</span></span><br><span class=\"line\">        <span class=\"comment\">// 这里说明一下：每个新的node入队时，waitStatu都是0</span></span><br><span class=\"line\">        <span class=\"comment\">// 用CAS将前驱节点的waitStatus设置为Node.SIGNAL(也就是-1)</span></span><br><span class=\"line\">        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>1.2.3  parkAndCheckInterrupt()</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  *这个方法很简单，因为前面返回true，所以需要挂起线程，这个方法就是负责挂起线程的</span></span><br><span class=\"line\"><span class=\"comment\">  *这里用了LockSupport.park(this)来挂起线程，然后就停在这里了，等待被唤醒</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">parkAndCheckInterrupt</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     LockSupport.park(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> Thread.interrupted();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-解锁过程\"><a href=\"#3-解锁过程\" class=\"headerlink\" title=\"3. 解锁过程\"></a>3. 解锁过程</h3><p><code>reentrantLock.unlock()</code> 解锁的代码比较相比加锁的要简单不少</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 解锁</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">unlock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1</span></span><br><span class=\"line\">    sync.release(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>1. sync.release(1)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 释放锁</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">release</span><span class=\"params\">(<span class=\"keyword\">int</span> arg)</span> </span>&#123;</span><br><span class=\"line\">   \t<span class=\"comment\">//1.1 </span></span><br><span class=\"line\">    <span class=\"comment\">//这里尝试释放锁如果成功则进入if里面</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tryRelease(arg)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// h赋值为当前的head节点</span></span><br><span class=\"line\">        Node h = head;</span><br><span class=\"line\">        <span class=\"comment\">//如果head节点不是null</span></span><br><span class=\"line\">        <span class=\"comment\">//并且head节点的waitStatus不等于0 即head节点不是刚初始化的</span></span><br><span class=\"line\">        <span class=\"comment\">//因为刚初始化是waitStatus是等于0的</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (h != <span class=\"keyword\">null</span> &amp;&amp; h.waitStatus != <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"comment\">//1.2 </span></span><br><span class=\"line\">            <span class=\"comment\">//唤醒后继节点</span></span><br><span class=\"line\">            unparkSuccessor(h);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>1.1 tryRelease(1)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 尝试释放锁</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryRelease</span><span class=\"params\">(<span class=\"keyword\">int</span> releases)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//可重入锁 所以state可以大于1 每次释放时state减1</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = getState() - releases;</span><br><span class=\"line\">    <span class=\"comment\">//如果当前线程不是拥有锁的线程直接抛出异常 这肯定嘛 都没获取到锁你释放什么</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalMonitorStateException();</span><br><span class=\"line\">    <span class=\"comment\">// 是否完全释放锁</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> free = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// state==0了 说明可以完全释放锁了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        free = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\">//把锁的拥有者设置为null</span></span><br><span class=\"line\">        setExclusiveOwnerThread(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//锁的状态设置为0 即没有被获取</span></span><br><span class=\"line\">    setState(c);</span><br><span class=\"line\">    <span class=\"comment\">//到这里 锁已经释放了 </span></span><br><span class=\"line\">    <span class=\"comment\">//回到上边的release(1)方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> free;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>1.2  unparkSuccessor(h)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Wakes up node's successor, if one exists.</span></span><br><span class=\"line\"><span class=\"comment\"> * 唤醒后继节点 如果有的话</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> node the node 参数node是head头结点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">unparkSuccessor</span><span class=\"params\">(Node node)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * If status is negative (i.e., possibly needing signal) try</span></span><br><span class=\"line\"><span class=\"comment\">     * to clear in anticipation of signalling.  It is OK if this</span></span><br><span class=\"line\"><span class=\"comment\">     * fails or if status is changed by waiting thread.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ws = node.waitStatus;</span><br><span class=\"line\">    <span class=\"comment\">// 如果head节点当前waitStatus&lt;0, 将其修改为0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        compareAndSetWaitStatus(node, ws, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread to unpark is held in successor, which is normally</span></span><br><span class=\"line\"><span class=\"comment\">     * just the next node.  But if cancelled or apparently null,</span></span><br><span class=\"line\"><span class=\"comment\">     * traverse backwards from tail to find the actual</span></span><br><span class=\"line\"><span class=\"comment\">     * non-cancelled successor.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">// 下面的代码就是唤醒后继节点，但是有可能后继节点取消了等待（waitStatus==1）</span></span><br><span class=\"line\">    Node s = node.next;</span><br><span class=\"line\">  <span class=\"comment\">//如果直接后继节点是null或者 waitStatus &gt; 0即取消了等待</span></span><br><span class=\"line\">  <span class=\"comment\">//那么就直接从队尾往前找，找到waitStatus&lt;=0的所有节点中排在最前面的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span> || s.waitStatus &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        s = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 从后往前找，不必担心中间有节点取消(waitStatus==1)的情况</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Node t = tail; t != <span class=\"keyword\">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t.waitStatus &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                s = t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如果直接后继节点不是空的就直接唤醒</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 唤醒线程</span></span><br><span class=\"line\">        LockSupport.unpark(s.thread);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>唤醒线程以后，被唤醒的线程将从以下代码中继续往前走：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">parkAndCheckInterrupt</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    LockSupport.park(<span class=\"keyword\">this</span>); <span class=\"comment\">// 刚刚线程被挂起在这里了</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Thread.interrupted();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 又回到这个方法了：acquireQueued(final Node node, int arg)，这个时候，node的前驱是head了</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4. 参考\"></a>4. 参考</h2><p><code>https://javadoop.com/post/AbstractQueuedSynchronizer#toc0</code></p>\n<p><code>https://blog.csdn.net/chen77716/article/details/6641477</code></p>\n<p><code>https://www.cnblogs.com/waterystone/p/4920797.html</code></p>\n","site":{"data":{}},"excerpt":"<p>本文主要对<code>ReentrantLock</code>的源码进行了简单的分析，具体包括<code>ReentrantLock</code>的初始化(公平锁和非公平锁)，加锁过程和解锁过程等。</p>","more":"<blockquote>\n<p>更多文章欢迎访问我的个人博客–&gt;<a href=\"https://www.lixueduan.com/\">幻境云图</a></p>\n</blockquote>\n<h2 id=\"1-AbstractQueuedSynchronizer\"><a href=\"#1-AbstractQueuedSynchronizer\" class=\"headerlink\" title=\"1. AbstractQueuedSynchronizer\"></a>1. AbstractQueuedSynchronizer</h2><p><code>ReentrantLock</code>的实现依赖于<code>AbstractQueuedSynchronizer</code>所以需要了解一下<code>AQS</code>。</p>\n<h3 id=\"1-1-简介\"><a href=\"#1-1-简介\" class=\"headerlink\" title=\"1.1 简介\"></a>1.1 简介</h3><p>类如其名，<code>抽象的队列式的同步器</code>，AQS定义了一套多线程访问共享资源的同步器框架，是<code>java.util.concurrent</code>的核心，<code>CountDownLatch</code>、<code>FutureTask</code>、<code>Semaphore</code>、<code>ReentrantLock</code>等都有一个内部类是这个抽象类的子类。</p>\n<p>AQS定义两种资源共享方式：</p>\n<ul>\n<li>Exclusive: 独占，只有一个线程能执行,如ReentrantLock</li>\n<li>Share: 共享，多个线程可同时执行，如Semaphore/CountDownLatch</li>\n</ul>\n<h3 id=\"1-2-AQS的4个属性\"><a href=\"#1-2-AQS的4个属性\" class=\"headerlink\" title=\"1.2 AQS的4个属性\"></a>1.2 AQS的4个属性</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 头结点，大概可以看做是当前持有锁的线程</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> Node head;</span><br><span class=\"line\"><span class=\"comment\">// 阻塞的尾节点，每个新的节点进来，都插入到最后</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> Node tail;</span><br><span class=\"line\"><span class=\"comment\">//当前锁的状态，0代表没有被占用，大于0代表有线程持有当前锁 </span></span><br><span class=\"line\"><span class=\"comment\">//是可重入锁 每次获取都活加1</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> state;</span><br><span class=\"line\"><span class=\"comment\">// 代表当前持有独占锁的线程 锁重入时用这个来判断当前线程是否已经拥有了锁</span></span><br><span class=\"line\"><span class=\"comment\">//继承自AbstractOwnableSynchronizer</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> Thread exclusiveOwnerThread;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3-阻塞队列Node节点的属性\"><a href=\"#1-3-阻塞队列Node节点的属性\" class=\"headerlink\" title=\"1.3 阻塞队列Node节点的属性\"></a>1.3 阻塞队列Node节点的属性</h3><p><img src=\"https://github.com/illusorycloud/illusorycloud.github.io/raw/hexo/myImages/source_code/aqs-wait-queue.png\" alt=\"CLH队列\"></p>\n<p>Node 的数据结构其实也挺简单的，就是 <code>thread</code> + <code>waitStatus</code> + <code>pre</code> + <code>next</code> 四个属性而已。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** Marker to indicate a node is waiting in shared mode */</span></span><br><span class=\"line\">    <span class=\"comment\">// 标识节点当前在共享模式下</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Node SHARED = <span class=\"keyword\">new</span> Node();</span><br><span class=\"line\">    <span class=\"comment\">/** Marker to indicate a node is waiting in exclusive mode */</span></span><br><span class=\"line\">    <span class=\"comment\">// 标识节点当前在独占模式下</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Node EXCLUSIVE = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ======== 下面的几个int常量是给waitStatus用的 ===========</span></span><br><span class=\"line\">    <span class=\"comment\">/** waitStatus value to indicate thread has cancelled */</span></span><br><span class=\"line\">    <span class=\"comment\">// 表示此线程取消了争抢这个锁</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CANCELLED =  <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">/** waitStatus value to indicate successor's thread needs unparking */</span></span><br><span class=\"line\">    <span class=\"comment\">//被标识为该等待唤醒状态的后继结点，当其前继结点的线程释放了同步锁或被取消，</span></span><br><span class=\"line\">    <span class=\"comment\">//将会通知该后继结点的线程执行。</span></span><br><span class=\"line\">    <span class=\"comment\">//就是处于唤醒状态，只要前继结点释放锁，就会通知标识为SIGNAL状态的后继结点的线程执行。</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SIGNAL    = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">/** waitStatus value to indicate thread is waiting on condition */</span></span><br><span class=\"line\">    <span class=\"comment\">//该标识的结点处于等待队列中，结点的线程等待在Condition上,等待其他线程唤醒</span></span><br><span class=\"line\">    <span class=\"comment\">//当其他线程调用了Condition的signal()方法后，CONDITION状态的结点将</span></span><br><span class=\"line\">    <span class=\"comment\">//从等待队列转移到同步队列中，等待获取同步锁。</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CONDITION = -<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * waitStatus value to indicate the next acquireShared should</span></span><br><span class=\"line\"><span class=\"comment\">     * unconditionally propagate</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">// 与共享模式相关，在共享模式中，该状态标识结点的线程处于可运行状态。</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PROPAGATE = -<span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"comment\">// =====================================================</span></span><br><span class=\"line\">\t<span class=\"comment\">// 节点的等待状态</span></span><br><span class=\"line\">    <span class=\"comment\">// 取值为上面的1、-1、-2、-3，或者0</span></span><br><span class=\"line\">    <span class=\"comment\">// 这么理解，暂时只需要知道如果这个值 大于0 代表此线程取消了等待，</span></span><br><span class=\"line\">    <span class=\"comment\">// 也许就是说半天抢不到锁，不抢了，ReentrantLock是可以指定timeouot的</span></span><br><span class=\"line\">    <span class=\"comment\">//AQS在判断状态时，通过用waitStatus&gt;0表示取消状态，而waitStatus&lt;0表示有效状态。</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> waitStatus;</span><br><span class=\"line\">    <span class=\"comment\">// 前驱节点的引用</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> Node prev;</span><br><span class=\"line\">    <span class=\"comment\">// 后继节点的引用</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> Node next;</span><br><span class=\"line\">    <span class=\"comment\">// 这个就是线程对象</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> Thread thread;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-ReentrantLock的使用\"><a href=\"#2-ReentrantLock的使用\" class=\"headerlink\" title=\"2. ReentrantLock的使用\"></a>2. ReentrantLock的使用</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Server层</span></span><br><span class=\"line\"><span class=\"comment\"> * 模拟ReentrantLock使用</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> illusoryCloud</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 默认是非公平锁 传入参数true则创建的是公平锁</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ReentrantLock reentrantLock = <span class=\"keyword\">new</span> ReentrantLock(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateUser</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//加锁 同一时刻只能有一个线程更新User</span></span><br><span class=\"line\">        reentrantLock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//do something</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//释放锁放在finally代码块中 保证出现异常等情况也能释放锁</span></span><br><span class=\"line\">            reentrantLock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-ReentrantLock源码分析\"><a href=\"#3-ReentrantLock源码分析\" class=\"headerlink\" title=\"3. ReentrantLock源码分析\"></a>3. ReentrantLock源码分析</h2><h3 id=\"1-初始化\"><a href=\"#1-初始化\" class=\"headerlink\" title=\"1. 初始化\"></a>1. 初始化</h3><p><code>ReentrantLock reentrantLock = new ReentrantLock(true);</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *默认是非公平锁</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReentrantLock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    sync = <span class=\"keyword\">new</span> NonfairSync();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReentrantLock</span><span class=\"params\">(<span class=\"keyword\">boolean</span> fair)</span> </span>&#123;</span><br><span class=\"line\">    sync = fair ? <span class=\"keyword\">new</span> FairSync() : <span class=\"keyword\">new</span> NonfairSync();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-加锁过程\"><a href=\"#2-加锁过程\" class=\"headerlink\" title=\"2. 加锁过程\"></a>2. 加锁过程</h3><p><code>reentrantLock.lock();</code></p>\n<p>公平锁实现如下(JDK1.8)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Sync object for fair locks</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FairSync</span> <span class=\"keyword\">extends</span> <span class=\"title\">Sync</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = -<span class=\"number\">3000897897090466540L</span>;</span><br><span class=\"line\"><span class=\"comment\">//争锁</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">//1</span></span><br><span class=\"line\">          acquire(<span class=\"number\">1</span>);</span><br><span class=\"line\">      &#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * Fair version of tryAcquire.  Don't grant access unless</span></span><br><span class=\"line\"><span class=\"comment\">       * recursive call or no waiters or is first.</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryAcquire</span><span class=\"params\">(<span class=\"keyword\">int</span> acquires)</span> </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">final</span> Thread current = Thread.currentThread();</span><br><span class=\"line\">          <span class=\"keyword\">int</span> c = getState();</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class=\"line\">                  compareAndSetState(<span class=\"number\">0</span>, acquires)) &#123;</span><br><span class=\"line\">                  setExclusiveOwnerThread(current);</span><br><span class=\"line\">                  <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">int</span> nextc = c + acquires;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (nextc &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">\"Maximum lock count exceeded\"</span>);</span><br><span class=\"line\">              setState(nextc);</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p><code>1. acquire(1);</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 尝试获取锁</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">acquire</span><span class=\"params\">(<span class=\"keyword\">int</span> arg)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//tryAcquire(1) 首先尝试获取一下锁</span></span><br><span class=\"line\">    <span class=\"comment\">//若成功则不需要进入等待队列了</span></span><br><span class=\"line\">    <span class=\"comment\">//1.1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class=\"line\">        <span class=\"comment\">//1.2</span></span><br><span class=\"line\">        <span class=\"comment\">// tryAcquire(arg)没有成功，这个时候需要把当前线程挂起，放到阻塞队列中。</span></span><br><span class=\"line\">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class=\"line\">        <span class=\"comment\">//1.3</span></span><br><span class=\"line\">        selfInterrupt();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>1.1 tryAcquire(1)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Fair version of tryAcquire.  Don't grant access unless</span></span><br><span class=\"line\"><span class=\"comment\"> * recursive call or no waiters or is first.</span></span><br><span class=\"line\"><span class=\"comment\"> * 尝试直接获取锁，返回值是boolean，代表是否获取到锁</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回true：1.没有线程在等待锁；2.重入锁，线程本来就持有锁，也就可以理所当然可以直接获取</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryAcquire</span><span class=\"params\">(<span class=\"keyword\">int</span> acquires)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取当前线程</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Thread current = Thread.currentThread();</span><br><span class=\"line\">    <span class=\"comment\">//查看锁的状态</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = getState();</span><br><span class=\"line\">    <span class=\"comment\">//state == 0 此时此刻没有线程持有锁 可以直接获取锁</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//由于是公平锁 则在获取锁之前先看一下队列中还有没有其他等待的线程</span></span><br><span class=\"line\">        <span class=\"comment\">//讲究先来后到 所以是公平锁  这也是和非公平锁的差别</span></span><br><span class=\"line\">        <span class=\"comment\">//非公平锁在这里会直接尝试获取锁</span></span><br><span class=\"line\">        <span class=\"comment\">//1.1.1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class=\"line\">           <span class=\"comment\">// 如果没有线程在等待，那就用CAS尝试获取一下锁</span></span><br><span class=\"line\">           <span class=\"comment\">// 不成功的话，只能说明几乎同一时刻有个线程抢先获取到了锁</span></span><br><span class=\"line\">           <span class=\"comment\">//因为刚才hasQueuedPredecessors判断是前面没有线程在等待的</span></span><br><span class=\"line\">            <span class=\"comment\">//1.1.2</span></span><br><span class=\"line\">            compareAndSetState(<span class=\"number\">0</span>, acquires)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取到锁后把当前线程设置为锁的拥有者</span></span><br><span class=\"line\">            <span class=\"comment\">//1.1.3</span></span><br><span class=\"line\">            setExclusiveOwnerThread(current);</span><br><span class=\"line\">            <span class=\"comment\">//获取锁成功直接返回true</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//到这里说明当前锁已经被占了</span></span><br><span class=\"line\">    <span class=\"comment\">//然后判断如果当前线程就是持有锁的线程</span></span><br><span class=\"line\">    <span class=\"comment\">//那么这次就是锁的重入</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//把state加1</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> nextc = c + acquires;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextc &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">\"Maximum lock count exceeded\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//1.1.4</span></span><br><span class=\"line\">        setState(nextc);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//上面两个条件都不满足就返回false</span></span><br><span class=\"line\">    <span class=\"comment\">//获取锁失败了 回到上一个方法继续看</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>1.1.1 hasQueuedPredecessors()</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 通过判断\"当前线程\"是不是在CLH队列的队首</span></span><br><span class=\"line\"><span class=\"comment\">  * 来返回AQS中是不是有比“当前线程”等待更久的线程</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasQueuedPredecessors</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// The correctness of this depends on head being initialized</span></span><br><span class=\"line\">        <span class=\"comment\">// before tail and on head.next being accurate if the current</span></span><br><span class=\"line\">        <span class=\"comment\">// thread is first in queue.</span></span><br><span class=\"line\">        Node t = tail; <span class=\"comment\">// Read fields in reverse initialization order</span></span><br><span class=\"line\">        Node h = head;</span><br><span class=\"line\">        Node s;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> h != t &amp;&amp;</span><br><span class=\"line\">            ((s = h.next) == <span class=\"keyword\">null</span> || s.thread != Thread.currentThread());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><code>1.1.2 compareAndSetState(0, acquires))</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过CAS设置锁的状态</span></span><br><span class=\"line\"><span class=\"comment\"> */</span>     </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSetState</span><span class=\"params\">(<span class=\"keyword\">int</span> expect, <span class=\"keyword\">int</span> update)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// See below for intrinsics setup to support this</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.compareAndSwapInt(<span class=\"keyword\">this</span>, stateOffset, expect, update);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><code>1.1.3 setExclusiveOwnerThread(current)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 设置锁的拥有者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span>     </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setExclusiveOwnerThread</span><span class=\"params\">(Thread thread)</span> </span>&#123;</span><br><span class=\"line\">        exclusiveOwnerThread = thread;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><code>1.1.4 setState(nextc)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 设置锁的状态</span></span><br><span class=\"line\"><span class=\"comment\"> */</span>    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setState</span><span class=\"params\">(<span class=\"keyword\">int</span> newState)</span> </span>&#123;</span><br><span class=\"line\">        state = newState;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>回到前面的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 尝试获取锁</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">acquire</span><span class=\"params\">(<span class=\"keyword\">int</span> arg)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//tryAcquire(1) 首先尝试获取一下锁</span></span><br><span class=\"line\">    <span class=\"comment\">//若成功则不需要进入等待队列了</span></span><br><span class=\"line\">    <span class=\"comment\">//1.1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class=\"line\">        <span class=\"comment\">//1.2</span></span><br><span class=\"line\">        <span class=\"comment\">// tryAcquire(arg)没有成功，这个时候需要把当前线程挂起，放到阻塞队列中。</span></span><br><span class=\"line\">        <span class=\"comment\">//addWaiter(Node.EXCLUSIVE) 1.2.1</span></span><br><span class=\"line\">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class=\"line\">        <span class=\"comment\">//1.3</span></span><br><span class=\"line\">        selfInterrupt();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>1.1tryAcquire</code>返回false则继续执行后面的</p>\n<p><code>1.2acquireQueued(addWaiter(Node.EXCLUSIVE), arg)</code></p>\n<p><code>1.2.1 addWaiter(Node.EXCLUSIVE)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 此方法的作用是把线程包装成node，同时进入到队列中</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数mode此时是Node.EXCLUSIVE，代表独占模式</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">addWaiter</span><span class=\"params\">(Node mode)</span> </span>&#123;</span><br><span class=\"line\">        Node node = <span class=\"keyword\">new</span> Node(Thread.currentThread(), mode);</span><br><span class=\"line\">        <span class=\"comment\">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class=\"line\">        <span class=\"comment\">// 以下几行代码想把当前node加到链表的最后面去，也就是进到阻塞队列的最后</span></span><br><span class=\"line\">        Node pred = tail;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// tail!=null --&gt; 队列不为空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pred != <span class=\"keyword\">null</span>) &#123; </span><br><span class=\"line\">            <span class=\"comment\">// 设置自己的前驱 为当前的队尾节点</span></span><br><span class=\"line\">            node.prev = pred; </span><br><span class=\"line\">            <span class=\"comment\">// 用CAS把自己设置为队尾, 如果成功后，tail == node了</span></span><br><span class=\"line\">            <span class=\"comment\">//1.2.1.1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compareAndSetTail(pred, node)) &#123; </span><br><span class=\"line\">                <span class=\"comment\">// 进到这里说明设置成功，当前node==tail, 将自己与之前的队尾相连，</span></span><br><span class=\"line\">                <span class=\"comment\">// 上面已经有 node.prev = pred</span></span><br><span class=\"line\">                <span class=\"comment\">// 加上下面这句，也就实现了和之前的尾节点双向连接了</span></span><br><span class=\"line\">                pred.next = node;</span><br><span class=\"line\">                <span class=\"comment\">// 线程入队了，可以返回了</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 仔细看看上面的代码，如果会到这里，</span></span><br><span class=\"line\">        <span class=\"comment\">// 说明 pred==null(队列是空的) 或者 CAS失败(有线程在竞争入队)</span></span><br><span class=\"line\">      \t<span class=\"comment\">//1.2.1.2</span></span><br><span class=\"line\">        enq(node);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><code>1.2.1.1 compareAndSetTail(pred, node)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用CAS设置队列的Tail</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSetTail</span><span class=\"params\">(Node expect, Node update)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.compareAndSwapObject(<span class=\"keyword\">this</span>, tailOffset, expect, update);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><code>1.2.1.2enq(node)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 进入这个方法只有两种可能：1.等待队列为空 2.有线程竞争入队</span></span><br><span class=\"line\"><span class=\"comment\"> * 采用自旋的方式入队</span></span><br><span class=\"line\"><span class=\"comment\"> * CAS设置tail过程中，竞争一次竞争不到，多次竞争，总会排到的</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">enq</span><span class=\"params\">(<span class=\"keyword\">final</span> Node node)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//无限循环</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            Node t = tail;</span><br><span class=\"line\">            <span class=\"comment\">// 如果队列是空的就去初始化</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// Must initialize</span></span><br><span class=\"line\">                <span class=\"comment\">// CAS初始化head节点</span></span><br><span class=\"line\">                <span class=\"comment\">//1.2.1.2.1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (compareAndSetHead(<span class=\"keyword\">new</span> Node()))</span><br><span class=\"line\">                <span class=\"comment\">// 给后面用：这个时候head节点的waitStatus==0, 看new Node()构造方法就知道了</span></span><br><span class=\"line\">                <span class=\"comment\">// 这个时候有了head，但是tail还是null，设置一下，</span></span><br><span class=\"line\">                <span class=\"comment\">// 设置完了以后，继续for循环，下次就到下面的else分支了</span></span><br><span class=\"line\">                    tail = head;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 下面几行，和上一个方法 addWaiter 是一样的，</span></span><br><span class=\"line\">                <span class=\"comment\">// 通过CAS将当前线程排到队尾，有线程竞争的话排不上重复排</span></span><br><span class=\"line\">                <span class=\"comment\">// 直到成功了才return </span></span><br><span class=\"line\">                <span class=\"comment\">// 这里return后前面的addWaiter()方法也返回 </span></span><br><span class=\"line\">                <span class=\"comment\">// 接下来进入acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span></span><br><span class=\"line\">                node.prev = t;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class=\"line\">                    t.next = node;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><code>1.2 acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数node，经过addWaiter(Node.EXCLUSIVE)，此时已经进入阻塞队列</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果acquireQueued(addWaiter(Node.EXCLUSIVE), arg))返回true的话</span></span><br><span class=\"line\"><span class=\"comment\"> * 意味着上面这段代码将进入selfInterrupt()，所以正常情况下，下面应该返回false</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 这个方法非常重要，应该说真正的线程挂起，然后被唤醒后去获取锁，都在这个方法里了</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">acquireQueued</span><span class=\"params\">(<span class=\"keyword\">final</span> Node node, <span class=\"keyword\">int</span> arg)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> failed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> interrupted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;  <span class=\"comment\">//这里无线循环 直到下面的条件满足</span></span><br><span class=\"line\">            <span class=\"comment\">//获取当前节点的前一个节点 设置为p</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> Node p = node.predecessor();</span><br><span class=\"line\">            <span class=\"comment\">//p=head说明当前节点是队列的第一个 </span></span><br><span class=\"line\">            <span class=\"comment\">// 所以当前节点可以去试抢一下锁</span></span><br><span class=\"line\">            <span class=\"comment\">// enq(node) 方法里面有提到，head是延时初始化的，而且new Node()的时候没有设置任何线程</span></span><br><span class=\"line\">            <span class=\"comment\">// 也就是说，当前的head可能不属于任何一个线程，所以作为队头，可以去试一试，</span></span><br><span class=\"line\">            <span class=\"comment\">// tryAcquire已经分析过了,就是简单用CAS试操作一下state</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class=\"line\">                setHead(node);</span><br><span class=\"line\">                p.next = <span class=\"keyword\">null</span>; <span class=\"comment\">// help GC</span></span><br><span class=\"line\">                failed = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> interrupted;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 到这里，说明上面的if分支没有成功</span></span><br><span class=\"line\">            <span class=\"comment\">//要么当前node本来就不是队头</span></span><br><span class=\"line\">            <span class=\"comment\">// 要么就是tryAcquire(arg)没有抢赢别人</span></span><br><span class=\"line\">            <span class=\"comment\">//1.2.2</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class=\"line\">                <span class=\"comment\">//1.2.3</span></span><br><span class=\"line\">                parkAndCheckInterrupt())</span><br><span class=\"line\">                interrupted = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (failed)</span><br><span class=\"line\">            cancelAcquire(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>1.2.2 shouldParkAfterFailedAcquire(p, node)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 进入这里说明抢到锁，这个方法说的是：\"当前线程没有抢到锁，是否需要挂起当前线程？\"</span></span><br><span class=\"line\"><span class=\"comment\"> * 第一个参数是前驱节点，第二个参数代表当前线程的节点 这里一共有三个规则</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.如果前继的节点状态为SIGNAL，表明当前节点需要unpark，则返回true 将导致线程阻塞</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.如果前继节点状态为CANCELLED(ws&gt;0)，说明前置节点已经被放弃，则找到一个非取消的前驱节点        *   返回false，acquireQueued方法的无限循环将递归调用该方法，直至规则1返回true</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.如果前继节点状态为非SIGNAL、非CANCELLED，则设置前继的状态为SIGNAL</span></span><br><span class=\"line\"><span class=\"comment\"> *  返回false后进入acquireQueued的无限循环，与规则2同</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldParkAfterFailedAcquire</span><span class=\"params\">(Node pred, Node node)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ws = pred.waitStatus;</span><br><span class=\"line\">    <span class=\"comment\">// 前驱节点的 waitStatus == -1 ，说明前驱节点状态正常，当前线程需要挂起，直接可以返回true</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws == Node.SIGNAL)</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * This node has already set status asking a release</span></span><br><span class=\"line\"><span class=\"comment\">         * to signal it, so it can safely park.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 前驱节点 waitStatus大于0 ，说明前驱节点取消了排队。</span></span><br><span class=\"line\">    <span class=\"comment\">// 进入阻塞队列排队的线程会被挂起，而唤醒的操作是由前驱节点完成的。</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以下面这块代码说的是将当前节点的prev指向waitStatus&lt;=0的节点，</span></span><br><span class=\"line\">    <span class=\"comment\">// 就是为当前节点找一个正常的前驱节点 毕竟当前节点需要等着前驱节点来唤醒</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * Predecessor was cancelled. Skip over predecessors and</span></span><br><span class=\"line\"><span class=\"comment\">         * indicate retry.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"comment\">// 这里就在循环直到找到一个waitStatus 不大于 0的前驱节点</span></span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123; </span><br><span class=\"line\">            node.prev = pred = pred.prev;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (pred.waitStatus &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">        pred.next = node;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * waitStatus must be 0 or PROPAGATE.  Indicate that we</span></span><br><span class=\"line\"><span class=\"comment\">         * need a signal, but don't park yet.  Caller will need to</span></span><br><span class=\"line\"><span class=\"comment\">         * retry to make sure it cannot acquire before parking.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"comment\">// 仔细想想，如果进入到这个分支意味着什么</span></span><br><span class=\"line\">        <span class=\"comment\">// 前驱节点的waitStatus不等于-1也不大于0，那也就是只可能是0，-2，-3</span></span><br><span class=\"line\">        <span class=\"comment\">// 这里说明一下：每个新的node入队时，waitStatu都是0</span></span><br><span class=\"line\">        <span class=\"comment\">// 用CAS将前驱节点的waitStatus设置为Node.SIGNAL(也就是-1)</span></span><br><span class=\"line\">        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>1.2.3  parkAndCheckInterrupt()</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  *这个方法很简单，因为前面返回true，所以需要挂起线程，这个方法就是负责挂起线程的</span></span><br><span class=\"line\"><span class=\"comment\">  *这里用了LockSupport.park(this)来挂起线程，然后就停在这里了，等待被唤醒</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">parkAndCheckInterrupt</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     LockSupport.park(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> Thread.interrupted();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-解锁过程\"><a href=\"#3-解锁过程\" class=\"headerlink\" title=\"3. 解锁过程\"></a>3. 解锁过程</h3><p><code>reentrantLock.unlock()</code> 解锁的代码比较相比加锁的要简单不少</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 解锁</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">unlock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1</span></span><br><span class=\"line\">    sync.release(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>1. sync.release(1)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 释放锁</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">release</span><span class=\"params\">(<span class=\"keyword\">int</span> arg)</span> </span>&#123;</span><br><span class=\"line\">   \t<span class=\"comment\">//1.1 </span></span><br><span class=\"line\">    <span class=\"comment\">//这里尝试释放锁如果成功则进入if里面</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tryRelease(arg)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// h赋值为当前的head节点</span></span><br><span class=\"line\">        Node h = head;</span><br><span class=\"line\">        <span class=\"comment\">//如果head节点不是null</span></span><br><span class=\"line\">        <span class=\"comment\">//并且head节点的waitStatus不等于0 即head节点不是刚初始化的</span></span><br><span class=\"line\">        <span class=\"comment\">//因为刚初始化是waitStatus是等于0的</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (h != <span class=\"keyword\">null</span> &amp;&amp; h.waitStatus != <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"comment\">//1.2 </span></span><br><span class=\"line\">            <span class=\"comment\">//唤醒后继节点</span></span><br><span class=\"line\">            unparkSuccessor(h);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>1.1 tryRelease(1)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 尝试释放锁</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryRelease</span><span class=\"params\">(<span class=\"keyword\">int</span> releases)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//可重入锁 所以state可以大于1 每次释放时state减1</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = getState() - releases;</span><br><span class=\"line\">    <span class=\"comment\">//如果当前线程不是拥有锁的线程直接抛出异常 这肯定嘛 都没获取到锁你释放什么</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalMonitorStateException();</span><br><span class=\"line\">    <span class=\"comment\">// 是否完全释放锁</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> free = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// state==0了 说明可以完全释放锁了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        free = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\">//把锁的拥有者设置为null</span></span><br><span class=\"line\">        setExclusiveOwnerThread(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//锁的状态设置为0 即没有被获取</span></span><br><span class=\"line\">    setState(c);</span><br><span class=\"line\">    <span class=\"comment\">//到这里 锁已经释放了 </span></span><br><span class=\"line\">    <span class=\"comment\">//回到上边的release(1)方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> free;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>1.2  unparkSuccessor(h)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Wakes up node's successor, if one exists.</span></span><br><span class=\"line\"><span class=\"comment\"> * 唤醒后继节点 如果有的话</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> node the node 参数node是head头结点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">unparkSuccessor</span><span class=\"params\">(Node node)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * If status is negative (i.e., possibly needing signal) try</span></span><br><span class=\"line\"><span class=\"comment\">     * to clear in anticipation of signalling.  It is OK if this</span></span><br><span class=\"line\"><span class=\"comment\">     * fails or if status is changed by waiting thread.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ws = node.waitStatus;</span><br><span class=\"line\">    <span class=\"comment\">// 如果head节点当前waitStatus&lt;0, 将其修改为0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        compareAndSetWaitStatus(node, ws, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread to unpark is held in successor, which is normally</span></span><br><span class=\"line\"><span class=\"comment\">     * just the next node.  But if cancelled or apparently null,</span></span><br><span class=\"line\"><span class=\"comment\">     * traverse backwards from tail to find the actual</span></span><br><span class=\"line\"><span class=\"comment\">     * non-cancelled successor.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">// 下面的代码就是唤醒后继节点，但是有可能后继节点取消了等待（waitStatus==1）</span></span><br><span class=\"line\">    Node s = node.next;</span><br><span class=\"line\">  <span class=\"comment\">//如果直接后继节点是null或者 waitStatus &gt; 0即取消了等待</span></span><br><span class=\"line\">  <span class=\"comment\">//那么就直接从队尾往前找，找到waitStatus&lt;=0的所有节点中排在最前面的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span> || s.waitStatus &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        s = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 从后往前找，不必担心中间有节点取消(waitStatus==1)的情况</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Node t = tail; t != <span class=\"keyword\">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t.waitStatus &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                s = t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如果直接后继节点不是空的就直接唤醒</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 唤醒线程</span></span><br><span class=\"line\">        LockSupport.unpark(s.thread);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>唤醒线程以后，被唤醒的线程将从以下代码中继续往前走：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">parkAndCheckInterrupt</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    LockSupport.park(<span class=\"keyword\">this</span>); <span class=\"comment\">// 刚刚线程被挂起在这里了</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Thread.interrupted();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 又回到这个方法了：acquireQueued(final Node node, int arg)，这个时候，node的前驱是head了</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4. 参考\"></a>4. 参考</h2><p><code>https://javadoop.com/post/AbstractQueuedSynchronizer#toc0</code></p>\n<p><code>https://blog.csdn.net/chen77716/article/details/6641477</code></p>\n<p><code>https://www.cnblogs.com/waterystone/p/4920797.html</code></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjsuiv42j00030ww45t0lr2mh","category_id":"cjsuiv42x00050ww4y6x91ch3","_id":"cjsuiv43s000f0ww4ol9uo11f"},{"post_id":"cjsuiv42u00040ww4mijzclj4","category_id":"cjsuiv42x00050ww4y6x91ch3","_id":"cjsuiv441000k0ww4gi99utzz"},{"post_id":"cjsuiv43w000h0ww4s7v9gzij","category_id":"cjsuiv43r000e0ww40dbl550k","_id":"cjsuiv447000q0ww4z9a4n8t4"},{"post_id":"cjsuiv43200070ww4r7z8s3fz","category_id":"cjsuiv43r000e0ww40dbl550k","_id":"cjsuiv44b000u0ww4hk93oufh"},{"post_id":"cjsuiv43700080ww4qr20m2xf","category_id":"cjsuiv43r000e0ww40dbl550k","_id":"cjsuiv44g000z0ww4wpuoskge"},{"post_id":"cjsuiv43900090ww433lc91s9","category_id":"cjsuiv43r000e0ww40dbl550k","_id":"cjsuiv44m00150ww4cw739nlm"},{"post_id":"cjsuiv44i00110ww4q5p13kqf","category_id":"cjsuiv43r000e0ww40dbl550k","_id":"cjsuiv44s001b0ww4zv17l7fb"},{"post_id":"cjsuiv43j000c0ww4jwgxn67d","category_id":"cjsuiv43r000e0ww40dbl550k","_id":"cjsuiv44v001f0ww4gwh91u08"},{"post_id":"cjsuiv43o000d0ww4y0ns7sos","category_id":"cjsuiv43r000e0ww40dbl550k","_id":"cjsuiv44y001i0ww4t7z0lo0g"},{"post_id":"cjsuiv440000j0ww4evvnvgwp","category_id":"cjsuiv44s001c0ww4i8uq0010","_id":"cjsuiv456001o0ww45znqolxo"},{"post_id":"cjsuiv444000o0ww4qv8vqm55","category_id":"cjsuiv44y001j0ww4ikrp7xkr","_id":"cjsuiv45f001w0ww4047d7fxv"},{"post_id":"cjsuiv445000p0ww4onz4arpx","category_id":"cjsuiv44y001j0ww4ikrp7xkr","_id":"cjsuiv45k00200ww4hp1up5qi"},{"post_id":"cjsuiv44a000t0ww46mc7ouvt","category_id":"cjsuiv44y001j0ww4ikrp7xkr","_id":"cjsuiv45m00230ww41t9gfmm3"},{"post_id":"cjsuiv44c000w0ww46u6jg9ou","category_id":"cjsuiv45j001z0ww4s7y92u36","_id":"cjsuiv45q00280ww4dwi88nhd"},{"post_id":"cjsuiv44k00130ww44kgifcwp","category_id":"cjsuiv45j001z0ww4s7y92u36","_id":"cjsuiv45s002b0ww45m4kxoj0"},{"post_id":"cjsuiv44o00180ww4z4uys5ny","category_id":"cjsuiv45p00270ww4uc40rxfn","_id":"cjsuiv45v002g0ww4lclz469f"},{"post_id":"cjsuiv44q001a0ww49uf4kv76","category_id":"cjsuiv45p00270ww4uc40rxfn","_id":"cjsuiv45x002k0ww4q1lg2u0n"},{"post_id":"cjsuiv44u001e0ww4zhj6xvdt","category_id":"cjsuiv45p00270ww4uc40rxfn","_id":"cjsuiv460002o0ww45f4p32ti"},{"post_id":"cjsuiv44w001h0ww4mkfzn4qg","category_id":"cjsuiv45p00270ww4uc40rxfn","_id":"cjsuiv464002s0ww4fos34283"},{"post_id":"cjsuiv451001l0ww49xpxwl44","category_id":"cjsuiv45p00270ww4uc40rxfn","_id":"cjsuiv466002v0ww4hwyct7v4"},{"post_id":"cjsuiv454001n0ww4bk8pq6ij","category_id":"cjsuiv463002r0ww4sajstp91","_id":"cjsuiv469002z0ww4gmmwwnsl"},{"post_id":"cjsuiv458001r0ww4tuscdvlg","category_id":"cjsuiv466002w0ww4zw3yiwgj","_id":"cjsuiv46e00350ww4ntagm7ew"},{"post_id":"cjsuiv45c001t0ww4n3yewurj","category_id":"cjsuiv466002w0ww4zw3yiwgj","_id":"cjsuiv46g00370ww49e9i1vmk"},{"post_id":"cjsuiv45g001x0ww418w8sry5","category_id":"cjsuiv466002w0ww4zw3yiwgj","_id":"cjsuiv46h003a0ww438bd4dmx"},{"post_id":"cjsuiv4a2003h0ww45k1gzc7g","category_id":"cjsuiv42x00050ww4y6x91ch3","_id":"cjsuiv4ab003o0ww4hh5az7q9"},{"post_id":"cjsuiv4a4003k0ww484do46lk","category_id":"cjsuiv42x00050ww4y6x91ch3","_id":"cjsuiv4ae003s0ww41p18ijbk"},{"post_id":"cjsuiv4a8003m0ww417qrp8jl","category_id":"cjsuiv42x00050ww4y6x91ch3","_id":"cjsuiv4ah003v0ww4tkwak2l9"},{"post_id":"cjsuiv4a0003g0ww46xy1t3ec","category_id":"cjsuiv4a3003i0ww4ajwymirt","_id":"cjsuiv4ao00400ww4qgrp4onx"},{"post_id":"cjsuiv4aa003n0ww47hqbm2t2","category_id":"cjsuiv45j001z0ww4s7y92u36","_id":"cjsuiv4as00430ww4awtm3qnd"},{"post_id":"cjsuiv4af003u0ww4ginlh25d","category_id":"cjsuiv43r000e0ww40dbl550k","_id":"cjsuiv4aw00460ww42krd0tjq"},{"post_id":"cjsuiv4al003z0ww4u4rqxb62","category_id":"cjsuiv43r000e0ww40dbl550k","_id":"cjsuiv4az00490ww4u3aipx0w"},{"post_id":"cjsuiv4aq00420ww4kuaxlj1x","category_id":"cjsuiv43r000e0ww40dbl550k","_id":"cjsuiv4b2004c0ww4zt2q9h4w"},{"post_id":"cjsuiv4ad003r0ww4k18mc6jv","category_id":"cjsuiv4ai003w0ww4rzdmain0","_id":"cjsuiv4b4004f0ww424kgldbn"},{"post_id":"cjsuiv4au00450ww4j8d0p6ci","category_id":"cjsuiv43r000e0ww40dbl550k","_id":"cjsuiv4b6004i0ww4vqvgdaw1"},{"post_id":"cjsuiv4ay00480ww4408so5uo","category_id":"cjsuiv43r000e0ww40dbl550k","_id":"cjsuiv4b8004l0ww4y0ojhg3f"},{"post_id":"cjsuiv4b0004b0ww4x2xgoxfo","category_id":"cjsuiv43r000e0ww40dbl550k","_id":"cjsuiv4bb004o0ww4v6ogsyhe"},{"post_id":"cjsuiv4b3004e0ww4dngeoqa7","category_id":"cjsuiv44s001c0ww4i8uq0010","_id":"cjsuiv4be004r0ww4wemtv7my"},{"post_id":"cjsuiv4b5004h0ww46zkqpq8l","category_id":"cjsuiv44y001j0ww4ikrp7xkr","_id":"cjsuiv4bg004u0ww4yd351uuz"},{"post_id":"cjsuiv4b7004k0ww4b8ulnvb2","category_id":"cjsuiv44y001j0ww4ikrp7xkr","_id":"cjsuiv4bk004x0ww4xvtoh8j3"},{"post_id":"cjsuiv4b9004n0ww4zaiotpng","category_id":"cjsuiv45j001z0ww4s7y92u36","_id":"cjsuiv4bo00520ww427jx4xrt"},{"post_id":"cjsuiv4bc004q0ww4tq1vcvlf","category_id":"cjsuiv45j001z0ww4s7y92u36","_id":"cjsuiv4bq00540ww4a202ksvv"},{"post_id":"cjsuiv4bj004w0ww432z13ks3","category_id":"cjsuiv466002w0ww4zw3yiwgj","_id":"cjsuiv4br00580ww4hdlxefjm"},{"post_id":"cjsuiv4bf004t0ww4jdsiyp7x","category_id":"cjsuiv4bl004y0ww4yqf1erzm","_id":"cjsuiv4bt005b0ww4t2gsjlmy"},{"post_id":"cjsuiv4bn00510ww4gxs89ey4","category_id":"cjsuiv4br00560ww4bcctjqn6","_id":"cjsuiv4bv005e0ww4y9943k5q"},{"post_id":"cjsuiv4c8005g0ww42ppi1h81","category_id":"cjsuiv4a3003i0ww4ajwymirt","_id":"cjsuiv4cd005l0ww4kf4ebsl0"},{"post_id":"cjsuiv4ca005h0ww48d2226m7","category_id":"cjsuiv4cc005j0ww42edwihq3","_id":"cjsuiv4cf005n0ww4a5ms6ygw"}],"PostTag":[{"post_id":"cjsuiv42j00030ww45t0lr2mh","tag_id":"cjsuiv43000060ww4b28wo78r","_id":"cjsuiv43z000i0ww4bxprtfub"},{"post_id":"cjsuiv42j00030ww45t0lr2mh","tag_id":"cjsuiv43e000b0ww4dolz58yj","_id":"cjsuiv441000l0ww4409xtl4p"},{"post_id":"cjsuiv42u00040ww4mijzclj4","tag_id":"cjsuiv43000060ww4b28wo78r","_id":"cjsuiv44b000v0ww4l57n1o32"},{"post_id":"cjsuiv42u00040ww4mijzclj4","tag_id":"cjsuiv43e000b0ww4dolz58yj","_id":"cjsuiv44f000x0ww43kfugkgw"},{"post_id":"cjsuiv43200070ww4r7z8s3fz","tag_id":"cjsuiv448000s0ww4h2zfkizj","_id":"cjsuiv44j00120ww4ew3i9gyv"},{"post_id":"cjsuiv44i00110ww4q5p13kqf","tag_id":"cjsuiv448000s0ww4h2zfkizj","_id":"cjsuiv44o00170ww4v2uzymvj"},{"post_id":"cjsuiv43700080ww4qr20m2xf","tag_id":"cjsuiv448000s0ww4h2zfkizj","_id":"cjsuiv44q00190ww47cqd4wuv"},{"post_id":"cjsuiv43900090ww433lc91s9","tag_id":"cjsuiv448000s0ww4h2zfkizj","_id":"cjsuiv44w001g0ww4evbatykh"},{"post_id":"cjsuiv43j000c0ww4jwgxn67d","tag_id":"cjsuiv448000s0ww4h2zfkizj","_id":"cjsuiv453001m0ww4xmzez98h"},{"post_id":"cjsuiv43o000d0ww4y0ns7sos","tag_id":"cjsuiv448000s0ww4h2zfkizj","_id":"cjsuiv45b001s0ww4vbwmlyi5"},{"post_id":"cjsuiv43w000h0ww4s7v9gzij","tag_id":"cjsuiv448000s0ww4h2zfkizj","_id":"cjsuiv45i001y0ww4hhgt3xsq"},{"post_id":"cjsuiv440000j0ww4evvnvgwp","tag_id":"cjsuiv45e001u0ww40120yt2m","_id":"cjsuiv45l00220ww4dqplrer2"},{"post_id":"cjsuiv444000o0ww4qv8vqm55","tag_id":"cjsuiv45k00210ww4hchgw06n","_id":"cjsuiv45o00260ww4q1d2hsvi"},{"post_id":"cjsuiv445000p0ww4onz4arpx","tag_id":"cjsuiv45k00210ww4hchgw06n","_id":"cjsuiv45r002a0ww4jmdtg5f9"},{"post_id":"cjsuiv44a000t0ww46mc7ouvt","tag_id":"cjsuiv45k00210ww4hchgw06n","_id":"cjsuiv45u002e0ww4ye5902sg"},{"post_id":"cjsuiv44c000w0ww46u6jg9ou","tag_id":"cjsuiv45s002c0ww47ygg6su5","_id":"cjsuiv45w002i0ww4zei5m67f"},{"post_id":"cjsuiv44k00130ww44kgifcwp","tag_id":"cjsuiv45s002c0ww47ygg6su5","_id":"cjsuiv45z002m0ww4usopw2fu"},{"post_id":"cjsuiv44o00180ww4z4uys5ny","tag_id":"cjsuiv45y002l0ww4cqbqnf34","_id":"cjsuiv462002q0ww44jce0w8r"},{"post_id":"cjsuiv44q001a0ww49uf4kv76","tag_id":"cjsuiv45y002l0ww4cqbqnf34","_id":"cjsuiv465002u0ww43zx4gv68"},{"post_id":"cjsuiv44u001e0ww4zhj6xvdt","tag_id":"cjsuiv45y002l0ww4cqbqnf34","_id":"cjsuiv468002y0ww4i555w0cp"},{"post_id":"cjsuiv44w001h0ww4mkfzn4qg","tag_id":"cjsuiv45y002l0ww4cqbqnf34","_id":"cjsuiv46c00320ww4pyqp4m7t"},{"post_id":"cjsuiv451001l0ww49xpxwl44","tag_id":"cjsuiv45y002l0ww4cqbqnf34","_id":"cjsuiv46f00360ww4vclpcm5l"},{"post_id":"cjsuiv454001n0ww4bk8pq6ij","tag_id":"cjsuiv46d00330ww4yxfj3j2f","_id":"cjsuiv46h00390ww42hirmneo"},{"post_id":"cjsuiv458001r0ww4tuscdvlg","tag_id":"cjsuiv46g00380ww4icnoaf3z","_id":"cjsuiv46i003c0ww4ujj2za58"},{"post_id":"cjsuiv45c001t0ww4n3yewurj","tag_id":"cjsuiv46g00380ww4icnoaf3z","_id":"cjsuiv46k003e0ww4f4zse8vj"},{"post_id":"cjsuiv45g001x0ww418w8sry5","tag_id":"cjsuiv46g00380ww4icnoaf3z","_id":"cjsuiv46k003f0ww4affgsas0"},{"post_id":"cjsuiv4a2003h0ww45k1gzc7g","tag_id":"cjsuiv43000060ww4b28wo78r","_id":"cjsuiv4a7003l0ww4nbraxshd"},{"post_id":"cjsuiv4a8003m0ww417qrp8jl","tag_id":"cjsuiv43000060ww4b28wo78r","_id":"cjsuiv4ac003q0ww41qgyjpuo"},{"post_id":"cjsuiv4a8003m0ww417qrp8jl","tag_id":"cjsuiv43e000b0ww4dolz58yj","_id":"cjsuiv4af003t0ww4erx8mm0f"},{"post_id":"cjsuiv4a0003g0ww46xy1t3ec","tag_id":"cjsuiv4a4003j0ww4o0ow5c7y","_id":"cjsuiv4ak003y0ww4yyygkvuh"},{"post_id":"cjsuiv4aa003n0ww47hqbm2t2","tag_id":"cjsuiv45s002c0ww47ygg6su5","_id":"cjsuiv4ap00410ww47md7rpmk"},{"post_id":"cjsuiv4a4003k0ww484do46lk","tag_id":"cjsuiv43000060ww4b28wo78r","_id":"cjsuiv4at00440ww4oqxy0jlr"},{"post_id":"cjsuiv4a4003k0ww484do46lk","tag_id":"cjsuiv4ab003p0ww4wlqpnt1m","_id":"cjsuiv4ax00470ww4hh3h6hsf"},{"post_id":"cjsuiv4af003u0ww4ginlh25d","tag_id":"cjsuiv448000s0ww4h2zfkizj","_id":"cjsuiv4b0004a0ww4t8wqd7gy"},{"post_id":"cjsuiv4al003z0ww4u4rqxb62","tag_id":"cjsuiv45s002c0ww47ygg6su5","_id":"cjsuiv4b2004d0ww4wppxdqpa"},{"post_id":"cjsuiv4al003z0ww4u4rqxb62","tag_id":"cjsuiv448000s0ww4h2zfkizj","_id":"cjsuiv4b5004g0ww49u5dyt1r"},{"post_id":"cjsuiv4aq00420ww4kuaxlj1x","tag_id":"cjsuiv448000s0ww4h2zfkizj","_id":"cjsuiv4b7004j0ww4yotir192"},{"post_id":"cjsuiv4ad003r0ww4k18mc6jv","tag_id":"cjsuiv4aj003x0ww4shdhip4l","_id":"cjsuiv4b9004m0ww44rai7k2y"},{"post_id":"cjsuiv4au00450ww4j8d0p6ci","tag_id":"cjsuiv448000s0ww4h2zfkizj","_id":"cjsuiv4bc004p0ww4p8j786mn"},{"post_id":"cjsuiv4ay00480ww4408so5uo","tag_id":"cjsuiv448000s0ww4h2zfkizj","_id":"cjsuiv4be004s0ww44aek16vg"},{"post_id":"cjsuiv4b0004b0ww4x2xgoxfo","tag_id":"cjsuiv448000s0ww4h2zfkizj","_id":"cjsuiv4bi004v0ww4ru70b5hu"},{"post_id":"cjsuiv4b3004e0ww4dngeoqa7","tag_id":"cjsuiv45e001u0ww40120yt2m","_id":"cjsuiv4bm00500ww4k0u76i74"},{"post_id":"cjsuiv4b5004h0ww46zkqpq8l","tag_id":"cjsuiv45k00210ww4hchgw06n","_id":"cjsuiv4bp00530ww4i8yaewgt"},{"post_id":"cjsuiv4b7004k0ww4b8ulnvb2","tag_id":"cjsuiv45k00210ww4hchgw06n","_id":"cjsuiv4bq00550ww4c3mf2pwu"},{"post_id":"cjsuiv4b9004n0ww4zaiotpng","tag_id":"cjsuiv45s002c0ww47ygg6su5","_id":"cjsuiv4bs00590ww449md3kpy"},{"post_id":"cjsuiv4bc004q0ww4tq1vcvlf","tag_id":"cjsuiv45s002c0ww47ygg6su5","_id":"cjsuiv4bt005a0ww4xps0ah4y"},{"post_id":"cjsuiv4bj004w0ww432z13ks3","tag_id":"cjsuiv46g00380ww4icnoaf3z","_id":"cjsuiv4bu005c0ww4zkcxgwoc"},{"post_id":"cjsuiv4bf004t0ww4jdsiyp7x","tag_id":"cjsuiv4bm004z0ww4vgd5sxy1","_id":"cjsuiv4bu005d0ww4wi5f2riy"},{"post_id":"cjsuiv4bn00510ww4gxs89ey4","tag_id":"cjsuiv4br00570ww4sec9q2bp","_id":"cjsuiv4bv005f0ww4qpwuzq97"},{"post_id":"cjsuiv4c8005g0ww42ppi1h81","tag_id":"cjsuiv4a4003j0ww4o0ow5c7y","_id":"cjsuiv4cc005i0ww44wn0bsmo"},{"post_id":"cjsuiv4ca005h0ww48d2226m7","tag_id":"cjsuiv4cd005k0ww47vtn3312","_id":"cjsuiv4ce005m0ww4umyue417"}],"Tag":[{"name":"计算机网络","_id":"cjsuiv43000060ww4b28wo78r"},{"name":"TCP/IP","_id":"cjsuiv43e000b0ww4dolz58yj"},{"name":"设计模式","_id":"cjsuiv448000s0ww4h2zfkizj"},{"name":"Git","_id":"cjsuiv45e001u0ww40120yt2m"},{"name":"Hexo","_id":"cjsuiv45k00210ww4hchgw06n"},{"name":"Java","_id":"cjsuiv45s002c0ww47ygg6su5"},{"name":"Linux","_id":"cjsuiv45y002l0ww4cqbqnf34"},{"name":"Markdown","_id":"cjsuiv46d00330ww4yxfj3j2f"},{"name":"Nginx","_id":"cjsuiv46g00380ww4icnoaf3z"},{"name":"Android","_id":"cjsuiv4a4003j0ww4o0ow5c7y"},{"name":"HTTP","_id":"cjsuiv4ab003p0ww4wlqpnt1m"},{"name":"MySQL","_id":"cjsuiv4aj003x0ww4shdhip4l"},{"name":"JVM","_id":"cjsuiv4bm004z0ww4vgd5sxy1"},{"name":"SpringBoot","_id":"cjsuiv4br00570ww4sec9q2bp"},{"name":"源码分析","_id":"cjsuiv4cd005k0ww47vtn3312"}]}}